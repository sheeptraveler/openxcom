!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADAM7_DX	lodepng.cpp	/^static const unsigned ADAM7_DX[7] = { 8, 8, 4, 4, 2, 2, 1 }; \/*x delta values*\/$/;"	v	file:
ADAM7_DY	lodepng.cpp	/^static const unsigned ADAM7_DY[7] = { 8, 8, 8, 4, 4, 2, 2 }; \/*y delta values*\/$/;"	v	file:
ADAM7_IX	lodepng.cpp	/^static const unsigned ADAM7_IX[7] = { 0, 4, 0, 2, 0, 1, 0 }; \/*x start values*\/$/;"	v	file:
ADAM7_IY	lodepng.cpp	/^static const unsigned ADAM7_IY[7] = { 0, 0, 4, 0, 2, 0, 1 }; \/*y start values*\/$/;"	v	file:
AGGRESSIVE_DIST	Geoscape/DogfightState.h	/^const int AGGRESSIVE_DIST = 64;$/;"	m	namespace:OpenXcom
AIMode	Battlescape/AIModule.h	/^enum AIMode { AI_PATROL, AI_AMBUSH, AI_COMBAT, AI_ESCAPE };$/;"	g	namespace:OpenXcom
AIModule	Battlescape/AIModule.cpp	/^AIModule::AIModule(SavedBattleGame *save, BattleUnit *unit, Node *node) :$/;"	f	class:OpenXcom::AIModule
AIModule	Battlescape/AIModule.h	/^class AIModule$/;"	c	namespace:OpenXcom
AI_AMBUSH	Battlescape/AIModule.h	/^enum AIMode { AI_PATROL, AI_AMBUSH, AI_COMBAT, AI_ESCAPE };$/;"	e	enum:OpenXcom::AIMode
AI_COMBAT	Battlescape/AIModule.h	/^enum AIMode { AI_PATROL, AI_AMBUSH, AI_COMBAT, AI_ESCAPE };$/;"	e	enum:OpenXcom::AIMode
AI_ESCAPE	Battlescape/AIModule.h	/^enum AIMode { AI_PATROL, AI_AMBUSH, AI_COMBAT, AI_ESCAPE };$/;"	e	enum:OpenXcom::AIMode
AI_PATROL	Battlescape/AIModule.h	/^enum AIMode { AI_PATROL, AI_AMBUSH, AI_COMBAT, AI_ESCAPE };$/;"	e	enum:OpenXcom::AIMode
ALIGN_BOTTOM	Interface/Text.h	/^enum TextVAlign { ALIGN_TOP, ALIGN_MIDDLE, ALIGN_BOTTOM };$/;"	e	enum:OpenXcom::TextVAlign
ALIGN_CENTER	Interface/Text.h	/^enum TextHAlign { ALIGN_LEFT, ALIGN_CENTER, ALIGN_RIGHT };$/;"	e	enum:OpenXcom::TextHAlign
ALIGN_LEFT	Interface/Text.h	/^enum TextHAlign { ALIGN_LEFT, ALIGN_CENTER, ALIGN_RIGHT };$/;"	e	enum:OpenXcom::TextHAlign
ALIGN_MIDDLE	Interface/Text.h	/^enum TextVAlign { ALIGN_TOP, ALIGN_MIDDLE, ALIGN_BOTTOM };$/;"	e	enum:OpenXcom::TextVAlign
ALIGN_RIGHT	Interface/Text.h	/^enum TextHAlign { ALIGN_LEFT, ALIGN_CENTER, ALIGN_RIGHT };$/;"	e	enum:OpenXcom::TextHAlign
ALIGN_TOP	Interface/Text.h	/^enum TextVAlign { ALIGN_TOP, ALIGN_MIDDLE, ALIGN_BOTTOM };$/;"	e	enum:OpenXcom::TextVAlign
ALTITUDE_STRING	Savegame/Ufo.cpp	/^const char *Ufo::ALTITUDE_STRING[] = {$/;"	m	class:OpenXcom::Ufo	file:
ALTITUDE_STRING	Savegame/Ufo.h	/^	static const char *ALTITUDE_STRING[];$/;"	m	class:OpenXcom::Ufo
AMOT_EARTH_EXISTING_BASE	Mod/RuleAlienMission.h	/^	AMOT_EARTH_EXISTING_BASE,$/;"	e	enum:OpenXcom::AlienMissionOperationType
AMOT_EARTH_NEW_BASE_IF_NECESSARY	Mod/RuleAlienMission.h	/^	AMOT_EARTH_NEW_BASE_IF_NECESSARY,$/;"	e	enum:OpenXcom::AlienMissionOperationType
AMOT_EXISTING_BASE_HUNT_MISSION	Mod/RuleAlienMission.h	/^	AMOT_EXISTING_BASE_HUNT_MISSION$/;"	e	enum:OpenXcom::AlienMissionOperationType
AMOT_REGION_EXISTING_BASE	Mod/RuleAlienMission.h	/^	AMOT_REGION_EXISTING_BASE,$/;"	e	enum:OpenXcom::AlienMissionOperationType
AMOT_REGION_NEW_BASE	Mod/RuleAlienMission.h	/^	AMOT_REGION_NEW_BASE,$/;"	e	enum:OpenXcom::AlienMissionOperationType
AMOT_REGION_NEW_BASE_IF_NECESSARY	Mod/RuleAlienMission.h	/^	AMOT_REGION_NEW_BASE_IF_NECESSARY,$/;"	e	enum:OpenXcom::AlienMissionOperationType
AMOT_SPACE	Mod/RuleAlienMission.h	/^	AMOT_SPACE,$/;"	e	enum:OpenXcom::AlienMissionOperationType
AMS_ENT	Engine/Adlib/fmopl.cpp	102;"	d	file:
AMS_SHIFT	Engine/Adlib/fmopl.cpp	103;"	d	file:
AMS_TABLE	Engine/Adlib/fmopl.cpp	/^static INT32 *AMS_TABLE;$/;"	v	file:
AR	Engine/Adlib/fmopl.h	/^	INT32 *AR;		\/* attack rate     :&AR_TABLE[AR<<2]   *\/$/;"	m	struct:fm_opl_slot
ARGB	Engine/Scalers/xbrz.h	/^    ARGB, \/\/including alpha channel, BGRA byte order on little-endian machines$/;"	e	enum:xbrz::ColorFormat
ARMOR_SORT_NAME_ASC	Basescape/SoldierArmorState.h	/^	ARMOR_SORT_NAME_ASC,$/;"	e	enum:OpenXcom::ArmorSort
ARMOR_SORT_NAME_DESC	Basescape/SoldierArmorState.h	/^	ARMOR_SORT_NAME_DESC,$/;"	e	enum:OpenXcom::ArmorSort
ARMOR_SORT_NONE	Basescape/SoldierArmorState.h	/^	ARMOR_SORT_NONE,$/;"	e	enum:OpenXcom::ArmorSort
ARRAYLEN	Mod/Mod.cpp	110;"	d	file:
ARROW_BIG_DOWN	Interface/ArrowButton.h	/^enum ArrowShape { ARROW_NONE, ARROW_BIG_UP, ARROW_BIG_DOWN, ARROW_SMALL_UP, ARROW_SMALL_DOWN, ARROW_SMALL_LEFT, ARROW_SMALL_RIGHT };$/;"	e	enum:OpenXcom::ArrowShape
ARROW_BIG_UP	Interface/ArrowButton.h	/^enum ArrowShape { ARROW_NONE, ARROW_BIG_UP, ARROW_BIG_DOWN, ARROW_SMALL_UP, ARROW_SMALL_DOWN, ARROW_SMALL_LEFT, ARROW_SMALL_RIGHT };$/;"	e	enum:OpenXcom::ArrowShape
ARROW_HORIZONTAL	Interface/TextList.h	/^enum ArrowOrientation { ARROW_VERTICAL, ARROW_HORIZONTAL };$/;"	e	enum:OpenXcom::ArrowOrientation
ARROW_NONE	Interface/ArrowButton.h	/^enum ArrowShape { ARROW_NONE, ARROW_BIG_UP, ARROW_BIG_DOWN, ARROW_SMALL_UP, ARROW_SMALL_DOWN, ARROW_SMALL_LEFT, ARROW_SMALL_RIGHT };$/;"	e	enum:OpenXcom::ArrowShape
ARROW_SMALL_DOWN	Interface/ArrowButton.h	/^enum ArrowShape { ARROW_NONE, ARROW_BIG_UP, ARROW_BIG_DOWN, ARROW_SMALL_UP, ARROW_SMALL_DOWN, ARROW_SMALL_LEFT, ARROW_SMALL_RIGHT };$/;"	e	enum:OpenXcom::ArrowShape
ARROW_SMALL_LEFT	Interface/ArrowButton.h	/^enum ArrowShape { ARROW_NONE, ARROW_BIG_UP, ARROW_BIG_DOWN, ARROW_SMALL_UP, ARROW_SMALL_DOWN, ARROW_SMALL_LEFT, ARROW_SMALL_RIGHT };$/;"	e	enum:OpenXcom::ArrowShape
ARROW_SMALL_RIGHT	Interface/ArrowButton.h	/^enum ArrowShape { ARROW_NONE, ARROW_BIG_UP, ARROW_BIG_DOWN, ARROW_SMALL_UP, ARROW_SMALL_DOWN, ARROW_SMALL_LEFT, ARROW_SMALL_RIGHT };$/;"	e	enum:OpenXcom::ArrowShape
ARROW_SMALL_UP	Interface/ArrowButton.h	/^enum ArrowShape { ARROW_NONE, ARROW_BIG_UP, ARROW_BIG_DOWN, ARROW_SMALL_UP, ARROW_SMALL_DOWN, ARROW_SMALL_LEFT, ARROW_SMALL_RIGHT };$/;"	e	enum:OpenXcom::ArrowShape
ARROW_VERTICAL	Interface/TextList.h	/^enum ArrowOrientation { ARROW_VERTICAL, ARROW_HORIZONTAL };$/;"	e	enum:OpenXcom::ArrowOrientation
AR_COMMANDER	Mod/AlienRace.h	/^enum AlienRank{AR_HUMAN = -1, AR_COMMANDER, AR_LEADER, AR_ENGINEER, AR_MEDIC, AR_NAVIGATOR, AR_SOLDIER, AR_TERRORIST, AR_TERRORIST2};$/;"	e	enum:AlienRank
AR_ENGINEER	Mod/AlienRace.h	/^enum AlienRank{AR_HUMAN = -1, AR_COMMANDER, AR_LEADER, AR_ENGINEER, AR_MEDIC, AR_NAVIGATOR, AR_SOLDIER, AR_TERRORIST, AR_TERRORIST2};$/;"	e	enum:AlienRank
AR_HUMAN	Mod/AlienRace.h	/^enum AlienRank{AR_HUMAN = -1, AR_COMMANDER, AR_LEADER, AR_ENGINEER, AR_MEDIC, AR_NAVIGATOR, AR_SOLDIER, AR_TERRORIST, AR_TERRORIST2};$/;"	e	enum:AlienRank
AR_LEADER	Mod/AlienRace.h	/^enum AlienRank{AR_HUMAN = -1, AR_COMMANDER, AR_LEADER, AR_ENGINEER, AR_MEDIC, AR_NAVIGATOR, AR_SOLDIER, AR_TERRORIST, AR_TERRORIST2};$/;"	e	enum:AlienRank
AR_MEDIC	Mod/AlienRace.h	/^enum AlienRank{AR_HUMAN = -1, AR_COMMANDER, AR_LEADER, AR_ENGINEER, AR_MEDIC, AR_NAVIGATOR, AR_SOLDIER, AR_TERRORIST, AR_TERRORIST2};$/;"	e	enum:AlienRank
AR_NAVIGATOR	Mod/AlienRace.h	/^enum AlienRank{AR_HUMAN = -1, AR_COMMANDER, AR_LEADER, AR_ENGINEER, AR_MEDIC, AR_NAVIGATOR, AR_SOLDIER, AR_TERRORIST, AR_TERRORIST2};$/;"	e	enum:AlienRank
AR_SOLDIER	Mod/AlienRace.h	/^enum AlienRank{AR_HUMAN = -1, AR_COMMANDER, AR_LEADER, AR_ENGINEER, AR_MEDIC, AR_NAVIGATOR, AR_SOLDIER, AR_TERRORIST, AR_TERRORIST2};$/;"	e	enum:AlienRank
AR_TABLE	Engine/Adlib/fmopl.h	/^	INT32 AR_TABLE[75];	\/* attack rate tables *\/$/;"	m	struct:fm_opl_f
AR_TERRORIST	Mod/AlienRace.h	/^enum AlienRank{AR_HUMAN = -1, AR_COMMANDER, AR_LEADER, AR_ENGINEER, AR_MEDIC, AR_NAVIGATOR, AR_SOLDIER, AR_TERRORIST, AR_TERRORIST2};$/;"	e	enum:AlienRank
AR_TERRORIST2	Mod/AlienRace.h	/^enum AlienRank{AR_HUMAN = -1, AR_COMMANDER, AR_LEADER, AR_ENGINEER, AR_MEDIC, AR_NAVIGATOR, AR_SOLDIER, AR_TERRORIST, AR_TERRORIST2};$/;"	e	enum:AlienRank
AUDIO_CHUNK	Engine/FlcPlayer.cpp	/^	AUDIO_CHUNK = 0xAAAA, \/\/ This is the only exception, it's from TFTD$/;"	e	enum:OpenXcom::ChunkTypes	file:
AUTOSAVE_BATTLESCAPE	Savegame/SavedGame.cpp	/^				  SavedGame::AUTOSAVE_BATTLESCAPE = "_autobattle_.asav",$/;"	m	class:OpenXcom::SavedGame	file:
AUTOSAVE_BATTLESCAPE	Savegame/SavedGame.h	/^	static const std::string AUTOSAVE_GEOSCAPE, AUTOSAVE_BATTLESCAPE, QUICKSAVE;$/;"	m	class:OpenXcom::SavedGame
AUTOSAVE_GEOSCAPE	Savegame/SavedGame.cpp	/^const std::string SavedGame::AUTOSAVE_GEOSCAPE = "_autogeo_.asav",$/;"	m	class:OpenXcom::SavedGame	file:
AUTOSAVE_GEOSCAPE	Savegame/SavedGame.h	/^	static const std::string AUTOSAVE_GEOSCAPE, AUTOSAVE_BATTLESCAPE, QUICKSAVE;$/;"	m	class:OpenXcom::SavedGame
AbandonGameState	Menu/AbandonGameState.cpp	/^AbandonGameState::AbandonGameState(OptionsOrigin origin) : _origin(origin)$/;"	f	class:OpenXcom::AbandonGameState
AbandonGameState	Menu/AbandonGameState.h	/^class AbandonGameState : public State$/;"	c	namespace:OpenXcom
AbortMissionState	Battlescape/AbortMissionState.cpp	/^AbortMissionState::AbortMissionState(SavedBattleGame *battleGame, BattlescapeState *state) : _battleGame(battleGame), _state(state), _inEntrance(0), _inExit(0), _outside(0)$/;"	f	class:OpenXcom::AbortMissionState
AbortMissionState	Battlescape/AbortMissionState.h	/^class AbortMissionState : public State$/;"	c	namespace:OpenXcom
Action	Engine/Action.cpp	/^Action::Action(SDL_Event *ev, double scaleX, double scaleY, int topBlackBand, int leftBlackBand) : _ev(ev), _scaleX(scaleX), _scaleY(scaleY), _topBlackBand(topBlackBand), _leftBlackBand(leftBlackBand), _mouseX(-1), _mouseY(-1), _surfaceX(-1), _surfaceY(-1), _sender(0)$/;"	f	class:OpenXcom::Action
Action	Engine/Action.h	/^class Action$/;"	c	namespace:OpenXcom
ActionHandler	Engine/InteractiveSurface.h	/^typedef void (State::* ActionHandler)(Action*);$/;"	t	namespace:OpenXcom
ActionMenuItem	Battlescape/ActionMenuItem.cpp	/^ActionMenuItem::ActionMenuItem(int id, Game *game, int x, int y) : InteractiveSurface(272, 40, x + 24, y - (id*40)), _highlighted(false), _action(BA_NONE), _skill(nullptr), _tu(0)$/;"	f	class:OpenXcom::ActionMenuItem
ActionMenuItem	Battlescape/ActionMenuItem.h	/^class ActionMenuItem : public InteractiveSurface$/;"	c	namespace:OpenXcom
ActionMenuState	Battlescape/ActionMenuState.cpp	/^ActionMenuState::ActionMenuState(BattleAction *action) : _action(action)$/;"	f	class:OpenXcom::ActionMenuState
ActionMenuState	Battlescape/ActionMenuState.cpp	/^ActionMenuState::ActionMenuState(BattleAction *action, int x, int y) : _action(action)$/;"	f	class:OpenXcom::ActionMenuState
ActionMenuState	Battlescape/ActionMenuState.h	/^class ActionMenuState : public State$/;"	c	namespace:OpenXcom
Adam7_deinterlace	lodepng.cpp	/^static void Adam7_deinterlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)$/;"	f	file:
Adam7_getpassvalues	lodepng.cpp	/^static void Adam7_getpassvalues(unsigned passw[7], unsigned passh[7], size_t filter_passstart[8],$/;"	f	file:
Adam7_interlace	lodepng.cpp	/^static void Adam7_interlace(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)$/;"	f	file:
AddTag	Mod/Mod.cpp	/^const std::string AddTag = "!add";$/;"	m	namespace:OpenXcom::__anon28	file:
AdlibMusic	Engine/AdlibMusic.cpp	/^AdlibMusic::AdlibMusic(float volume) : Music(), _data(0), _size(0), _volume(volume)$/;"	f	class:OpenXcom::AdlibMusic
AdlibMusic	Engine/AdlibMusic.h	/^class AdlibMusic : public Music$/;"	c	namespace:OpenXcom
AlienBase	Savegame/AlienBase.cpp	/^AlienBase::AlienBase(AlienDeployment *deployment, int startMonth) : Target(), _inBattlescape(false), _discovered(false), _deployment(deployment), _startMonth(startMonth), _genMissionCount(0)$/;"	f	class:OpenXcom::AlienBase
AlienBase	Savegame/AlienBase.h	/^class AlienBase : public Target$/;"	c	namespace:OpenXcom
AlienBaseState	Geoscape/AlienBaseState.cpp	/^AlienBaseState::AlienBaseState(AlienBase *base, GeoscapeState *state) : _state(state), _base(base)$/;"	f	class:OpenXcom::AlienBaseState
AlienBaseState	Geoscape/AlienBaseState.h	/^class AlienBaseState : public State$/;"	c	namespace:OpenXcom
AlienDeployment	Mod/AlienDeployment.cpp	/^AlienDeployment::AlienDeployment(const std::string &type) :$/;"	f	class:OpenXcom::AlienDeployment
AlienDeployment	Mod/AlienDeployment.h	/^class AlienDeployment$/;"	c	namespace:OpenXcom
AlienInventory	Battlescape/AlienInventory.cpp	/^AlienInventory::AlienInventory(Game *game, int width, int height, int x, int y) : InteractiveSurface(width, height, x, y), _game(game), _selUnit(0), _dynamicOffset(0), _animFrame(0)$/;"	f	class:OpenXcom::AlienInventory
AlienInventory	Battlescape/AlienInventory.h	/^class AlienInventory : public InteractiveSurface$/;"	c	namespace:OpenXcom
AlienInventoryState	Battlescape/AlienInventoryState.cpp	/^AlienInventoryState::AlienInventoryState(BattleUnit *unit)$/;"	f	class:OpenXcom::AlienInventoryState
AlienInventoryState	Battlescape/AlienInventoryState.h	/^class AlienInventoryState : public State$/;"	c	namespace:OpenXcom
AlienMission	Savegame/AlienMission.cpp	/^AlienMission::AlienMission(const RuleAlienMission &rule) : _rule(rule), _nextWave(0), _nextUfoCounter(0), _spawnCountdown(0), _liveUfos(0),$/;"	f	class:OpenXcom::AlienMission
AlienMission	Savegame/AlienMission.h	/^class AlienMission$/;"	c	namespace:OpenXcom
AlienMissionOperationType	Mod/RuleAlienMission.h	/^enum AlienMissionOperationType {$/;"	g	namespace:OpenXcom
AlienRace	Mod/AlienRace.cpp	/^AlienRace::AlienRace(const std::string &id) : _id(id), _retaliationAggression(0)$/;"	f	class:OpenXcom::AlienRace
AlienRace	Mod/AlienRace.h	/^class AlienRace$/;"	c	namespace:OpenXcom
AlienRank	Mod/AlienRace.h	/^enum AlienRank{AR_HUMAN = -1, AR_COMMANDER, AR_LEADER, AR_ENGINEER, AR_MEDIC, AR_NAVIGATOR, AR_SOLDIER, AR_TERRORIST, AR_TERRORIST2};$/;"	g
AlienStrategy	Savegame/AlienStrategy.cpp	/^AlienStrategy::AlienStrategy()$/;"	f	class:OpenXcom::AlienStrategy
AlienStrategy	Savegame/AlienStrategy.h	/^class AlienStrategy$/;"	c	namespace:OpenXcom
AliensCrashState	Battlescape/AliensCrashState.cpp	/^AliensCrashState::AliensCrashState()$/;"	f	class:OpenXcom::AliensCrashState
AliensCrashState	Battlescape/AliensCrashState.h	/^class AliensCrashState : public State$/;"	c	namespace:OpenXcom
AllocatePsiTrainingState	Geoscape/AllocatePsiTrainingState.cpp	/^AllocatePsiTrainingState::AllocatePsiTrainingState(Base *base) : _sel(0), _base(base), _origSoldierOrder(*_base->getSoldiers())$/;"	f	class:OpenXcom::AllocatePsiTrainingState
AllocatePsiTrainingState	Geoscape/AllocatePsiTrainingState.h	/^class AllocatePsiTrainingState : public State$/;"	c	namespace:OpenXcom
AllocateTrainingState	Geoscape/AllocateTrainingState.cpp	/^AllocateTrainingState::AllocateTrainingState(Base *base) : _sel(0), _base(base), _origSoldierOrder(*_base->getSoldiers())$/;"	f	class:OpenXcom::AllocateTrainingState
AllocateTrainingState	Geoscape/AllocateTrainingState.h	/^class AllocateTrainingState : public State$/;"	c	namespace:OpenXcom
AmmoSlotMax	Mod/RuleItem.h	/^	static const int AmmoSlotMax = 4;$/;"	m	class:OpenXcom::RuleItem
AmmoSlotSelfUse	Mod/RuleItem.h	/^	static const int AmmoSlotSelfUse = -1;$/;"	m	class:OpenXcom::RuleItem
ApplySoldierBonusesParser	Mod/ModScript.h	/^	struct ApplySoldierBonusesParser : ScriptParserEvents<ScriptOutputArgs<>, BattleUnit*, SavedBattleGame*, const RuleSoldierBonus*>$/;"	s	class:OpenXcom::ModScript
ApplySoldierBonusesParser	Mod/RuleSoldierBonus.cpp	/^ModScript::ApplySoldierBonusesParser::ApplySoldierBonusesParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name, "unit", "save_game", "soldier_bonus", }$/;"	f	class:OpenXcom::ModScript::ApplySoldierBonusesParser
AreSame	fmath.h	/^inline bool AreSame(double l, double r)$/;"	f
AreSame	fmath.h	/^inline bool AreSame(float l, float r)$/;"	f
AreaSubset	Engine/GraphSubset.h	/^	AreaSubset():$/;"	f	struct:OpenXcom::AreaSubset
AreaSubset	Engine/GraphSubset.h	/^	AreaSubset(int max_x, int max_y):$/;"	f	struct:OpenXcom::AreaSubset
AreaSubset	Engine/GraphSubset.h	/^	AreaSubset(std::pair<int, int> range_x, std::pair<int, int> range_y):$/;"	f	struct:OpenXcom::AreaSubset
AreaSubset	Engine/GraphSubset.h	/^struct AreaSubset$/;"	s	namespace:OpenXcom
Arg	Engine/ScriptBind.h	/^struct Arg<>$/;"	s	namespace:OpenXcom::helper
Arg	Engine/ScriptBind.h	/^struct Arg<A1, A2...> : public Arg<A2...>$/;"	s	namespace:OpenXcom::helper
ArgBase	Engine/Script.h	/^constexpr ArgEnum ArgBase(ArgEnum arg)$/;"	f	namespace:OpenXcom
ArgColection	Engine/ScriptBind.h	/^struct ArgColection<MaxSize, T1, T2...> : public ArgColection<MaxSize, T2...>$/;"	s	namespace:OpenXcom::helper
ArgColection	Engine/ScriptBind.h	/^struct ArgColection<MaxSize>$/;"	s	namespace:OpenXcom::helper
ArgCompatible	Engine/Script.h	/^constexpr int ArgCompatible(ArgEnum argType, ArgEnum varType, size_t overloadSize)$/;"	f	namespace:OpenXcom
ArgContextDef	Engine/ScriptBind.h	/^struct ArgContextDef : ArgInternal<ArgContextDef>$/;"	s	namespace:OpenXcom::helper
ArgFuncDef	Engine/ScriptBind.h	/^struct ArgFuncDef$/;"	s	namespace:OpenXcom::helper
ArgInternal	Engine/ScriptBind.h	/^struct ArgInternal$/;"	s	namespace:OpenXcom::helper
ArgIsPtr	Engine/Script.h	/^constexpr bool ArgIsPtr(ArgEnum arg)$/;"	f	namespace:OpenXcom
ArgIsPtrE	Engine/Script.h	/^constexpr bool ArgIsPtrE(ArgEnum arg)$/;"	f	namespace:OpenXcom
ArgIsReg	Engine/Script.h	/^constexpr bool ArgIsReg(ArgEnum arg)$/;"	f	namespace:OpenXcom
ArgIsVar	Engine/Script.h	/^constexpr bool ArgIsVar(ArgEnum arg)$/;"	f	namespace:OpenXcom
ArgLabelDef	Engine/ScriptBind.h	/^struct ArgLabelDef$/;"	s	namespace:OpenXcom::helper
ArgName	Engine/Script.h	/^	ArgName(const char *n) : name{ n } { }$/;"	f	struct:OpenXcom::ProgPos::ArgName
ArgName	Engine/Script.h	/^struct ArgName$/;"	s	class:OpenXcom::ProgPos
ArgNext	Engine/Script.h	/^constexpr ArgEnum ArgNext(ArgEnum arg)$/;"	f	namespace:OpenXcom
ArgNextUniqueValue	Engine/Script.h	/^inline ArgEnum ArgNextUniqueValue()$/;"	f	namespace:OpenXcom
ArgNullDef	Engine/ScriptBind.h	/^struct ArgNullDef$/;"	s	namespace:OpenXcom::helper
ArgProgDef	Engine/ScriptBind.h	/^struct ArgProgDef : ArgInternal<ArgProgDef>$/;"	s	namespace:OpenXcom::helper
ArgRawDef	Engine/ScriptBind.h	/^struct ArgRawDef$/;"	s	namespace:OpenXcom::helper
ArgRegDef	Engine/ScriptBind.h	/^struct ArgRegDef$/;"	s	namespace:OpenXcom::helper
ArgRegisteType	Engine/Script.h	/^inline ArgEnum ArgRegisteType()$/;"	f	namespace:OpenXcom
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<ProgPos&>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<ProgPos>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<ScriptFunc>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<ScriptInt&>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<ScriptInt>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<ScriptNull>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<ScriptTag<T, I>&>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<ScriptTag<T, I>>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<ScriptText&>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<ScriptText>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<ScriptWorkerBase&>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<T*&>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<T*>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<bool>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<const ScriptInt&> : ArgSelector<ScriptInt>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<const ScriptTag<T, I>&> : ArgSelector<ScriptTag<T, I>>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<const T*&>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<const T*>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<const Uint8*>$/;"	s	namespace:OpenXcom::helper
ArgSelector	Engine/ScriptBind.h	/^struct ArgSelector<const std::string&>$/;"	s	namespace:OpenXcom::helper
ArgSpecAdd	Engine/Script.h	/^constexpr ArgEnum ArgSpecAdd(ArgEnum arg, ArgSpecEnum spec)$/;"	f	namespace:OpenXcom
ArgSpecRemove	Engine/Script.h	/^constexpr ArgEnum ArgSpecRemove(ArgEnum arg, ArgSpecEnum spec)$/;"	f	namespace:OpenXcom
ArgTextDef	Engine/ScriptBind.h	/^struct ArgTextDef$/;"	s	namespace:OpenXcom::helper
ArgValueDef	Engine/ScriptBind.h	/^struct ArgValueDef$/;"	s	namespace:OpenXcom::helper
Armor	Mod/Armor.cpp	/^Armor::Armor(const std::string &type) :$/;"	f	class:OpenXcom::Armor
Armor	Mod/Armor.h	/^class Armor$/;"	c	namespace:OpenXcom
ArmorEffectiveness	Mod/RuleDamageType.h	/^	float ArmorEffectiveness;$/;"	m	struct:OpenXcom::RuleDamageType
ArmorItem	Basescape/SoldierArmorState.h	/^	ArmorItem(const std::string &_type, const std::string &_name, const std::string &_quantity) : type(_type), name(_name), quantity(_quantity)$/;"	f	struct:OpenXcom::ArmorItem
ArmorItem	Basescape/SoldierArmorState.h	/^struct ArmorItem$/;"	s	namespace:OpenXcom
ArmorMoveCost	Mod/Armor.h	/^struct ArmorMoveCost$/;"	s	namespace:OpenXcom
ArmorSort	Basescape/SoldierArmorState.h	/^enum ArmorSort$/;"	g	namespace:OpenXcom
ArrowBobOffsets	Battlescape/Map.cpp	/^static const int ArrowBobOffsets[8] = {0,1,2,1,0,1,2,1};$/;"	m	namespace:OpenXcom::__anon46	file:
ArrowButton	Interface/ArrowButton.cpp	/^ArrowButton::ArrowButton(ArrowShape shape, int width, int height, int x, int y) : ImageButton(width, height, x, y), _shape(shape), _list(0)$/;"	f	class:OpenXcom::ArrowButton
ArrowButton	Interface/ArrowButton.h	/^class ArrowButton : public ImageButton$/;"	c	namespace:OpenXcom
ArrowOrientation	Interface/TextList.h	/^enum ArrowOrientation { ARROW_VERTICAL, ARROW_HORIZONTAL };$/;"	g	namespace:OpenXcom
ArrowShape	Interface/ArrowButton.h	/^enum ArrowShape { ARROW_NONE, ARROW_BIG_UP, ARROW_BIG_DOWN, ARROW_SMALL_UP, ARROW_SMALL_DOWN, ARROW_SMALL_LEFT, ARROW_SMALL_RIGHT };$/;"	g	namespace:OpenXcom
ArticleCommonState	Ufopaedia/ArticleState.h	/^	struct ArticleCommonState$/;"	s	namespace:OpenXcom
ArticleDefinition	Mod/ArticleDefinition.cpp	/^	ArticleDefinition::ArticleDefinition(UfopaediaTypeId type_id) : customPalette(false), hiddenCommendation(false), _type_id(type_id), _listOrder(0)$/;"	f	class:OpenXcom::ArticleDefinition
ArticleDefinition	Mod/ArticleDefinition.h	/^	class ArticleDefinition$/;"	c	namespace:OpenXcom
ArticleDefinitionArmor	Mod/ArticleDefinition.cpp	/^	ArticleDefinitionArmor::ArticleDefinitionArmor() : ArticleDefinition(UFOPAEDIA_TYPE_ARMOR)$/;"	f	class:OpenXcom::ArticleDefinitionArmor
ArticleDefinitionArmor	Mod/ArticleDefinition.h	/^	class ArticleDefinitionArmor : public ArticleDefinition$/;"	c	namespace:OpenXcom
ArticleDefinitionBaseFacility	Mod/ArticleDefinition.cpp	/^	ArticleDefinitionBaseFacility::ArticleDefinitionBaseFacility() : ArticleDefinition(UFOPAEDIA_TYPE_BASE_FACILITY)$/;"	f	class:OpenXcom::ArticleDefinitionBaseFacility
ArticleDefinitionBaseFacility	Mod/ArticleDefinition.h	/^	class ArticleDefinitionBaseFacility : public ArticleDefinition$/;"	c	namespace:OpenXcom
ArticleDefinitionCraft	Mod/ArticleDefinition.cpp	/^	ArticleDefinitionCraft::ArticleDefinitionCraft() : ArticleDefinition(UFOPAEDIA_TYPE_CRAFT)$/;"	f	class:OpenXcom::ArticleDefinitionCraft
ArticleDefinitionCraft	Mod/ArticleDefinition.h	/^	class ArticleDefinitionCraft : public ArticleDefinition$/;"	c	namespace:OpenXcom
ArticleDefinitionCraftWeapon	Mod/ArticleDefinition.cpp	/^	ArticleDefinitionCraftWeapon::ArticleDefinitionCraftWeapon() : ArticleDefinition(UFOPAEDIA_TYPE_CRAFT_WEAPON)$/;"	f	class:OpenXcom::ArticleDefinitionCraftWeapon
ArticleDefinitionCraftWeapon	Mod/ArticleDefinition.h	/^	class ArticleDefinitionCraftWeapon : public ArticleDefinition$/;"	c	namespace:OpenXcom
ArticleDefinitionItem	Mod/ArticleDefinition.cpp	/^	ArticleDefinitionItem::ArticleDefinitionItem() : ArticleDefinition(UFOPAEDIA_TYPE_ITEM)$/;"	f	class:OpenXcom::ArticleDefinitionItem
ArticleDefinitionItem	Mod/ArticleDefinition.h	/^	class ArticleDefinitionItem : public ArticleDefinition$/;"	c	namespace:OpenXcom
ArticleDefinitionList	Ufopaedia/Ufopaedia.h	/^	typedef std::vector<ArticleDefinition *> ArticleDefinitionList;$/;"	t	namespace:OpenXcom
ArticleDefinitionRect	Mod/ArticleDefinition.cpp	/^	ArticleDefinitionRect::ArticleDefinitionRect() : x(0), y(0), width(0), height(0) {}$/;"	f	class:OpenXcom::ArticleDefinitionRect
ArticleDefinitionRect	Mod/ArticleDefinition.h	/^	class ArticleDefinitionRect$/;"	c	namespace:OpenXcom
ArticleDefinitionTFTD	Mod/ArticleDefinition.cpp	/^	ArticleDefinitionTFTD::ArticleDefinitionTFTD() : ArticleDefinition(UFOPAEDIA_TYPE_TFTD), text_width(0)$/;"	f	class:OpenXcom::ArticleDefinitionTFTD
ArticleDefinitionTFTD	Mod/ArticleDefinition.h	/^	class ArticleDefinitionTFTD : public ArticleDefinition$/;"	c	namespace:OpenXcom
ArticleDefinitionText	Mod/ArticleDefinition.cpp	/^	ArticleDefinitionText::ArticleDefinitionText() : ArticleDefinition(UFOPAEDIA_TYPE_TEXT)$/;"	f	class:OpenXcom::ArticleDefinitionText
ArticleDefinitionText	Mod/ArticleDefinition.h	/^	class ArticleDefinitionText : public ArticleDefinition$/;"	c	namespace:OpenXcom
ArticleDefinitionTextImage	Mod/ArticleDefinition.cpp	/^	ArticleDefinitionTextImage::ArticleDefinitionTextImage() : ArticleDefinition(UFOPAEDIA_TYPE_TEXTIMAGE), text_width(0), align_bottom(false)$/;"	f	class:OpenXcom::ArticleDefinitionTextImage
ArticleDefinitionTextImage	Mod/ArticleDefinition.h	/^	class ArticleDefinitionTextImage : public ArticleDefinition$/;"	c	namespace:OpenXcom
ArticleDefinitionUfo	Mod/ArticleDefinition.cpp	/^	ArticleDefinitionUfo::ArticleDefinitionUfo() : ArticleDefinition(UFOPAEDIA_TYPE_UFO)$/;"	f	class:OpenXcom::ArticleDefinitionUfo
ArticleDefinitionUfo	Mod/ArticleDefinition.h	/^	class ArticleDefinitionUfo : public ArticleDefinition$/;"	c	namespace:OpenXcom
ArticleDefinitionVehicle	Mod/ArticleDefinition.cpp	/^	ArticleDefinitionVehicle::ArticleDefinitionVehicle() : ArticleDefinition(UFOPAEDIA_TYPE_VEHICLE)$/;"	f	class:OpenXcom::ArticleDefinitionVehicle
ArticleDefinitionVehicle	Mod/ArticleDefinition.h	/^	class ArticleDefinitionVehicle : public ArticleDefinition$/;"	c	namespace:OpenXcom
ArticlePage	Mod/ArticleDefinition.h	/^	struct ArticlePage$/;"	s	namespace:OpenXcom
ArticleState	Ufopaedia/ArticleState.cpp	/^	ArticleState::ArticleState(const std::string &article_id, std::shared_ptr<ArticleCommonState> state) : _id(article_id)$/;"	f	class:OpenXcom::ArticleState
ArticleState	Ufopaedia/ArticleState.h	/^	class ArticleState : public State$/;"	c	namespace:OpenXcom
ArticleStateArmor	Ufopaedia/ArticleStateArmor.cpp	/^	ArticleStateArmor::ArticleStateArmor(ArticleDefinitionArmor *defs, std::shared_ptr<ArticleCommonState> state) : ArticleState(defs->id, std::move(state)), _row(0)$/;"	f	class:OpenXcom::ArticleStateArmor
ArticleStateArmor	Ufopaedia/ArticleStateArmor.h	/^	class ArticleStateArmor : public ArticleState$/;"	c	namespace:OpenXcom
ArticleStateBaseFacility	Ufopaedia/ArticleStateBaseFacility.cpp	/^	ArticleStateBaseFacility::ArticleStateBaseFacility(ArticleDefinitionBaseFacility *defs, std::shared_ptr<ArticleCommonState> state) : ArticleState(defs->id, std::move(state))$/;"	f	class:OpenXcom::ArticleStateBaseFacility
ArticleStateBaseFacility	Ufopaedia/ArticleStateBaseFacility.h	/^	class ArticleStateBaseFacility : public ArticleState$/;"	c	namespace:OpenXcom
ArticleStateCraft	Ufopaedia/ArticleStateCraft.cpp	/^	ArticleStateCraft::ArticleStateCraft(ArticleDefinitionCraft *defs, std::shared_ptr<ArticleCommonState> state) : ArticleState(defs->id, std::move(state))$/;"	f	class:OpenXcom::ArticleStateCraft
ArticleStateCraft	Ufopaedia/ArticleStateCraft.h	/^	class ArticleStateCraft : public ArticleState$/;"	c	namespace:OpenXcom
ArticleStateCraftWeapon	Ufopaedia/ArticleStateCraftWeapon.cpp	/^	ArticleStateCraftWeapon::ArticleStateCraftWeapon(ArticleDefinitionCraftWeapon *defs, std::shared_ptr<ArticleCommonState> state) : ArticleState(defs->id, std::move(state))$/;"	f	class:OpenXcom::ArticleStateCraftWeapon
ArticleStateCraftWeapon	Ufopaedia/ArticleStateCraftWeapon.h	/^	class ArticleStateCraftWeapon : public ArticleState$/;"	c	namespace:OpenXcom
ArticleStateItem	Ufopaedia/ArticleStateItem.cpp	/^	ArticleStateItem::ArticleStateItem(ArticleDefinitionItem *defs, std::shared_ptr<ArticleCommonState> state) : ArticleState(defs->id, std::move(state))$/;"	f	class:OpenXcom::ArticleStateItem
ArticleStateItem	Ufopaedia/ArticleStateItem.h	/^	class ArticleStateItem : public ArticleState$/;"	c	namespace:OpenXcom
ArticleStateTFTD	Ufopaedia/ArticleStateTFTD.cpp	/^	ArticleStateTFTD::ArticleStateTFTD(ArticleDefinitionTFTD *defs, std::shared_ptr<ArticleCommonState> state) : ArticleState(defs->id, std::move(state))$/;"	f	class:OpenXcom::ArticleStateTFTD
ArticleStateTFTD	Ufopaedia/ArticleStateTFTD.h	/^	class ArticleStateTFTD : public ArticleState$/;"	c	namespace:OpenXcom
ArticleStateTFTDArmor	Ufopaedia/ArticleStateTFTDArmor.cpp	/^	ArticleStateTFTDArmor::ArticleStateTFTDArmor(ArticleDefinitionTFTD *defs, std::shared_ptr<ArticleCommonState> state) : ArticleStateTFTD(defs, std::move(state)), _row(0)$/;"	f	class:OpenXcom::ArticleStateTFTDArmor
ArticleStateTFTDArmor	Ufopaedia/ArticleStateTFTDArmor.h	/^	class ArticleStateTFTDArmor : public ArticleStateTFTD$/;"	c	namespace:OpenXcom
ArticleStateTFTDCraft	Ufopaedia/ArticleStateTFTDCraft.cpp	/^	ArticleStateTFTDCraft::ArticleStateTFTDCraft(ArticleDefinitionTFTD *defs, std::shared_ptr<ArticleCommonState> state) : ArticleStateTFTD(defs, std::move(state))$/;"	f	class:OpenXcom::ArticleStateTFTDCraft
ArticleStateTFTDCraft	Ufopaedia/ArticleStateTFTDCraft.h	/^	class ArticleStateTFTDCraft : public ArticleStateTFTD$/;"	c	namespace:OpenXcom
ArticleStateTFTDCraftWeapon	Ufopaedia/ArticleStateTFTDCraftWeapon.cpp	/^	ArticleStateTFTDCraftWeapon::ArticleStateTFTDCraftWeapon(ArticleDefinitionTFTD *defs, std::shared_ptr<ArticleCommonState> state) : ArticleStateTFTD(defs, std::move(state))$/;"	f	class:OpenXcom::ArticleStateTFTDCraftWeapon
ArticleStateTFTDCraftWeapon	Ufopaedia/ArticleStateTFTDCraftWeapon.h	/^	class ArticleStateTFTDCraftWeapon : public ArticleStateTFTD$/;"	c	namespace:OpenXcom
ArticleStateTFTDFacility	Ufopaedia/ArticleStateTFTDFacility.cpp	/^	ArticleStateTFTDFacility::ArticleStateTFTDFacility(ArticleDefinitionTFTD *defs, std::shared_ptr<ArticleCommonState> state) : ArticleStateTFTD(defs, std::move(state))$/;"	f	class:OpenXcom::ArticleStateTFTDFacility
ArticleStateTFTDFacility	Ufopaedia/ArticleStateTFTDFacility.h	/^	class ArticleStateTFTDFacility : public ArticleStateTFTD$/;"	c	namespace:OpenXcom
ArticleStateTFTDItem	Ufopaedia/ArticleStateTFTDItem.cpp	/^	ArticleStateTFTDItem::ArticleStateTFTDItem(ArticleDefinitionTFTD *defs, std::shared_ptr<ArticleCommonState> state) : ArticleStateTFTD(defs, std::move(state))$/;"	f	class:OpenXcom::ArticleStateTFTDItem
ArticleStateTFTDItem	Ufopaedia/ArticleStateTFTDItem.h	/^	class ArticleStateTFTDItem : public ArticleStateTFTD$/;"	c	namespace:OpenXcom
ArticleStateTFTDUso	Ufopaedia/ArticleStateTFTDUso.cpp	/^	ArticleStateTFTDUso::ArticleStateTFTDUso(ArticleDefinitionTFTD *defs, std::shared_ptr<ArticleCommonState> state) : ArticleStateTFTD(defs, std::move(state))$/;"	f	class:OpenXcom::ArticleStateTFTDUso
ArticleStateTFTDUso	Ufopaedia/ArticleStateTFTDUso.h	/^	class ArticleStateTFTDUso : public ArticleStateTFTD$/;"	c	namespace:OpenXcom
ArticleStateTFTDVehicle	Ufopaedia/ArticleStateTFTDVehicle.cpp	/^	ArticleStateTFTDVehicle::ArticleStateTFTDVehicle(ArticleDefinitionTFTD *defs, std::shared_ptr<ArticleCommonState> state) : ArticleStateTFTD(defs, std::move(state))$/;"	f	class:OpenXcom::ArticleStateTFTDVehicle
ArticleStateTFTDVehicle	Ufopaedia/ArticleStateTFTDVehicle.h	/^	class ArticleStateTFTDVehicle : public ArticleStateTFTD$/;"	c	namespace:OpenXcom
ArticleStateText	Ufopaedia/ArticleStateText.cpp	/^	ArticleStateText::ArticleStateText(ArticleDefinitionText *defs, std::shared_ptr<ArticleCommonState> state) : ArticleState(defs->id, std::move(state))$/;"	f	class:OpenXcom::ArticleStateText
ArticleStateText	Ufopaedia/ArticleStateText.h	/^	class ArticleStateText : public ArticleState$/;"	c	namespace:OpenXcom
ArticleStateTextImage	Ufopaedia/ArticleStateTextImage.cpp	/^	ArticleStateTextImage::ArticleStateTextImage(ArticleDefinitionTextImage *defs, std::shared_ptr<ArticleCommonState> state) : ArticleState(defs->id, std::move(state))$/;"	f	class:OpenXcom::ArticleStateTextImage
ArticleStateTextImage	Ufopaedia/ArticleStateTextImage.h	/^	class ArticleStateTextImage : public ArticleState$/;"	c	namespace:OpenXcom
ArticleStateUfo	Ufopaedia/ArticleStateUfo.cpp	/^	ArticleStateUfo::ArticleStateUfo(ArticleDefinitionUfo *defs, std::shared_ptr<ArticleCommonState> state) : ArticleState(defs->id, std::move(state))$/;"	f	class:OpenXcom::ArticleStateUfo
ArticleStateUfo	Ufopaedia/ArticleStateUfo.h	/^	class ArticleStateUfo : public ArticleState$/;"	c	namespace:OpenXcom
ArticleStateVehicle	Ufopaedia/ArticleStateVehicle.cpp	/^	ArticleStateVehicle::ArticleStateVehicle(ArticleDefinitionVehicle *defs, std::shared_ptr<ArticleCommonState> state) : ArticleState(defs->id, std::move(state))$/;"	f	class:OpenXcom::ArticleStateVehicle
ArticleStateVehicle	Ufopaedia/ArticleStateVehicle.h	/^	class ArticleStateVehicle : public ArticleState$/;"	c	namespace:OpenXcom
AudioBuffer	Engine/FlcPlayer.h	/^	typedef struct AudioBuffer$/;"	s	class:OpenXcom::FlcPlayer
AudioBuffer	Engine/FlcPlayer.h	/^	}AudioBuffer;$/;"	t	class:OpenXcom::FlcPlayer	typeref:struct:OpenXcom::FlcPlayer::AudioBuffer
AudioData	Engine/FlcPlayer.h	/^	typedef struct AudioData$/;"	s	class:OpenXcom::FlcPlayer
AudioData	Engine/FlcPlayer.h	/^	}AudioData;$/;"	t	class:OpenXcom::FlcPlayer	typeref:struct:OpenXcom::FlcPlayer::AudioData
AudioSequence	Menu/VideoState.cpp	/^	AudioSequence(Mod *_mod, FlcPlayer *flcPlayer) : mod(_mod), m(0), s(0), trackPosition(0), _flcPlayer(flcPlayer)$/;"	f	struct:OpenXcom::AudioSequence
AudioSequence	Menu/VideoState.cpp	/^static struct AudioSequence$/;"	s	namespace:OpenXcom	file:
AwardExperienceParser	Mod/ModScript.h	/^	struct AwardExperienceParser : ScriptParserEvents<Output, const BattleUnit*, const BattleUnit*, const BattleItem*, int>$/;"	s	class:OpenXcom::ModScript
AwardExperienceParser	Savegame/BattleUnit.cpp	/^ModScript::AwardExperienceParser::AwardExperienceParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::AwardExperienceParser
BASESCAPE_CURSOR	Mod/Mod.cpp	/^int Mod::BASESCAPE_CURSOR;$/;"	m	class:OpenXcom::Mod	file:
BASESCAPE_CURSOR	Mod/Mod.h	/^	static int BASESCAPE_CURSOR;$/;"	m	class:OpenXcom::Mod
BASE_LABEL_COLOR	Geoscape/Globe.cpp	/^Uint8 Globe::BASE_LABEL_COLOR;$/;"	m	class:OpenXcom::Globe	file:
BASE_LABEL_COLOR	Geoscape/Globe.h	/^	static Uint8 BASE_LABEL_COLOR;$/;"	m	class:OpenXcom::Globe
BASE_SIZE	Basescape/BaseView.h	/^	static const int BASE_SIZE = 6;$/;"	m	class:OpenXcom::BaseView
BASE_SIZE	Savegame/Base.h	/^	static const int BASE_SIZE = 6;$/;"	m	class:OpenXcom::Base
BATTLESCAPE_CURSOR	Mod/Mod.cpp	/^int Mod::BATTLESCAPE_CURSOR;$/;"	m	class:OpenXcom::Mod	file:
BATTLESCAPE_CURSOR	Mod/Mod.h	/^	static int BATTLESCAPE_CURSOR;$/;"	m	class:OpenXcom::Mod
BDA_DESTROY	Geoscape/BaseDefenseState.h	/^enum BaseDefenseActionType { BDA_NONE, BDA_FIRE, BDA_RESOLVE, BDA_DESTROY, BDA_END };$/;"	e	enum:OpenXcom::BaseDefenseActionType
BDA_END	Geoscape/BaseDefenseState.h	/^enum BaseDefenseActionType { BDA_NONE, BDA_FIRE, BDA_RESOLVE, BDA_DESTROY, BDA_END };$/;"	e	enum:OpenXcom::BaseDefenseActionType
BDA_FIRE	Geoscape/BaseDefenseState.h	/^enum BaseDefenseActionType { BDA_NONE, BDA_FIRE, BDA_RESOLVE, BDA_DESTROY, BDA_END };$/;"	e	enum:OpenXcom::BaseDefenseActionType
BDA_NONE	Geoscape/BaseDefenseState.h	/^enum BaseDefenseActionType { BDA_NONE, BDA_FIRE, BDA_RESOLVE, BDA_DESTROY, BDA_END };$/;"	e	enum:OpenXcom::BaseDefenseActionType
BDA_RESOLVE	Geoscape/BaseDefenseState.h	/^enum BaseDefenseActionType { BDA_NONE, BDA_FIRE, BDA_RESOLVE, BDA_DESTROY, BDA_END };$/;"	e	enum:OpenXcom::BaseDefenseActionType
BFT_FIX_MAX	Mod/RuleItem.h	/^enum BattleFuseType { BFT_NONE = -3, BFT_INSTANT = -2, BFT_SET = -1, BFT_FIX_MIN = 0, BFT_FIX_MAX = 64 };$/;"	e	enum:OpenXcom::BattleFuseType
BFT_FIX_MIN	Mod/RuleItem.h	/^enum BattleFuseType { BFT_NONE = -3, BFT_INSTANT = -2, BFT_SET = -1, BFT_FIX_MIN = 0, BFT_FIX_MAX = 64 };$/;"	e	enum:OpenXcom::BattleFuseType
BFT_INSTANT	Mod/RuleItem.h	/^enum BattleFuseType { BFT_NONE = -3, BFT_INSTANT = -2, BFT_SET = -1, BFT_FIX_MIN = 0, BFT_FIX_MAX = 64 };$/;"	e	enum:OpenXcom::BattleFuseType
BFT_NONE	Mod/RuleItem.h	/^enum BattleFuseType { BFT_NONE = -3, BFT_INSTANT = -2, BFT_SET = -1, BFT_FIX_MIN = 0, BFT_FIX_MAX = 64 };$/;"	e	enum:OpenXcom::BattleFuseType
BFT_SET	Mod/RuleItem.h	/^enum BattleFuseType { BFT_NONE = -3, BFT_INSTANT = -2, BFT_SET = -1, BFT_FIX_MIN = 0, BFT_FIX_MAX = 64 };$/;"	e	enum:OpenXcom::BattleFuseType
BIGWALLEAST	Battlescape/Pathfinding.h	/^	enum bigWallTypes{ BLOCK = 1, BIGWALLNESW, BIGWALLNWSE, BIGWALLWEST, BIGWALLNORTH, BIGWALLEAST, BIGWALLSOUTH, BIGWALLEASTANDSOUTH, BIGWALLWESTANDNORTH};$/;"	e	enum:OpenXcom::Pathfinding::bigWallTypes
BIGWALLEASTANDSOUTH	Battlescape/Pathfinding.h	/^	enum bigWallTypes{ BLOCK = 1, BIGWALLNESW, BIGWALLNWSE, BIGWALLWEST, BIGWALLNORTH, BIGWALLEAST, BIGWALLSOUTH, BIGWALLEASTANDSOUTH, BIGWALLWESTANDNORTH};$/;"	e	enum:OpenXcom::Pathfinding::bigWallTypes
BIGWALLNESW	Battlescape/Pathfinding.h	/^	enum bigWallTypes{ BLOCK = 1, BIGWALLNESW, BIGWALLNWSE, BIGWALLWEST, BIGWALLNORTH, BIGWALLEAST, BIGWALLSOUTH, BIGWALLEASTANDSOUTH, BIGWALLWESTANDNORTH};$/;"	e	enum:OpenXcom::Pathfinding::bigWallTypes
BIGWALLNORTH	Battlescape/Pathfinding.h	/^	enum bigWallTypes{ BLOCK = 1, BIGWALLNESW, BIGWALLNWSE, BIGWALLWEST, BIGWALLNORTH, BIGWALLEAST, BIGWALLSOUTH, BIGWALLEASTANDSOUTH, BIGWALLWESTANDNORTH};$/;"	e	enum:OpenXcom::Pathfinding::bigWallTypes
BIGWALLNWSE	Battlescape/Pathfinding.h	/^	enum bigWallTypes{ BLOCK = 1, BIGWALLNESW, BIGWALLNWSE, BIGWALLWEST, BIGWALLNORTH, BIGWALLEAST, BIGWALLSOUTH, BIGWALLEASTANDSOUTH, BIGWALLWESTANDNORTH};$/;"	e	enum:OpenXcom::Pathfinding::bigWallTypes
BIGWALLSOUTH	Battlescape/Pathfinding.h	/^	enum bigWallTypes{ BLOCK = 1, BIGWALLNESW, BIGWALLNWSE, BIGWALLWEST, BIGWALLNORTH, BIGWALLEAST, BIGWALLSOUTH, BIGWALLEASTANDSOUTH, BIGWALLWESTANDNORTH};$/;"	e	enum:OpenXcom::Pathfinding::bigWallTypes
BIGWALLWEST	Battlescape/Pathfinding.h	/^	enum bigWallTypes{ BLOCK = 1, BIGWALLNESW, BIGWALLNWSE, BIGWALLWEST, BIGWALLNORTH, BIGWALLEAST, BIGWALLSOUTH, BIGWALLEASTANDSOUTH, BIGWALLWESTANDNORTH};$/;"	e	enum:OpenXcom::Pathfinding::bigWallTypes
BIGWALLWESTANDNORTH	Battlescape/Pathfinding.h	/^	enum bigWallTypes{ BLOCK = 1, BIGWALLNESW, BIGWALLNWSE, BIGWALLWEST, BIGWALLNORTH, BIGWALLEAST, BIGWALLSOUTH, BIGWALLEASTANDSOUTH, BIGWALLWESTANDNORTH};$/;"	e	enum:OpenXcom::Pathfinding::bigWallTypes
BLACK	Engine/FlcPlayer.cpp	/^	BLACK = 0x0D,$/;"	e	enum:OpenXcom::ChunkTypes	file:
BLEND_DOMINANT	Engine/Scalers/xbrz.cpp	/^    BLEND_DOMINANT \/\/a strong indication to blend$/;"	e	enum:__anon10::BlendType	file:
BLEND_NONE	Engine/Scalers/xbrz.cpp	/^    BLEND_NONE = 0,$/;"	e	enum:__anon10::BlendType	file:
BLEND_NORMAL	Engine/Scalers/xbrz.cpp	/^    BLEND_NORMAL,   \/\/a normal indication to blend$/;"	e	enum:__anon10::BlendType	file:
BLOB_MIN	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
BLOCK	Battlescape/Pathfinding.h	/^	enum bigWallTypes{ BLOCK = 1, BIGWALLNESW, BIGWALLNWSE, BIGWALLWEST, BIGWALLNORTH, BIGWALLEAST, BIGWALLSOUTH, BIGWALLEASTANDSOUTH, BIGWALLWESTANDNORTH};$/;"	e	enum:OpenXcom::Pathfinding::bigWallTypes
BMA_HEAL	Mod/RuleItem.h	/^enum BattleMediKitAction { BMA_HEAL = 1, BMA_STIMULANT = 2, BMA_PAINKILLER = 4 };$/;"	e	enum:OpenXcom::BattleMediKitAction
BMA_PAINKILLER	Mod/RuleItem.h	/^enum BattleMediKitAction { BMA_HEAL = 1, BMA_STIMULANT = 2, BMA_PAINKILLER = 4 };$/;"	e	enum:OpenXcom::BattleMediKitAction
BMA_STIMULANT	Mod/RuleItem.h	/^enum BattleMediKitAction { BMA_HEAL = 1, BMA_STIMULANT = 2, BMA_PAINKILLER = 4 };$/;"	e	enum:OpenXcom::BattleMediKitAction
BMT_HEAL	Mod/RuleItem.h	/^enum BattleMediKitType { BMT_NORMAL = 0, BMT_HEAL = 1, BMT_STIMULANT = 2, BMT_PAINKILLER = 3 };$/;"	e	enum:OpenXcom::BattleMediKitType
BMT_NORMAL	Mod/RuleItem.h	/^enum BattleMediKitType { BMT_NORMAL = 0, BMT_HEAL = 1, BMT_STIMULANT = 2, BMT_PAINKILLER = 3 };$/;"	e	enum:OpenXcom::BattleMediKitType
BMT_PAINKILLER	Mod/RuleItem.h	/^enum BattleMediKitType { BMT_NORMAL = 0, BMT_HEAL = 1, BMT_STIMULANT = 2, BMT_PAINKILLER = 3 };$/;"	e	enum:OpenXcom::BattleMediKitType
BMT_STIMULANT	Mod/RuleItem.h	/^enum BattleMediKitType { BMT_NORMAL = 0, BMT_HEAL = 1, BMT_STIMULANT = 2, BMT_PAINKILLER = 3 };$/;"	e	enum:OpenXcom::BattleMediKitType
BODYPART_COLLAPSING	Savegame/BattleUnit.h	/^enum UnitBodyPartEx {BODYPART_LEGS = BODYPART_MAX, BODYPART_COLLAPSING, BODYPART_ITEM_RIGHTHAND, BODYPART_ITEM_LEFTHAND, BODYPART_ITEM_FLOOR, BODYPART_ITEM_INVENTORY, BODYPART_LARGE_TORSO, BODYPART_LARGE_PROPULSION = BODYPART_LARGE_TORSO + 4, BODYPART_LARGE_TURRET = BODYPART_LARGE_PROPULSION + 4};$/;"	e	enum:OpenXcom::UnitBodyPartEx
BODYPART_ITEM_FLOOR	Savegame/BattleUnit.h	/^enum UnitBodyPartEx {BODYPART_LEGS = BODYPART_MAX, BODYPART_COLLAPSING, BODYPART_ITEM_RIGHTHAND, BODYPART_ITEM_LEFTHAND, BODYPART_ITEM_FLOOR, BODYPART_ITEM_INVENTORY, BODYPART_LARGE_TORSO, BODYPART_LARGE_PROPULSION = BODYPART_LARGE_TORSO + 4, BODYPART_LARGE_TURRET = BODYPART_LARGE_PROPULSION + 4};$/;"	e	enum:OpenXcom::UnitBodyPartEx
BODYPART_ITEM_INVENTORY	Savegame/BattleUnit.h	/^enum UnitBodyPartEx {BODYPART_LEGS = BODYPART_MAX, BODYPART_COLLAPSING, BODYPART_ITEM_RIGHTHAND, BODYPART_ITEM_LEFTHAND, BODYPART_ITEM_FLOOR, BODYPART_ITEM_INVENTORY, BODYPART_LARGE_TORSO, BODYPART_LARGE_PROPULSION = BODYPART_LARGE_TORSO + 4, BODYPART_LARGE_TURRET = BODYPART_LARGE_PROPULSION + 4};$/;"	e	enum:OpenXcom::UnitBodyPartEx
BODYPART_ITEM_LEFTHAND	Savegame/BattleUnit.h	/^enum UnitBodyPartEx {BODYPART_LEGS = BODYPART_MAX, BODYPART_COLLAPSING, BODYPART_ITEM_RIGHTHAND, BODYPART_ITEM_LEFTHAND, BODYPART_ITEM_FLOOR, BODYPART_ITEM_INVENTORY, BODYPART_LARGE_TORSO, BODYPART_LARGE_PROPULSION = BODYPART_LARGE_TORSO + 4, BODYPART_LARGE_TURRET = BODYPART_LARGE_PROPULSION + 4};$/;"	e	enum:OpenXcom::UnitBodyPartEx
BODYPART_ITEM_RIGHTHAND	Savegame/BattleUnit.h	/^enum UnitBodyPartEx {BODYPART_LEGS = BODYPART_MAX, BODYPART_COLLAPSING, BODYPART_ITEM_RIGHTHAND, BODYPART_ITEM_LEFTHAND, BODYPART_ITEM_FLOOR, BODYPART_ITEM_INVENTORY, BODYPART_LARGE_TORSO, BODYPART_LARGE_PROPULSION = BODYPART_LARGE_TORSO + 4, BODYPART_LARGE_TURRET = BODYPART_LARGE_PROPULSION + 4};$/;"	e	enum:OpenXcom::UnitBodyPartEx
BODYPART_LARGE_PROPULSION	Savegame/BattleUnit.h	/^enum UnitBodyPartEx {BODYPART_LEGS = BODYPART_MAX, BODYPART_COLLAPSING, BODYPART_ITEM_RIGHTHAND, BODYPART_ITEM_LEFTHAND, BODYPART_ITEM_FLOOR, BODYPART_ITEM_INVENTORY, BODYPART_LARGE_TORSO, BODYPART_LARGE_PROPULSION = BODYPART_LARGE_TORSO + 4, BODYPART_LARGE_TURRET = BODYPART_LARGE_PROPULSION + 4};$/;"	e	enum:OpenXcom::UnitBodyPartEx
BODYPART_LARGE_TORSO	Savegame/BattleUnit.h	/^enum UnitBodyPartEx {BODYPART_LEGS = BODYPART_MAX, BODYPART_COLLAPSING, BODYPART_ITEM_RIGHTHAND, BODYPART_ITEM_LEFTHAND, BODYPART_ITEM_FLOOR, BODYPART_ITEM_INVENTORY, BODYPART_LARGE_TORSO, BODYPART_LARGE_PROPULSION = BODYPART_LARGE_TORSO + 4, BODYPART_LARGE_TURRET = BODYPART_LARGE_PROPULSION + 4};$/;"	e	enum:OpenXcom::UnitBodyPartEx
BODYPART_LARGE_TURRET	Savegame/BattleUnit.h	/^enum UnitBodyPartEx {BODYPART_LEGS = BODYPART_MAX, BODYPART_COLLAPSING, BODYPART_ITEM_RIGHTHAND, BODYPART_ITEM_LEFTHAND, BODYPART_ITEM_FLOOR, BODYPART_ITEM_INVENTORY, BODYPART_LARGE_TORSO, BODYPART_LARGE_PROPULSION = BODYPART_LARGE_TORSO + 4, BODYPART_LARGE_TURRET = BODYPART_LARGE_PROPULSION + 4};$/;"	e	enum:OpenXcom::UnitBodyPartEx
BODYPART_LEGS	Savegame/BattleUnit.h	/^enum UnitBodyPartEx {BODYPART_LEGS = BODYPART_MAX, BODYPART_COLLAPSING, BODYPART_ITEM_RIGHTHAND, BODYPART_ITEM_LEFTHAND, BODYPART_ITEM_FLOOR, BODYPART_ITEM_INVENTORY, BODYPART_LARGE_TORSO, BODYPART_LARGE_PROPULSION = BODYPART_LARGE_TORSO + 4, BODYPART_LARGE_TURRET = BODYPART_LARGE_PROPULSION + 4};$/;"	e	enum:OpenXcom::UnitBodyPartEx
BPMLists	lodepng.cpp	/^typedef struct BPMLists$/;"	s	file:
BPMLists	lodepng.cpp	/^} BPMLists;$/;"	t	typeref:struct:BPMLists	file:
BPMNode	lodepng.cpp	/^typedef struct BPMNode$/;"	s	file:
BPMNode	lodepng.cpp	/^} BPMNode;$/;"	t	typeref:struct:BPMNode	file:
BT_AMMO	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	e	enum:OpenXcom::BattleType
BT_CORPSE	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	e	enum:OpenXcom::BattleType
BT_FIREARM	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	e	enum:OpenXcom::BattleType
BT_FLARE	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	e	enum:OpenXcom::BattleType
BT_GRENADE	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	e	enum:OpenXcom::BattleType
BT_MEDIKIT	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	e	enum:OpenXcom::BattleType
BT_MELEE	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	e	enum:OpenXcom::BattleType
BT_MINDPROBE	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	e	enum:OpenXcom::BattleType
BT_NONE	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	e	enum:OpenXcom::BattleType
BT_PROXIMITYGRENADE	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	e	enum:OpenXcom::BattleType
BT_PSIAMP	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	e	enum:OpenXcom::BattleType
BT_SCANNER	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	e	enum:OpenXcom::BattleType
BUBBLES_FIRST_FRAME	Savegame/BattleUnit.h	/^	static const int BUBBLES_FIRST_FRAME = 3;$/;"	m	class:OpenXcom::BattleUnit
BUBBLES_LAST_FRAME	Savegame/BattleUnit.h	/^	static const int BUBBLES_LAST_FRAME = BUBBLES_FIRST_FRAME + 15;$/;"	m	class:OpenXcom::BattleUnit
BUILD_YM3812	Engine/Adlib/fmopl.h	4;"	d
BULLET_FRAMES	Battlescape/Explosion.cpp	/^const int Explosion::BULLET_FRAMES = 10;$/;"	m	class:OpenXcom::Explosion	file:
BULLET_FRAMES	Battlescape/Explosion.h	/^	static const int BULLET_FRAMES;$/;"	m	class:OpenXcom::Explosion
BULLET_SPRITES	Battlescape/Map.h	/^	static const int BULLET_SPRITES = 35;$/;"	m	class:OpenXcom::Map
BUTTON_HEIGHT	Geoscape/MultipleTargetsState.h	/^	static const int BUTTON_HEIGHT = 16;$/;"	m	class:OpenXcom::MultipleTargetsState
BUTTON_PRESS	Mod/Mod.cpp	/^int Mod::BUTTON_PRESS;$/;"	m	class:OpenXcom::Mod	file:
BUTTON_PRESS	Mod/Mod.h	/^	static int BUTTON_PRESS;$/;"	m	class:OpenXcom::Mod
BUTTON_WIDTH	Interface/ComboBox.cpp	/^const int ComboBox::BUTTON_WIDTH = 14;$/;"	m	class:OpenXcom::ComboBox	file:
BUTTON_WIDTH	Interface/ComboBox.h	/^	static const int BUTTON_WIDTH;$/;"	m	class:OpenXcom::ComboBox
BY_LIST_ORDER	Savegame/Transfer.h	/^	BY_LIST_ORDER,$/;"	m	class:OpenXcom::TransferSortDirection
BY_TOTAL_SIZE	Savegame/Transfer.h	/^	BY_TOTAL_SIZE,$/;"	m	class:OpenXcom::TransferSortDirection
BY_UNIT_COST	Savegame/Transfer.h	/^	BY_UNIT_COST,$/;"	m	class:OpenXcom::TransferSortDirection
BY_UNIT_SIZE	Savegame/Transfer.h	/^	BY_UNIT_SIZE,$/;"	m	class:OpenXcom::TransferSortDirection
BZF_MD5_H	md5.h	34;"	d
BadMove	main.cpp	/^	BadMove(BadMove&& b)$/;"	f	struct:BadMove
BadMove	main.cpp	/^	BadMove(const BadMove& b)$/;"	f	struct:BadMove
BadMove	main.cpp	/^	BadMove(int b)$/;"	f	struct:BadMove
BadMove	main.cpp	/^struct BadMove$/;"	s	file:
Bar	Interface/Bar.cpp	/^Bar::Bar(int width, int height, int x, int y) : Surface(width, height, x, y), _color(0), _color2(0), _borderColor(0), _scale(0), _max(0), _value(0), _value2(0), _secondOnTop(true)$/;"	f	class:OpenXcom::Bar
Bar	Interface/Bar.h	/^class Bar : public Surface$/;"	c	namespace:OpenXcom
Base	Savegame/Base.cpp	/^Base::Base(const Mod *mod) : Target(), _mod(mod), _scientists(0), _engineers(0), _inBattlescape(false),$/;"	f	class:OpenXcom::Base
Base	Savegame/Base.h	/^class Base : public Target$/;"	c	namespace:OpenXcom
BaseDefenseActionType	Geoscape/BaseDefenseState.h	/^enum BaseDefenseActionType { BDA_NONE, BDA_FIRE, BDA_RESOLVE, BDA_DESTROY, BDA_END };$/;"	g	namespace:OpenXcom
BaseDefenseState	Geoscape/BaseDefenseState.cpp	/^BaseDefenseState::BaseDefenseState(Base *base, Ufo *ufo, GeoscapeState *state) : _state(state)$/;"	f	class:OpenXcom::BaseDefenseState
BaseDefenseState	Geoscape/BaseDefenseState.h	/^class BaseDefenseState : public State$/;"	c	namespace:OpenXcom
BaseDestroyedState	Geoscape/BaseDestroyedState.cpp	/^BaseDestroyedState::BaseDestroyedState(Base *base, bool missiles, bool partialDestruction) : _base(base), _missiles(missiles), _partialDestruction(partialDestruction)$/;"	f	class:OpenXcom::BaseDestroyedState
BaseDestroyedState	Geoscape/BaseDestroyedState.h	/^class BaseDestroyedState : public State$/;"	c	namespace:OpenXcom
BaseFacility	Savegame/BaseFacility.cpp	/^BaseFacility::BaseFacility(const RuleBaseFacility *rules, Base *base) : _rules(rules), _base(base), _x(-1), _y(-1), _buildTime(0), _disabled(false), _craftForDrawing(0), _hadPreviousFacility(false)$/;"	f	class:OpenXcom::BaseFacility
BaseFacility	Savegame/BaseFacility.h	/^class BaseFacility$/;"	c	namespace:OpenXcom
BaseInfoState	Basescape/BaseInfoState.cpp	/^BaseInfoState::BaseInfoState(Base *base, BasescapeState *state) : _base(base), _state(state)$/;"	f	class:OpenXcom::BaseInfoState
BaseInfoState	Basescape/BaseInfoState.h	/^class BaseInfoState : public State$/;"	c	namespace:OpenXcom
BaseNameState	Geoscape/BaseNameState.cpp	/^BaseNameState::BaseNameState(Base *base, Globe *globe, bool first, bool fixedLocation) : _base(base), _globe(globe), _first(first), _fixedLocation(fixedLocation)$/;"	f	class:OpenXcom::BaseNameState
BaseNameState	Geoscape/BaseNameState.h	/^class BaseNameState : public State$/;"	c	namespace:OpenXcom
BaseStatLimit	Mod/Unit.h	/^	constexpr static int BaseStatLimit = 8000;$/;"	m	struct:OpenXcom::UnitStats
BaseSumDailyRecovery	Savegame/Base.h	/^struct BaseSumDailyRecovery$/;"	s	namespace:OpenXcom
BaseView	Basescape/BaseView.cpp	/^BaseView::BaseView(int width, int height, int x, int y) : InteractiveSurface(width, height, x, y), _base(0), _texture(0), _selFacility(0), _big(0), _small(0), _lang(0), _gridX(0), _gridY(0), _selSize(0), _selector(0), _blink(true), _cellColor(0), _selectorColor(0)$/;"	f	class:OpenXcom::BaseView
BaseView	Basescape/BaseView.h	/^class BaseView : public InteractiveSurface$/;"	c	namespace:OpenXcom
BasescapeState	Basescape/BasescapeState.cpp	/^BasescapeState::BasescapeState(Base *base, Globe *globe) : _base(base), _globe(globe)$/;"	f	class:OpenXcom::BasescapeState
BasescapeState	Basescape/BasescapeState.h	/^class BasescapeState : public State$/;"	c	namespace:OpenXcom
BattleAction	Battlescape/BattlescapeGame.h	/^	BattleAction() : target(-1, -1, -1), targeting(false), value(0), diff(0), autoShotCounter(0), cameraPosition(0, 0, -1), desperate(false), finalFacing(-1), finalAction(false), number(0), sprayTargeting(false) { }$/;"	f	struct:OpenXcom::BattleAction
BattleAction	Battlescape/BattlescapeGame.h	/^struct BattleAction : BattleActionCost$/;"	s	namespace:OpenXcom
BattleActionAttack	Mod/RuleItem.h	/^struct BattleActionAttack$/;"	s	namespace:OpenXcom
BattleActionAttackReadOnlyImpl	Mod/RuleItem.h	/^struct BattleActionAttackReadOnlyImpl$/;"	s	namespace:OpenXcom::helper
BattleActionCost	Battlescape/BattlescapeGame.h	/^	BattleActionCost() : type(BA_NONE) { }$/;"	f	struct:OpenXcom::BattleActionCost
BattleActionCost	Battlescape/BattlescapeGame.h	/^	BattleActionCost(BattleActionType action, BattleUnit *unit, BattleItem *item) : type(action), actor(unit), weapon(item) { updateTU(); }$/;"	f	struct:OpenXcom::BattleActionCost
BattleActionCost	Battlescape/BattlescapeGame.h	/^	BattleActionCost(BattleUnit *unit) : type(BA_NONE), actor(unit) { }$/;"	f	struct:OpenXcom::BattleActionCost
BattleActionCost	Battlescape/BattlescapeGame.h	/^struct BattleActionCost : RuleItemUseCost$/;"	s	namespace:OpenXcom
BattleActionOrigin	Mod/RuleItem.h	/^enum class BattleActionOrigin { CENTRE = 0, LEFT, RIGHT }; \/\/ Used for off-centre shooting.$/;"	c	namespace:OpenXcom
BattleFuseType	Mod/RuleItem.h	/^enum BattleFuseType { BFT_NONE = -3, BFT_INSTANT = -2, BFT_SET = -1, BFT_FIX_MIN = 0, BFT_FIX_MAX = 64 };$/;"	g	namespace:OpenXcom
BattleItem	Savegame/BattleItem.cpp	/^BattleItem::BattleItem(const RuleItem *rules, int *id) : _id(*id), _rules(rules), _owner(0), _previousOwner(0), _unit(0), _tile(0), _inventorySlot(0), _inventoryX(0), _inventoryY(0), _ammoItem{ }, _fuseTimer(-1), _ammoQuantity(0), _painKiller(0), _heal(0), _stimulant(0), _XCOMProperty(false), _droppedOnAlienTurn(false), _isAmmo(false), _isWeaponWithAmmo(false), _fuseEnabled(false)$/;"	f	class:OpenXcom::BattleItem
BattleItem	Savegame/BattleItem.h	/^class BattleItem$/;"	c	namespace:OpenXcom
BattleMediKitAction	Mod/RuleItem.h	/^enum BattleMediKitAction { BMA_HEAL = 1, BMA_STIMULANT = 2, BMA_PAINKILLER = 4 };$/;"	g	namespace:OpenXcom
BattleMediKitType	Mod/RuleItem.h	/^enum BattleMediKitType { BMT_NORMAL = 0, BMT_HEAL = 1, BMT_STIMULANT = 2, BMT_PAINKILLER = 3 };$/;"	g	namespace:OpenXcom
BattleState	Battlescape/BattleState.cpp	/^BattleState::BattleState(BattlescapeGame *parent) : _parent(parent)$/;"	f	class:OpenXcom::BattleState
BattleState	Battlescape/BattleState.cpp	/^BattleState::BattleState(BattlescapeGame *parent, BattleAction action) : _parent(parent), _action(action)$/;"	f	class:OpenXcom::BattleState
BattleState	Battlescape/BattleState.h	/^class BattleState$/;"	c	namespace:OpenXcom
BattleType	Mod/RuleItem.h	/^enum BattleType { BT_NONE, BT_FIREARM, BT_AMMO, BT_MELEE, BT_GRENADE, BT_PROXIMITYGRENADE, BT_MEDIKIT, BT_SCANNER, BT_MINDPROBE, BT_PSIAMP, BT_FLARE, BT_CORPSE };$/;"	g	namespace:OpenXcom
BattleUnit	Savegame/BattleUnit.cpp	/^BattleUnit::BattleUnit(const Mod *mod, Soldier *soldier, int depth, const RuleStartingCondition* sc) :$/;"	f	class:OpenXcom::BattleUnit
BattleUnit	Savegame/BattleUnit.cpp	/^BattleUnit::BattleUnit(const Mod *mod, Unit *unit, UnitFaction faction, int id, const RuleEnviroEffects* enviro, Armor *armor, StatAdjustment *adjustment, int depth, const RuleStartingCondition* sc) :$/;"	f	class:OpenXcom::BattleUnit
BattleUnit	Savegame/BattleUnit.h	/^class BattleUnit$/;"	c	namespace:OpenXcom
BattleUnitKills	Savegame/BattleUnitStatistics.h	/^	BattleUnitKills(): faction(FACTION_HOSTILE), status(STATUS_IGNORE_ME), mission(0), turn(0), id(0), side(SIDE_FRONT), bodypart(BODYPART_HEAD) { }$/;"	f	struct:OpenXcom::BattleUnitKills
BattleUnitKills	Savegame/BattleUnitStatistics.h	/^	BattleUnitKills(const YAML::Node& node) { load(node); }$/;"	f	struct:OpenXcom::BattleUnitKills
BattleUnitKills	Savegame/BattleUnitStatistics.h	/^struct BattleUnitKills$/;"	s	namespace:OpenXcom
BattleUnitStatistics	Savegame/BattleUnitStatistics.h	/^	BattleUnitStatistics() : wasUnconcious(false), shotAtCounter(0), hitCounter(0), shotByFriendlyCounter(0), shotFriendlyCounter(0), loneSurvivor(false), ironMan(false), longDistanceHitCounter(0), lowAccuracyHitCounter(0), shotsFiredCounter(0), shotsLandedCounter(0), kills(), daysWounded(0), KIA(false), nikeCross(false), mercyCross(false), woundsHealed(0), appliedStimulant(0), appliedPainKill(0), revivedSoldier(0), revivedHostile(0), revivedNeutral(0), MIA(false), martyr(0), slaveKills(0) { }$/;"	f	struct:OpenXcom::BattleUnitStatistics
BattleUnitStatistics	Savegame/BattleUnitStatistics.h	/^	BattleUnitStatistics(const YAML::Node& node) { load(node); }$/;"	f	struct:OpenXcom::BattleUnitStatistics
BattleUnitStatistics	Savegame/BattleUnitStatistics.h	/^struct BattleUnitStatistics$/;"	s	namespace:OpenXcom
BattleUnitVisibility	Savegame/BattleUnit.h	/^class BattleUnitVisibility$/;"	c	namespace:OpenXcom
BattlescapeButton	Interface/BattlescapeButton.cpp	/^BattlescapeButton::BattlescapeButton(int width, int height, int x, int y) : InteractiveSurface(width, height, x, y), _color(0), _group(0), _inverted(false), _toggleMode(INVERT_NONE), _altSurface(0)$/;"	f	class:OpenXcom::BattlescapeButton
BattlescapeButton	Interface/BattlescapeButton.h	/^class BattlescapeButton : public InteractiveSurface$/;"	c	namespace:OpenXcom
BattlescapeGame	Battlescape/BattlescapeGame.cpp	/^BattlescapeGame::BattlescapeGame(SavedBattleGame *save, BattlescapeState *parentState) :$/;"	f	class:OpenXcom::BattlescapeGame
BattlescapeGame	Battlescape/BattlescapeGame.h	/^class BattlescapeGame$/;"	c	namespace:OpenXcom
BattlescapeGenerator	Battlescape/BattlescapeGenerator.cpp	/^BattlescapeGenerator::BattlescapeGenerator(Game *game) :$/;"	f	class:OpenXcom::BattlescapeGenerator
BattlescapeGenerator	Battlescape/BattlescapeGenerator.h	/^class BattlescapeGenerator$/;"	c	namespace:OpenXcom
BattlescapeMessage	Battlescape/BattlescapeMessage.cpp	/^BattlescapeMessage::BattlescapeMessage(int width, int height, int x, int y) : Surface(width, height, x, y)$/;"	f	class:OpenXcom::BattlescapeMessage
BattlescapeMessage	Battlescape/BattlescapeMessage.h	/^class BattlescapeMessage : public Surface$/;"	c	namespace:OpenXcom
BattlescapeState	Battlescape/BattlescapeState.cpp	/^BattlescapeState::BattlescapeState() :$/;"	f	class:OpenXcom::BattlescapeState
BattlescapeState	Battlescape/BattlescapeState.h	/^class BattlescapeState : public State$/;"	c	namespace:OpenXcom
BattlescapeTally	Battlescape/BattlescapeGame.h	/^struct BattlescapeTally$/;"	s	namespace:OpenXcom
Bind	Engine/ScriptBind.h	/^	Bind(ScriptParserBase* p) : Bind{ p, T::ScriptName }$/;"	f	struct:OpenXcom::Bind
Bind	Engine/ScriptBind.h	/^	Bind(ScriptParserBase* p, ExtensionBinding e) : Bind{ p, T::ScriptName, e }$/;"	f	struct:OpenXcom::Bind
Bind	Engine/ScriptBind.h	/^	Bind(ScriptParserBase* p, std::string r) : BindBase{ p }, prefix{ std::move(r) }$/;"	f	struct:OpenXcom::Bind
Bind	Engine/ScriptBind.h	/^	Bind(ScriptParserBase* p, std::string r, ExtensionBinding) : BindBase{ p }, prefix{ std::move(r) }$/;"	f	struct:OpenXcom::Bind
Bind	Engine/ScriptBind.h	/^struct Bind : BindBase$/;"	s	namespace:OpenXcom
BindBase	Engine/ScriptBind.h	/^	BindBase(ScriptParserBase* p) : parser{ p }$/;"	f	struct:OpenXcom::BindBase
BindBase	Engine/ScriptBind.h	/^struct BindBase$/;"	s	namespace:OpenXcom
BindClear	Engine/ScriptBind.h	/^struct BindClear$/;"	s	namespace:OpenXcom::helper
BindDebugDisplay	Engine/ScriptBind.h	/^struct BindDebugDisplay$/;"	s	namespace:OpenXcom::helper
BindEq	Engine/ScriptBind.h	/^struct BindEq$/;"	s	namespace:OpenXcom::helper
BindFunc	Engine/ScriptBind.h	/^struct BindFunc : BindFuncImpl<decltype(F), F> \/\/Work araound ICC 19.0.1 bug$/;"	s	namespace:OpenXcom::helper
BindFuncImpl	Engine/ScriptBind.h	/^struct BindFuncImpl<P*(T::*)(Args...) const, X>$/;"	s	namespace:OpenXcom::helper
BindFuncImpl	Engine/ScriptBind.h	/^struct BindFuncImpl<P*(T::*)(Args...), X>$/;"	s	namespace:OpenXcom::helper
BindFuncImpl	Engine/ScriptBind.h	/^struct BindFuncImpl<R(T::*)(Args...) const, X>$/;"	s	namespace:OpenXcom::helper
BindFuncImpl	Engine/ScriptBind.h	/^struct BindFuncImpl<R(T::*)(Args...), X>$/;"	s	namespace:OpenXcom::helper
BindFuncImpl	Engine/ScriptBind.h	/^struct BindFuncImpl<bool(T::*)(Args...) const, X>$/;"	s	namespace:OpenXcom::helper
BindFuncImpl	Engine/ScriptBind.h	/^struct BindFuncImpl<bool(T::*)(Args...), X>$/;"	s	namespace:OpenXcom::helper
BindFuncImpl	Engine/ScriptBind.h	/^struct BindFuncImpl<void(*)(Args...), X>$/;"	s	namespace:OpenXcom::helper
BindFuncImpl	Engine/ScriptBind.h	/^struct BindFuncImpl<void(T::*)(Args...), X>$/;"	s	namespace:OpenXcom::helper
BindMemberInvoke	Engine/ScriptBind.h	/^struct BindMemberInvoke : BindMemberInvokeImpl<WarpValue<Rest>...>$/;"	s	namespace:OpenXcom::helper
BindMemberInvokeImpl	Engine/ScriptBind.h	/^struct BindMemberInvokeImpl \/\/Work araound ICC 19.0.1 bug$/;"	s	namespace:OpenXcom::helper
BindPropCustomGet	Engine/ScriptBind.h	/^struct BindPropCustomGet$/;"	s	namespace:OpenXcom::helper
BindPropCustomSet	Engine/ScriptBind.h	/^struct BindPropCustomSet$/;"	s	namespace:OpenXcom::helper
BindPropGet	Engine/ScriptBind.h	/^struct BindPropGet$/;"	s	namespace:OpenXcom::helper
BindPropSet	Engine/ScriptBind.h	/^struct BindPropSet$/;"	s	namespace:OpenXcom::helper
BindSet	Engine/ScriptBind.h	/^struct BindSet$/;"	s	namespace:OpenXcom::helper
BindSwap	Engine/ScriptBind.h	/^struct BindSwap$/;"	s	namespace:OpenXcom::helper
BindValue	Engine/ScriptBind.h	/^struct BindValue$/;"	s	namespace:OpenXcom::helper
BlendResult	Engine/Scalers/xbrz.cpp	/^struct BlendResult$/;"	s	namespace:__anon10	file:
BlendType	Engine/Scalers/xbrz.cpp	/^enum BlendType$/;"	g	namespace:__anon10	file:
Block	Engine/ScriptBind.h	/^	struct Block$/;"	s	struct:OpenXcom::ParserWriter
BlockBegin	Engine/ScriptBind.h	/^	BlockBegin,$/;"	e	enum:OpenXcom::BlockEnum
BlockElse	Engine/ScriptBind.h	/^	BlockElse,$/;"	e	enum:OpenXcom::BlockEnum
BlockEnum	Engine/ScriptBind.h	/^enum BlockEnum$/;"	g	namespace:OpenXcom
BlockIf	Engine/ScriptBind.h	/^	BlockIf,$/;"	e	enum:OpenXcom::BlockEnum
BlockLoop	Engine/ScriptBind.h	/^	BlockLoop,$/;"	e	enum:OpenXcom::BlockEnum
BlockMain	Engine/ScriptBind.h	/^	BlockMain,$/;"	e	enum:OpenXcom::BlockEnum
BodyXCOM2	Mod/Mod.cpp	/^	struct BodyXCOM2$/;"	s	namespace:OpenXcom::__anon29	file:
BonusSoldierStatsRecoveryParser	Mod/ModScript.h	/^		BonusSoldierStatsRecoveryParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : BonusStatsBaseParser{ shared, name + "SoldierRecoveryBonusStats", mod }$/;"	f	struct:OpenXcom::ModScript::BonusSoldierStatsRecoveryParser
BonusSoldierStatsRecoveryParser	Mod/ModScript.h	/^	struct BonusSoldierStatsRecoveryParser : BonusStatsBaseParser$/;"	s	class:OpenXcom::ModScript
BonusStatData	Mod/RuleStatBonus.cpp	/^struct BonusStatData$/;"	s	namespace:OpenXcom::__anon24	file:
BonusStatFunc	Mod/RuleStatBonus.cpp	/^typedef float (*BonusStatFunc)(const BattleUnit*);$/;"	t	namespace:OpenXcom::__anon24	file:
BonusStatsBaseParser	Mod/ModScript.h	/^	struct BonusStatsBaseParser : ScriptParserEvents<ScriptOutputArgs<int&>, const BattleUnit*, int, const BattleItem*, const BattleItem*, int, const RuleSkill*>$/;"	s	class:OpenXcom::ModScript
BonusStatsBaseParser	Mod/RuleStatBonus.cpp	/^ModScript::BonusStatsBaseParser::BonusStatsBaseParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::BonusStatsBaseParser
BonusStatsParser	Mod/ModScript.h	/^		BonusStatsParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : BonusStatsBaseParser{ shared, name + "BonusStats", mod }$/;"	f	struct:OpenXcom::ModScript::BonusStatsParser
BonusStatsParser	Mod/ModScript.h	/^	struct BonusStatsParser : BonusStatsBaseParser$/;"	s	class:OpenXcom::ModScript
BonusStatsRecoveryParser	Mod/ModScript.h	/^		BonusStatsRecoveryParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : BonusStatsBaseParser{ shared, name + "RecoveryBonusStats", mod }$/;"	f	struct:OpenXcom::ModScript::BonusStatsRecoveryParser
BonusStatsRecoveryParser	Mod/ModScript.h	/^	struct BonusStatsRecoveryParser : BonusStatsBaseParser$/;"	s	class:OpenXcom::ModScript
BriefingData	Mod/AlienDeployment.h	/^	BriefingData() : palette(0), textOffset(0), music("GMDEFEND"), background("BACK16.SCR"), showCraft(true), showTarget(true) { \/*Empty by Design*\/ };$/;"	f	struct:OpenXcom::BriefingData
BriefingData	Mod/AlienDeployment.h	/^struct BriefingData$/;"	s	namespace:OpenXcom
BriefingLightState	Battlescape/BriefingLightState.cpp	/^BriefingLightState::BriefingLightState(AlienDeployment *deployment)$/;"	f	class:OpenXcom::BriefingLightState
BriefingLightState	Battlescape/BriefingLightState.h	/^class BriefingLightState : public State$/;"	c	namespace:OpenXcom
BriefingState	Battlescape/BriefingState.cpp	/^BriefingState::BriefingState(Craft *craft, Base *base, bool infoOnly, BriefingData *customBriefing) : _infoOnly(infoOnly), _disableCutsceneAndMusic(false)$/;"	f	class:OpenXcom::BriefingState
BriefingState	Battlescape/BriefingState.h	/^class BriefingState : public State$/;"	c	namespace:OpenXcom
BuildFacilitiesState	Basescape/BuildFacilitiesState.cpp	/^BuildFacilitiesState::BuildFacilitiesState(Base *base, State *state) : _base(base), _state(state), _lstScroll(0)$/;"	f	class:OpenXcom::BuildFacilitiesState
BuildFacilitiesState	Basescape/BuildFacilitiesState.h	/^class BuildFacilitiesState : public State$/;"	c	namespace:OpenXcom
BuildNewBaseState	Geoscape/BuildNewBaseState.cpp	/^BuildNewBaseState::BuildNewBaseState(Base *base, Globe *globe, bool first) : _base(base), _globe(globe), _first(first), _oldlat(0), _oldlon(0), _mousex(0), _mousey(0)$/;"	f	class:OpenXcom::BuildNewBaseState
BuildNewBaseState	Geoscape/BuildNewBaseState.h	/^class BuildNewBaseState : public State$/;"	c	namespace:OpenXcom
BurnShade	Engine/ShaderDraw.h	/^struct BurnShade$/;"	s	namespace:OpenXcom::helper
CALC_FCSLOT	Engine/Adlib/fmopl.cpp	/^INLINE void CALC_FCSLOT(OPL_CH *CH,OPL_SLOT *SLOT)$/;"	f
CC_charRest	Engine/Script.cpp	/^constexpr CharClasses CC_charRest = 0x10;$/;"	m	namespace:OpenXcom::__anon8	file:
CC_digit	Engine/Script.cpp	/^constexpr CharClasses CC_digit = 0x4;$/;"	m	namespace:OpenXcom::__anon8	file:
CC_digitHex	Engine/Script.cpp	/^constexpr CharClasses CC_digitHex = 0x8;$/;"	m	namespace:OpenXcom::__anon8	file:
CC_digitHexX	Engine/Script.cpp	/^constexpr CharClasses CC_digitHexX = 0x40;$/;"	m	namespace:OpenXcom::__anon8	file:
CC_digitSign	Engine/Script.cpp	/^constexpr CharClasses CC_digitSign = 0x20;$/;"	m	namespace:OpenXcom::__anon8	file:
CC_quote	Engine/Script.cpp	/^constexpr CharClasses CC_quote = 0x80;$/;"	m	namespace:OpenXcom::__anon8	file:
CC_spec	Engine/Script.cpp	/^constexpr CharClasses CC_spec = 0x2;$/;"	m	namespace:OpenXcom::__anon8	file:
CELL_HEIGHT	Battlescape/MiniMapView.cpp	/^const int CELL_HEIGHT = 4;$/;"	m	namespace:OpenXcom	file:
CELL_WIDTH	Battlescape/MiniMapView.cpp	/^const int CELL_WIDTH = 4;$/;"	m	namespace:OpenXcom	file:
CENTRE	Mod/RuleItem.h	/^enum class BattleActionOrigin { CENTRE = 0, LEFT, RIGHT }; \/\/ Used for off-centre shooting.$/;"	m	class:OpenXcom::BattleActionOrigin
CERROR_BREAK	lodepng.cpp	96;"	d	file:
CERROR_RETURN	lodepng.cpp	120;"	d	file:
CERROR_RETURN_ERROR	lodepng.cpp	106;"	d	file:
CERROR_TRY_RETURN	lodepng.cpp	113;"	d	file:
CITY_LABEL_COLOR	Geoscape/Globe.cpp	/^Uint8 Globe::CITY_LABEL_COLOR;$/;"	m	class:OpenXcom::Globe	file:
CITY_LABEL_COLOR	Geoscape/Globe.h	/^	static Uint8 CITY_LABEL_COLOR;$/;"	m	class:OpenXcom::Globe
CITY_MARKER	Geoscape/Globe.h	/^	static const int CITY_MARKER = 8;$/;"	m	class:OpenXcom::Globe
CLCL_ORDER	lodepng.cpp	/^static const unsigned CLCL_ORDER[NUM_CODE_LENGTH_CODES]$/;"	v	file:
COLOR_256	Engine/FlcPlayer.cpp	/^	COLOR_256 = 0x04,$/;"	e	enum:OpenXcom::ChunkTypes	file:
COLOR_64	Engine/FlcPlayer.cpp	/^	COLOR_64 = 0x0B,$/;"	e	enum:OpenXcom::ChunkTypes	file:
CON	Engine/Adlib/fmopl.h	/^	UINT8 CON;			\/* connection type                     *\/$/;"	m	struct:fm_opl_channel
COUNTRY_LABEL_COLOR	Geoscape/Globe.cpp	/^Uint8 Globe::COUNTRY_LABEL_COLOR;$/;"	m	class:OpenXcom::Globe	file:
COUNTRY_LABEL_COLOR	Geoscape/Globe.h	/^	static Uint8 COUNTRY_LABEL_COLOR;$/;"	m	class:OpenXcom::Globe
CRAFTSEGMENT	Savegame/Node.h	/^	static const int CRAFTSEGMENT = 1000;$/;"	m	class:OpenXcom::Node
CRAFT_MAX	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
CRAFT_MIN	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
CRASHED	Savegame/Ufo.h	/^	enum UfoStatus { FLYING, LANDED, CRASHED, DESTROYED };$/;"	e	enum:OpenXcom::Ufo::UfoStatus
CSMKeyControl	Engine/Adlib/fmopl.cpp	/^INLINE void CSMKeyControl(OPL_CH *CH)$/;"	f
CT_AIM	Battlescape/Map.h	/^enum CursorType { CT_NONE, CT_NORMAL, CT_AIM, CT_PSI, CT_WAYPOINT, CT_THROW };$/;"	e	enum:OpenXcom::CursorType
CT_NONE	Battlescape/Map.h	/^enum CursorType { CT_NONE, CT_NORMAL, CT_AIM, CT_PSI, CT_WAYPOINT, CT_THROW };$/;"	e	enum:OpenXcom::CursorType
CT_NORMAL	Battlescape/Map.h	/^enum CursorType { CT_NONE, CT_NORMAL, CT_AIM, CT_PSI, CT_WAYPOINT, CT_THROW };$/;"	e	enum:OpenXcom::CursorType
CT_PSI	Battlescape/Map.h	/^enum CursorType { CT_NONE, CT_NORMAL, CT_AIM, CT_PSI, CT_WAYPOINT, CT_THROW };$/;"	e	enum:OpenXcom::CursorType
CT_THROW	Battlescape/Map.h	/^enum CursorType { CT_NONE, CT_NORMAL, CT_AIM, CT_PSI, CT_WAYPOINT, CT_THROW };$/;"	e	enum:OpenXcom::CursorType
CT_WAYPOINT	Battlescape/Map.h	/^enum CursorType { CT_NONE, CT_NORMAL, CT_AIM, CT_PSI, CT_WAYPOINT, CT_THROW };$/;"	e	enum:OpenXcom::CursorType
CWC_EQUIPMENT	Mod/RuleCraftWeapon.h	/^enum CraftWeaponCategory { CWC_WEAPON, CWC_TRACTOR_BEAM, CWC_EQUIPMENT };$/;"	e	enum:OpenXcom::CraftWeaponCategory
CWC_TRACTOR_BEAM	Mod/RuleCraftWeapon.h	/^enum CraftWeaponCategory { CWC_WEAPON, CWC_TRACTOR_BEAM, CWC_EQUIPMENT };$/;"	e	enum:OpenXcom::CraftWeaponCategory
CWC_WEAPON	Mod/RuleCraftWeapon.h	/^enum CraftWeaponCategory { CWC_WEAPON, CWC_TRACTOR_BEAM, CWC_EQUIPMENT };$/;"	e	enum:OpenXcom::CraftWeaponCategory
CWPGT_BEAM	Savegame/CraftWeaponProjectile.h	/^enum CraftWeaponProjectileGlobalType { CWPGT_MISSILE, CWPGT_BEAM };$/;"	e	enum:OpenXcom::CraftWeaponProjectileGlobalType
CWPGT_MISSILE	Savegame/CraftWeaponProjectile.h	/^enum CraftWeaponProjectileGlobalType { CWPGT_MISSILE, CWPGT_BEAM };$/;"	e	enum:OpenXcom::CraftWeaponProjectileGlobalType
CWPT_AVALANCHE_MISSILE	Savegame/CraftWeaponProjectile.h	/^enum CraftWeaponProjectileType { CWPT_STINGRAY_MISSILE, CWPT_AVALANCHE_MISSILE, CWPT_CANNON_ROUND, CWPT_FUSION_BALL, CWPT_LASER_BEAM, CWPT_PLASMA_BEAM };$/;"	e	enum:OpenXcom::CraftWeaponProjectileType
CWPT_CANNON_ROUND	Savegame/CraftWeaponProjectile.h	/^enum CraftWeaponProjectileType { CWPT_STINGRAY_MISSILE, CWPT_AVALANCHE_MISSILE, CWPT_CANNON_ROUND, CWPT_FUSION_BALL, CWPT_LASER_BEAM, CWPT_PLASMA_BEAM };$/;"	e	enum:OpenXcom::CraftWeaponProjectileType
CWPT_FUSION_BALL	Savegame/CraftWeaponProjectile.h	/^enum CraftWeaponProjectileType { CWPT_STINGRAY_MISSILE, CWPT_AVALANCHE_MISSILE, CWPT_CANNON_ROUND, CWPT_FUSION_BALL, CWPT_LASER_BEAM, CWPT_PLASMA_BEAM };$/;"	e	enum:OpenXcom::CraftWeaponProjectileType
CWPT_LASER_BEAM	Savegame/CraftWeaponProjectile.h	/^enum CraftWeaponProjectileType { CWPT_STINGRAY_MISSILE, CWPT_AVALANCHE_MISSILE, CWPT_CANNON_ROUND, CWPT_FUSION_BALL, CWPT_LASER_BEAM, CWPT_PLASMA_BEAM };$/;"	e	enum:OpenXcom::CraftWeaponProjectileType
CWPT_PLASMA_BEAM	Savegame/CraftWeaponProjectile.h	/^enum CraftWeaponProjectileType { CWPT_STINGRAY_MISSILE, CWPT_AVALANCHE_MISSILE, CWPT_CANNON_ROUND, CWPT_FUSION_BALL, CWPT_LASER_BEAM, CWPT_PLASMA_BEAM };$/;"	e	enum:OpenXcom::CraftWeaponProjectileType
CWPT_STINGRAY_MISSILE	Savegame/CraftWeaponProjectile.h	/^enum CraftWeaponProjectileType { CWPT_STINGRAY_MISSILE, CWPT_AVALANCHE_MISSILE, CWPT_CANNON_ROUND, CWPT_FUSION_BALL, CWPT_LASER_BEAM, CWPT_PLASMA_BEAM };$/;"	e	enum:OpenXcom::CraftWeaponProjectileType
Camera	Battlescape/Camera.cpp	/^Camera::Camera(int spriteWidth, int spriteHeight, int mapsize_x, int mapsize_y, int mapsize_z, Map *map, int visibleMapHeight) : _scrollMouseTimer(0), _scrollKeyTimer(0), _spriteWidth(spriteWidth), _spriteHeight(spriteHeight), _mapsize_x(mapsize_x), _mapsize_y(mapsize_y), _mapsize_z(mapsize_z), _screenWidth(map->getWidth()), _screenHeight(map->getHeight()),$/;"	f	class:OpenXcom::Camera
Camera	Battlescape/Camera.h	/^class Camera$/;"	c	namespace:OpenXcom
CannotReequipState	Battlescape/CannotReequipState.cpp	/^CannotReequipState::CannotReequipState(std::vector<ReequipStat> &missingItems, Base *base) : _missingItems(missingItems), _base(base)$/;"	f	class:OpenXcom::CannotReequipState
CannotReequipState	Battlescape/CannotReequipState.h	/^class CannotReequipState : public State$/;"	c	namespace:OpenXcom
CatFile	Engine/CatFile.cpp	/^CatFile::CatFile(const std::string& filename) : _data(0), _items()$/;"	f	class:OpenXcom::CatFile
CatFile	Engine/CatFile.h	/^class CatFile$/;"	c	namespace:OpenXcom
ChronoTrigger	Mod/AlienDeployment.h	/^enum ChronoTrigger { FORCE_LOSE, FORCE_ABORT, FORCE_WIN, FORCE_WIN_SURRENDER };$/;"	g	namespace:OpenXcom
ChunkOpcodes	Engine/FlcPlayer.cpp	/^enum ChunkOpcodes$/;"	g	namespace:OpenXcom	file:
ChunkTypes	Engine/FlcPlayer.cpp	/^enum ChunkTypes$/;"	g	namespace:OpenXcom	file:
City	Mod/City.cpp	/^City::City(const std::string &name, double lon, double lat) : Target()$/;"	f	class:OpenXcom::City
City	Mod/City.h	/^class City : public Target$/;"	c	namespace:OpenXcom
Clamp	fmath.h	/^inline _Tx Clamp(const _Tx& x, const _Tx& min, const _Tx& max)$/;"	f
CleanSdlSurface	Engine/Surface.cpp	/^void Surface::CleanSdlSurface(SDL_Surface* surface)$/;"	f	class:OpenXcom::Surface
Clip0_Bottom	Engine/FastLineClip.cpp	/^void FastLineClip::Clip0_Bottom(void)$/;"	f	class:OpenXcom::FastLineClip
Clip0_Left	Engine/FastLineClip.cpp	/^void FastLineClip::Clip0_Left(void)$/;"	f	class:OpenXcom::FastLineClip
Clip0_Right	Engine/FastLineClip.cpp	/^void FastLineClip::Clip0_Right(void)$/;"	f	class:OpenXcom::FastLineClip
Clip0_Top	Engine/FastLineClip.cpp	/^void FastLineClip::Clip0_Top(void)$/;"	f	class:OpenXcom::FastLineClip
Clip1_Bottom	Engine/FastLineClip.cpp	/^void FastLineClip::Clip1_Bottom(void)$/;"	f	class:OpenXcom::FastLineClip
Clip1_Left	Engine/FastLineClip.cpp	/^void FastLineClip::Clip1_Left(void)$/;"	f	class:OpenXcom::FastLineClip
Clip1_Right	Engine/FastLineClip.cpp	/^void FastLineClip::Clip1_Right(void)$/;"	f	class:OpenXcom::FastLineClip
Clip1_Top	Engine/FastLineClip.cpp	/^void FastLineClip::Clip1_Top(void)$/;"	f	class:OpenXcom::FastLineClip
Cnt	Engine/Adlib/fmopl.h	/^	UINT32 Cnt;		\/* frequency count :                   *\/$/;"	m	struct:fm_opl_slot
Collections	Engine/Collections.h	/^class Collections$/;"	c	namespace:OpenXcom
ColorDistanceARGB	Engine/Scalers/xbrz.cpp	/^struct ColorDistanceARGB$/;"	s	namespace:__anon10	file:
ColorDistanceRGB	Engine/Scalers/xbrz.cpp	/^struct ColorDistanceRGB$/;"	s	namespace:__anon10	file:
ColorFormat	Engine/Scalers/xbrz.h	/^enum ColorFormat \/\/from high bits -> low bits, 8 bit per channel$/;"	g	namespace:xbrz
ColorGradientARGB	Engine/Scalers/xbrz.cpp	/^struct ColorGradientARGB$/;"	s	namespace:__anon10	file:
ColorGradientRGB	Engine/Scalers/xbrz.cpp	/^struct ColorGradientRGB$/;"	s	namespace:__anon10	file:
ColorGroup	Engine/ShaderDraw.h	/^const Uint8 ColorGroup = 0xF0;$/;"	m	namespace:OpenXcom::helper
ColorNames	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	g	namespace:OpenXcom
ColorReplace	Engine/ShaderDraw.h	/^struct ColorReplace$/;"	s	namespace:OpenXcom::helper
ColorShade	Engine/ShaderDraw.h	/^const Uint8 ColorShade = 0x0F;$/;"	m	namespace:OpenXcom::helper
ColorTree	lodepng.cpp	/^struct ColorTree$/;"	s	file:
ColorTree	lodepng.cpp	/^typedef struct ColorTree ColorTree;$/;"	t	typeref:struct:ColorTree	file:
ComboBox	Interface/ComboBox.cpp	/^ComboBox::ComboBox(State *state, int width, int height, int x, int y, bool popupAboveButton) : InteractiveSurface(width, height, x, y), _change(0), _sel(0), _state(state), _lang(0), _toggled(false), _popupAboveButton(popupAboveButton)$/;"	f	class:OpenXcom::ComboBox
ComboBox	Interface/ComboBox.h	/^class ComboBox : public InteractiveSurface$/;"	c	namespace:OpenXcom
CommendationLateState	Battlescape/CommendationLateState.cpp	/^CommendationLateState::CommendationLateState(std::vector<Soldier*> soldiersMedalled)$/;"	f	class:OpenXcom::CommendationLateState
CommendationLateState	Battlescape/CommendationLateState.h	/^class CommendationLateState : public State$/;"	c	namespace:OpenXcom
CommendationState	Battlescape/CommendationState.cpp	/^CommendationState::CommendationState(std::vector<Soldier*> soldiersMedalled)$/;"	f	class:OpenXcom::CommendationState
CommendationState	Battlescape/CommendationState.h	/^class CommendationState : public State$/;"	c	namespace:OpenXcom
CommonZipAssetPtr	Engine/CrossPlatform.cpp	/^static void *CommonZipAssetPtr = 0;$/;"	m	namespace:OpenXcom::CrossPlatform	file:
CommonZipAssetSize	Engine/CrossPlatform.cpp	/^static size_t CommonZipAssetSize = 0;$/;"	m	namespace:OpenXcom::CrossPlatform	file:
ConditionNames	Engine/Script.cpp	/^const ScriptRef ConditionNames[ConditionSize] =$/;"	m	namespace:OpenXcom::__anon8	file:
ConditionSize	Engine/Script.cpp	/^constexpr size_t ConditionSize = 6;$/;"	m	namespace:OpenXcom::__anon8	file:
ConditionSpecNames	Engine/Script.cpp	/^const ScriptRef ConditionSpecNames[ConditionSpecialSize] =$/;"	m	namespace:OpenXcom::__anon8	file:
ConditionSpecialSize	Engine/Script.cpp	/^constexpr size_t ConditionSpecialSize = 2;$/;"	m	namespace:OpenXcom::__anon8	file:
ConfirmCydoniaState	Geoscape/ConfirmCydoniaState.cpp	/^ConfirmCydoniaState::ConfirmCydoniaState(Craft *craft) : _craft(craft)$/;"	f	class:OpenXcom::ConfirmCydoniaState
ConfirmCydoniaState	Geoscape/ConfirmCydoniaState.h	/^class ConfirmCydoniaState : public State$/;"	c	namespace:OpenXcom
ConfirmDestinationState	Geoscape/ConfirmDestinationState.cpp	/^ConfirmDestinationState::ConfirmDestinationState(std::vector<Craft*> crafts, Target *target) : _crafts(std::move(crafts)), _target(target)$/;"	f	class:OpenXcom::ConfirmDestinationState
ConfirmDestinationState	Geoscape/ConfirmDestinationState.h	/^class ConfirmDestinationState : public State$/;"	c	namespace:OpenXcom
ConfirmEndMissionState	Battlescape/ConfirmEndMissionState.cpp	/^ConfirmEndMissionState::ConfirmEndMissionState(SavedBattleGame *battleGame, int wounded, BattlescapeGame *parent) : _battleGame(battleGame), _wounded(wounded), _parent(parent)$/;"	f	class:OpenXcom::ConfirmEndMissionState
ConfirmEndMissionState	Battlescape/ConfirmEndMissionState.h	/^class ConfirmEndMissionState : public State$/;"	c	namespace:OpenXcom
ConfirmLandingState	Geoscape/ConfirmLandingState.cpp	/^ConfirmLandingState::ConfirmLandingState(Craft *craft, Texture *missionTexture, Texture *globeTexture, int shade) : _craft(craft), _missionTexture(missionTexture), _globeTexture(globeTexture), _shade(shade)$/;"	f	class:OpenXcom::ConfirmLandingState
ConfirmLandingState	Geoscape/ConfirmLandingState.h	/^class ConfirmLandingState : public State$/;"	c	namespace:OpenXcom
ConfirmLoadState	Menu/ConfirmLoadState.cpp	/^ConfirmLoadState::ConfirmLoadState(OptionsOrigin origin, const std::string &fileName) : _origin(origin), _fileName(fileName)$/;"	f	class:OpenXcom::ConfirmLoadState
ConfirmLoadState	Menu/ConfirmLoadState.h	/^class ConfirmLoadState : public State$/;"	c	namespace:OpenXcom
ConfirmNewBaseState	Geoscape/ConfirmNewBaseState.cpp	/^ConfirmNewBaseState::ConfirmNewBaseState(Base *base, Globe *globe) : _base(base), _globe(globe), _cost(0)$/;"	f	class:OpenXcom::ConfirmNewBaseState
ConfirmNewBaseState	Geoscape/ConfirmNewBaseState.h	/^class ConfirmNewBaseState : public State$/;"	c	namespace:OpenXcom
ContainsPoint	Savegame/SavedGame.cpp	/^	ContainsPoint(double lon, double lat) : _lon(lon), _lat(lat) { \/* Empty by design. *\/ }$/;"	f	class:OpenXcom::ContainsPoint
ContainsPoint	Savegame/SavedGame.cpp	/^class ContainsPoint$/;"	c	namespace:OpenXcom	file:
Cord	Geoscape/Cord.h	/^	inline Cord()$/;"	f	struct:OpenXcom::Cord
Cord	Geoscape/Cord.h	/^	inline Cord(double px, double py, double pz)$/;"	f	struct:OpenXcom::Cord
Cord	Geoscape/Cord.h	/^inline Cord::Cord(const CordPolar& pol)$/;"	f	class:OpenXcom::Cord
Cord	Geoscape/Cord.h	/^struct Cord$/;"	s	namespace:OpenXcom
CordPolar	Geoscape/Cord.h	/^	inline CordPolar()$/;"	f	struct:OpenXcom::CordPolar
CordPolar	Geoscape/Cord.h	/^	inline CordPolar(double plon, double plat)$/;"	f	struct:OpenXcom::CordPolar
CordPolar	Geoscape/Cord.h	/^inline CordPolar::CordPolar(const Cord& c)$/;"	f	class:OpenXcom::CordPolar
CordPolar	Geoscape/Cord.h	/^struct CordPolar$/;"	s	namespace:OpenXcom
Country	Savegame/Country.cpp	/^Country::Country(RuleCountry *rules, bool gen) : _rules(rules), _pact(false), _newPact(false), _cancelPact(false), _funding(0), _satisfaction(2)$/;"	f	class:OpenXcom::Country
Country	Savegame/Country.h	/^class Country$/;"	c	namespace:OpenXcom
CountryContainsPoint	Savegame/SavedGame.cpp	/^	CountryContainsPoint(double lon, double lat) : _lon(lon), _lat(lat) { \/* Empty by design. *\/ }$/;"	f	class:OpenXcom::CountryContainsPoint
CountryContainsPoint	Savegame/SavedGame.cpp	/^class CountryContainsPoint$/;"	c	namespace:OpenXcom	file:
Craft	Savegame/Craft.cpp	/^Craft::Craft(const RuleCraft *rules, Base *base, int id) : MovingTarget(),$/;"	f	class:OpenXcom::Craft
Craft	Savegame/Craft.h	/^class Craft : public MovingTarget$/;"	c	namespace:OpenXcom
CraftArmorState	Basescape/CraftArmorState.cpp	/^CraftArmorState::CraftArmorState(Base *base, size_t craft) : _base(base), _craft(craft), _savedScrollPosition(0), _origSoldierOrder(*_base->getSoldiers()), _dynGetter(NULL)$/;"	f	class:OpenXcom::CraftArmorState
CraftArmorState	Basescape/CraftArmorState.h	/^class CraftArmorState : public State$/;"	c	namespace:OpenXcom
CraftEquipmentLoadState	Basescape/CraftEquipmentLoadState.cpp	/^CraftEquipmentLoadState::CraftEquipmentLoadState(CraftEquipmentState *parent) : _parent(parent)$/;"	f	class:OpenXcom::CraftEquipmentLoadState
CraftEquipmentLoadState	Basescape/CraftEquipmentLoadState.h	/^class CraftEquipmentLoadState : public State$/;"	c	namespace:OpenXcom
CraftEquipmentSaveState	Basescape/CraftEquipmentSaveState.cpp	/^CraftEquipmentSaveState::CraftEquipmentSaveState(CraftEquipmentState *parent) : _parent(parent), _previousSelectedRow(-1), _selectedRow(-1)$/;"	f	class:OpenXcom::CraftEquipmentSaveState
CraftEquipmentSaveState	Basescape/CraftEquipmentSaveState.h	/^class CraftEquipmentSaveState : public State$/;"	c	namespace:OpenXcom
CraftEquipmentState	Basescape/CraftEquipmentState.cpp	/^CraftEquipmentState::CraftEquipmentState(Base *base, size_t craft) :$/;"	f	class:OpenXcom::CraftEquipmentState
CraftEquipmentState	Basescape/CraftEquipmentState.h	/^class CraftEquipmentState : public State$/;"	c	namespace:OpenXcom
CraftErrorState	Geoscape/CraftErrorState.cpp	/^CraftErrorState::CraftErrorState(GeoscapeState *state, const std::string &msg, bool enableHotkeys) : _state(state)$/;"	f	class:OpenXcom::CraftErrorState
CraftErrorState	Geoscape/CraftErrorState.h	/^class CraftErrorState : public State$/;"	c	namespace:OpenXcom
CraftId	Savegame/Craft.h	/^typedef std::pair<std::string, int> CraftId;$/;"	t	namespace:OpenXcom
CraftInfoState	Basescape/CraftInfoState.cpp	/^CraftInfoState::CraftInfoState(Base *base, size_t craftId) : _base(base), _craftId(craftId), _craft(0)$/;"	f	class:OpenXcom::CraftInfoState
CraftInfoState	Basescape/CraftInfoState.h	/^class CraftInfoState : public State$/;"	c	namespace:OpenXcom
CraftNotEnoughPilotsState	Geoscape/CraftNotEnoughPilotsState.cpp	/^CraftNotEnoughPilotsState::CraftNotEnoughPilotsState(Craft *craft) : _craft(craft)$/;"	f	class:OpenXcom::CraftNotEnoughPilotsState
CraftNotEnoughPilotsState	Geoscape/CraftNotEnoughPilotsState.h	/^class CraftNotEnoughPilotsState : public State$/;"	c	namespace:OpenXcom
CraftPatrolState	Geoscape/CraftPatrolState.cpp	/^CraftPatrolState::CraftPatrolState(Craft *craft, Globe *globe) : _craft(craft), _globe(globe)$/;"	f	class:OpenXcom::CraftPatrolState
CraftPatrolState	Geoscape/CraftPatrolState.h	/^class CraftPatrolState : public State$/;"	c	namespace:OpenXcom
CraftPilotSelectState	Basescape/CraftPilotSelectState.cpp	/^CraftPilotSelectState::CraftPilotSelectState(Base *base, size_t craft) : _base(base), _craft(craft)$/;"	f	class:OpenXcom::CraftPilotSelectState
CraftPilotSelectState	Basescape/CraftPilotSelectState.h	/^class CraftPilotSelectState : public State$/;"	c	namespace:OpenXcom
CraftPilotsState	Basescape/CraftPilotsState.cpp	/^CraftPilotsState::CraftPilotsState(Base *base, size_t craft) : _base(base), _craft(craft)$/;"	f	class:OpenXcom::CraftPilotsState
CraftPilotsState	Basescape/CraftPilotsState.h	/^class CraftPilotsState : public State$/;"	c	namespace:OpenXcom
CraftSoldiersState	Basescape/CraftSoldiersState.cpp	/^CraftSoldiersState::CraftSoldiersState(Base *base, size_t craft)$/;"	f	class:OpenXcom::CraftSoldiersState
CraftSoldiersState	Basescape/CraftSoldiersState.h	/^class CraftSoldiersState : public State$/;"	c	namespace:OpenXcom
CraftWeapon	Savegame/CraftWeapon.cpp	/^CraftWeapon::CraftWeapon(RuleCraftWeapon *rules, int ammo) : _rules(rules), _ammo(ammo), _rearming(false), _disabled(false)$/;"	f	class:OpenXcom::CraftWeapon
CraftWeapon	Savegame/CraftWeapon.h	/^class CraftWeapon$/;"	c	namespace:OpenXcom
CraftWeaponCategory	Mod/RuleCraftWeapon.h	/^enum CraftWeaponCategory { CWC_WEAPON, CWC_TRACTOR_BEAM, CWC_EQUIPMENT };$/;"	g	namespace:OpenXcom
CraftWeaponProjectile	Savegame/CraftWeaponProjectile.cpp	/^CraftWeaponProjectile::CraftWeaponProjectile() : _type(CWPT_CANNON_ROUND), _globalType(CWPGT_MISSILE), _speed(0), _direction(D_NONE), _currentPosition(0), _horizontalPosition(0), _state(0), _accuracy(0), _damage(0), _range(0), _toBeRemoved(false), _missed(false), _distanceCovered(0), _shieldDamageModifier(100)$/;"	f	class:OpenXcom::CraftWeaponProjectile
CraftWeaponProjectile	Savegame/CraftWeaponProjectile.h	/^class CraftWeaponProjectile$/;"	c	namespace:OpenXcom
CraftWeaponProjectileGlobalType	Savegame/CraftWeaponProjectile.h	/^enum CraftWeaponProjectileGlobalType { CWPGT_MISSILE, CWPGT_BEAM };$/;"	g	namespace:OpenXcom
CraftWeaponProjectileType	Savegame/CraftWeaponProjectile.h	/^enum CraftWeaponProjectileType { CWPT_STINGRAY_MISSILE, CWPT_AVALANCHE_MISSILE, CWPT_CANNON_ROUND, CWPT_FUSION_BALL, CWPT_LASER_BEAM, CWPT_PLASMA_BEAM };$/;"	g	namespace:OpenXcom
CraftWeaponsState	Basescape/CraftWeaponsState.cpp	/^CraftWeaponsState::CraftWeaponsState(Base *base, size_t craft, size_t weapon) : _base(base), _craft(base->getCrafts()->at(craft)), _weapon(weapon)$/;"	f	class:OpenXcom::CraftWeaponsState
CraftWeaponsState	Basescape/CraftWeaponsState.h	/^class CraftWeaponsState : public State$/;"	c	namespace:OpenXcom
CraftsState	Basescape/CraftsState.cpp	/^CraftsState::CraftsState(Base *base) : _base(base)$/;"	f	class:OpenXcom::CraftsState
CraftsState	Basescape/CraftsState.h	/^class CraftsState : public State$/;"	c	namespace:OpenXcom
CreateItemParser	Mod/ModScript.h	/^	struct CreateItemParser : ScriptParserEvents<ScriptOutputArgs<>, BattleItem*, BattleUnit*,  SavedBattleGame*, int>$/;"	s	class:OpenXcom::ModScript
CreateItemParser	Savegame/BattleItem.cpp	/^ModScript::CreateItemParser::CreateItemParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name, "item", "unit", "battle_game", "turn", }$/;"	f	class:OpenXcom::ModScript::CreateItemParser
CreateShadow	Geoscape/Globe.cpp	/^struct CreateShadow$/;"	s	namespace:OpenXcom::__anon49	file:
CreateUnitParser	Mod/ModScript.h	/^	struct CreateUnitParser : ScriptParserEvents<ScriptOutputArgs<>, BattleUnit*, SavedBattleGame*, int>$/;"	s	class:OpenXcom::ModScript
CreateUnitParser	Savegame/BattleUnit.cpp	/^ModScript::CreateUnitParser::CreateUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name, "unit", "battle_game", "turn", }$/;"	f	class:OpenXcom::ModScript::CreateUnitParser
CroatianPlurality	Engine/LanguagePlurality.cpp	/^class CroatianPlurality : public LanguagePlurality$/;"	c	namespace:OpenXcom	file:
CrossPlatform	Engine/CrossPlatform.cpp	/^namespace CrossPlatform$/;"	n	namespace:OpenXcom	file:
CrossPlatform	Engine/CrossPlatform.h	/^namespace CrossPlatform$/;"	n	namespace:OpenXcom
Cursor	Interface/Cursor.cpp	/^Cursor::Cursor(int width, int height, int x, int y) : Surface(width, height, x, y), _color(0)$/;"	f	class:OpenXcom::Cursor
Cursor	Interface/Cursor.h	/^class Cursor : public Surface$/;"	c	namespace:OpenXcom
CursorType	Battlescape/Map.h	/^enum CursorType { CT_NONE, CT_NORMAL, CT_AIM, CT_PSI, CT_WAYPOINT, CT_THROW };$/;"	g	namespace:OpenXcom
CustomPalettes	Mod/CustomPalettes.cpp	/^CustomPalettes::CustomPalettes(const std::string &type) : _type(type)$/;"	f	class:OpenXcom::CustomPalettes
CustomPalettes	Mod/CustomPalettes.h	/^class CustomPalettes$/;"	c	namespace:OpenXcom
CutsceneState	Menu/CutsceneState.cpp	/^CutsceneState::CutsceneState(const std::string &cutsceneId)$/;"	f	class:OpenXcom::CutsceneState
CutsceneState	Menu/CutsceneState.h	/^class CutsceneState : public State$/;"	c	namespace:OpenXcom
CyrillicPlurality	Engine/LanguagePlurality.cpp	/^class CyrillicPlurality : public LanguagePlurality$/;"	c	namespace:OpenXcom	file:
CzechPlurality	Engine/LanguagePlurality.cpp	/^class CzechPlurality : public LanguagePlurality$/;"	c	namespace:OpenXcom	file:
DAMAGE_MAX	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
DAMAGE_MIN	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
DAMAGE_RANGE	Mod/Mod.cpp	/^int Mod::DAMAGE_RANGE;$/;"	m	class:OpenXcom::Mod	file:
DAMAGE_RANGE	Mod/Mod.h	/^	static int DAMAGE_RANGE;$/;"	m	class:OpenXcom::Mod
DAMAGE_TYPES	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DEBRIEF_MUSIC_BAD	Mod/Mod.cpp	/^std::string Mod::DEBRIEF_MUSIC_BAD;$/;"	m	class:OpenXcom::Mod	file:
DEBRIEF_MUSIC_BAD	Mod/Mod.h	/^	static std::string DEBRIEF_MUSIC_BAD;$/;"	m	class:OpenXcom::Mod
DEBRIEF_MUSIC_GOOD	Mod/Mod.cpp	/^std::string Mod::DEBRIEF_MUSIC_GOOD;$/;"	m	class:OpenXcom::Mod	file:
DEBRIEF_MUSIC_GOOD	Mod/Mod.h	/^	static std::string DEBRIEF_MUSIC_GOOD;$/;"	m	class:OpenXcom::Mod
DEFAULT_ANIM_SPEED	Battlescape/BattlescapeState.h	/^	static const int DEFAULT_ANIM_SPEED = 100;$/;"	m	class:OpenXcom::BattlescapeState
DEFAULT_CRAFT_DEPLOYMENT_PREVIEW	Mod/RuleCraft.cpp	/^const std::string RuleCraft::DEFAULT_CRAFT_DEPLOYMENT_PREVIEW = "STR_CRAFT_DEPLOYMENT_PREVIEW";$/;"	m	class:OpenXcom::RuleCraft	file:
DEFAULT_CRAFT_DEPLOYMENT_PREVIEW	Mod/RuleCraft.h	/^	static const std::string DEFAULT_CRAFT_DEPLOYMENT_PREVIEW;$/;"	m	class:OpenXcom::RuleCraft
DEFAULT_MOVE_COST	Battlescape/Pathfinding.h	/^	static constexpr int DEFAULT_MOVE_COST = 4;$/;"	m	class:OpenXcom::Pathfinding
DEFAULT_WINDOWSIZE	lodepng.cpp	2271;"	d	file:
DEF_GETTER	Engine/Scalers/xbrz.cpp	345;"	d	file:
DEF_GETTER	Engine/Scalers/xbrz.cpp	350;"	d	file:
DEF_GETTER	Engine/Scalers/xbrz.cpp	352;"	d	file:
DEF_GETTER	Engine/Scalers/xbrz.cpp	356;"	d	file:
DEF_GETTER	Engine/Scalers/xbrz.cpp	358;"	d	file:
DEF_GETTER	Engine/Scalers/xbrz.cpp	362;"	d	file:
DEF_GETTER	Engine/Scalers/xbrz.cpp	364;"	d	file:
DEF_GETTER	Engine/Scalers/xbrz.cpp	368;"	d	file:
DELTAT_MIXING_LEVEL	Engine/Adlib/fmopl.cpp	64;"	d	file:
DESTROYED	Savegame/Ufo.h	/^	enum UfoStatus { FLYING, LANDED, CRASHED, DESTROYED };$/;"	e	enum:OpenXcom::Ufo::UfoStatus
DIARY_COMMENDATIONS	Basescape/SoldierDiaryPerformanceState.h	/^enum SoldierDiaryDisplay { DIARY_KILLS, DIARY_MISSIONS, DIARY_COMMENDATIONS };$/;"	e	enum:OpenXcom::SoldierDiaryDisplay
DIARY_KILLS	Basescape/SoldierDiaryPerformanceState.h	/^enum SoldierDiaryDisplay { DIARY_KILLS, DIARY_MISSIONS, DIARY_COMMENDATIONS };$/;"	e	enum:OpenXcom::SoldierDiaryDisplay
DIARY_MISSIONS	Basescape/SoldierDiaryPerformanceState.h	/^enum SoldierDiaryDisplay { DIARY_KILLS, DIARY_MISSIONS, DIARY_COMMENDATIONS };$/;"	e	enum:OpenXcom::SoldierDiaryDisplay
DIFFICULTY_BASED_RETAL_DELAY	Mod/Mod.cpp	/^int Mod::DIFFICULTY_BASED_RETAL_DELAY[5];$/;"	m	class:OpenXcom::Mod	file:
DIFFICULTY_BASED_RETAL_DELAY	Mod/Mod.h	/^	static int DIFFICULTY_BASED_RETAL_DELAY[5];$/;"	m	class:OpenXcom::Mod
DIFFICULTY_COEFFICIENT	Mod/Mod.cpp	/^int Mod::DIFFICULTY_COEFFICIENT[5];$/;"	m	class:OpenXcom::Mod	file:
DIFFICULTY_COEFFICIENT	Mod/Mod.h	/^	static int DIFFICULTY_COEFFICIENT[5];$/;"	m	class:OpenXcom::Mod
DIRECTION_LTR	Engine/Language.h	/^enum TextDirection { DIRECTION_LTR, DIRECTION_RTL };$/;"	e	enum:OpenXcom::TextDirection
DIRECTION_RTL	Engine/Language.h	/^enum TextDirection { DIRECTION_LTR, DIRECTION_RTL };$/;"	e	enum:OpenXcom::TextDirection
DIR_DOWN	Battlescape/Pathfinding.h	/^	static const int DIR_DOWN = 9;$/;"	m	class:OpenXcom::Pathfinding
DIR_UP	Battlescape/Pathfinding.h	/^	static const int DIR_UP = 8;$/;"	m	class:OpenXcom::Pathfinding
DISABLED_AMMO	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
DISABLED_RANGE	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
DISABLED_WEAPON	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
DISTANCEBASE	lodepng.cpp	/^static const unsigned DISTANCEBASE[30]$/;"	v	file:
DISTANCEEXTRA	lodepng.cpp	/^static const unsigned DISTANCEEXTRA[30]$/;"	v	file:
DOGFIGHT_ZOOM	Geoscape/Globe.h	/^	static const size_t DOGFIGHT_ZOOM = 3;$/;"	m	class:OpenXcom::Globe
DOOR_OPEN	Mod/Mod.cpp	/^int Mod::DOOR_OPEN;$/;"	m	class:OpenXcom::Mod	file:
DOOR_OPEN	Mod/Mod.h	/^	static int DOOR_OPEN;$/;"	m	class:OpenXcom::Mod
DOSFONT_SIZE	Engine/DosFont.h	20;"	d
DR	Engine/Adlib/fmopl.h	/^	INT32 *DR;		\/* decay rate      :&DR_TALBE[DR<<2]   *\/$/;"	m	struct:fm_opl_slot
DRT_DEFAULT	Mod/RuleDamageType.h	/^	DRT_DEFAULT = 0,$/;"	e	enum:OpenXcom::ItemDamageRandomType
DRT_EASY	Mod/RuleDamageType.h	/^	DRT_EASY = 7,$/;"	e	enum:OpenXcom::ItemDamageRandomType
DRT_EXPLOSION	Mod/RuleDamageType.h	/^	DRT_EXPLOSION = 9,$/;"	e	enum:OpenXcom::ItemDamageRandomType
DRT_FIRE	Mod/RuleDamageType.h	/^	DRT_FIRE = 4,$/;"	e	enum:OpenXcom::ItemDamageRandomType
DRT_FLAT	Mod/RuleDamageType.h	/^	DRT_FLAT = 3,$/;"	e	enum:OpenXcom::ItemDamageRandomType
DRT_NONE	Mod/RuleDamageType.h	/^	DRT_NONE = 5,$/;"	e	enum:OpenXcom::ItemDamageRandomType
DRT_STANDARD	Mod/RuleDamageType.h	/^	DRT_STANDARD = 8,$/;"	e	enum:OpenXcom::ItemDamageRandomType
DRT_TFTD	Mod/RuleDamageType.h	/^	DRT_TFTD = 2,$/;"	e	enum:OpenXcom::ItemDamageRandomType
DRT_UFO	Mod/RuleDamageType.h	/^	DRT_UFO = 1,$/;"	e	enum:OpenXcom::ItemDamageRandomType
DRT_UFO_WITH_TWO_DICE	Mod/RuleDamageType.h	/^	DRT_UFO_WITH_TWO_DICE = 6,$/;"	e	enum:OpenXcom::ItemDamageRandomType
DR_TABLE	Engine/Adlib/fmopl.h	/^	INT32 DR_TABLE[75];	\/* decay rate tables   *\/$/;"	m	struct:fm_opl_f
DT_10	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_11	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_12	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_13	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_14	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_15	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_16	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_17	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_18	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_19	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_ACID	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_AP	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_HE	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_IN	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_LASER	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_MELEE	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_NONE	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_PLASMA	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_SMOKE	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DT_STUN	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	e	enum:OpenXcom::ItemDamageType
DUMMY_CRAFT_ID	Mod/RuleCraft.h	/^	static const int DUMMY_CRAFT_ID = -42; \/\/ a negative integer$/;"	m	class:OpenXcom::RuleCraft
DV	Engine/Adlib/fmopl.cpp	129;"	d	file:
DV	Engine/Adlib/fmopl.cpp	175;"	d	file:
D_DOWN	Savegame/CraftWeaponProjectile.h	/^enum Directions { D_NONE, D_UP, D_DOWN };$/;"	e	enum:OpenXcom::Directions
D_NONE	Savegame/CraftWeaponProjectile.h	/^enum Directions { D_NONE, D_UP, D_DOWN };$/;"	e	enum:OpenXcom::Directions
D_UP	Savegame/CraftWeaponProjectile.h	/^enum Directions { D_NONE, D_UP, D_DOWN };$/;"	e	enum:OpenXcom::Directions
DamageSpecialUnitParser	Mod/ModScript.h	/^	struct DamageSpecialUnitParser : ScriptParserEvents<ScriptOutputArgs<int, int&, int, int&, int&, int&>, BattleUnit*, BattleItem*, BattleItem*, BattleUnit*, SavedBattleGame*, const RuleSkill*, int, int, int, int, int, int>$/;"	s	class:OpenXcom::ModScript
DamageSpecialUnitParser	Savegame/BattleUnit.cpp	/^ModScript::DamageSpecialUnitParser::DamageSpecialUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::DamageSpecialUnitParser
DamageUnitParser	Mod/ModScript.h	/^	struct DamageUnitParser : ScriptParserEvents<ScriptOutputArgs<int&, int&, int&, int&, int&, int&, int&, int&, int&>, BattleUnit*, BattleItem*, BattleItem*, BattleUnit*, SavedBattleGame*, const RuleSkill*, int, int, int, int, int, int>$/;"	s	class:OpenXcom::ModScript
DamageUnitParser	Savegame/BattleUnit.cpp	/^ModScript::DamageUnitParser::DamageUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::DamageUnitParser
DebriefingStat	Battlescape/DebriefingState.h	/^	DebriefingStat(const std::string &_item, bool _recovery) : item(_item), qty(0), score(0), recovery(_recovery) {};$/;"	f	struct:OpenXcom::DebriefingStat
DebriefingStat	Battlescape/DebriefingState.h	/^struct DebriefingStat {$/;"	s	namespace:OpenXcom
DebriefingState	Battlescape/DebriefingState.cpp	/^DebriefingState::DebriefingState() : _eventToSpawn(nullptr), _region(0), _country(0), _positiveScore(true), _destroyBase(false), _showSellButton(true), _initDone(false), _pageNumber(0)$/;"	f	class:OpenXcom::DebriefingState
DebriefingState	Battlescape/DebriefingState.h	/^class DebriefingState : public State$/;"	c	namespace:OpenXcom
Deg2Rad	fmath.h	/^inline double Deg2Rad(double deg)$/;"	f
DeleteGameState	Menu/DeleteGameState.cpp	/^DeleteGameState::DeleteGameState(OptionsOrigin origin, const std::string &save) : _origin(origin)$/;"	f	class:OpenXcom::DeleteGameState
DeleteGameState	Menu/DeleteGameState.h	/^class DeleteGameState : public State$/;"	c	namespace:OpenXcom
DeploymentData	Mod/AlienDeployment.h	/^	DeploymentData() : alienRank(0), lowQty(0), medQty(0), highQty(0), dQty(0), extraQty(0), percentageOutsideUfo(0) { }$/;"	f	struct:OpenXcom::DeploymentData
DeploymentData	Mod/AlienDeployment.h	/^struct DeploymentData$/;"	s	namespace:OpenXcom
DetectUfoFromBaseParser	Mod/ModScript.h	/^	struct DetectUfoFromBaseParser : ScriptParserEvents<ScriptOutputArgs<int&, int&>, const Ufo*, const SavedGame*, int, int, int, int, int, int>$/;"	s	class:OpenXcom::ModScript
DetectUfoFromBaseParser	Savegame/Ufo.cpp	/^ModScript::DetectUfoFromBaseParser::DetectUfoFromBaseParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::DetectUfoFromBaseParser
DetectUfoFromCraftParser	Mod/ModScript.h	/^	struct DetectUfoFromCraftParser : ScriptParserEvents<ScriptOutputArgs<int&, int&>, const Ufo*, const SavedGame*, const Craft*, int, int, int, int>$/;"	s	class:OpenXcom::ModScript
DetectUfoFromCraftParser	Savegame/Ufo.cpp	/^ModScript::DetectUfoFromCraftParser::DetectUfoFromCraftParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::DetectUfoFromCraftParser
DetectXCOMBase	Geoscape/GeoscapeState.cpp	/^	DetectXCOMBase(const Base &base) : _base(base) { \/* Empty by design.  *\/ }$/;"	f	class:OpenXcom::DetectXCOMBase
DetectXCOMBase	Geoscape/GeoscapeState.cpp	/^class DetectXCOMBase$/;"	c	namespace:OpenXcom	file:
Diff	Engine/Scalers/common.h	/^static inline int Diff(uint32_t c1, uint32_t c2)$/;"	f
Directions	Savegame/CraftWeaponProjectile.h	/^enum Directions { D_NONE, D_UP, D_DOWN };$/;"	g	namespace:OpenXcom
DismantleFacilityState	Basescape/DismantleFacilityState.cpp	/^DismantleFacilityState::DismantleFacilityState(Base *base, BaseView *view, BaseFacility *fac) : _base(base), _view(view), _fac(fac)$/;"	f	class:OpenXcom::DismantleFacilityState
DismantleFacilityState	Basescape/DismantleFacilityState.h	/^class DismantleFacilityState : public State$/;"	c	namespace:OpenXcom
DistYCbCrBuffer	Engine/Scalers/xbrz.cpp	/^    DistYCbCrBuffer() : buffer(256 * 256 * 256)$/;"	f	struct:__anon10::DistYCbCrBuffer	file:
DistYCbCrBuffer	Engine/Scalers/xbrz.cpp	/^struct DistYCbCrBuffer \/\/30% perf boost compared to distYCbCr()!$/;"	s	namespace:__anon10	file:
DogfightErrorState	Geoscape/DogfightErrorState.cpp	/^DogfightErrorState::DogfightErrorState(Craft *craft, const std::string &msg) : _craft(craft)$/;"	f	class:OpenXcom::DogfightErrorState
DogfightErrorState	Geoscape/DogfightErrorState.h	/^class DogfightErrorState : public State$/;"	c	namespace:OpenXcom
DogfightExperienceState	Geoscape/DogfightExperienceState.cpp	/^DogfightExperienceState::DogfightExperienceState()$/;"	f	class:OpenXcom::DogfightExperienceState
DogfightExperienceState	Geoscape/DogfightExperienceState.h	/^class DogfightExperienceState : public State$/;"	c	namespace:OpenXcom
DogfightState	Geoscape/DogfightState.cpp	/^DogfightState::DogfightState(GeoscapeState *state, Craft *craft, Ufo *ufo, bool ufoIsAttacking) :$/;"	f	class:OpenXcom::DogfightState
DogfightState	Geoscape/DogfightState.h	/^class DogfightState : public State$/;"	c	namespace:OpenXcom
EG_AED	Engine/Adlib/fmopl.cpp	94;"	d	file:
EG_AST	Engine/Adlib/fmopl.cpp	95;"	d	file:
EG_DED	Engine/Adlib/fmopl.cpp	92;"	d	file:
EG_DST	Engine/Adlib/fmopl.cpp	93;"	d	file:
EG_ENT	Engine/Adlib/fmopl.cpp	87;"	d	file:
EG_OFF	Engine/Adlib/fmopl.cpp	91;"	d	file:
EG_STEP	Engine/Adlib/fmopl.cpp	97;"	d	file:
END_LOSE	Savegame/SavedGame.h	/^enum GameEnding { END_NONE, END_WIN, END_LOSE };$/;"	e	enum:OpenXcom::GameEnding
END_NONE	Savegame/SavedGame.h	/^enum GameEnding { END_NONE, END_WIN, END_LOSE };$/;"	e	enum:OpenXcom::GameEnding
END_WIN	Savegame/SavedGame.h	/^enum GameEnding { END_NONE, END_WIN, END_LOSE };$/;"	e	enum:OpenXcom::GameEnding
ENV_BITS	Engine/Adlib/fmopl.cpp	85;"	d	file:
ENV_CURVE	Engine/Adlib/fmopl.cpp	/^static INT32 ENV_CURVE[2*EG_ENT+1];$/;"	v	file:
ENV_MOD_AR	Engine/Adlib/fmopl.cpp	116;"	d	file:
ENV_MOD_DR	Engine/Adlib/fmopl.cpp	115;"	d	file:
ENV_MOD_RR	Engine/Adlib/fmopl.cpp	114;"	d	file:
ERROR_BREAK	lodepng.cpp	103;"	d	file:
ETM_BRAVERY	Mod/RuleItem.h	/^	ETM_BRAVERY, ETM_BRAVERY_2X,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_BRAVERY_2X	Mod/RuleItem.h	/^	ETM_BRAVERY, ETM_BRAVERY_2X,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_BRAVERY_AND_REACTIONS	Mod/RuleItem.h	/^	ETM_BRAVERY_AND_REACTIONS,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_BRAVERY_OR_REACTIONS	Mod/RuleItem.h	/^	ETM_BRAVERY_OR_REACTIONS, ETM_BRAVERY_OR_REACTIONS_2X,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_BRAVERY_OR_REACTIONS_2X	Mod/RuleItem.h	/^	ETM_BRAVERY_OR_REACTIONS, ETM_BRAVERY_OR_REACTIONS_2X,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_DEFAULT	Mod/RuleItem.h	/^	ETM_DEFAULT,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_FIRING_100	Mod/RuleItem.h	/^	ETM_FIRING_100, ETM_FIRING_50, ETM_FIRING_33,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_FIRING_33	Mod/RuleItem.h	/^	ETM_FIRING_100, ETM_FIRING_50, ETM_FIRING_33,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_FIRING_50	Mod/RuleItem.h	/^	ETM_FIRING_100, ETM_FIRING_50, ETM_FIRING_33,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_FIRING_AND_THROWING	Mod/RuleItem.h	/^	ETM_FIRING_AND_THROWING,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_FIRING_OR_THROWING	Mod/RuleItem.h	/^	ETM_FIRING_OR_THROWING,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_MELEE_100	Mod/RuleItem.h	/^	ETM_MELEE_100, ETM_MELEE_50, ETM_MELEE_33,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_MELEE_33	Mod/RuleItem.h	/^	ETM_MELEE_100, ETM_MELEE_50, ETM_MELEE_33,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_MELEE_50	Mod/RuleItem.h	/^	ETM_MELEE_100, ETM_MELEE_50, ETM_MELEE_33,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_NOTHING	Mod/RuleItem.h	/^	ETM_NOTHING$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_PSI_SKILL	Mod/RuleItem.h	/^	ETM_PSI_SKILL, ETM_PSI_SKILL_2X,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_PSI_SKILL_2X	Mod/RuleItem.h	/^	ETM_PSI_SKILL, ETM_PSI_SKILL_2X,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_PSI_STRENGTH	Mod/RuleItem.h	/^	ETM_PSI_STRENGTH, ETM_PSI_STRENGTH_2X,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_PSI_STRENGTH_2X	Mod/RuleItem.h	/^	ETM_PSI_STRENGTH, ETM_PSI_STRENGTH_2X,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_PSI_STRENGTH_AND_SKILL	Mod/RuleItem.h	/^	ETM_PSI_STRENGTH_AND_SKILL, ETM_PSI_STRENGTH_AND_SKILL_2X,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_PSI_STRENGTH_AND_SKILL_2X	Mod/RuleItem.h	/^	ETM_PSI_STRENGTH_AND_SKILL, ETM_PSI_STRENGTH_AND_SKILL_2X,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_PSI_STRENGTH_OR_SKILL	Mod/RuleItem.h	/^	ETM_PSI_STRENGTH_OR_SKILL, ETM_PSI_STRENGTH_OR_SKILL_2X,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_PSI_STRENGTH_OR_SKILL_2X	Mod/RuleItem.h	/^	ETM_PSI_STRENGTH_OR_SKILL, ETM_PSI_STRENGTH_OR_SKILL_2X,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_REACTIONS	Mod/RuleItem.h	/^	ETM_REACTIONS,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_REACTIONS_AND_FIRING	Mod/RuleItem.h	/^	ETM_REACTIONS_AND_MELEE, ETM_REACTIONS_AND_FIRING, ETM_REACTIONS_AND_THROWING,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_REACTIONS_AND_MELEE	Mod/RuleItem.h	/^	ETM_REACTIONS_AND_MELEE, ETM_REACTIONS_AND_FIRING, ETM_REACTIONS_AND_THROWING,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_REACTIONS_AND_THROWING	Mod/RuleItem.h	/^	ETM_REACTIONS_AND_MELEE, ETM_REACTIONS_AND_FIRING, ETM_REACTIONS_AND_THROWING,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_REACTIONS_OR_FIRING	Mod/RuleItem.h	/^	ETM_REACTIONS_OR_MELEE, ETM_REACTIONS_OR_FIRING, ETM_REACTIONS_OR_THROWING,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_REACTIONS_OR_MELEE	Mod/RuleItem.h	/^	ETM_REACTIONS_OR_MELEE, ETM_REACTIONS_OR_FIRING, ETM_REACTIONS_OR_THROWING,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_REACTIONS_OR_THROWING	Mod/RuleItem.h	/^	ETM_REACTIONS_OR_MELEE, ETM_REACTIONS_OR_FIRING, ETM_REACTIONS_OR_THROWING,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_THROWING_100	Mod/RuleItem.h	/^	ETM_THROWING_100, ETM_THROWING_50, ETM_THROWING_33,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_THROWING_33	Mod/RuleItem.h	/^	ETM_THROWING_100, ETM_THROWING_50, ETM_THROWING_33,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
ETM_THROWING_50	Mod/RuleItem.h	/^	ETM_THROWING_100, ETM_THROWING_50, ETM_THROWING_33,$/;"	e	enum:OpenXcom::ExperienceTrainingMode
EXCEPTION_CODE_CXX	Engine/CrossPlatform.cpp	55;"	d	file:
EXPLODE_FRAMES	Battlescape/Explosion.cpp	/^const int Explosion::EXPLODE_FRAMES = 8;$/;"	m	class:OpenXcom::Explosion	file:
EXPLODE_FRAMES	Battlescape/Explosion.h	/^	static const int EXPLODE_FRAMES;$/;"	m	class:OpenXcom::Explosion
EXPLOSION_OFFSET	Mod/Mod.cpp	/^int Mod::EXPLOSION_OFFSET;$/;"	m	class:OpenXcom::Mod	file:
EXPLOSION_OFFSET	Mod/Mod.h	/^	static int EXPLOSION_OFFSET;$/;"	m	class:OpenXcom::Mod
EXPLOSIVE_DAMAGE_RANGE	Mod/Mod.cpp	/^int Mod::EXPLOSIVE_DAMAGE_RANGE;$/;"	m	class:OpenXcom::Mod	file:
EXPLOSIVE_DAMAGE_RANGE	Mod/Mod.h	/^	static int EXPLOSIVE_DAMAGE_RANGE;$/;"	m	class:OpenXcom::Mod
EXTENDED_HWP_LOAD_ORDER	Mod/Mod.cpp	/^bool Mod::EXTENDED_HWP_LOAD_ORDER;$/;"	m	class:OpenXcom::Mod	file:
EXTENDED_HWP_LOAD_ORDER	Mod/Mod.h	/^	static bool EXTENDED_HWP_LOAD_ORDER;$/;"	m	class:OpenXcom::Mod
EXTENDED_ITEM_RELOAD_COST	Mod/Mod.cpp	/^bool Mod::EXTENDED_ITEM_RELOAD_COST;$/;"	m	class:OpenXcom::Mod	file:
EXTENDED_ITEM_RELOAD_COST	Mod/Mod.h	/^	static bool EXTENDED_ITEM_RELOAD_COST;$/;"	m	class:OpenXcom::Mod
EXTENDED_MELEE_REACTIONS	Mod/Mod.cpp	/^int Mod::EXTENDED_MELEE_REACTIONS;$/;"	m	class:OpenXcom::Mod	file:
EXTENDED_MELEE_REACTIONS	Mod/Mod.h	/^	static int EXTENDED_MELEE_REACTIONS;$/;"	m	class:OpenXcom::Mod
EXTENDED_RUNNING_COST	Mod/Mod.cpp	/^bool Mod::EXTENDED_RUNNING_COST;$/;"	m	class:OpenXcom::Mod	file:
EXTENDED_RUNNING_COST	Mod/Mod.h	/^	static bool EXTENDED_RUNNING_COST;$/;"	m	class:OpenXcom::Mod
EXTENDED_TERRAIN_MELEE	Mod/Mod.cpp	/^int Mod::EXTENDED_TERRAIN_MELEE;$/;"	m	class:OpenXcom::Mod	file:
EXTENDED_TERRAIN_MELEE	Mod/Mod.h	/^	static int EXTENDED_TERRAIN_MELEE;$/;"	m	class:OpenXcom::Mod
EXTENDED_UNDERWATER_THROW_FACTOR	Mod/Mod.cpp	/^int Mod::EXTENDED_UNDERWATER_THROW_FACTOR;$/;"	m	class:OpenXcom::Mod	file:
EXTENDED_UNDERWATER_THROW_FACTOR	Mod/Mod.h	/^	static int EXTENDED_UNDERWATER_THROW_FACTOR;$/;"	m	class:OpenXcom::Mod
E_CH	Engine/Adlib/fmopl.cpp	/^static OPL_CH *E_CH;$/;"	v	file:
Element	Mod/RuleInterface.h	/^struct Element$/;"	s	namespace:OpenXcom
End	Engine/ScriptBind.h	/^	struct End$/;"	s	struct:OpenXcom::helper::SumListIndexImpl
Energy	Mod/RuleItem.h	/^	int Energy;$/;"	m	struct:OpenXcom::RuleItemUseCost
EnergyPercent	Mod/Armor.h	/^	int EnergyPercent;$/;"	m	struct:OpenXcom::ArmorMoveCost
EngineData	Engine/ModInfo.cpp	/^bool findCompatibleEngine(const EngineData (&l)[I], const std::string& e, const std::array<int, 4>& version)$/;"	m	namespace:OpenXcom::__anon4	file:
EngineData	Engine/ModInfo.cpp	/^struct EngineData$/;"	s	namespace:OpenXcom::__anon4	file:
EntryCompare	Battlescape/PathfindingOpenSet.h	/^class EntryCompare$/;"	c	namespace:OpenXcom
EnvironmentalCondition	Mod/RuleEnviroEffects.h	/^	EnvironmentalCondition() : globalChance(100), chancePerTurn(0), firstTurn(1), lastTurn(1000), color(29), side(-1), bodyPart(-1) { \/*Empty by Design*\/ };$/;"	f	struct:OpenXcom::EnvironmentalCondition
EnvironmentalCondition	Mod/RuleEnviroEffects.h	/^struct EnvironmentalCondition$/;"	s	namespace:OpenXcom
EquipmentLayoutItem	Savegame/EquipmentLayoutItem.cpp	/^EquipmentLayoutItem::EquipmentLayoutItem(const BattleItem* item) :$/;"	f	class:OpenXcom::EquipmentLayoutItem
EquipmentLayoutItem	Savegame/EquipmentLayoutItem.cpp	/^EquipmentLayoutItem::EquipmentLayoutItem(const YAML::Node &node)$/;"	f	class:OpenXcom::EquipmentLayoutItem
EquipmentLayoutItem	Savegame/EquipmentLayoutItem.h	/^class EquipmentLayoutItem$/;"	c	namespace:OpenXcom
ErrorMessageState	Menu/ErrorMessageState.cpp	/^ErrorMessageState::ErrorMessageState(const std::string &msg, SDL_Color *palette, Uint8 color, const std::string &bg, int bgColor)$/;"	f	class:OpenXcom::ErrorMessageState
ErrorMessageState	Menu/ErrorMessageState.h	/^class ErrorMessageState : public State$/;"	c	namespace:OpenXcom
Exception	Engine/Exception.h	/^class Exception : public std::runtime_error$/;"	c	namespace:OpenXcom
Exception	main.cpp	/^	Exception::Exception(const std::string &msg) : runtime_error(msg) {$/;"	f	class:OpenXcom::Exception
ExperienceTrainingMode	Mod/RuleItem.h	/^enum ExperienceTrainingMode {$/;"	g	namespace:OpenXcom
Explosion	Battlescape/Explosion.cpp	/^Explosion::Explosion(Position position, int startFrame, int frameDelay, bool big, bool hit, int frames) :$/;"	f	class:OpenXcom::Explosion
Explosion	Battlescape/Explosion.h	/^class Explosion$/;"	c	namespace:OpenXcom
ExplosionBState	Battlescape/ExplosionBState.cpp	/^ExplosionBState::ExplosionBState(BattlescapeGame *parent, Position center, BattleActionAttack attack, Tile *tile, bool lowerWeapon, int range, int explosionCounter, int terrainMeleeTilePart) : BattleState(parent),$/;"	f	class:OpenXcom::ExplosionBState
ExplosionBState	Battlescape/ExplosionBState.h	/^class ExplosionBState : public BattleState$/;"	c	namespace:OpenXcom
ExtendedBattlescapeLinksState	Battlescape/ExtendedBattlescapeLinksState.cpp	/^ExtendedBattlescapeLinksState::ExtendedBattlescapeLinksState(BattlescapeState* parent, SavedBattleGame* save) : _parent(parent), _save(save)$/;"	f	class:OpenXcom::ExtendedBattlescapeLinksState
ExtendedBattlescapeLinksState	Battlescape/ExtendedBattlescapeLinksState.h	/^class ExtendedBattlescapeLinksState : public State$/;"	c	namespace:OpenXcom
ExtendedGeoscapeLinksState	Geoscape/ExtendedGeoscapeLinksState.cpp	/^ExtendedGeoscapeLinksState::ExtendedGeoscapeLinksState(GeoscapeState* parent) : _parent(parent)$/;"	f	class:OpenXcom::ExtendedGeoscapeLinksState
ExtendedGeoscapeLinksState	Geoscape/ExtendedGeoscapeLinksState.h	/^class ExtendedGeoscapeLinksState : public State$/;"	c	namespace:OpenXcom
ExtendedInventoryLinksState	Battlescape/ExtendedInventoryLinksState.cpp	/^ExtendedInventoryLinksState::ExtendedInventoryLinksState(InventoryState* parent, SavedBattleGame* save, bool inBase, bool beforeMission) : _parent(parent), _save(save)$/;"	f	class:OpenXcom::ExtendedInventoryLinksState
ExtendedInventoryLinksState	Battlescape/ExtendedInventoryLinksState.h	/^class ExtendedInventoryLinksState : public State$/;"	c	namespace:OpenXcom
ExtensionBinding	Engine/ScriptBind.h	/^	struct ExtensionBinding{ explicit ExtensionBinding() = default; };$/;"	s	struct:OpenXcom::BindBase
ExtraSounds	Mod/ExtraSounds.cpp	/^ExtraSounds::ExtraSounds() : _current(0)$/;"	f	class:OpenXcom::ExtraSounds
ExtraSounds	Mod/ExtraSounds.h	/^class ExtraSounds$/;"	c	namespace:OpenXcom
ExtraSprites	Mod/ExtraSprites.cpp	/^ExtraSprites::ExtraSprites() : _current(0), _width(320), _height(200), _singleImage(false), _subX(0), _subY(0), _loaded(false)$/;"	f	class:OpenXcom::ExtraSprites
ExtraSprites	Mod/ExtraSprites.h	/^class ExtraSprites$/;"	c	namespace:OpenXcom
ExtraStrings	Mod/ExtraStrings.cpp	/^ExtraStrings::ExtraStrings()$/;"	f	class:OpenXcom::ExtraStrings
ExtraStrings	Mod/ExtraStrings.h	/^class ExtraStrings$/;"	c	namespace:OpenXcom
F	md5.cpp	/^inline MD5::uint4 MD5::F(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5
FADE_INTERVAL	Battlescape/Map.h	/^	static const int FADE_INTERVAL = 23;$/;"	m	class:OpenXcom::Map
FALLTHROUGH	fallthrough.h	10;"	d
FALLTHROUGH	fallthrough.h	12;"	d
FALLTHROUGH	fallthrough.h	14;"	d
FALLTHROUGH	fallthrough.h	8;"	d
FB	Engine/Adlib/fmopl.h	/^	UINT8 FB;			\/* feed back       :(shift down bit)   *\/$/;"	m	struct:fm_opl_channel
FC_xk	Engine/FastLineClip.h	/^	double FC_xn, FC_yn, FC_xk, FC_yk;$/;"	m	class:OpenXcom::FastLineClip
FC_xn	Engine/FastLineClip.h	/^	double FC_xn, FC_yn, FC_xk, FC_yk;$/;"	m	class:OpenXcom::FastLineClip
FC_yk	Engine/FastLineClip.h	/^	double FC_xn, FC_yn, FC_xk, FC_yk;$/;"	m	class:OpenXcom::FastLineClip
FC_yn	Engine/FastLineClip.h	/^	double FC_xn, FC_yn, FC_xk, FC_yk;$/;"	m	class:OpenXcom::FastLineClip
FF	md5.cpp	/^inline void MD5::FF(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5
FILETIME2mtime	Engine/CrossPlatform.cpp	/^static time_t FILETIME2mtime(FILETIME& ft) {$/;"	f	namespace:OpenXcom::CrossPlatform
FINISHED	Engine/FlcPlayer.cpp	/^	FINISHED,$/;"	e	enum:OpenXcom::PlayingState	file:
FIRE_DAMAGE_RANGE	Mod/Mod.cpp	/^int Mod::FIRE_DAMAGE_RANGE[2];$/;"	m	class:OpenXcom::Mod	file:
FIRE_DAMAGE_RANGE	Mod/Mod.h	/^	static int FIRE_DAMAGE_RANGE[2];$/;"	m	class:OpenXcom::Mod
FIRE_PREVIEW_MOVE_COST	Battlescape/Pathfinding.h	/^	static constexpr int FIRE_PREVIEW_MOVE_COST = 32;$/;"	m	class:OpenXcom::Pathfinding
FIRST_LENGTH_CODE_INDEX	lodepng.cpp	470;"	d	file:
FLC_TYPE	Engine/FlcPlayer.cpp	/^	FLC_TYPE = 0xAF12,$/;"	e	enum:OpenXcom::FileTypes	file:
FLI_BRUN	Engine/FlcPlayer.cpp	/^	FLI_BRUN = 0x0F, \/\/ or BYTE_RUN$/;"	e	enum:OpenXcom::ChunkTypes	file:
FLI_COPY	Engine/FlcPlayer.cpp	/^	FLI_COPY = 0x10,$/;"	e	enum:OpenXcom::ChunkTypes	file:
FLI_LC	Engine/FlcPlayer.cpp	/^	FLI_LC = 0x0C, \/\/ or DELTA_FLI$/;"	e	enum:OpenXcom::ChunkTypes	file:
FLI_SS2	Engine/FlcPlayer.cpp	/^	FLI_SS2 = 0x07, \/\/ or DELTA_FLC$/;"	e	enum:OpenXcom::ChunkTypes	file:
FLI_TYPE	Engine/FlcPlayer.cpp	/^	FLI_TYPE = 0xAF11,$/;"	e	enum:OpenXcom::FileTypes	file:
FLYING	Savegame/Ufo.h	/^	enum UfoStatus { FLYING, LANDED, CRASHED, DESTROYED };$/;"	e	enum:OpenXcom::Ufo::UfoStatus
FLYING_SOUND	Mod/Mod.cpp	/^int Mod::FLYING_SOUND;$/;"	m	class:OpenXcom::Mod	file:
FLYING_SOUND	Mod/Mod.h	/^	static int FLYING_SOUND;$/;"	m	class:OpenXcom::Mod
FM_OPL	Engine/Adlib/fmopl.h	/^} FM_OPL;$/;"	t	typeref:struct:fm_opl_f
FN_TABLE	Engine/Adlib/fmopl.h	/^	UINT32 FN_TABLE[1024];  \/* fnumber -> increment counter *\/$/;"	m	struct:fm_opl_f
FORCE_ABORT	Mod/AlienDeployment.h	/^enum ChronoTrigger { FORCE_LOSE, FORCE_ABORT, FORCE_WIN, FORCE_WIN_SURRENDER };$/;"	e	enum:OpenXcom::ChronoTrigger
FORCE_INLINE	Engine/Scalers/xbrz.cpp	103;"	d	file:
FORCE_INLINE	Engine/Scalers/xbrz.cpp	105;"	d	file:
FORCE_INLINE	Engine/Scalers/xbrz.cpp	107;"	d	file:
FORCE_LOSE	Mod/AlienDeployment.h	/^enum ChronoTrigger { FORCE_LOSE, FORCE_ABORT, FORCE_WIN, FORCE_WIN_SURRENDER };$/;"	e	enum:OpenXcom::ChronoTrigger
FORCE_WIN	Mod/AlienDeployment.h	/^enum ChronoTrigger { FORCE_LOSE, FORCE_ABORT, FORCE_WIN, FORCE_WIN_SURRENDER };$/;"	e	enum:OpenXcom::ChronoTrigger
FORCE_WIN_SURRENDER	Mod/AlienDeployment.h	/^enum ChronoTrigger { FORCE_LOSE, FORCE_ABORT, FORCE_WIN, FORCE_WIN_SURRENDER };$/;"	e	enum:OpenXcom::ChronoTrigger
FPS	Engine/Options.inc.h	/^	soundVolume, musicVolume, uiVolume, audioSampleRate, audioBitDepth, audioChunkSize, pauseMode, windowedModePositionX, windowedModePositionY, FPS, FPSInactive,$/;"	v
FPSInactive	Engine/Options.inc.h	/^	soundVolume, musicVolume, uiVolume, audioSampleRate, audioBitDepth, audioChunkSize, pauseMode, windowedModePositionX, windowedModePositionY, FPS, FPSInactive,$/;"	v
FRAME_TYPE	Engine/FlcPlayer.cpp	/^	FRAME_TYPE = 0xF1FA,$/;"	e	enum:OpenXcom::ChunkTypes	file:
FREQ_BITS	Engine/Adlib/fmopl.cpp	66;"	d	file:
FREQ_OFFSET	Engine/Adlib/adlplayer.cpp	173;"	d	file:
FREQ_RATE	Engine/Adlib/fmopl.cpp	69;"	d	file:
Face	Mod/Mod.cpp	/^		static const Uint8 Face = 6 << 4;$/;"	m	struct:OpenXcom::__anon29::HairXCOM1	file:
FaceColor	Mod/Mod.cpp	/^		static const Uint8 FaceColor = 10 << 4;$/;"	m	struct:OpenXcom::__anon29::FaceXCOM2	file:
FaceXCOM2	Mod/Mod.cpp	/^	struct FaceXCOM2$/;"	s	namespace:OpenXcom::__anon29	file:
FallXCOM2	Mod/Mod.cpp	/^	struct FallXCOM2$/;"	s	namespace:OpenXcom::__anon29	file:
FastLineClip	Engine/FastLineClip.h	/^	FastLineClip(double Wxl, double Wxr, double Wyt, double Wyb) : FC_xn(0), FC_yn(0), FC_xk(0), FC_yk(0)$/;"	f	class:OpenXcom::FastLineClip
FastLineClip	Engine/FastLineClip.h	/^class FastLineClip$/;"	c	namespace:OpenXcom
FileMap	Engine/FileMap.cpp	/^namespace FileMap$/;"	n	namespace:OpenXcom	file:
FileMap	Engine/FileMap.h	/^namespace FileMap$/;"	n	namespace:OpenXcom
FileRecord	Engine/FileMap.cpp	/^FileRecord::FileRecord() : fullpath(""), zip(NULL), findex(0) { }$/;"	f	class:OpenXcom::FileMap::FileRecord
FileRecord	Engine/FileMap.h	/^	struct FileRecord {$/;"	s	namespace:OpenXcom::FileMap
FileSet	Engine/FileMap.cpp	/^typedef std::unordered_map<std::string, FileRecord> FileSet;$/;"	t	namespace:OpenXcom::FileMap	file:
FileTypes	Engine/FlcPlayer.cpp	/^enum FileTypes$/;"	g	namespace:OpenXcom	file:
FilterIterator	Engine/Collections.h	/^		FilterIterator(It curr, It end, Filter filter) :$/;"	f	class:OpenXcom::Collections::FilterIterator
FilterIterator	Engine/Collections.h	/^	class FilterIterator$/;"	c	class:OpenXcom::Collections
FireBlastCalc	Mod/RuleDamageType.h	/^	bool FireBlastCalc;$/;"	m	struct:OpenXcom::RuleDamageType
FireThreshold	Mod/RuleDamageType.h	/^	int FireThreshold;$/;"	m	struct:OpenXcom::RuleDamageType
FixRadius	Mod/RuleDamageType.h	/^	int FixRadius;$/;"	m	struct:OpenXcom::RuleDamageType
FixTransparent	Engine/Surface.cpp	/^inline void FixTransparent(const Surface::UniqueSurfacePtr& dest, int currentTransColor)$/;"	f	namespace:OpenXcom::__anon5
FlcPlayer	Engine/FlcPlayer.cpp	/^FlcPlayer::FlcPlayer() : _fileBuf(0), _mainScreen(0), _realScreen(0), _game(0)$/;"	f	class:OpenXcom::FlcPlayer
FlcPlayer	Engine/FlcPlayer.h	/^class FlcPlayer$/;"	c	namespace:OpenXcom
Font	Engine/Font.cpp	/^Font::Font() : _monospace(false)$/;"	f	class:OpenXcom::Font
Font	Engine/Font.h	/^class Font$/;"	c	namespace:OpenXcom
FontImage	Engine/Font.h	/^struct FontImage$/;"	s	namespace:OpenXcom
FpsCounter	Interface/FpsCounter.cpp	/^FpsCounter::FpsCounter(int width, int height, int x, int y) : Surface(width, height, x, y), _frames(0)$/;"	f	class:OpenXcom::FpsCounter
FpsCounter	Interface/FpsCounter.h	/^class FpsCounter : public Surface$/;"	c	namespace:OpenXcom
Frame	Interface/Frame.cpp	/^Frame::Frame(int width, int height, int x, int y) : Surface(width, height, x, y), _color(0), _bg(0), _thickness(5), _contrast(false)$/;"	f	class:OpenXcom::Frame
Frame	Interface/Frame.h	/^class Frame : public Surface$/;"	c	namespace:OpenXcom
FuncGroup	Engine/ScriptBind.h	/^struct FuncGroup<Func, ListTag<Ver...>> : GetArgs<Func>$/;"	s	namespace:OpenXcom::helper
FuncRef	Engine/Functions.h	/^	FuncRef(F&& f) :FuncRef{ +[](Args... args, void* p){ return std::invoke(*static_cast<std::remove_reference_t<F>*>(p), std::forward<Args>(args)...); }, &f }$/;"	f	class:OpenXcom::FuncRef
FuncRef	Engine/Functions.h	/^	constexpr FuncRef(InternalFunc func, void* data) : _func{ func }, _data{ data }$/;"	f	class:OpenXcom::FuncRef
FuncRef	Engine/Functions.h	/^	constexpr FuncRef(P* f) : FuncRef{ +[](Args... args, void* p){ return std::invoke(*reinterpret_cast<P*>(p), std::forward<Args>(args)...); }, reinterpret_cast<void*>(f) }$/;"	f	class:OpenXcom::FuncRef
FuncRef	Engine/Functions.h	/^class FuncRef<Ret(Args...)>$/;"	c	namespace:OpenXcom
FuncVer	Engine/ScriptBind.h	/^struct FuncVer<Func, Ver, ListTag<Pos...>>$/;"	s	namespace:OpenXcom::helper
Func_clear_text	Engine/Script.cpp	/^struct Func_clear_text$/;"	s	namespace:OpenXcom::__anon7	file:
Func_debug_flush	Engine/Script.cpp	/^struct Func_debug_flush$/;"	s	namespace:OpenXcom::__anon7	file:
Func_debug_impl_int	Engine/Script.cpp	/^struct Func_debug_impl_int$/;"	s	namespace:OpenXcom::__anon7	file:
Func_debug_impl_text	Engine/Script.cpp	/^struct Func_debug_impl_text$/;"	s	namespace:OpenXcom::__anon7	file:
Func_set_text	Engine/Script.cpp	/^struct Func_set_text$/;"	s	namespace:OpenXcom::__anon7	file:
Func_test_eq_null	Engine/Script.cpp	/^struct Func_test_eq_null$/;"	s	namespace:OpenXcom::__anon7	file:
Func_test_eq_text	Engine/Script.cpp	/^struct Func_test_eq_text$/;"	s	namespace:OpenXcom::__anon7	file:
FunctionPointer	Engine/OpenGL.cpp	/^	GenericFunctionPointer FunctionPointer;$/;"	m	union:OpenXcom::__anon6	file:
FundingState	Geoscape/FundingState.cpp	/^FundingState::FundingState()$/;"	f	class:OpenXcom::FundingState
FundingState	Geoscape/FundingState.h	/^class FundingState : public State$/;"	c	namespace:OpenXcom
G	md5.cpp	/^inline MD5::uint4 MD5::G(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5
GEN_MISSION	Mod/RuleMissionScript.h	/^enum GenerationType { GEN_REGION, GEN_MISSION, GEN_RACE };$/;"	e	enum:OpenXcom::GenerationType
GEN_RACE	Mod/RuleMissionScript.h	/^enum GenerationType { GEN_REGION, GEN_MISSION, GEN_RACE };$/;"	e	enum:OpenXcom::GenerationType
GEN_REGION	Mod/RuleMissionScript.h	/^enum GenerationType { GEN_REGION, GEN_MISSION, GEN_RACE };$/;"	e	enum:OpenXcom::GenerationType
GEOSCAPE_CURSOR	Mod/Mod.cpp	/^int Mod::GEOSCAPE_CURSOR;$/;"	m	class:OpenXcom::Mod	file:
GEOSCAPE_CURSOR	Mod/Mod.h	/^	static int GEOSCAPE_CURSOR;$/;"	m	class:OpenXcom::Mod
GET_ATTRIB_STAT_FN	Basescape/SoldierSortUtil.cpp	128;"	d	file:
GET_ATTRIB_STAT_FN	Basescape/SoldierSortUtil.cpp	44;"	d	file:
GET_ATTRIB_STAT_FN	Basescape/SoldierSortUtil.cpp	46;"	d	file:
GET_ATTRIB_STAT_FN	Basescape/SoldierSortUtil.cpp	4;"	d	file:
GET_ATTRIB_STAT_FN	Basescape/SoldierSortUtil.cpp	86;"	d	file:
GET_ATTRIB_STAT_FN	Basescape/SoldierSortUtil.cpp	88;"	d	file:
GET_ATTRIB_STAT_FN	Basescape/SoldierSortUtil.h	50;"	d
GET_ATTRIB_STAT_FN	Basescape/SoldierSortUtil.h	64;"	d
GET_ATTRIB_STAT_FN	Basescape/SoldierSortUtil.h	66;"	d
GET_ATTRIB_STAT_FN	Basescape/SoldierSortUtil.h	80;"	d
GET_ATTRIB_STAT_FN	Basescape/SoldierSortUtil.h	82;"	d
GET_ATTRIB_STAT_FN	Basescape/SoldierSortUtil.h	96;"	d
GET_SOLDIER_STAT_FN	Basescape/SoldierSortUtil.cpp	131;"	d	file:
GET_SOLDIER_STAT_FN	Basescape/SoldierSortUtil.cpp	155;"	d	file:
GET_SOLDIER_STAT_FN	Basescape/SoldierSortUtil.h	109;"	d
GET_SOLDIER_STAT_FN	Basescape/SoldierSortUtil.h	98;"	d
GG	md5.cpp	/^inline void MD5::GG(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5
GLOBE_RADIUS	Savegame/MovingTarget.h	/^	static const double GLOBE_RADIUS;$/;"	m	class:OpenXcom::MovingTarget
GL_EXT	Menu/OptionsVideoState.cpp	/^const std::string OptionsVideoState::GL_EXT = "OpenGL.shader";$/;"	m	class:OpenXcom::OptionsVideoState	file:
GL_EXT	Menu/OptionsVideoState.h	/^	static const std::string GL_EXT, GL_FOLDER, GL_STRING;$/;"	m	class:OpenXcom::OptionsVideoState
GL_FOLDER	Menu/OptionsVideoState.cpp	/^const std::string OptionsVideoState::GL_FOLDER = "Shaders\/";$/;"	m	class:OpenXcom::OptionsVideoState	file:
GL_FOLDER	Menu/OptionsVideoState.h	/^	static const std::string GL_EXT, GL_FOLDER, GL_STRING;$/;"	m	class:OpenXcom::OptionsVideoState
GL_SILENCE_DEPRECATION	Engine/OpenGL.h	15;"	d
GL_STRING	Menu/OptionsVideoState.cpp	/^const std::string OptionsVideoState::GL_STRING = "*";$/;"	m	class:OpenXcom::OptionsVideoState	file:
GL_STRING	Menu/OptionsVideoState.h	/^	static const std::string GL_EXT, GL_FOLDER, GL_STRING;$/;"	m	class:OpenXcom::OptionsVideoState
GMCatFile	Engine/GMCat.h	/^	GMCatFile(const std::string& filename) : CatFile(filename) { }$/;"	f	class:OpenXcom::GMCatFile
GMCatFile	Engine/GMCat.h	/^class GMCatFile : public CatFile$/;"	c	namespace:OpenXcom
GRAPHS_CURSOR	Mod/Mod.cpp	/^int Mod::GRAPHS_CURSOR;$/;"	m	class:OpenXcom::Mod	file:
GRAPHS_CURSOR	Mod/Mod.h	/^	static int GRAPHS_CURSOR;$/;"	m	class:OpenXcom::Mod
GRAPH_MAX_BUTTONS	Geoscape/GraphsState.h	/^	static const size_t GRAPH_MAX_BUTTONS=16;$/;"	m	class:OpenXcom::GraphsState
GRID_SIZE	Basescape/BaseView.h	/^	static const int GRID_SIZE = 32;$/;"	m	class:OpenXcom::BaseView
Game	Engine/Game.cpp	/^Game::Game(const std::string &title) : _screen(0), _cursor(0), _lang(0), _save(0), _mod(0), _quit(false), _init(false), _update(false),  _mouseActive(true), _timeUntilNextFrame(0),$/;"	f	class:OpenXcom::Game
Game	Engine/Game.h	/^class Game$/;"	c	namespace:OpenXcom
GameEnding	Savegame/SavedGame.h	/^enum GameEnding { END_NONE, END_WIN, END_LOSE };$/;"	g	namespace:OpenXcom
GameTime	Savegame/GameTime.cpp	/^GameTime::GameTime(int weekday, int day, int month, int year, int hour, int minute, int second) : _second(second), _minute(minute), _hour(hour), _weekday(weekday), _day(day), _month(month), _year(year)$/;"	f	class:OpenXcom::GameTime
GameTime	Savegame/GameTime.h	/^class GameTime$/;"	c	namespace:OpenXcom
GenerateSupplyMission	Geoscape/GeoscapeState.cpp	/^	GenerateSupplyMission(Game &engine, const Globe &globe) : _engine(engine), _globe(globe) { \/* Empty by design *\/ }$/;"	f	class:OpenXcom::GenerateSupplyMission
GenerateSupplyMission	Geoscape/GeoscapeState.cpp	/^class GenerateSupplyMission$/;"	c	namespace:OpenXcom	file:
GenerationType	Mod/RuleMissionScript.h	/^enum GenerationType { GEN_REGION, GEN_MISSION, GEN_RACE };$/;"	g	namespace:OpenXcom
GenericFunctionPointer	Engine/OpenGL.cpp	/^typedef void (*GenericFunctionPointer)();$/;"	t	namespace:OpenXcom	file:
GeoscapeCraftState	Geoscape/GeoscapeCraftState.cpp	/^GeoscapeCraftState::GeoscapeCraftState(Craft *craft, Globe *globe, Waypoint *waypoint, bool useCustomSound) : _craft(craft), _globe(globe), _waypoint(waypoint)$/;"	f	class:OpenXcom::GeoscapeCraftState
GeoscapeCraftState	Geoscape/GeoscapeCraftState.h	/^class GeoscapeCraftState : public State$/;"	c	namespace:OpenXcom
GeoscapeEvent	Savegame/GeoscapeEvent.cpp	/^GeoscapeEvent::GeoscapeEvent(const RuleEvent &rule) : _rule(rule), _spawnCountdown(0), _over(false)$/;"	f	class:OpenXcom::GeoscapeEvent
GeoscapeEvent	Savegame/GeoscapeEvent.h	/^class GeoscapeEvent$/;"	c	namespace:OpenXcom
GeoscapeEventState	Geoscape/GeoscapeEventState.cpp	/^GeoscapeEventState::GeoscapeEventState(const RuleEvent& eventRule) : _eventRule(eventRule)$/;"	f	class:OpenXcom::GeoscapeEventState
GeoscapeEventState	Geoscape/GeoscapeEventState.h	/^class GeoscapeEventState : public State$/;"	c	namespace:OpenXcom
GeoscapeState	Geoscape/GeoscapeState.cpp	/^GeoscapeState::GeoscapeState() : _pause(false), _zoomInEffectDone(false), _zoomOutEffectDone(false), _minimizedDogfights(0), _slowdownCounter(0)$/;"	f	class:OpenXcom::GeoscapeState
GeoscapeState	Geoscape/GeoscapeState.h	/^class GeoscapeState : public State$/;"	c	namespace:OpenXcom
GetAferShoot	Mod/RuleItem.cpp	/^BattleActionAttack BattleActionAttack::GetAferShoot(BattleActionType type, BattleUnit *unit, BattleItem *wepon, BattleItem *ammo, const RuleSkill *skill)$/;"	f	class:OpenXcom::BattleActionAttack
GetAferShoot	Mod/RuleItem.cpp	/^BattleActionAttack BattleActionAttack::GetAferShoot(const BattleActionCost &action, BattleItem *ammo)$/;"	f	class:OpenXcom::BattleActionAttack
GetArgsImpl	Engine/ScriptBind.h	/^struct GetArgsImpl<RetEnum(Args...)>$/;"	s	namespace:OpenXcom::helper
GetBeforeShoot	Mod/RuleItem.cpp	/^BattleActionAttack BattleActionAttack::GetBeforeShoot(BattleActionType type, BattleUnit *unit, BattleItem *wepon, const RuleSkill *skill)$/;"	f	class:OpenXcom::BattleActionAttack
GetBeforeShoot	Mod/RuleItem.cpp	/^BattleActionAttack BattleActionAttack::GetBeforeShoot(const BattleActionCost &action)$/;"	f	class:OpenXcom::BattleActionAttack
GetFirst	Engine/ShaderDraw.h	/^static inline First&& GetFirst(First&& f, Rest&&... r)$/;"	f	namespace:OpenXcom
GetPitch	Engine/Surface.cpp	/^inline int GetPitch(int bpp, int width)$/;"	f	namespace:OpenXcom::__anon5
GlobalManufactureState	Basescape/GlobalManufactureState.cpp	/^GlobalManufactureState::GlobalManufactureState(bool openedFromBasescape) : _openedFromBasescape(openedFromBasescape)$/;"	f	class:OpenXcom::GlobalManufactureState
GlobalManufactureState	Basescape/GlobalManufactureState.h	/^class GlobalManufactureState : public State$/;"	c	namespace:OpenXcom
GlobalResearchState	Basescape/GlobalResearchState.cpp	/^GlobalResearchState::GlobalResearchState(bool openedFromBasescape) : _openedFromBasescape(openedFromBasescape)$/;"	f	class:OpenXcom::GlobalResearchState
GlobalResearchState	Basescape/GlobalResearchState.h	/^class GlobalResearchState : public State$/;"	c	namespace:OpenXcom
Globe	Geoscape/Globe.cpp	/^Globe::Globe(Game* game, int cenX, int cenY, int width, int height, int x, int y) : InteractiveSurface(width, height, x, y), _cenX(cenX), _cenY(cenY), _rotLon(0.0), _rotLat(0.0), _hoverLon(0.0), _hoverLat(0.0), _craftLon(0.0), _craftLat(0.0), _craftRange(0.0), _game(game), _hover(false), _craft(false), _blink(-1),$/;"	f	class:OpenXcom::Globe
Globe	Geoscape/Globe.h	/^class Globe : public InteractiveSurface$/;"	c	namespace:OpenXcom
GlobeStaticData	Geoscape/Globe.cpp	/^	GlobeStaticData()$/;"	f	struct:OpenXcom::__anon49::GlobeStaticData
GlobeStaticData	Geoscape/Globe.cpp	/^struct GlobeStaticData$/;"	s	namespace:OpenXcom::__anon49	file:
GoToMainMenuState	Menu/MainMenuState.cpp	/^GoToMainMenuState::GoToMainMenuState(bool updateCheck) : _updateCheck(updateCheck)$/;"	f	class:OpenXcom::GoToMainMenuState
GoToMainMenuState	Menu/MainMenuState.h	/^class GoToMainMenuState : public State$/;"	c	namespace:OpenXcom
GraphButInfo	Geoscape/GraphsState.cpp	/^	GraphButInfo(const LocalizedText& name, Uint8 color): _name(name), _color(color), _pushed(false) {}$/;"	f	struct:OpenXcom::GraphButInfo
GraphButInfo	Geoscape/GraphsState.cpp	/^struct GraphButInfo$/;"	s	namespace:OpenXcom	file:
GraphsState	Geoscape/GraphsState.cpp	/^GraphsState::GraphsState() : _butRegionsOffset(0), _butCountriesOffset(0), _zoom(100)$/;"	f	class:OpenXcom::GraphsState
GraphsState	Geoscape/GraphsState.h	/^class GraphsState : public State$/;"	c	namespace:OpenXcom
H	md5.cpp	/^inline MD5::uint4 MD5::H(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5
HAND_H	Mod/RuleInventory.h	/^	static const int HAND_H = 3;$/;"	m	class:OpenXcom::RuleInventory
HAND_W	Mod/RuleInventory.h	/^	static const int HAND_W = 2;$/;"	m	class:OpenXcom::RuleInventory
HASH_BIT_MASK	lodepng.cpp	/^static const unsigned HASH_BIT_MASK = 65535; \/*HASH_NUM_VALUES - 1, but C90 does not like that as initializer*\/$/;"	v	file:
HASH_NUM_VALUES	lodepng.cpp	/^static const unsigned HASH_NUM_VALUES = 65536;$/;"	v	file:
HAS_YM3812	Engine/Adlib/fmopl.cpp	37;"	d	file:
HH	md5.cpp	/^inline void MD5::HH(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5
HIT_FRAMES	Battlescape/Explosion.cpp	/^const int Explosion::HIT_FRAMES = 4;$/;"	m	class:OpenXcom::Explosion	file:
HIT_FRAMES	Battlescape/Explosion.h	/^	static const int HIT_FRAMES;$/;"	m	class:OpenXcom::Explosion
HORIZONTAL_MARGIN	Interface/ComboBox.cpp	/^const int ComboBox::HORIZONTAL_MARGIN = 2;$/;"	m	class:OpenXcom::ComboBox	file:
HORIZONTAL_MARGIN	Interface/ComboBox.h	/^	static const int HORIZONTAL_MARGIN;$/;"	m	class:OpenXcom::ComboBox
HP_CENTER	Savegame/CraftWeaponProjectile.h	/^const int HP_CENTER = 0;$/;"	m	namespace:OpenXcom
HP_LEFT	Savegame/CraftWeaponProjectile.h	/^const int HP_LEFT = -1;$/;"	m	namespace:OpenXcom
HP_RIGHT	Savegame/CraftWeaponProjectile.h	/^const int HP_RIGHT = 1;$/;"	m	namespace:OpenXcom
HQX_API	Engine/Scalers/hqx.h	43;"	d
HQX_CALLCONV	Engine/Scalers/hqx.h	33;"	d
Hair	Mod/Mod.cpp	/^		static const Uint8 Hair = 9 << 4;$/;"	m	struct:OpenXcom::__anon29::HairXCOM1	file:
HairXCOM1	Mod/Mod.cpp	/^	struct HairXCOM1$/;"	s	namespace:OpenXcom::__anon29	file:
HairXCOM2	Mod/Mod.cpp	/^	struct HairXCOM2$/;"	s	namespace:OpenXcom::__anon29	file:
Hash	lodepng.cpp	/^typedef struct Hash$/;"	s	file:
Hash	lodepng.cpp	/^} Hash;$/;"	t	typeref:struct:Hash	file:
HealUnitParser	Mod/ModScript.h	/^	struct HealUnitParser : ScriptParserEvents<ScriptOutputArgs<int&, int&, int&, int&, int&, int&, int&, int&, int&>, BattleUnit*, BattleItem*, SavedBattleGame*, BattleUnit*, int>$/;"	s	class:OpenXcom::ModScript
HealUnitParser	Savegame/BattleUnit.cpp	/^ModScript::HealUnitParser::HealUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::HealUnitParser
Health	Mod/RuleItem.h	/^	int Health;$/;"	m	struct:OpenXcom::RuleItemUseCost
HealthRecovery	Savegame/Base.h	/^	int HealthRecovery = 0;$/;"	m	struct:OpenXcom::BaseSumDailyRecovery
HitLog	Savegame/HitLog.cpp	/^HitLog::HitLog(Language *lang) : _lastEventType(HITLOG_EMPTY), _lastFaction(FACTION_PLAYER)$/;"	f	class:OpenXcom::HitLog
HitLog	Savegame/HitLog.h	/^class HitLog$/;"	c	namespace:OpenXcom
HitUnitParser	Mod/ModScript.h	/^	struct HitUnitParser : ScriptParserEvents<ScriptOutputArgs<int&, int&, int&>, BattleUnit*, BattleItem*, BattleItem*, BattleUnit*, SavedBattleGame*, const RuleSkill*, int, int, int>$/;"	s	class:OpenXcom::ModScript
HitUnitParser	Savegame/BattleUnit.cpp	/^ModScript::HitUnitParser::HitUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::HitUnitParser
HuffmanTree	lodepng.cpp	/^typedef struct HuffmanTree$/;"	s	file:
HuffmanTree	lodepng.cpp	/^} HuffmanTree;$/;"	t	typeref:struct:HuffmanTree	file:
HuffmanTree_cleanup	lodepng.cpp	/^static void HuffmanTree_cleanup(HuffmanTree* tree)$/;"	f	file:
HuffmanTree_getCode	lodepng.cpp	/^static unsigned HuffmanTree_getCode(const HuffmanTree* tree, unsigned index)$/;"	f	file:
HuffmanTree_getLength	lodepng.cpp	/^static unsigned HuffmanTree_getLength(const HuffmanTree* tree, unsigned index)$/;"	f	file:
HuffmanTree_init	lodepng.cpp	/^static void HuffmanTree_init(HuffmanTree* tree)$/;"	f	file:
HuffmanTree_make2DTree	lodepng.cpp	/^static unsigned HuffmanTree_make2DTree(HuffmanTree* tree)$/;"	f	file:
HuffmanTree_makeFromFrequencies	lodepng.cpp	/^static unsigned HuffmanTree_makeFromFrequencies(HuffmanTree* tree, const unsigned* frequencies,$/;"	f	file:
HuffmanTree_makeFromLengths	lodepng.cpp	/^static unsigned HuffmanTree_makeFromLengths(HuffmanTree* tree, const unsigned* bitlen,$/;"	f	file:
HuffmanTree_makeFromLengths2	lodepng.cpp	/^static unsigned HuffmanTree_makeFromLengths2(HuffmanTree* tree)$/;"	f	file:
I	md5.cpp	/^inline MD5::uint4 MD5::I(uint4 x, uint4 y, uint4 z) {$/;"	f	class:MD5
ID	Savegame/Tile.h	/^		int ID[O_MAX];$/;"	m	struct:OpenXcom::Tile::TileMapDataCache
IDI_ICON1	resource.h	5;"	d
IDZ_COMMON_ZIP	resource.h	18;"	d
IDZ_STANDARD_ZIP	resource.h	19;"	d
II	md5.cpp	/^inline void MD5::II(uint4 &a, uint4 b, uint4 c, uint4 d, uint4 x, uint4 s, uint4 ac) {$/;"	f	class:MD5
INFOBOX_DELAY	Battlescape/InfoboxState.h	/^	static const int INFOBOX_DELAY = 2000;$/;"	m	class:OpenXcom::InfoboxState
INLINE	Engine/Adlib/fmopl.cpp	33;"	d	file:
INLINE	Engine/Adlib/fmopl.cpp	35;"	d	file:
INT16	Engine/Adlib/fmopl.h	/^typedef signed short	INT16;   \/* signed 16bit   *\/$/;"	t
INT32	Engine/Adlib/fmopl.h	/^typedef signed int		INT32;   \/* signed 32bit   *\/$/;"	t
INT8	Engine/Adlib/fmopl.h	/^typedef signed char		INT8;    \/* signed  8bit   *\/$/;"	t
INTERCEPTOR_EXPLODE	Mod/Mod.cpp	/^int Mod::INTERCEPTOR_EXPLODE;$/;"	m	class:OpenXcom::Mod	file:
INTERCEPTOR_EXPLODE	Mod/Mod.h	/^	static int INTERCEPTOR_EXPLODE;$/;"	m	class:OpenXcom::Mod
INTERCEPTOR_HIT	Mod/Mod.cpp	/^int Mod::INTERCEPTOR_HIT;$/;"	m	class:OpenXcom::Mod	file:
INTERCEPTOR_HIT	Mod/Mod.h	/^	static int INTERCEPTOR_HIT;$/;"	m	class:OpenXcom::Mod
INVALID_MOVE_COST	Battlescape/Pathfinding.h	/^	static constexpr int INVALID_MOVE_COST = 255;$/;"	m	class:OpenXcom::Pathfinding
INVERT_CLICK	Interface/BattlescapeButton.h	/^enum InversionType {INVERT_NONE, INVERT_CLICK, INVERT_TOGGLE};$/;"	e	enum:OpenXcom::InversionType
INVERT_NONE	Interface/BattlescapeButton.h	/^enum InversionType {INVERT_NONE, INVERT_CLICK, INVERT_TOGGLE};$/;"	e	enum:OpenXcom::InversionType
INVERT_TOGGLE	Interface/BattlescapeButton.h	/^enum InversionType {INVERT_NONE, INVERT_CLICK, INVERT_TOGGLE};$/;"	e	enum:OpenXcom::InversionType
INV_GROUND	Mod/RuleInventory.h	/^enum InventoryType { INV_SLOT, INV_HAND, INV_GROUND };$/;"	e	enum:OpenXcom::InventoryType
INV_HAND	Mod/RuleInventory.h	/^enum InventoryType { INV_SLOT, INV_HAND, INV_GROUND };$/;"	e	enum:OpenXcom::InventoryType
INV_SLOT	Mod/RuleInventory.h	/^enum InventoryType { INV_SLOT, INV_HAND, INV_GROUND };$/;"	e	enum:OpenXcom::InventoryType
IRQHandler	Engine/Adlib/fmopl.h	/^	OPL_IRQHANDLER    IRQHandler;		\/* IRQ handler    *\/$/;"	m	struct:fm_opl_f
IRQParam	Engine/Adlib/fmopl.h	/^	int IRQParam;						\/* IRQ parameter  *\/$/;"	m	struct:fm_opl_f
ITEM_DROP	Mod/Mod.cpp	/^int Mod::ITEM_DROP;$/;"	m	class:OpenXcom::Mod	file:
ITEM_DROP	Mod/Mod.h	/^	static int ITEM_DROP;$/;"	m	class:OpenXcom::Mod
ITEM_RELOAD	Mod/Mod.cpp	/^int Mod::ITEM_RELOAD;$/;"	m	class:OpenXcom::Mod	file:
ITEM_RELOAD	Mod/Mod.h	/^	static int ITEM_RELOAD;$/;"	m	class:OpenXcom::Mod
ITEM_SORT_NAME_ASC	Basescape/StoresState.h	/^	ITEM_SORT_NAME_ASC,$/;"	e	enum:OpenXcom::ItemSort
ITEM_SORT_NAME_DESC	Basescape/StoresState.h	/^	ITEM_SORT_NAME_DESC,$/;"	e	enum:OpenXcom::ItemSort
ITEM_SORT_NONE	Basescape/StoresState.h	/^	ITEM_SORT_NONE,$/;"	e	enum:OpenXcom::ItemSort
ITEM_SORT_QUANTITY_ASC	Basescape/StoresState.h	/^	ITEM_SORT_QUANTITY_ASC,$/;"	e	enum:OpenXcom::ItemSort
ITEM_SORT_QUANTITY_DESC	Basescape/StoresState.h	/^	ITEM_SORT_QUANTITY_DESC,$/;"	e	enum:OpenXcom::ItemSort
ITEM_SORT_SIZE_ASC	Basescape/StoresState.h	/^	ITEM_SORT_SIZE_ASC,$/;"	e	enum:OpenXcom::ItemSort
ITEM_SORT_SIZE_DESC	Basescape/StoresState.h	/^	ITEM_SORT_SIZE_DESC,$/;"	e	enum:OpenXcom::ItemSort
ITEM_SORT_SPACE_USED_ASC	Basescape/StoresState.h	/^	ITEM_SORT_SPACE_USED_ASC,$/;"	e	enum:OpenXcom::ItemSort
ITEM_SORT_SPACE_USED_DESC	Basescape/StoresState.h	/^	ITEM_SORT_SPACE_USED_DESC$/;"	e	enum:OpenXcom::ItemSort
ITEM_THROW	Mod/Mod.cpp	/^int Mod::ITEM_THROW;$/;"	m	class:OpenXcom::Mod	file:
ITEM_THROW	Mod/Mod.h	/^	static int ITEM_THROW;$/;"	m	class:OpenXcom::Mod
I_old	Engine/Scalers/xbrz.cpp	/^    static const size_t I_old = I;$/;"	m	struct:__anon10::MatrixRotation	file:
I_old	Engine/Scalers/xbrz.cpp	/^    static const size_t I_old = N - 1 - MatrixRotation<static_cast<RotationDegree>(rotDeg - 1), I, J, N>::J_old; \/\/old coordinates before rotation!$/;"	m	struct:__anon10::MatrixRotation	file:
IgnoreDirection	Mod/RuleDamageType.h	/^	bool IgnoreDirection;$/;"	m	struct:OpenXcom::RuleDamageType
IgnoreNormalMoraleLose	Mod/RuleDamageType.h	/^	bool IgnoreNormalMoraleLose;$/;"	m	struct:OpenXcom::RuleDamageType
IgnoreOverKill	Mod/RuleDamageType.h	/^	bool IgnoreOverKill;$/;"	m	struct:OpenXcom::RuleDamageType
IgnorePainImmunity	Mod/RuleDamageType.h	/^	bool IgnorePainImmunity;$/;"	m	struct:OpenXcom::RuleDamageType
IgnoreSelfDestruct	Mod/RuleDamageType.h	/^	bool IgnoreSelfDestruct;$/;"	m	struct:OpenXcom::RuleDamageType
ImageButton	Interface/ImageButton.cpp	/^ImageButton::ImageButton(int width, int height, int x, int y) : InteractiveSurface(width, height, x, y), _color(0), _group(0), _inverted(false)$/;"	f	class:OpenXcom::ImageButton
ImageButton	Interface/ImageButton.h	/^class ImageButton : public InteractiveSurface$/;"	c	namespace:OpenXcom
ImplMakeListTag	Engine/HelperMeta.h	/^struct ImplMakeListTag$/;"	s	namespace:OpenXcom::helper
ImplMakeListTag	Engine/HelperMeta.h	/^struct ImplMakeListTag<0>$/;"	s	namespace:OpenXcom::helper
ImplMakeListTagAdd	Engine/HelperMeta.h	/^struct ImplMakeListTagAdd<ListTag<I...>>$/;"	s	namespace:OpenXcom::helper
Incr	Engine/Adlib/fmopl.h	/^	UINT32 Incr;	\/* frequency step  :                   *\/$/;"	m	struct:fm_opl_slot
InfoTag	Mod/Mod.cpp	/^const std::string InfoTag = "!info";$/;"	m	namespace:OpenXcom::__anon28	file:
InfoboxOKState	Battlescape/InfoboxOKState.cpp	/^InfoboxOKState::InfoboxOKState(const std::string &msg)$/;"	f	class:OpenXcom::InfoboxOKState
InfoboxOKState	Battlescape/InfoboxOKState.h	/^class InfoboxOKState : public State$/;"	c	namespace:OpenXcom
InfoboxState	Battlescape/InfoboxState.cpp	/^InfoboxState::InfoboxState(const std::string &msg)$/;"	f	class:OpenXcom::InfoboxState
InfoboxState	Battlescape/InfoboxState.h	/^class InfoboxState : public State$/;"	c	namespace:OpenXcom
InteractiveSurface	Engine/InteractiveSurface.cpp	/^InteractiveSurface::InteractiveSurface(int width, int height, int x, int y) : Surface(width, height, x, y), _buttonsPressed(0), _in(0), _over(0), _out(0), _isHovered(false), _isFocused(true), _listButton(false), _tftdMode(false)$/;"	f	class:OpenXcom::InteractiveSurface
InteractiveSurface	Engine/InteractiveSurface.h	/^class InteractiveSurface : public Surface$/;"	c	namespace:OpenXcom
InterceptState	Geoscape/InterceptState.cpp	/^InterceptState::InterceptState(Globe *globe, bool useCustomSound, Base *base, Target *target) : _globe(globe), _base(base), _target(target)$/;"	f	class:OpenXcom::InterceptState
InterceptState	Geoscape/InterceptState.h	/^class InterceptState : public State$/;"	c	namespace:OpenXcom
Interp1	Engine/Scalers/common.h	/^static inline uint32_t Interp1(uint32_t c1, uint32_t c2)$/;"	f
Interp10	Engine/Scalers/common.h	/^static inline uint32_t Interp10(uint32_t c1, uint32_t c2, uint32_t c3)$/;"	f
Interp2	Engine/Scalers/common.h	/^static inline uint32_t Interp2(uint32_t c1, uint32_t c2, uint32_t c3)$/;"	f
Interp3	Engine/Scalers/common.h	/^static inline uint32_t Interp3(uint32_t c1, uint32_t c2)$/;"	f
Interp4	Engine/Scalers/common.h	/^static inline uint32_t Interp4(uint32_t c1, uint32_t c2, uint32_t c3)$/;"	f
Interp5	Engine/Scalers/common.h	/^static inline uint32_t Interp5(uint32_t c1, uint32_t c2)$/;"	f
Interp6	Engine/Scalers/common.h	/^static inline uint32_t Interp6(uint32_t c1, uint32_t c2, uint32_t c3)$/;"	f
Interp7	Engine/Scalers/common.h	/^static inline uint32_t Interp7(uint32_t c1, uint32_t c2, uint32_t c3)$/;"	f
Interp8	Engine/Scalers/common.h	/^static inline uint32_t Interp8(uint32_t c1, uint32_t c2)$/;"	f
Interp9	Engine/Scalers/common.h	/^static inline uint32_t Interp9(uint32_t c1, uint32_t c2, uint32_t c3)$/;"	f
Interpolate	fmath.h	/^inline TValue Interpolate(const TValue& a, const TValue& b, TStep step, TStep stepMax)$/;"	f
Interpolate_2	Engine/Scalers/common.h	/^static inline uint32_t Interpolate_2(uint32_t c1, int w1, uint32_t c2, int w2, int s)$/;"	f
Interpolate_3	Engine/Scalers/common.h	/^static inline uint32_t Interpolate_3(uint32_t c1, int w1, uint32_t c2, int w2, uint32_t c3, int w3, int s)$/;"	f
InvalidSpriteIndex	Battlescape/UnitSprite.cpp	/^const int InvalidSpriteIndex = -256;$/;"	m	namespace:OpenXcom::__anon44	file:
Inventory	Battlescape/Inventory.cpp	/^Inventory::Inventory(Game *game, int width, int height, int x, int y, bool base) : InteractiveSurface(width, height, x, y), _game(game), _selUnit(0), _selItem(0), _tu(true), _base(base), _mouseOverItem(0), _groundOffset(0), _animFrame(0)$/;"	f	class:OpenXcom::Inventory
Inventory	Battlescape/Inventory.h	/^class Inventory : public InteractiveSurface$/;"	c	namespace:OpenXcom
InventoryLoadState	Battlescape/InventoryLoadState.cpp	/^InventoryLoadState::InventoryLoadState(InventoryState *parent) : _parent(parent)$/;"	f	class:OpenXcom::InventoryLoadState
InventoryLoadState	Battlescape/InventoryLoadState.h	/^class InventoryLoadState : public State$/;"	c	namespace:OpenXcom
InventoryPersonalState	Battlescape/InventoryPersonalState.cpp	/^InventoryPersonalState::InventoryPersonalState(Soldier* soldier)$/;"	f	class:OpenXcom::InventoryPersonalState
InventoryPersonalState	Battlescape/InventoryPersonalState.h	/^class InventoryPersonalState : public State$/;"	c	namespace:OpenXcom
InventorySaveState	Battlescape/InventorySaveState.cpp	/^InventorySaveState::InventorySaveState(InventoryState *parent) : _parent(parent), _previousSelectedRow(-1), _selectedRow(-1)$/;"	f	class:OpenXcom::InventorySaveState
InventorySaveState	Battlescape/InventorySaveState.h	/^class InventorySaveState : public State$/;"	c	namespace:OpenXcom
InventoryState	Battlescape/InventoryState.cpp	/^InventoryState::InventoryState(bool tu, BattlescapeState *parent, Base *base, bool noCraft) : _tu(tu), _noCraft(noCraft), _parent(parent), _base(base), _reloadUnit(false), _globalLayoutIndex(-1)$/;"	f	class:OpenXcom::InventoryState
InventoryState	Battlescape/InventoryState.h	/^class InventoryState : public State$/;"	c	namespace:OpenXcom
InventoryType	Mod/RuleInventory.h	/^enum InventoryType { INV_SLOT, INV_HAND, INV_GROUND };$/;"	g	namespace:OpenXcom
InversionType	Interface/BattlescapeButton.h	/^enum InversionType {INVERT_NONE, INVERT_CLICK, INVERT_TOGGLE};$/;"	g	namespace:OpenXcom
IonArmorColor	Mod/Mod.cpp	/^		static const Uint8 IonArmorColor = 8 << 4;$/;"	m	struct:OpenXcom::__anon29::BodyXCOM2	file:
ItemContainer	Savegame/ItemContainer.cpp	/^ItemContainer::ItemContainer()$/;"	f	class:OpenXcom::ItemContainer
ItemContainer	Savegame/ItemContainer.h	/^class ItemContainer$/;"	c	namespace:OpenXcom
ItemDamageRandomType	Mod/RuleDamageType.h	/^enum ItemDamageRandomType$/;"	g	namespace:OpenXcom
ItemDamageType	Mod/RuleDamageType.h	/^enum ItemDamageType { DT_NONE, DT_AP, DT_IN, DT_HE, DT_LASER, DT_PLASMA, DT_STUN, DT_MELEE, DT_ACID, DT_SMOKE, DT_10, DT_11, DT_12, DT_13, DT_14, DT_15, DT_16, DT_17, DT_18, DT_19, DAMAGE_TYPES };$/;"	g	namespace:OpenXcom
ItemDropVoxelOffset	Battlescape/Projectile.h	/^	static const int ItemDropVoxelOffset = -2;$/;"	m	class:OpenXcom::Projectile
ItemSet	Mod/AlienDeployment.h	/^struct ItemSet$/;"	s	namespace:OpenXcom
ItemSort	Basescape/StoresState.h	/^enum ItemSort$/;"	g	namespace:OpenXcom
ItemSprite	Battlescape/ItemSprite.cpp	/^ItemSprite::ItemSprite(Surface* dest, const Mod* mod, const SavedBattleGame* save, int frame) :$/;"	f	class:OpenXcom::ItemSprite
ItemSprite	Battlescape/ItemSprite.h	/^class ItemSprite$/;"	c	namespace:OpenXcom
ItemsArrivingState	Geoscape/ItemsArrivingState.cpp	/^ItemsArrivingState::ItemsArrivingState(GeoscapeState *state) : _state(state), _base(0)$/;"	f	class:OpenXcom::ItemsArrivingState
ItemsArrivingState	Geoscape/ItemsArrivingState.h	/^class ItemsArrivingState : public State$/;"	c	namespace:OpenXcom
J_old	Engine/Scalers/xbrz.cpp	/^    static const size_t J_old =         MatrixRotation<static_cast<RotationDegree>(rotDeg - 1), I, J, N>::I_old; \/\/$/;"	m	struct:__anon10::MatrixRotation	file:
J_old	Engine/Scalers/xbrz.cpp	/^    static const size_t J_old = J;$/;"	m	struct:__anon10::MatrixRotation	file:
KEYBOARD_OFF	Engine/Options.h	/^enum KeyboardType { KEYBOARD_OFF, KEYBOARD_ON, KEYBOARD_VIRTUAL };$/;"	e	enum:OpenXcom::KeyboardType
KEYBOARD_ON	Engine/Options.h	/^enum KeyboardType { KEYBOARD_OFF, KEYBOARD_ON, KEYBOARD_VIRTUAL };$/;"	e	enum:OpenXcom::KeyboardType
KEYBOARD_VIRTUAL	Engine/Options.h	/^enum KeyboardType { KEYBOARD_OFF, KEYBOARD_ON, KEYBOARD_VIRTUAL };$/;"	e	enum:OpenXcom::KeyboardType
KIA	Savegame/BattleUnitStatistics.h	/^	bool KIA;                            \/\/\/< Tracks if the soldier was killed in battle$/;"	m	struct:OpenXcom::BattleUnitStatistics
KSL_TABLE	Engine/Adlib/fmopl.cpp	/^static const UINT32 KSL_TABLE[8*16]=$/;"	v	file:
KSR	Engine/Adlib/fmopl.h	/^	UINT8  KSR;		\/* key scale rate  :(shift down bit)   *\/$/;"	m	struct:fm_opl_slot
Kernel_3x3	Engine/Scalers/xbrz.cpp	/^struct Kernel_3x3$/;"	s	namespace:__anon10	file:
Kernel_4x4	Engine/Scalers/xbrz.cpp	/^struct Kernel_4x4 \/\/kernel for preprocessing step$/;"	s	namespace:__anon10	file:
KeyboardType	Engine/Options.h	/^enum KeyboardType { KEYBOARD_OFF, KEYBOARD_ON, KEYBOARD_VIRTUAL };$/;"	g	namespace:OpenXcom
LANDED	Savegame/Ufo.h	/^	enum UfoStatus { FLYING, LANDED, CRASHED, DESTROYED };$/;"	e	enum:OpenXcom::Ufo::UfoStatus
LARGE_EXPLOSION	Mod/Mod.cpp	/^int Mod::LARGE_EXPLOSION;$/;"	m	class:OpenXcom::Mod	file:
LARGE_EXPLOSION	Mod/Mod.h	/^	static int LARGE_EXPLOSION;$/;"	m	class:OpenXcom::Mod
LAST_LENGTH_CODE_INDEX	lodepng.cpp	471;"	d	file:
LAST_PIXEL	Engine/FlcPlayer.cpp	/^	LAST_PIXEL = 0x8000, \/\/ 1000000000000000$/;"	e	enum:OpenXcom::ChunkOpcodes	file:
LCT_GREY	lodepng.h	/^  LCT_GREY = 0, \/*greyscale: 1,2,4,8,16 bit*\/$/;"	e	enum:LodePNGColorType
LCT_GREY_ALPHA	lodepng.h	/^  LCT_GREY_ALPHA = 4, \/*greyscale with alpha: 8,16 bit*\/$/;"	e	enum:LodePNGColorType
LCT_PALETTE	lodepng.h	/^  LCT_PALETTE = 3, \/*palette: 1,2,4,8 bit*\/$/;"	e	enum:LodePNGColorType
LCT_RGB	lodepng.h	/^  LCT_RGB = 2, \/*RGB: 8,16 bit*\/$/;"	e	enum:LodePNGColorType
LCT_RGBA	lodepng.h	/^  LCT_RGBA = 6 \/*RGB with alpha: 8,16 bit*\/$/;"	e	enum:LodePNGColorType
LEFT	Mod/RuleItem.h	/^enum class BattleActionOrigin { CENTRE = 0, LEFT, RIGHT }; \/\/ Used for off-centre shooting.$/;"	m	class:OpenXcom::BattleActionOrigin
LENGTHBASE	lodepng.cpp	/^static const unsigned LENGTHBASE[29]$/;"	v	file:
LENGTHEXTRA	lodepng.cpp	/^static const unsigned LENGTHEXTRA[29]$/;"	v	file:
LFS_BRUTE_FORCE	lodepng.h	/^  LFS_BRUTE_FORCE,$/;"	e	enum:LodePNGFilterStrategy
LFS_ENTROPY	lodepng.h	/^  LFS_ENTROPY,$/;"	e	enum:LodePNGFilterStrategy
LFS_MINSUM	lodepng.h	/^  LFS_MINSUM,$/;"	e	enum:LodePNGFilterStrategy
LFS_PREDEFINED	lodepng.h	/^  LFS_PREDEFINED$/;"	e	enum:LodePNGFilterStrategy
LFS_ZERO	lodepng.h	/^  LFS_ZERO,$/;"	e	enum:LodePNGFilterStrategy
LINE_COLOR	Geoscape/Globe.cpp	/^Uint8 Globe::LINE_COLOR;$/;"	m	class:OpenXcom::Globe	file:
LINE_COLOR	Geoscape/Globe.h	/^	static Uint8 LINE_COLOR;$/;"	m	class:OpenXcom::Globe
LOADING_DONE	Menu/StartState.h	/^enum LoadingPhase { LOADING_STARTED, LOADING_FAILED, LOADING_SUCCESSFUL, LOADING_DONE };$/;"	e	enum:OpenXcom::LoadingPhase
LOADING_FAILED	Menu/StartState.h	/^enum LoadingPhase { LOADING_STARTED, LOADING_FAILED, LOADING_SUCCESSFUL, LOADING_DONE };$/;"	e	enum:OpenXcom::LoadingPhase
LOADING_STARTED	Menu/StartState.h	/^enum LoadingPhase { LOADING_STARTED, LOADING_FAILED, LOADING_SUCCESSFUL, LOADING_DONE };$/;"	e	enum:OpenXcom::LoadingPhase
LOADING_SUCCESSFUL	Menu/StartState.h	/^enum LoadingPhase { LOADING_STARTED, LOADING_FAILED, LOADING_SUCCESSFUL, LOADING_DONE };$/;"	e	enum:OpenXcom::LoadingPhase
LODEPNG_COMPILE_ALLOCATORS	lodepng.h	75;"	d
LODEPNG_COMPILE_ANCILLARY_CHUNKS	lodepng.h	65;"	d
LODEPNG_COMPILE_CPP	lodepng.h	80;"	d
LODEPNG_COMPILE_DECODER	lodepng.h	53;"	d
LODEPNG_COMPILE_DISK	lodepng.h	61;"	d
LODEPNG_COMPILE_ENCODER	lodepng.h	57;"	d
LODEPNG_COMPILE_ERROR_TEXT	lodepng.h	69;"	d
LODEPNG_COMPILE_PNG	lodepng.h	49;"	d
LODEPNG_COMPILE_ZLIB	lodepng.h	45;"	d
LODEPNG_H	lodepng.h	27;"	d
LODEPNG_VERSION_STRING	lodepng.cpp	/^const char* LODEPNG_VERSION_STRING = "20180114";$/;"	v
LOG	Engine/Adlib/fmopl.cpp	247;"	d	file:
LOG_BUFFER_LIMIT	Engine/CrossPlatform.cpp	/^static const size_t LOG_BUFFER_LIMIT = 1<<10;$/;"	m	namespace:OpenXcom::CrossPlatform	file:
LOG_DEBUG	Engine/Logger.h	/^	LOG_DEBUG,		\/**< Purely test stuff to help developers implement, not really relevant to users. *\/$/;"	e	enum:OpenXcom::SeverityLevel
LOG_ERR	Engine/Adlib/fmopl.cpp	239;"	d	file:
LOG_ERROR	Engine/Logger.h	/^	LOG_ERROR,		\/**< Something bad happened but we can still move on. *\/$/;"	e	enum:OpenXcom::SeverityLevel
LOG_FATAL	Engine/Logger.h	/^	LOG_FATAL,		\/**< Something horrible has happened and the game is going to die! *\/$/;"	e	enum:OpenXcom::SeverityLevel
LOG_INF	Engine/Adlib/fmopl.cpp	241;"	d	file:
LOG_INFO	Engine/Logger.h	/^	LOG_INFO,		\/**< Useful information for users\/developers to help debug and figure stuff out. *\/$/;"	e	enum:OpenXcom::SeverityLevel
LOG_LEVEL	Engine/Adlib/fmopl.cpp	244;"	d	file:
LOG_UNCENSORED	Engine/Logger.h	/^	LOG_UNCENSORED  \/**< Makes sure everything makes it into log buffer until there's a logfile set up *\/$/;"	e	enum:OpenXcom::SeverityLevel
LOG_VERBOSE	Engine/Logger.h	/^	LOG_VERBOSE,	\/**< Extra details that even developers won't really need 90% of the time. *\/$/;"	e	enum:OpenXcom::SeverityLevel
LOG_WAR	Engine/Adlib/fmopl.cpp	240;"	d	file:
LOG_WARNING	Engine/Logger.h	/^	LOG_WARNING,	\/**< Something weird happened, nothing special but it's good to know. *\/$/;"	e	enum:OpenXcom::SeverityLevel
Language	Engine/Language.cpp	/^Language::Language() : _handler(0), _direction(DIRECTION_LTR), _wrap(WRAP_WORDS)$/;"	f	class:OpenXcom::Language
Language	Engine/Language.h	/^class Language$/;"	c	namespace:OpenXcom
LanguagePlurality	Engine/LanguagePlurality.h	/^	LanguagePlurality() { \/* Empty by design. *\/ }$/;"	f	class:OpenXcom::LanguagePlurality
LanguagePlurality	Engine/LanguagePlurality.h	/^class LanguagePlurality$/;"	c	namespace:OpenXcom
Limit	Engine/Adlib/fmopl.cpp	/^INLINE int Limit( int val, int max, int min ) {$/;"	f
LineClip	Engine/FastLineClip.cpp	/^int FastLineClip::LineClip(double *x0, double *y0, double *x1, double *y1)$/;"	f	class:OpenXcom::FastLineClip
ListGamesState	Menu/ListGamesState.cpp	/^ListGamesState::ListGamesState(OptionsOrigin origin, int firstValidRow, bool autoquick) : _origin(origin), _firstValidRow(firstValidRow), _autoquick(autoquick), _sortable(true)$/;"	f	class:OpenXcom::ListGamesState
ListGamesState	Menu/ListGamesState.h	/^class ListGamesState : public State$/;"	c	namespace:OpenXcom
ListLoadOriginalState	Menu/ListLoadOriginalState.cpp	/^ListLoadOriginalState::ListLoadOriginalState(OptionsOrigin origin) : _origin(origin)$/;"	f	class:OpenXcom::ListLoadOriginalState
ListLoadOriginalState	Menu/ListLoadOriginalState.h	/^class ListLoadOriginalState : public State$/;"	c	namespace:OpenXcom
ListLoadState	Menu/ListLoadState.cpp	/^ListLoadState::ListLoadState(OptionsOrigin origin) : ListGamesState(origin, 0, true)$/;"	f	class:OpenXcom::ListLoadState
ListLoadState	Menu/ListLoadState.h	/^class ListLoadState : public ListGamesState$/;"	c	namespace:OpenXcom
ListSaveState	Menu/ListSaveState.cpp	/^ListSaveState::ListSaveState(OptionsOrigin origin) : ListGamesState(origin, 1, false), _previousSelectedRow(-1), _selectedRow(-1)$/;"	f	class:OpenXcom::ListSaveState
ListSaveState	Menu/ListSaveState.h	/^class ListSaveState : public ListGamesState$/;"	c	namespace:OpenXcom
ListTag	Engine/HelperMeta.h	/^struct ListTag$/;"	s	namespace:OpenXcom::helper
LoadFuncEditable	Mod/Mod.cpp	/^struct LoadFuncEditable$/;"	s	namespace:OpenXcom::__anon28	file:
LoadFuncNullable	Mod/Mod.cpp	/^struct LoadFuncNullable$/;"	s	namespace:OpenXcom::__anon28	file:
LoadFuncStandard	Mod/Mod.cpp	/^struct LoadFuncStandard$/;"	s	namespace:OpenXcom::__anon28	file:
LoadGameState	Menu/LoadGameState.cpp	/^LoadGameState::LoadGameState(OptionsOrigin origin, SaveType type, SDL_Color *palette) : _firstRun(0), _origin(origin)$/;"	f	class:OpenXcom::LoadGameState
LoadGameState	Menu/LoadGameState.cpp	/^LoadGameState::LoadGameState(OptionsOrigin origin, const std::string &filename, SDL_Color *palette) : _firstRun(0), _origin(origin), _filename(filename)$/;"	f	class:OpenXcom::LoadGameState
LoadGameState	Menu/LoadGameState.h	/^class LoadGameState : public State$/;"	c	namespace:OpenXcom
LoadRuleException	Mod/Mod.h	/^	LoadRuleException(const std::string& parent, const YAML::Node &node, const std::string& message) : Exception{ "Error for '" + parent + "': " + message + " at line " + std::to_string(node.Mark().line)}$/;"	f	struct:OpenXcom::LoadRuleException
LoadRuleException	Mod/Mod.h	/^	LoadRuleException(const std::string& parent, const std::string& message) : Exception{ "Error for '" + parent + "': " + message}$/;"	f	struct:OpenXcom::LoadRuleException
LoadRuleException	Mod/Mod.h	/^struct LoadRuleException : Exception$/;"	s	namespace:OpenXcom
LoadingPhase	Menu/StartState.h	/^enum LoadingPhase { LOADING_STARTED, LOADING_FAILED, LOADING_SUCCESSFUL, LOADING_DONE };$/;"	g	namespace:OpenXcom
LocalizedText	Engine/LocalizedText.h	/^	LocalizedText() : _nextArg(1) { \/* Empty by design. *\/ }$/;"	f	class:OpenXcom::LocalizedText
LocalizedText	Engine/LocalizedText.h	/^class LocalizedText$/;"	c	namespace:OpenXcom
LocalizedText	Engine/LocalizedText.h	/^inline LocalizedText::LocalizedText(const std::string &text)$/;"	f	class:OpenXcom::LocalizedText
LocalizedText	Engine/LocalizedText.h	/^inline LocalizedText::LocalizedText(const std::string &text, unsigned replaced)$/;"	f	class:OpenXcom::LocalizedText
LodePNGColorMode	lodepng.h	/^typedef struct LodePNGColorMode$/;"	s
LodePNGColorMode	lodepng.h	/^} LodePNGColorMode;$/;"	t	typeref:struct:LodePNGColorMode
LodePNGColorProfile	lodepng.h	/^typedef struct LodePNGColorProfile$/;"	s
LodePNGColorProfile	lodepng.h	/^} LodePNGColorProfile;$/;"	t	typeref:struct:LodePNGColorProfile
LodePNGColorType	lodepng.h	/^typedef enum LodePNGColorType$/;"	g
LodePNGColorType	lodepng.h	/^} LodePNGColorType;$/;"	t	typeref:enum:LodePNGColorType
LodePNGCompressSettings	lodepng.h	/^struct LodePNGCompressSettings \/*deflate = compress*\/$/;"	s
LodePNGCompressSettings	lodepng.h	/^typedef struct LodePNGCompressSettings LodePNGCompressSettings;$/;"	t	typeref:struct:LodePNGCompressSettings
LodePNGDecoderSettings	lodepng.h	/^typedef struct LodePNGDecoderSettings$/;"	s
LodePNGDecoderSettings	lodepng.h	/^} LodePNGDecoderSettings;$/;"	t	typeref:struct:LodePNGDecoderSettings
LodePNGDecompressSettings	lodepng.h	/^struct LodePNGDecompressSettings$/;"	s
LodePNGDecompressSettings	lodepng.h	/^typedef struct LodePNGDecompressSettings LodePNGDecompressSettings;$/;"	t	typeref:struct:LodePNGDecompressSettings
LodePNGEncoderSettings	lodepng.h	/^typedef struct LodePNGEncoderSettings$/;"	s
LodePNGEncoderSettings	lodepng.h	/^} LodePNGEncoderSettings;$/;"	t	typeref:struct:LodePNGEncoderSettings
LodePNGFilterStrategy	lodepng.h	/^typedef enum LodePNGFilterStrategy$/;"	g
LodePNGFilterStrategy	lodepng.h	/^} LodePNGFilterStrategy;$/;"	t	typeref:enum:LodePNGFilterStrategy
LodePNGIText_cleanup	lodepng.cpp	/^static void LodePNGIText_cleanup(LodePNGInfo* info)$/;"	f	file:
LodePNGIText_copy	lodepng.cpp	/^static unsigned LodePNGIText_copy(LodePNGInfo* dest, const LodePNGInfo* source)$/;"	f	file:
LodePNGIText_init	lodepng.cpp	/^static void LodePNGIText_init(LodePNGInfo* info)$/;"	f	file:
LodePNGInfo	lodepng.h	/^typedef struct LodePNGInfo$/;"	s
LodePNGInfo	lodepng.h	/^} LodePNGInfo;$/;"	t	typeref:struct:LodePNGInfo
LodePNGState	lodepng.h	/^typedef struct LodePNGState$/;"	s
LodePNGState	lodepng.h	/^} LodePNGState;$/;"	t	typeref:struct:LodePNGState
LodePNGText_cleanup	lodepng.cpp	/^static void LodePNGText_cleanup(LodePNGInfo* info)$/;"	f	file:
LodePNGText_copy	lodepng.cpp	/^static unsigned LodePNGText_copy(LodePNGInfo* dest, const LodePNGInfo* source)$/;"	f	file:
LodePNGText_init	lodepng.cpp	/^static void LodePNGText_init(LodePNGInfo* info)$/;"	f	file:
LodePNGTime	lodepng.h	/^typedef struct LodePNGTime$/;"	s
LodePNGTime	lodepng.h	/^} LodePNGTime;$/;"	t	typeref:struct:LodePNGTime
LodePNGUnknownChunks_cleanup	lodepng.cpp	/^static void LodePNGUnknownChunks_cleanup(LodePNGInfo* info)$/;"	f	file:
LodePNGUnknownChunks_copy	lodepng.cpp	/^static unsigned LodePNGUnknownChunks_copy(LodePNGInfo* dest, const LodePNGInfo* src)$/;"	f	file:
LodePNGUnknownChunks_init	lodepng.cpp	/^static void LodePNGUnknownChunks_init(LodePNGInfo* info)$/;"	f	file:
Log	Engine/Logger.h	69;"	d
Logger	Engine/Logger.h	/^	Logger() : _level(LOG_INFO) { };$/;"	f	class:OpenXcom::Logger
Logger	Engine/Logger.h	/^class Logger$/;"	c	namespace:OpenXcom
LookBaseBits	Mod/RuleSoldier.h	/^	static constexpr int LookBaseBits = 2;$/;"	m	class:OpenXcom::RuleSoldier
LookGenderBits	Mod/RuleSoldier.h	/^	static constexpr int LookGenderBits = 1;$/;"	m	class:OpenXcom::RuleSoldier
LookTotalMask	Mod/RuleSoldier.h	/^	static constexpr int LookTotalMask = (1 << (LookVariantBits + LookBaseBits + LookGenderBits)) - 1;$/;"	m	class:OpenXcom::RuleSoldier
LookVariantBits	Mod/RuleSoldier.h	/^	static constexpr int LookVariantBits = 6;$/;"	m	class:OpenXcom::RuleSoldier
LookVariantMask	Mod/RuleSoldier.h	/^	static constexpr int LookVariantMask = LookVariantMax - 1;$/;"	m	class:OpenXcom::RuleSoldier
LookVariantMax	Mod/RuleSoldier.h	/^	static constexpr int LookVariantMax = (1 << LookVariantBits);$/;"	m	class:OpenXcom::RuleSoldier
LowFuelState	Geoscape/LowFuelState.cpp	/^LowFuelState::LowFuelState(Craft *craft, GeoscapeState *state) : _craft(craft), _state(state)$/;"	f	class:OpenXcom::LowFuelState
LowFuelState	Geoscape/LowFuelState.h	/^class LowFuelState : public State$/;"	c	namespace:OpenXcom
MACRO_ALL_INIT	Engine/Script.cpp	2431;"	d	file:
MACRO_ALL_INIT	Engine/Script.cpp	2436;"	d	file:
MACRO_ALL_LOG	Engine/Script.cpp	3033;"	d	file:
MACRO_ALL_LOG	Engine/Script.cpp	3045;"	d	file:
MACRO_CLANG_AUTO_HACK	Engine/ScriptBind.h	41;"	d
MACRO_COPY_16	Engine/Script.cpp	52;"	d	file:
MACRO_COPY_256	Engine/Script.cpp	62;"	d	file:
MACRO_COPY_4	Engine/Script.cpp	47;"	d	file:
MACRO_COPY_64	Engine/Script.cpp	57;"	d	file:
MACRO_CREATE_FUNC	Engine/Script.cpp	250;"	d	file:
MACRO_CREATE_FUNC	Engine/Script.cpp	260;"	d	file:
MACRO_CREATE_PROC_ENUM	Engine/Script.cpp	364;"	d	file:
MACRO_CREATE_PROC_ENUM	Engine/Script.cpp	377;"	d	file:
MACRO_FUNC_ARRAY	Engine/Script.cpp	394;"	d	file:
MACRO_FUNC_ARRAY	Engine/Script.cpp	431;"	d	file:
MACRO_FUNC_ARRAY_LOOP	Engine/Script.cpp	395;"	d	file:
MACRO_FUNC_ARRAY_LOOP	Engine/Script.cpp	430;"	d	file:
MACRO_FUNC_ID	Engine/Script.cpp	245;"	d	file:
MACRO_GET_STRING_1	Engine/Script.h	1849;"	d
MACRO_GET_STRING_16	Engine/Script.h	1858;"	d
MACRO_GET_STRING_4	Engine/Script.h	1852;"	d
MACRO_NAMED_SCRIPT	Engine/Script.h	1864;"	d
MACRO_PROC_DEFINITION	Engine/Script.cpp	180;"	d	file:
MACRO_PROC_ID	Engine/Script.cpp	359;"	d	file:
MACRO_QUOTE	Engine/Script.cpp	45;"	d	file:
MACRO_STRCAT	Engine/Script.cpp	3032;"	d	file:
MACRO_STRCAT	Engine/Script.cpp	3046;"	d	file:
MANU_FILTER_DEFAULT	Mod/RuleManufacture.h	/^	MANU_FILTER_DEFAULT,$/;"	e	enum:OpenXcom::ManufacturingFilterType
MANU_FILTER_DEFAULT_NO_SUPPLIES	Mod/RuleManufacture.h	/^	MANU_FILTER_DEFAULT_NO_SUPPLIES,$/;"	e	enum:OpenXcom::ManufacturingFilterType
MANU_FILTER_DEFAULT_SUPPLIES_OK	Mod/RuleManufacture.h	/^	MANU_FILTER_DEFAULT_SUPPLIES_OK,$/;"	e	enum:OpenXcom::ManufacturingFilterType
MANU_FILTER_FACILITY_REQUIRED	Mod/RuleManufacture.h	/^	MANU_FILTER_FACILITY_REQUIRED,$/;"	e	enum:OpenXcom::ManufacturingFilterType
MANU_FILTER_HIDDEN	Mod/RuleManufacture.h	/^	MANU_FILTER_HIDDEN$/;"	e	enum:OpenXcom::ManufacturingFilterType
MANU_STATUSES	Mod/RuleManufacture.h	/^	static const int MANU_STATUSES = 3;$/;"	m	class:OpenXcom::RuleManufacture
MANU_STATUS_HIDDEN	Mod/RuleManufacture.h	/^	static const int MANU_STATUS_HIDDEN = 2;$/;"	m	class:OpenXcom::RuleManufacture
MANU_STATUS_NEW	Mod/RuleManufacture.h	/^	static const int MANU_STATUS_NEW = 0;$/;"	m	class:OpenXcom::RuleManufacture
MANU_STATUS_NORMAL	Mod/RuleManufacture.h	/^	static const int MANU_STATUS_NORMAL = 1;$/;"	m	class:OpenXcom::RuleManufacture
MARGIN	Geoscape/MultipleTargetsState.h	/^	static const int MARGIN = 10;$/;"	m	class:OpenXcom::MultipleTargetsState
MASK	Engine/FlcPlayer.cpp	/^	MASK = SKIP_LINES$/;"	e	enum:OpenXcom::ChunkOpcodes	file:
MASK_13	Engine/Scalers/common.h	29;"	d
MASK_2	Engine/Scalers/common.h	28;"	d
MASK_ALPHA	Engine/Scalers/common.h	31;"	d
MASK_RGB	Engine/Scalers/common.h	30;"	d
MAX_BASES	Basescape/MiniBaseView.h	/^	static const size_t MAX_BASES = 8;$/;"	m	class:OpenXcom::MiniBaseView
MAX_CRAFT_LOADOUT_TEMPLATES	Savegame/SavedGame.h	/^	static const int MAX_CRAFT_LOADOUT_TEMPLATES = 10;$/;"	m	class:OpenXcom::SavedGame
MAX_DRAW_RADAR_CIRCLE_RADIUS	Geoscape/Globe.h	/^	static const int MAX_DRAW_RADAR_CIRCLE_RADIUS = 10000;$/;"	m	class:OpenXcom::Globe
MAX_EQUIPMENT_LAYOUT_TEMPLATES	Savegame/SavedGame.h	/^	static const int MAX_EQUIPMENT_LAYOUT_TEMPLATES = 50;$/;"	m	class:OpenXcom::SavedGame
MAX_FRAME	Battlescape/MiniMapView.cpp	/^const int MAX_FRAME = 2;$/;"	m	namespace:OpenXcom	file:
MAX_ITEMS	Interface/ComboBox.cpp	/^const int ComboBox::MAX_ITEMS = 10;$/;"	m	class:OpenXcom::ComboBox	file:
MAX_ITEMS	Interface/ComboBox.h	/^	static const int MAX_ITEMS;$/;"	m	class:OpenXcom::ComboBox
MAX_MOVE_COST	Battlescape/Pathfinding.h	/^	static constexpr int MAX_MOVE_COST = 100;$/;"	m	class:OpenXcom::Pathfinding
MAX_SOLDIER_ID	Savegame/BattleUnit.h	/^	static const int MAX_SOLDIER_ID = 1000000;$/;"	m	class:OpenXcom::BattleUnit
MAX_SUPPORTED_DEFLATE_LENGTH	lodepng.cpp	/^static const size_t MAX_SUPPORTED_DEFLATE_LENGTH = 258;$/;"	v	file:
MCDPatch	Mod/MCDPatch.cpp	/^MCDPatch::MCDPatch()$/;"	f	class:OpenXcom::MCDPatch
MCDPatch	Mod/MCDPatch.h	/^class MCDPatch$/;"	c	namespace:OpenXcom
MCDReplacement	Mod/MapScript.h	/^struct MCDReplacement {	int set, entry;};$/;"	s	namespace:OpenXcom
MD5	md5.cpp	/^MD5::MD5()$/;"	f	class:MD5
MD5	md5.cpp	/^MD5::MD5(const std::string &text)$/;"	f	class:MD5
MD5	md5.h	/^class MD5$/;"	c
MD_BOTH	Mod/MapScript.h	/^enum MapDirection {MD_NONE, MD_VERTICAL, MD_HORIZONTAL, MD_BOTH};$/;"	e	enum:OpenXcom::MapDirection
MD_HORIZONTAL	Mod/MapScript.h	/^enum MapDirection {MD_NONE, MD_VERTICAL, MD_HORIZONTAL, MD_BOTH};$/;"	e	enum:OpenXcom::MapDirection
MD_NONE	Mod/MapScript.h	/^enum MapDirection {MD_NONE, MD_VERTICAL, MD_HORIZONTAL, MD_BOTH};$/;"	e	enum:OpenXcom::MapDirection
MD_VERTICAL	Mod/MapScript.h	/^enum MapDirection {MD_NONE, MD_VERTICAL, MD_HORIZONTAL, MD_BOTH};$/;"	e	enum:OpenXcom::MapDirection
MIA	Savegame/BattleUnitStatistics.h	/^	bool MIA;                            \/\/\/< Tracks if the soldier was left behind :($/;"	m	struct:OpenXcom::BattleUnitStatistics
MINIZ_NO_STDIO	Engine/FileMap.cpp	52;"	d	file:
MINI_SIZE	Basescape/MiniBaseView.h	/^	static const int MINI_SIZE = 14;$/;"	m	class:OpenXcom::MiniBaseView
MISSION	Menu/NewBattleState.h	/^enum class NewBattleSelectType { MISSION = 0, TERRAIN, ALIENRACE };$/;"	m	class:OpenXcom::NewBattleSelectType
ML	Engine/Adlib/fmopl.cpp	204;"	d	file:
ML	Engine/Adlib/fmopl.cpp	210;"	d	file:
MSC_ADDBLOCK	Mod/MapScript.h	/^enum MapScriptCommand {MSC_UNDEFINED = -1, MSC_ADDBLOCK, MSC_ADDLINE, MSC_ADDCRAFT, MSC_ADDUFO, MSC_DIGTUNNEL, MSC_FILLAREA, MSC_CHECKBLOCK, MSC_REMOVE, MSC_RESIZE};$/;"	e	enum:OpenXcom::MapScriptCommand
MSC_ADDCRAFT	Mod/MapScript.h	/^enum MapScriptCommand {MSC_UNDEFINED = -1, MSC_ADDBLOCK, MSC_ADDLINE, MSC_ADDCRAFT, MSC_ADDUFO, MSC_DIGTUNNEL, MSC_FILLAREA, MSC_CHECKBLOCK, MSC_REMOVE, MSC_RESIZE};$/;"	e	enum:OpenXcom::MapScriptCommand
MSC_ADDLINE	Mod/MapScript.h	/^enum MapScriptCommand {MSC_UNDEFINED = -1, MSC_ADDBLOCK, MSC_ADDLINE, MSC_ADDCRAFT, MSC_ADDUFO, MSC_DIGTUNNEL, MSC_FILLAREA, MSC_CHECKBLOCK, MSC_REMOVE, MSC_RESIZE};$/;"	e	enum:OpenXcom::MapScriptCommand
MSC_ADDUFO	Mod/MapScript.h	/^enum MapScriptCommand {MSC_UNDEFINED = -1, MSC_ADDBLOCK, MSC_ADDLINE, MSC_ADDCRAFT, MSC_ADDUFO, MSC_DIGTUNNEL, MSC_FILLAREA, MSC_CHECKBLOCK, MSC_REMOVE, MSC_RESIZE};$/;"	e	enum:OpenXcom::MapScriptCommand
MSC_CHECKBLOCK	Mod/MapScript.h	/^enum MapScriptCommand {MSC_UNDEFINED = -1, MSC_ADDBLOCK, MSC_ADDLINE, MSC_ADDCRAFT, MSC_ADDUFO, MSC_DIGTUNNEL, MSC_FILLAREA, MSC_CHECKBLOCK, MSC_REMOVE, MSC_RESIZE};$/;"	e	enum:OpenXcom::MapScriptCommand
MSC_DIGTUNNEL	Mod/MapScript.h	/^enum MapScriptCommand {MSC_UNDEFINED = -1, MSC_ADDBLOCK, MSC_ADDLINE, MSC_ADDCRAFT, MSC_ADDUFO, MSC_DIGTUNNEL, MSC_FILLAREA, MSC_CHECKBLOCK, MSC_REMOVE, MSC_RESIZE};$/;"	e	enum:OpenXcom::MapScriptCommand
MSC_FILLAREA	Mod/MapScript.h	/^enum MapScriptCommand {MSC_UNDEFINED = -1, MSC_ADDBLOCK, MSC_ADDLINE, MSC_ADDCRAFT, MSC_ADDUFO, MSC_DIGTUNNEL, MSC_FILLAREA, MSC_CHECKBLOCK, MSC_REMOVE, MSC_RESIZE};$/;"	e	enum:OpenXcom::MapScriptCommand
MSC_REMOVE	Mod/MapScript.h	/^enum MapScriptCommand {MSC_UNDEFINED = -1, MSC_ADDBLOCK, MSC_ADDLINE, MSC_ADDCRAFT, MSC_ADDUFO, MSC_DIGTUNNEL, MSC_FILLAREA, MSC_CHECKBLOCK, MSC_REMOVE, MSC_RESIZE};$/;"	e	enum:OpenXcom::MapScriptCommand
MSC_RESIZE	Mod/MapScript.h	/^enum MapScriptCommand {MSC_UNDEFINED = -1, MSC_ADDBLOCK, MSC_ADDLINE, MSC_ADDCRAFT, MSC_ADDUFO, MSC_DIGTUNNEL, MSC_FILLAREA, MSC_CHECKBLOCK, MSC_REMOVE, MSC_RESIZE};$/;"	e	enum:OpenXcom::MapScriptCommand
MSC_UNDEFINED	Mod/MapScript.h	/^enum MapScriptCommand {MSC_UNDEFINED = -1, MSC_ADDBLOCK, MSC_ADDLINE, MSC_ADDCRAFT, MSC_ADDUFO, MSC_DIGTUNNEL, MSC_FILLAREA, MSC_CHECKBLOCK, MSC_REMOVE, MSC_RESIZE};$/;"	e	enum:OpenXcom::MapScriptCommand
MT_CROSSING	Mod/MapBlock.h	/^enum MapBlockType {MT_UNDEFINED = -1, MT_DEFAULT, MT_LANDINGZONE, MT_EWROAD, MT_NSROAD, MT_CROSSING};$/;"	e	enum:OpenXcom::MapBlockType
MT_DEFAULT	Mod/MapBlock.h	/^enum MapBlockType {MT_UNDEFINED = -1, MT_DEFAULT, MT_LANDINGZONE, MT_EWROAD, MT_NSROAD, MT_CROSSING};$/;"	e	enum:OpenXcom::MapBlockType
MT_EWROAD	Mod/MapBlock.h	/^enum MapBlockType {MT_UNDEFINED = -1, MT_DEFAULT, MT_LANDINGZONE, MT_EWROAD, MT_NSROAD, MT_CROSSING};$/;"	e	enum:OpenXcom::MapBlockType
MT_LANDINGZONE	Mod/MapBlock.h	/^enum MapBlockType {MT_UNDEFINED = -1, MT_DEFAULT, MT_LANDINGZONE, MT_EWROAD, MT_NSROAD, MT_CROSSING};$/;"	e	enum:OpenXcom::MapBlockType
MT_NSROAD	Mod/MapBlock.h	/^enum MapBlockType {MT_UNDEFINED = -1, MT_DEFAULT, MT_LANDINGZONE, MT_EWROAD, MT_NSROAD, MT_CROSSING};$/;"	e	enum:OpenXcom::MapBlockType
MT_UNDEFINED	Mod/MapBlock.h	/^enum MapBlockType {MT_UNDEFINED = -1, MT_DEFAULT, MT_LANDINGZONE, MT_EWROAD, MT_NSROAD, MT_CROSSING};$/;"	e	enum:OpenXcom::MapBlockType
MUL_TABLE	Engine/Adlib/fmopl.cpp	/^static const UINT32 MUL_TABLE[16]= {$/;"	v	file:
MUSIC_ADLIB	Engine/Options.h	/^enum MusicFormat { MUSIC_AUTO, MUSIC_FLAC, MUSIC_OGG, MUSIC_MP3, MUSIC_MOD, MUSIC_WAV, MUSIC_ADLIB, MUSIC_GM, MUSIC_MIDI };$/;"	e	enum:OpenXcom::MusicFormat
MUSIC_AUTO	Engine/Options.h	/^enum MusicFormat { MUSIC_AUTO, MUSIC_FLAC, MUSIC_OGG, MUSIC_MP3, MUSIC_MOD, MUSIC_WAV, MUSIC_ADLIB, MUSIC_GM, MUSIC_MIDI };$/;"	e	enum:OpenXcom::MusicFormat
MUSIC_FLAC	Engine/Options.h	/^enum MusicFormat { MUSIC_AUTO, MUSIC_FLAC, MUSIC_OGG, MUSIC_MP3, MUSIC_MOD, MUSIC_WAV, MUSIC_ADLIB, MUSIC_GM, MUSIC_MIDI };$/;"	e	enum:OpenXcom::MusicFormat
MUSIC_GM	Engine/Options.h	/^enum MusicFormat { MUSIC_AUTO, MUSIC_FLAC, MUSIC_OGG, MUSIC_MP3, MUSIC_MOD, MUSIC_WAV, MUSIC_ADLIB, MUSIC_GM, MUSIC_MIDI };$/;"	e	enum:OpenXcom::MusicFormat
MUSIC_MIDI	Engine/Options.h	/^enum MusicFormat { MUSIC_AUTO, MUSIC_FLAC, MUSIC_OGG, MUSIC_MP3, MUSIC_MOD, MUSIC_WAV, MUSIC_ADLIB, MUSIC_GM, MUSIC_MIDI };$/;"	e	enum:OpenXcom::MusicFormat
MUSIC_MOD	Engine/Options.h	/^enum MusicFormat { MUSIC_AUTO, MUSIC_FLAC, MUSIC_OGG, MUSIC_MP3, MUSIC_MOD, MUSIC_WAV, MUSIC_ADLIB, MUSIC_GM, MUSIC_MIDI };$/;"	e	enum:OpenXcom::MusicFormat
MUSIC_MP3	Engine/Options.h	/^enum MusicFormat { MUSIC_AUTO, MUSIC_FLAC, MUSIC_OGG, MUSIC_MP3, MUSIC_MOD, MUSIC_WAV, MUSIC_ADLIB, MUSIC_GM, MUSIC_MIDI };$/;"	e	enum:OpenXcom::MusicFormat
MUSIC_OGG	Engine/Options.h	/^enum MusicFormat { MUSIC_AUTO, MUSIC_FLAC, MUSIC_OGG, MUSIC_MP3, MUSIC_MOD, MUSIC_WAV, MUSIC_ADLIB, MUSIC_GM, MUSIC_MIDI };$/;"	e	enum:OpenXcom::MusicFormat
MUSIC_WAV	Engine/Options.h	/^enum MusicFormat { MUSIC_AUTO, MUSIC_FLAC, MUSIC_OGG, MUSIC_MP3, MUSIC_MOD, MUSIC_WAV, MUSIC_ADLIB, MUSIC_GM, MUSIC_MIDI };$/;"	e	enum:OpenXcom::MusicFormat
M_PI	fmath.h	27;"	d
M_PI_2	fmath.h	28;"	d
M_PI_4	fmath.h	29;"	d
MainMenuState	Menu/MainMenuState.cpp	/^MainMenuState::MainMenuState(bool updateCheck)$/;"	f	class:OpenXcom::MainMenuState
MainMenuState	Menu/MainMenuState.h	/^class MainMenuState : public State$/;"	c	namespace:OpenXcom
ManHairColor	Mod/Mod.cpp	/^		static const Uint8 ManHairColor = 4 << 4;$/;"	m	struct:OpenXcom::__anon29::HairXCOM2	file:
Mana	Mod/RuleItem.h	/^	int Mana;$/;"	m	struct:OpenXcom::RuleItemUseCost
ManaRecovery	Savegame/Base.h	/^	int ManaRecovery = 0;$/;"	m	struct:OpenXcom::BaseSumDailyRecovery
ManageAlienContainmentState	Basescape/ManageAlienContainmentState.cpp	/^ManageAlienContainmentState::ManageAlienContainmentState(Base *base, int prisonType, OptionsOrigin origin) :$/;"	f	class:OpenXcom::ManageAlienContainmentState
ManageAlienContainmentState	Basescape/ManageAlienContainmentState.h	/^class ManageAlienContainmentState : public State$/;"	c	namespace:OpenXcom
ManufactureDependenciesTreeState	Basescape/ManufactureDependenciesTreeState.cpp	/^ManufactureDependenciesTreeState::ManufactureDependenciesTreeState(const std::string &selectedItem) : _selectedItem(selectedItem), _showAll(false)$/;"	f	class:OpenXcom::ManufactureDependenciesTreeState
ManufactureDependenciesTreeState	Basescape/ManufactureDependenciesTreeState.h	/^class ManufactureDependenciesTreeState : public State$/;"	c	namespace:OpenXcom
ManufactureInfoState	Basescape/ManufactureInfoState.cpp	/^ManufactureInfoState::ManufactureInfoState (Base *base, Production *production) : _base(base), _item(0), _production(production)$/;"	f	class:OpenXcom::ManufactureInfoState
ManufactureInfoState	Basescape/ManufactureInfoState.cpp	/^ManufactureInfoState::ManufactureInfoState (Base *base, RuleManufacture *item) : _base(base), _item(item), _production(0)$/;"	f	class:OpenXcom::ManufactureInfoState
ManufactureInfoState	Basescape/ManufactureInfoState.h	/^class ManufactureInfoState : public State$/;"	c	namespace:OpenXcom
ManufactureStartState	Basescape/ManufactureStartState.cpp	/^ManufactureStartState::ManufactureStartState(Base *base, RuleManufacture *item) :  _base(base), _item(item)$/;"	f	class:OpenXcom::ManufactureStartState
ManufactureStartState	Basescape/ManufactureStartState.h	/^class ManufactureStartState : public State$/;"	c	namespace:OpenXcom
ManufactureState	Basescape/ManufactureState.cpp	/^ManufactureState::ManufactureState(Base *base) : _base(base)$/;"	f	class:OpenXcom::ManufactureState
ManufactureState	Basescape/ManufactureState.h	/^class ManufactureState : public State$/;"	c	namespace:OpenXcom
ManufacturingFilterType	Mod/RuleManufacture.h	/^enum ManufacturingFilterType$/;"	g	namespace:OpenXcom
Map	Battlescape/Map.cpp	/^Map::Map(Game *game, int width, int height, int x, int y, int visibleMapHeight) : InteractiveSurface(width, height, x, y),$/;"	f	class:OpenXcom::Map
Map	Battlescape/Map.h	/^class Map : public InteractiveSurface$/;"	c	namespace:OpenXcom
MapBlock	Mod/MapBlock.cpp	/^MapBlock::MapBlock(const std::string &name): _name(name), _size_x(10), _size_y(10), _size_z(4)$/;"	f	class:OpenXcom::MapBlock
MapBlock	Mod/MapBlock.h	/^class MapBlock$/;"	c	namespace:OpenXcom
MapBlockType	Mod/MapBlock.h	/^enum MapBlockType {MT_UNDEFINED = -1, MT_DEFAULT, MT_LANDINGZONE, MT_EWROAD, MT_NSROAD, MT_CROSSING};$/;"	g	namespace:OpenXcom
MapData	Mod/MapData.cpp	/^MapData::MapData(MapDataSet *dataset) : _dataset(dataset), _specialType(TILE), $/;"	f	class:OpenXcom::MapData
MapData	Mod/MapData.h	/^class MapData$/;"	c	namespace:OpenXcom
MapDataSet	Mod/MapDataSet.cpp	/^MapDataSet::MapDataSet(const std::string &name) : _name(name), _surfaceSet(0), _loaded(false)$/;"	f	class:OpenXcom::MapDataSet
MapDataSet	Mod/MapDataSet.h	/^class MapDataSet$/;"	c	namespace:OpenXcom
MapDirection	Mod/MapScript.h	/^enum MapDirection {MD_NONE, MD_VERTICAL, MD_HORIZONTAL, MD_BOTH};$/;"	g	namespace:OpenXcom
MapScript	Mod/MapScript.cpp	/^MapScript::MapScript() :$/;"	f	class:OpenXcom::MapScript
MapScript	Mod/MapScript.h	/^class MapScript$/;"	c	namespace:OpenXcom
MapScriptCommand	Mod/MapScript.h	/^enum MapScriptCommand {MSC_UNDEFINED = -1, MSC_ADDBLOCK, MSC_ADDLINE, MSC_ADDCRAFT, MSC_ADDUFO, MSC_DIGTUNNEL, MSC_FILLAREA, MSC_CHECKBLOCK, MSC_REMOVE, MSC_RESIZE};$/;"	g	namespace:OpenXcom
MappedVFSLayers	Engine/FileMap.cpp	/^static std::unordered_set<VFSLayer *> MappedVFSLayers; \/\/ owned here so we can have some sense of their lifetime$/;"	m	namespace:OpenXcom::FileMap	file:
MaskBlockDirMul	Battlescape/TileEngine.cpp	/^constexpr static Uint32 MaskBlockDirMul = 9;$/;"	m	namespace:OpenXcom::__anon45	file:
MaskBlockDirOffset	Battlescape/TileEngine.cpp	/^constexpr static Uint32 MaskBlockDirOffset = MaskBlockDirMul + 1;$/;"	m	namespace:OpenXcom::__anon45	file:
MaskBlockDown	Battlescape/TileEngine.cpp	/^constexpr static Uint32 MaskBlockDown = selectBit(-1, -1);$/;"	m	namespace:OpenXcom::__anon45	file:
MaskBlockUp	Battlescape/TileEngine.cpp	/^constexpr static Uint32 MaskBlockUp = selectBit(-1, +1);$/;"	m	namespace:OpenXcom::__anon45	file:
MaskFire	Battlescape/TileEngine.cpp	/^constexpr static Uint32 MaskFire = selectBit(+7, +1) << 1;$/;"	m	namespace:OpenXcom::__anon45	file:
MaskSmoke	Battlescape/TileEngine.cpp	/^constexpr static Uint32 MaskSmoke =  selectBit(+7, +1) << 2;$/;"	m	namespace:OpenXcom::__anon45	file:
MatchBaseCoordinates	Savegame/AlienMission.cpp	/^	MatchBaseCoordinates(double lon, double lat) : _lon(lon), _lat(lat) { \/* Empty by design. *\/ }$/;"	f	class:OpenXcom::MatchBaseCoordinates
MatchBaseCoordinates	Savegame/AlienMission.cpp	/^class MatchBaseCoordinates$/;"	c	namespace:OpenXcom	file:
MatrixRotation	Engine/Scalers/xbrz.cpp	/^struct MatrixRotation$/;"	s	namespace:__anon10	file:
MatrixRotation	Engine/Scalers/xbrz.cpp	/^struct MatrixRotation<ROT_0, I, J, N>$/;"	s	namespace:__anon10	file:
MaxDifficultyLevels	Mod/Mod.cpp	/^constexpr size_t MaxDifficultyLevels = 5;$/;"	m	namespace:OpenXcom	file:
MedikitButton	Battlescape/MedikitState.cpp	/^MedikitButton::MedikitButton(int y) : InteractiveSurface(30, 20, 190, y)$/;"	f	class:OpenXcom::MedikitButton
MedikitButton	Battlescape/MedikitState.cpp	/^class MedikitButton : public InteractiveSurface$/;"	c	namespace:OpenXcom	file:
MedikitSlots	Mod/RuleItem.h	/^	static const int MedikitSlots = 3;$/;"	m	class:OpenXcom::RuleItem
MedikitState	Battlescape/MedikitState.cpp	/^MedikitState::MedikitState (BattleUnit *targetUnit, BattleAction *action, TileEngine *tile) : _targetUnit(targetUnit), _action(action), _tileEngine(tile)$/;"	f	class:OpenXcom::MedikitState
MedikitState	Battlescape/MedikitState.h	/^class MedikitState : public State$/;"	c	namespace:OpenXcom
MedikitTitle	Battlescape/MedikitState.cpp	/^MedikitTitle::MedikitTitle (int y, const std::string & title) : Text (73, 9, 186, y)$/;"	f	class:OpenXcom::MedikitTitle
MedikitTitle	Battlescape/MedikitState.cpp	/^class MedikitTitle : public Text$/;"	c	namespace:OpenXcom	file:
MedikitTxt	Battlescape/MedikitState.cpp	/^MedikitTxt::MedikitTxt(int y) : Text(33, 17, 220, y)$/;"	f	class:OpenXcom::MedikitTxt
MedikitTxt	Battlescape/MedikitState.cpp	/^class MedikitTxt : public Text$/;"	c	namespace:OpenXcom	file:
MedikitView	Battlescape/MedikitView.cpp	/^MedikitView::MedikitView (int w, int h, int x, int y, Game * game, BattleUnit *unit, Text *partTxt, Text *woundTxt) : InteractiveSurface(w, h, x, y), _game(game), _selectedPart(0), _unit(unit), _partTxt(partTxt), _woundTxt(woundTxt)$/;"	f	class:OpenXcom::MedikitView
MedikitView	Battlescape/MedikitView.h	/^class MedikitView : public InteractiveSurface$/;"	c	namespace:OpenXcom
MeleeAttackBState	Battlescape/MeleeAttackBState.cpp	/^MeleeAttackBState::MeleeAttackBState(BattlescapeGame *parent, BattleAction action) : BattleState(parent, action), _unit(0), _target(0), _weapon(0), _ammo(0), _hitNumber(0), _initialized(false), _reaction(false)$/;"	f	class:OpenXcom::MeleeAttackBState
MeleeAttackBState	Battlescape/MeleeAttackBState.h	/^class MeleeAttackBState : public BattleState$/;"	c	namespace:OpenXcom
MinNodeCosts	Battlescape/PathfindingNode.h	/^class MinNodeCosts$/;"	c	namespace:OpenXcom
MiniBaseView	Basescape/MiniBaseView.cpp	/^MiniBaseView::MiniBaseView(int width, int height, int x, int y) : InteractiveSurface(width, height, x, y), _bases(0), _texture(0), _base(0), _hoverBase(0), _red(0), _green(0), _blue(0)$/;"	f	class:OpenXcom::MiniBaseView
MiniBaseView	Basescape/MiniBaseView.h	/^class MiniBaseView : public InteractiveSurface$/;"	c	namespace:OpenXcom
MiniMapState	Battlescape/MiniMapState.cpp	/^MiniMapState::MiniMapState (Camera * camera, SavedBattleGame * battleGame)$/;"	f	class:OpenXcom::MiniMapState
MiniMapState	Battlescape/MiniMapState.h	/^class MiniMapState : public State$/;"	c	namespace:OpenXcom
MiniMapView	Battlescape/MiniMapView.cpp	/^MiniMapView::MiniMapView(int w, int h, int x, int y, Game * game, Camera * camera, SavedBattleGame * battleGame) : InteractiveSurface(w, h, x, y), _game(game), _camera(camera), _battleGame(battleGame), _frame(0), _isMouseScrolling(false), _isMouseScrolled(false), _xBeforeMouseScrolling(0), _yBeforeMouseScrolling(0), _mouseScrollX(0), _mouseScrollY(0), _mouseScrollingStartTime(0), _totalMouseMoveX(0), _totalMouseMoveY(0), _mouseMovedOverThreshold(false)$/;"	f	class:OpenXcom::MiniMapView
MiniMapView	Battlescape/MiniMapView.h	/^class MiniMapView : public InteractiveSurface$/;"	c	namespace:OpenXcom
MissionArea	Mod/RuleRegion.h	/^	MissionArea() : lonMin(0.0), lonMax(360.0), latMin(-90.0), latMax(90.0), texture(0) { }$/;"	f	struct:OpenXcom::MissionArea
MissionArea	Mod/RuleRegion.h	/^struct MissionArea$/;"	s	namespace:OpenXcom
MissionDetectedState	Geoscape/MissionDetectedState.cpp	/^MissionDetectedState::MissionDetectedState(MissionSite *mission, GeoscapeState *state) : _mission(mission), _state(state)$/;"	f	class:OpenXcom::MissionDetectedState
MissionDetectedState	Geoscape/MissionDetectedState.h	/^class MissionDetectedState : public State$/;"	c	namespace:OpenXcom
MissionObjective	Mod/RuleAlienMission.h	/^enum MissionObjective { OBJECTIVE_SCORE, OBJECTIVE_INFILTRATION, OBJECTIVE_BASE, OBJECTIVE_SITE, OBJECTIVE_RETALIATION, OBJECTIVE_SUPPLY, OBJECTIVE_INSTANT_RETALIATION };$/;"	g	namespace:OpenXcom
MissionSite	Savegame/MissionSite.cpp	/^MissionSite::MissionSite(const RuleAlienMission *rules, const AlienDeployment *deployment, const AlienDeployment *alienCustomDeploy) : Target(), _rules(rules), _deployment(deployment), _missionCustomDeploy(alienCustomDeploy), _texture(-1), _secondsRemaining(0), _inBattlescape(false), _detected(false)$/;"	f	class:OpenXcom::MissionSite
MissionSite	Savegame/MissionSite.h	/^class MissionSite : public Target$/;"	c	namespace:OpenXcom
MissionStatistics	Savegame/MissionStatistics.h	/^	MissionStatistics() : id(0), markerId(0), time(0, 0, 0, 0, 0, 0, 0), region("STR_REGION_UNKNOWN"), country("STR_UNKNOWN"), ufo("NO_UFO"), success(false), score(0), alienRace("STR_UNKNOWN"), daylight(0), valiantCrux(false), lootValue(0) { }$/;"	f	struct:OpenXcom::MissionStatistics
MissionStatistics	Savegame/MissionStatistics.h	/^	MissionStatistics(const YAML::Node& node) : time(0, 0, 0, 0, 0, 0, 0) { load(node); }$/;"	f	struct:OpenXcom::MissionStatistics
MissionStatistics	Savegame/MissionStatistics.h	/^struct MissionStatistics$/;"	s	namespace:OpenXcom
MissionWave	Mod/RuleAlienMission.h	/^struct MissionWave$/;"	s	namespace:OpenXcom
MissionZone	Mod/RuleRegion.h	/^struct MissionZone$/;"	s	namespace:OpenXcom
MissionsByRegion	Savegame/AlienStrategy.cpp	/^typedef std::map<std::string, WeightedOptions*> MissionsByRegion;$/;"	t	namespace:OpenXcom	file:
Mod	Mod/Mod.cpp	/^Mod::Mod() :$/;"	f	class:OpenXcom::Mod
Mod	Mod/Mod.h	/^class Mod$/;"	c	namespace:OpenXcom
ModConfirmExtendedState	Menu/ModConfirmExtendedState.cpp	/^	ModConfirmExtendedState::ModConfirmExtendedState(ModListState *state, const ModInfo *modInfo, const ModInfo *masterInfo) : _state(state), _isMaster(modInfo->isMaster())$/;"	f	class:OpenXcom::ModConfirmExtendedState
ModConfirmExtendedState	Menu/ModConfirmExtendedState.h	/^	class ModConfirmExtendedState : public State$/;"	c	namespace:OpenXcom
ModData	Mod/Mod.h	/^struct ModData$/;"	s	namespace:OpenXcom
ModInfo	Engine/ModInfo.cpp	/^ModInfo::ModInfo(const std::string &path) :$/;"	f	class:OpenXcom::ModInfo
ModInfo	Engine/ModInfo.h	/^class ModInfo$/;"	c	namespace:OpenXcom
ModInfoNormalizedVersion	Engine/ModInfo.h	/^typedef std::basic_string<signed char> ModInfoNormalizedVersion;$/;"	t	namespace:OpenXcom
ModInfoVersion	Engine/ModInfo.h	/^typedef std::pair<std::string, ModInfoNormalizedVersion> ModInfoVersion;$/;"	t	namespace:OpenXcom
ModListState	Menu/ModListState.cpp	/^ModListState::ModListState() : _curMasterIdx(0)$/;"	f	class:OpenXcom::ModListState
ModListState	Menu/ModListState.h	/^class ModListState : public State$/;"	c	namespace:OpenXcom
ModNameCurrent	Mod/Mod.cpp	/^const std::string ModNameCurrent = "current";$/;"	m	namespace:OpenXcom	file:
ModNameMaster	Mod/Mod.cpp	/^const std::string ModNameMaster = "master";$/;"	m	namespace:OpenXcom	file:
ModRecord	Engine/FileMap.cpp	/^	ModRecord(const std::string& somepath) : modInfo(somepath), stack() { }$/;"	f	struct:OpenXcom::FileMap::ModRecord
ModRecord	Engine/FileMap.cpp	/^struct ModRecord {$/;"	s	namespace:OpenXcom::FileMap	file:
ModScript	Mod/ModScript.h	/^	ModScript(ScriptGlobal* shared, Mod* mod) : _shared{ shared }, _mod{ mod }$/;"	f	class:OpenXcom::ModScript
ModScript	Mod/ModScript.h	/^class ModScript$/;"	c	namespace:OpenXcom
ModScriptGlobal	Mod/Mod.cpp	/^class ModScriptGlobal : public ScriptGlobal$/;"	c	namespace:OpenXcom	file:
ModTransparencySizeReduction	Mod/Mod.cpp	/^const size_t ModTransparencySizeReduction = 100;$/;"	m	namespace:OpenXcom	file:
ModsAvailable	Engine/FileMap.cpp	/^static std::unordered_map<std::string, ModRecord *> ModsAvailable;$/;"	m	namespace:OpenXcom::FileMap	file:
MonthlyCostsState	Basescape/MonthlyCostsState.cpp	/^MonthlyCostsState::MonthlyCostsState(Base *base) : _base(base)$/;"	f	class:OpenXcom::MonthlyCostsState
MonthlyCostsState	Basescape/MonthlyCostsState.h	/^class MonthlyCostsState : public State$/;"	c	namespace:OpenXcom
MonthlyReportState	Geoscape/MonthlyReportState.cpp	/^MonthlyReportState::MonthlyReportState(Globe *globe) : _gameOver(0), _ratingTotal(0), _fundingDiff(0), _lastMonthsRating(0), _happyList(0), _sadList(0), _pactList(0), _cancelPactList(0)$/;"	f	class:OpenXcom::MonthlyReportState
MonthlyReportState	Geoscape/MonthlyReportState.h	/^class MonthlyReportState : public State$/;"	c	namespace:OpenXcom
Morale	Mod/RuleItem.h	/^	int Morale;$/;"	m	struct:OpenXcom::RuleItemUseCost
MovingTarget	Savegame/MovingTarget.cpp	/^MovingTarget::MovingTarget() : Target(), _dest(0), _speedLon(0.0), _speedLat(0.0), _speedRadian(0.0), _meetPointLon(0.0), _meetPointLat(0.0), _speed(0), _meetCalculated(false)$/;"	f	class:OpenXcom::MovingTarget
MovingTarget	Savegame/MovingTarget.h	/^class MovingTarget : public Target$/;"	c	namespace:OpenXcom
MultipleTargetsState	Geoscape/MultipleTargetsState.cpp	/^MultipleTargetsState::MultipleTargetsState(std::vector<Target*> targets, std::vector<Craft*> crafts, GeoscapeState *state, bool useCustomSound) :$/;"	f	class:OpenXcom::MultipleTargetsState
MultipleTargetsState	Geoscape/MultipleTargetsState.h	/^class MultipleTargetsState : public State$/;"	c	namespace:OpenXcom
Music	Engine/Music.cpp	/^Music::Music() : _music(0), _rwops(0)$/;"	f	class:OpenXcom::Music
Music	Engine/Music.h	/^class Music$/;"	c	namespace:OpenXcom
MusicFormat	Engine/Options.h	/^enum MusicFormat { MUSIC_AUTO, MUSIC_FLAC, MUSIC_OGG, MUSIC_MP3, MUSIC_MOD, MUSIC_WAV, MUSIC_ADLIB, MUSIC_GM, MUSIC_MIDI };$/;"	g	namespace:OpenXcom
NEAR_RADIUS	Geoscape/Globe.h	/^	static const int NEAR_RADIUS = 25;$/;"	m	class:OpenXcom::Globe
NEWBLOCK_LIMIT	Engine/Adlib/adlplayer.cpp	172;"	d	file:
NEXT_TURN_DELAY	Battlescape/NextTurnState.h	/^	static const int NEXT_TURN_DELAY = 500;$/;"	m	class:OpenXcom::NextTurnState
NIGHT_VISION_MAX_SHADE	Battlescape/Map.h	/^	static const int NIGHT_VISION_MAX_SHADE = 8;$/;"	m	class:OpenXcom::Map
NIGHT_VISION_SHADE	Battlescape/Map.h	/^	static const int NIGHT_VISION_SHADE = 4;$/;"	m	class:OpenXcom::Map
NN_SCALE_SLICE_SOURCE	Engine/Scalers/xbrz.h	/^    NN_SCALE_SLICE_SOURCE,$/;"	e	enum:xbrz::SliceType
NN_SCALE_SLICE_TARGET	Engine/Scalers/xbrz.h	/^    NN_SCALE_SLICE_TARGET,$/;"	e	enum:xbrz::SliceType
NOMINMAX	Engine/CrossPlatform.cpp	40;"	d	file:
NOMINMAX	Engine/Unicode.cpp	30;"	d	file:
NONE	Mod/Armor.cpp	/^const std::string Armor::NONE = "STR_NONE";$/;"	m	class:OpenXcom::Armor	file:
NONE	Mod/Armor.h	/^	static const std::string NONE;$/;"	m	class:OpenXcom::Armor
NOT_CALCULATED	Savegame/Tile.h	/^	static const int NOT_CALCULATED = -1;$/;"	m	class:OpenXcom::Tile
NO_SOUND	Mod/Mod.h	/^	constexpr static int NO_SOUND = -1;$/;"	m	class:OpenXcom::Mod
NO_SURFACE	Mod/Mod.h	/^	constexpr static int NO_SURFACE = -1;$/;"	m	class:OpenXcom::Mod
NR_ENGINEER	Savegame/Node.h	/^enum NodeRank{NR_SCOUT=0, NR_XCOM, NR_SOLDIER, NR_NAVIGATOR, NR_LEADER, NR_ENGINEER, NR_MISC1, NR_MEDIC, NR_MISC2};$/;"	e	enum:OpenXcom::NodeRank
NR_LEADER	Savegame/Node.h	/^enum NodeRank{NR_SCOUT=0, NR_XCOM, NR_SOLDIER, NR_NAVIGATOR, NR_LEADER, NR_ENGINEER, NR_MISC1, NR_MEDIC, NR_MISC2};$/;"	e	enum:OpenXcom::NodeRank
NR_MEDIC	Savegame/Node.h	/^enum NodeRank{NR_SCOUT=0, NR_XCOM, NR_SOLDIER, NR_NAVIGATOR, NR_LEADER, NR_ENGINEER, NR_MISC1, NR_MEDIC, NR_MISC2};$/;"	e	enum:OpenXcom::NodeRank
NR_MISC1	Savegame/Node.h	/^enum NodeRank{NR_SCOUT=0, NR_XCOM, NR_SOLDIER, NR_NAVIGATOR, NR_LEADER, NR_ENGINEER, NR_MISC1, NR_MEDIC, NR_MISC2};$/;"	e	enum:OpenXcom::NodeRank
NR_MISC2	Savegame/Node.h	/^enum NodeRank{NR_SCOUT=0, NR_XCOM, NR_SOLDIER, NR_NAVIGATOR, NR_LEADER, NR_ENGINEER, NR_MISC1, NR_MEDIC, NR_MISC2};$/;"	e	enum:OpenXcom::NodeRank
NR_NAVIGATOR	Savegame/Node.h	/^enum NodeRank{NR_SCOUT=0, NR_XCOM, NR_SOLDIER, NR_NAVIGATOR, NR_LEADER, NR_ENGINEER, NR_MISC1, NR_MEDIC, NR_MISC2};$/;"	e	enum:OpenXcom::NodeRank
NR_SCOUT	Savegame/Node.h	/^enum NodeRank{NR_SCOUT=0, NR_XCOM, NR_SOLDIER, NR_NAVIGATOR, NR_LEADER, NR_ENGINEER, NR_MISC1, NR_MEDIC, NR_MISC2};$/;"	e	enum:OpenXcom::NodeRank
NR_SOLDIER	Savegame/Node.h	/^enum NodeRank{NR_SCOUT=0, NR_XCOM, NR_SOLDIER, NR_NAVIGATOR, NR_LEADER, NR_ENGINEER, NR_MISC1, NR_MEDIC, NR_MISC2};$/;"	e	enum:OpenXcom::NodeRank
NR_XCOM	Savegame/Node.h	/^enum NodeRank{NR_SCOUT=0, NR_XCOM, NR_SOLDIER, NR_NAVIGATOR, NR_LEADER, NR_ENGINEER, NR_MISC1, NR_MEDIC, NR_MISC2};$/;"	e	enum:OpenXcom::NodeRank
NUM_BUTTONS	Engine/InteractiveSurface.h	/^	static const int NUM_BUTTONS = 7;$/;"	m	class:OpenXcom::InteractiveSurface
NUM_CODE_LENGTH_CODES	lodepng.cpp	477;"	d	file:
NUM_DEFLATE_CODE_SYMBOLS	lodepng.cpp	473;"	d	file:
NUM_DISTANCE_SYMBOLS	lodepng.cpp	475;"	d	file:
NUM_LANDSHADES	Geoscape/Globe.h	/^	static const int NUM_LANDSHADES = 48;$/;"	m	class:OpenXcom::Globe
NUM_SAVES	Savegame/SaveConverter.h	/^	static const int NUM_SAVES = 10;$/;"	m	class:OpenXcom::SaveConverter
NUM_SEASHADES	Geoscape/Globe.h	/^	static const int NUM_SEASHADES = 72;$/;"	m	class:OpenXcom::Globe
NameSet	Engine/FileMap.h	/^	typedef std::unordered_set<std::string> NameSet;$/;"	t	namespace:OpenXcom::FileMap
NamesToIndex	Engine/Collections.h	/^	class NamesToIndex$/;"	c	class:OpenXcom::Collections
Nautical	fmath.h	/^inline double Nautical(double x)$/;"	f
NewAlignedBuffer	Engine/Surface.cpp	/^Surface::UniqueBufferPtr Surface::NewAlignedBuffer(int bpp, int width, int height)$/;"	f	class:OpenXcom::Surface
NewBattleSelectType	Menu/NewBattleState.h	/^enum class NewBattleSelectType { MISSION = 0, TERRAIN, ALIENRACE };$/;"	c	namespace:OpenXcom
NewBattleState	Menu/NewBattleState.cpp	/^NewBattleState::NewBattleState() : _craft(0), _selectType(NewBattleSelectType::MISSION), _isRightClick(false)$/;"	f	class:OpenXcom::NewBattleState
NewBattleState	Menu/NewBattleState.h	/^class NewBattleState : public State$/;"	c	namespace:OpenXcom
NewGameState	Menu/NewGameState.cpp	/^NewGameState::NewGameState()$/;"	f	class:OpenXcom::NewGameState
NewGameState	Menu/NewGameState.h	/^class NewGameState : public State$/;"	c	namespace:OpenXcom
NewManufactureListState	Basescape/NewManufactureListState.cpp	/^NewManufactureListState::NewManufactureListState(Base *base) : _base(base), _showRequirements(false), _refreshCategories(true), _doInit(true), _lstScroll(0)$/;"	f	class:OpenXcom::NewManufactureListState
NewManufactureListState	Basescape/NewManufactureListState.h	/^class NewManufactureListState : public State$/;"	c	namespace:OpenXcom
NewPair32Bit	Engine/Surface.h	/^	static std::pair<UniqueBufferPtr, UniqueSurfacePtr> NewPair32Bit(int width, int height)$/;"	f	class:OpenXcom::Surface
NewPair8Bit	Engine/Surface.h	/^	static std::pair<UniqueBufferPtr, UniqueSurfacePtr> NewPair8Bit(int width, int height)$/;"	f	class:OpenXcom::Surface
NewPossibleCraftState	Geoscape/NewPossibleCraftState.cpp	/^NewPossibleCraftState::NewPossibleCraftState(Base * base, const std::vector<RuleCraft *> & possibilities) : _base(base)$/;"	f	class:OpenXcom::NewPossibleCraftState
NewPossibleCraftState	Geoscape/NewPossibleCraftState.h	/^class NewPossibleCraftState : public State$/;"	c	namespace:OpenXcom
NewPossibleFacilityState	Geoscape/NewPossibleFacilityState.cpp	/^NewPossibleFacilityState::NewPossibleFacilityState(Base *base, Globe *globe, const std::vector<RuleBaseFacility *> & possibilities) : _base(base), _globe(globe)$/;"	f	class:OpenXcom::NewPossibleFacilityState
NewPossibleFacilityState	Geoscape/NewPossibleFacilityState.h	/^class NewPossibleFacilityState : public State$/;"	c	namespace:OpenXcom
NewPossibleManufactureState	Geoscape/NewPossibleManufactureState.cpp	/^NewPossibleManufactureState::NewPossibleManufactureState(Base * base, const std::vector<RuleManufacture *> & possibilities) : _base(base)$/;"	f	class:OpenXcom::NewPossibleManufactureState
NewPossibleManufactureState	Geoscape/NewPossibleManufactureState.h	/^class NewPossibleManufactureState : public State$/;"	c	namespace:OpenXcom
NewPossiblePurchaseState	Geoscape/NewPossiblePurchaseState.cpp	/^NewPossiblePurchaseState::NewPossiblePurchaseState(Base * base, const std::vector<RuleItem *> & possibilities) : _base(base)$/;"	f	class:OpenXcom::NewPossiblePurchaseState
NewPossiblePurchaseState	Geoscape/NewPossiblePurchaseState.h	/^class NewPossiblePurchaseState : public State$/;"	c	namespace:OpenXcom
NewPossibleResearchState	Geoscape/NewPossibleResearchState.cpp	/^NewPossibleResearchState::NewPossibleResearchState(Base * base, const std::vector<RuleResearch *> & possibilities) : _base(base)$/;"	f	class:OpenXcom::NewPossibleResearchState
NewPossibleResearchState	Geoscape/NewPossibleResearchState.h	/^class NewPossibleResearchState : public State$/;"	c	namespace:OpenXcom
NewResearchListState	Basescape/NewResearchListState.cpp	/^NewResearchListState::NewResearchListState(Base *base, bool sortByCost) : _base(base), _sortByCost(sortByCost), _lstScroll(0)$/;"	f	class:OpenXcom::NewResearchListState
NewResearchListState	Basescape/NewResearchListState.h	/^class NewResearchListState : public State$/;"	c	namespace:OpenXcom
NewSdlSurface	Engine/Surface.cpp	/^Surface::UniqueSurfacePtr Surface::NewSdlSurface(SDL_Surface* surface)$/;"	f	class:OpenXcom::Surface
NewSdlSurface	Engine/Surface.cpp	/^Surface::UniqueSurfacePtr Surface::NewSdlSurface(const Surface::UniqueBufferPtr& buffer, int bpp, int width, int height)$/;"	f	class:OpenXcom::Surface
NewSound	Engine/Sound.cpp	/^Sound::UniqueSoundPtr Sound::NewSound(Mix_Chunk* sound)$/;"	f	class:OpenXcom::Sound
NewTurnItemParser	Mod/ModScript.h	/^	struct NewTurnItemParser : ScriptParserEvents<ScriptOutputArgs<>, BattleItem*, SavedBattleGame*, int, int>$/;"	s	class:OpenXcom::ModScript
NewTurnItemParser	Savegame/BattleItem.cpp	/^ModScript::NewTurnItemParser::NewTurnItemParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name, "item", "battle_game", "turn", "side", }$/;"	f	class:OpenXcom::ModScript::NewTurnItemParser
NewTurnUnitParser	Mod/ModScript.h	/^	struct NewTurnUnitParser : ScriptParserEvents<ScriptOutputArgs<>, BattleUnit*, SavedBattleGame*, int, int>$/;"	s	class:OpenXcom::ModScript
NewTurnUnitParser	Savegame/BattleUnit.cpp	/^ModScript::NewTurnUnitParser::NewTurnUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name, "unit", "battle_game", "turn", "side", }$/;"	f	class:OpenXcom::ModScript::NewTurnUnitParser
NextTurnState	Battlescape/NextTurnState.cpp	/^NextTurnState::NextTurnState(SavedBattleGame *battleGame, BattlescapeState *state) : _battleGame(battleGame), _state(state), _timer(0), _currentTurn(0), _showBriefing(false)$/;"	f	class:OpenXcom::NextTurnState
NextTurnState	Battlescape/NextTurnState.h	/^class NextTurnState : public State$/;"	c	namespace:OpenXcom
NoSingular	Engine/LanguagePlurality.cpp	/^class NoSingular : public LanguagePlurality$/;"	c	namespace:OpenXcom	file:
Node	Savegame/Node.cpp	/^Node::Node() : _id(0), _segment(0), _type(0), _rank(0), _flags(0), _reserved(0), _priority(0), _allocated(false), _dummy(false)$/;"	f	class:OpenXcom::Node
Node	Savegame/Node.cpp	/^Node::Node(int id, Position pos, int segment, int type, int rank, int flags, int reserved, int priority) : _id(id), _pos(pos), _segment(segment), _type(type), _rank(rank), _flags(flags), _reserved(reserved), _priority(priority), _allocated(false), _dummy(false)$/;"	f	class:OpenXcom::Node
Node	Savegame/Node.h	/^class Node$/;"	c	namespace:OpenXcom
NodeRank	Savegame/Node.h	/^enum NodeRank{NR_SCOUT=0, NR_XCOM, NR_SOLDIER, NR_NAVIGATOR, NR_LEADER, NR_ENGINEER, NR_MISC1, NR_MEDIC, NR_MISC2};$/;"	g	namespace:OpenXcom
NormalizedMovePhase	Battlescape/Map.h	/^	int NormalizedMovePhase;$/;"	m	struct:OpenXcom::UnitWalkingOffset
NotesState	Menu/NotesState.cpp	/^NotesState::NotesState(OptionsOrigin origin) : _origin(origin), _previousSelectedRow(-1), _selectedRow(-1)$/;"	f	class:OpenXcom::NotesState
NotesState	Menu/NotesState.h	/^class NotesState : public State$/;"	c	namespace:OpenXcom
NumberText	Interface/NumberText.cpp	/^NumberText::NumberText(int width, int height, int x, int y) : Surface(width, height, x, y), _value(0), _bordered(false), _color(0)$/;"	f	class:OpenXcom::NumberText
NumberText	Interface/NumberText.h	/^class NumberText : public Surface$/;"	c	namespace:OpenXcom
OBJECTIVE_BASE	Mod/RuleAlienMission.h	/^enum MissionObjective { OBJECTIVE_SCORE, OBJECTIVE_INFILTRATION, OBJECTIVE_BASE, OBJECTIVE_SITE, OBJECTIVE_RETALIATION, OBJECTIVE_SUPPLY, OBJECTIVE_INSTANT_RETALIATION };$/;"	e	enum:OpenXcom::MissionObjective
OBJECTIVE_INFILTRATION	Mod/RuleAlienMission.h	/^enum MissionObjective { OBJECTIVE_SCORE, OBJECTIVE_INFILTRATION, OBJECTIVE_BASE, OBJECTIVE_SITE, OBJECTIVE_RETALIATION, OBJECTIVE_SUPPLY, OBJECTIVE_INSTANT_RETALIATION };$/;"	e	enum:OpenXcom::MissionObjective
OBJECTIVE_INSTANT_RETALIATION	Mod/RuleAlienMission.h	/^enum MissionObjective { OBJECTIVE_SCORE, OBJECTIVE_INFILTRATION, OBJECTIVE_BASE, OBJECTIVE_SITE, OBJECTIVE_RETALIATION, OBJECTIVE_SUPPLY, OBJECTIVE_INSTANT_RETALIATION };$/;"	e	enum:OpenXcom::MissionObjective
OBJECTIVE_RETALIATION	Mod/RuleAlienMission.h	/^enum MissionObjective { OBJECTIVE_SCORE, OBJECTIVE_INFILTRATION, OBJECTIVE_BASE, OBJECTIVE_SITE, OBJECTIVE_RETALIATION, OBJECTIVE_SUPPLY, OBJECTIVE_INSTANT_RETALIATION };$/;"	e	enum:OpenXcom::MissionObjective
OBJECTIVE_SCORE	Mod/RuleAlienMission.h	/^enum MissionObjective { OBJECTIVE_SCORE, OBJECTIVE_INFILTRATION, OBJECTIVE_BASE, OBJECTIVE_SITE, OBJECTIVE_RETALIATION, OBJECTIVE_SUPPLY, OBJECTIVE_INSTANT_RETALIATION };$/;"	e	enum:OpenXcom::MissionObjective
OBJECTIVE_SITE	Mod/RuleAlienMission.h	/^enum MissionObjective { OBJECTIVE_SCORE, OBJECTIVE_INFILTRATION, OBJECTIVE_BASE, OBJECTIVE_SITE, OBJECTIVE_RETALIATION, OBJECTIVE_SUPPLY, OBJECTIVE_INSTANT_RETALIATION };$/;"	e	enum:OpenXcom::MissionObjective
OBJECTIVE_SUPPLY	Mod/RuleAlienMission.h	/^enum MissionObjective { OBJECTIVE_SCORE, OBJECTIVE_INFILTRATION, OBJECTIVE_BASE, OBJECTIVE_SITE, OBJECTIVE_RETALIATION, OBJECTIVE_SUPPLY, OBJECTIVE_INSTANT_RETALIATION };$/;"	e	enum:OpenXcom::MissionObjective
OCEAN_COLOR	Geoscape/Globe.cpp	/^Uint8 Globe::OCEAN_COLOR;$/;"	m	class:OpenXcom::Globe	file:
OCEAN_COLOR	Geoscape/Globe.h	/^	static Uint8 OCEAN_COLOR;$/;"	m	class:OpenXcom::Globe
OCEAN_SHADING	Geoscape/Globe.cpp	/^bool Globe::OCEAN_SHADING;$/;"	m	class:OpenXcom::Globe	file:
OCEAN_SHADING	Geoscape/Globe.h	/^	static bool OCEAN_SHADING;$/;"	m	class:OpenXcom::Globe
OPENXCOM_VERSION_ENGINE	version.h	21;"	d
OPENXCOM_VERSION_GIT	version.h	27;"	d
OPENXCOM_VERSION_LONG	version.h	23;"	d
OPENXCOM_VERSION_NUMBER	version.h	24;"	d
OPENXCOM_VERSION_SHORT	version.h	22;"	d
OPLCloseTable	Engine/Adlib/fmopl.cpp	/^static void OPLCloseTable( void )$/;"	f	file:
OPLCreate	Engine/Adlib/fmopl.cpp	/^FM_OPL *OPLCreate(int type, int clock, int rate)$/;"	f
OPLDestroy	Engine/Adlib/fmopl.cpp	/^void OPLDestroy(FM_OPL *OPL)$/;"	f
OPLOpenTable	Engine/Adlib/fmopl.cpp	/^static int OPLOpenTable( void )$/;"	f	file:
OPLRead	Engine/Adlib/fmopl.cpp	/^unsigned char OPLRead(FM_OPL *OPL,int a)$/;"	f
OPLResetChip	Engine/Adlib/fmopl.cpp	/^void OPLResetChip(FM_OPL *OPL)$/;"	f
OPLSAMPLE	Engine/Adlib/fmopl.h	/^typedef INT16 OPLSAMPLE;$/;"	t
OPLSAMPLE	Engine/Adlib/fmopl.h	/^typedef unsigned char  OPLSAMPLE;$/;"	t
OPLSetIRQHandler	Engine/Adlib/fmopl.cpp	/^void OPLSetIRQHandler(FM_OPL *OPL,OPL_IRQHANDLER IRQHandler,int param)$/;"	f
OPLSetKeyboardHandler	Engine/Adlib/fmopl.cpp	/^void OPLSetKeyboardHandler(FM_OPL *OPL,OPL_PORTHANDLER_W KeyboardHandler_w,OPL_PORTHANDLER_R KeyboardHandler_r,int param)$/;"	f
OPLSetPortHandler	Engine/Adlib/fmopl.cpp	/^void OPLSetPortHandler(FM_OPL *OPL,OPL_PORTHANDLER_W PortHandler_w,OPL_PORTHANDLER_R PortHandler_r,int param)$/;"	f
OPLSetTimerHandler	Engine/Adlib/fmopl.cpp	/^void OPLSetTimerHandler(FM_OPL *OPL,OPL_TIMERHANDLER TimerHandler,int channelOffset)$/;"	f
OPLSetUpdateHandler	Engine/Adlib/fmopl.cpp	/^void OPLSetUpdateHandler(FM_OPL *OPL,OPL_UPDATEHANDLER UpdateHandler,int param)$/;"	f
OPLTimerOver	Engine/Adlib/fmopl.cpp	/^int OPLTimerOver(FM_OPL *OPL,int c)$/;"	f
OPLWrite	Engine/Adlib/fmopl.cpp	/^int OPLWrite(FM_OPL *OPL,int a,int v)$/;"	f
OPLWriteReg	Engine/Adlib/fmopl.cpp	/^static void OPLWriteReg(FM_OPL *OPL, int r, int v)$/;"	f	file:
OPL_ARRATE	Engine/Adlib/fmopl.cpp	61;"	d	file:
OPL_CALC_CH	Engine/Adlib/fmopl.cpp	/^INLINE void OPL_CALC_CH( OPL_CH *CH )$/;"	f
OPL_CALC_RH	Engine/Adlib/fmopl.cpp	/^INLINE void OPL_CALC_RH( OPL_CH *CH )$/;"	f
OPL_CALC_SLOT	Engine/Adlib/fmopl.cpp	/^INLINE UINT32 OPL_CALC_SLOT( OPL_SLOT *SLOT )$/;"	f
OPL_CH	Engine/Adlib/fmopl.h	/^} OPL_CH;$/;"	t	typeref:struct:fm_opl_channel
OPL_DRRATE	Engine/Adlib/fmopl.cpp	62;"	d	file:
OPL_IRQHANDLER	Engine/Adlib/fmopl.h	/^typedef void (*OPL_IRQHANDLER)(int param,int irq);$/;"	t
OPL_KEYOFF	Engine/Adlib/fmopl.cpp	/^INLINE void OPL_KEYOFF(OPL_SLOT *SLOT)$/;"	f
OPL_KEYON	Engine/Adlib/fmopl.cpp	/^INLINE void OPL_KEYON(OPL_SLOT *SLOT)$/;"	f
OPL_LockTable	Engine/Adlib/fmopl.cpp	/^static int OPL_LockTable(void)$/;"	f	file:
OPL_MAXOUT	Engine/Adlib/fmopl.cpp	74;"	d	file:
OPL_MINOUT	Engine/Adlib/fmopl.cpp	75;"	d	file:
OPL_OUTPUT_BIT	Engine/Adlib/fmopl.h	10;"	d
OPL_OUTSB	Engine/Adlib/fmopl.cpp	73;"	d	file:
OPL_PORTHANDLER_R	Engine/Adlib/fmopl.h	/^typedef unsigned char (*OPL_PORTHANDLER_R)(int param);$/;"	t
OPL_PORTHANDLER_W	Engine/Adlib/fmopl.h	/^typedef void (*OPL_PORTHANDLER_W)(int param,unsigned char data);$/;"	t
OPL_SLOT	Engine/Adlib/fmopl.h	/^}OPL_SLOT;$/;"	t	typeref:struct:fm_opl_slot
OPL_STATUSMASK_SET	Engine/Adlib/fmopl.cpp	/^INLINE void OPL_STATUSMASK_SET(FM_OPL *OPL,int flag)$/;"	f
OPL_STATUS_RESET	Engine/Adlib/fmopl.cpp	/^INLINE void OPL_STATUS_RESET(FM_OPL *OPL,int flag)$/;"	f
OPL_STATUS_SET	Engine/Adlib/fmopl.cpp	/^INLINE void OPL_STATUS_SET(FM_OPL *OPL,int flag)$/;"	f
OPL_TIMERHANDLER	Engine/Adlib/fmopl.h	/^typedef void (*OPL_TIMERHANDLER)(int channel,double interval_Sec);$/;"	t
OPL_TYPE_ADPCM	Engine/Adlib/fmopl.h	44;"	d
OPL_TYPE_IO	Engine/Adlib/fmopl.h	46;"	d
OPL_TYPE_KEYBOARD	Engine/Adlib/fmopl.h	45;"	d
OPL_TYPE_WAVESEL	Engine/Adlib/fmopl.h	43;"	d
OPL_TYPE_Y8950	Engine/Adlib/fmopl.h	152;"	d
OPL_TYPE_YM3526	Engine/Adlib/fmopl.h	150;"	d
OPL_TYPE_YM3812	Engine/Adlib/fmopl.h	151;"	d
OPL_UPDATEHANDLER	Engine/Adlib/fmopl.h	/^typedef void (*OPL_UPDATEHANDLER)(int param,int min_interval_us);$/;"	t
OPL_UnLockTable	Engine/Adlib/fmopl.cpp	/^static void OPL_UnLockTable(void)$/;"	f	file:
OPL_initalize	Engine/Adlib/fmopl.cpp	/^static void OPL_initalize(FM_OPL *OPL)$/;"	f	file:
OPT	Engine/Options.cpp	43;"	d	file:
OPT	Engine/Options.cpp	45;"	d	file:
OPT	Engine/Options.h	72;"	d
OPT	Engine/Options.h	74;"	d
OPTION_BOOL	Engine/OptionInfo.h	/^enum OptionType { OPTION_BOOL, OPTION_INT, OPTION_STRING, OPTION_KEY };$/;"	e	enum:OpenXcom::OptionType
OPTION_INT	Engine/OptionInfo.h	/^enum OptionType { OPTION_BOOL, OPTION_INT, OPTION_STRING, OPTION_KEY };$/;"	e	enum:OpenXcom::OptionType
OPTION_KEY	Engine/OptionInfo.h	/^enum OptionType { OPTION_BOOL, OPTION_INT, OPTION_STRING, OPTION_KEY };$/;"	e	enum:OpenXcom::OptionType
OPTION_STRING	Engine/OptionInfo.h	/^enum OptionType { OPTION_BOOL, OPTION_INT, OPTION_STRING, OPTION_KEY };$/;"	e	enum:OpenXcom::OptionType
OPT_BATTLESCAPE	Menu/OptionsBaseState.h	/^	OPT_BATTLESCAPE$/;"	e	enum:OpenXcom::OptionsOrigin
OPT_GEOSCAPE	Menu/OptionsBaseState.h	/^	OPT_GEOSCAPE,$/;"	e	enum:OpenXcom::OptionsOrigin
OPT_MENU	Menu/OptionsBaseState.h	/^	OPT_MENU,$/;"	e	enum:OpenXcom::OptionsOrigin
OP_OUT	Engine/Adlib/fmopl.cpp	457;"	d	file:
ORIGINAL_HEIGHT	Engine/Screen.cpp	/^const int Screen::ORIGINAL_HEIGHT = 200;$/;"	m	class:OpenXcom::Screen	file:
ORIGINAL_HEIGHT	Engine/Screen.h	/^	static const int ORIGINAL_HEIGHT;$/;"	m	class:OpenXcom::Screen
ORIGINAL_WIDTH	Engine/Screen.cpp	/^const int Screen::ORIGINAL_WIDTH = 320;$/;"	m	class:OpenXcom::Screen	file:
ORIGINAL_WIDTH	Engine/Screen.h	/^	static const int ORIGINAL_WIDTH;$/;"	m	class:OpenXcom::Screen
OSD_CPU_H	Engine/Adlib/fmopl.h	14;"	d
OX_REQUIRED_RESULT	Engine/LocalizedText.h	/^	LocalizedText &arg(const std::string &) OX_REQUIRED_RESULT;$/;"	m	class:OpenXcom::LocalizedText
OX_REQUIRED_RESULT	Engine/LocalizedText.h	/^	LocalizedText arg(const std::string &) const OX_REQUIRED_RESULT;$/;"	m	class:OpenXcom::LocalizedText
OX_REQUIRED_RESULT	Engine/LocalizedText.h	/^	operator std::string const&() const OX_REQUIRED_RESULT;$/;"	m	class:OpenXcom::LocalizedText
OX_REQUIRED_RESULT	Engine/LocalizedText.h	/^	template <typename T> LocalizedText &arg(T) OX_REQUIRED_RESULT;$/;"	m	class:OpenXcom::LocalizedText
OX_REQUIRED_RESULT	Engine/LocalizedText.h	/^	template <typename T> LocalizedText arg(T) const OX_REQUIRED_RESULT;$/;"	m	class:OpenXcom::LocalizedText
OX_REQUIRED_RESULT	Engine/LocalizedText.h	31;"	d
OX_REQUIRED_RESULT	Engine/LocalizedText.h	33;"	d
O_BIGWALL	Battlescape/Pathfinding.h	/^	static const int O_BIGWALL = -1;$/;"	m	class:OpenXcom::Pathfinding
O_DUMMY	Mod/MapData.h	/^	static const int O_DUMMY = 999;$/;"	m	class:OpenXcom::MapData
ObjectPointer	Engine/OpenGL.cpp	/^	void *ObjectPointer;$/;"	m	union:OpenXcom::__anon6	file:
Ocean	Geoscape/Globe.cpp	/^struct Ocean$/;"	s	namespace:OpenXcom::__anon49	file:
OneSingular	Engine/LanguagePlurality.cpp	/^class OneSingular: public LanguagePlurality$/;"	c	namespace:OpenXcom	file:
OnlyGet	Engine/ScriptBind.h	/^	struct OnlyGet{};$/;"	s	struct:OpenXcom::BindBase
OpenGL	Engine/OpenGL.cpp	/^  OpenGL::OpenGL() : gltexture(0), glprogram(0), linear(false), shader_support(false),$/;"	f	class:OpenXcom::OpenGL
OpenGL	Engine/OpenGL.h	/^class OpenGL {$/;"	c	namespace:OpenXcom
OpenSetEntry	Battlescape/PathfindingOpenSet.h	/^struct OpenSetEntry$/;"	s	namespace:OpenXcom
OpenXcom	Basescape/BaseInfoState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/BaseInfoState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/BaseView.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/BaseView.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/BasescapeState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/BasescapeState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/BuildFacilitiesState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/BuildFacilitiesState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/CraftArmorState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/CraftArmorState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/CraftEquipmentLoadState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/CraftEquipmentLoadState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/CraftEquipmentSaveState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/CraftEquipmentSaveState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/CraftEquipmentState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/CraftEquipmentState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/CraftInfoState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/CraftInfoState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/CraftPilotSelectState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/CraftPilotSelectState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/CraftPilotsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/CraftPilotsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/CraftSoldiersState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/CraftSoldiersState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/CraftWeaponsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/CraftWeaponsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/CraftsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/CraftsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/DismantleFacilityState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/DismantleFacilityState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/GlobalManufactureState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/GlobalManufactureState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/GlobalResearchState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/GlobalResearchState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/ManageAlienContainmentState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/ManageAlienContainmentState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/ManufactureDependenciesTreeState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/ManufactureDependenciesTreeState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/ManufactureInfoState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/ManufactureInfoState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/ManufactureStartState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/ManufactureStartState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/ManufactureState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/ManufactureState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/MiniBaseView.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/MiniBaseView.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/MonthlyCostsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/MonthlyCostsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/NewManufactureListState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/NewManufactureListState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/NewResearchListState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/NewResearchListState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/PlaceFacilityState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/PlaceFacilityState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/PlaceLiftState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/PlaceLiftState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/PlaceStartFacilityState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/PlaceStartFacilityState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/PurchaseState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/PurchaseState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/ResearchInfoState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/ResearchInfoState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/ResearchState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/ResearchState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SackSoldierState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SackSoldierState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SelectStartFacilityState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SelectStartFacilityState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SellState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SellState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SoldierArmorState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SoldierArmorState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SoldierAvatarState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SoldierAvatarState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SoldierBonusState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SoldierBonusState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SoldierDiaryMissionState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SoldierDiaryMissionState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SoldierDiaryOverviewState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SoldierDiaryOverviewState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SoldierDiaryPerformanceState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SoldierDiaryPerformanceState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SoldierInfoState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SoldierInfoState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SoldierMemorialState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SoldierMemorialState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SoldierSortUtil.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SoldierTransformationListState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SoldierTransformationListState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SoldierTransformationState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SoldierTransformationState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/SoldiersState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/SoldiersState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/StoresState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/StoresState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/TechTreeSelectState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/TechTreeSelectState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/TechTreeViewerState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/TechTreeViewerState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/TransferBaseState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/TransferBaseState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/TransferConfirmState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/TransferConfirmState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/TransferItemsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/TransferItemsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Basescape/TransfersState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Basescape/TransfersState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/AIModule.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/AIModule.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/AbortMissionState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/AbortMissionState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/ActionMenuItem.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/ActionMenuItem.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/ActionMenuState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/ActionMenuState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/AlienInventory.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/AlienInventory.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/AlienInventoryState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/AlienInventoryState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/AliensCrashState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/AliensCrashState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/BattleState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/BattleState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/BattlescapeGame.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/BattlescapeGame.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/BattlescapeGenerator.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/BattlescapeGenerator.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/BattlescapeMessage.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/BattlescapeMessage.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/BattlescapeState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/BattlescapeState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/BriefingLightState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/BriefingLightState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/BriefingState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/BriefingState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/Camera.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/Camera.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/CannotReequipState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/CannotReequipState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/CommendationLateState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/CommendationLateState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/CommendationState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/CommendationState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/ConfirmEndMissionState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/ConfirmEndMissionState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/DebriefingState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/DebriefingState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/Explosion.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/Explosion.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/ExplosionBState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/ExplosionBState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/ExtendedBattlescapeLinksState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/ExtendedBattlescapeLinksState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/ExtendedInventoryLinksState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/ExtendedInventoryLinksState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/InfoboxOKState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/InfoboxOKState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/InfoboxState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/InfoboxState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/Inventory.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/Inventory.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/InventoryLoadState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/InventoryLoadState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/InventoryPersonalState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/InventoryPersonalState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/InventorySaveState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/InventorySaveState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/InventoryState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/InventoryState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/ItemSprite.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/ItemSprite.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/Map.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/Map.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/MedikitState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/MedikitState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/MedikitView.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/MedikitView.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/MeleeAttackBState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/MeleeAttackBState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/MiniMapState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/MiniMapState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/MiniMapView.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/MiniMapView.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/NextTurnState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/NextTurnState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/Particle.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/Particle.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/Pathfinding.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/Pathfinding.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/PathfindingNode.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/PathfindingNode.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/PathfindingOpenSet.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/PathfindingOpenSet.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/Position.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/PrimeGrenadeState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/PrimeGrenadeState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/Projectile.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/Projectile.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/ProjectileFlyBState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/ProjectileFlyBState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/PromotionsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/PromotionsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/PsiAttackBState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/PsiAttackBState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/ScannerState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/ScannerState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/ScannerView.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/ScannerView.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/SkillMenuState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/SkillMenuState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/TileEngine.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/TileEngine.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/TurnDiaryState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/TurnDiaryState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/UnitDieBState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/UnitDieBState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/UnitFallBState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/UnitFallBState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/UnitInfoState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/UnitInfoState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/UnitPanicBState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/UnitPanicBState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/UnitSprite.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/UnitSprite.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/UnitTurnBState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/UnitTurnBState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/UnitWalkBState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/UnitWalkBState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Battlescape/WarningMessage.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Battlescape/WarningMessage.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Action.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Action.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/AdlibMusic.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/AdlibMusic.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/CatFile.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/CatFile.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Collections.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/CrossPlatform.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/CrossPlatform.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Exception.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/FastLineClip.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/FastLineClip.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/FileMap.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/FileMap.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/FlcPlayer.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/FlcPlayer.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Font.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Font.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Functions.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/GMCat.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/GMCat.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Game.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Game.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/GraphSubset.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/HelperMeta.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/InteractiveSurface.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/InteractiveSurface.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Language.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Language.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/LanguagePlurality.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/LanguagePlurality.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/LocalizedText.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/LocalizedText.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Logger.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/ModInfo.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/ModInfo.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Music.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Music.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/OpenGL.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/OpenGL.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/OptionInfo.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/OptionInfo.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Options.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Options.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Palette.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Palette.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/RNG.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/RNG.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Screen.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Screen.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Script.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Script.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/ScriptBind.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/ShaderDraw.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/ShaderDrawHelper.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/ShaderMove.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/ShaderRepeat.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Sound.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Sound.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/SoundSet.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/SoundSet.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/State.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/State.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Surface.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Surface.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/SurfaceSet.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/SurfaceSet.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Timer.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Timer.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Unicode.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Unicode.h	/^namespace OpenXcom$/;"	n
OpenXcom	Engine/Zoom.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Engine/Zoom.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/AlienBaseState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/AlienBaseState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/AllocatePsiTrainingState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/AllocatePsiTrainingState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/AllocateTrainingState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/AllocateTrainingState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/BaseDefenseState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/BaseDefenseState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/BaseDestroyedState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/BaseDestroyedState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/BaseNameState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/BaseNameState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/BuildNewBaseState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/BuildNewBaseState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/ConfirmCydoniaState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/ConfirmCydoniaState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/ConfirmDestinationState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/ConfirmDestinationState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/ConfirmLandingState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/ConfirmLandingState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/ConfirmNewBaseState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/ConfirmNewBaseState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/Cord.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/CraftErrorState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/CraftErrorState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/CraftNotEnoughPilotsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/CraftNotEnoughPilotsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/CraftPatrolState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/CraftPatrolState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/DogfightErrorState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/DogfightErrorState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/DogfightExperienceState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/DogfightExperienceState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/DogfightState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/DogfightState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/ExtendedGeoscapeLinksState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/ExtendedGeoscapeLinksState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/FundingState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/FundingState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/GeoscapeCraftState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/GeoscapeCraftState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/GeoscapeEventState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/GeoscapeEventState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/GeoscapeState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/GeoscapeState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/Globe.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/Globe.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/GraphsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/GraphsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/InterceptState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/InterceptState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/ItemsArrivingState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/ItemsArrivingState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/LowFuelState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/LowFuelState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/MissionDetectedState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/MissionDetectedState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/MonthlyReportState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/MonthlyReportState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/MultipleTargetsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/MultipleTargetsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/NewPossibleCraftState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/NewPossibleCraftState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/NewPossibleFacilityState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/NewPossibleFacilityState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/NewPossibleManufactureState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/NewPossibleManufactureState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/NewPossiblePurchaseState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/NewPossiblePurchaseState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/NewPossibleResearchState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/NewPossibleResearchState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/ProductionCompleteState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/ProductionCompleteState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/PsiTrainingState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/PsiTrainingState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/ResearchCompleteState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/ResearchCompleteState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/ResearchRequiredState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/ResearchRequiredState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/SelectDestinationState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/SelectDestinationState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/SelectMusicTrackState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/SelectMusicTrackState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/TargetInfoState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/TargetInfoState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/TrainingFinishedState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/TrainingFinishedState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/TrainingState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/TrainingState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/UfoDetectedState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/UfoDetectedState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/UfoLostState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/UfoLostState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Geoscape/UfoTrackerState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Geoscape/UfoTrackerState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/ArrowButton.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/ArrowButton.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/Bar.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/Bar.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/BattlescapeButton.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/BattlescapeButton.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/ComboBox.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/ComboBox.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/Cursor.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/Cursor.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/FpsCounter.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/FpsCounter.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/Frame.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/Frame.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/ImageButton.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/ImageButton.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/NumberText.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/NumberText.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/ScrollBar.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/ScrollBar.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/Slider.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/Slider.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/Text.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/Text.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/TextButton.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/TextButton.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/TextEdit.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/TextEdit.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/TextList.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/TextList.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/ToggleTextButton.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/ToggleTextButton.h	/^namespace OpenXcom$/;"	n
OpenXcom	Interface/Window.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Interface/Window.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/AbandonGameState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/AbandonGameState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/ConfirmLoadState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/ConfirmLoadState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/CutsceneState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/CutsceneState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/DeleteGameState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/DeleteGameState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/ErrorMessageState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/ErrorMessageState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/ListGamesState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/ListGamesState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/ListLoadOriginalState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/ListLoadOriginalState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/ListLoadState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/ListLoadState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/ListSaveState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/ListSaveState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/LoadGameState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/LoadGameState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/MainMenuState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/MainMenuState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/ModConfirmExtendedState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/ModConfirmExtendedState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/ModListState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/ModListState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/NewBattleState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/NewBattleState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/NewGameState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/NewGameState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/NotesState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/NotesState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/OptionsAdvancedState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/OptionsAdvancedState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/OptionsAudioState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/OptionsAudioState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/OptionsBaseState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/OptionsBaseState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/OptionsBattlescapeState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/OptionsBattlescapeState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/OptionsConfirmState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/OptionsConfirmState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/OptionsControlsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/OptionsControlsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/OptionsDefaultsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/OptionsDefaultsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/OptionsFoldersState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/OptionsFoldersState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/OptionsGeoscapeState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/OptionsGeoscapeState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/OptionsNoAudioState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/OptionsNoAudioState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/OptionsVideoState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/OptionsVideoState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/PauseState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/PauseState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/SaveGameState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/SaveGameState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/SetWindowedRootState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/SetWindowedRootState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/SlideshowState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/SlideshowState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/StartState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/StartState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/StatisticsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/StatisticsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/TestPaletteState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/TestPaletteState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/TestState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/TestState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Menu/VideoState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Menu/VideoState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/AlienDeployment.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/AlienDeployment.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/AlienRace.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/AlienRace.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/Armor.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/Armor.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/ArticleDefinition.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/ArticleDefinition.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/City.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/City.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/CustomPalettes.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/CustomPalettes.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/ExtraSounds.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/ExtraSounds.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/ExtraSprites.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/ExtraSprites.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/ExtraStrings.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/ExtraStrings.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/MCDPatch.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/MCDPatch.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/MapBlock.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/MapBlock.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/MapData.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/MapData.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/MapDataSet.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/MapDataSet.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/MapScript.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/MapScript.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/Mod.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/Mod.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/ModScript.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/Polygon.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/Polygon.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/Polyline.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/Polyline.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleAlienMission.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleAlienMission.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleArcScript.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleArcScript.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleBaseFacility.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleBaseFacility.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleBaseFacilityFunctions.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleCommendations.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleCommendations.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleConverter.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleConverter.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleCountry.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleCountry.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleCraft.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleCraft.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleCraftWeapon.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleCraftWeapon.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleDamageType.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleDamageType.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleEnviroEffects.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleEnviroEffects.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleEvent.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleEvent.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleEventScript.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleEventScript.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleGlobe.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleGlobe.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleInterface.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleInterface.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleInventory.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleInventory.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleItem.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleItem.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleItemCategory.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleItemCategory.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleManufacture.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleManufacture.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleManufactureShortcut.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleManufactureShortcut.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleMissionScript.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleMissionScript.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleMusic.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleMusic.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleRegion.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleRegion.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleResearch.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleResearch.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleSkill.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleSkill.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleSoldier.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleSoldier.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleSoldierBonus.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleSoldierBonus.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleSoldierTransformation.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleSoldierTransformation.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleStartingCondition.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleStartingCondition.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleStatBonus.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleStatBonus.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleTerrain.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleTerrain.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleUfo.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleUfo.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/RuleVideo.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/RuleVideo.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/SoldierNamePool.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/SoldierNamePool.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/SoundDefinition.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/SoundDefinition.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/StatString.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/StatString.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/StatStringCondition.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/StatStringCondition.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/Texture.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/Texture.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/UfoTrajectory.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/UfoTrajectory.h	/^namespace OpenXcom$/;"	n
OpenXcom	Mod/Unit.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Mod/Unit.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/AlienBase.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/AlienBase.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/AlienMission.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/AlienMission.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/AlienStrategy.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/AlienStrategy.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Base.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Base.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/BaseFacility.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/BaseFacility.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/BattleItem.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/BattleItem.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/BattleUnit.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/BattleUnit.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/BattleUnitStatistics.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Country.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Country.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Craft.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Craft.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/CraftWeapon.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/CraftWeapon.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/CraftWeaponProjectile.cpp	/^namespace OpenXcom {$/;"	n	file:
OpenXcom	Savegame/CraftWeaponProjectile.h	/^namespace OpenXcom {$/;"	n
OpenXcom	Savegame/EquipmentLayoutItem.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/EquipmentLayoutItem.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/GameTime.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/GameTime.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/GeoscapeEvent.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/GeoscapeEvent.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/HitLog.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/HitLog.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/ItemContainer.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/ItemContainer.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/MissionSite.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/MissionSite.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/MissionStatistics.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/MovingTarget.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/MovingTarget.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Node.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Node.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Production.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Production.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Region.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Region.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/ResearchProject.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/ResearchProject.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/SaveConverter.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/SaveConverter.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/SavedBattleGame.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/SavedBattleGame.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/SavedGame.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/SavedGame.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/SerializationHelper.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/SerializationHelper.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Soldier.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Soldier.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/SoldierAvatar.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/SoldierAvatar.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/SoldierDeath.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/SoldierDeath.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/SoldierDiary.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/SoldierDiary.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Target.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Target.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Tile.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Tile.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Transfer.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Transfer.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Ufo.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Ufo.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Vehicle.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Vehicle.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/Waypoint.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/Waypoint.h	/^namespace OpenXcom$/;"	n
OpenXcom	Savegame/WeightedOptions.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Savegame/WeightedOptions.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateArmor.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateArmor.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateBaseFacility.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateBaseFacility.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateCraft.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateCraft.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateCraftWeapon.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateCraftWeapon.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateItem.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateItem.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateTFTD.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateTFTD.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateTFTDArmor.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateTFTDArmor.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateTFTDCraft.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateTFTDCraft.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateTFTDCraftWeapon.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateTFTDCraftWeapon.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateTFTDFacility.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateTFTDFacility.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateTFTDItem.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateTFTDItem.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateTFTDUso.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateTFTDUso.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateTFTDVehicle.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateTFTDVehicle.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateText.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateText.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateTextImage.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateTextImage.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateUfo.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateUfo.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/ArticleStateVehicle.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/ArticleStateVehicle.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/StatsForNerdsState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/StatsForNerdsState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/Ufopaedia.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/Ufopaedia.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/UfopaediaSelectState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/UfopaediaSelectState.h	/^namespace OpenXcom$/;"	n
OpenXcom	Ufopaedia/UfopaediaStartState.cpp	/^namespace OpenXcom$/;"	n	file:
OpenXcom	Ufopaedia/UfopaediaStartState.h	/^namespace OpenXcom$/;"	n
OpenXcom	main.cpp	/^namespace OpenXcom$/;"	n	file:
OptionInfo	Engine/OptionInfo.cpp	/^OptionInfo::OptionInfo(const std::string &id, SDLKey *option, SDLKey def, const std::string &desc, const std::string &cat) : _id(id), _desc(desc), _cat(cat), _type(OPTION_KEY)$/;"	f	class:OpenXcom::OptionInfo
OptionInfo	Engine/OptionInfo.cpp	/^OptionInfo::OptionInfo(const std::string &id, bool *option, bool def, const std::string &desc, const std::string &cat) : _id(id), _desc(desc), _cat(cat), _type(OPTION_BOOL)$/;"	f	class:OpenXcom::OptionInfo
OptionInfo	Engine/OptionInfo.cpp	/^OptionInfo::OptionInfo(const std::string &id, int *option, int def, const std::string &desc, const std::string &cat) : _id(id), _desc(desc), _cat(cat), _type(OPTION_INT)$/;"	f	class:OpenXcom::OptionInfo
OptionInfo	Engine/OptionInfo.cpp	/^OptionInfo::OptionInfo(const std::string &id, std::string *option, const char *def, const std::string &desc, const std::string &cat) : _id(id), _desc(desc), _cat(cat), _type(OPTION_STRING)$/;"	f	class:OpenXcom::OptionInfo
OptionInfo	Engine/OptionInfo.h	/^class OptionInfo$/;"	c	namespace:OpenXcom
OptionType	Engine/OptionInfo.h	/^enum OptionType { OPTION_BOOL, OPTION_INT, OPTION_STRING, OPTION_KEY };$/;"	g	namespace:OpenXcom
Options	Engine/Options.cpp	/^namespace Options$/;"	n	namespace:OpenXcom	file:
Options	Engine/Options.h	/^namespace Options$/;"	n	namespace:OpenXcom
OptionsAdvancedState	Menu/OptionsAdvancedState.cpp	/^OptionsAdvancedState::OptionsAdvancedState(OptionsOrigin origin) : OptionsBaseState(origin)$/;"	f	class:OpenXcom::OptionsAdvancedState
OptionsAdvancedState	Menu/OptionsAdvancedState.h	/^class OptionsAdvancedState : public OptionsBaseState$/;"	c	namespace:OpenXcom
OptionsAudioState	Menu/OptionsAudioState.cpp	/^OptionsAudioState::OptionsAudioState(OptionsOrigin origin) : OptionsBaseState(origin)$/;"	f	class:OpenXcom::OptionsAudioState
OptionsAudioState	Menu/OptionsAudioState.h	/^class OptionsAudioState : public OptionsBaseState$/;"	c	namespace:OpenXcom
OptionsBaseState	Menu/OptionsBaseState.cpp	/^OptionsBaseState::OptionsBaseState(OptionsOrigin origin) : _origin(origin), _group(0)$/;"	f	class:OpenXcom::OptionsBaseState
OptionsBaseState	Menu/OptionsBaseState.h	/^class OptionsBaseState : public State$/;"	c	namespace:OpenXcom
OptionsBattlescapeState	Menu/OptionsBattlescapeState.cpp	/^OptionsBattlescapeState::OptionsBattlescapeState(OptionsOrigin origin) : OptionsBaseState(origin)$/;"	f	class:OpenXcom::OptionsBattlescapeState
OptionsBattlescapeState	Menu/OptionsBattlescapeState.h	/^class OptionsBattlescapeState : public OptionsBaseState$/;"	c	namespace:OpenXcom
OptionsConfirmState	Menu/OptionsConfirmState.cpp	/^OptionsConfirmState::OptionsConfirmState(OptionsOrigin origin) : _origin(origin), _countdown(15)$/;"	f	class:OpenXcom::OptionsConfirmState
OptionsConfirmState	Menu/OptionsConfirmState.h	/^class OptionsConfirmState : public State$/;"	c	namespace:OpenXcom
OptionsControlsState	Menu/OptionsControlsState.cpp	/^OptionsControlsState::OptionsControlsState(OptionsOrigin origin) : OptionsBaseState(origin), _selected(-1), _selKey(0)$/;"	f	class:OpenXcom::OptionsControlsState
OptionsControlsState	Menu/OptionsControlsState.h	/^class OptionsControlsState : public OptionsBaseState$/;"	c	namespace:OpenXcom
OptionsDefaultsState	Menu/OptionsDefaultsState.cpp	/^OptionsDefaultsState::OptionsDefaultsState(OptionsOrigin origin, OptionsBaseState *state) : _origin(origin), _state(state)$/;"	f	class:OpenXcom::OptionsDefaultsState
OptionsDefaultsState	Menu/OptionsDefaultsState.h	/^class OptionsDefaultsState : public State$/;"	c	namespace:OpenXcom
OptionsFoldersState	Menu/OptionsFoldersState.cpp	/^OptionsFoldersState::OptionsFoldersState(OptionsOrigin origin) : OptionsBaseState(origin)$/;"	f	class:OpenXcom::OptionsFoldersState
OptionsFoldersState	Menu/OptionsFoldersState.h	/^class OptionsFoldersState : public OptionsBaseState$/;"	c	namespace:OpenXcom
OptionsGeoscapeState	Menu/OptionsGeoscapeState.cpp	/^OptionsGeoscapeState::OptionsGeoscapeState(OptionsOrigin origin) : OptionsBaseState(origin)$/;"	f	class:OpenXcom::OptionsGeoscapeState
OptionsGeoscapeState	Menu/OptionsGeoscapeState.h	/^class OptionsGeoscapeState : public OptionsBaseState$/;"	c	namespace:OpenXcom
OptionsNoAudioState	Menu/OptionsNoAudioState.cpp	/^OptionsNoAudioState::OptionsNoAudioState(OptionsOrigin origin) : OptionsBaseState(origin)$/;"	f	class:OpenXcom::OptionsNoAudioState
OptionsNoAudioState	Menu/OptionsNoAudioState.h	/^class OptionsNoAudioState : public OptionsBaseState$/;"	c	namespace:OpenXcom
OptionsOrigin	Menu/OptionsBaseState.h	/^enum OptionsOrigin$/;"	g	namespace:OpenXcom
OptionsVideoState	Menu/OptionsVideoState.cpp	/^OptionsVideoState::OptionsVideoState(OptionsOrigin origin) : OptionsBaseState(origin)$/;"	f	class:OpenXcom::OptionsVideoState
OptionsVideoState	Menu/OptionsVideoState.h	/^class OptionsVideoState : public OptionsBaseState$/;"	c	namespace:OpenXcom
OutputMatrix	Engine/Scalers/xbrz.cpp	/^    OutputMatrix(uint32_t* out, int outWidth) : \/\/access matrix area, top-left at position "out" for image with given width$/;"	f	class:__anon10::OutputMatrix
OutputMatrix	Engine/Scalers/xbrz.cpp	/^class OutputMatrix$/;"	c	namespace:__anon10	file:
OverkillMultipler	Mod/Unit.h	/^	constexpr static int OverkillMultipler = 4;$/;"	m	struct:OpenXcom::UnitStats
PACKETS_COUNT	Engine/FlcPlayer.cpp	/^	PACKETS_COUNT = 0x0000, \/\/ 0000000000000000$/;"	e	enum:OpenXcom::ChunkOpcodes	file:
PAPERDOLL_H	Mod/RuleInventory.h	/^	static const int PAPERDOLL_H = 70;$/;"	m	class:OpenXcom::RuleInventory
PAPERDOLL_W	Mod/RuleInventory.h	/^	static const int PAPERDOLL_W = 40;$/;"	m	class:OpenXcom::RuleInventory
PAPERDOLL_X	Mod/RuleInventory.h	/^	static const int PAPERDOLL_X = 60;$/;"	m	class:OpenXcom::RuleInventory
PAPERDOLL_Y	Mod/RuleInventory.h	/^	static const int PAPERDOLL_Y = 65;$/;"	m	class:OpenXcom::RuleInventory
PARTS_STRING	Battlescape/MedikitView.cpp	/^const std::string PARTS_STRING[6] =$/;"	m	namespace:OpenXcom	file:
PATH_ARROWS	Engine/Options.h	/^	PATH_ARROWS       = 0x01, \/\/ 0001$/;"	e	enum:OpenXcom::PathPreview
PATH_ARROW_ENERGY	Engine/Options.h	/^	PATH_ARROW_ENERGY = 0x05, \/\/ 0101$/;"	e	enum:OpenXcom::PathPreview
PATH_ARROW_TU	Engine/Options.h	/^	PATH_ARROW_TU     = 0x03, \/\/ 0011$/;"	e	enum:OpenXcom::PathPreview
PATH_ENERGY_COST	Engine/Options.h	/^	PATH_ENERGY_COST  = 0x04, \/\/ 0100$/;"	e	enum:OpenXcom::PathPreview
PATH_FULL	Engine/Options.h	/^	PATH_FULL         = 0x07  \/\/ 0111 (must always be all values combined)$/;"	e	enum:OpenXcom::PathPreview
PATH_NONE	Engine/Options.h	/^	PATH_NONE         = 0x00, \/\/ 0000 (must always be zero)$/;"	e	enum:OpenXcom::PathPreview
PATH_TU_COST	Engine/Options.h	/^	PATH_TU_COST      = 0x02, \/\/ 0010$/;"	e	enum:OpenXcom::PathPreview
PATH_TU_ENERGY	Engine/Options.h	/^	PATH_TU_ENERGY    = 0x06, \/\/ 0110$/;"	e	enum:OpenXcom::PathPreview
PAT_BIG_HIGH	Menu/TestPaletteState.h	/^enum PaletteActionType { PAT_PREVIEW, PAT_TINY_BORDERLESS, PAT_TINY_BORDER, PAT_SMALL_LOW, PAT_SMALL_HIGH, PAT_BIG_LOW, PAT_BIG_HIGH };$/;"	e	enum:OpenXcom::PaletteActionType
PAT_BIG_LOW	Menu/TestPaletteState.h	/^enum PaletteActionType { PAT_PREVIEW, PAT_TINY_BORDERLESS, PAT_TINY_BORDER, PAT_SMALL_LOW, PAT_SMALL_HIGH, PAT_BIG_LOW, PAT_BIG_HIGH };$/;"	e	enum:OpenXcom::PaletteActionType
PAT_PREVIEW	Menu/TestPaletteState.h	/^enum PaletteActionType { PAT_PREVIEW, PAT_TINY_BORDERLESS, PAT_TINY_BORDER, PAT_SMALL_LOW, PAT_SMALL_HIGH, PAT_BIG_LOW, PAT_BIG_HIGH };$/;"	e	enum:OpenXcom::PaletteActionType
PAT_SMALL_HIGH	Menu/TestPaletteState.h	/^enum PaletteActionType { PAT_PREVIEW, PAT_TINY_BORDERLESS, PAT_TINY_BORDER, PAT_SMALL_LOW, PAT_SMALL_HIGH, PAT_BIG_LOW, PAT_BIG_HIGH };$/;"	e	enum:OpenXcom::PaletteActionType
PAT_SMALL_LOW	Menu/TestPaletteState.h	/^enum PaletteActionType { PAT_PREVIEW, PAT_TINY_BORDERLESS, PAT_TINY_BORDER, PAT_SMALL_LOW, PAT_SMALL_HIGH, PAT_BIG_LOW, PAT_BIG_HIGH };$/;"	e	enum:OpenXcom::PaletteActionType
PAT_TINY_BORDER	Menu/TestPaletteState.h	/^enum PaletteActionType { PAT_PREVIEW, PAT_TINY_BORDERLESS, PAT_TINY_BORDER, PAT_SMALL_LOW, PAT_SMALL_HIGH, PAT_BIG_LOW, PAT_BIG_HIGH };$/;"	e	enum:OpenXcom::PaletteActionType
PAT_TINY_BORDERLESS	Menu/TestPaletteState.h	/^enum PaletteActionType { PAT_PREVIEW, PAT_TINY_BORDERLESS, PAT_TINY_BORDER, PAT_SMALL_LOW, PAT_SMALL_HIGH, PAT_BIG_LOW, PAT_BIG_HIGH };$/;"	e	enum:OpenXcom::PaletteActionType
PEDIA_STATUS_NEW	Mod/ArticleDefinition.h	/^		static const int PEDIA_STATUS_NEW = 0;$/;"	m	class:OpenXcom::ArticleDefinition
PEDIA_STATUS_NORMAL	Mod/ArticleDefinition.h	/^		static const int PEDIA_STATUS_NORMAL = 1;$/;"	m	class:OpenXcom::ArticleDefinition
PFCreate	Engine/LanguagePlurality.h	/^	typedef LanguagePlurality *(*PFCreate)();$/;"	t	class:OpenXcom::LanguagePlurality
PI	Engine/Adlib/fmopl.cpp	47;"	d	file:
PIXEL00_0	Engine/Scalers/hq2x.cpp	25;"	d	file:
PIXEL00_0	Engine/Scalers/hq4x.cpp	25;"	d	file:
PIXEL00_10	Engine/Scalers/hq2x.cpp	26;"	d	file:
PIXEL00_100	Engine/Scalers/hq2x.cpp	36;"	d	file:
PIXEL00_11	Engine/Scalers/hq2x.cpp	27;"	d	file:
PIXEL00_11	Engine/Scalers/hq4x.cpp	26;"	d	file:
PIXEL00_12	Engine/Scalers/hq2x.cpp	28;"	d	file:
PIXEL00_12	Engine/Scalers/hq4x.cpp	27;"	d	file:
PIXEL00_1L	Engine/Scalers/hq3x.cpp	27;"	d	file:
PIXEL00_1M	Engine/Scalers/hq3x.cpp	25;"	d	file:
PIXEL00_1U	Engine/Scalers/hq3x.cpp	26;"	d	file:
PIXEL00_2	Engine/Scalers/hq3x.cpp	28;"	d	file:
PIXEL00_20	Engine/Scalers/hq2x.cpp	29;"	d	file:
PIXEL00_20	Engine/Scalers/hq4x.cpp	28;"	d	file:
PIXEL00_21	Engine/Scalers/hq2x.cpp	30;"	d	file:
PIXEL00_22	Engine/Scalers/hq2x.cpp	31;"	d	file:
PIXEL00_4	Engine/Scalers/hq3x.cpp	29;"	d	file:
PIXEL00_5	Engine/Scalers/hq3x.cpp	30;"	d	file:
PIXEL00_50	Engine/Scalers/hq4x.cpp	29;"	d	file:
PIXEL00_60	Engine/Scalers/hq2x.cpp	32;"	d	file:
PIXEL00_61	Engine/Scalers/hq2x.cpp	33;"	d	file:
PIXEL00_70	Engine/Scalers/hq2x.cpp	34;"	d	file:
PIXEL00_80	Engine/Scalers/hq4x.cpp	30;"	d	file:
PIXEL00_81	Engine/Scalers/hq4x.cpp	31;"	d	file:
PIXEL00_82	Engine/Scalers/hq4x.cpp	32;"	d	file:
PIXEL00_90	Engine/Scalers/hq2x.cpp	35;"	d	file:
PIXEL00_C	Engine/Scalers/hq3x.cpp	31;"	d	file:
PIXEL01_0	Engine/Scalers/hq2x.cpp	37;"	d	file:
PIXEL01_0	Engine/Scalers/hq4x.cpp	33;"	d	file:
PIXEL01_1	Engine/Scalers/hq3x.cpp	33;"	d	file:
PIXEL01_10	Engine/Scalers/hq2x.cpp	38;"	d	file:
PIXEL01_10	Engine/Scalers/hq4x.cpp	34;"	d	file:
PIXEL01_100	Engine/Scalers/hq2x.cpp	48;"	d	file:
PIXEL01_11	Engine/Scalers/hq2x.cpp	39;"	d	file:
PIXEL01_12	Engine/Scalers/hq2x.cpp	40;"	d	file:
PIXEL01_12	Engine/Scalers/hq4x.cpp	35;"	d	file:
PIXEL01_14	Engine/Scalers/hq4x.cpp	36;"	d	file:
PIXEL01_20	Engine/Scalers/hq2x.cpp	41;"	d	file:
PIXEL01_21	Engine/Scalers/hq2x.cpp	42;"	d	file:
PIXEL01_21	Engine/Scalers/hq4x.cpp	37;"	d	file:
PIXEL01_22	Engine/Scalers/hq2x.cpp	43;"	d	file:
PIXEL01_3	Engine/Scalers/hq3x.cpp	34;"	d	file:
PIXEL01_31	Engine/Scalers/hq4x.cpp	38;"	d	file:
PIXEL01_50	Engine/Scalers/hq4x.cpp	39;"	d	file:
PIXEL01_6	Engine/Scalers/hq3x.cpp	35;"	d	file:
PIXEL01_60	Engine/Scalers/hq2x.cpp	44;"	d	file:
PIXEL01_60	Engine/Scalers/hq4x.cpp	40;"	d	file:
PIXEL01_61	Engine/Scalers/hq2x.cpp	45;"	d	file:
PIXEL01_61	Engine/Scalers/hq4x.cpp	41;"	d	file:
PIXEL01_70	Engine/Scalers/hq2x.cpp	46;"	d	file:
PIXEL01_82	Engine/Scalers/hq4x.cpp	42;"	d	file:
PIXEL01_83	Engine/Scalers/hq4x.cpp	43;"	d	file:
PIXEL01_90	Engine/Scalers/hq2x.cpp	47;"	d	file:
PIXEL01_C	Engine/Scalers/hq3x.cpp	36;"	d	file:
PIXEL02_0	Engine/Scalers/hq4x.cpp	44;"	d	file:
PIXEL02_10	Engine/Scalers/hq4x.cpp	45;"	d	file:
PIXEL02_11	Engine/Scalers/hq4x.cpp	46;"	d	file:
PIXEL02_13	Engine/Scalers/hq4x.cpp	47;"	d	file:
PIXEL02_1M	Engine/Scalers/hq3x.cpp	38;"	d	file:
PIXEL02_1R	Engine/Scalers/hq3x.cpp	40;"	d	file:
PIXEL02_1U	Engine/Scalers/hq3x.cpp	39;"	d	file:
PIXEL02_2	Engine/Scalers/hq3x.cpp	41;"	d	file:
PIXEL02_21	Engine/Scalers/hq4x.cpp	48;"	d	file:
PIXEL02_32	Engine/Scalers/hq4x.cpp	49;"	d	file:
PIXEL02_4	Engine/Scalers/hq3x.cpp	42;"	d	file:
PIXEL02_5	Engine/Scalers/hq3x.cpp	43;"	d	file:
PIXEL02_50	Engine/Scalers/hq4x.cpp	50;"	d	file:
PIXEL02_60	Engine/Scalers/hq4x.cpp	51;"	d	file:
PIXEL02_61	Engine/Scalers/hq4x.cpp	52;"	d	file:
PIXEL02_81	Engine/Scalers/hq4x.cpp	53;"	d	file:
PIXEL02_83	Engine/Scalers/hq4x.cpp	54;"	d	file:
PIXEL02_C	Engine/Scalers/hq3x.cpp	44;"	d	file:
PIXEL03_0	Engine/Scalers/hq4x.cpp	55;"	d	file:
PIXEL03_11	Engine/Scalers/hq4x.cpp	56;"	d	file:
PIXEL03_12	Engine/Scalers/hq4x.cpp	57;"	d	file:
PIXEL03_20	Engine/Scalers/hq4x.cpp	58;"	d	file:
PIXEL03_50	Engine/Scalers/hq4x.cpp	59;"	d	file:
PIXEL03_80	Engine/Scalers/hq4x.cpp	60;"	d	file:
PIXEL03_81	Engine/Scalers/hq4x.cpp	61;"	d	file:
PIXEL03_82	Engine/Scalers/hq4x.cpp	62;"	d	file:
PIXEL10_0	Engine/Scalers/hq2x.cpp	49;"	d	file:
PIXEL10_0	Engine/Scalers/hq4x.cpp	63;"	d	file:
PIXEL10_1	Engine/Scalers/hq3x.cpp	46;"	d	file:
PIXEL10_10	Engine/Scalers/hq2x.cpp	50;"	d	file:
PIXEL10_10	Engine/Scalers/hq4x.cpp	64;"	d	file:
PIXEL10_100	Engine/Scalers/hq2x.cpp	60;"	d	file:
PIXEL10_11	Engine/Scalers/hq2x.cpp	51;"	d	file:
PIXEL10_11	Engine/Scalers/hq4x.cpp	65;"	d	file:
PIXEL10_12	Engine/Scalers/hq2x.cpp	52;"	d	file:
PIXEL10_13	Engine/Scalers/hq4x.cpp	66;"	d	file:
PIXEL10_20	Engine/Scalers/hq2x.cpp	53;"	d	file:
PIXEL10_21	Engine/Scalers/hq2x.cpp	54;"	d	file:
PIXEL10_21	Engine/Scalers/hq4x.cpp	67;"	d	file:
PIXEL10_22	Engine/Scalers/hq2x.cpp	55;"	d	file:
PIXEL10_3	Engine/Scalers/hq3x.cpp	47;"	d	file:
PIXEL10_32	Engine/Scalers/hq4x.cpp	68;"	d	file:
PIXEL10_50	Engine/Scalers/hq4x.cpp	69;"	d	file:
PIXEL10_6	Engine/Scalers/hq3x.cpp	48;"	d	file:
PIXEL10_60	Engine/Scalers/hq2x.cpp	56;"	d	file:
PIXEL10_60	Engine/Scalers/hq4x.cpp	70;"	d	file:
PIXEL10_61	Engine/Scalers/hq2x.cpp	57;"	d	file:
PIXEL10_61	Engine/Scalers/hq4x.cpp	71;"	d	file:
PIXEL10_70	Engine/Scalers/hq2x.cpp	58;"	d	file:
PIXEL10_81	Engine/Scalers/hq4x.cpp	72;"	d	file:
PIXEL10_83	Engine/Scalers/hq4x.cpp	73;"	d	file:
PIXEL10_90	Engine/Scalers/hq2x.cpp	59;"	d	file:
PIXEL10_C	Engine/Scalers/hq3x.cpp	49;"	d	file:
PIXEL11	Engine/Scalers/hq3x.cpp	51;"	d	file:
PIXEL11_0	Engine/Scalers/hq2x.cpp	61;"	d	file:
PIXEL11_0	Engine/Scalers/hq4x.cpp	74;"	d	file:
PIXEL11_10	Engine/Scalers/hq2x.cpp	62;"	d	file:
PIXEL11_100	Engine/Scalers/hq2x.cpp	72;"	d	file:
PIXEL11_11	Engine/Scalers/hq2x.cpp	63;"	d	file:
PIXEL11_12	Engine/Scalers/hq2x.cpp	64;"	d	file:
PIXEL11_20	Engine/Scalers/hq2x.cpp	65;"	d	file:
PIXEL11_21	Engine/Scalers/hq2x.cpp	66;"	d	file:
PIXEL11_22	Engine/Scalers/hq2x.cpp	67;"	d	file:
PIXEL11_30	Engine/Scalers/hq4x.cpp	75;"	d	file:
PIXEL11_31	Engine/Scalers/hq4x.cpp	76;"	d	file:
PIXEL11_32	Engine/Scalers/hq4x.cpp	77;"	d	file:
PIXEL11_60	Engine/Scalers/hq2x.cpp	68;"	d	file:
PIXEL11_61	Engine/Scalers/hq2x.cpp	69;"	d	file:
PIXEL11_70	Engine/Scalers/hq2x.cpp	70;"	d	file:
PIXEL11_70	Engine/Scalers/hq4x.cpp	78;"	d	file:
PIXEL11_90	Engine/Scalers/hq2x.cpp	71;"	d	file:
PIXEL12_0	Engine/Scalers/hq4x.cpp	79;"	d	file:
PIXEL12_1	Engine/Scalers/hq3x.cpp	53;"	d	file:
PIXEL12_3	Engine/Scalers/hq3x.cpp	54;"	d	file:
PIXEL12_30	Engine/Scalers/hq4x.cpp	80;"	d	file:
PIXEL12_31	Engine/Scalers/hq4x.cpp	81;"	d	file:
PIXEL12_32	Engine/Scalers/hq4x.cpp	82;"	d	file:
PIXEL12_6	Engine/Scalers/hq3x.cpp	55;"	d	file:
PIXEL12_70	Engine/Scalers/hq4x.cpp	83;"	d	file:
PIXEL12_C	Engine/Scalers/hq3x.cpp	56;"	d	file:
PIXEL13_0	Engine/Scalers/hq4x.cpp	84;"	d	file:
PIXEL13_10	Engine/Scalers/hq4x.cpp	85;"	d	file:
PIXEL13_12	Engine/Scalers/hq4x.cpp	86;"	d	file:
PIXEL13_14	Engine/Scalers/hq4x.cpp	87;"	d	file:
PIXEL13_21	Engine/Scalers/hq4x.cpp	88;"	d	file:
PIXEL13_31	Engine/Scalers/hq4x.cpp	89;"	d	file:
PIXEL13_50	Engine/Scalers/hq4x.cpp	90;"	d	file:
PIXEL13_60	Engine/Scalers/hq4x.cpp	91;"	d	file:
PIXEL13_61	Engine/Scalers/hq4x.cpp	92;"	d	file:
PIXEL13_82	Engine/Scalers/hq4x.cpp	93;"	d	file:
PIXEL13_83	Engine/Scalers/hq4x.cpp	94;"	d	file:
PIXEL20_0	Engine/Scalers/hq4x.cpp	95;"	d	file:
PIXEL20_10	Engine/Scalers/hq4x.cpp	96;"	d	file:
PIXEL20_12	Engine/Scalers/hq4x.cpp	97;"	d	file:
PIXEL20_14	Engine/Scalers/hq4x.cpp	98;"	d	file:
PIXEL20_1D	Engine/Scalers/hq3x.cpp	59;"	d	file:
PIXEL20_1L	Engine/Scalers/hq3x.cpp	60;"	d	file:
PIXEL20_1M	Engine/Scalers/hq3x.cpp	58;"	d	file:
PIXEL20_2	Engine/Scalers/hq3x.cpp	61;"	d	file:
PIXEL20_21	Engine/Scalers/hq4x.cpp	99;"	d	file:
PIXEL20_31	Engine/Scalers/hq4x.cpp	100;"	d	file:
PIXEL20_4	Engine/Scalers/hq3x.cpp	62;"	d	file:
PIXEL20_5	Engine/Scalers/hq3x.cpp	63;"	d	file:
PIXEL20_50	Engine/Scalers/hq4x.cpp	101;"	d	file:
PIXEL20_60	Engine/Scalers/hq4x.cpp	102;"	d	file:
PIXEL20_61	Engine/Scalers/hq4x.cpp	103;"	d	file:
PIXEL20_82	Engine/Scalers/hq4x.cpp	104;"	d	file:
PIXEL20_83	Engine/Scalers/hq4x.cpp	105;"	d	file:
PIXEL20_C	Engine/Scalers/hq3x.cpp	64;"	d	file:
PIXEL21_0	Engine/Scalers/hq4x.cpp	106;"	d	file:
PIXEL21_1	Engine/Scalers/hq3x.cpp	66;"	d	file:
PIXEL21_3	Engine/Scalers/hq3x.cpp	67;"	d	file:
PIXEL21_30	Engine/Scalers/hq4x.cpp	107;"	d	file:
PIXEL21_31	Engine/Scalers/hq4x.cpp	108;"	d	file:
PIXEL21_32	Engine/Scalers/hq4x.cpp	109;"	d	file:
PIXEL21_6	Engine/Scalers/hq3x.cpp	68;"	d	file:
PIXEL21_70	Engine/Scalers/hq4x.cpp	110;"	d	file:
PIXEL21_C	Engine/Scalers/hq3x.cpp	69;"	d	file:
PIXEL22_0	Engine/Scalers/hq4x.cpp	111;"	d	file:
PIXEL22_1D	Engine/Scalers/hq3x.cpp	72;"	d	file:
PIXEL22_1M	Engine/Scalers/hq3x.cpp	71;"	d	file:
PIXEL22_1R	Engine/Scalers/hq3x.cpp	73;"	d	file:
PIXEL22_2	Engine/Scalers/hq3x.cpp	74;"	d	file:
PIXEL22_30	Engine/Scalers/hq4x.cpp	112;"	d	file:
PIXEL22_31	Engine/Scalers/hq4x.cpp	113;"	d	file:
PIXEL22_32	Engine/Scalers/hq4x.cpp	114;"	d	file:
PIXEL22_4	Engine/Scalers/hq3x.cpp	75;"	d	file:
PIXEL22_5	Engine/Scalers/hq3x.cpp	76;"	d	file:
PIXEL22_70	Engine/Scalers/hq4x.cpp	115;"	d	file:
PIXEL22_C	Engine/Scalers/hq3x.cpp	77;"	d	file:
PIXEL23_0	Engine/Scalers/hq4x.cpp	116;"	d	file:
PIXEL23_10	Engine/Scalers/hq4x.cpp	117;"	d	file:
PIXEL23_11	Engine/Scalers/hq4x.cpp	118;"	d	file:
PIXEL23_13	Engine/Scalers/hq4x.cpp	119;"	d	file:
PIXEL23_21	Engine/Scalers/hq4x.cpp	120;"	d	file:
PIXEL23_32	Engine/Scalers/hq4x.cpp	121;"	d	file:
PIXEL23_50	Engine/Scalers/hq4x.cpp	122;"	d	file:
PIXEL23_60	Engine/Scalers/hq4x.cpp	123;"	d	file:
PIXEL23_61	Engine/Scalers/hq4x.cpp	124;"	d	file:
PIXEL23_81	Engine/Scalers/hq4x.cpp	125;"	d	file:
PIXEL23_83	Engine/Scalers/hq4x.cpp	126;"	d	file:
PIXEL30_0	Engine/Scalers/hq4x.cpp	127;"	d	file:
PIXEL30_11	Engine/Scalers/hq4x.cpp	128;"	d	file:
PIXEL30_12	Engine/Scalers/hq4x.cpp	129;"	d	file:
PIXEL30_20	Engine/Scalers/hq4x.cpp	130;"	d	file:
PIXEL30_50	Engine/Scalers/hq4x.cpp	131;"	d	file:
PIXEL30_80	Engine/Scalers/hq4x.cpp	132;"	d	file:
PIXEL30_81	Engine/Scalers/hq4x.cpp	133;"	d	file:
PIXEL30_82	Engine/Scalers/hq4x.cpp	134;"	d	file:
PIXEL31_0	Engine/Scalers/hq4x.cpp	135;"	d	file:
PIXEL31_10	Engine/Scalers/hq4x.cpp	136;"	d	file:
PIXEL31_11	Engine/Scalers/hq4x.cpp	137;"	d	file:
PIXEL31_13	Engine/Scalers/hq4x.cpp	138;"	d	file:
PIXEL31_21	Engine/Scalers/hq4x.cpp	139;"	d	file:
PIXEL31_32	Engine/Scalers/hq4x.cpp	140;"	d	file:
PIXEL31_50	Engine/Scalers/hq4x.cpp	141;"	d	file:
PIXEL31_60	Engine/Scalers/hq4x.cpp	142;"	d	file:
PIXEL31_61	Engine/Scalers/hq4x.cpp	143;"	d	file:
PIXEL31_81	Engine/Scalers/hq4x.cpp	144;"	d	file:
PIXEL31_83	Engine/Scalers/hq4x.cpp	145;"	d	file:
PIXEL32_0	Engine/Scalers/hq4x.cpp	146;"	d	file:
PIXEL32_10	Engine/Scalers/hq4x.cpp	147;"	d	file:
PIXEL32_12	Engine/Scalers/hq4x.cpp	148;"	d	file:
PIXEL32_14	Engine/Scalers/hq4x.cpp	149;"	d	file:
PIXEL32_21	Engine/Scalers/hq4x.cpp	150;"	d	file:
PIXEL32_31	Engine/Scalers/hq4x.cpp	151;"	d	file:
PIXEL32_50	Engine/Scalers/hq4x.cpp	152;"	d	file:
PIXEL32_60	Engine/Scalers/hq4x.cpp	153;"	d	file:
PIXEL32_61	Engine/Scalers/hq4x.cpp	154;"	d	file:
PIXEL32_82	Engine/Scalers/hq4x.cpp	155;"	d	file:
PIXEL32_83	Engine/Scalers/hq4x.cpp	156;"	d	file:
PIXEL33_0	Engine/Scalers/hq4x.cpp	157;"	d	file:
PIXEL33_11	Engine/Scalers/hq4x.cpp	158;"	d	file:
PIXEL33_12	Engine/Scalers/hq4x.cpp	159;"	d	file:
PIXEL33_20	Engine/Scalers/hq4x.cpp	160;"	d	file:
PIXEL33_50	Engine/Scalers/hq4x.cpp	161;"	d	file:
PIXEL33_80	Engine/Scalers/hq4x.cpp	162;"	d	file:
PIXEL33_81	Engine/Scalers/hq4x.cpp	163;"	d	file:
PIXEL33_82	Engine/Scalers/hq4x.cpp	164;"	d	file:
PLAYING	Engine/FlcPlayer.cpp	/^	PLAYING,$/;"	e	enum:OpenXcom::PlayingState	file:
POPUP_BOTH	Interface/Window.h	/^enum WindowPopup { POPUP_NONE, POPUP_HORIZONTAL, POPUP_VERTICAL, POPUP_BOTH };$/;"	e	enum:OpenXcom::WindowPopup
POPUP_HORIZONTAL	Interface/Window.h	/^enum WindowPopup { POPUP_NONE, POPUP_HORIZONTAL, POPUP_VERTICAL, POPUP_BOTH };$/;"	e	enum:OpenXcom::WindowPopup
POPUP_NONE	Interface/Window.h	/^enum WindowPopup { POPUP_NONE, POPUP_HORIZONTAL, POPUP_VERTICAL, POPUP_BOTH };$/;"	e	enum:OpenXcom::WindowPopup
POPUP_SPEED	Interface/Window.cpp	/^const double Window::POPUP_SPEED = 0.05;$/;"	m	class:OpenXcom::Window	file:
POPUP_SPEED	Interface/Window.h	/^	static const double POPUP_SPEED;$/;"	m	class:OpenXcom::Window
POPUP_VERTICAL	Interface/Window.h	/^enum WindowPopup { POPUP_NONE, POPUP_HORIZONTAL, POPUP_VERTICAL, POPUP_BOTH };$/;"	e	enum:OpenXcom::WindowPopup
PREFIX_CHUNK	Engine/FlcPlayer.cpp	/^	PREFIX_CHUNK = 0xF100,$/;"	e	enum:OpenXcom::ChunkTypes	file:
PROGRESS_COMPLETE	Savegame/Production.h	/^enum productionProgress_e { PROGRESS_NOT_COMPLETE, PROGRESS_COMPLETE, PROGRESS_NOT_ENOUGH_MONEY, PROGRESS_NOT_ENOUGH_MATERIALS, PROGRESS_NOT_ENOUGH_LIVING_SPACE, PROGRESS_MAX, PROGRESS_CONSTRUCTION };$/;"	e	enum:OpenXcom::productionProgress_e
PROGRESS_CONSTRUCTION	Savegame/Production.h	/^enum productionProgress_e { PROGRESS_NOT_COMPLETE, PROGRESS_COMPLETE, PROGRESS_NOT_ENOUGH_MONEY, PROGRESS_NOT_ENOUGH_MATERIALS, PROGRESS_NOT_ENOUGH_LIVING_SPACE, PROGRESS_MAX, PROGRESS_CONSTRUCTION };$/;"	e	enum:OpenXcom::productionProgress_e
PROGRESS_LIMIT_AVERAGE	Savegame/ResearchProject.cpp	/^const float PROGRESS_LIMIT_AVERAGE = 0.13f;$/;"	m	namespace:OpenXcom	file:
PROGRESS_LIMIT_GOOD	Savegame/ResearchProject.cpp	/^const float PROGRESS_LIMIT_GOOD = 0.25f;$/;"	m	namespace:OpenXcom	file:
PROGRESS_LIMIT_POOR	Savegame/ResearchProject.cpp	/^const float PROGRESS_LIMIT_POOR = 0.07f;$/;"	m	namespace:OpenXcom	file:
PROGRESS_LIMIT_UNKNOWN	Savegame/ResearchProject.cpp	/^const float PROGRESS_LIMIT_UNKNOWN = 0.333f;$/;"	m	namespace:OpenXcom	file:
PROGRESS_MAX	Savegame/Production.h	/^enum productionProgress_e { PROGRESS_NOT_COMPLETE, PROGRESS_COMPLETE, PROGRESS_NOT_ENOUGH_MONEY, PROGRESS_NOT_ENOUGH_MATERIALS, PROGRESS_NOT_ENOUGH_LIVING_SPACE, PROGRESS_MAX, PROGRESS_CONSTRUCTION };$/;"	e	enum:OpenXcom::productionProgress_e
PROGRESS_NOT_COMPLETE	Savegame/Production.h	/^enum productionProgress_e { PROGRESS_NOT_COMPLETE, PROGRESS_COMPLETE, PROGRESS_NOT_ENOUGH_MONEY, PROGRESS_NOT_ENOUGH_MATERIALS, PROGRESS_NOT_ENOUGH_LIVING_SPACE, PROGRESS_MAX, PROGRESS_CONSTRUCTION };$/;"	e	enum:OpenXcom::productionProgress_e
PROGRESS_NOT_ENOUGH_LIVING_SPACE	Savegame/Production.h	/^enum productionProgress_e { PROGRESS_NOT_COMPLETE, PROGRESS_COMPLETE, PROGRESS_NOT_ENOUGH_MONEY, PROGRESS_NOT_ENOUGH_MATERIALS, PROGRESS_NOT_ENOUGH_LIVING_SPACE, PROGRESS_MAX, PROGRESS_CONSTRUCTION };$/;"	e	enum:OpenXcom::productionProgress_e
PROGRESS_NOT_ENOUGH_MATERIALS	Savegame/Production.h	/^enum productionProgress_e { PROGRESS_NOT_COMPLETE, PROGRESS_COMPLETE, PROGRESS_NOT_ENOUGH_MONEY, PROGRESS_NOT_ENOUGH_MATERIALS, PROGRESS_NOT_ENOUGH_LIVING_SPACE, PROGRESS_MAX, PROGRESS_CONSTRUCTION };$/;"	e	enum:OpenXcom::productionProgress_e
PROGRESS_NOT_ENOUGH_MONEY	Savegame/Production.h	/^enum productionProgress_e { PROGRESS_NOT_COMPLETE, PROGRESS_COMPLETE, PROGRESS_NOT_ENOUGH_MONEY, PROGRESS_NOT_ENOUGH_MATERIALS, PROGRESS_NOT_ENOUGH_LIVING_SPACE, PROGRESS_MAX, PROGRESS_CONSTRUCTION };$/;"	e	enum:OpenXcom::productionProgress_e
PUSH_IN	Basescape/CraftArmorState.cpp	104;"	d	file:
PUSH_IN	Basescape/CraftArmorState.cpp	137;"	d	file:
PUSH_IN	Basescape/CraftSoldiersState.cpp	125;"	d	file:
PUSH_IN	Basescape/CraftSoldiersState.cpp	158;"	d	file:
PUSH_IN	Basescape/SoldiersState.cpp	191;"	d	file:
PUSH_IN	Basescape/SoldiersState.cpp	224;"	d	file:
PUSH_IN	Geoscape/AllocatePsiTrainingState.cpp	125;"	d	file:
PUSH_IN	Geoscape/AllocatePsiTrainingState.cpp	143;"	d	file:
PUSH_IN	Geoscape/AllocatePsiTrainingState.cpp	145;"	d	file:
PUSH_IN	Geoscape/AllocatePsiTrainingState.cpp	167;"	d	file:
PUSH_IN	Geoscape/AllocateTrainingState.cpp	138;"	d	file:
PUSH_IN	Geoscape/AllocateTrainingState.cpp	156;"	d	file:
PUSH_IN	Geoscape/AllocateTrainingState.cpp	158;"	d	file:
PUSH_IN	Geoscape/AllocateTrainingState.cpp	180;"	d	file:
P_CH	Engine/Adlib/fmopl.h	/^	OPL_CH *P_CH;		\/* pointer of CH                     *\/$/;"	m	struct:fm_opl_f
Palette	Engine/Palette.cpp	/^Palette::Palette() : _colors(0), _count(0)$/;"	f	class:OpenXcom::Palette
Palette	Engine/Palette.h	/^class Palette$/;"	c	namespace:OpenXcom
PaletteActionType	Menu/TestPaletteState.h	/^enum PaletteActionType { PAT_PREVIEW, PAT_TINY_BORDERLESS, PAT_TINY_BORDER, PAT_SMALL_LOW, PAT_SMALL_HIGH, PAT_BIG_LOW, PAT_BIG_HIGH };$/;"	g	namespace:OpenXcom
PaletteShift	Interface/Text.cpp	/^struct PaletteShift$/;"	s	namespace:OpenXcom::__anon47	file:
PaletteTestMetadata	Menu/TestState.h	/^	PaletteTestMetadata() : firstIndexToCheck(0), lastIndexToCheck(255), maxTolerance(0), usesBackPals(false) { };$/;"	f	struct:OpenXcom::PaletteTestMetadata
PaletteTestMetadata	Menu/TestState.h	/^	PaletteTestMetadata(const std::string &_paletteName, int _firstIndexToCheck, int _lastIndexToCheck, int _maxTolerance, const std::string &_palettePath, bool _usesBackPals) :$/;"	f	struct:OpenXcom::PaletteTestMetadata
PaletteTestMetadata	Menu/TestState.h	/^struct PaletteTestMetadata {$/;"	s	namespace:OpenXcom
ParserWriter	Engine/Script.cpp	/^ParserWriter::ParserWriter($/;"	f	class:OpenXcom::ParserWriter
ParserWriter	Engine/ScriptBind.h	/^struct ParserWriter$/;"	s	namespace:OpenXcom
Part	Battlescape/UnitSprite.h	/^		Part(int body, const Surface *s = nullptr) : src{ s }, bodyPart{ body }, offX{ 0 }, offY{ 0 } { }$/;"	f	struct:OpenXcom::UnitSprite::Part
Part	Battlescape/UnitSprite.h	/^	struct Part$/;"	s	class:OpenXcom::UnitSprite
Particle	Battlescape/Particle.cpp	/^Particle::Particle(int voxelZ, float xOffset, float yOffset, float density, Uint8 color, Uint8 opacity) : _xOffset(xOffset), _yOffset(yOffset), _density(density), _voxelZ(voxelZ), _color(color), _opacity(opacity), _size(0)$/;"	f	class:OpenXcom::Particle
Particle	Battlescape/Particle.h	/^class Particle$/;"	c	namespace:OpenXcom
PathPreview	Engine/Options.h	/^enum PathPreview {$/;"	g	namespace:OpenXcom
Pathfinding	Battlescape/Pathfinding.cpp	/^Pathfinding::Pathfinding(SavedBattleGame *save) : _save(save), _unit(0), _pathPreviewed(false), _strafeMove(false)$/;"	f	class:OpenXcom::Pathfinding
Pathfinding	Battlescape/Pathfinding.h	/^class Pathfinding$/;"	c	namespace:OpenXcom
PathfindingCost	Battlescape/PathfindingNode.h	/^	PathfindingCost(int t, int e) : time(t), energy(e) {}$/;"	f	struct:OpenXcom::PathfindingCost
PathfindingCost	Battlescape/PathfindingNode.h	/^struct PathfindingCost$/;"	s	namespace:OpenXcom
PathfindingNode	Battlescape/PathfindingNode.cpp	/^PathfindingNode::PathfindingNode(Position pos) : _pos(pos), _prevNode(0), _prevDir(0), _tuGuess(0), _checked(0), _openentry(0)$/;"	f	class:OpenXcom::PathfindingNode
PathfindingNode	Battlescape/PathfindingNode.h	/^class PathfindingNode$/;"	c	namespace:OpenXcom
PathfindingOpenSet	Battlescape/PathfindingOpenSet.h	/^class PathfindingOpenSet$/;"	c	namespace:OpenXcom
PathfindingStep	Battlescape/PathfindingNode.h	/^struct PathfindingStep$/;"	s	namespace:OpenXcom
PauseState	Menu/PauseState.cpp	/^PauseState::PauseState(OptionsOrigin origin) : _origin(origin)$/;"	f	class:OpenXcom::PauseState
PauseState	Menu/PauseState.h	/^class PauseState : public State$/;"	c	namespace:OpenXcom
PinkColor	Mod/Mod.cpp	/^		static const Uint8 PinkColor = 14 << 4;$/;"	m	struct:OpenXcom::__anon29::FaceXCOM2	file:
Pixel	Engine/ShaderDraw.h	/^inline helper::ShaderBase<Pixel> ShaderSurface(Pixel(&s)[Size], int max_x, int max_y)$/;"	m	namespace:OpenXcom
Pixel	Engine/Surface.h	/^	SurfaceRaw(Pixel (&buffer)[I], int width, int height) : SurfaceRaw{ buffer, width, height, static_cast<Uint16>(width*sizeof(Pixel)) }$/;"	m	class:OpenXcom::SurfaceRaw
PixelPtr	Engine/ShaderDrawHelper.h	/^	typedef Pixel* PixelPtr;$/;"	t	class:OpenXcom::helper::ShaderBase
PixelPtr	Engine/ShaderDrawHelper.h	/^	typedef typename ShaderBase<Pixel>::PixelPtr PixelPtr;$/;"	t	struct:OpenXcom::helper::controler
PixelPtr	Engine/ShaderMove.h	/^	typedef typename ShaderMove<Pixel>::PixelPtr PixelPtr;$/;"	t	struct:OpenXcom::helper::controler
PixelPtr	Engine/ShaderRepeat.h	/^	typedef typename ShaderRepeat<Pixel>::PixelPtr PixelPtr;$/;"	t	struct:OpenXcom::helper::controler
PixelRef	Engine/ShaderDrawHelper.h	/^	typedef Pixel& PixelRef;$/;"	t	class:OpenXcom::helper::ShaderBase
PixelRef	Engine/ShaderDrawHelper.h	/^	typedef typename ShaderBase<Pixel>::PixelRef PixelRef;$/;"	t	struct:OpenXcom::helper::controler
PixelRef	Engine/ShaderMove.h	/^	typedef typename ShaderMove<Pixel>::PixelRef PixelRef;$/;"	t	struct:OpenXcom::helper::controler
PixelRef	Engine/ShaderRepeat.h	/^	typedef typename ShaderRepeat<Pixel>::PixelRef PixelRef;$/;"	t	struct:OpenXcom::helper::controler
PlaceFacilityState	Basescape/PlaceFacilityState.cpp	/^PlaceFacilityState::PlaceFacilityState(Base *base, const RuleBaseFacility *rule, BaseFacility *origFac) : _base(base), _rule(rule), _origFac(origFac)$/;"	f	class:OpenXcom::PlaceFacilityState
PlaceFacilityState	Basescape/PlaceFacilityState.h	/^class PlaceFacilityState : public State$/;"	c	namespace:OpenXcom
PlaceLiftState	Basescape/PlaceLiftState.cpp	/^PlaceLiftState::PlaceLiftState(Base *base, Globe *globe, bool first) : _base(base), _globe(globe), _first(first)$/;"	f	class:OpenXcom::PlaceLiftState
PlaceLiftState	Basescape/PlaceLiftState.h	/^class PlaceLiftState : public State$/;"	c	namespace:OpenXcom
PlaceStartFacilityState	Basescape/PlaceStartFacilityState.cpp	/^PlaceStartFacilityState::PlaceStartFacilityState(Base *base, SelectStartFacilityState *select, const RuleBaseFacility *rule) : PlaceFacilityState(base, rule), _select(select)$/;"	f	class:OpenXcom::PlaceStartFacilityState
PlaceStartFacilityState	Basescape/PlaceStartFacilityState.h	/^class PlaceStartFacilityState : public PlaceFacilityState$/;"	c	namespace:OpenXcom
PlayingState	Engine/FlcPlayer.cpp	/^enum PlayingState$/;"	g	namespace:OpenXcom	file:
PolishPlurality	Engine/LanguagePlurality.cpp	/^class PolishPlurality : public LanguagePlurality$/;"	c	namespace:OpenXcom	file:
Polygon	Mod/Polygon.cpp	/^Polygon::Polygon(const Polygon& other)$/;"	f	class:OpenXcom::Polygon
Polygon	Mod/Polygon.cpp	/^Polygon::Polygon(int points) : _points(points), _texture(0)$/;"	f	class:OpenXcom::Polygon
Polygon	Mod/Polygon.h	/^class Polygon$/;"	c	namespace:OpenXcom
Polyline	Mod/Polyline.cpp	/^Polyline::Polyline(int points) : _points(points)$/;"	f	class:OpenXcom::Polyline
Polyline	Mod/Polyline.h	/^class Polyline$/;"	c	namespace:OpenXcom
PosTag	Engine/HelperMeta.h	/^struct PosTag$/;"	s	namespace:OpenXcom::helper
Position	Battlescape/Position.h	/^	constexpr Position() : x(0), y(0), z(0) {};$/;"	f	class:OpenXcom::Position
Position	Battlescape/Position.h	/^	constexpr Position(int x_, int y_, int z_) : x(x_), y(y_), z(z_) {};$/;"	f	class:OpenXcom::Position
Position	Battlescape/Position.h	/^class Position$/;"	c	namespace:OpenXcom
PrimeGrenadeState	Battlescape/PrimeGrenadeState.cpp	/^PrimeGrenadeState::PrimeGrenadeState(BattleAction *action, bool inInventoryView, BattleItem *grenadeInInventory) : _action(action), _inInventoryView(inInventoryView), _grenadeInInventory(grenadeInInventory)$/;"	f	class:OpenXcom::PrimeGrenadeState
PrimeGrenadeState	Battlescape/PrimeGrenadeState.h	/^class PrimeGrenadeState : public State$/;"	c	namespace:OpenXcom
ProcOp	Engine/ScriptBind.h	/^	class ProcOp { };$/;"	c	struct:OpenXcom::ParserWriter
Production	Savegame/Production.cpp	/^Production::Production(const RuleManufacture * rules, int amount) : _rules(rules), _amount(amount), _infinite(false), _timeSpent(0), _engineers(0), _sell(false)$/;"	f	class:OpenXcom::Production
Production	Savegame/Production.h	/^class Production$/;"	c	namespace:OpenXcom
ProductionCompleteState	Geoscape/ProductionCompleteState.cpp	/^ProductionCompleteState::ProductionCompleteState(Base *base, const std::string &item, GeoscapeState *state, productionProgress_e endType, Production *production) : _base(base), _state(state), _endType(endType)$/;"	f	class:OpenXcom::ProductionCompleteState
ProductionCompleteState	Geoscape/ProductionCompleteState.h	/^class ProductionCompleteState : public State$/;"	c	namespace:OpenXcom
ProgPos	Engine/Script.h	/^enum class ProgPos : size_t$/;"	c	namespace:OpenXcom
ProgPos	Engine/Script.h	/^enum class ProgPos : size_t;$/;"	c	namespace:OpenXcom
Projectile	Battlescape/Projectile.cpp	/^Projectile::Projectile(Mod *mod, SavedBattleGame *save, BattleAction action, Position origin, Position targetVoxel, BattleItem *ammo) : _mod(mod), _save(save), _action(action), _origin(origin), _targetVoxel(targetVoxel), _position(0), _distance(0.0f), _bulletSprite(-1), _reversed(false), _vaporColor(-1), _vaporDensity(-1), _vaporProbability(5)$/;"	f	class:OpenXcom::Projectile
Projectile	Battlescape/Projectile.h	/^class Projectile$/;"	c	namespace:OpenXcom
ProjectileFlyBState	Battlescape/ProjectileFlyBState.cpp	/^ProjectileFlyBState::ProjectileFlyBState(BattlescapeGame *parent, BattleAction action) : BattleState(parent, action), _unit(0), _ammo(0), _origin(action.actor->getPosition()), _originVoxel(-1,-1,-1), _projectileImpact(0), _range(0), _initialized(false), _targetFloor(false)$/;"	f	class:OpenXcom::ProjectileFlyBState
ProjectileFlyBState	Battlescape/ProjectileFlyBState.cpp	/^ProjectileFlyBState::ProjectileFlyBState(BattlescapeGame *parent, BattleAction action, Position origin, int range) : BattleState(parent, action), _unit(0), _ammo(0), _origin(origin), _originVoxel(-1,-1,-1), _projectileImpact(0), _range(range), _initialized(false), _targetFloor(false)$/;"	f	class:OpenXcom::ProjectileFlyBState
ProjectileFlyBState	Battlescape/ProjectileFlyBState.h	/^class ProjectileFlyBState : public BattleState$/;"	c	namespace:OpenXcom
PromotionInfo	Savegame/SavedGame.h	/^	PromotionInfo(): totalSoldiers(0), totalCommanders(0), totalColonels(0), totalCaptains(0), totalSergeants(0){}$/;"	f	struct:OpenXcom::PromotionInfo
PromotionInfo	Savegame/SavedGame.h	/^struct PromotionInfo$/;"	s	namespace:OpenXcom
PromotionsState	Battlescape/PromotionsState.cpp	/^PromotionsState::PromotionsState()$/;"	f	class:OpenXcom::PromotionsState
PromotionsState	Battlescape/PromotionsState.h	/^class PromotionsState : public State$/;"	c	namespace:OpenXcom
PsiAttackBState	Battlescape/PsiAttackBState.cpp	/^PsiAttackBState::PsiAttackBState(BattlescapeGame *parent, BattleAction action) : BattleState(parent, action), _unit(0), _target(0), _item(0), _initialized(false)$/;"	f	class:OpenXcom::PsiAttackBState
PsiAttackBState	Battlescape/PsiAttackBState.h	/^class PsiAttackBState : public BattleState$/;"	c	namespace:OpenXcom
PsiTrainingState	Geoscape/PsiTrainingState.cpp	/^PsiTrainingState::PsiTrainingState()$/;"	f	class:OpenXcom::PsiTrainingState
PsiTrainingState	Geoscape/PsiTrainingState.h	/^class PsiTrainingState : public State$/;"	c	namespace:OpenXcom
PurchaseState	Basescape/PurchaseState.cpp	/^PurchaseState::PurchaseState(Base *base, CannotReequipState *parent) : _base(base), _parent(parent), _sel(0), _total(0), _pQty(0), _cQty(0), _iQty(0.0), _ammoColor(0)$/;"	f	class:OpenXcom::PurchaseState
PurchaseState	Basescape/PurchaseState.h	/^class PurchaseState : public State$/;"	c	namespace:OpenXcom
QUICKSAVE	Savegame/SavedGame.cpp	/^				  SavedGame::QUICKSAVE = "_quick_.asav";$/;"	m	class:OpenXcom::SavedGame	file:
QUICKSAVE	Savegame/SavedGame.h	/^	static const std::string AUTOSAVE_GEOSCAPE, AUTOSAVE_BATTLESCAPE, QUICKSAVE;$/;"	m	class:OpenXcom::SavedGame
RADAR_MAX	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
RADAR_MIN	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
RANGE_METER	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
RATE_0	Engine/Adlib/fmopl.cpp	/^static INT32 RATE_0[16]=$/;"	v	file:
READBIT	lodepng.cpp	445;"	d	file:
RESEARCH_STATUS_DISABLED	Mod/RuleResearch.h	/^	static const int RESEARCH_STATUS_DISABLED = 2;$/;"	m	class:OpenXcom::RuleResearch
RESEARCH_STATUS_NEW	Mod/RuleResearch.h	/^	static const int RESEARCH_STATUS_NEW = 0;$/;"	m	class:OpenXcom::RuleResearch
RESEARCH_STATUS_NORMAL	Mod/RuleResearch.h	/^	static const int RESEARCH_STATUS_NORMAL = 1;$/;"	m	class:OpenXcom::RuleResearch
RETALIATION_ASSAULT_RUN	Mod/UfoTrajectory.cpp	/^const std::string UfoTrajectory::RETALIATION_ASSAULT_RUN = "__RETALIATION_ASSAULT_RUN";$/;"	m	class:OpenXcom::UfoTrajectory	file:
RETALIATION_ASSAULT_RUN	Mod/UfoTrajectory.h	/^	static const std::string RETALIATION_ASSAULT_RUN;$/;"	m	class:OpenXcom::UfoTrajectory
RGB	Engine/Scalers/xbrz.h	/^    RGB,  \/\/8 bit for each red, green, blue, upper 8 bits unused$/;"	e	enum:xbrz::ColorFormat
RGBtoYUV	Engine/Scalers/init.cpp	/^uint32_t   RGBtoYUV[16777216];$/;"	v
RNG	Engine/RNG.cpp	/^namespace RNG$/;"	n	namespace:OpenXcom	file:
RNG	Engine/RNG.h	/^namespace RNG$/;"	n	namespace:OpenXcom
RNG	Mod/ModScript.h	/^namespace RNG { class RandomState; }$/;"	n	namespace:OpenXcom
ROTATE_LATITUDE	Geoscape/Globe.cpp	/^const double Globe::ROTATE_LATITUDE = 0.06;$/;"	m	class:OpenXcom::Globe	file:
ROTATE_LATITUDE	Geoscape/Globe.h	/^	static const double ROTATE_LATITUDE;$/;"	m	class:OpenXcom::Globe
ROTATE_LONGITUDE	Geoscape/Globe.cpp	/^const double Globe::ROTATE_LONGITUDE = 0.10;$/;"	m	class:OpenXcom::Globe	file:
ROTATE_LONGITUDE	Geoscape/Globe.h	/^	static const double ROTATE_LONGITUDE;$/;"	m	class:OpenXcom::Globe
ROT_0	Engine/Scalers/xbrz.cpp	/^    ROT_0,$/;"	e	enum:__anon10::RotationDegree	file:
ROT_180	Engine/Scalers/xbrz.cpp	/^    ROT_180,$/;"	e	enum:__anon10::RotationDegree	file:
ROT_270	Engine/Scalers/xbrz.cpp	/^    ROT_270$/;"	e	enum:__anon10::RotationDegree	file:
ROT_90	Engine/Scalers/xbrz.cpp	/^    ROT_90,$/;"	e	enum:__anon10::RotationDegree	file:
RR	Engine/Adlib/fmopl.h	/^	INT32 *RR;		\/* release rate    :&DR_TABLE[RR<<2]   *\/$/;"	m	struct:fm_opl_slot
RSOrder	Engine/FileMap.h	/^	typedef std::vector<std::pair<std::string, std::vector<FileRecord>>> RSOrder;$/;"	t	namespace:OpenXcom::FileMap
Rad2Deg	fmath.h	/^inline double Rad2Deg(double rad)$/;"	f
RadiusEffectiveness	Mod/RuleDamageType.h	/^	float RadiusEffectiveness;$/;"	m	struct:OpenXcom::RuleDamageType
RadiusReduction	Mod/RuleDamageType.h	/^	float RadiusReduction;$/;"	m	struct:OpenXcom::RuleDamageType
RandomArmor	Mod/RuleDamageType.h	/^	bool RandomArmor;$/;"	m	struct:OpenXcom::RuleDamageType
RandomArmorPre	Mod/RuleDamageType.h	/^	bool RandomArmorPre;$/;"	m	struct:OpenXcom::RuleDamageType
RandomEnergy	Mod/RuleDamageType.h	/^	bool RandomEnergy;$/;"	m	struct:OpenXcom::RuleDamageType
RandomHealth	Mod/RuleDamageType.h	/^	bool RandomHealth;$/;"	m	struct:OpenXcom::RuleDamageType
RandomItem	Mod/RuleDamageType.h	/^	bool RandomItem;$/;"	m	struct:OpenXcom::RuleDamageType
RandomMana	Mod/RuleDamageType.h	/^	bool RandomMana;$/;"	m	struct:OpenXcom::RuleDamageType
RandomMorale	Mod/RuleDamageType.h	/^	bool RandomMorale;$/;"	m	struct:OpenXcom::RuleDamageType
RandomState	Engine/RNG.cpp	/^RandomState::RandomState()$/;"	f	class:OpenXcom::RNG::RandomState
RandomState	Engine/RNG.cpp	/^RandomState::RandomState(uint64_t seed) : _seedState(seed)$/;"	f	class:OpenXcom::RNG::RandomState
RandomState	Engine/RNG.h	/^	class RandomState$/;"	c	namespace:OpenXcom::RNG
RandomStun	Mod/RuleDamageType.h	/^	bool RandomStun;$/;"	m	struct:OpenXcom::RuleDamageType
RandomTile	Mod/RuleDamageType.h	/^	bool RandomTile;$/;"	m	struct:OpenXcom::RuleDamageType
RandomTime	Mod/RuleDamageType.h	/^	bool RandomTime;$/;"	m	struct:OpenXcom::RuleDamageType
RandomType	Mod/RuleDamageType.h	/^	ItemDamageRandomType RandomType;$/;"	m	struct:OpenXcom::RuleDamageType
RandomWound	Mod/RuleDamageType.h	/^	bool RandomWound;$/;"	m	struct:OpenXcom::RuleDamageType
RandomizedItems	Mod/MapBlock.h	/^	RandomizedItems() : amount(1), mixed(false) { \/*Empty by Design*\/ };$/;"	f	struct:OpenXcom::RandomizedItems
RandomizedItems	Mod/MapBlock.h	/^struct RandomizedItems$/;"	s	namespace:OpenXcom
Range	Engine/Collections.h	/^		Range(It begin, It end) :$/;"	f	class:OpenXcom::Collections::Range
Range	Engine/Collections.h	/^	class Range$/;"	c	class:OpenXcom::Collections
RawCopySurf	Engine/Surface.cpp	/^inline void RawCopySurf(const Surface::UniqueSurfacePtr& dest, const Surface::UniqueSurfacePtr& src)$/;"	f	namespace:OpenXcom::__anon5
ReactionScore	Battlescape/TileEngine.h	/^	struct ReactionScore$/;"	s	class:OpenXcom::TileEngine
ReactionUnitParser	Mod/ModScript.h	/^	struct ReactionUnitParser : ScriptParserEvents<Output, const BattleUnit*, const BattleUnit*, const BattleItem*, int, int, const BattleItem*, const RuleSkill*, int, const BattleUnit*, int, int, const SavedBattleGame*>$/;"	s	class:OpenXcom::ModScript
ReactionUnitParser	Savegame/BattleUnit.cpp	/^ModScript::ReactionUnitParser::ReactionUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::ReactionUnitParser
RecolorItemParser	Mod/ModScript.h	/^	struct RecolorItemParser : ScriptParserEvents<Output, const BattleItem*, const SavedBattleGame*, int, int, int>$/;"	s	class:OpenXcom::ModScript
RecolorItemParser	Savegame/BattleItem.cpp	/^ModScript::RecolorItemParser::RecolorItemParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::RecolorItemParser
RecolorUnitParser	Mod/ModScript.h	/^	struct RecolorUnitParser : ScriptParserEvents<Output, const BattleUnit*, const SavedBattleGame*, int, int, int, int>$/;"	s	class:OpenXcom::ModScript
RecolorUnitParser	Savegame/BattleUnit.cpp	/^ModScript::RecolorUnitParser::RecolorUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::RecolorUnitParser
RecoveryItem	Battlescape/DebriefingState.h	/^struct RecoveryItem { std::string name; int value; };$/;"	s	namespace:OpenXcom
ReequipStat	Battlescape/DebriefingState.h	/^struct ReequipStat { std::string item; int qty; std::string craft; int listOrder; };$/;"	s	namespace:OpenXcom
Region	Savegame/Region.cpp	/^Region::Region(RuleRegion *rules): _rules(rules)$/;"	f	class:OpenXcom::Region
Region	Savegame/Region.h	/^class Region$/;"	c	namespace:OpenXcom
ReinforcementsData	Mod/AlienDeployment.h	/^struct ReinforcementsData$/;"	s	namespace:OpenXcom
RemoveTag	Mod/Mod.cpp	/^const std::string RemoveTag = "!remove";$/;"	m	namespace:OpenXcom::__anon28	file:
ResearchCompleteState	Geoscape/ResearchCompleteState.cpp	/^ResearchCompleteState::ResearchCompleteState(const RuleResearch *newResearch, const RuleResearch *bonus, const RuleResearch *research) : _research(newResearch), _bonus(bonus)$/;"	f	class:OpenXcom::ResearchCompleteState
ResearchCompleteState	Geoscape/ResearchCompleteState.h	/^class ResearchCompleteState : public State$/;"	c	namespace:OpenXcom
ResearchInfoState	Basescape/ResearchInfoState.cpp	/^ResearchInfoState::ResearchInfoState(Base *base, ResearchProject *project) : _base(base), _project(project), _rule(0)$/;"	f	class:OpenXcom::ResearchInfoState
ResearchInfoState	Basescape/ResearchInfoState.cpp	/^ResearchInfoState::ResearchInfoState(Base *base, RuleResearch *rule) : _base(base), _project(nullptr), _rule(rule)$/;"	f	class:OpenXcom::ResearchInfoState
ResearchInfoState	Basescape/ResearchInfoState.h	/^class ResearchInfoState : public State$/;"	c	namespace:OpenXcom
ResearchProject	Savegame/ResearchProject.cpp	/^ResearchProject::ResearchProject(RuleResearch * p, int c) : _project(p), _assigned(0), _spent(0), _cost(c)$/;"	f	class:OpenXcom::ResearchProject
ResearchProject	Savegame/ResearchProject.h	/^class ResearchProject$/;"	c	namespace:OpenXcom
ResearchRequiredState	Geoscape/ResearchRequiredState.cpp	/^ResearchRequiredState::ResearchRequiredState(RuleItem *item)$/;"	f	class:OpenXcom::ResearchRequiredState
ResearchRequiredState	Geoscape/ResearchRequiredState.h	/^class ResearchRequiredState : public State$/;"	c	namespace:OpenXcom
ResearchState	Basescape/ResearchState.cpp	/^ResearchState::ResearchState(Base *base) : _base(base)$/;"	f	class:OpenXcom::ResearchState
ResearchState	Basescape/ResearchState.h	/^class ResearchState : public State$/;"	c	namespace:OpenXcom
ReservedCrossRefrenece	Engine/ScriptBind.h	/^		ReservedCrossRefrenece() {}$/;"	f	class:OpenXcom::ParserWriter::ReservedCrossRefrenece
ReservedCrossRefrenece	Engine/ScriptBind.h	/^	class ReservedCrossRefrenece$/;"	c	struct:OpenXcom::ParserWriter
ReservedPos	Engine/ScriptBind.h	/^		ReservedPos(ProgPos pos) : _pos{ pos }$/;"	f	class:OpenXcom::ParserWriter::ReservedPos
ReservedPos	Engine/ScriptBind.h	/^	class ReservedPos$/;"	c	struct:OpenXcom::ParserWriter
ResistType	Mod/RuleDamageType.h	/^	ItemDamageType ResistType;$/;"	m	struct:OpenXcom::RuleDamageType
ReturnFromMissionUnitParser	Mod/ModScript.h	/^	struct ReturnFromMissionUnitParser : ScriptParserEvents<ScriptOutputArgs<int&, int, int, int&, int&>, BattleUnit*, SavedBattleGame*, Soldier*, const StatAdjustment*, const StatAdjustment*>$/;"	s	class:OpenXcom::ModScript
ReturnFromMissionUnitParser	Savegame/BattleUnit.cpp	/^ModScript::ReturnFromMissionUnitParser::ReturnFromMissionUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::ReturnFromMissionUnitParser
ReverseIterator	Engine/Collections.h	/^		ReverseIterator(It curr) :$/;"	f	struct:OpenXcom::Collections::ReverseIterator
ReverseIterator	Engine/Collections.h	/^	struct ReverseIterator$/;"	s	class:OpenXcom::Collections
RoguePixel	Mod/Mod.cpp	/^		static const Uint8 RoguePixel = 151;$/;"	m	struct:OpenXcom::__anon29::FallXCOM2	file:
RomanianPlurality	Engine/LanguagePlurality.cpp	/^class RomanianPlurality : public LanguagePlurality$/;"	c	namespace:OpenXcom	file:
RotationDegree	Engine/Scalers/xbrz.cpp	/^enum RotationDegree \/\/clock-wise$/;"	g	namespace:__anon10	file:
Round	fmath.h	/^inline double Round(double x)$/;"	f
Round	fmath.h	/^inline float Round(float x)$/;"	f
RuleAlienMission	Mod/RuleAlienMission.cpp	/^RuleAlienMission::RuleAlienMission(const std::string &type) :$/;"	f	class:OpenXcom::RuleAlienMission
RuleAlienMission	Mod/RuleAlienMission.h	/^class RuleAlienMission$/;"	c	namespace:OpenXcom
RuleArcScript	Mod/RuleArcScript.cpp	/^RuleArcScript::RuleArcScript(const std::string& type) :$/;"	f	class:OpenXcom::RuleArcScript
RuleArcScript	Mod/RuleArcScript.h	/^class RuleArcScript$/;"	c	namespace:OpenXcom
RuleBaseFacility	Mod/RuleBaseFacility.cpp	/^RuleBaseFacility::RuleBaseFacility(const std::string &type) :$/;"	f	class:OpenXcom::RuleBaseFacility
RuleBaseFacility	Mod/RuleBaseFacility.h	/^class RuleBaseFacility$/;"	c	namespace:OpenXcom
RuleCommendations	Mod/RuleCommendations.cpp	/^RuleCommendations::RuleCommendations(const std::string& type) : _type(type), _criteria(), _killCriteria(), _description(""), _sprite(), _soldierBonusTypes()$/;"	f	class:OpenXcom::RuleCommendations
RuleCommendations	Mod/RuleCommendations.h	/^class RuleCommendations$/;"	c	namespace:OpenXcom
RuleConverter	Mod/RuleConverter.cpp	/^RuleConverter::RuleConverter()$/;"	f	class:OpenXcom::RuleConverter
RuleConverter	Mod/RuleConverter.h	/^class RuleConverter$/;"	c	namespace:OpenXcom
RuleCountry	Mod/RuleCountry.cpp	/^RuleCountry::RuleCountry(const std::string &type) : _type(type), _fundingBase(0), _fundingCap(0), _labelLon(0.0), _labelLat(0.0), _labelColor(0), _zoomLevel(0)$/;"	f	class:OpenXcom::RuleCountry
RuleCountry	Mod/RuleCountry.h	/^class RuleCountry$/;"	c	namespace:OpenXcom
RuleCraft	Mod/RuleCraft.cpp	/^RuleCraft::RuleCraft(const std::string &type) :$/;"	f	class:OpenXcom::RuleCraft
RuleCraft	Mod/RuleCraft.h	/^class RuleCraft$/;"	c	namespace:OpenXcom
RuleCraftDeployment	Mod/RuleCraft.h	/^typedef std::vector<std::vector<int> > RuleCraftDeployment;$/;"	t	namespace:OpenXcom
RuleCraftStats	Mod/RuleCraft.h	/^	RuleCraftStats() :$/;"	f	struct:OpenXcom::RuleCraftStats
RuleCraftStats	Mod/RuleCraft.h	/^struct RuleCraftStats$/;"	s	namespace:OpenXcom
RuleCraftWeapon	Mod/RuleCraftWeapon.cpp	/^RuleCraftWeapon::RuleCraftWeapon(const std::string &type) :$/;"	f	class:OpenXcom::RuleCraftWeapon
RuleCraftWeapon	Mod/RuleCraftWeapon.h	/^class RuleCraftWeapon$/;"	c	namespace:OpenXcom
RuleDamageType	Mod/RuleDamageType.cpp	/^RuleDamageType::RuleDamageType() :$/;"	f	class:OpenXcom::RuleDamageType
RuleDamageType	Mod/RuleDamageType.h	/^struct RuleDamageType$/;"	s	namespace:OpenXcom
RuleEnviroEffects	Mod/RuleEnviroEffects.cpp	/^RuleEnviroEffects::RuleEnviroEffects(const std::string& type) : _type(type), _mapBackgroundColor(15), _ignoreAutoNightVisionUserSetting(false)$/;"	f	class:OpenXcom::RuleEnviroEffects
RuleEnviroEffects	Mod/RuleEnviroEffects.h	/^class RuleEnviroEffects$/;"	c	namespace:OpenXcom
RuleEvent	Mod/RuleEvent.cpp	/^RuleEvent::RuleEvent(const std::string &name) : _name(name), _background("BACK13.SCR"), _city(false), _points(0), _funds(0), _spawnedPersons(0), _timer(30), _timerRandom(0)$/;"	f	class:OpenXcom::RuleEvent
RuleEvent	Mod/RuleEvent.h	/^class RuleEvent$/;"	c	namespace:OpenXcom
RuleEventScript	Mod/RuleEventScript.cpp	/^RuleEventScript::RuleEventScript(const std::string &type) :$/;"	f	class:OpenXcom::RuleEventScript
RuleEventScript	Mod/RuleEventScript.h	/^class RuleEventScript$/;"	c	namespace:OpenXcom
RuleGlobe	Mod/RuleGlobe.cpp	/^RuleGlobe::RuleGlobe()$/;"	f	class:OpenXcom::RuleGlobe
RuleGlobe	Mod/RuleGlobe.h	/^class RuleGlobe$/;"	c	namespace:OpenXcom
RuleInterface	Mod/RuleInterface.cpp	/^RuleInterface::RuleInterface(const std::string & type) : _type(type), _sound(-1)$/;"	f	class:OpenXcom::RuleInterface
RuleInterface	Mod/RuleInterface.h	/^class RuleInterface$/;"	c	namespace:OpenXcom
RuleInventory	Mod/RuleInventory.cpp	/^RuleInventory::RuleInventory(const std::string &id): _id(id), _x(0), _y(0), _type(INV_SLOT), _listOrder(0), _hand(0)$/;"	f	class:OpenXcom::RuleInventory
RuleInventory	Mod/RuleInventory.h	/^class RuleInventory$/;"	c	namespace:OpenXcom
RuleItem	Mod/RuleItem.cpp	/^RuleItem::RuleItem(const std::string &type) :$/;"	f	class:OpenXcom::RuleItem
RuleItem	Mod/RuleItem.h	/^class RuleItem$/;"	c	namespace:OpenXcom
RuleItemAction	Mod/RuleItem.h	/^struct RuleItemAction$/;"	s	namespace:OpenXcom
RuleItemCategory	Mod/RuleItemCategory.cpp	/^RuleItemCategory::RuleItemCategory(const std::string &type) : _type(type), _hidden(false), _listOrder(0)$/;"	f	class:OpenXcom::RuleItemCategory
RuleItemCategory	Mod/RuleItemCategory.h	/^class RuleItemCategory$/;"	c	namespace:OpenXcom
RuleItemFuseTrigger	Mod/RuleItem.h	/^struct RuleItemFuseTrigger$/;"	s	namespace:OpenXcom
RuleItemUseCost	Mod/RuleItem.h	/^	RuleItemUseCost() : Time(0), Energy(0), Morale(0), Health(0), Stun(0), Mana(0)$/;"	f	struct:OpenXcom::RuleItemUseCost
RuleItemUseCost	Mod/RuleItem.h	/^	RuleItemUseCost(int tu, int rest = 0) : Time(tu), Energy(rest), Morale(rest), Health(rest), Stun(rest), Mana(rest)$/;"	f	struct:OpenXcom::RuleItemUseCost
RuleItemUseCost	Mod/RuleItem.h	/^struct RuleItemUseCost$/;"	s	namespace:OpenXcom
RuleManufacture	Mod/RuleManufacture.cpp	/^RuleManufacture::RuleManufacture(const std::string &name) : _name(name), _space(0), _time(0), _cost(0), _refund(false), _producedCraft(0), _listOrder(0)$/;"	f	class:OpenXcom::RuleManufacture
RuleManufacture	Mod/RuleManufacture.h	/^class RuleManufacture$/;"	c	namespace:OpenXcom
RuleManufactureShortcut	Mod/RuleManufactureShortcut.cpp	/^RuleManufactureShortcut::RuleManufactureShortcut(const std::string &name) : _name(name), _breakDownRequires(false), _breakDownRequiresBaseFunc(true)$/;"	f	class:OpenXcom::RuleManufactureShortcut
RuleManufactureShortcut	Mod/RuleManufactureShortcut.h	/^class RuleManufactureShortcut$/;"	c	namespace:OpenXcom
RuleMissionScript	Mod/RuleMissionScript.cpp	/^RuleMissionScript::RuleMissionScript(const std::string &type) :$/;"	f	class:OpenXcom::RuleMissionScript
RuleMissionScript	Mod/RuleMissionScript.h	/^class RuleMissionScript$/;"	c	namespace:OpenXcom
RuleMusic	Mod/RuleMusic.cpp	/^RuleMusic::RuleMusic(const std::string &type) : _type(type), _catPos(INT_MAX), _normalization(0.76f)$/;"	f	class:OpenXcom::RuleMusic
RuleMusic	Mod/RuleMusic.h	/^class RuleMusic$/;"	c	namespace:OpenXcom
RuleRegion	Mod/RuleRegion.cpp	/^RuleRegion::RuleRegion(const std::string &type): _type(type), _cost(0), _regionWeight(0)$/;"	f	class:OpenXcom::RuleRegion
RuleRegion	Mod/RuleRegion.h	/^class RuleRegion$/;"	c	namespace:OpenXcom
RuleResearch	Mod/RuleResearch.cpp	/^RuleResearch::RuleResearch(const std::string &name) : _name(name), _spawnedItemCount(1), _cost(0), _points(0), _sequentialGetOneFree(false), _needItem(false), _destroyItem(false), _listOrder(0)$/;"	f	class:OpenXcom::RuleResearch
RuleResearch	Mod/RuleResearch.h	/^class RuleResearch$/;"	c	namespace:OpenXcom
RuleSkill	Mod/RuleSkill.cpp	/^RuleSkill::RuleSkill(const std::string& type) : _type(type),$/;"	f	class:OpenXcom::RuleSkill
RuleSkill	Mod/RuleSkill.h	/^class RuleSkill$/;"	c	namespace:OpenXcom
RuleSlot	Mod/RuleInventory.h	/^struct RuleSlot$/;"	s	namespace:OpenXcom
RuleSoldier	Mod/RuleSoldier.cpp	/^RuleSoldier::RuleSoldier(const std::string &type) : _type(type), _listOrder(0), _armor(nullptr), _specWeapon(nullptr),$/;"	f	class:OpenXcom::RuleSoldier
RuleSoldier	Mod/RuleSoldier.h	/^class RuleSoldier$/;"	c	namespace:OpenXcom
RuleSoldierBonus	Mod/RuleSoldierBonus.cpp	/^RuleSoldierBonus::RuleSoldierBonus(const std::string &name) : _name(name), _visibilityAtDark(0), _frontArmor(0), _sideArmor(0), _leftArmorDiff(0), _rearArmor(0), _underArmor(0), _listOrder(0)$/;"	f	class:OpenXcom::RuleSoldierBonus
RuleSoldierBonus	Mod/RuleSoldierBonus.h	/^class RuleSoldierBonus$/;"	c	namespace:OpenXcom
RuleSoldierTransformation	Mod/RuleSoldierTransformation.cpp	/^RuleSoldierTransformation::RuleSoldierTransformation(const std::string &name) :$/;"	f	class:OpenXcom::RuleSoldierTransformation
RuleSoldierTransformation	Mod/RuleSoldierTransformation.h	/^class RuleSoldierTransformation$/;"	c	namespace:OpenXcom
RuleStartingCondition	Mod/RuleStartingCondition.cpp	/^RuleStartingCondition::RuleStartingCondition(const std::string& type) : _type(type), _destroyRequiredItems(false), _requireCommanderOnboard(false)$/;"	f	class:OpenXcom::RuleStartingCondition
RuleStartingCondition	Mod/RuleStartingCondition.h	/^class RuleStartingCondition$/;"	c	namespace:OpenXcom
RuleStatBonus	Mod/RuleStatBonus.cpp	/^RuleStatBonus::RuleStatBonus()$/;"	f	class:OpenXcom::RuleStatBonus
RuleStatBonus	Mod/RuleStatBonus.h	/^class RuleStatBonus$/;"	c	namespace:OpenXcom
RuleStatBonusData	Mod/RuleStatBonus.h	/^typedef std::pair<float (*)(const BattleUnit*), float> RuleStatBonusData;$/;"	t	namespace:OpenXcom
RuleStatBonusDataOrig	Mod/RuleStatBonus.h	/^typedef std::pair<std::string, std::vector<float> > RuleStatBonusDataOrig;$/;"	t	namespace:OpenXcom
RuleTerrain	Mod/RuleTerrain.cpp	/^RuleTerrain::RuleTerrain(const std::string &name) : _name(name), _mapScript("DEFAULT"), _minDepth(0), _maxDepth(0),$/;"	f	class:OpenXcom::RuleTerrain
RuleTerrain	Mod/RuleTerrain.h	/^class RuleTerrain$/;"	c	namespace:OpenXcom
RuleUfo	Mod/RuleUfo.cpp	/^RuleUfo::RuleUfo(const std::string &type) :$/;"	f	class:OpenXcom::RuleUfo
RuleUfo	Mod/RuleUfo.h	/^class RuleUfo$/;"	c	namespace:OpenXcom
RuleUfoStats	Mod/RuleUfo.h	/^struct RuleUfoStats : RuleCraftStats$/;"	s	namespace:OpenXcom
RuleVideo	Mod/RuleVideo.cpp	/^RuleVideo::RuleVideo(const std::string &id) : _id(id), _useUfoAudioSequence(false), _winGame(false), _loseGame(false)$/;"	f	class:OpenXcom::RuleVideo
RuleVideo	Mod/RuleVideo.h	/^class RuleVideo$/;"	c	namespace:OpenXcom
S11	md5.cpp	41;"	d	file:
S12	md5.cpp	42;"	d	file:
S13	md5.cpp	43;"	d	file:
S14	md5.cpp	44;"	d	file:
S21	md5.cpp	45;"	d	file:
S22	md5.cpp	46;"	d	file:
S23	md5.cpp	47;"	d	file:
S24	md5.cpp	48;"	d	file:
S31	md5.cpp	49;"	d	file:
S32	md5.cpp	50;"	d	file:
S33	md5.cpp	51;"	d	file:
S34	md5.cpp	52;"	d	file:
S41	md5.cpp	53;"	d	file:
S42	md5.cpp	54;"	d	file:
S43	md5.cpp	55;"	d	file:
S44	md5.cpp	56;"	d	file:
SAVE_AUTO_BATTLESCAPE	Savegame/SavedGame.h	/^enum SaveType { SAVE_DEFAULT, SAVE_QUICK, SAVE_AUTO_GEOSCAPE, SAVE_AUTO_BATTLESCAPE, SAVE_IRONMAN, SAVE_IRONMAN_END };$/;"	e	enum:OpenXcom::SaveType
SAVE_AUTO_GEOSCAPE	Savegame/SavedGame.h	/^enum SaveType { SAVE_DEFAULT, SAVE_QUICK, SAVE_AUTO_GEOSCAPE, SAVE_AUTO_BATTLESCAPE, SAVE_IRONMAN, SAVE_IRONMAN_END };$/;"	e	enum:OpenXcom::SaveType
SAVE_DEFAULT	Savegame/SavedGame.h	/^enum SaveType { SAVE_DEFAULT, SAVE_QUICK, SAVE_AUTO_GEOSCAPE, SAVE_AUTO_BATTLESCAPE, SAVE_IRONMAN, SAVE_IRONMAN_END };$/;"	e	enum:OpenXcom::SaveType
SAVE_IRONMAN	Savegame/SavedGame.h	/^enum SaveType { SAVE_DEFAULT, SAVE_QUICK, SAVE_AUTO_GEOSCAPE, SAVE_AUTO_BATTLESCAPE, SAVE_IRONMAN, SAVE_IRONMAN_END };$/;"	e	enum:OpenXcom::SaveType
SAVE_IRONMAN_END	Savegame/SavedGame.h	/^enum SaveType { SAVE_DEFAULT, SAVE_QUICK, SAVE_AUTO_GEOSCAPE, SAVE_AUTO_BATTLESCAPE, SAVE_IRONMAN, SAVE_IRONMAN_END };$/;"	e	enum:OpenXcom::SaveType
SAVE_QUICK	Savegame/SavedGame.h	/^enum SaveType { SAVE_DEFAULT, SAVE_QUICK, SAVE_AUTO_GEOSCAPE, SAVE_AUTO_BATTLESCAPE, SAVE_IRONMAN, SAVE_IRONMAN_END };$/;"	e	enum:OpenXcom::SaveType
SA_BATTLESCAPE	Basescape/SoldierArmorState.h	/^	SA_BATTLESCAPE$/;"	e	enum:OpenXcom::SoldierArmorOrigin
SA_GEOSCAPE	Basescape/SoldierArmorState.h	/^	SA_GEOSCAPE,$/;"	e	enum:OpenXcom::SoldierArmorOrigin
SC	Engine/Adlib/fmopl.cpp	179;"	d	file:
SC	Engine/Adlib/fmopl.cpp	184;"	d	file:
SCALE_15X	Engine/Options.h	/^	SCALE_15X,$/;"	e	enum:OpenXcom::ScaleType
SCALE_2X	Engine/Options.h	/^	SCALE_2X,$/;"	e	enum:OpenXcom::ScaleType
SCALE_ORIGINAL	Engine/Options.h	/^	SCALE_ORIGINAL,$/;"	e	enum:OpenXcom::ScaleType
SCALE_SCREEN	Engine/Options.h	/^	SCALE_SCREEN,$/;"	e	enum:OpenXcom::ScaleType
SCALE_SCREEN_DIV_2	Engine/Options.h	/^	SCALE_SCREEN_DIV_2,$/;"	e	enum:OpenXcom::ScaleType
SCALE_SCREEN_DIV_3	Engine/Options.h	/^	SCALE_SCREEN_DIV_3,$/;"	e	enum:OpenXcom::ScaleType
SCALE_SCREEN_DIV_4	Engine/Options.h	/^	SCALE_SCREEN_DIV_4,$/;"	e	enum:OpenXcom::ScaleType
SCALE_SCREEN_DIV_5	Engine/Options.h	/^	SCALE_SCREEN_DIV_5,$/;"	e	enum:OpenXcom::ScaleType
SCALE_SCREEN_DIV_6	Engine/Options.h	/^	SCALE_SCREEN_DIV_6$/;"	e	enum:OpenXcom::ScaleType
SCDST	Engine/Scalers/scalebit.cpp	118;"	d	file:
SCMID	Engine/Scalers/scalebit.cpp	120;"	d	file:
SCROLL_AUTO	Engine/Options.h	/^enum ScrollType { SCROLL_NONE, SCROLL_TRIGGER, SCROLL_AUTO };$/;"	e	enum:OpenXcom::ScrollType
SCROLL_BORDER	Battlescape/Camera.h	/^	static const int SCROLL_BORDER = 5;$/;"	m	class:OpenXcom::Camera
SCROLL_DIAGONAL_EDGE	Battlescape/Camera.h	/^	static const int SCROLL_DIAGONAL_EDGE = 60;$/;"	m	class:OpenXcom::Camera
SCROLL_INTERVAL	Battlescape/Map.h	/^	static const int SCROLL_INTERVAL = 15;$/;"	m	class:OpenXcom::Map
SCROLL_NONE	Engine/Options.h	/^enum ScrollType { SCROLL_NONE, SCROLL_TRIGGER, SCROLL_AUTO };$/;"	e	enum:OpenXcom::ScrollType
SCROLL_TRIGGER	Engine/Options.h	/^enum ScrollType { SCROLL_NONE, SCROLL_TRIGGER, SCROLL_AUTO };$/;"	e	enum:OpenXcom::ScrollType
SCSRC	Engine/Scalers/scalebit.cpp	119;"	d	file:
SDLK_ANY	Engine/InteractiveSurface.cpp	/^const SDLKey InteractiveSurface::SDLK_ANY = (SDLKey)-1; \/\/ using an unused keycode to represent an "any key"$/;"	m	class:OpenXcom::InteractiveSurface	file:
SDLK_ANY	Engine/InteractiveSurface.h	/^	static const SDLKey SDLK_ANY;$/;"	m	class:OpenXcom::InteractiveSurface
SDLPolling	Engine/FlcPlayer.cpp	/^void FlcPlayer::SDLPolling()$/;"	f	class:OpenXcom::FlcPlayer
SDL_LoadFile_RW	Engine/FileMap.cpp	/^void *SDL_LoadFile_RW(SDL_RWops *src, size_t *datasize, int freesrc)$/;"	f
SDL_RWFromMZ	Engine/FileMap.cpp	/^SDL_RWops *SDL_RWFromMZ(mz_zip_archive *zip, mz_uint file_index) {$/;"	f
SDL_RWsize	Engine/FileMap.cpp	/^Sint64 SDL_RWsize(SDL_RWops *src) {$/;"	f
SDL_ReadU8	Engine/FileMap.cpp	/^Uint8 SDL_ReadU8(SDL_RWops *src) {$/;"	f
SDL_VIDEO_CENTERED_CENTER	Engine/Screen.cpp	/^static const char* SDL_VIDEO_CENTERED_CENTER = "SDL_VIDEO_CENTERED=center";$/;"	m	namespace:OpenXcom	file:
SDL_VIDEO_CENTERED_UNSET	Engine/Screen.cpp	/^static const char* SDL_VIDEO_CENTERED_UNSET = "SDL_VIDEO_CENTERED=";$/;"	m	namespace:OpenXcom	file:
SDL_VIDEO_WINDOW_POS_UNSET	Engine/Screen.cpp	/^static const char* SDL_VIDEO_WINDOW_POS_UNSET = "SDL_VIDEO_WINDOW_POS=";$/;"	m	namespace:OpenXcom	file:
SELL_PRICE_COEFFICIENT	Mod/Mod.cpp	/^int Mod::SELL_PRICE_COEFFICIENT[5];$/;"	m	class:OpenXcom::Mod	file:
SELL_PRICE_COEFFICIENT	Mod/Mod.h	/^	static int SELL_PRICE_COEFFICIENT[5];$/;"	m	class:OpenXcom::Mod
SHIELD_MAX	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
SHIELD_MIN	Geoscape/DogfightState.h	/^enum ColorNames { CRAFT_MIN, CRAFT_MAX, RADAR_MIN, RADAR_MAX, DAMAGE_MIN, DAMAGE_MAX, BLOB_MIN, RANGE_METER, DISABLED_WEAPON, DISABLED_AMMO, DISABLED_RANGE, SHIELD_MIN, SHIELD_MAX };$/;"	e	enum:OpenXcom::ColorNames
SIN_ENT	Engine/Adlib/fmopl.cpp	81;"	d	file:
SIN_TABLE	Engine/Adlib/fmopl.cpp	/^static INT32 **SIN_TABLE;$/;"	v	file:
SKIPPED	Engine/FlcPlayer.cpp	/^	SKIPPED$/;"	e	enum:OpenXcom::PlayingState	file:
SKIP_LINES	Engine/FlcPlayer.cpp	/^	SKIP_LINES = 0xc000, \/\/ 1100000000000000$/;"	e	enum:OpenXcom::ChunkOpcodes	file:
SL	Engine/Adlib/fmopl.h	/^	INT32 SL;		\/* sustin level    :SL_TALBE[SL]       *\/$/;"	m	struct:fm_opl_slot
SLIDING_DOOR_CLOSE	Mod/Mod.cpp	/^int Mod::SLIDING_DOOR_CLOSE;$/;"	m	class:OpenXcom::Mod	file:
SLIDING_DOOR_CLOSE	Mod/Mod.h	/^	static int SLIDING_DOOR_CLOSE;$/;"	m	class:OpenXcom::Mod
SLIDING_DOOR_OPEN	Mod/Mod.cpp	/^int Mod::SLIDING_DOOR_OPEN;$/;"	m	class:OpenXcom::Mod	file:
SLIDING_DOOR_OPEN	Mod/Mod.h	/^	static int SLIDING_DOOR_OPEN;$/;"	m	class:OpenXcom::Mod
SLOT	Engine/Adlib/fmopl.h	/^	OPL_SLOT SLOT[2];$/;"	m	struct:fm_opl_channel
SLOT1	Engine/Adlib/fmopl.cpp	110;"	d	file:
SLOT2	Engine/Adlib/fmopl.cpp	111;"	d	file:
SLOT7_1	Engine/Adlib/fmopl.cpp	/^OPL_SLOT *SLOT7_1,*SLOT7_2,*SLOT8_1,*SLOT8_2;$/;"	v
SLOT7_2	Engine/Adlib/fmopl.cpp	/^OPL_SLOT *SLOT7_1,*SLOT7_2,*SLOT8_1,*SLOT8_2;$/;"	v
SLOT8_1	Engine/Adlib/fmopl.cpp	/^OPL_SLOT *SLOT7_1,*SLOT7_2,*SLOT8_1,*SLOT8_2;$/;"	v
SLOT8_2	Engine/Adlib/fmopl.cpp	/^OPL_SLOT *SLOT7_1,*SLOT7_2,*SLOT8_1,*SLOT8_2;$/;"	v
SLOT_H	Mod/RuleInventory.h	/^	static const int SLOT_H = 16;$/;"	m	class:OpenXcom::RuleInventory
SLOT_W	Mod/RuleInventory.h	/^	static const int SLOT_W = 16;$/;"	m	class:OpenXcom::RuleInventory
SL_TABLE	Engine/Adlib/fmopl.cpp	/^static const INT32 SL_TABLE[16]={$/;"	v	file:
SMALL_EXPLOSION	Mod/Mod.cpp	/^int Mod::SMALL_EXPLOSION;$/;"	m	class:OpenXcom::Mod	file:
SMALL_EXPLOSION	Mod/Mod.h	/^	static int SMALL_EXPLOSION;$/;"	m	class:OpenXcom::Mod
SMOKE_OFFSET	Mod/Mod.cpp	/^int Mod::SMOKE_OFFSET;$/;"	m	class:OpenXcom::Mod	file:
SMOKE_OFFSET	Mod/Mod.h	/^	static int SMOKE_OFFSET;$/;"	m	class:OpenXcom::Mod
SMT_BATTLESCAPE	Geoscape/SelectMusicTrackState.h	/^	SMT_BATTLESCAPE$/;"	e	enum:OpenXcom::SelectMusicTrackOrigin
SMT_GEOSCAPE	Geoscape/SelectMusicTrackState.h	/^	SMT_GEOSCAPE,$/;"	e	enum:OpenXcom::SelectMusicTrackOrigin
SORT_DATE_ASC	Engine/Options.h	/^enum SaveSort { SORT_NAME_ASC, SORT_NAME_DESC, SORT_DATE_ASC, SORT_DATE_DESC };$/;"	e	enum:OpenXcom::SaveSort
SORT_DATE_DESC	Engine/Options.h	/^enum SaveSort { SORT_NAME_ASC, SORT_NAME_DESC, SORT_DATE_ASC, SORT_DATE_DESC };$/;"	e	enum:OpenXcom::SaveSort
SORT_NAME_ASC	Engine/Options.h	/^enum SaveSort { SORT_NAME_ASC, SORT_NAME_DESC, SORT_DATE_ASC, SORT_DATE_DESC };$/;"	e	enum:OpenXcom::SaveSort
SORT_NAME_DESC	Engine/Options.h	/^enum SaveSort { SORT_NAME_ASC, SORT_NAME_DESC, SORT_DATE_ASC, SORT_DATE_DESC };$/;"	e	enum:OpenXcom::SaveSort
SOUND_10	Engine/Options.h	/^enum SoundFormat { SOUND_AUTO, SOUND_14, SOUND_10 };$/;"	e	enum:OpenXcom::SoundFormat
SOUND_14	Engine/Options.h	/^enum SoundFormat { SOUND_AUTO, SOUND_14, SOUND_10 };$/;"	e	enum:OpenXcom::SoundFormat
SOUND_AUTO	Engine/Options.h	/^enum SoundFormat { SOUND_AUTO, SOUND_14, SOUND_10 };$/;"	e	enum:OpenXcom::SoundFormat
SPACING	Geoscape/MultipleTargetsState.h	/^	static const int SPACING = 4;$/;"	m	class:OpenXcom::MultipleTargetsState
SPECAB_BURNFLOOR	Mod/Unit.h	/^enum SpecialAbility { SPECAB_NONE, SPECAB_EXPLODEONDEATH, SPECAB_BURNFLOOR, SPECAB_BURN_AND_EXPLODE };$/;"	e	enum:OpenXcom::SpecialAbility
SPECAB_BURN_AND_EXPLODE	Mod/Unit.h	/^enum SpecialAbility { SPECAB_NONE, SPECAB_EXPLODEONDEATH, SPECAB_BURNFLOOR, SPECAB_BURN_AND_EXPLODE };$/;"	e	enum:OpenXcom::SpecialAbility
SPECAB_EXPLODEONDEATH	Mod/Unit.h	/^enum SpecialAbility { SPECAB_NONE, SPECAB_EXPLODEONDEATH, SPECAB_BURNFLOOR, SPECAB_BURN_AND_EXPLODE };$/;"	e	enum:OpenXcom::SpecialAbility
SPECAB_NONE	Mod/Unit.h	/^enum SpecialAbility { SPECAB_NONE, SPECAB_EXPLODEONDEATH, SPECAB_BURNFLOOR, SPECAB_BURN_AND_EXPLODE };$/;"	e	enum:OpenXcom::SpecialAbility
SPECIAL_BUTTONS_MAX	Battlescape/BattlescapeState.h	/^	static const int SPECIAL_BUTTONS_MAX = 3;$/;"	m	class:OpenXcom::BattlescapeState
SPEC_WEAPON_MAX	Savegame/BattleUnit.h	/^	static const int SPEC_WEAPON_MAX = 3;$/;"	m	class:OpenXcom::BattleUnit
SSDST	Engine/Scalers/scalebit.cpp	40;"	d	file:
SSSRC	Engine/Scalers/scalebit.cpp	41;"	d	file:
STANDOFF_DIST	Geoscape/DogfightState.h	/^const int STANDOFF_DIST = 560;$/;"	m	namespace:OpenXcom
STATUS_AIMING	Savegame/BattleUnit.h	/^enum UnitStatus {STATUS_STANDING, STATUS_WALKING, STATUS_FLYING, STATUS_TURNING, STATUS_AIMING, STATUS_COLLAPSING, STATUS_DEAD, STATUS_UNCONSCIOUS, STATUS_PANICKING, STATUS_BERSERK, STATUS_IGNORE_ME};$/;"	e	enum:OpenXcom::UnitStatus
STATUS_BERSERK	Savegame/BattleUnit.h	/^enum UnitStatus {STATUS_STANDING, STATUS_WALKING, STATUS_FLYING, STATUS_TURNING, STATUS_AIMING, STATUS_COLLAPSING, STATUS_DEAD, STATUS_UNCONSCIOUS, STATUS_PANICKING, STATUS_BERSERK, STATUS_IGNORE_ME};$/;"	e	enum:OpenXcom::UnitStatus
STATUS_COLLAPSING	Savegame/BattleUnit.h	/^enum UnitStatus {STATUS_STANDING, STATUS_WALKING, STATUS_FLYING, STATUS_TURNING, STATUS_AIMING, STATUS_COLLAPSING, STATUS_DEAD, STATUS_UNCONSCIOUS, STATUS_PANICKING, STATUS_BERSERK, STATUS_IGNORE_ME};$/;"	e	enum:OpenXcom::UnitStatus
STATUS_DEAD	Savegame/BattleUnit.h	/^enum UnitStatus {STATUS_STANDING, STATUS_WALKING, STATUS_FLYING, STATUS_TURNING, STATUS_AIMING, STATUS_COLLAPSING, STATUS_DEAD, STATUS_UNCONSCIOUS, STATUS_PANICKING, STATUS_BERSERK, STATUS_IGNORE_ME};$/;"	e	enum:OpenXcom::UnitStatus
STATUS_FLYING	Savegame/BattleUnit.h	/^enum UnitStatus {STATUS_STANDING, STATUS_WALKING, STATUS_FLYING, STATUS_TURNING, STATUS_AIMING, STATUS_COLLAPSING, STATUS_DEAD, STATUS_UNCONSCIOUS, STATUS_PANICKING, STATUS_BERSERK, STATUS_IGNORE_ME};$/;"	e	enum:OpenXcom::UnitStatus
STATUS_IGNORE_ME	Savegame/BattleUnit.h	/^enum UnitStatus {STATUS_STANDING, STATUS_WALKING, STATUS_FLYING, STATUS_TURNING, STATUS_AIMING, STATUS_COLLAPSING, STATUS_DEAD, STATUS_UNCONSCIOUS, STATUS_PANICKING, STATUS_BERSERK, STATUS_IGNORE_ME};$/;"	e	enum:OpenXcom::UnitStatus
STATUS_PANICKING	Savegame/BattleUnit.h	/^enum UnitStatus {STATUS_STANDING, STATUS_WALKING, STATUS_FLYING, STATUS_TURNING, STATUS_AIMING, STATUS_COLLAPSING, STATUS_DEAD, STATUS_UNCONSCIOUS, STATUS_PANICKING, STATUS_BERSERK, STATUS_IGNORE_ME};$/;"	e	enum:OpenXcom::UnitStatus
STATUS_STANDING	Savegame/BattleUnit.h	/^enum UnitStatus {STATUS_STANDING, STATUS_WALKING, STATUS_FLYING, STATUS_TURNING, STATUS_AIMING, STATUS_COLLAPSING, STATUS_DEAD, STATUS_UNCONSCIOUS, STATUS_PANICKING, STATUS_BERSERK, STATUS_IGNORE_ME};$/;"	e	enum:OpenXcom::UnitStatus
STATUS_TURNING	Savegame/BattleUnit.h	/^enum UnitStatus {STATUS_STANDING, STATUS_WALKING, STATUS_FLYING, STATUS_TURNING, STATUS_AIMING, STATUS_COLLAPSING, STATUS_DEAD, STATUS_UNCONSCIOUS, STATUS_PANICKING, STATUS_BERSERK, STATUS_IGNORE_ME};$/;"	e	enum:OpenXcom::UnitStatus
STATUS_UNCONSCIOUS	Savegame/BattleUnit.h	/^enum UnitStatus {STATUS_STANDING, STATUS_WALKING, STATUS_FLYING, STATUS_TURNING, STATUS_AIMING, STATUS_COLLAPSING, STATUS_DEAD, STATUS_UNCONSCIOUS, STATUS_PANICKING, STATUS_BERSERK, STATUS_IGNORE_ME};$/;"	e	enum:OpenXcom::UnitStatus
STATUS_WALKING	Savegame/BattleUnit.h	/^enum UnitStatus {STATUS_STANDING, STATUS_WALKING, STATUS_FLYING, STATUS_TURNING, STATUS_AIMING, STATUS_COLLAPSING, STATUS_DEAD, STATUS_UNCONSCIOUS, STATUS_PANICKING, STATUS_BERSERK, STATUS_IGNORE_ME};$/;"	e	enum:OpenXcom::UnitStatus
STR_NULL	Mod/Mod.cpp	/^const std::string Mod::STR_NULL = { '\\0' };$/;"	m	class:OpenXcom::Mod	file:
STR_NULL	Mod/Mod.h	/^	static const std::string STR_NULL;$/;"	m	class:OpenXcom::Mod
S_CH	Engine/Adlib/fmopl.cpp	/^static OPL_CH *S_CH;$/;"	v	file:
SackSoldierState	Basescape/SackSoldierState.cpp	/^SackSoldierState::SackSoldierState(Base *base, size_t soldierId) : _base(base), _soldierId(soldierId)$/;"	f	class:OpenXcom::SackSoldierState
SackSoldierState	Basescape/SackSoldierState.h	/^class SackSoldierState : public State$/;"	c	namespace:OpenXcom
SaveConverter	Savegame/SaveConverter.cpp	/^SaveConverter::SaveConverter(int save, Mod *mod) : _save(0), _mod(mod), _rules(mod->getConverter()), _year(0), _funds(0)$/;"	f	class:OpenXcom::SaveConverter
SaveConverter	Savegame/SaveConverter.h	/^class SaveConverter$/;"	c	namespace:OpenXcom
SaveGameState	Menu/SaveGameState.cpp	/^SaveGameState::SaveGameState(OptionsOrigin origin, SaveType type, SDL_Color *palette, int currentTurn) : _firstRun(0), _origin(origin), _type(type)$/;"	f	class:OpenXcom::SaveGameState
SaveGameState	Menu/SaveGameState.cpp	/^SaveGameState::SaveGameState(OptionsOrigin origin, const std::string &filename, SDL_Color *palette) : _firstRun(0), _origin(origin), _filename(filename), _type(SAVE_DEFAULT)$/;"	f	class:OpenXcom::SaveGameState
SaveGameState	Menu/SaveGameState.h	/^class SaveGameState : public State$/;"	c	namespace:OpenXcom
SaveInfo	Savegame/SavedGame.h	/^struct SaveInfo$/;"	s	namespace:OpenXcom
SaveOriginal	Savegame/SaveConverter.h	/^	SaveOriginal() : id(0), tactical(false)$/;"	f	struct:OpenXcom::SaveOriginal
SaveOriginal	Savegame/SaveConverter.h	/^struct SaveOriginal$/;"	s	namespace:OpenXcom
SaveSort	Engine/Options.h	/^enum SaveSort { SORT_NAME_ASC, SORT_NAME_DESC, SORT_DATE_ASC, SORT_DATE_DESC };$/;"	g	namespace:OpenXcom
SaveType	Savegame/SavedGame.h	/^enum SaveType { SAVE_DEFAULT, SAVE_QUICK, SAVE_AUTO_GEOSCAPE, SAVE_AUTO_BATTLESCAPE, SAVE_IRONMAN, SAVE_IRONMAN_END };$/;"	g	namespace:OpenXcom
SavedBattleGame	Savegame/SavedBattleGame.cpp	/^SavedBattleGame::SavedBattleGame(Mod *rule, Language *lang, bool isPreview) :$/;"	f	class:OpenXcom::SavedBattleGame
SavedBattleGame	Savegame/SavedBattleGame.h	/^class SavedBattleGame$/;"	c	namespace:OpenXcom
SavedGame	Savegame/SavedGame.cpp	/^SavedGame::SavedGame() :$/;"	f	class:OpenXcom::SavedGame
SavedGame	Savegame/SavedGame.h	/^class SavedGame$/;"	c	namespace:OpenXcom
Scalar	Engine/ShaderDrawHelper.h	/^	inline Scalar(T& t) : ref(t)$/;"	f	class:OpenXcom::helper::Scalar
Scalar	Engine/ShaderDrawHelper.h	/^class Scalar$/;"	c	namespace:OpenXcom::helper
ScaleType	Engine/Options.h	/^enum ScaleType$/;"	g	namespace:OpenXcom
Scaler2x	Engine/Scalers/xbrz.cpp	/^struct Scaler2x : public ColorGradient$/;"	s	namespace:__anon10	file:
Scaler3x	Engine/Scalers/xbrz.cpp	/^struct Scaler3x : public ColorGradient$/;"	s	namespace:__anon10	file:
Scaler4x	Engine/Scalers/xbrz.cpp	/^struct Scaler4x : public ColorGradient$/;"	s	namespace:__anon10	file:
Scaler5x	Engine/Scalers/xbrz.cpp	/^struct Scaler5x : public ColorGradient$/;"	s	namespace:__anon10	file:
Scaler6x	Engine/Scalers/xbrz.cpp	/^struct Scaler6x : public ColorGradient$/;"	s	namespace:__anon10	file:
ScalerCfg	Engine/Scalers/config.h	/^    ScalerCfg() :$/;"	f	struct:xbrz::ScalerCfg
ScalerCfg	Engine/Scalers/config.h	/^struct ScalerCfg$/;"	s	namespace:xbrz
ScannerState	Battlescape/ScannerState.cpp	/^ScannerState::ScannerState (BattleAction *action) : _action(action)$/;"	f	class:OpenXcom::ScannerState
ScannerState	Battlescape/ScannerState.h	/^class ScannerState : public State$/;"	c	namespace:OpenXcom
ScannerView	Battlescape/ScannerView.cpp	/^ScannerView::ScannerView (int w, int h, int x, int y, Game * game, BattleUnit *unit) : InteractiveSurface(w, h, x, y), _game(game), _unit(unit), _frame(0)$/;"	f	class:OpenXcom::ScannerView
ScannerView	Battlescape/ScannerView.h	/^class ScannerView : public InteractiveSurface$/;"	c	namespace:OpenXcom
Screen	Engine/Screen.cpp	/^Screen::Screen() : _baseWidth(ORIGINAL_WIDTH), _baseHeight(ORIGINAL_HEIGHT), _scaleX(1.0), _scaleY(1.0), _flags(0), _numColors(0), _firstColor(0), _pushPalette(false), _flickerFix(false)$/;"	f	class:OpenXcom::Screen
Screen	Engine/Screen.h	/^class Screen$/;"	c	namespace:OpenXcom
ScreenOffset	Battlescape/Map.h	/^	Position ScreenOffset;$/;"	m	struct:OpenXcom::UnitWalkingOffset
ScriptFill	Savegame/BattleItem.cpp	/^void BattleItem::ScriptFill(ScriptWorkerBlit* w, const BattleItem* item, const SavedBattleGame* save, int part, int anim_frame, int shade)$/;"	f	class:OpenXcom::BattleItem
ScriptFill	Savegame/BattleUnit.cpp	/^void BattleUnit::ScriptFill(ScriptWorkerBlit* w, const BattleUnit* unit, const SavedBattleGame* save, int body_part, int anim_frame, int shade, int burn)$/;"	f	class:OpenXcom::BattleUnit
ScriptGlobal	Engine/Script.cpp	/^ScriptGlobal::ScriptGlobal()$/;"	f	class:OpenXcom::ScriptGlobal
ScriptMaxArg	Engine/Script.h	/^constexpr size_t ScriptMaxArg = 16;$/;"	m	namespace:OpenXcom
ScriptMaxOut	Engine/Script.h	/^constexpr size_t ScriptMaxOut = 9;$/;"	m	namespace:OpenXcom	typeref:class:OpenXcom::ProgPos
ScriptMaxReg	Engine/Script.h	/^constexpr size_t ScriptMaxReg = 64*sizeof(void*);$/;"	m	namespace:OpenXcom
ScriptName	Mod/Armor.h	/^	static constexpr const char *ScriptName = "RuleArmor";$/;"	m	class:OpenXcom::Armor
ScriptName	Mod/Mod.h	/^	static constexpr const char *ScriptName = "RuleMod";$/;"	m	class:OpenXcom::Mod
ScriptName	Mod/RuleCraft.h	/^	static constexpr const char *ScriptName = "RuleCraft";$/;"	m	class:OpenXcom::RuleCraft
ScriptName	Mod/RuleInventory.h	/^	static constexpr const char *ScriptName = "RuleInventory";$/;"	m	class:OpenXcom::RuleInventory
ScriptName	Mod/RuleItem.h	/^	static constexpr const char *ScriptName = "RuleItem";$/;"	m	class:OpenXcom::RuleItem
ScriptName	Mod/RuleResearch.h	/^	static constexpr const char* ScriptName = "RuleResearch";$/;"	m	class:OpenXcom::RuleResearch
ScriptName	Mod/RuleSkill.h	/^	static constexpr const char* ScriptName = "RuleSkill";$/;"	m	class:OpenXcom::RuleSkill
ScriptName	Mod/RuleSoldier.h	/^	static constexpr const char *ScriptName = "RuleSoldier";$/;"	m	class:OpenXcom::RuleSoldier
ScriptName	Mod/RuleSoldierBonus.h	/^	static constexpr const char *ScriptName = "RuleSoldierBonus";$/;"	m	class:OpenXcom::RuleSoldierBonus
ScriptName	Mod/RuleUfo.h	/^	static constexpr const char *ScriptName = "RuleUfo";$/;"	m	class:OpenXcom::RuleUfo
ScriptName	Mod/Unit.h	/^	static constexpr const char *ScriptName = "RuleUnit";$/;"	m	class:OpenXcom::Unit
ScriptName	Mod/Unit.h	/^	static constexpr const char *ScriptName = "StatAdjustment";$/;"	m	struct:OpenXcom::StatAdjustment
ScriptName	Savegame/BattleItem.h	/^	static constexpr const char *ScriptName = "BattleItem";$/;"	m	class:OpenXcom::BattleItem
ScriptName	Savegame/BattleUnit.h	/^	static constexpr const char *ScriptName = "BattleUnit";$/;"	m	class:OpenXcom::BattleUnit
ScriptName	Savegame/BattleUnit.h	/^	static constexpr const char *ScriptName = "BattleUnitVisibility";$/;"	m	class:OpenXcom::BattleUnitVisibility
ScriptName	Savegame/Craft.h	/^	static constexpr const char *ScriptName = "Craft";$/;"	m	class:OpenXcom::Craft
ScriptName	Savegame/SavedBattleGame.h	/^	static constexpr const char *ScriptName = "BattleGame";$/;"	m	class:OpenXcom::SavedBattleGame
ScriptName	Savegame/SavedGame.h	/^	static constexpr const char *ScriptName = "GeoscapeGame";$/;"	m	class:OpenXcom::SavedGame
ScriptName	Savegame/Soldier.h	/^	static constexpr const char *ScriptName = "GeoscapeSoldier";$/;"	m	class:OpenXcom::Soldier
ScriptName	Savegame/Tile.h	/^	static constexpr const char *ScriptName = "Tile";$/;"	m	class:OpenXcom::Tile
ScriptName	Savegame/Ufo.h	/^	static constexpr const char *ScriptName = "Ufo";$/;"	m	class:OpenXcom::Ufo
ScriptName	Ufopaedia/StatsForNerdsState.h	/^	static constexpr const char *ScriptName = "StatsForNerds";$/;"	m	class:OpenXcom::StatsForNerdsState
ScriptParserBase	Engine/Script.cpp	/^ScriptParserBase::ScriptParserBase(ScriptGlobal* shared, const std::string& name) :$/;"	f	class:OpenXcom::ScriptParserBase
ScriptParserEventsBase	Engine/Script.cpp	/^ScriptParserEventsBase::ScriptParserEventsBase(ScriptGlobal* shared, const std::string& name) : ScriptParserBase(shared, name)$/;"	f	class:OpenXcom::ScriptParserEventsBase
ScriptRefTokens	Engine/Script.cpp	/^class ScriptRefTokens : public ScriptRef$/;"	c	namespace:OpenXcom	file:
ScriptRegister	Mod/Armor.cpp	/^void Armor::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::Armor
ScriptRegister	Mod/Mod.cpp	/^void Mod::ScriptRegister(ScriptParserBase *parser)$/;"	f	class:OpenXcom::Mod
ScriptRegister	Mod/RuleCraft.cpp	/^void RuleCraft::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::RuleCraft
ScriptRegister	Mod/RuleInventory.cpp	/^void RuleInventory::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::RuleInventory
ScriptRegister	Mod/RuleItem.cpp	/^void RuleItem::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::RuleItem
ScriptRegister	Mod/RuleResearch.cpp	/^void RuleResearch::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::RuleResearch
ScriptRegister	Mod/RuleSkill.cpp	/^void RuleSkill::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::RuleSkill
ScriptRegister	Mod/RuleSoldier.cpp	/^void RuleSoldier::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::RuleSoldier
ScriptRegister	Mod/RuleSoldierBonus.cpp	/^void RuleSoldierBonus::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::RuleSoldierBonus
ScriptRegister	Mod/RuleUfo.cpp	/^void RuleUfo::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::RuleUfo
ScriptRegister	Mod/Unit.cpp	/^void StatAdjustment::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::StatAdjustment
ScriptRegister	Mod/Unit.cpp	/^void Unit::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::Unit
ScriptRegister	Savegame/BattleItem.cpp	/^void BattleItem::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::BattleItem
ScriptRegister	Savegame/BattleUnit.cpp	/^void BattleUnit::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::BattleUnit
ScriptRegister	Savegame/BattleUnit.cpp	/^void BattleUnitVisibility::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::BattleUnitVisibility
ScriptRegister	Savegame/Craft.cpp	/^void Craft::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::Craft
ScriptRegister	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::SavedBattleGame
ScriptRegister	Savegame/SavedGame.cpp	/^void SavedGame::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::SavedGame
ScriptRegister	Savegame/Soldier.cpp	/^void Soldier::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::Soldier
ScriptRegister	Savegame/Tile.cpp	/^void Tile::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::Tile
ScriptRegister	Savegame/Ufo.cpp	/^void Ufo::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::Ufo
ScriptRegister	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::ScriptRegister(ScriptParserBase* parser)$/;"	f	class:OpenXcom::StatsForNerdsState
ScriptText	Engine/Script.h	/^struct ScriptText$/;"	s	namespace:OpenXcom
ScrollBar	Interface/ScrollBar.cpp	/^ScrollBar::ScrollBar(int width, int height, int x, int y) : InteractiveSurface(width, height, x, y), _list(0), _color(0), _pressed(false), _contrast(false), _offset(0), _bg(0)$/;"	f	class:OpenXcom::ScrollBar
ScrollBar	Interface/ScrollBar.h	/^class ScrollBar : public InteractiveSurface$/;"	c	namespace:OpenXcom
ScrollType	Engine/Options.h	/^enum ScrollType { SCROLL_NONE, SCROLL_TRIGGER, SCROLL_AUTO };$/;"	g	namespace:OpenXcom
SelectDestinationState	Geoscape/SelectDestinationState.cpp	/^SelectDestinationState::SelectDestinationState(std::vector<Craft*> crafts, Globe *globe) : _crafts(std::move(crafts)), _globe(globe)$/;"	f	class:OpenXcom::SelectDestinationState
SelectDestinationState	Geoscape/SelectDestinationState.h	/^class SelectDestinationState : public State$/;"	c	namespace:OpenXcom
SelectItemParser	Mod/ModScript.h	/^	struct SelectItemParser : ScriptParserEvents<Output, const BattleItem*, const SavedBattleGame*, int, int, int>$/;"	s	class:OpenXcom::ModScript
SelectItemParser	Savegame/BattleItem.cpp	/^ModScript::SelectItemParser::SelectItemParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::SelectItemParser
SelectMoveSoundUnitParser	Mod/ModScript.h	/^	struct SelectMoveSoundUnitParser : ScriptParserEvents<ScriptOutputArgs<int&>, const BattleUnit*, int, int, int, int, int, int, int>$/;"	s	class:OpenXcom::ModScript
SelectMoveSoundUnitParser	Savegame/BattleUnit.cpp	/^ModScript::SelectMoveSoundUnitParser::SelectMoveSoundUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::SelectMoveSoundUnitParser
SelectMusicTrackOrigin	Geoscape/SelectMusicTrackState.h	/^enum SelectMusicTrackOrigin$/;"	g	namespace:OpenXcom
SelectMusicTrackState	Geoscape/SelectMusicTrackState.cpp	/^SelectMusicTrackState::SelectMusicTrackState(SelectMusicTrackOrigin origin) : _origin(origin)$/;"	f	class:OpenXcom::SelectMusicTrackState
SelectMusicTrackState	Geoscape/SelectMusicTrackState.h	/^class SelectMusicTrackState : public State$/;"	c	namespace:OpenXcom
SelectStartFacilityState	Basescape/SelectStartFacilityState.cpp	/^SelectStartFacilityState::SelectStartFacilityState(Base *base, State *state, Globe *globe) : BuildFacilitiesState(base, state), _globe(globe)$/;"	f	class:OpenXcom::SelectStartFacilityState
SelectStartFacilityState	Basescape/SelectStartFacilityState.h	/^class SelectStartFacilityState : public BuildFacilitiesState$/;"	c	namespace:OpenXcom
SelectUnitParser	Mod/ModScript.h	/^	struct SelectUnitParser : ScriptParserEvents<Output, const BattleUnit*, const SavedBattleGame*, int, int, int>$/;"	s	class:OpenXcom::ModScript
SelectUnitParser	Savegame/BattleUnit.cpp	/^ModScript::SelectUnitParser::SelectUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::SelectUnitParser
SelectedToken	Engine/Script.cpp	/^	SelectedToken() : ScriptRef{ }, _type{ TokenNone }$/;"	f	class:OpenXcom::SelectedToken
SelectedToken	Engine/Script.cpp	/^	SelectedToken(TokenEnum type, ScriptRef range) : ScriptRef{ range }, _type{ type }$/;"	f	class:OpenXcom::SelectedToken
SelectedToken	Engine/Script.cpp	/^class SelectedToken : public ScriptRef$/;"	c	namespace:OpenXcom	file:
SellState	Basescape/SellState.cpp	/^SellState::SellState(Base *base, DebriefingState *debriefingState, OptionsOrigin origin) : _base(base), _debriefingState(debriefingState), _sel(0), _total(0), _spaceChange(0), _origin(origin),$/;"	f	class:OpenXcom::SellState
SellState	Basescape/SellState.h	/^class SellState : public State$/;"	c	namespace:OpenXcom
SerializationKey	Savegame/Tile.h	/^	static struct SerializationKey$/;"	s	class:OpenXcom::Tile
SetAndGet	Engine/ScriptBind.h	/^	struct SetAndGet{};$/;"	s	struct:OpenXcom::BindBase
SetID	Savegame/Tile.h	/^		int SetID[O_MAX];$/;"	m	struct:OpenXcom::Tile::TileMapDataCache
SetRetaliationTarget	Geoscape/GeoscapeState.cpp	/^struct SetRetaliationTarget$/;"	s	namespace:OpenXcom	file:
SetWindowedRootState	Menu/SetWindowedRootState.cpp	/^SetWindowedRootState::SetWindowedRootState(OptionsOrigin origin, OptionsVideoState *optionsVideoState) : _origin(origin), _optionsVideoState(optionsVideoState)$/;"	f	class:OpenXcom::SetWindowedRootState
SetWindowedRootState	Menu/SetWindowedRootState.h	/^class SetWindowedRootState : public State$/;"	c	namespace:OpenXcom
SeverityLevel	Engine/Logger.h	/^enum SeverityLevel$/;"	g	namespace:OpenXcom
ShadeMax	Mod/Mod.cpp	/^	const Uint8 ShadeMax = 15;$/;"	m	namespace:OpenXcom::__anon29	file:
ShaderBase	Engine/ShaderDrawHelper.h	/^	inline ShaderBase(SurfaceRaw<Pixel> s):$/;"	f	class:OpenXcom::helper::ShaderBase
ShaderBase	Engine/ShaderDrawHelper.h	/^	inline ShaderBase(const ShaderBase& s):$/;"	f	class:OpenXcom::helper::ShaderBase
ShaderBase	Engine/ShaderDrawHelper.h	/^	inline ShaderBase(const ShaderBase<typename std::remove_const<Pixel>::type>& s):$/;"	f	class:OpenXcom::helper::ShaderBase
ShaderBase	Engine/ShaderDrawHelper.h	/^class ShaderBase$/;"	c	namespace:OpenXcom::helper
ShaderCrop	Engine/ShaderMove.h	/^inline ShaderMove<const Uint8> ShaderCrop(SurfaceCrop s)$/;"	f	namespace:OpenXcom
ShaderCrop	Engine/ShaderMove.h	/^inline ShaderMove<const Uint8> ShaderCrop(SurfaceCrop s, int x, int y)$/;"	f	namespace:OpenXcom
ShaderDraw	Engine/ShaderDraw.h	/^static inline void ShaderDraw(const SrcType&... src_frame)$/;"	f	namespace:OpenXcom
ShaderDrawFunc	Engine/ShaderDraw.h	/^static inline void ShaderDrawFunc(Func&& f, const SrcType&... src_frame)$/;"	f	namespace:OpenXcom
ShaderDrawImpl	Engine/ShaderDraw.h	/^static inline void ShaderDrawImpl(Func&& f, helper::controler<SrcType>... src)$/;"	f	namespace:OpenXcom
ShaderMove	Engine/ShaderMove.h	/^	inline ShaderMove(SurfaceRaw<Pixel> s):$/;"	f	class:OpenXcom::ShaderMove
ShaderMove	Engine/ShaderMove.h	/^	inline ShaderMove(SurfaceRaw<Pixel> s, int move_x, int move_y):$/;"	f	class:OpenXcom::ShaderMove
ShaderMove	Engine/ShaderMove.h	/^	inline ShaderMove(const ShaderMove& f):$/;"	f	class:OpenXcom::ShaderMove
ShaderMove	Engine/ShaderMove.h	/^class ShaderMove : public helper::ShaderBase<Pixel>$/;"	c	namespace:OpenXcom
ShaderRepeat	Engine/ShaderRepeat.h	/^	inline ShaderRepeat(SurfaceRaw<Pixel> s):$/;"	f	class:OpenXcom::ShaderRepeat
ShaderRepeat	Engine/ShaderRepeat.h	/^	inline ShaderRepeat(SurfaceRaw<const Pixel> s):$/;"	f	class:OpenXcom::ShaderRepeat
ShaderRepeat	Engine/ShaderRepeat.h	/^class ShaderRepeat : public helper::ShaderBase<const Pixel>$/;"	c	namespace:OpenXcom
ShaderScalar	Engine/ShaderDraw.h	/^static inline helper::Scalar<T> ShaderScalar(T& t)$/;"	f	namespace:OpenXcom
ShaderScalar	Engine/ShaderDraw.h	/^static inline helper::Scalar<const T> ShaderScalar(const T& t)$/;"	f	namespace:OpenXcom
ShaderSurface	Engine/ShaderDraw.h	/^inline helper::ShaderBase<Pixel> ShaderSurface(std::vector<Pixel>& s, int max_x, int max_y)$/;"	f	namespace:OpenXcom
ShaderSurface	Engine/ShaderMove.h	/^inline ShaderMove<T> ShaderSurface(SurfaceRaw<T> s)$/;"	f	namespace:OpenXcom
ShaderSurface	Engine/ShaderMove.h	/^inline ShaderMove<Uint8> ShaderSurface(SurfaceRaw<Uint8> s)$/;"	f	namespace:OpenXcom
ShaderSurface	Engine/ShaderMove.h	/^inline ShaderMove<Uint8> ShaderSurface(SurfaceRaw<Uint8> s, int x, int y)$/;"	f	namespace:OpenXcom
SickBayAbsoluteBonus	Savegame/Base.h	/^	float SickBayAbsoluteBonus = 0.0f;$/;"	m	struct:OpenXcom::BaseSumDailyRecovery
SickBayRelativeBonus	Savegame/Base.h	/^	float SickBayRelativeBonus = 0.0f;$/;"	m	struct:OpenXcom::BaseSumDailyRecovery
Sign	fmath.h	/^inline _Tx Sign(const _Tx& x)$/;"	f
SingleRun	Battlescape/BattlescapeGame.h	/^	class SingleRun$/;"	c	class:OpenXcom::BattlescapeGame
SkillMenuState	Battlescape/SkillMenuState.cpp	/^SkillMenuState::SkillMenuState(BattleAction *action, int x, int y) : ActionMenuState(action)$/;"	f	class:OpenXcom::SkillMenuState
SkillMenuState	Battlescape/SkillMenuState.h	/^class SkillMenuState : public ActionMenuState$/;"	c	namespace:OpenXcom
SkillUseUnitParser	Mod/ModScript.h	/^	struct SkillUseUnitParser : ScriptParserEvents<ScriptOutputArgs<int&, int&>, BattleUnit*, BattleItem*, SavedBattleGame*, const RuleSkill*, int, int>$/;"	s	class:OpenXcom::ModScript
SkillUseUnitParser	Savegame/BattleUnit.cpp	/^ModScript::SkillUseUnitParser::SkillUseUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents { shared, name,$/;"	f	class:OpenXcom::ModScript::SkillUseUnitParser
SliceType	Engine/Scalers/xbrz.h	/^enum SliceType$/;"	g	namespace:xbrz
Slider	Interface/Slider.cpp	/^Slider::Slider(int width, int height, int x, int y) : InteractiveSurface(width, height, x, y), _pos(0.0), _min(0), _max(100), _pressed(false), _change(0), _offsetX(0)$/;"	f	class:OpenXcom::Slider
Slider	Interface/Slider.h	/^class Slider : public InteractiveSurface$/;"	c	namespace:OpenXcom
SlideshowHeader	Mod/RuleVideo.h	/^	SlideshowHeader() : transitionSeconds(0) { }$/;"	f	struct:OpenXcom::SlideshowHeader
SlideshowHeader	Mod/RuleVideo.h	/^struct SlideshowHeader$/;"	s	namespace:OpenXcom
SlideshowSlide	Mod/RuleVideo.h	/^	SlideshowSlide() : w(0), h(0), x(0), y(0), color(0), align(ALIGN_LEFT), valign(ALIGN_TOP), transitionSeconds(0) { }$/;"	f	struct:OpenXcom::SlideshowSlide
SlideshowSlide	Mod/RuleVideo.h	/^struct SlideshowSlide$/;"	s	namespace:OpenXcom
SlideshowState	Menu/SlideshowState.cpp	/^SlideshowState::SlideshowState(const SlideshowHeader &slideshowHeader, const std::vector<SlideshowSlide> *slideshowSlides)$/;"	f	class:OpenXcom::SlideshowState
SlideshowState	Menu/SlideshowState.h	/^class SlideshowState : public State$/;"	c	namespace:OpenXcom
SmokeThreshold	Mod/RuleDamageType.h	/^	int SmokeThreshold;$/;"	m	struct:OpenXcom::RuleDamageType
Soldier	Savegame/Soldier.cpp	/^Soldier::Soldier(RuleSoldier *rules, Armor *armor, int nationality, int id) :$/;"	f	class:OpenXcom::Soldier
Soldier	Savegame/Soldier.h	/^class Soldier$/;"	c	namespace:OpenXcom
SoldierArmorOrigin	Basescape/SoldierArmorState.h	/^enum SoldierArmorOrigin$/;"	g	namespace:OpenXcom
SoldierArmorState	Basescape/SoldierArmorState.cpp	/^SoldierArmorState::SoldierArmorState(Base *base, size_t soldier, SoldierArmorOrigin origin) : _base(base), _soldier(soldier), _origin(origin)$/;"	f	class:OpenXcom::SoldierArmorState
SoldierArmorState	Basescape/SoldierArmorState.h	/^class SoldierArmorState : public State$/;"	c	namespace:OpenXcom
SoldierAvatar	Savegame/SoldierAvatar.cpp	/^SoldierAvatar::SoldierAvatar() : _gender(GENDER_MALE), _look(LOOK_BLONDE), _lookVariant(0)$/;"	f	class:OpenXcom::SoldierAvatar
SoldierAvatar	Savegame/SoldierAvatar.cpp	/^SoldierAvatar::SoldierAvatar(const std::string &avatarName, SoldierGender gender, SoldierLook look, int lookVariant)$/;"	f	class:OpenXcom::SoldierAvatar
SoldierAvatar	Savegame/SoldierAvatar.h	/^class SoldierAvatar$/;"	c	namespace:OpenXcom
SoldierAvatarState	Basescape/SoldierAvatarState.cpp	/^SoldierAvatarState::SoldierAvatarState(Base *base, size_t soldier) : _base(base), _soldier(soldier)$/;"	f	class:OpenXcom::SoldierAvatarState
SoldierAvatarState	Basescape/SoldierAvatarState.h	/^class SoldierAvatarState : public State$/;"	c	namespace:OpenXcom
SoldierBonusState	Basescape/SoldierBonusState.cpp	/^SoldierBonusState::SoldierBonusState(Base *base, size_t soldier) : _base(base), _soldier(soldier)$/;"	f	class:OpenXcom::SoldierBonusState
SoldierBonusState	Basescape/SoldierBonusState.h	/^class SoldierBonusState : public State$/;"	c	namespace:OpenXcom
SoldierCommendations	Savegame/SoldierDiary.cpp	/^SoldierCommendations::SoldierCommendations(const YAML::Node &node, const Mod* mod)$/;"	f	class:OpenXcom::SoldierCommendations
SoldierCommendations	Savegame/SoldierDiary.cpp	/^SoldierCommendations::SoldierCommendations(std::string commendationName, std::string noun, const Mod* mod) : _type(commendationName), _noun(noun), _decorationLevel(0), _isNew(true)$/;"	f	class:OpenXcom::SoldierCommendations
SoldierCommendations	Savegame/SoldierDiary.h	/^class SoldierCommendations$/;"	c	namespace:OpenXcom
SoldierDeath	Savegame/SoldierDeath.cpp	/^SoldierDeath::SoldierDeath(GameTime time, BattleUnitKills *cause) : _time(time), _cause(cause)$/;"	f	class:OpenXcom::SoldierDeath
SoldierDeath	Savegame/SoldierDeath.h	/^	SoldierDeath() : _time(0, 0, 0, 0, 0, 0, 0), _cause(0) {}$/;"	f	class:OpenXcom::SoldierDeath
SoldierDeath	Savegame/SoldierDeath.h	/^class SoldierDeath$/;"	c	namespace:OpenXcom
SoldierDeploymentData	Savegame/Craft.h	/^typedef std::pair<Position, int> SoldierDeploymentData;$/;"	t	namespace:OpenXcom
SoldierDiary	Savegame/SoldierDiary.cpp	/^SoldierDiary::SoldierDiary() : _daysWoundedTotal(0), _totalShotByFriendlyCounter(0), _totalShotFriendlyCounter(0), _loneSurvivorTotal(0),$/;"	f	class:OpenXcom::SoldierDiary
SoldierDiary	Savegame/SoldierDiary.h	/^class SoldierDiary$/;"	c	namespace:OpenXcom
SoldierDiaryDisplay	Basescape/SoldierDiaryPerformanceState.h	/^enum SoldierDiaryDisplay { DIARY_KILLS, DIARY_MISSIONS, DIARY_COMMENDATIONS };$/;"	g	namespace:OpenXcom
SoldierDiaryMissionState	Basescape/SoldierDiaryMissionState.cpp	/^SoldierDiaryMissionState::SoldierDiaryMissionState(Soldier *soldier, int rowEntry) : _soldier(soldier), _rowEntry(rowEntry)$/;"	f	class:OpenXcom::SoldierDiaryMissionState
SoldierDiaryMissionState	Basescape/SoldierDiaryMissionState.h	/^class SoldierDiaryMissionState : public State$/;"	c	namespace:OpenXcom
SoldierDiaryOverviewState	Basescape/SoldierDiaryOverviewState.cpp	/^SoldierDiaryOverviewState::SoldierDiaryOverviewState(Base *base, size_t soldierId, SoldierInfoState *soldierInfoState) : _base(base), _soldierId(soldierId), _soldierInfoState(soldierInfoState)$/;"	f	class:OpenXcom::SoldierDiaryOverviewState
SoldierDiaryOverviewState	Basescape/SoldierDiaryOverviewState.h	/^class SoldierDiaryOverviewState : public State$/;"	c	namespace:OpenXcom
SoldierDiaryPerformanceState	Basescape/SoldierDiaryPerformanceState.cpp	/^SoldierDiaryPerformanceState::SoldierDiaryPerformanceState(Base *base, size_t soldierId, SoldierDiaryOverviewState *soldierDiaryOverviewState, SoldierDiaryDisplay display) :$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
SoldierDiaryPerformanceState	Basescape/SoldierDiaryPerformanceState.h	/^class SoldierDiaryPerformanceState : public State$/;"	c	namespace:OpenXcom
SoldierInfoState	Basescape/SoldierInfoState.cpp	/^SoldierInfoState::SoldierInfoState(Base *base, size_t soldierId) : _base(base), _soldierId(soldierId), _soldier(0)$/;"	f	class:OpenXcom::SoldierInfoState
SoldierInfoState	Basescape/SoldierInfoState.h	/^class SoldierInfoState : public State$/;"	c	namespace:OpenXcom
SoldierMemorialState	Basescape/SoldierMemorialState.cpp	/^SoldierMemorialState::SoldierMemorialState()$/;"	f	class:OpenXcom::SoldierMemorialState
SoldierMemorialState	Basescape/SoldierMemorialState.h	/^class SoldierMemorialState : public State$/;"	c	namespace:OpenXcom
SoldierNamePool	Mod/SoldierNamePool.cpp	/^SoldierNamePool::SoldierNamePool() : _totalWeight(0), _femaleFrequency(-1), _globalWeight(100)$/;"	f	class:OpenXcom::SoldierNamePool
SoldierNamePool	Mod/SoldierNamePool.h	/^class SoldierNamePool$/;"	c	namespace:OpenXcom
SoldierStatsEntry	Battlescape/DebriefingState.h	/^	typedef std::pair<std::string, UnitStats> SoldierStatsEntry;$/;"	t	class:OpenXcom::DebriefingState
SoldierTransformationListState	Basescape/SoldierTransformationListState.cpp	/^SoldierTransformationListState::SoldierTransformationListState(Base *base, ComboBox *screenActions) : _base(base), _screenActions(screenActions)$/;"	f	class:OpenXcom::SoldierTransformationListState
SoldierTransformationListState	Basescape/SoldierTransformationListState.h	/^class SoldierTransformationListState : public State$/;"	c	namespace:OpenXcom
SoldierTransformationState	Basescape/SoldierTransformationState.cpp	/^SoldierTransformationState::SoldierTransformationState(RuleSoldierTransformation *transformationRule, Base *base, Soldier *sourceSoldier, std::vector<Soldier *> *filteredListOfSoldiers) :$/;"	f	class:OpenXcom::SoldierTransformationState
SoldierTransformationState	Basescape/SoldierTransformationState.h	/^class SoldierTransformationState : public State$/;"	c	namespace:OpenXcom
SoldiersState	Basescape/SoldiersState.cpp	/^SoldiersState::SoldiersState(Base *base) : _base(base), _origSoldierOrder(*_base->getSoldiers()), _dynGetter(NULL)$/;"	f	class:OpenXcom::SoldiersState
SoldiersState	Basescape/SoldiersState.h	/^class SoldiersState : public State$/;"	c	namespace:OpenXcom
SortFunctor	Basescape/SoldierSortUtil.h	/^	SortFunctor(Game *game, getStatFn_t getStatFn) : _game(game), _getStatFn(getStatFn) { }$/;"	f	struct:OpenXcom::SortFunctor
SortFunctor	Basescape/SoldierSortUtil.h	/^struct SortFunctor$/;"	s	namespace:OpenXcom
Sound	Engine/Sound.h	/^class Sound$/;"	c	namespace:OpenXcom
SoundDefinition	Mod/SoundDefinition.cpp	/^SoundDefinition::SoundDefinition(const std::string &type) : _type(type)$/;"	f	class:OpenXcom::SoundDefinition
SoundDefinition	Mod/SoundDefinition.h	/^class SoundDefinition$/;"	c	namespace:OpenXcom
SoundFormat	Engine/Options.h	/^enum SoundFormat { SOUND_AUTO, SOUND_14, SOUND_10 };$/;"	g	namespace:OpenXcom
SoundSet	Engine/SoundSet.cpp	/^SoundSet::SoundSet() : _sharedSounds(INT_MAX)$/;"	f	class:OpenXcom::SoundSet
SoundSet	Engine/SoundSet.h	/^class SoundSet$/;"	c	namespace:OpenXcom
SpecialAbility	Mod/Unit.h	/^enum SpecialAbility { SPECAB_NONE, SPECAB_EXPLODEONDEATH, SPECAB_BURNFLOOR, SPECAB_BURN_AND_EXPLODE };$/;"	g	namespace:OpenXcom
Sqr	fmath.h	/^inline _Tx Sqr(const _Tx& x)$/;"	f
StandardShade	Engine/ShaderDraw.h	/^struct StandardShade$/;"	s	namespace:OpenXcom::helper
StandardZipAssetPtr	Engine/CrossPlatform.cpp	/^static void *StandardZipAssetPtr = 0;$/;"	m	namespace:OpenXcom::CrossPlatform	file:
StandardZipAssetSize	Engine/CrossPlatform.cpp	/^static size_t StandardZipAssetSize = 0;$/;"	m	namespace:OpenXcom::CrossPlatform	file:
Start	Engine/Script.h	/^	Start = 0,$/;"	m	class:OpenXcom::ProgPos
StartState	Menu/StartState.cpp	/^StartState::StartState() : _anim(0)$/;"	f	class:OpenXcom::StartState
StartState	Menu/StartState.h	/^class StartState : public State$/;"	c	namespace:OpenXcom
StatAdjustment	Mod/Unit.h	/^struct StatAdjustment$/;"	s	namespace:OpenXcom
StatString	Mod/StatString.cpp	/^StatString::StatString()$/;"	f	class:OpenXcom::StatString
StatString	Mod/StatString.h	/^class StatString$/;"	c	namespace:OpenXcom
StatStringCondition	Mod/StatStringCondition.cpp	/^StatStringCondition::StatStringCondition(const std::string &conditionName, int minVal, int maxVal) : _conditionName(conditionName), _minVal(minVal), _maxVal(maxVal)$/;"	f	class:OpenXcom::StatStringCondition
StatStringCondition	Mod/StatStringCondition.h	/^class StatStringCondition$/;"	c	namespace:OpenXcom
State	Engine/State.cpp	/^State::State() : _screen(true), _soundPlayed(false), _modal(0), _ruleInterface(0), _ruleInterfaceParent(0), _customSound(nullptr)$/;"	f	class:OpenXcom::State
State	Engine/State.h	/^class State$/;"	c	namespace:OpenXcom
State	lodepng.cpp	/^State::State()$/;"	f	class:lodepng::State
State	lodepng.cpp	/^State::State(const State& other)$/;"	f	class:lodepng::State
State	lodepng.h	/^class State : public LodePNGState$/;"	c	namespace:lodepng
StateHandler	Engine/Timer.h	/^typedef void (State::* StateHandler)();$/;"	t	namespace:OpenXcom
StaticError	Engine/HelperMeta.h	/^struct StaticError$/;"	s	namespace:OpenXcom::helper
StatisticsState	Menu/StatisticsState.cpp	/^StatisticsState::StatisticsState()$/;"	f	class:OpenXcom::StatisticsState
StatisticsState	Menu/StatisticsState.h	/^class StatisticsState : public State$/;"	c	namespace:OpenXcom
StatsForNerdsArmorParser	Mod/ModScript.h	/^	struct StatsForNerdsArmorParser : ScriptParserEvents<ScriptOutputArgs<>, const Armor*, StatsForNerdsState*, const SavedGame*>$/;"	s	class:OpenXcom::ModScript
StatsForNerdsArmorParser	Ufopaedia/StatsForNerdsState.cpp	/^ModScript::StatsForNerdsArmorParser::StatsForNerdsArmorParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::StatsForNerdsArmorParser
StatsForNerdsCraftParser	Mod/ModScript.h	/^	struct StatsForNerdsCraftParser : ScriptParserEvents<ScriptOutputArgs<>, const RuleCraft*, StatsForNerdsState*, const SavedGame*>$/;"	s	class:OpenXcom::ModScript
StatsForNerdsCraftParser	Ufopaedia/StatsForNerdsState.cpp	/^ModScript::StatsForNerdsCraftParser::StatsForNerdsCraftParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::StatsForNerdsCraftParser
StatsForNerdsItemParser	Mod/ModScript.h	/^	struct StatsForNerdsItemParser : ScriptParserEvents<ScriptOutputArgs<>, const RuleItem*, StatsForNerdsState*, const SavedGame*>$/;"	s	class:OpenXcom::ModScript
StatsForNerdsItemParser	Ufopaedia/StatsForNerdsState.cpp	/^ModScript::StatsForNerdsItemParser::StatsForNerdsItemParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::StatsForNerdsItemParser
StatsForNerdsState	Ufopaedia/StatsForNerdsState.cpp	/^StatsForNerdsState::StatsForNerdsState(const UfopaediaTypeId typeId, const std::string topicId, bool debug, bool ids, bool defaults) : _counter(0), _indent(false)$/;"	f	class:OpenXcom::StatsForNerdsState
StatsForNerdsState	Ufopaedia/StatsForNerdsState.cpp	/^StatsForNerdsState::StatsForNerdsState(std::shared_ptr<ArticleCommonState> state, bool debug, bool ids, bool defaults) : _state{ std::move(state) }, _counter(0), _indent(false)$/;"	f	class:OpenXcom::StatsForNerdsState
StatsForNerdsState	Ufopaedia/StatsForNerdsState.h	/^class StatsForNerdsState : public State$/;"	c	namespace:OpenXcom
StatsForNerdsUfoParser	Mod/ModScript.h	/^	struct StatsForNerdsUfoParser : ScriptParserEvents<ScriptOutputArgs<>, const RuleUfo*, StatsForNerdsState*, const SavedGame*>$/;"	s	class:OpenXcom::ModScript
StatsForNerdsUfoParser	Ufopaedia/StatsForNerdsState.cpp	/^ModScript::StatsForNerdsUfoParser::StatsForNerdsUfoParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::StatsForNerdsUfoParser
StereoSound	Engine/Options.inc.h	/^	cursorInBlackBandsInFullscreen, cursorInBlackBandsInWindow, cursorInBlackBandsInBorderlessWindow, maximizeInfoScreens, musicAlwaysLoop, StereoSound, verboseLogging, soldierDiaries, touchEnabled,$/;"	v
StoredItem	Basescape/StoresState.h	/^	StoredItem(const std::string &_name, int _quantity, double _size, double _spaceUsed)$/;"	f	struct:OpenXcom::StoredItem
StoredItem	Basescape/StoresState.h	/^struct StoredItem$/;"	s	namespace:OpenXcom
StoresState	Basescape/StoresState.cpp	/^StoresState::StoresState(Base *base) : _base(base)$/;"	f	class:OpenXcom::StoresState
StoresState	Basescape/StoresState.h	/^class StoresState : public State$/;"	c	namespace:OpenXcom
Stun	Mod/RuleItem.h	/^	int Stun;$/;"	m	struct:OpenXcom::RuleItemUseCost
StunMultipler	Mod/Unit.h	/^	constexpr static int StunMultipler = 4;$/;"	m	struct:OpenXcom::UnitStats
StunStatLimit	Mod/Unit.h	/^	constexpr static int StunStatLimit = BaseStatLimit * StunMultipler;$/;"	m	struct:OpenXcom::UnitStats
SumList	Engine/ScriptBind.h	/^struct SumList : SumListIndexImpl<sizeof...(V), V...>$/;"	s	namespace:OpenXcom::helper
SumListIndexImpl	Engine/ScriptBind.h	/^struct SumListIndexImpl<MaxSize, T1, T...> : SumListIndexImpl<MaxSize, T...>$/;"	s	namespace:OpenXcom::helper
SumListIndexImpl	Engine/ScriptBind.h	/^struct SumListIndexImpl<MaxSize>$/;"	s	namespace:OpenXcom::helper
Surface	Engine/Surface.cpp	/^Surface::Surface() : _x{ }, _y{ }, _width{ }, _height{ }, _pitch{ }, _visible(true), _hidden(false), _redraw(false)$/;"	f	class:OpenXcom::Surface
Surface	Engine/Surface.cpp	/^Surface::Surface(const Surface& other) : Surface{ }$/;"	f	class:OpenXcom::Surface
Surface	Engine/Surface.cpp	/^Surface::Surface(int width, int height, int x, int y) : _x(x), _y(y), _visible(true), _hidden(false), _redraw(false)$/;"	f	class:OpenXcom::Surface
Surface	Engine/Surface.h	/^class Surface$/;"	c	namespace:OpenXcom
SurfaceCrop	Engine/Surface.h	/^	SurfaceCrop() : _surface{ nullptr }, _crop{ }, _x{ }, _y{ }$/;"	f	class:OpenXcom::SurfaceCrop
SurfaceCrop	Engine/Surface.h	/^	SurfaceCrop(const Surface* surf) : _surface{ surf }, _crop{ }, _x{ surf->getX() }, _y{ surf->getY() }$/;"	f	class:OpenXcom::SurfaceCrop
SurfaceCrop	Engine/Surface.h	/^class SurfaceCrop$/;"	c	namespace:OpenXcom
SurfaceHandler	Engine/Timer.h	/^typedef void (Surface::* SurfaceHandler)();$/;"	t	namespace:OpenXcom
SurfaceRaw	Engine/Surface.h	/^	SurfaceRaw() :$/;"	f	class:OpenXcom::SurfaceRaw
SurfaceRaw	Engine/Surface.h	/^	SurfaceRaw(Pixel* buffer, int width, int height, int pitch) :$/;"	f	class:OpenXcom::SurfaceRaw
SurfaceRaw	Engine/Surface.h	/^	SurfaceRaw(SDL_Surface* surf) : SurfaceRaw{ }$/;"	f	class:OpenXcom::SurfaceRaw
SurfaceRaw	Engine/Surface.h	/^	SurfaceRaw(Surface* surf) : SurfaceRaw{ }$/;"	f	class:OpenXcom::SurfaceRaw
SurfaceRaw	Engine/Surface.h	/^	SurfaceRaw(const SDL_Surface* surf) : SurfaceRaw{ }$/;"	f	class:OpenXcom::SurfaceRaw
SurfaceRaw	Engine/Surface.h	/^	SurfaceRaw(const Surface* surf) : SurfaceRaw{ }$/;"	f	class:OpenXcom::SurfaceRaw
SurfaceRaw	Engine/Surface.h	/^	SurfaceRaw(const std::vector<typename std::remove_const<Pixel>::type>& vec, int width, int height) : SurfaceRaw{ vec.data(), width, height, static_cast<Uint16>(width*sizeof(Pixel)) }$/;"	f	class:OpenXcom::SurfaceRaw
SurfaceRaw	Engine/Surface.h	/^	SurfaceRaw(std::vector<Pixel>& vec, int width, int height) : SurfaceRaw{ vec.data(), width, height, static_cast<Uint16>(width*sizeof(Pixel)) }$/;"	f	class:OpenXcom::SurfaceRaw
SurfaceRaw	Engine/Surface.h	/^class SurfaceRaw$/;"	c	namespace:OpenXcom
SurfaceSet	Engine/SurfaceSet.cpp	/^SurfaceSet::SurfaceSet(int width, int height) : _width(width), _height(height), _sharedFrames(INT_MAX)$/;"	f	class:OpenXcom::SurfaceSet
SurfaceSet	Engine/SurfaceSet.h	/^class SurfaceSet$/;"	c	namespace:OpenXcom
T	Engine/Adlib/fmopl.h	/^	int T[2];			\/* timer counter                     *\/$/;"	m	struct:fm_opl_f
TARGET_ABASE	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TARGET_ARTEFACT	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TARGET_CRAFT	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TARGET_CRASH	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TARGET_ISLAND	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TARGET_LANDED	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TARGET_NONE	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TARGET_PORT	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TARGET_SHIP	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TARGET_TERROR	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TARGET_UFO	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TARGET_WAYPOINT	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TARGET_XBASE	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	e	enum:OpenXcom::TargetType	file:
TEC_NONE	Interface/TextEdit.h	/^enum TextEditConstraint { TEC_NONE, TEC_NUMERIC_POSITIVE, TEC_NUMERIC };$/;"	e	enum:OpenXcom::TextEditConstraint
TEC_NUMERIC	Interface/TextEdit.h	/^enum TextEditConstraint { TEC_NONE, TEC_NUMERIC_POSITIVE, TEC_NUMERIC };$/;"	e	enum:OpenXcom::TextEditConstraint
TEC_NUMERIC_POSITIVE	Interface/TextEdit.h	/^enum TextEditConstraint { TEC_NONE, TEC_NUMERIC_POSITIVE, TEC_NUMERIC };$/;"	e	enum:OpenXcom::TextEditConstraint
TERRAIN	Menu/NewBattleState.h	/^enum class NewBattleSelectType { MISSION = 0, TERRAIN, ALIENRACE };$/;"	m	class:OpenXcom::NewBattleSelectType
TEXT_HEIGHT	Interface/ComboBox.cpp	/^const int ComboBox::TEXT_HEIGHT = 8;$/;"	m	class:OpenXcom::ComboBox	file:
TEXT_HEIGHT	Interface/ComboBox.h	/^	static const int TEXT_HEIGHT;$/;"	m	class:OpenXcom::ComboBox
TFTDMode	Mod/RuleInterface.h	/^	bool TFTDMode;$/;"	m	struct:OpenXcom::Element
TFTD_DEPLOYMENTS	Menu/NewBattleState.h	/^	static const int TFTD_DEPLOYMENTS = 22;$/;"	m	class:OpenXcom::NewBattleState
TIME_10MIN	Savegame/GameTime.h	/^enum TimeTrigger { TIME_5SEC, TIME_10MIN, TIME_30MIN, TIME_1HOUR, TIME_1DAY, TIME_1MONTH };$/;"	e	enum:OpenXcom::TimeTrigger
TIME_1DAY	Savegame/GameTime.h	/^enum TimeTrigger { TIME_5SEC, TIME_10MIN, TIME_30MIN, TIME_1HOUR, TIME_1DAY, TIME_1MONTH };$/;"	e	enum:OpenXcom::TimeTrigger
TIME_1HOUR	Savegame/GameTime.h	/^enum TimeTrigger { TIME_5SEC, TIME_10MIN, TIME_30MIN, TIME_1HOUR, TIME_1DAY, TIME_1MONTH };$/;"	e	enum:OpenXcom::TimeTrigger
TIME_1MONTH	Savegame/GameTime.h	/^enum TimeTrigger { TIME_5SEC, TIME_10MIN, TIME_30MIN, TIME_1HOUR, TIME_1DAY, TIME_1MONTH };$/;"	e	enum:OpenXcom::TimeTrigger
TIME_30MIN	Savegame/GameTime.h	/^enum TimeTrigger { TIME_5SEC, TIME_10MIN, TIME_30MIN, TIME_1HOUR, TIME_1DAY, TIME_1MONTH };$/;"	e	enum:OpenXcom::TimeTrigger
TIME_5SEC	Savegame/GameTime.h	/^enum TimeTrigger { TIME_5SEC, TIME_10MIN, TIME_30MIN, TIME_1HOUR, TIME_1DAY, TIME_1MONTH };$/;"	e	enum:OpenXcom::TimeTrigger
TL	Engine/Adlib/fmopl.h	/^	INT32 TL;		\/* total level     :TL << 8            *\/$/;"	m	struct:fm_opl_slot
TLL	Engine/Adlib/fmopl.h	/^	INT32 TLL;		\/* adjusted now TL                     *\/$/;"	m	struct:fm_opl_slot
TL_BITS	Engine/Adlib/fmopl.cpp	70;"	d	file:
TL_MAX	Engine/Adlib/fmopl.cpp	186;"	d	file:
TL_TABLE	Engine/Adlib/fmopl.cpp	/^static INT32 *TL_TABLE;$/;"	v	file:
TOK_COLOR_FLIP	Engine/Unicode.h	/^	const char TOK_COLOR_FLIP = 1;			\/\/\/ alternate between primary and secondary color$/;"	m	namespace:OpenXcom::Unicode
TOK_NBSP	Engine/Unicode.h	/^	const unsigned char TOK_NBSP = 0xA0;	\/\/\/ non-breaking space$/;"	m	namespace:OpenXcom::Unicode
TOK_NL_SMALL	Engine/Unicode.h	/^	const char TOK_NL_SMALL = 2;			\/\/\/ line break and change to small font$/;"	m	namespace:OpenXcom::Unicode
TRANSFER_CRAFT	Savegame/Transfer.h	/^enum TransferType { TRANSFER_ITEM, TRANSFER_CRAFT, TRANSFER_SOLDIER, TRANSFER_SCIENTIST, TRANSFER_ENGINEER };$/;"	e	enum:OpenXcom::TransferType
TRANSFER_ENGINEER	Savegame/Transfer.h	/^enum TransferType { TRANSFER_ITEM, TRANSFER_CRAFT, TRANSFER_SOLDIER, TRANSFER_SCIENTIST, TRANSFER_ENGINEER };$/;"	e	enum:OpenXcom::TransferType
TRANSFER_ITEM	Savegame/Transfer.h	/^enum TransferType { TRANSFER_ITEM, TRANSFER_CRAFT, TRANSFER_SOLDIER, TRANSFER_SCIENTIST, TRANSFER_ENGINEER };$/;"	e	enum:OpenXcom::TransferType
TRANSFER_SCIENTIST	Savegame/Transfer.h	/^enum TransferType { TRANSFER_ITEM, TRANSFER_CRAFT, TRANSFER_SOLDIER, TRANSFER_SCIENTIST, TRANSFER_ENGINEER };$/;"	e	enum:OpenXcom::TransferType
TRANSFER_SOLDIER	Savegame/Transfer.h	/^enum TransferType { TRANSFER_ITEM, TRANSFER_CRAFT, TRANSFER_SOLDIER, TRANSFER_SCIENTIST, TRANSFER_ENGINEER };$/;"	e	enum:OpenXcom::TransferType
TTVMode	Basescape/TechTreeViewerState.h	/^enum TTVMode { TTV_NONE, TTV_RESEARCH, TTV_MANUFACTURING, TTV_FACILITIES, TTV_ITEMS, TTV_CRAFTS };$/;"	g	namespace:OpenXcom
TTV_CRAFTS	Basescape/TechTreeViewerState.h	/^enum TTVMode { TTV_NONE, TTV_RESEARCH, TTV_MANUFACTURING, TTV_FACILITIES, TTV_ITEMS, TTV_CRAFTS };$/;"	e	enum:OpenXcom::TTVMode
TTV_FACILITIES	Basescape/TechTreeViewerState.h	/^enum TTVMode { TTV_NONE, TTV_RESEARCH, TTV_MANUFACTURING, TTV_FACILITIES, TTV_ITEMS, TTV_CRAFTS };$/;"	e	enum:OpenXcom::TTVMode
TTV_ITEMS	Basescape/TechTreeViewerState.h	/^enum TTVMode { TTV_NONE, TTV_RESEARCH, TTV_MANUFACTURING, TTV_FACILITIES, TTV_ITEMS, TTV_CRAFTS };$/;"	e	enum:OpenXcom::TTVMode
TTV_MANUFACTURING	Basescape/TechTreeViewerState.h	/^enum TTVMode { TTV_NONE, TTV_RESEARCH, TTV_MANUFACTURING, TTV_FACILITIES, TTV_ITEMS, TTV_CRAFTS };$/;"	e	enum:OpenXcom::TTVMode
TTV_NONE	Basescape/TechTreeViewerState.h	/^enum TTVMode { TTV_NONE, TTV_RESEARCH, TTV_MANUFACTURING, TTV_FACILITIES, TTV_ITEMS, TTV_CRAFTS };$/;"	e	enum:OpenXcom::TTVMode
TTV_RESEARCH	Basescape/TechTreeViewerState.h	/^enum TTVMode { TTV_NONE, TTV_RESEARCH, TTV_MANUFACTURING, TTV_FACILITIES, TTV_ITEMS, TTV_CRAFTS };$/;"	e	enum:OpenXcom::TTVMode
TYPE_DANGEROUS	Savegame/Node.h	/^	static const int TYPE_DANGEROUS = 0x04; \/\/ an alien was shot here, stop patrolling to it like an idiot with a death wish$/;"	m	class:OpenXcom::Node
TYPE_FLYING	Savegame/Node.h	/^	static const int TYPE_FLYING = 0x01; \/\/ non-flying unit can not spawn here when this bit is set$/;"	m	class:OpenXcom::Node
TYPE_SMALL	Savegame/Node.h	/^	static const int TYPE_SMALL = 0x02; \/\/ large unit can not spawn here when this bit is set$/;"	m	class:OpenXcom::Node
Target	Savegame/Target.cpp	/^Target::Target() : _lon(0.0), _lat(0.0), _id(0)$/;"	f	class:OpenXcom::Target
Target	Savegame/Target.h	/^class Target$/;"	c	namespace:OpenXcom
TargetInfoState	Geoscape/TargetInfoState.cpp	/^TargetInfoState::TargetInfoState(Target *target, Globe *globe) : _target(target), _globe(globe), _deploymentRule(0)$/;"	f	class:OpenXcom::TargetInfoState
TargetInfoState	Geoscape/TargetInfoState.h	/^class TargetInfoState : public State$/;"	c	namespace:OpenXcom
TargetType	Savegame/SaveConverter.cpp	/^enum TargetType { TARGET_NONE, TARGET_UFO, TARGET_CRAFT, TARGET_XBASE, TARGET_ABASE, TARGET_CRASH, TARGET_LANDED, TARGET_WAYPOINT, TARGET_TERROR, TARGET_PORT = 0x51, TARGET_ISLAND = 0x52, TARGET_SHIP = 0x53, TARGET_ARTEFACT = 0x54 };$/;"	g	namespace:OpenXcom	file:
TechTreeSelectState	Basescape/TechTreeSelectState.cpp	/^TechTreeSelectState::TechTreeSelectState(TechTreeViewerState *parent) : _parent(parent)$/;"	f	class:OpenXcom::TechTreeSelectState
TechTreeSelectState	Basescape/TechTreeSelectState.h	/^class TechTreeSelectState : public State$/;"	c	namespace:OpenXcom
TechTreeViewerState	Basescape/TechTreeViewerState.cpp	/^TechTreeViewerState::TechTreeViewerState(const RuleResearch *r, const RuleManufacture *m, const RuleBaseFacility *f, const RuleCraft *c)$/;"	f	class:OpenXcom::TechTreeViewerState
TechTreeViewerState	Basescape/TechTreeViewerState.h	/^class TechTreeViewerState : public State$/;"	c	namespace:OpenXcom
TerminalColors	Engine/Font.cpp	/^const SDL_Color Font::TerminalColors[2] = {{0, 0, 0, 0}, {185, 185, 185, 255}};$/;"	m	class:OpenXcom::Font	file:
TerminalColors	Engine/Font.h	/^	static const SDL_Color TerminalColors[2];$/;"	m	class:OpenXcom::Font
TerrainCriteria	Mod/Texture.h	/^	TerrainCriteria() : weight(1), lonMin(0.0), lonMax(360.0), latMin(-90.0), latMax(90.0) {};$/;"	f	struct:OpenXcom::TerrainCriteria
TerrainCriteria	Mod/Texture.h	/^struct TerrainCriteria$/;"	s	namespace:OpenXcom
TerrainLevelOffset	Battlescape/Map.h	/^	int TerrainLevelOffset;$/;"	m	struct:OpenXcom::UnitWalkingOffset
TestPaletteState	Menu/TestPaletteState.cpp	/^TestPaletteState::TestPaletteState(const std::string &palette, PaletteActionType action)$/;"	f	class:OpenXcom::TestPaletteState
TestPaletteState	Menu/TestPaletteState.h	/^class TestPaletteState : public State$/;"	c	namespace:OpenXcom
TestState	Menu/TestState.cpp	/^TestState::TestState()$/;"	f	class:OpenXcom::TestState
TestState	Menu/TestState.h	/^class TestState : public State$/;"	c	namespace:OpenXcom
Text	Interface/Text.cpp	/^Text::Text(int width, int height, int x, int y) : InteractiveSurface(width, height, x, y),$/;"	f	class:OpenXcom::Text
Text	Interface/Text.h	/^class Text : public InteractiveSurface$/;"	c	namespace:OpenXcom
TextButton	Interface/TextButton.cpp	/^TextButton::TextButton(int width, int height, int x, int y) : InteractiveSurface(width, height, x, y), _color(0), _group(0), _contrast(false), _geoscapeButton(false), _comboBox(0)$/;"	f	class:OpenXcom::TextButton
TextButton	Interface/TextButton.h	/^class TextButton : public InteractiveSurface$/;"	c	namespace:OpenXcom
TextDirection	Engine/Language.h	/^enum TextDirection { DIRECTION_LTR, DIRECTION_RTL };$/;"	g	namespace:OpenXcom
TextEdit	Interface/TextEdit.cpp	/^TextEdit::TextEdit(State *state, int width, int height, int x, int y) : InteractiveSurface(width, height, x, y), _blink(true), _modal(true), _char('A'), _caretPos(0), _textEditConstraint(TEC_NONE), _change(0), _enter(0), _state(state)$/;"	f	class:OpenXcom::TextEdit
TextEdit	Interface/TextEdit.h	/^class TextEdit : public InteractiveSurface$/;"	c	namespace:OpenXcom
TextEditConstraint	Interface/TextEdit.h	/^enum TextEditConstraint { TEC_NONE, TEC_NUMERIC_POSITIVE, TEC_NUMERIC };$/;"	g	namespace:OpenXcom
TextHAlign	Interface/Text.h	/^enum TextHAlign { ALIGN_LEFT, ALIGN_CENTER, ALIGN_RIGHT };$/;"	g	namespace:OpenXcom
TextList	Interface/TextList.cpp	/^TextList::TextList(int width, int height, int x, int y) : InteractiveSurface(width, height, x, y),$/;"	f	class:OpenXcom::TextList
TextList	Interface/TextList.h	/^class TextList : public InteractiveSurface$/;"	c	namespace:OpenXcom
TextVAlign	Interface/Text.h	/^enum TextVAlign { ALIGN_TOP, ALIGN_MIDDLE, ALIGN_BOTTOM };$/;"	g	namespace:OpenXcom
TextWrapping	Engine/Language.h	/^enum TextWrapping { WRAP_AUTO, WRAP_WORDS, WRAP_LETTERS };$/;"	g	namespace:OpenXcom
Texture	Mod/Texture.cpp	/^Texture::Texture(int id) : _id(id), _fakeUnderwater(false)$/;"	f	class:OpenXcom::Texture
Texture	Mod/Texture.h	/^class Texture$/;"	c	namespace:OpenXcom
TheVFS	Engine/FileMap.cpp	/^static VFS TheVFS;$/;"	m	namespace:OpenXcom::FileMap	file:
Tile	Savegame/Tile.cpp	/^Tile::Tile(Position pos, SavedBattleGame* save): _save(save), _pos(pos)$/;"	f	class:OpenXcom::Tile
Tile	Savegame/Tile.h	/^class Tile$/;"	c	namespace:OpenXcom
TileCache	Savegame/Tile.h	/^	struct TileCache$/;"	s	class:OpenXcom::Tile
TileDamageMethod	Mod/RuleDamageType.h	/^	int TileDamageMethod;$/;"	m	struct:OpenXcom::RuleDamageType
TileEngine	Battlescape/TileEngine.cpp	/^TileEngine::TileEngine(SavedBattleGame *save, Mod *mod) :$/;"	f	class:OpenXcom::TileEngine
TileEngine	Battlescape/TileEngine.h	/^class TileEngine$/;"	c	namespace:OpenXcom
TileMapDataCache	Savegame/Tile.h	/^	struct TileMapDataCache$/;"	s	class:OpenXcom::Tile
TileObjectCache	Savegame/Tile.h	/^	struct TileObjectCache$/;"	s	class:OpenXcom::Tile
TileXY	Battlescape/Position.h	/^	constexpr static int TileXY = 16;$/;"	m	class:OpenXcom::Position
TileZ	Battlescape/Position.h	/^	constexpr static int TileZ = 24;$/;"	m	class:OpenXcom::Position
TilesToVexels	Mod/RuleItem.cpp	/^const float TilesToVexels = 16.0f;$/;"	m	namespace:OpenXcom	file:
Time	Mod/RuleItem.h	/^	int Time;$/;"	m	struct:OpenXcom::RuleItemUseCost
TimePercent	Mod/Armor.h	/^	int TimePercent;$/;"	m	struct:OpenXcom::ArmorMoveCost
TimeTrigger	Savegame/GameTime.h	/^enum TimeTrigger { TIME_5SEC, TIME_10MIN, TIME_30MIN, TIME_1HOUR, TIME_1DAY, TIME_1MONTH };$/;"	g	namespace:OpenXcom
Timer	Engine/Timer.cpp	/^Timer::Timer(Uint32 interval, bool frameSkipping) : _start(0), _frameSkipStart(0), _interval(interval), _running(false), _frameSkipping(frameSkipping), _state(0), _surface(0)$/;"	f	class:OpenXcom::Timer
Timer	Engine/Timer.h	/^class Timer$/;"	c	namespace:OpenXcom
TimerBase	Engine/Adlib/fmopl.h	/^	double TimerBase;	\/* Timer base time (==sampling time) *\/$/;"	m	struct:fm_opl_f
TimerHandler	Engine/Adlib/fmopl.h	/^	OPL_TIMERHANDLER  TimerHandler;		\/* TIMER handler   *\/$/;"	m	struct:fm_opl_f
TimerParam	Engine/Adlib/fmopl.h	/^	int TimerParam;						\/* TIMER parameter *\/$/;"	m	struct:fm_opl_f
ToArmor	Mod/RuleDamageType.h	/^	float ToArmor;$/;"	m	struct:OpenXcom::RuleDamageType
ToArmorPre	Mod/RuleDamageType.h	/^	float ToArmorPre;$/;"	m	struct:OpenXcom::RuleDamageType
ToEnergy	Mod/RuleDamageType.h	/^	float ToEnergy;$/;"	m	struct:OpenXcom::RuleDamageType
ToHealth	Mod/RuleDamageType.h	/^	float ToHealth;$/;"	m	struct:OpenXcom::RuleDamageType
ToItem	Mod/RuleDamageType.h	/^	float ToItem;$/;"	m	struct:OpenXcom::RuleDamageType
ToMana	Mod/RuleDamageType.h	/^	float ToMana;$/;"	m	struct:OpenXcom::RuleDamageType
ToMorale	Mod/RuleDamageType.h	/^	float ToMorale;$/;"	m	struct:OpenXcom::RuleDamageType
ToStun	Mod/RuleDamageType.h	/^	float ToStun;$/;"	m	struct:OpenXcom::RuleDamageType
ToTile	Mod/RuleDamageType.h	/^	float ToTile;$/;"	m	struct:OpenXcom::RuleDamageType
ToTime	Mod/RuleDamageType.h	/^	float ToTime;$/;"	m	struct:OpenXcom::RuleDamageType
ToWound	Mod/RuleDamageType.h	/^	float ToWound;$/;"	m	struct:OpenXcom::RuleDamageType
ToggleTextButton	Interface/ToggleTextButton.cpp	/^ToggleTextButton::ToggleTextButton(int width, int height, int x, int y) : TextButton(width, height, x, y), _originalColor(-1), _invertedColor(-1), _fakeGroup(0)$/;"	f	class:OpenXcom::ToggleTextButton
ToggleTextButton	Interface/ToggleTextButton.h	/^class ToggleTextButton :$/;"	c	namespace:OpenXcom
TokenColon	Engine/Script.cpp	/^	TokenColon,$/;"	e	enum:OpenXcom::TokenEnum	file:
TokenEnum	Engine/Script.cpp	/^enum TokenEnum$/;"	g	namespace:OpenXcom	file:
TokenInvalid	Engine/Script.cpp	/^	TokenInvalid,$/;"	e	enum:OpenXcom::TokenEnum	file:
TokenNone	Engine/Script.cpp	/^	TokenNone,$/;"	e	enum:OpenXcom::TokenEnum	file:
TokenNumber	Engine/Script.cpp	/^	TokenNumber,$/;"	e	enum:OpenXcom::TokenEnum	file:
TokenSemicolon	Engine/Script.cpp	/^	TokenSemicolon,$/;"	e	enum:OpenXcom::TokenEnum	file:
TokenSymbol	Engine/Script.cpp	/^	TokenSymbol,$/;"	e	enum:OpenXcom::TokenEnum	file:
TokenText	Engine/Script.cpp	/^	TokenText,$/;"	e	enum:OpenXcom::TokenEnum	file:
TrainingFinishedState	Geoscape/TrainingFinishedState.cpp	/^TrainingFinishedState::TrainingFinishedState(Base *base, const std::vector<Soldier *> & list, bool psi) : _base(base), _psi(psi)$/;"	f	class:OpenXcom::TrainingFinishedState
TrainingFinishedState	Geoscape/TrainingFinishedState.h	/^class TrainingFinishedState : public State$/;"	c	namespace:OpenXcom
TrainingState	Geoscape/TrainingState.cpp	/^TrainingState::TrainingState()$/;"	f	class:OpenXcom::TrainingState
TrainingState	Geoscape/TrainingState.h	/^class TrainingState : public State$/;"	c	namespace:OpenXcom
TrajectoryWaypoint	Mod/UfoTrajectory.h	/^struct TrajectoryWaypoint$/;"	s	namespace:OpenXcom
Transfer	Savegame/Transfer.cpp	/^Transfer::Transfer(int hours) : _hours(hours), _soldier(0), _craft(0), _itemQty(0), _scientists(0), _engineers(0), _delivered(false)$/;"	f	class:OpenXcom::Transfer
Transfer	Savegame/Transfer.h	/^class Transfer$/;"	c	namespace:OpenXcom
TransferBaseState	Basescape/TransferBaseState.cpp	/^TransferBaseState::TransferBaseState(Base *base, DebriefingState *debriefingState) : _base(base), _debriefingState(debriefingState)$/;"	f	class:OpenXcom::TransferBaseState
TransferBaseState	Basescape/TransferBaseState.h	/^class TransferBaseState : public State$/;"	c	namespace:OpenXcom
TransferConfirmState	Basescape/TransferConfirmState.cpp	/^TransferConfirmState::TransferConfirmState(Base *base, TransferItemsState *state) : _base(base), _state(state)$/;"	f	class:OpenXcom::TransferConfirmState
TransferConfirmState	Basescape/TransferConfirmState.h	/^class TransferConfirmState : public State$/;"	c	namespace:OpenXcom
TransferItemsState	Basescape/TransferItemsState.cpp	/^TransferItemsState::TransferItemsState(Base *baseFrom, Base *baseTo, DebriefingState *debriefingState) :$/;"	f	class:OpenXcom::TransferItemsState
TransferItemsState	Basescape/TransferItemsState.h	/^class TransferItemsState : public State$/;"	c	namespace:OpenXcom
TransferRow	Savegame/Transfer.h	/^struct TransferRow$/;"	s	namespace:OpenXcom
TransferSortDirection	Savegame/Transfer.h	/^enum class TransferSortDirection : int$/;"	c	namespace:OpenXcom
TransferType	Savegame/Transfer.h	/^enum TransferType { TRANSFER_ITEM, TRANSFER_CRAFT, TRANSFER_SOLDIER, TRANSFER_SCIENTIST, TRANSFER_ENGINEER };$/;"	g	namespace:OpenXcom
TransfersState	Basescape/TransfersState.cpp	/^TransfersState::TransfersState(Base *base) : _base(base)$/;"	f	class:OpenXcom::TransfersState
TransfersState	Basescape/TransfersState.h	/^class TransfersState : public State$/;"	c	namespace:OpenXcom
Transpose	Engine/Adlib/adlplayer.cpp	/^void Transpose(int reg, int val, int*val2, int *reg3, int*val3)$/;"	f
TryMeleeAttackItemParser	Mod/ModScript.h	/^	struct TryMeleeAttackItemParser : ScriptParserEvents<ScriptOutputArgs<int&>, const BattleItem*, const BattleUnit*, const BattleUnit*, const RuleSkill*, int, int, int, RNG::RandomState*, int, int, const SavedBattleGame*>$/;"	s	class:OpenXcom::ModScript
TryMeleeAttackItemParser	Savegame/BattleItem.cpp	/^ModScript::TryMeleeAttackItemParser::TryMeleeAttackItemParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::TryMeleeAttackItemParser
TryMeleeAttackUnitParser	Mod/ModScript.h	/^	struct TryMeleeAttackUnitParser : ScriptParserEvents<ScriptOutputArgs<int&>, const BattleItem*, const BattleUnit*, const BattleUnit*, const RuleSkill*, int, int, int, const SavedBattleGame*>$/;"	s	class:OpenXcom::ModScript
TryMeleeAttackUnitParser	Savegame/BattleUnit.cpp	/^ModScript::TryMeleeAttackUnitParser::TryMeleeAttackUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::TryMeleeAttackUnitParser
TryPsiAttackItemParser	Mod/ModScript.h	/^	struct TryPsiAttackItemParser : ScriptParserEvents<ScriptOutputArgs<int&>, const BattleItem*, const BattleUnit*, const BattleUnit*, const RuleSkill*, int, int, int, RNG::RandomState*, int, int, const SavedBattleGame*>$/;"	s	class:OpenXcom::ModScript
TryPsiAttackItemParser	Savegame/BattleItem.cpp	/^ModScript::TryPsiAttackItemParser::TryPsiAttackItemParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::TryPsiAttackItemParser
TryPsiAttackUnitParser	Mod/ModScript.h	/^	struct TryPsiAttackUnitParser : ScriptParserEvents<ScriptOutputArgs<int&>, const BattleItem*, const BattleUnit*, const BattleUnit*, const RuleSkill*, int, int, int, const SavedBattleGame*>$/;"	s	class:OpenXcom::ModScript
TryPsiAttackUnitParser	Savegame/BattleUnit.cpp	/^ModScript::TryPsiAttackUnitParser::TryPsiAttackUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name,$/;"	f	class:OpenXcom::ModScript::TryPsiAttackUnitParser
TunnelData	Mod/MapScript.h	/^	TunnelData() : level(0) { }$/;"	f	struct:OpenXcom::TunnelData
TunnelData	Mod/MapScript.h	/^struct TunnelData$/;"	s	namespace:OpenXcom
TurnDiaryState	Battlescape/TurnDiaryState.cpp	/^TurnDiaryState::TurnDiaryState(const HitLog *hitLog)$/;"	f	class:OpenXcom::TurnDiaryState
TurnDiaryState	Battlescape/TurnDiaryState.h	/^class TurnDiaryState : public State$/;"	c	namespace:OpenXcom
TypeTag	Engine/HelperMeta.h	/^struct TypeTag$/;"	s	namespace:OpenXcom::helper
U	Engine/Adlib/fmopl.cpp	130;"	d	file:
U	Engine/Adlib/fmopl.cpp	174;"	d	file:
UCode	Engine/Unicode.h	/^typedef Uint32 UCode;$/;"	t	namespace:OpenXcom
UFOPAEDIA_COMMENDATIONS	Ufopaedia/Ufopaedia.h	/^	static const std::string UFOPAEDIA_COMMENDATIONS = "STR_COMMENDATIONS_UC";$/;"	m	namespace:OpenXcom
UFOPAEDIA_CURSOR	Mod/Mod.cpp	/^int Mod::UFOPAEDIA_CURSOR;$/;"	m	class:OpenXcom::Mod	file:
UFOPAEDIA_CURSOR	Mod/Mod.h	/^	static int UFOPAEDIA_CURSOR;$/;"	m	class:OpenXcom::Mod
UFOPAEDIA_NOT_AVAILABLE	Ufopaedia/Ufopaedia.h	/^	static const std::string UFOPAEDIA_NOT_AVAILABLE = "STR_NOT_AVAILABLE";$/;"	m	namespace:OpenXcom
UFOPAEDIA_TYPE_ARMOR	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_ARMOR              = 5,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_BASE_FACILITY	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_BASE_FACILITY      = 6,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_CRAFT	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_CRAFT              = 1,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_CRAFT_WEAPON	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_CRAFT_WEAPON       = 2,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_ITEM	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_ITEM               = 4,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_TEXT	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_TEXT               = 8,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_TEXTIMAGE	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_TEXTIMAGE          = 7,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_TFTD	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_TFTD               = 10,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_TFTD_ARMOR	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_TFTD_ARMOR         = 15,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_TFTD_BASE_FACILITY	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_TFTD_BASE_FACILITY = 16,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_TFTD_CRAFT	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_TFTD_CRAFT         = 11,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_TFTD_CRAFT_WEAPON	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_TFTD_CRAFT_WEAPON  = 12,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_TFTD_ITEM	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_TFTD_ITEM          = 14,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_TFTD_USO	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_TFTD_USO           = 17$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_TFTD_VEHICLE	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_TFTD_VEHICLE       = 13,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_UFO	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_UFO                = 9,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_UNKNOWN	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_UNKNOWN            = 0,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOPAEDIA_TYPE_VEHICLE	Mod/ArticleDefinition.h	/^		UFOPAEDIA_TYPE_VEHICLE            = 3,$/;"	e	enum:OpenXcom::UfopaediaTypeId
UFOSEGMENT	Savegame/Node.h	/^	static const int UFOSEGMENT = 2000;$/;"	m	class:OpenXcom::Node
UFO_CRASH	Mod/Mod.cpp	/^int Mod::UFO_CRASH;$/;"	m	class:OpenXcom::Mod	file:
UFO_CRASH	Mod/Mod.h	/^	static int UFO_CRASH;$/;"	m	class:OpenXcom::Mod
UFO_EXPLODE	Mod/Mod.cpp	/^int Mod::UFO_EXPLODE;$/;"	m	class:OpenXcom::Mod	file:
UFO_EXPLODE	Mod/Mod.h	/^	static int UFO_EXPLODE;$/;"	m	class:OpenXcom::Mod
UFO_FIRE	Mod/Mod.cpp	/^int Mod::UFO_FIRE;$/;"	m	class:OpenXcom::Mod	file:
UFO_FIRE	Mod/Mod.h	/^	static int UFO_FIRE;$/;"	m	class:OpenXcom::Mod
UFO_HIT	Mod/Mod.cpp	/^int Mod::UFO_HIT;$/;"	m	class:OpenXcom::Mod	file:
UFO_HIT	Mod/Mod.h	/^	static int UFO_HIT;$/;"	m	class:OpenXcom::Mod
UINT16	Engine/Adlib/fmopl.h	/^typedef unsigned short	UINT16;  \/* unsigned 16bit *\/$/;"	t
UINT32	Engine/Adlib/fmopl.h	/^typedef unsigned int	UINT32;  \/* unsigned 32bit *\/$/;"	t
UINT64_MAX	Engine/RNG.cpp	24;"	d	file:
UINT8	Engine/Adlib/fmopl.h	/^typedef unsigned char	UINT8;   \/* unsigned  8bit *\/$/;"	t
UNDERWATER_SMOKE_OFFSET	Mod/Mod.cpp	/^int Mod::UNDERWATER_SMOKE_OFFSET;$/;"	m	class:OpenXcom::Mod	file:
UNDERWATER_SMOKE_OFFSET	Mod/Mod.h	/^	static int UNDERWATER_SMOKE_OFFSET;$/;"	m	class:OpenXcom::Mod
UNIT_RESPONSE_SOUNDS_FREQUENCY	Mod/Mod.cpp	/^int Mod::UNIT_RESPONSE_SOUNDS_FREQUENCY[4];$/;"	m	class:OpenXcom::Mod	file:
UNIT_RESPONSE_SOUNDS_FREQUENCY	Mod/Mod.h	/^	static int UNIT_RESPONSE_SOUNDS_FREQUENCY[4];$/;"	m	class:OpenXcom::Mod
UString	Engine/Unicode.h	/^typedef std::basic_string<UCode> UString;$/;"	t	namespace:OpenXcom
Ufo	Savegame/Ufo.cpp	/^Ufo::Ufo(const RuleUfo *rules, int uniqueId, int hunterKillerPercentage, int huntMode, int huntBehavior) : MovingTarget(),$/;"	f	class:OpenXcom::Ufo
Ufo	Savegame/Ufo.h	/^class Ufo : public MovingTarget$/;"	c	namespace:OpenXcom
UfoDetectedState	Geoscape/UfoDetectedState.cpp	/^UfoDetectedState::UfoDetectedState(Ufo *ufo, GeoscapeState *state, bool detected, bool hyperwave) : _ufo(ufo), _state(state)$/;"	f	class:OpenXcom::UfoDetectedState
UfoDetectedState	Geoscape/UfoDetectedState.h	/^class UfoDetectedState : public State$/;"	c	namespace:OpenXcom
UfoLostState	Geoscape/UfoLostState.cpp	/^UfoLostState::UfoLostState(const std::string &id) : _id(id)$/;"	f	class:OpenXcom::UfoLostState
UfoLostState	Geoscape/UfoLostState.h	/^class UfoLostState : public State$/;"	c	namespace:OpenXcom
UfoStatus	Savegame/Ufo.h	/^	enum UfoStatus { FLYING, LANDED, CRASHED, DESTROYED };$/;"	g	class:OpenXcom::Ufo
UfoTrackerState	Geoscape/UfoTrackerState.cpp	/^UfoTrackerState::UfoTrackerState(GeoscapeState *state, Globe *globe) : _state(state), _globe(globe)$/;"	f	class:OpenXcom::UfoTrackerState
UfoTrackerState	Geoscape/UfoTrackerState.h	/^class UfoTrackerState : public State$/;"	c	namespace:OpenXcom
UfoTrajectory	Mod/UfoTrajectory.cpp	/^UfoTrajectory::UfoTrajectory(const std::string &id) : _id(id), _groundTimer(5)$/;"	f	class:OpenXcom::UfoTrajectory
UfoTrajectory	Mod/UfoTrajectory.h	/^class UfoTrajectory$/;"	c	namespace:OpenXcom
Ufopaedia	Ufopaedia/Ufopaedia.h	/^	class Ufopaedia$/;"	c	namespace:OpenXcom
UfopaediaSelectState	Ufopaedia/UfopaediaSelectState.cpp	/^	UfopaediaSelectState::UfopaediaSelectState(const std::string &section, int heightOffset, int windowOffset) : _section(section), _lstScroll(0)$/;"	f	class:OpenXcom::UfopaediaSelectState
UfopaediaSelectState	Ufopaedia/UfopaediaSelectState.h	/^	class UfopaediaSelectState : public State$/;"	c	namespace:OpenXcom
UfopaediaStartState	Ufopaedia/UfopaediaStartState.cpp	/^	UfopaediaStartState::UfopaediaStartState() : _offset(0), _scroll(0), _maxButtons(0), _heightOffset(0), _windowOffset(0), _cats(_game->getMod()->getUfopaediaCategoryList())$/;"	f	class:OpenXcom::UfopaediaStartState
UfopaediaStartState	Ufopaedia/UfopaediaStartState.h	/^	class UfopaediaStartState : public State$/;"	c	namespace:OpenXcom
UfopaediaTypeId	Mod/ArticleDefinition.h	/^	enum UfopaediaTypeId {$/;"	g	namespace:OpenXcom
Uint16	Engine/Script.h	/^enum RegEnum : Uint16;$/;"	m	namespace:OpenXcom
Uint8	Battlescape/TileEngine.h	/^enum BattleActionType : Uint8;$/;"	m	namespace:OpenXcom
Uint8	Battlescape/TileEngine.h	/^enum LightLayers : Uint8;$/;"	m	namespace:OpenXcom
Uint8	Engine/Script.h	/^enum RetEnum : Uint8;$/;"	m	namespace:OpenXcom
Uint8	Mod/Armor.h	/^enum ForcedTorso : Uint8;$/;"	m	namespace:OpenXcom
Uint8	Mod/Armor.h	/^enum UnitSide : Uint8;$/;"	m	namespace:OpenXcom
Uint8	Mod/RuleSkill.h	/^enum BattleActionType : Uint8;$/;"	m	namespace:OpenXcom
Uint8	Savegame/BattleItem.h	/^enum BattleActionType : Uint8;$/;"	m	namespace:OpenXcom
Umask	Engine/Scalers/common.h	34;"	d
Unicode	Engine/Unicode.cpp	/^namespace Unicode$/;"	n	namespace:OpenXcom	file:
Unicode	Engine/Unicode.h	/^namespace Unicode$/;"	n	namespace:OpenXcom
UniqueBufferDeleter	Engine/Surface.h	/^	struct UniqueBufferDeleter$/;"	s	class:OpenXcom::Surface
UniqueSoundDeleter	Engine/Sound.h	/^	struct UniqueSoundDeleter$/;"	s	class:OpenXcom::Sound
UniqueSurfaceDeleter	Engine/Surface.h	/^	struct UniqueSurfaceDeleter$/;"	s	class:OpenXcom::Surface
Unit	Mod/Unit.cpp	/^Unit::Unit(const std::string &type) :$/;"	f	class:OpenXcom::Unit
Unit	Mod/Unit.h	/^class Unit$/;"	c	namespace:OpenXcom
UnitBodyPartEx	Savegame/BattleUnit.h	/^enum UnitBodyPartEx {BODYPART_LEGS = BODYPART_MAX, BODYPART_COLLAPSING, BODYPART_ITEM_RIGHTHAND, BODYPART_ITEM_LEFTHAND, BODYPART_ITEM_FLOOR, BODYPART_ITEM_INVENTORY, BODYPART_LARGE_TORSO, BODYPART_LARGE_PROPULSION = BODYPART_LARGE_TORSO + 4, BODYPART_LARGE_TURRET = BODYPART_LARGE_PROPULSION + 4};$/;"	g	namespace:OpenXcom
UnitDieBState	Battlescape/UnitDieBState.cpp	/^UnitDieBState::UnitDieBState(BattlescapeGame *parent, BattleUnit *unit, const RuleDamageType* damageType, bool noSound) : BattleState(parent),$/;"	f	class:OpenXcom::UnitDieBState
UnitDieBState	Battlescape/UnitDieBState.h	/^class UnitDieBState : public BattleState$/;"	c	namespace:OpenXcom
UnitFallBState	Battlescape/UnitFallBState.cpp	/^UnitFallBState::UnitFallBState(BattlescapeGame *parent) : BattleState(parent), _terrain(0)$/;"	f	class:OpenXcom::UnitFallBState
UnitFallBState	Battlescape/UnitFallBState.h	/^class UnitFallBState : public BattleState$/;"	c	namespace:OpenXcom
UnitInfoState	Battlescape/UnitInfoState.cpp	/^UnitInfoState::UnitInfoState(BattleUnit *unit, BattlescapeState *parent, bool fromInventory, bool mindProbe) : _unit(unit), _parent(parent), _fromInventory(fromInventory), _mindProbe(mindProbe)$/;"	f	class:OpenXcom::UnitInfoState
UnitInfoState	Battlescape/UnitInfoState.h	/^class UnitInfoState : public State$/;"	c	namespace:OpenXcom
UnitPanicBState	Battlescape/UnitPanicBState.cpp	/^UnitPanicBState::UnitPanicBState(BattlescapeGame *parent, BattleUnit *unit) : BattleState(parent), _unit(unit), _shotsFired(0)$/;"	f	class:OpenXcom::UnitPanicBState
UnitPanicBState	Battlescape/UnitPanicBState.h	/^class UnitPanicBState : public BattleState$/;"	c	namespace:OpenXcom
UnitSprite	Battlescape/UnitSprite.cpp	/^UnitSprite::UnitSprite(Surface* dest, const Mod* mod, const SavedBattleGame* save, int frame, bool helmet) :$/;"	f	class:OpenXcom::UnitSprite
UnitSprite	Battlescape/UnitSprite.h	/^class UnitSprite$/;"	c	namespace:OpenXcom
UnitStats	Mod/Unit.h	/^	UnitStats() : tu(0), stamina(0), health(0), bravery(0), reactions(0), firing(0), throwing(0), strength(0), psiStrength(0), psiSkill(0), melee(0), mana(0) {};$/;"	f	struct:OpenXcom::UnitStats
UnitStats	Mod/Unit.h	/^	UnitStats(int tu_, int stamina_, int health_, int bravery_, int reactions_, int firing_, int throwing_, int strength_, int psiStrength_, int psiSkill_, int melee_, int mana_) : tu(tu_), stamina(stamina_), health(health_), bravery(bravery_), reactions(reactions_), firing(firing_), throwing(throwing_), strength(strength_), psiStrength(psiStrength_), psiSkill(psiSkill_), melee(melee_), mana(mana_) {};$/;"	f	struct:OpenXcom::UnitStats
UnitStats	Mod/Unit.h	/^struct UnitStats$/;"	s	namespace:OpenXcom
UnitStatus	Savegame/BattleUnit.h	/^enum UnitStatus {STATUS_STANDING, STATUS_WALKING, STATUS_FLYING, STATUS_TURNING, STATUS_AIMING, STATUS_COLLAPSING, STATUS_DEAD, STATUS_UNCONSCIOUS, STATUS_PANICKING, STATUS_BERSERK, STATUS_IGNORE_ME};$/;"	g	namespace:OpenXcom
UnitTurnBState	Battlescape/UnitTurnBState.cpp	/^UnitTurnBState::UnitTurnBState(BattlescapeGame *parent, BattleAction action, bool chargeTUs) : BattleState(parent, action), _unit(0), _turret(false), _chargeTUs(chargeTUs)$/;"	f	class:OpenXcom::UnitTurnBState
UnitTurnBState	Battlescape/UnitTurnBState.h	/^class UnitTurnBState : public BattleState$/;"	c	namespace:OpenXcom
UnitWalkBState	Battlescape/UnitWalkBState.cpp	/^UnitWalkBState::UnitWalkBState(BattlescapeGame *parent, BattleAction action) : BattleState(parent, action), _unit(0), _pf(0), _terrain(0), _falling(false), _beforeFirstStep(false), _numUnitsSpotted(0), _preMovementCost(0)$/;"	f	class:OpenXcom::UnitWalkBState
UnitWalkBState	Battlescape/UnitWalkBState.h	/^class UnitWalkBState : public BattleState$/;"	c	namespace:OpenXcom
UnitWalkingOffset	Battlescape/Map.h	/^struct UnitWalkingOffset$/;"	s	namespace:OpenXcom
Unknown	Engine/Script.h	/^	Unknown = (size_t)-1,$/;"	m	class:OpenXcom::ProgPos
UnsafePointerContainer	Engine/OpenGL.cpp	/^} UnsafePointerContainer;$/;"	t	namespace:OpenXcom	typeref:union:OpenXcom::__anon6	file:
UpdateAmmo	Mod/RuleItem.cpp	/^void UpdateAmmo(BattleActionAttack& attack)$/;"	f	namespace:OpenXcom::__anon20
UpdateAttacker	Mod/RuleItem.cpp	/^void UpdateAttacker(BattleActionAttack& attack)$/;"	f	namespace:OpenXcom::__anon20
UpdateGrenade	Mod/RuleItem.cpp	/^void UpdateGrenade(BattleActionAttack& attack)$/;"	f	namespace:OpenXcom::__anon20
UpdateHandler	Engine/Adlib/fmopl.h	/^	OPL_UPDATEHANDLER UpdateHandler;	\/* stream update handler   *\/$/;"	m	struct:fm_opl_f
UpdateParam	Engine/Adlib/fmopl.h	/^	int UpdateParam;					\/* stream update parameter *\/$/;"	m	struct:fm_opl_f
VERTICAL_MARGIN	Interface/ComboBox.cpp	/^const int ComboBox::VERTICAL_MARGIN = 3;$/;"	m	class:OpenXcom::ComboBox	file:
VERTICAL_MARGIN	Interface/ComboBox.h	/^	static const int VERTICAL_MARGIN;$/;"	m	class:OpenXcom::ComboBox
VFS	Engine/FileMap.cpp	/^	VFS() : mods(), stack(), rsorder() { }$/;"	f	struct:OpenXcom::FileMap::VFS
VFS	Engine/FileMap.cpp	/^struct VFS {$/;"	s	namespace:OpenXcom::FileMap	file:
VFSLayer	Engine/FileMap.cpp	/^	VFSLayer(const std::string& path) : fullpath(path), resources(), rulesets(), vdirs(),$/;"	f	struct:OpenXcom::FileMap::VFSLayer
VFSLayer	Engine/FileMap.cpp	/^struct VFSLayer {$/;"	s	namespace:OpenXcom::FileMap	file:
VFSLayerStack	Engine/FileMap.cpp	/^	VFSLayerStack() : layers(), resources(), rulesets(), vdirs() { }$/;"	f	struct:OpenXcom::FileMap::VFSLayerStack
VFSLayerStack	Engine/FileMap.cpp	/^struct VFSLayerStack {$/;"	s	namespace:OpenXcom::FileMap	file:
VIB_ENT	Engine/Adlib/fmopl.cpp	100;"	d	file:
VIB_RATE	Engine/Adlib/fmopl.cpp	105;"	d	file:
VIB_SHIFT	Engine/Adlib/fmopl.cpp	101;"	d	file:
VIB_TABLE	Engine/Adlib/fmopl.cpp	/^static INT32 *VIB_TABLE;$/;"	v	file:
VIDEO_FMV	Engine/Options.h	/^enum VideoFormat { VIDEO_FMV, VIDEO_SLIDE };$/;"	e	enum:OpenXcom::VideoFormat
VIDEO_SLIDE	Engine/Options.h	/^enum VideoFormat { VIDEO_FMV, VIDEO_SLIDE };$/;"	e	enum:OpenXcom::VideoFormat
VIDEO_WINDOW_POS	Engine/Screen.cpp	/^static char VIDEO_WINDOW_POS[VIDEO_WINDOW_POS_LEN];$/;"	m	namespace:OpenXcom	file:
VIDEO_WINDOW_POS_LEN	Engine/Screen.cpp	/^static const int VIDEO_WINDOW_POS_LEN = 40;$/;"	m	namespace:OpenXcom	file:
VISIBLE_MAX	Battlescape/BattlescapeState.h	/^	static const int VISIBLE_MAX = 10;$/;"	m	class:OpenXcom::BattlescapeState
VLT_CEILING	Mod/MapScript.h	/^enum VerticalLevelType {VLT_GROUND, VLT_MIDDLE, VLT_CEILING, VLT_EMPTY, VLT_DECORATION, VLT_CRAFT, VLT_LINE};$/;"	e	enum:OpenXcom::VerticalLevelType
VLT_CRAFT	Mod/MapScript.h	/^enum VerticalLevelType {VLT_GROUND, VLT_MIDDLE, VLT_CEILING, VLT_EMPTY, VLT_DECORATION, VLT_CRAFT, VLT_LINE};$/;"	e	enum:OpenXcom::VerticalLevelType
VLT_DECORATION	Mod/MapScript.h	/^enum VerticalLevelType {VLT_GROUND, VLT_MIDDLE, VLT_CEILING, VLT_EMPTY, VLT_DECORATION, VLT_CRAFT, VLT_LINE};$/;"	e	enum:OpenXcom::VerticalLevelType
VLT_EMPTY	Mod/MapScript.h	/^enum VerticalLevelType {VLT_GROUND, VLT_MIDDLE, VLT_CEILING, VLT_EMPTY, VLT_DECORATION, VLT_CRAFT, VLT_LINE};$/;"	e	enum:OpenXcom::VerticalLevelType
VLT_GROUND	Mod/MapScript.h	/^enum VerticalLevelType {VLT_GROUND, VLT_MIDDLE, VLT_CEILING, VLT_EMPTY, VLT_DECORATION, VLT_CRAFT, VLT_LINE};$/;"	e	enum:OpenXcom::VerticalLevelType
VLT_LINE	Mod/MapScript.h	/^enum VerticalLevelType {VLT_GROUND, VLT_MIDDLE, VLT_CEILING, VLT_EMPTY, VLT_DECORATION, VLT_CRAFT, VLT_LINE};$/;"	e	enum:OpenXcom::VerticalLevelType
VLT_MIDDLE	Mod/MapScript.h	/^enum VerticalLevelType {VLT_GROUND, VLT_MIDDLE, VLT_CEILING, VLT_EMPTY, VLT_DECORATION, VLT_CRAFT, VLT_LINE};$/;"	e	enum:OpenXcom::VerticalLevelType
VOLUME_GRADIENT	Engine/Game.cpp	/^const double Game::VOLUME_GRADIENT = 10.0;$/;"	m	class:OpenXcom::Game	file:
VOLUME_GRADIENT	Engine/Game.h	/^	static const double VOLUME_GRADIENT;$/;"	m	class:OpenXcom::Game
ValueIterator	Engine/Collections.h	/^	struct ValueIterator$/;"	s	class:OpenXcom::Collections
Vector3i	Battlescape/Position.h	/^typedef Position Vector3i;$/;"	t	namespace:OpenXcom
Vehicle	Savegame/Vehicle.cpp	/^Vehicle::Vehicle(RuleItem *rules, int ammo, int size) : _rules(rules), _ammo(ammo), _size(size)$/;"	f	class:OpenXcom::Vehicle
Vehicle	Savegame/Vehicle.h	/^class Vehicle$/;"	c	namespace:OpenXcom
VehicleDeploymentData	Savegame/Craft.h	/^	VehicleDeploymentData() : pos(-1, -1, -1), dir(0), used(false) { }$/;"	f	struct:OpenXcom::VehicleDeploymentData
VehicleDeploymentData	Savegame/Craft.h	/^struct VehicleDeploymentData$/;"	s	namespace:OpenXcom
Version	main.cpp	/^const char Version[] = "$VER: OpenXCom " OPENXCOM_VERSION_SHORT " (" __AMIGADATE__  ")";$/;"	v
VerticalLevel	Mod/MapScript.h	/^	VerticalLevel() :$/;"	f	struct:OpenXcom::VerticalLevel
VerticalLevel	Mod/MapScript.h	/^struct VerticalLevel$/;"	s	namespace:OpenXcom
VerticalLevelType	Mod/MapScript.h	/^enum VerticalLevelType {VLT_GROUND, VLT_MIDDLE, VLT_CEILING, VLT_EMPTY, VLT_DECORATION, VLT_CRAFT, VLT_LINE};$/;"	g	namespace:OpenXcom
VexelsToTiles	Mod/RuleItem.cpp	/^const float VexelsToTiles = 0.0625f;$/;"	m	namespace:OpenXcom	file:
VideoFormat	Engine/Options.h	/^enum VideoFormat { VIDEO_FMV, VIDEO_SLIDE };$/;"	g	namespace:OpenXcom
VideoState	Menu/VideoState.cpp	/^VideoState::VideoState(const std::vector<std::string> *videos, const std::vector<std::string> *tracks, bool useUfoAudioSequence)$/;"	f	class:OpenXcom::VideoState
VideoState	Menu/VideoState.h	/^class VideoState : public State$/;"	c	namespace:OpenXcom
VisibilityBlockCache	Battlescape/TileEngine.h	/^	struct VisibilityBlockCache$/;"	s	class:OpenXcom::TileEngine
VisibilityUnitParser	Mod/ModScript.h	/^	struct VisibilityUnitParser : ScriptParserEvents<ScriptOutputArgs<int&, int, ScriptTag<BattleUnitVisibility>&>, const BattleUnit*, const BattleUnit*, int, int, int, int>$/;"	s	class:OpenXcom::ModScript
VisibilityUnitParser	Savegame/BattleUnit.cpp	/^ModScript::VisibilityUnitParser::VisibilityUnitParser(ScriptGlobal* shared, const std::string& name, Mod* mod) : ScriptParserEvents{ shared, name, "current_visibility", "default_visibility", "visibility_mode", "observer_unit", "target_unit", "distance", "distance_max", "smoke_density", "fire_density", }$/;"	f	class:OpenXcom::ModScript::VisibilityUnitParser
Vmask	Engine/Scalers/common.h	35;"	d
WALK_OFFSET	Mod/Mod.cpp	/^int Mod::WALK_OFFSET;$/;"	m	class:OpenXcom::Mod	file:
WALK_OFFSET	Mod/Mod.h	/^	static int WALK_OFFSET;$/;"	m	class:OpenXcom::Mod
WHITE_NOISE_db	Engine/Adlib/fmopl.cpp	503;"	d	file:
WIN32_LEAN_AND_MEAN	Engine/CrossPlatform.cpp	42;"	d	file:
WIN32_LEAN_AND_MEAN	Engine/Unicode.cpp	32;"	d	file:
WINDOW_POPUP	Mod/Mod.cpp	/^int Mod::WINDOW_POPUP[3];$/;"	m	class:OpenXcom::Mod	file:
WINDOW_POPUP	Mod/Mod.h	/^	static int WINDOW_POPUP[3];$/;"	m	class:OpenXcom::Mod
WRAP_AUTO	Engine/Language.h	/^enum TextWrapping { WRAP_AUTO, WRAP_WORDS, WRAP_LETTERS };$/;"	e	enum:OpenXcom::TextWrapping
WRAP_LETTERS	Engine/Language.h	/^enum TextWrapping { WRAP_AUTO, WRAP_WORDS, WRAP_LETTERS };$/;"	e	enum:OpenXcom::TextWrapping
WRAP_WORDS	Engine/Language.h	/^enum TextWrapping { WRAP_AUTO, WRAP_WORDS, WRAP_LETTERS };$/;"	e	enum:OpenXcom::TextWrapping
WRITE_DST	Engine/Zoom.cpp	548;"	d	file:
WarningMessage	Battlescape/WarningMessage.cpp	/^WarningMessage::WarningMessage(int width, int height, int x, int y) : Surface(width, height, x, y), _color(0), _fade(0)$/;"	f	class:OpenXcom::WarningMessage
WarningMessage	Battlescape/WarningMessage.h	/^class WarningMessage : public Surface$/;"	c	namespace:OpenXcom
WarpValue	Engine/ScriptBind.h	/^struct WarpValue$/;"	s	namespace:OpenXcom::helper
Waypoint	Savegame/Waypoint.cpp	/^Waypoint::Waypoint() : Target()$/;"	f	class:OpenXcom::Waypoint
Waypoint	Savegame/Waypoint.h	/^class Waypoint : public Target$/;"	c	namespace:OpenXcom
WeaponMax	Mod/RuleCraft.h	/^	static const int WeaponMax = 4;$/;"	m	class:OpenXcom::RuleCraft
WeaponTypeMax	Mod/RuleCraft.h	/^	static const int WeaponTypeMax = 8;$/;"	m	class:OpenXcom::RuleCraft
WeightedOptions	Savegame/WeightedOptions.h	/^	WeightedOptions() : _totalWeight(0) { \/* Empty by design. *\/ }$/;"	f	class:OpenXcom::WeightedOptions
WeightedOptions	Savegame/WeightedOptions.h	/^class WeightedOptions$/;"	c	namespace:OpenXcom
Window	Interface/Window.cpp	/^Window::Window(State *state, int width, int height, int x, int y, WindowPopup popup) : Surface(width, height, x, y),$/;"	f	class:OpenXcom::Window
Window	Interface/Window.h	/^class Window : public Surface$/;"	c	namespace:OpenXcom
WindowPopup	Interface/Window.h	/^enum WindowPopup { POPUP_NONE, POPUP_HORIZONTAL, POPUP_VERTICAL, POPUP_BOTH };$/;"	g	namespace:OpenXcom
WomanHairColor	Mod/Mod.cpp	/^		static const Uint8 WomanHairColor = 1 << 4;$/;"	m	struct:OpenXcom::__anon29::HairXCOM2	file:
Wxlef	Engine/FastLineClip.h	/^	double Wxlef, Wxrig, Wytop, Wybot;$/;"	m	class:OpenXcom::FastLineClip
Wxrig	Engine/FastLineClip.h	/^	double Wxlef, Wxrig, Wytop, Wybot;$/;"	m	class:OpenXcom::FastLineClip
Wybot	Engine/FastLineClip.h	/^	double Wxlef, Wxrig, Wytop, Wybot;$/;"	m	class:OpenXcom::FastLineClip
Wytop	Engine/FastLineClip.h	/^	double Wxlef, Wxrig, Wytop, Wybot;$/;"	m	class:OpenXcom::FastLineClip
XBRZ_CONFIG_HEADER_284578425345	Engine/Scalers/config.h	17;"	d
XBRZ_HEADER_3847894708239054	Engine/Scalers/xbrz.h	17;"	d
Xcom2Rad	fmath.h	/^inline double Xcom2Rad(int deg)$/;"	f
XcomDistance	fmath.h	/^inline int XcomDistance(double nautical)$/;"	f
XuLine	Geoscape/Globe.cpp	/^void Globe::XuLine(Surface* surface, Surface* src, double x1, double y1, double x2, double y2, int shade)$/;"	f	class:OpenXcom::Globe
Y8950UpdateOne	Engine/Adlib/fmopl.cpp	/^void Y8950UpdateOne(FM_OPL *OPL, INT16 *buffer, int length)$/;"	f
YAML	Battlescape/Position.h	/^namespace YAML$/;"	n
YAML	Mod/AlienDeployment.cpp	/^namespace YAML$/;"	n	file:
YAML	Mod/ArticleDefinition.cpp	/^namespace YAML$/;"	n	file:
YAML	Mod/MapBlock.cpp	/^namespace YAML$/;"	n	file:
YAML	Mod/RuleAlienMission.cpp	/^namespace YAML$/;"	n	file:
YAML	Mod/RuleEnviroEffects.cpp	/^namespace YAML$/;"	n	file:
YAML	Mod/RuleInventory.cpp	/^namespace YAML$/;"	n	file:
YAML	Mod/RuleRegion.h	/^namespace YAML$/;"	n
YAML	Mod/Texture.h	/^namespace YAML$/;"	n
YAML	Mod/UfoTrajectory.cpp	/^namespace YAML$/;"	n	file:
YAML	Mod/Unit.h	/^namespace YAML$/;"	n
YAML	Savegame/Craft.cpp	/^namespace YAML$/;"	n	file:
YM3812UpdateOne	Engine/Adlib/fmopl.cpp	/^void YM3812UpdateOne(FM_OPL *OPL, INT16 *buffer, int length, int stripe, float volume)$/;"	f
YUV1	Engine/Scalers/init.cpp	/^uint32_t   YUV1, YUV2;$/;"	v
YUV2	Engine/Scalers/init.cpp	/^uint32_t   YUV1, YUV2;$/;"	v
YamlTagMap	Mod/Mod.cpp	/^const std::string YamlTagMap = "tag:yaml.org,2002:map";$/;"	m	namespace:OpenXcom::__anon28	file:
YamlTagMapShort	Mod/Mod.cpp	/^const std::string YamlTagMapShort = "!!map";$/;"	m	namespace:OpenXcom::__anon28	file:
YamlTagNonSpecific	Mod/Mod.cpp	/^const std::string YamlTagNonSpecific = "?";$/;"	m	namespace:OpenXcom::__anon28	file:
YamlTagSeq	Mod/Mod.cpp	/^const std::string YamlTagSeq = "tag:yaml.org,2002:seq";$/;"	m	namespace:OpenXcom::__anon28	file:
YamlTagSeqShort	Mod/Mod.cpp	/^const std::string YamlTagSeqShort = "!!seq";$/;"	m	namespace:OpenXcom::__anon28	file:
Ymask	Engine/Scalers/common.h	33;"	d
ZeroOneSingular	Engine/LanguagePlurality.cpp	/^class ZeroOneSingular : public LanguagePlurality$/;"	c	namespace:OpenXcom	file:
ZipContexts	Engine/FileMap.cpp	/^static std::vector<mz_zip_archive *> ZipContexts;	   \/\/ zip decompression contexts shared between layers that came from$/;"	m	namespace:OpenXcom::FileMap	file:
ZipIterator	Engine/Collections.h	/^	struct ZipIterator$/;"	s	class:OpenXcom::Collections
Zoom	Engine/Zoom.h	/^class Zoom$/;"	c	namespace:OpenXcom
_AIActionCounter	Battlescape/BattlescapeGame.h	/^	int _AIActionCounter;$/;"	m	class:OpenXcom::BattlescapeGame
_AIMode	Battlescape/AIModule.h	/^	int _AIMode, _intelligence, _closestDist;$/;"	m	class:OpenXcom::AIModule
_AISecondMove	Battlescape/BattlescapeGame.h	/^	bool _AISecondMove, _playedAggroSound;$/;"	m	class:OpenXcom::BattlescapeGame
_APS_NEXT_COMMAND_VALUE	resource.h	12;"	d
_APS_NEXT_CONTROL_VALUE	resource.h	13;"	d
_APS_NEXT_RESOURCE_VALUE	resource.h	11;"	d
_APS_NEXT_SYMED_VALUE	resource.h	14;"	d
_CRT_SECURE_NO_WARNINGS	Engine/CrossPlatform.cpp	20;"	d	file:
_EnergyMarker	Savegame/Tile.h	/^	Sint16 _EnergyMarker = -1;$/;"	m	class:OpenXcom::Tile
_HEBlocks	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_KIA	Savegame/SoldierDiary.h	/^		_shotAtCounter10in1Mission,	_hitCounter5in1Mission, _timesWoundedTotal, _KIA, _allAliensKilledTotal, _allAliensStunnedTotal,$/;"	m	class:OpenXcom::SoldierDiary
_LOFTS	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, std::vector<int> > > _LOFTS;$/;"	m	class:OpenXcom::MCDPatch
_LOSRequired	Mod/RuleItem.h	/^	bool _LOSRequired, _underwaterOnly, _landOnly, _psiReqiured, _manaRequired;$/;"	m	class:OpenXcom::RuleItem
_MCDPatches	Mod/Mod.h	/^	std::map<std::string, MCDPatch *> _MCDPatches;$/;"	m	class:OpenXcom::Mod
_MIA	Savegame/SoldierDiary.h	/^		_woundsHealedTotal, _allUFOs, _allMissionTypes, _statGainTotal, _revivedUnitTotal, _wholeMedikitTotal, _braveryGainTotal, _bestOfRank, _MIA,$/;"	m	class:OpenXcom::SoldierDiary
_SCL_SECURE_NO_WARNINGS	Engine/FlcPlayer.cpp	26;"	d	file:
_SDLMain_h_	apple/SDLMain.h	8;"	d
_TUFly	Mod/MapData.h	/^	int _yOffset, _TUWalk, _TUFly, _TUSlide, _terrainLevel, _footstepSound, _dieMCD, _altMCD;$/;"	m	class:OpenXcom::MapData
_TUFlys	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_TUMarker	Savegame/Tile.h	/^	Sint16 _TUMarker = -1;$/;"	m	class:OpenXcom::Tile
_TUSlide	Mod/MapData.h	/^	int _yOffset, _TUWalk, _TUFly, _TUSlide, _terrainLevel, _footstepSound, _dieMCD, _altMCD;$/;"	m	class:OpenXcom::MapData
_TUSlides	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_TUWalk	Mod/MapData.h	/^	int _yOffset, _TUWalk, _TUFly, _TUSlide, _terrainLevel, _footstepSound, _dieMCD, _altMCD;$/;"	m	class:OpenXcom::MapData
_TUWalks	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_USE_MATH_DEFINES	Battlescape/ItemSprite.cpp	19;"	d	file:
_USE_MATH_DEFINES	fmath.h	22;"	d
_XCOMProperty	Savegame/BattleItem.h	/^	bool _XCOMProperty, _droppedOnAlienTurn, _isAmmo, _isWeaponWithAmmo, _fuseEnabled;$/;"	m	class:OpenXcom::BattleItem
__HQX_COMMON_H_	Engine/Scalers/common.h	23;"	d
__HQX_H_	Engine/Scalers/hqx.h	22;"	d
__SCALE2X_H	Engine/Scalers/scale2x.h	18;"	d
__SCALE3X_H	Engine/Scalers/scale3x.h	18;"	d
__SCALEBIT_H	Engine/Scalers/scalebit.h	27;"	d
__SSE2__	Engine/Zoom.cpp	43;"	d	file:
__STDC_LIMIT_MACROS	Engine/RNG.h	22;"	d
__has_cpp_attribute	fallthrough.h	4;"	d
_aQty	Basescape/TransferItemsState.h	/^	int _total, _pQty, _cQty, _aQty;$/;"	m	class:OpenXcom::TransferItemsState
_abortCutscene	Mod/AlienDeployment.h	/^	std::string _winCutscene, _loseCutscene, _abortCutscene;$/;"	m	class:OpenXcom::AlienDeployment
_abortPenalty	Mod/AlienDeployment.h	/^	int _objectiveType, _objectivesRequired, _objectiveCompleteScore, _objectiveFailedScore, _despawnPenalty, _abortPenalty, _points, _turnLimit, _cheatTurn;$/;"	m	class:OpenXcom::AlienDeployment
_aborted	Savegame/SavedBattleGame.h	/^	bool _aborted;$/;"	m	class:OpenXcom::SavedBattleGame
_accessLifts	Basescape/PlaceLiftState.h	/^	std::vector<RuleBaseFacility*> _accessLifts;$/;"	m	class:OpenXcom::PlaceLiftState
_accuracy	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_accuracy	Savegame/CraftWeaponProjectile.h	/^	int _accuracy;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_accuracyCloseQuarters	Mod/RuleItem.h	/^	int _accuracyUse, _accuracyMind, _accuracyPanic, _accuracyThrow, _accuracyCloseQuarters;$/;"	m	class:OpenXcom::RuleItem
_accuracyMind	Mod/RuleItem.h	/^	int _accuracyUse, _accuracyMind, _accuracyPanic, _accuracyThrow, _accuracyCloseQuarters;$/;"	m	class:OpenXcom::RuleItem
_accuracyMulti	Mod/RuleItem.h	/^	RuleStatBonus _damageBonus, _meleeBonus, _accuracyMulti, _meleeMulti, _throwMulti, _closeQuartersMulti;$/;"	m	class:OpenXcom::RuleItem
_accuracyPanic	Mod/RuleItem.h	/^	int _accuracyUse, _accuracyMind, _accuracyPanic, _accuracyThrow, _accuracyCloseQuarters;$/;"	m	class:OpenXcom::RuleItem
_accuracyThrow	Mod/RuleItem.h	/^	int _accuracyUse, _accuracyMind, _accuracyPanic, _accuracyThrow, _accuracyCloseQuarters;$/;"	m	class:OpenXcom::RuleItem
_accuracyUse	Mod/RuleItem.h	/^	int _accuracyUse, _accuracyMind, _accuracyPanic, _accuracyThrow, _accuracyCloseQuarters;$/;"	m	class:OpenXcom::RuleItem
_action	Battlescape/ActionMenuItem.h	/^	BattleActionType _action;$/;"	m	class:OpenXcom::ActionMenuItem
_action	Battlescape/ActionMenuState.h	/^	BattleAction *_action;$/;"	m	class:OpenXcom::ActionMenuState
_action	Battlescape/BattleState.h	/^	BattleAction _action;$/;"	m	class:OpenXcom::BattleState
_action	Battlescape/MedikitState.h	/^	BattleAction *_action;$/;"	m	class:OpenXcom::MedikitState
_action	Battlescape/PrimeGrenadeState.h	/^	BattleAction *_action;$/;"	m	class:OpenXcom::PrimeGrenadeState
_action	Battlescape/Projectile.h	/^	BattleAction _action;$/;"	m	class:OpenXcom::Projectile
_action	Battlescape/ScannerState.h	/^	BattleAction *_action;$/;"	m	class:OpenXcom::ScannerState
_action	Geoscape/BaseDefenseState.h	/^	BaseDefenseActionType _action;$/;"	m	class:OpenXcom::BaseDefenseState
_actionMenu	Battlescape/ActionMenuState.h	/^	ActionMenuItem *_actionMenu[6];$/;"	m	class:OpenXcom::ActionMenuState
_activeCrafts	Geoscape/GeoscapeState.h	/^	std::vector<Craft*> _activeCrafts;$/;"	m	class:OpenXcom::GeoscapeState
_activeHand	Savegame/BattleUnit.h	/^	std::string _activeHand;$/;"	m	class:OpenXcom::BattleUnit
_activeMissions	Savegame/SavedGame.h	/^	std::vector<AlienMission*> _activeMissions;$/;"	m	class:OpenXcom::SavedGame
_activityAlien	Savegame/Country.h	/^	std::vector<int> _funding, _activityXcom, _activityAlien;$/;"	m	class:OpenXcom::Country
_activityAlien	Savegame/Region.h	/^	std::vector<int> _activityXcom, _activityAlien;$/;"	m	class:OpenXcom::Region
_activityXcom	Savegame/Country.h	/^	std::vector<int> _funding, _activityXcom, _activityAlien;$/;"	m	class:OpenXcom::Country
_activityXcom	Savegame/Region.h	/^	std::vector<int> _activityXcom, _activityAlien;$/;"	m	class:OpenXcom::Region
_affectsGameProgression	Mod/RuleEventScript.h	/^	bool _affectsGameProgression;$/;"	m	class:OpenXcom::RuleEventScript
_aggression	Mod/Unit.h	/^	int _intelligence, _aggression, _spotter, _sniper, _energyRecovery;$/;"	m	class:OpenXcom::Unit
_aggression	Savegame/BattleUnit.h	/^	int _intelligence, _aggression;$/;"	m	class:OpenXcom::BattleUnit
_aggroSound	Mod/Unit.h	/^	std::vector<int> _deathSound, _panicSound, _berserkSound, _aggroSound;$/;"	m	class:OpenXcom::Unit
_aggroSound	Savegame/BattleUnit.h	/^	std::vector<int> _deathSound, _aggroSound;$/;"	m	class:OpenXcom::BattleUnit
_aggroTarget	Battlescape/AIModule.h	/^	BattleUnit *_aggroTarget;$/;"	m	class:OpenXcom::AIModule
_aiDestroyBaseFacilities	Mod/Mod.h	/^	bool _aiExtendedFireModeChoice, _aiRespectMaxRange, _aiDestroyBaseFacilities;$/;"	m	class:OpenXcom::Mod
_aiExtendedFireModeChoice	Mod/Mod.h	/^	bool _aiExtendedFireModeChoice, _aiRespectMaxRange, _aiDestroyBaseFacilities;$/;"	m	class:OpenXcom::Mod
_aiFireChoiceAggroCoeff	Mod/Mod.h	/^	int _aiFireChoiceIntelCoeff, _aiFireChoiceAggroCoeff;$/;"	m	class:OpenXcom::Mod
_aiFireChoiceIntelCoeff	Mod/Mod.h	/^	int _aiFireChoiceIntelCoeff, _aiFireChoiceAggroCoeff;$/;"	m	class:OpenXcom::Mod
_aiMeleeHitCount	Mod/RuleItem.h	/^	int _aiUseDelay, _aiMeleeHitCount;$/;"	m	class:OpenXcom::RuleItem
_aiPickUpWeaponsMoreActively	Mod/Mod.h	/^	bool _aiPickUpWeaponsMoreActively, _aiPickUpWeaponsMoreActivelyCiv;$/;"	m	class:OpenXcom::Mod
_aiPickUpWeaponsMoreActivelyCiv	Mod/Mod.h	/^	bool _aiPickUpWeaponsMoreActively, _aiPickUpWeaponsMoreActivelyCiv;$/;"	m	class:OpenXcom::Mod
_aiRespectMaxRange	Mod/Mod.h	/^	bool _aiExtendedFireModeChoice, _aiRespectMaxRange, _aiDestroyBaseFacilities;$/;"	m	class:OpenXcom::Mod
_aiUseDelay	Mod/RuleItem.h	/^	int _aiUseDelay, _aiMeleeHitCount;$/;"	m	class:OpenXcom::RuleItem
_aiUseDelayBlaster	Mod/Mod.h	/^	int _aiUseDelayBlaster, _aiUseDelayFirearm, _aiUseDelayGrenade, _aiUseDelayMelee, _aiUseDelayPsionic;$/;"	m	class:OpenXcom::Mod
_aiUseDelayFirearm	Mod/Mod.h	/^	int _aiUseDelayBlaster, _aiUseDelayFirearm, _aiUseDelayGrenade, _aiUseDelayMelee, _aiUseDelayPsionic;$/;"	m	class:OpenXcom::Mod
_aiUseDelayGrenade	Mod/Mod.h	/^	int _aiUseDelayBlaster, _aiUseDelayFirearm, _aiUseDelayGrenade, _aiUseDelayMelee, _aiUseDelayPsionic;$/;"	m	class:OpenXcom::Mod
_aiUseDelayMelee	Mod/Mod.h	/^	int _aiUseDelayBlaster, _aiUseDelayFirearm, _aiUseDelayGrenade, _aiUseDelayMelee, _aiUseDelayPsionic;$/;"	m	class:OpenXcom::Mod
_aiUseDelayPsionic	Mod/Mod.h	/^	int _aiUseDelayBlaster, _aiUseDelayFirearm, _aiUseDelayGrenade, _aiUseDelayMelee, _aiUseDelayPsionic;$/;"	m	class:OpenXcom::Mod
_alert	Mod/AlienDeployment.h	/^	std::string _alert, _alertBackground, _alertDescription;$/;"	m	class:OpenXcom::AlienDeployment
_alertBackground	Mod/AlienDeployment.h	/^	std::string _alert, _alertBackground, _alertDescription;$/;"	m	class:OpenXcom::AlienDeployment
_alertDescription	Mod/AlienDeployment.h	/^	std::string _alert, _alertBackground, _alertDescription;$/;"	m	class:OpenXcom::AlienDeployment
_alertSound	Mod/AlienDeployment.h	/^	int _alertSound;$/;"	m	class:OpenXcom::AlienDeployment
_alertSound	Mod/RuleUfo.h	/^	int _alertSound;$/;"	m	class:OpenXcom::RuleUfo
_alien	Geoscape/GraphsState.h	/^	bool _alien, _income, _country, _finance;$/;"	m	class:OpenXcom::GraphsState
_alienBase	Battlescape/BattlescapeGenerator.h	/^	AlienBase *_alienBase;$/;"	m	class:OpenXcom::BattlescapeGenerator
_alienBaseUpgrades	Mod/AlienDeployment.h	/^	std::vector<std::pair<size_t, WeightedOptions*> > _alienBaseUpgrades;$/;"	m	class:OpenXcom::AlienDeployment
_alienBases	Savegame/SavedGame.h	/^	std::vector<AlienBase*> _alienBases;$/;"	m	class:OpenXcom::SavedGame
_alienContainmentChecked	Savegame/SavedGame.h	/^	bool _alienContainmentChecked;$/;"	m	class:OpenXcom::SavedGame
_alienCountryLines	Geoscape/GraphsState.h	/^	std::vector<Surface *> _alienRegionLines, _alienCountryLines;$/;"	m	class:OpenXcom::GraphsState
_alienCustomDeploy	Battlescape/BattlescapeGenerator.h	/^	const AlienDeployment *_alienCustomDeploy, *_alienCustomMission;$/;"	m	class:OpenXcom::BattlescapeGenerator
_alienCustomDeploy	Savegame/SavedBattleGame.h	/^	std::string _missionType, _strTarget, _strCraftOrBase, _alienCustomDeploy, _alienCustomMission;$/;"	m	class:OpenXcom::SavedBattleGame
_alienCustomMission	Battlescape/BattlescapeGenerator.h	/^	const AlienDeployment *_alienCustomDeploy, *_alienCustomMission;$/;"	m	class:OpenXcom::BattlescapeGenerator
_alienCustomMission	Savegame/SavedBattleGame.h	/^	std::string _missionType, _strTarget, _strCraftOrBase, _alienCustomDeploy, _alienCustomMission;$/;"	m	class:OpenXcom::SavedBattleGame
_alienDeployments	Mod/Mod.h	/^	std::map<std::string, AlienDeployment*> _alienDeployments;$/;"	m	class:OpenXcom::Mod
_alienFuel	Mod/Mod.h	/^	std::pair<std::string, int> _alienFuel;$/;"	m	class:OpenXcom::Mod
_alienInventoryOffsetBigUnit	Mod/Mod.h	/^	int _alienInventoryOffsetX, _alienInventoryOffsetBigUnit;$/;"	m	class:OpenXcom::Mod
_alienInventoryOffsetX	Mod/Mod.h	/^	int _alienInventoryOffsetX, _alienInventoryOffsetBigUnit;$/;"	m	class:OpenXcom::Mod
_alienItemLevel	Battlescape/BattlescapeGenerator.h	/^	int _alienItemLevel;$/;"	m	class:OpenXcom::BattlescapeGenerator
_alienItemLevels	Mod/Mod.h	/^	std::vector<std::vector<int> > _alienItemLevels;$/;"	m	class:OpenXcom::Mod
_alienMissions	Mod/Mod.h	/^	std::map<std::string, RuleAlienMission *> _alienMissions;$/;"	m	class:OpenXcom::Mod
_alienMissionsIndex	Mod/Mod.h	/^	std::vector<std::string> _alienMissionsIndex, _terrainIndex, _customPalettesIndex, _arcScriptIndex, _eventScriptIndex, _eventIndex, _missionScriptIndex;$/;"	m	class:OpenXcom::Mod
_alienRace	Battlescape/BattlescapeGenerator.h	/^	std::string _alienRace;$/;"	m	class:OpenXcom::BattlescapeGenerator
_alienRaces	Menu/NewBattleState.h	/^	std::vector<std::string> _missionTypes, _terrainTypes, _alienRaces, _crafts;$/;"	m	class:OpenXcom::NewBattleState
_alienRaces	Mod/Mod.h	/^	std::map<std::string, AlienRace*> _alienRaces;$/;"	m	class:OpenXcom::Mod
_alienRaces	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_alienRanks	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_alienRegionLines	Geoscape/GraphsState.h	/^	std::vector<Surface *> _alienRegionLines, _alienCountryLines;$/;"	m	class:OpenXcom::GraphsState
_alienStrategy	Savegame/SavedGame.h	/^	AlienStrategy *_alienStrategy;$/;"	m	class:OpenXcom::SavedGame
_aliens	Basescape/ManageAlienContainmentState.h	/^	std::vector<std::string> _aliens;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_aliens	Mod/RuleBaseFacility.h	/^	int _storage, _personnel, _aliens, _crafts, _labs, _workshops, _psiLabs;$/;"	m	class:OpenXcom::RuleBaseFacility
_aliens	Savegame/SaveConverter.h	/^	std::vector<std::string> _aliens;$/;"	m	class:OpenXcom::SaveConverter
_aliensFacingCraftOdds	Mod/Mod.h	/^	std::vector<int> _aliensFacingCraftOdds;$/;"	m	class:OpenXcom::Mod
_aliensIndex	Mod/Mod.h	/^	std::vector<std::string> _aliensIndex, _enviroEffectsIndex, _startingConditionsIndex, _deploymentsIndex, _armorsIndex, _ufopaediaIndex, _ufopaediaCatIndex, _researchIndex, _manufactureIndex;$/;"	m	class:OpenXcom::Mod
_aliensSold	Basescape/ManageAlienContainmentState.h	/^	int _aliensSold;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_align	Interface/Text.h	/^	TextHAlign _align;$/;"	m	class:OpenXcom::Text
_align	Interface/TextList.h	/^	std::map<int, TextHAlign> _align;$/;"	m	class:OpenXcom::TextList
_alignedBuffer	Engine/Surface.h	/^	UniqueBufferPtr _alignedBuffer;$/;"	m	class:OpenXcom::Surface
_aligned_free	Engine/Surface.cpp	41;"	d	file:
_aligned_malloc	Engine/Surface.cpp	40;"	d	file:
_allAliensKilledTotal	Savegame/SoldierDiary.h	/^		_shotAtCounter10in1Mission,	_hitCounter5in1Mission, _timesWoundedTotal, _KIA, _allAliensKilledTotal, _allAliensStunnedTotal,$/;"	m	class:OpenXcom::SoldierDiary
_allAliensStunnedTotal	Savegame/SoldierDiary.h	/^		_shotAtCounter10in1Mission,	_hitCounter5in1Mission, _timesWoundedTotal, _KIA, _allAliensKilledTotal, _allAliensStunnedTotal,$/;"	m	class:OpenXcom::SoldierDiary
_allEnemiesNeutralized	Battlescape/BattlescapeGame.h	/^	bool _allEnemiesNeutralized;$/;"	m	class:OpenXcom::BattlescapeGame
_allMissionTypes	Savegame/SoldierDiary.h	/^		_woundsHealedTotal, _allUFOs, _allMissionTypes, _statGainTotal, _revivedUnitTotal, _wholeMedikitTotal, _braveryGainTotal, _bestOfRank, _MIA,$/;"	m	class:OpenXcom::SoldierDiary
_allUFOs	Savegame/SoldierDiary.h	/^		_woundsHealedTotal, _allUFOs, _allMissionTypes, _statGainTotal, _revivedUnitTotal, _wholeMedikitTotal, _braveryGainTotal, _bestOfRank, _MIA,$/;"	m	class:OpenXcom::SoldierDiary
_allocated	Savegame/Node.h	/^	bool _allocated;$/;"	m	class:OpenXcom::Node
_allowAlienBasesOnWrongTextures	Mod/Mod.h	/^	bool _allowAlienBasesOnWrongTextures;$/;"	m	class:OpenXcom::Mod
_allowAutoLoadout	Battlescape/BattlescapeGenerator.h	/^	bool _allowAutoLoadout, _baseInventory, _generateFuel, _craftDeployed, _ufoDeployed;$/;"	m	class:OpenXcom::BattlescapeGenerator
_allowCountriesToCancelAlienPact	Mod/Mod.h	/^	bool _allowCountriesToCancelAlienPact, _buildInfiltrationBaseCloseToTheCountry;$/;"	m	class:OpenXcom::Mod
_allowLanding	Mod/RuleCraft.h	/^	bool _keepCraftAfterFailedMission, _allowLanding, _spacecraft, _notifyWhenRefueled, _autoPatrol, _undetectable;$/;"	m	class:OpenXcom::RuleCraft
_allowObjectiveRecovery	Mod/AlienDeployment.h	/^	bool _keepCraftAfterFailedMission, _allowObjectiveRecovery;$/;"	m	class:OpenXcom::AlienDeployment
_allowPiloting	Mod/RuleSoldier.h	/^	bool _allowPromotion, _allowPiloting, _showTypeInInventory;$/;"	m	class:OpenXcom::RuleSoldier
_allowPromotion	Mod/RuleSoldier.h	/^	bool _allowPromotion, _allowPiloting, _showTypeInInventory;$/;"	m	class:OpenXcom::RuleSoldier
_allowTwoMainWeapons	Mod/Armor.h	/^	bool _allowTwoMainWeapons;$/;"	m	class:OpenXcom::Armor
_allowedArmors	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _allowedArmors, _forbiddenArmors;$/;"	m	class:OpenXcom::RuleStartingCondition
_allowedCraft	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _allowedCraft, _forbiddenCraft;$/;"	m	class:OpenXcom::RuleStartingCondition
_allowedItemCategories	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _allowedItemCategories, _forbiddenItemCategories;$/;"	m	class:OpenXcom::RuleStartingCondition
_allowedItems	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _allowedItems, _forbiddenItems;$/;"	m	class:OpenXcom::RuleStartingCondition
_allowedSoldierTypes	Mod/RuleSoldierTransformation.h	/^	std::vector<std::string > _allowedSoldierTypes;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_allowedSoldierTypes	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _allowedSoldierTypes, _forbiddenSoldierTypes;$/;"	m	class:OpenXcom::RuleStartingCondition
_allowedVehicles	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _allowedVehicles, _forbiddenVehicles;$/;"	m	class:OpenXcom::RuleStartingCondition
_allowsDeadSoldiers	Mod/RuleSoldierTransformation.h	/^	bool _keepSoldierArmor, _createsClone, _needsCorpseRecovered, _allowsDeadSoldiers, _allowsLiveSoldiers, _allowsWoundedSoldiers;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_allowsKneeling	Mod/Armor.h	/^	Sint8 _allowsRunning, _allowsStrafing, _allowsSneaking, _allowsKneeling, _allowsMoving;$/;"	m	class:OpenXcom::Armor
_allowsLiveSoldiers	Mod/RuleSoldierTransformation.h	/^	bool _keepSoldierArmor, _createsClone, _needsCorpseRecovered, _allowsDeadSoldiers, _allowsLiveSoldiers, _allowsWoundedSoldiers;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_allowsMoving	Mod/Armor.h	/^	Sint8 _allowsRunning, _allowsStrafing, _allowsSneaking, _allowsKneeling, _allowsMoving;$/;"	m	class:OpenXcom::Armor
_allowsRunning	Mod/Armor.h	/^	Sint8 _allowsRunning, _allowsStrafing, _allowsSneaking, _allowsKneeling, _allowsMoving;$/;"	m	class:OpenXcom::Armor
_allowsSneaking	Mod/Armor.h	/^	Sint8 _allowsRunning, _allowsStrafing, _allowsSneaking, _allowsKneeling, _allowsMoving;$/;"	m	class:OpenXcom::Armor
_allowsStrafing	Mod/Armor.h	/^	Sint8 _allowsRunning, _allowsStrafing, _allowsSneaking, _allowsKneeling, _allowsMoving;$/;"	m	class:OpenXcom::Armor
_allowsWoundedSoldiers	Mod/RuleSoldierTransformation.h	/^	bool _keepSoldierArmor, _createsClone, _needsCorpseRecovered, _allowsDeadSoldiers, _allowsLiveSoldiers, _allowsWoundedSoldiers;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_alreadyAvailableCrafts	Basescape/TechTreeViewerState.h	/^	std::unordered_set<std::string> _alreadyAvailableResearch, _alreadyAvailableManufacture, _alreadyAvailableFacilities, _alreadyAvailableCrafts;$/;"	m	class:OpenXcom::TechTreeViewerState
_alreadyAvailableFacilities	Basescape/TechTreeViewerState.h	/^	std::unordered_set<std::string> _alreadyAvailableResearch, _alreadyAvailableManufacture, _alreadyAvailableFacilities, _alreadyAvailableCrafts;$/;"	m	class:OpenXcom::TechTreeViewerState
_alreadyAvailableItems	Basescape/TechTreeViewerState.h	/^	std::unordered_set<std::string> _protectedItems, _alreadyAvailableItems;$/;"	m	class:OpenXcom::TechTreeViewerState
_alreadyAvailableManufacture	Basescape/TechTreeViewerState.h	/^	std::unordered_set<std::string> _alreadyAvailableResearch, _alreadyAvailableManufacture, _alreadyAvailableFacilities, _alreadyAvailableCrafts;$/;"	m	class:OpenXcom::TechTreeViewerState
_alreadyAvailableResearch	Basescape/TechTreeViewerState.h	/^	std::unordered_set<std::string> _alreadyAvailableResearch, _alreadyAvailableManufacture, _alreadyAvailableFacilities, _alreadyAvailableCrafts;$/;"	m	class:OpenXcom::TechTreeViewerState
_alreadyExploded	Savegame/BattleUnit.h	/^	bool _hitByFire, _hitByAnything, _alreadyExploded;$/;"	m	class:OpenXcom::BattleUnit
_alreadyRespawned	Savegame/BattleUnit.h	/^	bool _hidingForTurn, _floorAbove, _respawn, _alreadyRespawned;$/;"	m	class:OpenXcom::BattleUnit
_alt	Engine/Game.h	/^	bool _ctrl, _alt, _shift, _rmb, _mmb;$/;"	m	class:OpenXcom::Game
_altBackgroundImage	Mod/RuleInterface.h	/^	std::string _altBackgroundImage;$/;"	m	class:OpenXcom::RuleInterface
_altMCD	Mod/MapData.h	/^	int _yOffset, _TUWalk, _TUFly, _TUSlide, _terrainLevel, _footstepSound, _dieMCD, _altMCD;$/;"	m	class:OpenXcom::MapData
_altSurface	Interface/BattlescapeButton.h	/^	Surface *_altSurface;$/;"	m	class:OpenXcom::BattlescapeButton
_altUsed	Battlescape/Pathfinding.h	/^	bool _altUsed = false;$/;"	m	class:OpenXcom::Pathfinding
_alternateTerrain	Battlescape/BattlescapeGenerator.h	/^	RuleTerrain *_terrain, *_baseTerrain, *_globeTerrain, *_alternateTerrain;$/;"	m	class:OpenXcom::BattlescapeGenerator
_altitude	Savegame/Ufo.h	/^	std::string _direction, _altitude;$/;"	m	class:OpenXcom::Ufo
_ambience	Mod/RuleTerrain.h	/^	int _minDepth, _maxDepth, _ambience;$/;"	m	class:OpenXcom::RuleTerrain
_ambience	Savegame/SavedBattleGame.h	/^	int _depth, _ambience;$/;"	m	class:OpenXcom::SavedBattleGame
_ambienceRandom	Mod/RuleTerrain.h	/^	std::vector<int> _ambienceRandom;$/;"	m	class:OpenXcom::RuleTerrain
_ambienceRandom	Savegame/SavedBattleGame.h	/^	std::vector<int> _ambienceRandom;$/;"	m	class:OpenXcom::SavedBattleGame
_ambientVolume	Mod/RuleTerrain.h	/^	double _ambientVolume;$/;"	m	class:OpenXcom::RuleTerrain
_ambientVolume	Savegame/SavedBattleGame.h	/^	double _ambientVolume;$/;"	m	class:OpenXcom::SavedBattleGame
_ambushAction	Battlescape/AIModule.h	/^	BattleAction _escapeAction, _ambushAction, _attackAction, _patrolAction, _psiAction;$/;"	m	class:OpenXcom::AIModule
_ambushTUs	Battlescape/AIModule.h	/^	int _escapeTUs, _ambushTUs;$/;"	m	class:OpenXcom::AIModule
_ammo	Battlescape/MeleeAttackBState.h	/^	BattleItem *_weapon, *_ammo;$/;"	m	class:OpenXcom::MeleeAttackBState
_ammo	Battlescape/ProjectileFlyBState.h	/^	BattleItem *_ammo;$/;"	m	class:OpenXcom::ProjectileFlyBState
_ammo	Savegame/CraftWeapon.h	/^	int _ammo;$/;"	m	class:OpenXcom::CraftWeapon
_ammo	Savegame/Vehicle.h	/^	int _ammo, _size;$/;"	m	class:OpenXcom::Vehicle
_ammoColor	Basescape/CraftEquipmentState.h	/^	Uint8 _ammoColor;$/;"	m	class:OpenXcom::CraftEquipmentState
_ammoColor	Basescape/PurchaseState.h	/^	Uint8 _ammoColor;$/;"	m	class:OpenXcom::PurchaseState
_ammoColor	Basescape/SellState.h	/^	Uint8 _ammoColor;$/;"	m	class:OpenXcom::SellState
_ammoColor	Basescape/TransferItemsState.h	/^	Uint8 _ammoColor;$/;"	m	class:OpenXcom::TransferItemsState
_ammoColor	Battlescape/DebriefingState.h	/^	Uint8 _ammoColor;$/;"	m	class:OpenXcom::DebriefingState
_ammoColor	Ufopaedia/ArticleStateItem.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateItem
_ammoColor	Ufopaedia/ArticleStateTFTD.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateTFTD
_ammoItem	Mod/RuleBaseFacility.h	/^	const RuleItem* _ammoItem;$/;"	m	class:OpenXcom::RuleBaseFacility
_ammoItem	Savegame/BattleItem.h	/^	BattleItem *_ammoItem[RuleItem::AmmoSlotMax] = { };$/;"	m	class:OpenXcom::BattleItem
_ammoItem	Savegame/EquipmentLayoutItem.h	/^	std::string _ammoItem[RuleItem::AmmoSlotMax];$/;"	m	class:OpenXcom::EquipmentLayoutItem
_ammoItemName	Mod/RuleBaseFacility.h	/^	std::string _ammoItemName;$/;"	m	class:OpenXcom::RuleBaseFacility
_ammoMax	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_ammoNeeded	Mod/RuleBaseFacility.h	/^	int _ammoNeeded;$/;"	m	class:OpenXcom::RuleBaseFacility
_ammoQuantity	Savegame/BattleItem.h	/^	int _fuseTimer, _ammoQuantity;$/;"	m	class:OpenXcom::BattleItem
_ammoVisibility	Savegame/BattleItem.h	/^	bool _ammoVisibility[RuleItem::AmmoSlotMax] = { };$/;"	m	class:OpenXcom::BattleItem
_amount	Savegame/Production.h	/^	int _amount;$/;"	m	class:OpenXcom::Production
_anim	Menu/StartState.h	/^	int _anim;$/;"	m	class:OpenXcom::StartState
_animFrame	Battlescape/AlienInventory.h	/^	int _animFrame;$/;"	m	class:OpenXcom::AlienInventory
_animFrame	Battlescape/Inventory.h	/^	int _groundOffset, _animFrame;$/;"	m	class:OpenXcom::Inventory
_animFrame	Battlescape/Map.h	/^	int _animFrame;$/;"	m	class:OpenXcom::Map
_animFrame	Savegame/SavedBattleGame.h	/^	int _animFrame;$/;"	m	class:OpenXcom::SavedBattleGame
_animTimer	Battlescape/AlienInventory.h	/^	Timer* _animTimer;$/;"	m	class:OpenXcom::AlienInventory
_animTimer	Battlescape/BattlescapeState.h	/^	Timer *_animTimer, *_gameTimer;$/;"	m	class:OpenXcom::BattlescapeState
_animTimer	Battlescape/Inventory.h	/^	Timer *_animTimer;$/;"	m	class:OpenXcom::Inventory
_animatingHit	Geoscape/DogfightState.h	/^	bool _minimized, _endDogfight, _animatingHit, _waitForPoly, _waitForAltitude;$/;"	m	class:OpenXcom::DogfightState
_animationFrame	Battlescape/ItemSprite.h	/^	int _animationFrame;$/;"	m	class:OpenXcom::ItemSprite
_animationFrame	Battlescape/UnitSprite.h	/^	int _part, _animationFrame, _drawingRoutine;$/;"	m	class:OpenXcom::UnitSprite
_animationOffset	Savegame/Tile.h	/^	Uint8 _animationOffset = 0;$/;"	m	class:OpenXcom::Tile
_annoyedSound	Mod/Mod.h	/^	std::map<std::string, std::vector<int> > _selectUnitSound, _startMovingSound, _selectWeaponSound, _annoyedSound;$/;"	m	class:OpenXcom::Mod
_annoyedSound	Mod/Unit.h	/^	std::vector<int> _selectUnitSound, _startMovingSound, _selectWeaponSound, _annoyedSound;$/;"	m	class:OpenXcom::Unit
_annoyedSound	Savegame/BattleUnit.h	/^	std::vector<int> _selectUnitSound, _startMovingSound, _selectWeaponSound, _annoyedSound;$/;"	m	class:OpenXcom::BattleUnit
_annoyedSoundFemale	Mod/Armor.h	/^	std::vector<int> _annoyedSoundMale, _annoyedSoundFemale;$/;"	m	class:OpenXcom::Armor
_annoyedSoundFemale	Mod/RuleSoldier.h	/^	std::vector<int> _annoyedSoundMale, _annoyedSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_annoyedSoundMale	Mod/Armor.h	/^	std::vector<int> _annoyedSoundMale, _annoyedSoundFemale;$/;"	m	class:OpenXcom::Armor
_annoyedSoundMale	Mod/RuleSoldier.h	/^	std::vector<int> _annoyedSoundMale, _annoyedSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_antiCamouflageAtDark	Mod/Armor.h	/^	int _camouflageAtDay, _camouflageAtDark, _antiCamouflageAtDay, _antiCamouflageAtDark, _heatVision, _psiVision, _psiCamouflage;$/;"	m	class:OpenXcom::Armor
_antiCamouflageAtDay	Mod/Armor.h	/^	int _camouflageAtDay, _camouflageAtDark, _antiCamouflageAtDay, _antiCamouflageAtDark, _heatVision, _psiVision, _psiCamouflage;$/;"	m	class:OpenXcom::Armor
_anyIndicator	Battlescape/Map.h	/^	bool _anyIndicator, _isAltPressed;$/;"	m	class:OpenXcom::Map
_applyInventoryTemplate	Battlescape/InventoryState.cpp	/^void InventoryState::_applyInventoryTemplate(std::vector<EquipmentLayoutItem*> &inventoryTemplate)$/;"	f	class:OpenXcom::InventoryState
_applyTemplateBtnY	Battlescape/InventoryState.cpp	/^static const int _applyTemplateBtnY  = 113;$/;"	m	namespace:OpenXcom	file:
_arcScriptIndex	Mod/Mod.h	/^	std::vector<std::string> _alienMissionsIndex, _terrainIndex, _customPalettesIndex, _arcScriptIndex, _eventScriptIndex, _eventIndex, _missionScriptIndex;$/;"	m	class:OpenXcom::Mod
_arcScripts	Mod/Mod.h	/^	std::map<std::string, RuleArcScript*> _arcScripts;$/;"	m	class:OpenXcom::Mod
_arcingShot	Mod/RuleItem.h	/^	bool _arcingShot;$/;"	m	class:OpenXcom::RuleItem
_areaOfEffect	Battlescape/ExplosionBState.h	/^	bool _areaOfEffect, _lowerWeapon, _hit, _psi;$/;"	m	class:OpenXcom::ExplosionBState
_armor	Mod/MapData.h	/^	int _armor, _flammable, _fuel, _explosive, _explosiveType, _bigWall;$/;"	m	class:OpenXcom::MapData
_armor	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_armor	Mod/RuleItem.h	/^	int _armor;$/;"	m	class:OpenXcom::RuleItem
_armor	Mod/RuleSoldier.h	/^	const Armor* _armor;$/;"	m	class:OpenXcom::RuleSoldier
_armor	Mod/Unit.h	/^	const Armor* _armor;$/;"	m	class:OpenXcom::Unit
_armor	Savegame/BattleUnit.h	/^	Armor *_armor;$/;"	m	class:OpenXcom::BattleUnit
_armor	Savegame/Soldier.h	/^	Armor *_armor;$/;"	m	class:OpenXcom::Soldier
_armorForAvatar	Mod/RuleSoldier.h	/^	std::string _armorForAvatar;$/;"	m	class:OpenXcom::RuleSoldier
_armorName	Mod/RuleSoldier.h	/^	std::string _armorName;$/;"	m	class:OpenXcom::RuleSoldier
_armorName	Mod/Unit.h	/^	std::string _armorName;$/;"	m	class:OpenXcom::Unit
_armorOrder	Basescape/SoldierArmorState.h	/^	ArmorSort _armorOrder;$/;"	m	class:OpenXcom::SoldierArmorState
_armorStorageItemsCache	Mod/Mod.h	/^	std::vector<const RuleItem*> _armorStorageItemsCache;$/;"	m	class:OpenXcom::Mod
_armorTransformations	Mod/RuleEnviroEffects.h	/^	std::map<const Armor*, Armor*> _armorTransformations;$/;"	m	class:OpenXcom::RuleEnviroEffects
_armorTransformationsName	Mod/RuleEnviroEffects.h	/^	std::map<std::string, std::string> _armorTransformationsName;$/;"	m	class:OpenXcom::RuleEnviroEffects
_armors	Basescape/SoldierArmorState.h	/^	std::vector<ArmorItem> _armors;$/;"	m	class:OpenXcom::SoldierArmorState
_armors	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_armors	Mod/Mod.h	/^	std::map<std::string, Armor*> _armors;$/;"	m	class:OpenXcom::Mod
_armorsForSoldiersCache	Mod/Mod.h	/^	std::vector<const Armor*> _armorsForSoldiersCache;$/;"	m	class:OpenXcom::Mod
_armorsIndex	Mod/Mod.h	/^	std::vector<std::string> _aliensIndex, _enviroEffectsIndex, _startingConditionsIndex, _deploymentsIndex, _armorsIndex, _ufopaediaIndex, _ufopaediaCatIndex, _researchIndex, _manufactureIndex;$/;"	m	class:OpenXcom::Mod
_arrow	Battlescape/Map.h	/^	Surface *_arrow;$/;"	m	class:OpenXcom::Map
_arrow	Interface/ComboBox.h	/^	Surface *_arrow;$/;"	m	class:OpenXcom::ComboBox
_arrowColor	Ufopaedia/ArticleStateItem.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateItem
_arrowColor	Ufopaedia/ArticleStateTFTD.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateTFTD
_arrowLeft	Interface/TextList.h	/^	std::vector<ArrowButton*> _arrowLeft, _arrowRight;$/;"	m	class:OpenXcom::TextList
_arrowPos	Interface/TextList.h	/^	int _arrowPos, _scrollPos;$/;"	m	class:OpenXcom::TextList
_arrowRight	Interface/TextList.h	/^	std::vector<ArrowButton*> _arrowLeft, _arrowRight;$/;"	m	class:OpenXcom::TextList
_arrowType	Interface/TextList.h	/^	ArrowOrientation _arrowType;$/;"	m	class:OpenXcom::TextList
_arrowsLeftEdge	Interface/TextList.h	/^	int _arrowsLeftEdge, _arrowsRightEdge;$/;"	m	class:OpenXcom::TextList
_arrowsRightEdge	Interface/TextList.h	/^	int _arrowsLeftEdge, _arrowsRightEdge;$/;"	m	class:OpenXcom::TextList
_article_list	Ufopaedia/UfopaediaSelectState.h	/^		ArticleDefinitionList _article_list, _filtered_article_list;$/;"	m	class:OpenXcom::UfopaediaSelectState
_assigned	Savegame/ResearchProject.h	/^	int _assigned;$/;"	m	class:OpenXcom::ResearchProject
_attack	Battlescape/ExplosionBState.h	/^	BattleActionAttack _attack;$/;"	m	class:OpenXcom::ExplosionBState
_attackAction	Battlescape/AIModule.h	/^	BattleAction _escapeAction, _ambushAction, _attackAction, _patrolAction, _psiAction;$/;"	m	class:OpenXcom::AIModule
_attacks	Geoscape/BaseDefenseState.h	/^	int _thinkcycles, _row, _passes, _gravShields, _defenses, _attacks, _explosionCount;$/;"	m	class:OpenXcom::BaseDefenseState
_attraction	Mod/RuleItem.h	/^	int _attraction;$/;"	m	class:OpenXcom::RuleItem
_audioData	Engine/FlcPlayer.h	/^	AudioData _audioData;$/;"	m	class:OpenXcom::FlcPlayer
_audioFrameData	Engine/FlcPlayer.h	/^	Uint8 *_audioFrameData;$/;"	m	class:OpenXcom::FlcPlayer
_audioFrameSize	Engine/FlcPlayer.h	/^	Uint32 _audioFrameSize;$/;"	m	class:OpenXcom::FlcPlayer
_audioFrameType	Engine/FlcPlayer.h	/^	Uint16 _audioFrameType;$/;"	m	class:OpenXcom::FlcPlayer
_audioTracks	Mod/RuleVideo.h	/^	std::vector<std::string> _videos, _audioTracks;$/;"	m	class:OpenXcom::RuleVideo
_author	Engine/ModInfo.h	/^	std::string _name, _desc, _author, _url, _id, _master;$/;"	m	class:OpenXcom::ModInfo
_autoBuyDone	Basescape/PurchaseState.h	/^	bool _autoBuyDone;$/;"	m	class:OpenXcom::PurchaseState
_autoPatrol	Mod/RuleCraft.h	/^	bool _keepCraftAfterFailedMission, _allowLanding, _spacecraft, _notifyWhenRefueled, _autoPatrol, _undetectable;$/;"	m	class:OpenXcom::RuleCraft
_autoSurrender	Mod/Unit.h	/^	bool _canSurrender, _autoSurrender;$/;"	m	class:OpenXcom::Unit
_autoquick	Menu/ListGamesState.h	/^	bool _autoquick, _sortable;$/;"	m	class:OpenXcom::ListGamesState
_autosales	Savegame/SavedGame.h	/^	std::set<const RuleItem *> _autosales;$/;"	m	class:OpenXcom::SavedGame
_autosave	Battlescape/BattlescapeState.h	/^	int _autosave;$/;"	m	class:OpenXcom::BattlescapeState
_availableOptions	Basescape/SoldiersState.h	/^	std::vector<std::string> _availableOptions;$/;"	m	class:OpenXcom::SoldiersState
_availableTopics	Basescape/TechTreeSelectState.h	/^	std::vector<std::string> _availableTopics;$/;"	m	class:OpenXcom::TechTreeSelectState
_availableTransformations	Basescape/SoldierTransformationListState.h	/^	std::vector<RuleSoldierTransformation*> _availableTransformations;$/;"	m	class:OpenXcom::SoldierTransformationListState
_avatarName	Savegame/SoldierAvatar.h	/^	std::string _avatarName;$/;"	m	class:OpenXcom::SoldierAvatar
_avatarOffsetX	Mod/RuleSoldier.h	/^	int _avatarOffsetX, _avatarOffsetY, _flagOffset;$/;"	m	class:OpenXcom::RuleSoldier
_avatarOffsetY	Mod/RuleSoldier.h	/^	int _avatarOffsetX, _avatarOffsetY, _flagOffset;$/;"	m	class:OpenXcom::RuleSoldier
_avatars	Basescape/SoldierAvatarState.h	/^	std::vector<SoldierAvatar> _avatars;$/;"	m	class:OpenXcom::SoldierAvatarState
_avoidRepeats	Mod/RuleMissionScript.h	/^	int _firstMonth, _lastMonth, _label, _executionOdds, _targetBaseOdds, _minDifficulty, _maxRuns, _avoidRepeats, _delay, _randomDelay;$/;"	m	class:OpenXcom::RuleMissionScript
_background	Mod/RuleEvent.h	/^	std::string _name, _description, _background, _music;$/;"	m	class:OpenXcom::RuleEvent
_backgroundImage	Mod/RuleInterface.h	/^	std::string _backgroundImage;$/;"	m	class:OpenXcom::RuleInterface
_bannedInNextStage	Savegame/BattleUnit.cpp	/^	_capturable(true), _vip(false), _bannedInNextStage(false)$/;"	f	namespace:OpenXcom
_bannedInNextStage	Savegame/BattleUnit.cpp	/^	_vip(false), _bannedInNextStage(false)$/;"	f	namespace:OpenXcom
_bannedInNextStage	Savegame/BattleUnit.h	/^	bool _bannedInNextStage;$/;"	m	class:OpenXcom::BattleUnit
_barBravery	Basescape/SoldierInfoState.h	/^	Bar *_barTimeUnits, *_barStamina, *_barHealth, *_barBravery, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength, *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::SoldierInfoState
_barBravery	Battlescape/UnitInfoState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barFatalWounds, *_barBravery, *_barMorale, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength;$/;"	m	class:OpenXcom::UnitInfoState
_barContainment	Basescape/BaseInfoState.h	/^	Bar *_barQuarters, *_barStores, *_barLaboratories, *_barWorkshops, *_barContainment, *_barHangars;$/;"	m	class:OpenXcom::BaseInfoState
_barDefense	Basescape/BaseInfoState.h	/^	Bar *_barDefense, *_barShortRange, *_barLongRange;$/;"	m	class:OpenXcom::BaseInfoState
_barEnergy	Battlescape/BattlescapeState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barMorale, *_barMana;$/;"	m	class:OpenXcom::BattlescapeState
_barEnergy	Battlescape/UnitInfoState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barFatalWounds, *_barBravery, *_barMorale, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength;$/;"	m	class:OpenXcom::UnitInfoState
_barEngineers	Basescape/BaseInfoState.h	/^	Bar *_barSoldiers, *_barEngineers, *_barScientists;$/;"	m	class:OpenXcom::BaseInfoState
_barFatalWounds	Battlescape/UnitInfoState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barFatalWounds, *_barBravery, *_barMorale, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength;$/;"	m	class:OpenXcom::UnitInfoState
_barFiring	Basescape/SoldierInfoState.h	/^	Bar *_barTimeUnits, *_barStamina, *_barHealth, *_barBravery, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength, *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::SoldierInfoState
_barFiring	Battlescape/UnitInfoState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barFatalWounds, *_barBravery, *_barMorale, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength;$/;"	m	class:OpenXcom::UnitInfoState
_barFrontArmor	Battlescape/UnitInfoState.h	/^	Bar *_barFrontArmor, *_barLeftArmor, *_barRightArmor, *_barRearArmor, *_barUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_barHangars	Basescape/BaseInfoState.h	/^	Bar *_barQuarters, *_barStores, *_barLaboratories, *_barWorkshops, *_barContainment, *_barHangars;$/;"	m	class:OpenXcom::BaseInfoState
_barHealth	Basescape/SoldierInfoState.h	/^	Bar *_barTimeUnits, *_barStamina, *_barHealth, *_barBravery, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength, *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::SoldierInfoState
_barHealth	Battlescape/BattlescapeState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barMorale, *_barMana;$/;"	m	class:OpenXcom::BattlescapeState
_barHealth	Battlescape/UnitInfoState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barFatalWounds, *_barBravery, *_barMorale, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength;$/;"	m	class:OpenXcom::UnitInfoState
_barHealthColor	Battlescape/BattlescapeState.h	/^	Uint8 _barHealthColor;$/;"	m	class:OpenXcom::BattlescapeState
_barLaboratories	Basescape/BaseInfoState.h	/^	Bar *_barQuarters, *_barStores, *_barLaboratories, *_barWorkshops, *_barContainment, *_barHangars;$/;"	m	class:OpenXcom::BaseInfoState
_barLeftArmor	Battlescape/UnitInfoState.h	/^	Bar *_barFrontArmor, *_barLeftArmor, *_barRightArmor, *_barRearArmor, *_barUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_barLongRange	Basescape/BaseInfoState.h	/^	Bar *_barDefense, *_barShortRange, *_barLongRange;$/;"	m	class:OpenXcom::BaseInfoState
_barMana	Basescape/SoldierInfoState.h	/^	Bar *_barTimeUnits, *_barStamina, *_barHealth, *_barBravery, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength, *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::SoldierInfoState
_barMana	Battlescape/BattlescapeState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barMorale, *_barMana;$/;"	m	class:OpenXcom::BattlescapeState
_barMana	Battlescape/UnitInfoState.h	/^	Bar *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::UnitInfoState
_barMelee	Basescape/SoldierInfoState.h	/^	Bar *_barTimeUnits, *_barStamina, *_barHealth, *_barBravery, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength, *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::SoldierInfoState
_barMelee	Battlescape/UnitInfoState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barFatalWounds, *_barBravery, *_barMorale, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength;$/;"	m	class:OpenXcom::UnitInfoState
_barMorale	Battlescape/BattlescapeState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barMorale, *_barMana;$/;"	m	class:OpenXcom::BattlescapeState
_barMorale	Battlescape/UnitInfoState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barFatalWounds, *_barBravery, *_barMorale, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength;$/;"	m	class:OpenXcom::UnitInfoState
_barPsiSkill	Basescape/SoldierInfoState.h	/^	Bar *_barTimeUnits, *_barStamina, *_barHealth, *_barBravery, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength, *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::SoldierInfoState
_barPsiSkill	Battlescape/UnitInfoState.h	/^	Bar *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::UnitInfoState
_barPsiStrength	Basescape/SoldierInfoState.h	/^	Bar *_barTimeUnits, *_barStamina, *_barHealth, *_barBravery, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength, *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::SoldierInfoState
_barPsiStrength	Battlescape/UnitInfoState.h	/^	Bar *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::UnitInfoState
_barQuarters	Basescape/BaseInfoState.h	/^	Bar *_barQuarters, *_barStores, *_barLaboratories, *_barWorkshops, *_barContainment, *_barHangars;$/;"	m	class:OpenXcom::BaseInfoState
_barReactions	Basescape/SoldierInfoState.h	/^	Bar *_barTimeUnits, *_barStamina, *_barHealth, *_barBravery, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength, *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::SoldierInfoState
_barReactions	Battlescape/UnitInfoState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barFatalWounds, *_barBravery, *_barMorale, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength;$/;"	m	class:OpenXcom::UnitInfoState
_barRearArmor	Battlescape/UnitInfoState.h	/^	Bar *_barFrontArmor, *_barLeftArmor, *_barRightArmor, *_barRearArmor, *_barUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_barRightArmor	Battlescape/UnitInfoState.h	/^	Bar *_barFrontArmor, *_barLeftArmor, *_barRightArmor, *_barRearArmor, *_barUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_barScientists	Basescape/BaseInfoState.h	/^	Bar *_barSoldiers, *_barEngineers, *_barScientists;$/;"	m	class:OpenXcom::BaseInfoState
_barShortRange	Basescape/BaseInfoState.h	/^	Bar *_barDefense, *_barShortRange, *_barLongRange;$/;"	m	class:OpenXcom::BaseInfoState
_barSoldiers	Basescape/BaseInfoState.h	/^	Bar *_barSoldiers, *_barEngineers, *_barScientists;$/;"	m	class:OpenXcom::BaseInfoState
_barStamina	Basescape/SoldierInfoState.h	/^	Bar *_barTimeUnits, *_barStamina, *_barHealth, *_barBravery, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength, *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::SoldierInfoState
_barStores	Basescape/BaseInfoState.h	/^	Bar *_barQuarters, *_barStores, *_barLaboratories, *_barWorkshops, *_barContainment, *_barHangars;$/;"	m	class:OpenXcom::BaseInfoState
_barStrength	Basescape/SoldierInfoState.h	/^	Bar *_barTimeUnits, *_barStamina, *_barHealth, *_barBravery, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength, *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::SoldierInfoState
_barStrength	Battlescape/UnitInfoState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barFatalWounds, *_barBravery, *_barMorale, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength;$/;"	m	class:OpenXcom::UnitInfoState
_barThrowing	Basescape/SoldierInfoState.h	/^	Bar *_barTimeUnits, *_barStamina, *_barHealth, *_barBravery, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength, *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::SoldierInfoState
_barThrowing	Battlescape/UnitInfoState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barFatalWounds, *_barBravery, *_barMorale, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength;$/;"	m	class:OpenXcom::UnitInfoState
_barTimeUnits	Basescape/SoldierInfoState.h	/^	Bar *_barTimeUnits, *_barStamina, *_barHealth, *_barBravery, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength, *_barPsiStrength, *_barPsiSkill, *_barMana;$/;"	m	class:OpenXcom::SoldierInfoState
_barTimeUnits	Battlescape/BattlescapeState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barMorale, *_barMana;$/;"	m	class:OpenXcom::BattlescapeState
_barTimeUnits	Battlescape/UnitInfoState.h	/^	Bar *_barTimeUnits, *_barEnergy, *_barHealth, *_barFatalWounds, *_barBravery, *_barMorale, *_barReactions, *_barFiring, *_barThrowing, *_barMelee, *_barStrength;$/;"	m	class:OpenXcom::UnitInfoState
_barUnderArmor	Battlescape/UnitInfoState.h	/^	Bar *_barFrontArmor, *_barLeftArmor, *_barRightArmor, *_barRearArmor, *_barUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_barWorkshops	Basescape/BaseInfoState.h	/^	Bar *_barQuarters, *_barStores, *_barLaboratories, *_barWorkshops, *_barContainment, *_barHangars;$/;"	m	class:OpenXcom::BaseInfoState
_base	Basescape/BaseInfoState.h	/^	Base *_base;$/;"	m	class:OpenXcom::BaseInfoState
_base	Basescape/BaseView.h	/^	Base *_base;$/;"	m	class:OpenXcom::BaseView
_base	Basescape/BasescapeState.h	/^	Base *_base;$/;"	m	class:OpenXcom::BasescapeState
_base	Basescape/BuildFacilitiesState.h	/^	Base *_base;$/;"	m	class:OpenXcom::BuildFacilitiesState
_base	Basescape/CraftArmorState.h	/^	Base *_base;$/;"	m	class:OpenXcom::CraftArmorState
_base	Basescape/CraftEquipmentState.h	/^	Base *_base;$/;"	m	class:OpenXcom::CraftEquipmentState
_base	Basescape/CraftInfoState.h	/^	Base *_base;$/;"	m	class:OpenXcom::CraftInfoState
_base	Basescape/CraftPilotSelectState.h	/^	Base *_base;$/;"	m	class:OpenXcom::CraftPilotSelectState
_base	Basescape/CraftPilotsState.h	/^	Base *_base;$/;"	m	class:OpenXcom::CraftPilotsState
_base	Basescape/CraftSoldiersState.h	/^	Base *_base;$/;"	m	class:OpenXcom::CraftSoldiersState
_base	Basescape/CraftWeaponsState.h	/^	Base *_base;$/;"	m	class:OpenXcom::CraftWeaponsState
_base	Basescape/CraftsState.h	/^	Base *_base;$/;"	m	class:OpenXcom::CraftsState
_base	Basescape/DismantleFacilityState.h	/^	Base *_base;$/;"	m	class:OpenXcom::DismantleFacilityState
_base	Basescape/ManageAlienContainmentState.h	/^	Base *_base;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_base	Basescape/ManufactureInfoState.h	/^	Base * _base;$/;"	m	class:OpenXcom::ManufactureInfoState
_base	Basescape/ManufactureStartState.h	/^	Base *_base;$/;"	m	class:OpenXcom::ManufactureStartState
_base	Basescape/ManufactureState.h	/^	Base *_base;$/;"	m	class:OpenXcom::ManufactureState
_base	Basescape/MiniBaseView.h	/^	size_t _base, _hoverBase;$/;"	m	class:OpenXcom::MiniBaseView
_base	Basescape/MonthlyCostsState.h	/^	Base *_base;$/;"	m	class:OpenXcom::MonthlyCostsState
_base	Basescape/NewManufactureListState.h	/^	Base *_base;$/;"	m	class:OpenXcom::NewManufactureListState
_base	Basescape/NewResearchListState.h	/^	Base *_base;$/;"	m	class:OpenXcom::NewResearchListState
_base	Basescape/PlaceFacilityState.h	/^	Base *_base;$/;"	m	class:OpenXcom::PlaceFacilityState
_base	Basescape/PlaceLiftState.h	/^	Base *_base;$/;"	m	class:OpenXcom::PlaceLiftState
_base	Basescape/PurchaseState.h	/^	Base *_base;$/;"	m	class:OpenXcom::PurchaseState
_base	Basescape/ResearchInfoState.h	/^	Base *_base;$/;"	m	class:OpenXcom::ResearchInfoState
_base	Basescape/ResearchState.h	/^	Base *_base;$/;"	m	class:OpenXcom::ResearchState
_base	Basescape/SackSoldierState.h	/^	Base *_base;$/;"	m	class:OpenXcom::SackSoldierState
_base	Basescape/SellState.h	/^	Base *_base;$/;"	m	class:OpenXcom::SellState
_base	Basescape/SoldierArmorState.h	/^	Base *_base;$/;"	m	class:OpenXcom::SoldierArmorState
_base	Basescape/SoldierAvatarState.h	/^	Base *_base;$/;"	m	class:OpenXcom::SoldierAvatarState
_base	Basescape/SoldierBonusState.h	/^	Base *_base;$/;"	m	class:OpenXcom::SoldierBonusState
_base	Basescape/SoldierDiaryOverviewState.h	/^	Base *_base;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_base	Basescape/SoldierDiaryPerformanceState.h	/^	Base *_base;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_base	Basescape/SoldierInfoState.h	/^	Base *_base;$/;"	m	class:OpenXcom::SoldierInfoState
_base	Basescape/SoldierTransformationListState.h	/^	Base* _base;$/;"	m	class:OpenXcom::SoldierTransformationListState
_base	Basescape/SoldierTransformationState.h	/^	Base *_base;$/;"	m	class:OpenXcom::SoldierTransformationState
_base	Basescape/SoldiersState.h	/^	Base *_base;$/;"	m	class:OpenXcom::SoldiersState
_base	Basescape/StoresState.h	/^	Base *_base;$/;"	m	class:OpenXcom::StoresState
_base	Basescape/TransferBaseState.h	/^	Base *_base;$/;"	m	class:OpenXcom::TransferBaseState
_base	Basescape/TransferConfirmState.h	/^	Base *_base;$/;"	m	class:OpenXcom::TransferConfirmState
_base	Basescape/TransfersState.h	/^	Base *_base;$/;"	m	class:OpenXcom::TransfersState
_base	Battlescape/BattlescapeGenerator.h	/^	Base *_base;$/;"	m	class:OpenXcom::BattlescapeGenerator
_base	Battlescape/CannotReequipState.h	/^	Base *_base;$/;"	m	class:OpenXcom::CannotReequipState
_base	Battlescape/DebriefingState.h	/^	Base *_base;$/;"	m	class:OpenXcom::DebriefingState
_base	Battlescape/Inventory.h	/^	bool _tu, _base;$/;"	m	class:OpenXcom::Inventory
_base	Battlescape/InventoryState.h	/^	Base *_base;$/;"	m	class:OpenXcom::InventoryState
_base	Engine/ShaderMove.h	/^	typedef helper::ShaderBase<Pixel> _base;$/;"	t	class:OpenXcom::ShaderMove
_base	Engine/ShaderRepeat.h	/^	const PixelPtr _base;$/;"	m	struct:OpenXcom::helper::controler
_base	Engine/ShaderRepeat.h	/^	typedef helper::ShaderBase<const Pixel> _base;$/;"	t	class:OpenXcom::ShaderRepeat
_base	Geoscape/AlienBaseState.h	/^	AlienBase *_base;$/;"	m	class:OpenXcom::AlienBaseState
_base	Geoscape/AllocatePsiTrainingState.h	/^	Base *_base;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_base	Geoscape/AllocateTrainingState.h	/^	Base *_base;$/;"	m	class:OpenXcom::AllocateTrainingState
_base	Geoscape/BaseDefenseState.h	/^	Base *_base;$/;"	m	class:OpenXcom::BaseDefenseState
_base	Geoscape/BaseDestroyedState.h	/^	Base *_base;$/;"	m	class:OpenXcom::BaseDestroyedState
_base	Geoscape/BaseNameState.h	/^	Base *_base;$/;"	m	class:OpenXcom::BaseNameState
_base	Geoscape/BuildNewBaseState.h	/^	Base *_base;$/;"	m	class:OpenXcom::BuildNewBaseState
_base	Geoscape/ConfirmNewBaseState.h	/^	Base *_base;$/;"	m	class:OpenXcom::ConfirmNewBaseState
_base	Geoscape/GeoscapeState.cpp	/^	const Base &_base;	\/\/!< The target base.$/;"	m	class:OpenXcom::DetectXCOMBase	file:
_base	Geoscape/InterceptState.h	/^	Base *_base;$/;"	m	class:OpenXcom::InterceptState
_base	Geoscape/ItemsArrivingState.h	/^	Base *_base;$/;"	m	class:OpenXcom::ItemsArrivingState
_base	Geoscape/NewPossibleCraftState.h	/^	Base * _base;$/;"	m	class:OpenXcom::NewPossibleCraftState
_base	Geoscape/NewPossibleFacilityState.h	/^	Base *_base;$/;"	m	class:OpenXcom::NewPossibleFacilityState
_base	Geoscape/NewPossibleManufactureState.h	/^	Base * _base;$/;"	m	class:OpenXcom::NewPossibleManufactureState
_base	Geoscape/NewPossiblePurchaseState.h	/^	Base * _base;$/;"	m	class:OpenXcom::NewPossiblePurchaseState
_base	Geoscape/NewPossibleResearchState.h	/^	Base * _base;$/;"	m	class:OpenXcom::NewPossibleResearchState
_base	Geoscape/ProductionCompleteState.h	/^	Base *_base;$/;"	m	class:OpenXcom::ProductionCompleteState
_base	Geoscape/TrainingFinishedState.h	/^	Base *_base;$/;"	m	class:OpenXcom::TrainingFinishedState
_base	Savegame/AlienMission.h	/^	const AlienBase *_base;$/;"	m	class:OpenXcom::AlienMission
_base	Savegame/BaseFacility.h	/^	Base *_base;$/;"	m	class:OpenXcom::BaseFacility
_base	Savegame/Craft.h	/^	Base *_base;$/;"	m	class:OpenXcom::Craft
_baseCraftInventory	Savegame/SavedBattleGame.h	/^	bool _baseCraftInventory = false;$/;"	m	class:OpenXcom::SavedBattleGame
_baseCustomDeploy	Mod/AlienRace.h	/^	std::string _baseCustomDeploy;$/;"	m	class:OpenXcom::AlienRace
_baseCustomMission	Mod/AlienRace.h	/^	std::string _baseCustomMission;$/;"	m	class:OpenXcom::AlienRace
_baseDefenseMapFromLocation	Mod/Mod.h	/^	int _baseDefenseMapFromLocation;$/;"	m	class:OpenXcom::Mod
_baseDetectionChance	Mod/AlienDeployment.h	/^	int _baseDetectionRange, _baseDetectionChance, _huntMissionMaxFrequency;$/;"	m	class:OpenXcom::AlienDeployment
_baseDetectionRange	Mod/AlienDeployment.h	/^	int _baseDetectionRange, _baseDetectionChance, _huntMissionMaxFrequency;$/;"	m	class:OpenXcom::AlienDeployment
_baseFrom	Basescape/TransferItemsState.h	/^	Base *_baseFrom, *_baseTo;$/;"	m	class:OpenXcom::TransferItemsState
_baseFunctionNames	Mod/Mod.h	/^	Collections::NamesToIndex _baseFunctionNames;$/;"	m	class:OpenXcom::Mod
_baseHeight	Engine/Screen.h	/^	int _baseWidth, _baseHeight;$/;"	m	class:OpenXcom::Screen
_baseInventory	Battlescape/BattlescapeGenerator.h	/^	bool _allowAutoLoadout, _baseInventory, _generateFuel, _craftDeployed, _ufoDeployed;$/;"	m	class:OpenXcom::BattlescapeGenerator
_baseItems	Savegame/SavedBattleGame.h	/^	ItemContainer *_baseItems;$/;"	m	class:OpenXcom::SavedBattleGame
_baseModule	Mod/MapData.h	/^	bool _isUfoDoor, _stopLOS, _isNoFloor, _isGravLift, _isDoor, _blockFire, _blockSmoke, _baseModule;$/;"	m	class:OpenXcom::MapData
_baseModules	Savegame/SavedBattleGame.h	/^	std::vector< std::vector<std::pair<int, int> > > _baseModules;$/;"	m	class:OpenXcom::SavedBattleGame
_baseNamesFirst	Mod/Mod.h	/^	std::vector<std::string> _baseNamesFirst, _baseNamesMiddle, _baseNamesLast;$/;"	m	class:OpenXcom::Mod
_baseNamesLast	Mod/Mod.h	/^	std::vector<std::string> _baseNamesFirst, _baseNamesMiddle, _baseNamesLast;$/;"	m	class:OpenXcom::Mod
_baseNamesMiddle	Mod/Mod.h	/^	std::vector<std::string> _baseNamesFirst, _baseNamesMiddle, _baseNamesLast;$/;"	m	class:OpenXcom::Mod
_baseSelfDestructCode	Mod/AlienDeployment.h	/^	std::string _baseSelfDestructCode;$/;"	m	class:OpenXcom::AlienDeployment
_baseTerrain	Battlescape/BattlescapeGenerator.h	/^	RuleTerrain *_terrain, *_baseTerrain, *_globeTerrain, *_alternateTerrain;$/;"	m	class:OpenXcom::BattlescapeGenerator
_baseTerrain	Mod/Texture.h	/^	std::vector<TerrainCriteria> _baseTerrain;$/;"	m	class:OpenXcom::Texture
_baseTo	Basescape/TransferItemsState.h	/^	Base *_baseFrom, *_baseTo;$/;"	m	class:OpenXcom::TransferItemsState
_baseWidth	Engine/Screen.h	/^	int _baseWidth, _baseHeight;$/;"	m	class:OpenXcom::Screen
_bases	Basescape/GlobalManufactureState.h	/^	std::vector<Base*> _bases;$/;"	m	class:OpenXcom::GlobalManufactureState
_bases	Basescape/GlobalResearchState.h	/^	std::vector<Base*> _bases;$/;"	m	class:OpenXcom::GlobalResearchState
_bases	Basescape/MiniBaseView.h	/^	std::vector<Base*> *_bases;$/;"	m	class:OpenXcom::MiniBaseView
_bases	Basescape/TransferBaseState.h	/^	std::vector<Base*> _bases;$/;"	m	class:OpenXcom::TransferBaseState
_bases	Geoscape/PsiTrainingState.h	/^	std::vector<Base*> _bases;$/;"	m	class:OpenXcom::PsiTrainingState
_bases	Geoscape/TrainingState.h	/^	std::vector<Base*> _bases;$/;"	m	class:OpenXcom::TrainingState
_bases	Savegame/SavedGame.h	/^	std::vector<Base*> _bases;$/;"	m	class:OpenXcom::SavedGame
_battle	Geoscape/DogfightState.h	/^	Surface *_window, *_battle, *_range[RuleCraft::WeaponMax], *_damage, *_craftSprite, *_craftShield;$/;"	m	class:OpenXcom::DogfightState
_battleGame	Battlescape/AbortMissionState.h	/^	SavedBattleGame *_battleGame;$/;"	m	class:OpenXcom::AbortMissionState
_battleGame	Battlescape/BattlescapeState.h	/^	BattlescapeGame *_battleGame;$/;"	m	class:OpenXcom::BattlescapeState
_battleGame	Battlescape/ConfirmEndMissionState.h	/^	SavedBattleGame *_battleGame;$/;"	m	class:OpenXcom::ConfirmEndMissionState
_battleGame	Battlescape/InventoryState.h	/^	SavedBattleGame *_battleGame;$/;"	m	class:OpenXcom::InventoryState
_battleGame	Battlescape/MiniMapView.h	/^	SavedBattleGame * _battleGame;$/;"	m	class:OpenXcom::MiniMapView
_battleGame	Battlescape/NextTurnState.h	/^	SavedBattleGame *_battleGame;$/;"	m	class:OpenXcom::NextTurnState
_battleGame	Battlescape/UnitInfoState.h	/^	SavedBattleGame *_battleGame;$/;"	m	class:OpenXcom::UnitInfoState
_battleGame	Savegame/SavedGame.h	/^	SavedBattleGame *_battleGame;$/;"	m	class:OpenXcom::SavedGame
_battleItemScripts	Mod/RuleItem.h	/^	ModScript::BattleItemScripts::Container _battleItemScripts;$/;"	m	class:OpenXcom::RuleItem
_battleState	Savegame/SavedBattleGame.h	/^	BattlescapeState *_battleState;$/;"	m	class:OpenXcom::SavedBattleGame
_battleType	Mod/RuleItem.h	/^	BattleType _battleType;$/;"	m	class:OpenXcom::RuleItem
_battleUnitScripts	Mod/Armor.h	/^	ModScript::BattleUnitScripts::Container _battleUnitScripts;$/;"	m	class:OpenXcom::Armor
_battlescapeTerrainData	Mod/RuleCraft.h	/^	RuleTerrain *_battlescapeTerrainData;$/;"	m	class:OpenXcom::RuleCraft
_battlescapeTerrainData	Mod/RuleUfo.h	/^	RuleTerrain *_battlescapeTerrainData;$/;"	m	class:OpenXcom::RuleUfo
_beforeFirstStep	Battlescape/UnitWalkBState.h	/^	bool _beforeFirstStep;$/;"	m	class:OpenXcom::UnitWalkBState
_beforeGame	Savegame/SavedBattleGame.h	/^	bool _beforeGame;$/;"	m	class:OpenXcom::SavedBattleGame
_begin	Engine/Collections.h	/^		It _begin;$/;"	m	class:OpenXcom::Collections::Range
_berserkChance	Mod/Unit.h	/^	int _berserkChance;$/;"	m	class:OpenXcom::Unit
_berserkSound	Mod/Unit.h	/^	std::vector<int> _deathSound, _panicSound, _berserkSound, _aggroSound;$/;"	m	class:OpenXcom::Unit
_berserkSoundFemale	Mod/RuleSoldier.h	/^	std::vector<int> _panicSoundMale, _panicSoundFemale, _berserkSoundMale, _berserkSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_berserkSoundMale	Mod/RuleSoldier.h	/^	std::vector<int> _panicSoundMale, _panicSoundFemale, _berserkSoundMale, _berserkSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_berserking	Battlescape/UnitPanicBState.h	/^	bool _berserking;$/;"	m	class:OpenXcom::UnitPanicBState
_bestOfRank	Savegame/SoldierDiary.h	/^		_woundsHealedTotal, _allUFOs, _allMissionTypes, _statGainTotal, _revivedUnitTotal, _wholeMedikitTotal, _braveryGainTotal, _bestOfRank, _MIA,$/;"	m	class:OpenXcom::SoldierDiary
_bestSoldier	Savegame/SoldierDiary.h	/^		_martyrKillsTotal, _postMortemKills, _slaveKillsTotal, _bestSoldier, _revivedSoldierTotal, _revivedHostileTotal, _revivedNeutralTotal;$/;"	m	class:OpenXcom::SoldierDiary
_bg	Basescape/BaseInfoState.h	/^	Surface *_bg;$/;"	m	class:OpenXcom::BaseInfoState
_bg	Basescape/SoldierInfoState.h	/^	Surface *_bg, *_rank;$/;"	m	class:OpenXcom::SoldierInfoState
_bg	Battlescape/AlienInventoryState.h	/^	Surface *_bg, *_soldier;$/;"	m	class:OpenXcom::AlienInventoryState
_bg	Battlescape/InventoryState.h	/^	Surface *_bg, *_soldier;$/;"	m	class:OpenXcom::InventoryState
_bg	Battlescape/MedikitState.h	/^	Surface *_bg;$/;"	m	class:OpenXcom::MedikitState
_bg	Battlescape/MiniMapState.h	/^	Surface * _bg;$/;"	m	class:OpenXcom::MiniMapState
_bg	Battlescape/NextTurnState.h	/^	Surface *_bg;$/;"	m	class:OpenXcom::NextTurnState
_bg	Battlescape/PrimeGrenadeState.h	/^	Surface *_bg;$/;"	m	class:OpenXcom::PrimeGrenadeState
_bg	Battlescape/ScannerState.h	/^	InteractiveSurface *_bg;$/;"	m	class:OpenXcom::ScannerState
_bg	Battlescape/UnitInfoState.h	/^	Surface *_bg;$/;"	m	class:OpenXcom::UnitInfoState
_bg	Geoscape/GeoscapeState.h	/^	Surface *_bg, *_sideLine, *_sidebar;$/;"	m	class:OpenXcom::GeoscapeState
_bg	Geoscape/GraphsState.h	/^	InteractiveSurface *_bg;$/;"	m	class:OpenXcom::GraphsState
_bg	Interface/Frame.h	/^	Uint8 _color, _bg;$/;"	m	class:OpenXcom::Frame
_bg	Interface/ScrollBar.h	/^	Surface *_bg;$/;"	m	class:OpenXcom::ScrollBar
_bg	Interface/TextList.h	/^	Surface *_bg, *_selector;$/;"	m	class:OpenXcom::TextList
_bg	Interface/Window.h	/^	const Surface *_bg;$/;"	m	class:OpenXcom::Window
_bg	Menu/TestPaletteState.h	/^	Surface *_bg;$/;"	m	class:OpenXcom::TestPaletteState
_bg	Ufopaedia/ArticleState.h	/^		Surface *_bg;$/;"	m	class:OpenXcom::ArticleState
_bgColor	Battlescape/Map.h	/^	int _bgColor;$/;"	m	class:OpenXcom::Map
_big	Basescape/BaseView.h	/^	Font *_big, *_small;$/;"	m	class:OpenXcom::BaseView
_big	Battlescape/Explosion.h	/^	bool _big, _hit;$/;"	m	class:OpenXcom::Explosion
_big	Interface/Text.h	/^	Font *_big, *_small, *_font, *_fontOrig;$/;"	m	class:OpenXcom::Text
_big	Interface/TextList.h	/^	Font *_big, *_small, *_font;$/;"	m	class:OpenXcom::TextList
_bigDamage	Savegame/HitLog.h	/^	std::string _newTurn, _reactionFire, _newShot, _noDamage, _smallDamage, _bigDamage;$/;"	m	class:OpenXcom::HitLog
_bigSprite	Mod/RuleItem.h	/^	int _bigSprite;$/;"	m	class:OpenXcom::RuleItem
_bigWall	Mod/MapData.h	/^	int _armor, _flammable, _fuel, _explosive, _explosiveType, _bigWall;$/;"	m	class:OpenXcom::MapData
_bigWalls	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_blankTile	Mod/MapDataSet.cpp	/^MapData *MapDataSet::_blankTile = 0;$/;"	m	class:OpenXcom::MapDataSet	file:
_blankTile	Mod/MapDataSet.h	/^	static MapData *_blankTile;$/;"	m	class:OpenXcom::MapDataSet
_blaster	Battlescape/AIModule.h	/^	bool _rifle, _melee, _blaster, _grenade;$/;"	m	class:OpenXcom::AIModule
_bleedImmune	Mod/Armor.h	/^	Sint8  _fearImmune, _bleedImmune, _painImmune, _zombiImmune;$/;"	m	class:OpenXcom::Armor
_blink	Basescape/BaseView.h	/^	bool _blink;$/;"	m	class:OpenXcom::BaseView
_blink	Geoscape/Globe.h	/^	int _blink;$/;"	m	class:OpenXcom::Globe
_blink	Interface/TextEdit.h	/^	bool _blink, _modal;$/;"	m	class:OpenXcom::TextEdit
_blinkTimer	Geoscape/Globe.h	/^	Timer *_blinkTimer, *_rotTimer;$/;"	m	class:OpenXcom::Globe
_block	Mod/MapData.h	/^	int _block[6];$/;"	m	class:OpenXcom::MapData
_blockBothHands	Mod/RuleItem.h	/^	bool _twoHanded, _blockBothHands, _fixedWeapon, _fixedWeaponShow, _isConsumable, _isFireExtinguisher;$/;"	m	class:OpenXcom::RuleItem
_blockFire	Mod/MapData.h	/^	bool _isUfoDoor, _stopLOS, _isNoFloor, _isGravLift, _isDoor, _blockFire, _blockSmoke, _baseModule;$/;"	m	class:OpenXcom::MapData
_blockSmoke	Mod/MapData.h	/^	bool _isUfoDoor, _stopLOS, _isNoFloor, _isGravLift, _isDoor, _blockFire, _blockSmoke, _baseModule;$/;"	m	class:OpenXcom::MapData
_blockVisibility	Battlescape/TileEngine.h	/^	std::vector<VisibilityBlockCache> _blockVisibility;$/;"	m	class:OpenXcom::TileEngine
_blocks	Battlescape/BattlescapeGenerator.h	/^	std::vector< std::vector<MapBlock*> > _blocks;$/;"	m	class:OpenXcom::BattlescapeGenerator
_blocks	Mod/MapScript.h	/^	std::vector<int> _groups, _blocks, _frequencies, _maxUses, _conditionals;$/;"	m	class:OpenXcom::MapScript
_blocksTemp	Mod/MapScript.h	/^	std::vector<int> _groupsTemp, _blocksTemp, _frequenciesTemp, _maxUsesTemp;$/;"	m	class:OpenXcom::MapScript
_blocksToDo	Battlescape/BattlescapeGenerator.h	/^	int _blocksToDo;$/;"	m	class:OpenXcom::BattlescapeGenerator
_blue	Basescape/MiniBaseView.h	/^	Uint8 _red, _green, _blue;$/;"	m	class:OpenXcom::MiniBaseView
_blue	Basescape/TechTreeViewerState.h	/^	Uint8 _purple, _pink, _blue, _white, _gold, _grey;$/;"	m	class:OpenXcom::TechTreeViewerState
_blue	Ufopaedia/StatsForNerdsState.h	/^	Uint8 _purple, _pink, _blue, _white, _gold;$/;"	m	class:OpenXcom::StatsForNerdsState
_bonus	Geoscape/ResearchCompleteState.h	/^	const RuleResearch * _research, * _bonus;$/;"	m	class:OpenXcom::ResearchCompleteState
_bonusCache	Savegame/Soldier.h	/^	std::vector<const RuleSoldierBonus*> _bonusCache;$/;"	m	class:OpenXcom::Soldier
_bonusOrig	Mod/RuleStatBonus.h	/^	std::vector<RuleStatBonusDataOrig> _bonusOrig;$/;"	m	class:OpenXcom::RuleStatBonus
_bonusResearchName	Geoscape/GeoscapeEventState.h	/^	std::string _bonusResearchName;$/;"	m	class:OpenXcom::GeoscapeEventState
_bonuses	Basescape/SoldierBonusState.h	/^	std::vector<std::string> _bonuses;$/;"	m	class:OpenXcom::SoldierBonusState
_borderColor	Interface/Bar.h	/^	Uint8 _color, _color2, _borderColor;$/;"	m	class:OpenXcom::Bar
_bordered	Interface/NumberText.h	/^	bool _bordered;$/;"	m	class:OpenXcom::NumberText
_borderedChars	Interface/NumberText.h	/^	Surface *_borderedChars[10];$/;"	m	class:OpenXcom::NumberText
_bottomBlackBand	Engine/Screen.h	/^	int _topBlackBand, _bottomBlackBand, _leftBlackBand, _rightBlackBand, _cursorTopBlackBand, _cursorLeftBlackBand;$/;"	m	class:OpenXcom::Screen
_bpp	Engine/Screen.h	/^	int _bpp;$/;"	m	class:OpenXcom::Screen
_braveryGainTotal	Savegame/SoldierDiary.h	/^		_woundsHealedTotal, _allUFOs, _allMissionTypes, _statGainTotal, _revivedUnitTotal, _wholeMedikitTotal, _braveryGainTotal, _bestOfRank, _MIA,$/;"	m	class:OpenXcom::SoldierDiary
_breakDownItems	Mod/RuleManufactureShortcut.h	/^	std::vector<std::string> _breakDownItems;$/;"	m	class:OpenXcom::RuleManufactureShortcut
_breakDownRequires	Mod/RuleManufactureShortcut.h	/^	bool _breakDownRequires, _breakDownRequiresBaseFunc;$/;"	m	class:OpenXcom::RuleManufactureShortcut
_breakDownRequiresBaseFunc	Mod/RuleManufactureShortcut.h	/^	bool _breakDownRequires, _breakDownRequiresBaseFunc;$/;"	m	class:OpenXcom::RuleManufactureShortcut
_breakOffTime	Mod/RuleUfo.h	/^	int _power, _range, _score, _reload, _breakOffTime, _missionScore;$/;"	m	class:OpenXcom::RuleUfo
_breathFrame	Savegame/BattleUnit.h	/^	int _breathFrame;$/;"	m	class:OpenXcom::BattleUnit
_breathSurface	Battlescape/UnitSprite.h	/^	const SurfaceSet *_unitSurface, *_itemSurface, *_fireSurface, *_breathSurface, *_facingArrowSurface;$/;"	m	class:OpenXcom::UnitSprite
_breathing	Savegame/BattleUnit.h	/^	bool _breathing;$/;"	m	class:OpenXcom::BattleUnit
_briefingData	Mod/AlienDeployment.h	/^	BriefingData _briefingData;$/;"	m	class:OpenXcom::AlienDeployment
_btn1Day	Geoscape/GeoscapeState.h	/^	TextButton *_btn5Secs, *_btn1Min, *_btn5Mins, *_btn30Mins, *_btn1Hour, *_btn1Day;$/;"	m	class:OpenXcom::GeoscapeState
_btn1Hour	Geoscape/GeoscapeState.h	/^	TextButton *_btn5Secs, *_btn1Min, *_btn5Mins, *_btn30Mins, *_btn1Hour, *_btn1Day;$/;"	m	class:OpenXcom::GeoscapeState
_btn1Min	Geoscape/GeoscapeState.h	/^	TextButton *_btn5Secs, *_btn1Min, *_btn5Mins, *_btn30Mins, *_btn1Hour, *_btn1Day;$/;"	m	class:OpenXcom::GeoscapeState
_btn30Mins	Geoscape/GeoscapeState.h	/^	TextButton *_btn5Secs, *_btn1Min, *_btn5Mins, *_btn30Mins, *_btn1Hour, *_btn1Day;$/;"	m	class:OpenXcom::GeoscapeState
_btn5Mins	Geoscape/GeoscapeState.h	/^	TextButton *_btn5Secs, *_btn1Min, *_btn5Mins, *_btn30Mins, *_btn1Hour, *_btn1Day;$/;"	m	class:OpenXcom::GeoscapeState
_btn5Secs	Geoscape/GeoscapeState.h	/^	TextButton *_btn5Secs, *_btn1Min, *_btn5Mins, *_btn30Mins, *_btn1Hour, *_btn1Day;$/;"	m	class:OpenXcom::GeoscapeState
_btnAbandon	Menu/PauseState.h	/^	TextButton *_btnLoad, *_btnSave, *_btnAbandon, *_btnOptions, *_btnCancel;$/;"	m	class:OpenXcom::PauseState
_btnAbort	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnEndTurn, *_btnAbort, *_btnLaunch, *_btnPsi, *_btnSpecial, *_btnSkills, *_reserve;$/;"	m	class:OpenXcom::BattlescapeState
_btnAbort	Geoscape/BaseDefenseState.h	/^	TextButton *_btnStart, *_btnAbort;$/;"	m	class:OpenXcom::BaseDefenseState
_btnAdd	Basescape/CraftPilotsState.h	/^	TextButton *_btnOk, *_btnAdd, *_btnRemoveAll;$/;"	m	class:OpenXcom::CraftPilotsState
_btnAdvanced	Menu/OptionsBaseState.h	/^	TextButton *_btnVideo, *_btnAudio, *_btnControls, *_btnGeoscape, *_btnBattlescape, *_btnAdvanced, *_btnFolders;$/;"	m	class:OpenXcom::OptionsBaseState
_btnAggressive	Geoscape/DogfightState.h	/^	ImageButton *_btnStandoff, *_btnCautious, *_btnStandard, *_btnAggressive, *_btnDisengage, *_btnUfo;$/;"	m	class:OpenXcom::DogfightState
_btnAlienRace	Menu/NewBattleState.h	/^	TextButton *_btnMission, *_btnTerrain, *_btnAlienRace;$/;"	m	class:OpenXcom::NewBattleState
_btnAlt	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnCtrl, *_btnAlt, *_btnShift, *_btnRMB, *_btnMMB;$/;"	m	class:OpenXcom::BattlescapeState
_btnApplyTemplate	Battlescape/InventoryState.h	/^	BattlescapeButton *_btnCreateTemplate, *_btnApplyTemplate;$/;"	m	class:OpenXcom::InventoryState
_btnArmor	Basescape/CraftInfoState.h	/^	TextButton *_btnOk, *_btnW[RuleCraft::WeaponMax], *_btnCrew, *_btnEquip, *_btnArmor, *_btnPilots, *_btnNewBattle;$/;"	m	class:OpenXcom::CraftInfoState
_btnArmor	Basescape/SoldierInfoState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnArmor, *_btnSack, *_btnDiary, *_btnBonuses;$/;"	m	class:OpenXcom::SoldierInfoState
_btnArmor	Battlescape/AlienInventoryState.h	/^	BattlescapeButton *_btnArmor;$/;"	m	class:OpenXcom::AlienInventoryState
_btnArmor	Battlescape/ExtendedInventoryLinksState.h	/^	TextButton *_btnArmor, *_btnAvatar, *_btnEquipmentSave, *_btnEquipmentLoad, *_btnPersonalSave, *_btnPersonalLoad, *_btnNotes, *_btnUfopedia, *_btnAutoEquip;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_btnArmor	Battlescape/InventoryState.h	/^	BattlescapeButton *_btnOk, *_btnPrev, *_btnNext, *_btnUnload, *_btnGround, *_btnRank, *_btnArmor;$/;"	m	class:OpenXcom::InventoryState
_btnArmors	Battlescape/BriefingLightState.h	/^	ToggleTextButton *_btnArmors;$/;"	m	class:OpenXcom::BriefingLightState
_btnArrows	Menu/OptionsBattlescapeState.h	/^	ToggleTextButton *_btnArrows, *_btnTuCost, *_btnEnergyCost;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_btnAssignPilots	Geoscape/CraftNotEnoughPilotsState.h	/^	TextButton *_btnOk, *_btnAssignPilots;$/;"	m	class:OpenXcom::CraftNotEnoughPilotsState
_btnAudio	Menu/OptionsBaseState.h	/^	TextButton *_btnVideo, *_btnAudio, *_btnControls, *_btnGeoscape, *_btnBattlescape, *_btnAdvanced, *_btnFolders;$/;"	m	class:OpenXcom::OptionsBaseState
_btnAutoEquip	Battlescape/ExtendedInventoryLinksState.h	/^	TextButton *_btnArmor, *_btnAvatar, *_btnEquipmentSave, *_btnEquipmentLoad, *_btnPersonalSave, *_btnPersonalLoad, *_btnNotes, *_btnUfopedia, *_btnAutoEquip;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_btnAvatar	Battlescape/ExtendedInventoryLinksState.h	/^	TextButton *_btnArmor, *_btnAvatar, *_btnEquipmentSave, *_btnEquipmentLoad, *_btnPersonalSave, *_btnPersonalLoad, *_btnNotes, *_btnUfopedia, *_btnAutoEquip;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_btnBackgroundMute	Menu/OptionsAudioState.h	/^	ToggleTextButton *_btnBackgroundMute;$/;"	m	class:OpenXcom::OptionsAudioState
_btnBase	Geoscape/DogfightErrorState.h	/^	TextButton *_btnIntercept, *_btnBase;$/;"	m	class:OpenXcom::DogfightErrorState
_btnBase	Geoscape/GeoscapeCraftState.h	/^	TextButton *_btnBase, *_btnTarget, *_btnPatrol, *_btnCancel;$/;"	m	class:OpenXcom::GeoscapeCraftState
_btnBaseInfo	Basescape/BasescapeState.h	/^	TextButton *_btnNewBase, *_btnBaseInfo, *_btnSoldiers, *_btnCrafts, *_btnFacilities, *_btnResearch, *_btnManufacture, *_btnTransfer, *_btnPurchase, *_btnSell, *_btnGeoscape;$/;"	m	class:OpenXcom::BasescapeState
_btnBases	Geoscape/GeoscapeState.h	/^	TextButton *_btnIntercept, *_btnBases, *_btnGraphs, *_btnUfopaedia, *_btnOptions, *_btnFunding;$/;"	m	class:OpenXcom::GeoscapeState
_btnBases	Geoscape/PsiTrainingState.h	/^	std::vector<TextButton*> _btnBases;$/;"	m	class:OpenXcom::PsiTrainingState
_btnBases	Geoscape/TrainingState.h	/^	std::vector<TextButton*> _btnBases;$/;"	m	class:OpenXcom::TrainingState
_btnBattlescape	Menu/OptionsBaseState.h	/^	TextButton *_btnVideo, *_btnAudio, *_btnControls, *_btnGeoscape, *_btnBattlescape, *_btnAdvanced, *_btnFolders;$/;"	m	class:OpenXcom::OptionsBaseState
_btnBeginner	Menu/NewGameState.h	/^	TextButton *_btnBeginner, *_btnExperienced, *_btnVeteran, *_btnGenius, *_btnSuperhuman;$/;"	m	class:OpenXcom::NewGameState
_btnBigOk	Geoscape/MonthlyReportState.h	/^	TextButton *_btnOk, *_btnBigOk;$/;"	m	class:OpenXcom::MonthlyReportState
_btnBonuses	Basescape/SoldierInfoState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnArmor, *_btnSack, *_btnDiary, *_btnBonuses;$/;"	m	class:OpenXcom::SoldierInfoState
_btnBriefing	Battlescape/ExtendedBattlescapeLinksState.h	/^	TextButton *_btnTouch, *_btnNightVision, *_btnPersonalLights, *_btnBrightness, *_btnTurnDiary, *_btnBriefing, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_btnBriefingReinforcements	Battlescape/NextTurnState.h	/^	TextButton *_btnBriefingReinforcements;$/;"	m	class:OpenXcom::NextTurnState
_btnBrightness	Battlescape/ExtendedBattlescapeLinksState.h	/^	TextButton *_btnTouch, *_btnNightVision, *_btnPersonalLights, *_btnBrightness, *_btnTurnDiary, *_btnBriefing, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_btnCancel	Basescape/CraftEquipmentLoadState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::CraftEquipmentLoadState
_btnCancel	Basescape/CraftEquipmentSaveState.h	/^	TextButton *_btnCancel, *_btnSave;$/;"	m	class:OpenXcom::CraftEquipmentSaveState
_btnCancel	Basescape/CraftPilotSelectState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::CraftPilotSelectState
_btnCancel	Basescape/CraftWeaponsState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::CraftWeaponsState
_btnCancel	Basescape/DismantleFacilityState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::DismantleFacilityState
_btnCancel	Basescape/ManageAlienContainmentState.h	/^	TextButton *_btnOk, *_btnSell, *_btnCancel, *_btnTransfer, *_btnCleanup;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_btnCancel	Basescape/ManufactureStartState.h	/^	TextButton *_btnCancel, *_btnStart;$/;"	m	class:OpenXcom::ManufactureStartState
_btnCancel	Basescape/PlaceFacilityState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::PlaceFacilityState
_btnCancel	Basescape/PurchaseState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::PurchaseState
_btnCancel	Basescape/ResearchInfoState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::ResearchInfoState
_btnCancel	Basescape/SackSoldierState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::SackSoldierState
_btnCancel	Basescape/SellState.h	/^	TextButton *_btnOk, *_btnCancel, *_btnTransfer;$/;"	m	class:OpenXcom::SellState
_btnCancel	Basescape/SoldierArmorState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::SoldierArmorState
_btnCancel	Basescape/SoldierAvatarState.h	/^	TextButton *_btnCancel, *_btnOk;$/;"	m	class:OpenXcom::SoldierAvatarState
_btnCancel	Basescape/SoldierBonusState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::SoldierBonusState
_btnCancel	Basescape/SoldierTransformationState.h	/^	TextButton *_btnCancel, *_btnLeftArrow, *_btnRightArrow, *_btnStart;$/;"	m	class:OpenXcom::SoldierTransformationState
_btnCancel	Basescape/TransferBaseState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::TransferBaseState
_btnCancel	Basescape/TransferConfirmState.h	/^	TextButton *_btnCancel, *_btnOk;$/;"	m	class:OpenXcom::TransferConfirmState
_btnCancel	Basescape/TransferItemsState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::TransferItemsState
_btnCancel	Battlescape/AbortMissionState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::AbortMissionState
_btnCancel	Battlescape/ConfirmEndMissionState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::ConfirmEndMissionState
_btnCancel	Battlescape/InventoryLoadState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::InventoryLoadState
_btnCancel	Battlescape/InventoryPersonalState.h	/^	TextButton* _btnCancel;$/;"	m	class:OpenXcom::InventoryPersonalState
_btnCancel	Battlescape/InventorySaveState.h	/^	TextButton *_btnCancel, *_btnSave, *_btnSaveWithArmor;$/;"	m	class:OpenXcom::InventorySaveState
_btnCancel	Battlescape/TurnDiaryState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::TurnDiaryState
_btnCancel	Geoscape/BuildNewBaseState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::BuildNewBaseState
_btnCancel	Geoscape/ConfirmDestinationState.h	/^	TextButton *_btnOk, *_btnTransfer, *_btnCancel;$/;"	m	class:OpenXcom::ConfirmDestinationState
_btnCancel	Geoscape/ConfirmNewBaseState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::ConfirmNewBaseState
_btnCancel	Geoscape/GeoscapeCraftState.h	/^	TextButton *_btnBase, *_btnTarget, *_btnPatrol, *_btnCancel;$/;"	m	class:OpenXcom::GeoscapeCraftState
_btnCancel	Geoscape/InterceptState.h	/^	TextButton *_btnCancel, *_btnGotoBase;$/;"	m	class:OpenXcom::InterceptState
_btnCancel	Geoscape/MissionDetectedState.h	/^	TextButton *_btnIntercept, *_btnCenter, *_btnCancel;$/;"	m	class:OpenXcom::MissionDetectedState
_btnCancel	Geoscape/SelectDestinationState.h	/^	TextButton *_btnCancel, *_btnCydonia;$/;"	m	class:OpenXcom::SelectDestinationState
_btnCancel	Geoscape/SelectMusicTrackState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::SelectMusicTrackState
_btnCancel	Geoscape/UfoDetectedState.h	/^	TextButton *_btnIntercept, *_btnCentre, *_btnCancel;$/;"	m	class:OpenXcom::UfoDetectedState
_btnCancel	Geoscape/UfoTrackerState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::UfoTrackerState
_btnCancel	Menu/ListGamesState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::ListGamesState
_btnCancel	Menu/ListLoadOriginalState.h	/^	TextButton *_btnNew, *_btnCancel;$/;"	m	class:OpenXcom::ListLoadOriginalState
_btnCancel	Menu/ModListState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::ModListState
_btnCancel	Menu/NewBattleState.h	/^	TextButton *_btnOk, *_btnCancel, *_btnEquip, *_btnRandom;$/;"	m	class:OpenXcom::NewBattleState
_btnCancel	Menu/NewGameState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::NewGameState
_btnCancel	Menu/NotesState.h	/^	TextButton* _btnCancel;$/;"	m	class:OpenXcom::NotesState
_btnCancel	Menu/OptionsBaseState.h	/^	TextButton *_btnOk, *_btnCancel, *_btnDefault;$/;"	m	class:OpenXcom::OptionsBaseState
_btnCancel	Menu/PauseState.h	/^	TextButton *_btnLoad, *_btnSave, *_btnAbandon, *_btnOptions, *_btnCancel;$/;"	m	class:OpenXcom::PauseState
_btnCancel	Menu/SetWindowedRootState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::SetWindowedRootState
_btnCancel	Menu/TestPaletteState.h	/^	TextButton *_btnCancel;$/;"	m	class:OpenXcom::TestPaletteState
_btnCancel	Menu/TestState.h	/^	TextButton *_btnRun, *_btnCancel;$/;"	m	class:OpenXcom::TestState
_btnCautious	Geoscape/DogfightState.h	/^	ImageButton *_btnStandoff, *_btnCautious, *_btnStandard, *_btnAggressive, *_btnDisengage, *_btnUfo;$/;"	m	class:OpenXcom::DogfightState
_btnCenter	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnInventory, *_btnCenter, *_btnNextSoldier, *_btnNextStop, *_btnShowLayers, *_btnHelp;$/;"	m	class:OpenXcom::BattlescapeState
_btnCenter	Geoscape/MissionDetectedState.h	/^	TextButton *_btnIntercept, *_btnCenter, *_btnCancel;$/;"	m	class:OpenXcom::MissionDetectedState
_btnCentre	Geoscape/UfoDetectedState.h	/^	TextButton *_btnIntercept, *_btnCentre, *_btnCancel;$/;"	m	class:OpenXcom::UfoDetectedState
_btnCleanup	Basescape/ManageAlienContainmentState.h	/^	TextButton *_btnOk, *_btnSell, *_btnCancel, *_btnTransfer, *_btnCleanup;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_btnClear	Basescape/CraftEquipmentState.h	/^	TextButton *_btnOk, *_btnClear, *_btnInventory;$/;"	m	class:OpenXcom::CraftEquipmentState
_btnCommendations	Basescape/SoldierDiaryOverviewState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnKills, *_btnMissions, *_btnCommendations;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_btnCommendations	Basescape/SoldierDiaryPerformanceState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnKills, *_btnMissions, *_btnCommendations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_btnControls	Menu/OptionsBaseState.h	/^	TextButton *_btnVideo, *_btnAudio, *_btnControls, *_btnGeoscape, *_btnBattlescape, *_btnAdvanced, *_btnFolders;$/;"	m	class:OpenXcom::OptionsBaseState
_btnCountries	Geoscape/GraphsState.h	/^	std::vector<ToggleTextButton *> _btnRegions, _btnCountries, _btnFinances;$/;"	m	class:OpenXcom::GraphsState
_btnCountryTotal	Geoscape/GraphsState.h	/^	ToggleTextButton *_btnRegionTotal, *_btnCountryTotal;$/;"	m	class:OpenXcom::GraphsState
_btnCrafts	Basescape/BasescapeState.h	/^	TextButton *_btnNewBase, *_btnBaseInfo, *_btnSoldiers, *_btnCrafts, *_btnFacilities, *_btnResearch, *_btnManufacture, *_btnTransfer, *_btnPurchase, *_btnSell, *_btnGeoscape;$/;"	m	class:OpenXcom::BasescapeState
_btnCreateTemplate	Battlescape/InventoryState.h	/^	BattlescapeButton *_btnCreateTemplate, *_btnApplyTemplate;$/;"	m	class:OpenXcom::InventoryState
_btnCrew	Basescape/CraftInfoState.h	/^	TextButton *_btnOk, *_btnW[RuleCraft::WeaponMax], *_btnCrew, *_btnEquip, *_btnArmor, *_btnPilots, *_btnNewBattle;$/;"	m	class:OpenXcom::CraftInfoState
_btnCtrl	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnCtrl, *_btnAlt, *_btnShift, *_btnRMB, *_btnMMB;$/;"	m	class:OpenXcom::BattlescapeState
_btnCydonia	Geoscape/SelectDestinationState.h	/^	TextButton *_btnCancel, *_btnCydonia;$/;"	m	class:OpenXcom::SelectDestinationState
_btnDeaths	Menu/OptionsBattlescapeState.h	/^	ToggleTextButton *_btnTooltips, *_btnDeaths;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_btnDefault	Menu/OptionsBaseState.h	/^	TextButton *_btnOk, *_btnCancel, *_btnDefault;$/;"	m	class:OpenXcom::OptionsBaseState
_btnDiary	Basescape/SoldierInfoState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnArmor, *_btnSack, *_btnDiary, *_btnBonuses;$/;"	m	class:OpenXcom::SoldierInfoState
_btnDisengage	Geoscape/DogfightState.h	/^	ImageButton *_btnStandoff, *_btnCautious, *_btnStandard, *_btnAggressive, *_btnDisengage, *_btnUfo;$/;"	m	class:OpenXcom::DogfightState
_btnDisplayResolutionDown	Menu/OptionsVideoState.h	/^	ArrowButton *_btnDisplayResolutionUp, *_btnDisplayResolutionDown;$/;"	m	class:OpenXcom::OptionsVideoState
_btnDisplayResolutionUp	Menu/OptionsVideoState.h	/^	ArrowButton *_btnDisplayResolutionUp, *_btnDisplayResolutionDown;$/;"	m	class:OpenXcom::OptionsVideoState
_btnEndTurn	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnEndTurn, *_btnAbort, *_btnLaunch, *_btnPsi, *_btnSpecial, *_btnSkills, *_reserve;$/;"	m	class:OpenXcom::BattlescapeState
_btnEnergyCost	Menu/OptionsBattlescapeState.h	/^	ToggleTextButton *_btnArrows, *_btnTuCost, *_btnEnergyCost;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_btnEngineerDown	Basescape/ManufactureInfoState.h	/^	ArrowButton * _btnUnitUp, * _btnUnitDown, * _btnEngineerUp, * _btnEngineerDown;$/;"	m	class:OpenXcom::ManufactureInfoState
_btnEngineerUp	Basescape/ManufactureInfoState.h	/^	ArrowButton * _btnUnitUp, * _btnUnitDown, * _btnEngineerUp, * _btnEngineerDown;$/;"	m	class:OpenXcom::ManufactureInfoState
_btnEquip	Basescape/CraftInfoState.h	/^	TextButton *_btnOk, *_btnW[RuleCraft::WeaponMax], *_btnCrew, *_btnEquip, *_btnArmor, *_btnPilots, *_btnNewBattle;$/;"	m	class:OpenXcom::CraftInfoState
_btnEquip	Menu/NewBattleState.h	/^	TextButton *_btnOk, *_btnCancel, *_btnEquip, *_btnRandom;$/;"	m	class:OpenXcom::NewBattleState
_btnEquipmentLoad	Battlescape/ExtendedInventoryLinksState.h	/^	TextButton *_btnArmor, *_btnAvatar, *_btnEquipmentSave, *_btnEquipmentLoad, *_btnPersonalSave, *_btnPersonalLoad, *_btnNotes, *_btnUfopedia, *_btnAutoEquip;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_btnEquipmentSave	Battlescape/ExtendedInventoryLinksState.h	/^	TextButton *_btnArmor, *_btnAvatar, *_btnEquipmentSave, *_btnEquipmentLoad, *_btnPersonalSave, *_btnPersonalLoad, *_btnNotes, *_btnUfopedia, *_btnAutoEquip;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_btnExperienced	Menu/NewGameState.h	/^	TextButton *_btnBeginner, *_btnExperienced, *_btnVeteran, *_btnGenius, *_btnSuperhuman;$/;"	m	class:OpenXcom::NewGameState
_btnFacilities	Basescape/BasescapeState.h	/^	TextButton *_btnNewBase, *_btnBaseInfo, *_btnSoldiers, *_btnCrafts, *_btnFacilities, *_btnResearch, *_btnManufacture, *_btnTransfer, *_btnPurchase, *_btnSell, *_btnGeoscape;$/;"	m	class:OpenXcom::BasescapeState
_btnFinance	Geoscape/GraphsState.h	/^	InteractiveSurface *_btnIncome, *_btnFinance;$/;"	m	class:OpenXcom::GraphsState
_btnFinances	Geoscape/GraphsState.h	/^	std::vector<ToggleTextButton *> _btnRegions, _btnCountries, _btnFinances;$/;"	m	class:OpenXcom::GraphsState
_btnFolders	Menu/OptionsBaseState.h	/^	TextButton *_btnVideo, *_btnAudio, *_btnControls, *_btnGeoscape, *_btnBattlescape, *_btnAdvanced, *_btnFolders;$/;"	m	class:OpenXcom::OptionsBaseState
_btnFunding	Geoscape/ExtendedGeoscapeLinksState.h	/^	TextButton *_btnFunding, *_btnTechTree, *_btnGlobalResearch, *_btnGlobalProduction, *_btnUfoTracker, *_btnPilotExp, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_btnFunding	Geoscape/GeoscapeState.h	/^	TextButton *_btnIntercept, *_btnBases, *_btnGraphs, *_btnUfopaedia, *_btnOptions, *_btnFunding;$/;"	m	class:OpenXcom::GeoscapeState
_btnGenius	Menu/NewGameState.h	/^	TextButton *_btnBeginner, *_btnExperienced, *_btnVeteran, *_btnGenius, *_btnSuperhuman;$/;"	m	class:OpenXcom::NewGameState
_btnGeoscape	Basescape/BasescapeState.h	/^	TextButton *_btnNewBase, *_btnBaseInfo, *_btnSoldiers, *_btnCrafts, *_btnFacilities, *_btnResearch, *_btnManufacture, *_btnTransfer, *_btnPurchase, *_btnSell, *_btnGeoscape;$/;"	m	class:OpenXcom::BasescapeState
_btnGeoscape	Geoscape/GraphsState.h	/^	InteractiveSurface *_btnGeoscape;$/;"	m	class:OpenXcom::GraphsState
_btnGeoscape	Menu/OptionsBaseState.h	/^	TextButton *_btnVideo, *_btnAudio, *_btnControls, *_btnGeoscape, *_btnBattlescape, *_btnAdvanced, *_btnFolders;$/;"	m	class:OpenXcom::OptionsBaseState
_btnGlobalProduction	Geoscape/ExtendedGeoscapeLinksState.h	/^	TextButton *_btnFunding, *_btnTechTree, *_btnGlobalResearch, *_btnGlobalProduction, *_btnUfoTracker, *_btnPilotExp, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_btnGlobalResearch	Geoscape/ExtendedGeoscapeLinksState.h	/^	TextButton *_btnFunding, *_btnTechTree, *_btnGlobalResearch, *_btnGlobalProduction, *_btnUfoTracker, *_btnPilotExp, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_btnGlobeCountries	Menu/OptionsGeoscapeState.h	/^	ToggleTextButton *_btnGlobeCountries, *_btnGlobeRadars, *_btnGlobePaths;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_btnGlobePaths	Menu/OptionsGeoscapeState.h	/^	ToggleTextButton *_btnGlobeCountries, *_btnGlobeRadars, *_btnGlobePaths;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_btnGlobeRadars	Menu/OptionsGeoscapeState.h	/^	ToggleTextButton *_btnGlobeCountries, *_btnGlobeRadars, *_btnGlobePaths;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_btnGotoBase	Geoscape/InterceptState.h	/^	TextButton *_btnCancel, *_btnGotoBase;$/;"	m	class:OpenXcom::InterceptState
_btnGotoBase	Geoscape/ItemsArrivingState.h	/^	TextButton *_btnOk, *_btnGotoBase;$/;"	m	class:OpenXcom::ItemsArrivingState
_btnGotoBase	Geoscape/ProductionCompleteState.h	/^	TextButton *_btnOk, *_btnGotoBase, *_btnSummary;$/;"	m	class:OpenXcom::ProductionCompleteState
_btnGrandTotal	Basescape/StoresState.h	/^	ToggleTextButton *_btnGrandTotal;$/;"	m	class:OpenXcom::StoresState
_btnGraphs	Geoscape/GeoscapeState.h	/^	TextButton *_btnIntercept, *_btnBases, *_btnGraphs, *_btnUfopaedia, *_btnOptions, *_btnFunding;$/;"	m	class:OpenXcom::GeoscapeState
_btnGround	Battlescape/InventoryState.h	/^	BattlescapeButton *_btnOk, *_btnPrev, *_btnNext, *_btnUnload, *_btnGround, *_btnRank, *_btnArmor;$/;"	m	class:OpenXcom::InventoryState
_btnHelp	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnInventory, *_btnCenter, *_btnNextSoldier, *_btnNextStop, *_btnShowLayers, *_btnHelp;$/;"	m	class:OpenXcom::BattlescapeState
_btnIncludeDebug	Ufopaedia/StatsForNerdsState.h	/^	ToggleTextButton *_btnIncludeDebug, *_btnIncludeIds, *_btnIncludeDefaults;$/;"	m	class:OpenXcom::StatsForNerdsState
_btnIncludeDefaults	Ufopaedia/StatsForNerdsState.h	/^	ToggleTextButton *_btnIncludeDebug, *_btnIncludeIds, *_btnIncludeDefaults;$/;"	m	class:OpenXcom::StatsForNerdsState
_btnIncludeIds	Ufopaedia/StatsForNerdsState.h	/^	ToggleTextButton *_btnIncludeDebug, *_btnIncludeIds, *_btnIncludeDefaults;$/;"	m	class:OpenXcom::StatsForNerdsState
_btnIncome	Geoscape/GraphsState.h	/^	InteractiveSurface *_btnIncome, *_btnFinance;$/;"	m	class:OpenXcom::GraphsState
_btnInfo	Geoscape/TargetInfoState.h	/^	TextButton *_btnIntercept, *_btnOk, *_btnInfo;$/;"	m	class:OpenXcom::TargetInfoState
_btnInfo	Ufopaedia/ArticleState.h	/^		TextButton *_btnInfo;$/;"	m	class:OpenXcom::ArticleState
_btnIntercept	Geoscape/DogfightErrorState.h	/^	TextButton *_btnIntercept, *_btnBase;$/;"	m	class:OpenXcom::DogfightErrorState
_btnIntercept	Geoscape/GeoscapeState.h	/^	TextButton *_btnIntercept, *_btnBases, *_btnGraphs, *_btnUfopaedia, *_btnOptions, *_btnFunding;$/;"	m	class:OpenXcom::GeoscapeState
_btnIntercept	Geoscape/MissionDetectedState.h	/^	TextButton *_btnIntercept, *_btnCenter, *_btnCancel;$/;"	m	class:OpenXcom::MissionDetectedState
_btnIntercept	Geoscape/TargetInfoState.h	/^	TextButton *_btnIntercept, *_btnOk, *_btnInfo;$/;"	m	class:OpenXcom::TargetInfoState
_btnIntercept	Geoscape/UfoDetectedState.h	/^	TextButton *_btnIntercept, *_btnCentre, *_btnCancel;$/;"	m	class:OpenXcom::UfoDetectedState
_btnInventory	Basescape/CraftEquipmentState.h	/^	TextButton *_btnOk, *_btnClear, *_btnInventory;$/;"	m	class:OpenXcom::CraftEquipmentState
_btnInventory	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnInventory, *_btnCenter, *_btnNextSoldier, *_btnNextStop, *_btnShowLayers, *_btnHelp;$/;"	m	class:OpenXcom::BattlescapeState
_btnIronman	Menu/NewGameState.h	/^	ToggleTextButton *_btnIronman;$/;"	m	class:OpenXcom::NewGameState
_btnKillAll	Battlescape/ExtendedBattlescapeLinksState.h	/^	TextButton *_btnKillAll;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_btnKills	Basescape/SoldierDiaryOverviewState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnKills, *_btnMissions, *_btnCommendations;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_btnKills	Basescape/SoldierDiaryPerformanceState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnKills, *_btnMissions, *_btnCommendations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_btnKneel	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnUnitUp, *_btnUnitDown, *_btnMapUp, *_btnMapDown, *_btnShowMap, *_btnKneel;$/;"	m	class:OpenXcom::BattlescapeState
_btnLaunch	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnEndTurn, *_btnAbort, *_btnLaunch, *_btnPsi, *_btnSpecial, *_btnSkills, *_reserve;$/;"	m	class:OpenXcom::BattlescapeState
_btnLeftArrow	Basescape/SoldierTransformationState.h	/^	TextButton *_btnCancel, *_btnLeftArrow, *_btnRightArrow, *_btnStart;$/;"	m	class:OpenXcom::SoldierTransformationState
_btnLeftHandItem	Battlescape/BattlescapeState.h	/^	InteractiveSurface *_btnLeftHandItem, *_btnRightHandItem;$/;"	m	class:OpenXcom::BattlescapeState
_btnLess	Basescape/ResearchInfoState.h	/^	ArrowButton *_btnMore, *_btnLess;$/;"	m	class:OpenXcom::ResearchInfoState
_btnLetterbox	Menu/OptionsVideoState.h	/^	ToggleTextButton *_btnLetterbox, *_btnLockMouse, *_btnRootWindowedMode;$/;"	m	class:OpenXcom::OptionsVideoState
_btnLinks	Battlescape/InventoryState.h	/^	BattlescapeButton *_btnLinks;$/;"	m	class:OpenXcom::InventoryState
_btnLoad	Menu/MainMenuState.h	/^	TextButton *_btnNewGame, *_btnNewBattle, *_btnLoad, *_btnOptions, *_btnMods, *_btnQuit, *_btnUpdate;$/;"	m	class:OpenXcom::MainMenuState
_btnLoad	Menu/PauseState.h	/^	TextButton *_btnLoad, *_btnSave, *_btnAbandon, *_btnOptions, *_btnCancel;$/;"	m	class:OpenXcom::PauseState
_btnLockMouse	Menu/OptionsVideoState.h	/^	ToggleTextButton *_btnLetterbox, *_btnLockMouse, *_btnRootWindowedMode;$/;"	m	class:OpenXcom::OptionsVideoState
_btnLvlDwn	Battlescape/MiniMapState.h	/^	BattlescapeButton *_btnLvlUp, *_btnLvlDwn, *_btnOk;$/;"	m	class:OpenXcom::MiniMapState
_btnLvlUp	Battlescape/MiniMapState.h	/^	BattlescapeButton *_btnLvlUp, *_btnLvlDwn, *_btnOk;$/;"	m	class:OpenXcom::MiniMapState
_btnMMB	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnCtrl, *_btnAlt, *_btnShift, *_btnRMB, *_btnMMB;$/;"	m	class:OpenXcom::BattlescapeState
_btnManufacture	Basescape/BasescapeState.h	/^	TextButton *_btnNewBase, *_btnBaseInfo, *_btnSoldiers, *_btnCrafts, *_btnFacilities, *_btnResearch, *_btnManufacture, *_btnTransfer, *_btnPurchase, *_btnSell, *_btnGeoscape;$/;"	m	class:OpenXcom::BasescapeState
_btnManufacture	Battlescape/CannotReequipState.h	/^	TextButton *_btnOk, *_btnManufacture, *_btnPurchase;$/;"	m	class:OpenXcom::CannotReequipState
_btnManufacture	Geoscape/NewPossibleManufactureState.h	/^	TextButton *_btnManufacture, *_btnOk;$/;"	m	class:OpenXcom::NewPossibleManufactureState
_btnMapDown	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnUnitUp, *_btnUnitDown, *_btnMapUp, *_btnMapDown, *_btnShowMap, *_btnKneel;$/;"	m	class:OpenXcom::BattlescapeState
_btnMapUp	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnUnitUp, *_btnUnitDown, *_btnMapUp, *_btnMapDown, *_btnShowMap, *_btnKneel;$/;"	m	class:OpenXcom::BattlescapeState
_btnMemorial	Basescape/SoldiersState.h	/^	TextButton *_btnOk, *_btnPsiTraining, *_btnTraining, *_btnMemorial;$/;"	m	class:OpenXcom::SoldiersState
_btnMinimize	Geoscape/DogfightState.h	/^	InteractiveSurface *_btnMinimize, *_preview, *_weapon[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_btnMinimizedIcon	Geoscape/DogfightState.h	/^	InteractiveSurface *_btnMinimizedIcon;$/;"	m	class:OpenXcom::DogfightState
_btnMission	Menu/NewBattleState.h	/^	TextButton *_btnMission, *_btnTerrain, *_btnAlienRace;$/;"	m	class:OpenXcom::NewBattleState
_btnMissions	Basescape/SoldierDiaryOverviewState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnKills, *_btnMissions, *_btnCommendations;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_btnMissions	Basescape/SoldierDiaryPerformanceState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnKills, *_btnMissions, *_btnCommendations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_btnMods	Menu/MainMenuState.h	/^	TextButton *_btnNewGame, *_btnNewBattle, *_btnLoad, *_btnOptions, *_btnMods, *_btnQuit, *_btnUpdate;$/;"	m	class:OpenXcom::MainMenuState
_btnMonthlyCosts	Basescape/BaseInfoState.h	/^	TextButton *_btnOk, *_btnTransfers, *_btnStores, *_btnMonthlyCosts;$/;"	m	class:OpenXcom::BaseInfoState
_btnMore	Basescape/ResearchInfoState.h	/^	ArrowButton *_btnMore, *_btnLess;$/;"	m	class:OpenXcom::ResearchInfoState
_btnMusic	Battlescape/ExtendedBattlescapeLinksState.h	/^	TextButton *_btnTouch, *_btnNightVision, *_btnPersonalLights, *_btnBrightness, *_btnTurnDiary, *_btnBriefing, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_btnMusic	Geoscape/ExtendedGeoscapeLinksState.h	/^	TextButton *_btnFunding, *_btnTechTree, *_btnGlobalResearch, *_btnGlobalProduction, *_btnUfoTracker, *_btnPilotExp, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_btnNew	Basescape/ManufactureState.h	/^	TextButton *_btnNew, *_btnOk;$/;"	m	class:OpenXcom::ManufactureState
_btnNew	Basescape/ResearchState.h	/^	TextButton *_btnNew, *_btnOk;$/;"	m	class:OpenXcom::ResearchState
_btnNew	Basescape/TechTreeViewerState.h	/^	TextButton *_btnOk, *_btnNew;$/;"	m	class:OpenXcom::TechTreeViewerState
_btnNew	Menu/ListLoadOriginalState.h	/^	TextButton *_btnNew, *_btnCancel;$/;"	m	class:OpenXcom::ListLoadOriginalState
_btnNewBase	Basescape/BasescapeState.h	/^	TextButton *_btnNewBase, *_btnBaseInfo, *_btnSoldiers, *_btnCrafts, *_btnFacilities, *_btnResearch, *_btnManufacture, *_btnTransfer, *_btnPurchase, *_btnSell, *_btnGeoscape;$/;"	m	class:OpenXcom::BasescapeState
_btnNewBattle	Basescape/CraftInfoState.h	/^	TextButton *_btnOk, *_btnW[RuleCraft::WeaponMax], *_btnCrew, *_btnEquip, *_btnArmor, *_btnPilots, *_btnNewBattle;$/;"	m	class:OpenXcom::CraftInfoState
_btnNewBattle	Menu/MainMenuState.h	/^	TextButton *_btnNewGame, *_btnNewBattle, *_btnLoad, *_btnOptions, *_btnMods, *_btnQuit, *_btnUpdate;$/;"	m	class:OpenXcom::MainMenuState
_btnNewGame	Menu/MainMenuState.h	/^	TextButton *_btnNewGame, *_btnNewBattle, *_btnLoad, *_btnOptions, *_btnMods, *_btnQuit, *_btnUpdate;$/;"	m	class:OpenXcom::MainMenuState
_btnNext	Basescape/SoldierDiaryMissionState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_btnNext	Basescape/SoldierDiaryOverviewState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnKills, *_btnMissions, *_btnCommendations;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_btnNext	Basescape/SoldierDiaryPerformanceState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnKills, *_btnMissions, *_btnCommendations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_btnNext	Basescape/SoldierInfoState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnArmor, *_btnSack, *_btnDiary, *_btnBonuses;$/;"	m	class:OpenXcom::SoldierInfoState
_btnNext	Battlescape/InventoryState.h	/^	BattlescapeButton *_btnOk, *_btnPrev, *_btnNext, *_btnUnload, *_btnGround, *_btnRank, *_btnArmor;$/;"	m	class:OpenXcom::InventoryState
_btnNext	Battlescape/UnitInfoState.h	/^	TextButton *_btnPrev, *_btnNext;$/;"	m	class:OpenXcom::UnitInfoState
_btnNext	Ufopaedia/ArticleState.h	/^		TextButton *_btnNext;$/;"	m	class:OpenXcom::ArticleState
_btnNext	Ufopaedia/StatsForNerdsState.h	/^	TextButton *_btnPrev, *_btnNext;$/;"	m	class:OpenXcom::StatsForNerdsState
_btnNextSoldier	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnInventory, *_btnCenter, *_btnNextSoldier, *_btnNextStop, *_btnShowLayers, *_btnHelp;$/;"	m	class:OpenXcom::BattlescapeState
_btnNextStop	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnInventory, *_btnCenter, *_btnNextSoldier, *_btnNextStop, *_btnShowLayers, *_btnHelp;$/;"	m	class:OpenXcom::BattlescapeState
_btnNightVision	Battlescape/ExtendedBattlescapeLinksState.h	/^	TextButton *_btnTouch, *_btnNightVision, *_btnPersonalLights, *_btnBrightness, *_btnTurnDiary, *_btnBriefing, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_btnNo	Geoscape/ConfirmCydoniaState.h	/^	TextButton *_btnNo, *_btnYes;$/;"	m	class:OpenXcom::ConfirmCydoniaState
_btnNo	Geoscape/ConfirmLandingState.h	/^	TextButton *_btnYes, *_btnNo;$/;"	m	class:OpenXcom::ConfirmLandingState
_btnNo	Menu/AbandonGameState.h	/^	TextButton *_btnYes, *_btnNo;$/;"	m	class:OpenXcom::AbandonGameState
_btnNo	Menu/ConfirmLoadState.h	/^	TextButton *_btnYes, *_btnNo;$/;"	m	class:OpenXcom::ConfirmLoadState
_btnNo	Menu/DeleteGameState.h	/^	TextButton *_btnNo, *_btnYes;$/;"	m	class:OpenXcom::DeleteGameState
_btnNo	Menu/ModConfirmExtendedState.h	/^		TextButton *_btnYes, *_btnNo;$/;"	m	class:OpenXcom::ModConfirmExtendedState
_btnNo	Menu/OptionsConfirmState.h	/^	TextButton *_btnYes, *_btnNo;$/;"	m	class:OpenXcom::OptionsConfirmState
_btnNo	Menu/OptionsDefaultsState.h	/^	TextButton *_btnYes, *_btnNo;$/;"	m	class:OpenXcom::OptionsDefaultsState
_btnNotes	Battlescape/ExtendedBattlescapeLinksState.h	/^	TextButton *_btnTouch, *_btnNightVision, *_btnPersonalLights, *_btnBrightness, *_btnTurnDiary, *_btnBriefing, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_btnNotes	Battlescape/ExtendedInventoryLinksState.h	/^	TextButton *_btnArmor, *_btnAvatar, *_btnEquipmentSave, *_btnEquipmentLoad, *_btnPersonalSave, *_btnPersonalLoad, *_btnNotes, *_btnUfopedia, *_btnAutoEquip;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_btnNotes	Geoscape/ExtendedGeoscapeLinksState.h	/^	TextButton *_btnFunding, *_btnTechTree, *_btnGlobalResearch, *_btnGlobalProduction, *_btnUfoTracker, *_btnPilotExp, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_btnOK	Basescape/NewResearchListState.h	/^	TextButton *_btnOK;$/;"	m	class:OpenXcom::NewResearchListState
_btnOK	Basescape/SoldierTransformationListState.h	/^	TextButton* _btnOK;$/;"	m	class:OpenXcom::SoldierTransformationListState
_btnOk	Basescape/BaseInfoState.h	/^	TextButton *_btnOk, *_btnTransfers, *_btnStores, *_btnMonthlyCosts;$/;"	m	class:OpenXcom::BaseInfoState
_btnOk	Basescape/BuildFacilitiesState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::BuildFacilitiesState
_btnOk	Basescape/CraftArmorState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::CraftArmorState
_btnOk	Basescape/CraftEquipmentState.h	/^	TextButton *_btnOk, *_btnClear, *_btnInventory;$/;"	m	class:OpenXcom::CraftEquipmentState
_btnOk	Basescape/CraftInfoState.h	/^	TextButton *_btnOk, *_btnW[RuleCraft::WeaponMax], *_btnCrew, *_btnEquip, *_btnArmor, *_btnPilots, *_btnNewBattle;$/;"	m	class:OpenXcom::CraftInfoState
_btnOk	Basescape/CraftPilotsState.h	/^	TextButton *_btnOk, *_btnAdd, *_btnRemoveAll;$/;"	m	class:OpenXcom::CraftPilotsState
_btnOk	Basescape/CraftSoldiersState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::CraftSoldiersState
_btnOk	Basescape/CraftsState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::CraftsState
_btnOk	Basescape/DismantleFacilityState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::DismantleFacilityState
_btnOk	Basescape/GlobalManufactureState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::GlobalManufactureState
_btnOk	Basescape/GlobalResearchState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::GlobalResearchState
_btnOk	Basescape/ManageAlienContainmentState.h	/^	TextButton *_btnOk, *_btnSell, *_btnCancel, *_btnTransfer, *_btnCleanup;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_btnOk	Basescape/ManufactureDependenciesTreeState.h	/^	TextButton *_btnOk, *_btnShowAll;$/;"	m	class:OpenXcom::ManufactureDependenciesTreeState
_btnOk	Basescape/ManufactureInfoState.h	/^	TextButton * _btnStop, * _btnOk;$/;"	m	class:OpenXcom::ManufactureInfoState
_btnOk	Basescape/ManufactureState.h	/^	TextButton *_btnNew, *_btnOk;$/;"	m	class:OpenXcom::ManufactureState
_btnOk	Basescape/MonthlyCostsState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::MonthlyCostsState
_btnOk	Basescape/NewManufactureListState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::NewManufactureListState
_btnOk	Basescape/PurchaseState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::PurchaseState
_btnOk	Basescape/ResearchInfoState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::ResearchInfoState
_btnOk	Basescape/ResearchState.h	/^	TextButton *_btnNew, *_btnOk;$/;"	m	class:OpenXcom::ResearchState
_btnOk	Basescape/SackSoldierState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::SackSoldierState
_btnOk	Basescape/SellState.h	/^	TextButton *_btnOk, *_btnCancel, *_btnTransfer;$/;"	m	class:OpenXcom::SellState
_btnOk	Basescape/SoldierAvatarState.h	/^	TextButton *_btnCancel, *_btnOk;$/;"	m	class:OpenXcom::SoldierAvatarState
_btnOk	Basescape/SoldierDiaryMissionState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_btnOk	Basescape/SoldierDiaryOverviewState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnKills, *_btnMissions, *_btnCommendations;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_btnOk	Basescape/SoldierDiaryPerformanceState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnKills, *_btnMissions, *_btnCommendations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_btnOk	Basescape/SoldierInfoState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnArmor, *_btnSack, *_btnDiary, *_btnBonuses;$/;"	m	class:OpenXcom::SoldierInfoState
_btnOk	Basescape/SoldierMemorialState.h	/^	TextButton *_btnOk, *_btnStatistics;$/;"	m	class:OpenXcom::SoldierMemorialState
_btnOk	Basescape/SoldiersState.h	/^	TextButton *_btnOk, *_btnPsiTraining, *_btnTraining, *_btnMemorial;$/;"	m	class:OpenXcom::SoldiersState
_btnOk	Basescape/StoresState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::StoresState
_btnOk	Basescape/TechTreeSelectState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::TechTreeSelectState
_btnOk	Basescape/TechTreeViewerState.h	/^	TextButton *_btnOk, *_btnNew;$/;"	m	class:OpenXcom::TechTreeViewerState
_btnOk	Basescape/TransferConfirmState.h	/^	TextButton *_btnCancel, *_btnOk;$/;"	m	class:OpenXcom::TransferConfirmState
_btnOk	Basescape/TransferItemsState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::TransferItemsState
_btnOk	Basescape/TransfersState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::TransfersState
_btnOk	Battlescape/AbortMissionState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::AbortMissionState
_btnOk	Battlescape/AliensCrashState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::AliensCrashState
_btnOk	Battlescape/BriefingLightState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::BriefingLightState
_btnOk	Battlescape/BriefingState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::BriefingState
_btnOk	Battlescape/CannotReequipState.h	/^	TextButton *_btnOk, *_btnManufacture, *_btnPurchase;$/;"	m	class:OpenXcom::CannotReequipState
_btnOk	Battlescape/CommendationLateState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::CommendationLateState
_btnOk	Battlescape/CommendationState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::CommendationState
_btnOk	Battlescape/ConfirmEndMissionState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::ConfirmEndMissionState
_btnOk	Battlescape/DebriefingState.h	/^	TextButton *_btnOk, *_btnStats, *_btnSell, *_btnTransfer;$/;"	m	class:OpenXcom::DebriefingState
_btnOk	Battlescape/ExtendedBattlescapeLinksState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_btnOk	Battlescape/ExtendedInventoryLinksState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_btnOk	Battlescape/InfoboxOKState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::InfoboxOKState
_btnOk	Battlescape/InventoryState.h	/^	BattlescapeButton *_btnOk, *_btnPrev, *_btnNext, *_btnUnload, *_btnGround, *_btnRank, *_btnArmor;$/;"	m	class:OpenXcom::InventoryState
_btnOk	Battlescape/MiniMapState.h	/^	BattlescapeButton *_btnLvlUp, *_btnLvlDwn, *_btnOk;$/;"	m	class:OpenXcom::MiniMapState
_btnOk	Battlescape/PromotionsState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::PromotionsState
_btnOk	Geoscape/AlienBaseState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::AlienBaseState
_btnOk	Geoscape/AllocatePsiTrainingState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_btnOk	Geoscape/AllocateTrainingState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::AllocateTrainingState
_btnOk	Geoscape/BaseDefenseState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::BaseDefenseState
_btnOk	Geoscape/BaseDestroyedState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::BaseDestroyedState
_btnOk	Geoscape/BaseNameState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::BaseNameState
_btnOk	Geoscape/ConfirmDestinationState.h	/^	TextButton *_btnOk, *_btnTransfer, *_btnCancel;$/;"	m	class:OpenXcom::ConfirmDestinationState
_btnOk	Geoscape/ConfirmNewBaseState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::ConfirmNewBaseState
_btnOk	Geoscape/CraftErrorState.h	/^	TextButton *_btnOk, *_btnOk5Secs;$/;"	m	class:OpenXcom::CraftErrorState
_btnOk	Geoscape/CraftNotEnoughPilotsState.h	/^	TextButton *_btnOk, *_btnAssignPilots;$/;"	m	class:OpenXcom::CraftNotEnoughPilotsState
_btnOk	Geoscape/CraftPatrolState.h	/^	TextButton *_btnOk, *_btnRedirect;$/;"	m	class:OpenXcom::CraftPatrolState
_btnOk	Geoscape/DogfightExperienceState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::DogfightExperienceState
_btnOk	Geoscape/ExtendedGeoscapeLinksState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_btnOk	Geoscape/FundingState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::FundingState
_btnOk	Geoscape/GeoscapeEventState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::GeoscapeEventState
_btnOk	Geoscape/ItemsArrivingState.h	/^	TextButton *_btnOk, *_btnGotoBase;$/;"	m	class:OpenXcom::ItemsArrivingState
_btnOk	Geoscape/LowFuelState.h	/^	TextButton *_btnOk, *_btnOk5Secs;$/;"	m	class:OpenXcom::LowFuelState
_btnOk	Geoscape/MonthlyReportState.h	/^	TextButton *_btnOk, *_btnBigOk;$/;"	m	class:OpenXcom::MonthlyReportState
_btnOk	Geoscape/NewPossibleCraftState.h	/^	TextButton *_btnPurchase, *_btnOk;$/;"	m	class:OpenXcom::NewPossibleCraftState
_btnOk	Geoscape/NewPossibleFacilityState.h	/^	TextButton *_btnOpen, *_btnOk;$/;"	m	class:OpenXcom::NewPossibleFacilityState
_btnOk	Geoscape/NewPossibleManufactureState.h	/^	TextButton *_btnManufacture, *_btnOk;$/;"	m	class:OpenXcom::NewPossibleManufactureState
_btnOk	Geoscape/NewPossiblePurchaseState.h	/^	TextButton *_btnPurchase, *_btnOk;$/;"	m	class:OpenXcom::NewPossiblePurchaseState
_btnOk	Geoscape/NewPossibleResearchState.h	/^	TextButton *_btnResearch, *_btnOk;$/;"	m	class:OpenXcom::NewPossibleResearchState
_btnOk	Geoscape/ProductionCompleteState.h	/^	TextButton *_btnOk, *_btnGotoBase, *_btnSummary;$/;"	m	class:OpenXcom::ProductionCompleteState
_btnOk	Geoscape/PsiTrainingState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::PsiTrainingState
_btnOk	Geoscape/ResearchCompleteState.h	/^	TextButton *_btnReport, *_btnOk;$/;"	m	class:OpenXcom::ResearchCompleteState
_btnOk	Geoscape/ResearchRequiredState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::ResearchRequiredState
_btnOk	Geoscape/TargetInfoState.h	/^	TextButton *_btnIntercept, *_btnOk, *_btnInfo;$/;"	m	class:OpenXcom::TargetInfoState
_btnOk	Geoscape/TrainingFinishedState.h	/^	TextButton *_btnOpen, *_btnOk;$/;"	m	class:OpenXcom::TrainingFinishedState
_btnOk	Geoscape/TrainingState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::TrainingState
_btnOk	Geoscape/UfoLostState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::UfoLostState
_btnOk	Menu/ErrorMessageState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::ErrorMessageState
_btnOk	Menu/ModListState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::ModListState
_btnOk	Menu/NewBattleState.h	/^	TextButton *_btnOk, *_btnCancel, *_btnEquip, *_btnRandom;$/;"	m	class:OpenXcom::NewBattleState
_btnOk	Menu/NewGameState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::NewGameState
_btnOk	Menu/OptionsBaseState.h	/^	TextButton *_btnOk, *_btnCancel, *_btnDefault;$/;"	m	class:OpenXcom::OptionsBaseState
_btnOk	Menu/SetWindowedRootState.h	/^	TextButton *_btnOk, *_btnCancel;$/;"	m	class:OpenXcom::SetWindowedRootState
_btnOk	Menu/StatisticsState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::StatisticsState
_btnOk	Ufopaedia/ArticleState.h	/^		TextButton *_btnOk;$/;"	m	class:OpenXcom::ArticleState
_btnOk	Ufopaedia/StatsForNerdsState.h	/^	TextButton *_btnOk;$/;"	m	class:OpenXcom::StatsForNerdsState
_btnOk	Ufopaedia/UfopaediaSelectState.h	/^		TextButton *_btnOk;$/;"	m	class:OpenXcom::UfopaediaSelectState
_btnOk	Ufopaedia/UfopaediaStartState.h	/^		TextButton *_btnOk;$/;"	m	class:OpenXcom::UfopaediaStartState
_btnOk5Secs	Geoscape/CraftErrorState.h	/^	TextButton *_btnOk, *_btnOk5Secs;$/;"	m	class:OpenXcom::CraftErrorState
_btnOk5Secs	Geoscape/LowFuelState.h	/^	TextButton *_btnOk, *_btnOk5Secs;$/;"	m	class:OpenXcom::LowFuelState
_btnOld	Menu/ListLoadState.h	/^	TextButton *_btnOld;$/;"	m	class:OpenXcom::ListLoadState
_btnOnlyEligible	Basescape/SoldierTransformationListState.h	/^	ToggleTextButton* _btnOnlyEligible;$/;"	m	class:OpenXcom::SoldierTransformationListState
_btnOpen	Geoscape/NewPossibleFacilityState.h	/^	TextButton *_btnOpen, *_btnOk;$/;"	m	class:OpenXcom::NewPossibleFacilityState
_btnOpen	Geoscape/TrainingFinishedState.h	/^	TextButton *_btnOpen, *_btnOk;$/;"	m	class:OpenXcom::TrainingFinishedState
_btnOptions	Geoscape/GeoscapeState.h	/^	TextButton *_btnIntercept, *_btnBases, *_btnGraphs, *_btnUfopaedia, *_btnOptions, *_btnFunding;$/;"	m	class:OpenXcom::GeoscapeState
_btnOptions	Menu/MainMenuState.h	/^	TextButton *_btnNewGame, *_btnNewBattle, *_btnLoad, *_btnOptions, *_btnMods, *_btnQuit, *_btnUpdate;$/;"	m	class:OpenXcom::MainMenuState
_btnOptions	Menu/PauseState.h	/^	TextButton *_btnLoad, *_btnSave, *_btnAbandon, *_btnOptions, *_btnCancel;$/;"	m	class:OpenXcom::PauseState
_btnPatrol	Geoscape/GeoscapeCraftState.h	/^	TextButton *_btnBase, *_btnTarget, *_btnPatrol, *_btnCancel;$/;"	m	class:OpenXcom::GeoscapeCraftState
_btnPersonalLights	Battlescape/ExtendedBattlescapeLinksState.h	/^	TextButton *_btnTouch, *_btnNightVision, *_btnPersonalLights, *_btnBrightness, *_btnTurnDiary, *_btnBriefing, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_btnPersonalLoad	Battlescape/ExtendedInventoryLinksState.h	/^	TextButton *_btnArmor, *_btnAvatar, *_btnEquipmentSave, *_btnEquipmentLoad, *_btnPersonalSave, *_btnPersonalLoad, *_btnNotes, *_btnUfopedia, *_btnAutoEquip;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_btnPersonalSave	Battlescape/ExtendedInventoryLinksState.h	/^	TextButton *_btnArmor, *_btnAvatar, *_btnEquipmentSave, *_btnEquipmentLoad, *_btnPersonalSave, *_btnPersonalLoad, *_btnNotes, *_btnUfopedia, *_btnAutoEquip;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_btnPilotExp	Geoscape/ExtendedGeoscapeLinksState.h	/^	TextButton *_btnFunding, *_btnTechTree, *_btnGlobalResearch, *_btnGlobalProduction, *_btnUfoTracker, *_btnPilotExp, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_btnPilots	Basescape/CraftInfoState.h	/^	TextButton *_btnOk, *_btnW[RuleCraft::WeaponMax], *_btnCrew, *_btnEquip, *_btnArmor, *_btnPilots, *_btnNewBattle;$/;"	m	class:OpenXcom::CraftInfoState
_btnPlus	Geoscape/AllocatePsiTrainingState.h	/^	ToggleTextButton *_btnPlus;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_btnPlus	Geoscape/AllocateTrainingState.h	/^	ToggleTextButton *_btnPlus;$/;"	m	class:OpenXcom::AllocateTrainingState
_btnPrev	Basescape/SoldierDiaryMissionState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_btnPrev	Basescape/SoldierDiaryOverviewState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnKills, *_btnMissions, *_btnCommendations;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_btnPrev	Basescape/SoldierDiaryPerformanceState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnKills, *_btnMissions, *_btnCommendations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_btnPrev	Basescape/SoldierInfoState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnArmor, *_btnSack, *_btnDiary, *_btnBonuses;$/;"	m	class:OpenXcom::SoldierInfoState
_btnPrev	Battlescape/InventoryState.h	/^	BattlescapeButton *_btnOk, *_btnPrev, *_btnNext, *_btnUnload, *_btnGround, *_btnRank, *_btnArmor;$/;"	m	class:OpenXcom::InventoryState
_btnPrev	Battlescape/UnitInfoState.h	/^	TextButton *_btnPrev, *_btnNext;$/;"	m	class:OpenXcom::UnitInfoState
_btnPrev	Ufopaedia/ArticleState.h	/^		TextButton *_btnPrev;$/;"	m	class:OpenXcom::ArticleState
_btnPrev	Ufopaedia/StatsForNerdsState.h	/^	TextButton *_btnPrev, *_btnNext;$/;"	m	class:OpenXcom::StatsForNerdsState
_btnPreview	Basescape/CraftSoldiersState.h	/^	TextButton *_btnPreview;$/;"	m	class:OpenXcom::CraftSoldiersState
_btnPreview	Ufopaedia/StatsForNerdsState.h	/^	TextButton *_btnPreview;$/;"	m	class:OpenXcom::StatsForNerdsState
_btnPsi	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnEndTurn, *_btnAbort, *_btnLaunch, *_btnPsi, *_btnSpecial, *_btnSkills, *_reserve;$/;"	m	class:OpenXcom::BattlescapeState
_btnPsiTraining	Basescape/SoldiersState.h	/^	TextButton *_btnOk, *_btnPsiTraining, *_btnTraining, *_btnMemorial;$/;"	m	class:OpenXcom::SoldiersState
_btnPurchase	Basescape/BasescapeState.h	/^	TextButton *_btnNewBase, *_btnBaseInfo, *_btnSoldiers, *_btnCrafts, *_btnFacilities, *_btnResearch, *_btnManufacture, *_btnTransfer, *_btnPurchase, *_btnSell, *_btnGeoscape;$/;"	m	class:OpenXcom::BasescapeState
_btnPurchase	Battlescape/CannotReequipState.h	/^	TextButton *_btnOk, *_btnManufacture, *_btnPurchase;$/;"	m	class:OpenXcom::CannotReequipState
_btnPurchase	Geoscape/NewPossibleCraftState.h	/^	TextButton *_btnPurchase, *_btnOk;$/;"	m	class:OpenXcom::NewPossibleCraftState
_btnPurchase	Geoscape/NewPossiblePurchaseState.h	/^	TextButton *_btnPurchase, *_btnOk;$/;"	m	class:OpenXcom::NewPossiblePurchaseState
_btnQuickSearch	Basescape/CraftEquipmentState.h	/^	TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::CraftEquipmentState
_btnQuickSearch	Basescape/NewManufactureListState.h	/^	TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::NewManufactureListState
_btnQuickSearch	Basescape/NewResearchListState.h	/^	TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::NewResearchListState
_btnQuickSearch	Basescape/PurchaseState.h	/^	TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::PurchaseState
_btnQuickSearch	Basescape/SellState.h	/^	TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::SellState
_btnQuickSearch	Basescape/SoldierArmorState.h	/^	TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::SoldierArmorState
_btnQuickSearch	Basescape/SoldierMemorialState.h	/^	TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::SoldierMemorialState
_btnQuickSearch	Basescape/SoldierTransformationListState.h	/^	TextEdit* _btnQuickSearch;$/;"	m	class:OpenXcom::SoldierTransformationListState
_btnQuickSearch	Basescape/StoresState.h	/^	TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::StoresState
_btnQuickSearch	Basescape/TechTreeSelectState.h	/^	TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::TechTreeSelectState
_btnQuickSearch	Basescape/TransferItemsState.h	/^	TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::TransferItemsState
_btnQuickSearch	Battlescape/InventoryState.h	/^	TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::InventoryState
_btnQuickSearch	Menu/NewBattleState.h	/^	TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::NewBattleState
_btnQuickSearch	Ufopaedia/UfopaediaSelectState.h	/^		TextEdit *_btnQuickSearch;$/;"	m	class:OpenXcom::UfopaediaSelectState
_btnQuit	Menu/MainMenuState.h	/^	TextButton *_btnNewGame, *_btnNewBattle, *_btnLoad, *_btnOptions, *_btnMods, *_btnQuit, *_btnUpdate;$/;"	m	class:OpenXcom::MainMenuState
_btnRMB	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnCtrl, *_btnAlt, *_btnShift, *_btnRMB, *_btnMMB;$/;"	m	class:OpenXcom::BattlescapeState
_btnRandom	Menu/NewBattleState.h	/^	TextButton *_btnOk, *_btnCancel, *_btnEquip, *_btnRandom;$/;"	m	class:OpenXcom::NewBattleState
_btnRank	Battlescape/InventoryState.h	/^	BattlescapeButton *_btnOk, *_btnPrev, *_btnNext, *_btnUnload, *_btnGround, *_btnRank, *_btnArmor;$/;"	m	class:OpenXcom::InventoryState
_btnRedirect	Geoscape/CraftPatrolState.h	/^	TextButton *_btnOk, *_btnRedirect;$/;"	m	class:OpenXcom::CraftPatrolState
_btnRegionTotal	Geoscape/GraphsState.h	/^	ToggleTextButton *_btnRegionTotal, *_btnCountryTotal;$/;"	m	class:OpenXcom::GraphsState
_btnRegions	Geoscape/GraphsState.h	/^	std::vector<ToggleTextButton *> _btnRegions, _btnCountries, _btnFinances;$/;"	m	class:OpenXcom::GraphsState
_btnRemoveAll	Basescape/CraftPilotsState.h	/^	TextButton *_btnOk, *_btnAdd, *_btnRemoveAll;$/;"	m	class:OpenXcom::CraftPilotsState
_btnReport	Geoscape/ResearchCompleteState.h	/^	TextButton *_btnReport, *_btnOk;$/;"	m	class:OpenXcom::ResearchCompleteState
_btnResearch	Basescape/BasescapeState.h	/^	TextButton *_btnNewBase, *_btnBaseInfo, *_btnSoldiers, *_btnCrafts, *_btnFacilities, *_btnResearch, *_btnManufacture, *_btnTransfer, *_btnPurchase, *_btnSell, *_btnGeoscape;$/;"	m	class:OpenXcom::BasescapeState
_btnResearch	Geoscape/NewPossibleResearchState.h	/^	TextButton *_btnResearch, *_btnOk;$/;"	m	class:OpenXcom::NewPossibleResearchState
_btnReserveAimed	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnReserveNone, *_btnReserveSnap, *_btnReserveAimed, *_btnReserveAuto, *_btnReserveKneel, *_btnZeroTUs;$/;"	m	class:OpenXcom::BattlescapeState
_btnReserveAuto	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnReserveNone, *_btnReserveSnap, *_btnReserveAimed, *_btnReserveAuto, *_btnReserveKneel, *_btnZeroTUs;$/;"	m	class:OpenXcom::BattlescapeState
_btnReserveKneel	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnReserveNone, *_btnReserveSnap, *_btnReserveAimed, *_btnReserveAuto, *_btnReserveKneel, *_btnZeroTUs;$/;"	m	class:OpenXcom::BattlescapeState
_btnReserveNone	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnReserveNone, *_btnReserveSnap, *_btnReserveAimed, *_btnReserveAuto, *_btnReserveKneel, *_btnZeroTUs;$/;"	m	class:OpenXcom::BattlescapeState
_btnReserveSnap	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnReserveNone, *_btnReserveSnap, *_btnReserveAimed, *_btnReserveAuto, *_btnReserveKneel, *_btnZeroTUs;$/;"	m	class:OpenXcom::BattlescapeState
_btnRightArrow	Basescape/SoldierTransformationState.h	/^	TextButton *_btnCancel, *_btnLeftArrow, *_btnRightArrow, *_btnStart;$/;"	m	class:OpenXcom::SoldierTransformationState
_btnRightHandItem	Battlescape/BattlescapeState.h	/^	InteractiveSurface *_btnLeftHandItem, *_btnRightHandItem;$/;"	m	class:OpenXcom::BattlescapeState
_btnRootWindowedMode	Menu/OptionsVideoState.h	/^	ToggleTextButton *_btnLetterbox, *_btnLockMouse, *_btnRootWindowedMode;$/;"	m	class:OpenXcom::OptionsVideoState
_btnRotateDown	Geoscape/BuildNewBaseState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::BuildNewBaseState
_btnRotateDown	Geoscape/GeoscapeState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::GeoscapeState
_btnRotateDown	Geoscape/SelectDestinationState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::SelectDestinationState
_btnRotateLeft	Geoscape/BuildNewBaseState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::BuildNewBaseState
_btnRotateLeft	Geoscape/GeoscapeState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::GeoscapeState
_btnRotateLeft	Geoscape/SelectDestinationState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::SelectDestinationState
_btnRotateRight	Geoscape/BuildNewBaseState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::BuildNewBaseState
_btnRotateRight	Geoscape/GeoscapeState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::GeoscapeState
_btnRotateRight	Geoscape/SelectDestinationState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::SelectDestinationState
_btnRotateUp	Geoscape/BuildNewBaseState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::BuildNewBaseState
_btnRotateUp	Geoscape/GeoscapeState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::GeoscapeState
_btnRotateUp	Geoscape/SelectDestinationState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::SelectDestinationState
_btnRun	Menu/TestState.h	/^	TextButton *_btnRun, *_btnCancel;$/;"	m	class:OpenXcom::TestState
_btnSack	Basescape/SoldierInfoState.h	/^	TextButton *_btnOk, *_btnPrev, *_btnNext, *_btnArmor, *_btnSack, *_btnDiary, *_btnBonuses;$/;"	m	class:OpenXcom::SoldierInfoState
_btnSave	Basescape/CraftEquipmentSaveState.h	/^	TextButton *_btnCancel, *_btnSave;$/;"	m	class:OpenXcom::CraftEquipmentSaveState
_btnSave	Battlescape/InventorySaveState.h	/^	TextButton *_btnCancel, *_btnSave, *_btnSaveWithArmor;$/;"	m	class:OpenXcom::InventorySaveState
_btnSave	Menu/NotesState.h	/^	TextButton* _btnSave;$/;"	m	class:OpenXcom::NotesState
_btnSave	Menu/PauseState.h	/^	TextButton *_btnLoad, *_btnSave, *_btnAbandon, *_btnOptions, *_btnCancel;$/;"	m	class:OpenXcom::PauseState
_btnSaveGame	Menu/ListSaveState.h	/^	TextButton *_btnSaveGame;$/;"	m	class:OpenXcom::ListSaveState
_btnSaveWithArmor	Battlescape/InventorySaveState.h	/^	TextButton *_btnCancel, *_btnSave, *_btnSaveWithArmor;$/;"	m	class:OpenXcom::InventorySaveState
_btnScrollDown	Ufopaedia/UfopaediaStartState.h	/^		ArrowButton *_btnScrollUp, *_btnScrollDown;$/;"	m	class:OpenXcom::UfopaediaStartState
_btnScrollUp	Ufopaedia/UfopaediaStartState.h	/^		ArrowButton *_btnScrollUp, *_btnScrollDown;$/;"	m	class:OpenXcom::UfopaediaStartState
_btnSections	Ufopaedia/UfopaediaStartState.h	/^		std::vector<TextButton*> _btnSections;$/;"	m	class:OpenXcom::UfopaediaStartState
_btnSell	Basescape/BasescapeState.h	/^	TextButton *_btnNewBase, *_btnBaseInfo, *_btnSoldiers, *_btnCrafts, *_btnFacilities, *_btnResearch, *_btnManufacture, *_btnTransfer, *_btnPurchase, *_btnSell, *_btnGeoscape;$/;"	m	class:OpenXcom::BasescapeState
_btnSell	Basescape/ManageAlienContainmentState.h	/^	TextButton *_btnOk, *_btnSell, *_btnCancel, *_btnTransfer, *_btnCleanup;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_btnSell	Basescape/ManufactureInfoState.h	/^	ToggleTextButton *_btnSell;$/;"	m	class:OpenXcom::ManufactureInfoState
_btnSell	Battlescape/DebriefingState.h	/^	TextButton *_btnOk, *_btnStats, *_btnSell, *_btnTransfer;$/;"	m	class:OpenXcom::DebriefingState
_btnShift	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnCtrl, *_btnAlt, *_btnShift, *_btnRMB, *_btnMMB;$/;"	m	class:OpenXcom::BattlescapeState
_btnShowAll	Basescape/ManufactureDependenciesTreeState.h	/^	TextButton *_btnOk, *_btnShowAll;$/;"	m	class:OpenXcom::ManufactureDependenciesTreeState
_btnShowFunds	Menu/OptionsGeoscapeState.h	/^	ToggleTextButton *_btnShowFunds;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_btnShowLayers	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnInventory, *_btnCenter, *_btnNextSoldier, *_btnNextStop, *_btnShowLayers, *_btnHelp;$/;"	m	class:OpenXcom::BattlescapeState
_btnShowMap	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnUnitUp, *_btnUnitDown, *_btnMapUp, *_btnMapDown, *_btnShowMap, *_btnKneel;$/;"	m	class:OpenXcom::BattlescapeState
_btnShowOnlyNew	Basescape/NewManufactureListState.h	/^	ToggleTextButton *_btnShowOnlyNew;$/;"	m	class:OpenXcom::NewManufactureListState
_btnShowOnlyNew	Basescape/NewResearchListState.h	/^	ToggleTextButton *_btnShowOnlyNew;$/;"	m	class:OpenXcom::NewResearchListState
_btnShowOnlyNew	Ufopaedia/UfopaediaSelectState.h	/^		ToggleTextButton *_btnShowOnlyNew;$/;"	m	class:OpenXcom::UfopaediaSelectState
_btnSkills	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnEndTurn, *_btnAbort, *_btnLaunch, *_btnPsi, *_btnSpecial, *_btnSkills, *_reserve;$/;"	m	class:OpenXcom::BattlescapeState
_btnSlot	Menu/ListLoadOriginalState.h	/^	TextButton *_btnSlot[SaveConverter::NUM_SAVES];$/;"	m	class:OpenXcom::ListLoadOriginalState
_btnSoldiers	Basescape/BasescapeState.h	/^	TextButton *_btnNewBase, *_btnBaseInfo, *_btnSoldiers, *_btnCrafts, *_btnFacilities, *_btnResearch, *_btnManufacture, *_btnTransfer, *_btnPurchase, *_btnSell, *_btnGeoscape;$/;"	m	class:OpenXcom::BasescapeState
_btnSpecial	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnEndTurn, *_btnAbort, *_btnLaunch, *_btnPsi, *_btnSpecial, *_btnSkills, *_reserve;$/;"	m	class:OpenXcom::BattlescapeState
_btnStandard	Geoscape/DogfightState.h	/^	ImageButton *_btnStandoff, *_btnCautious, *_btnStandard, *_btnAggressive, *_btnDisengage, *_btnUfo;$/;"	m	class:OpenXcom::DogfightState
_btnStandoff	Geoscape/DogfightState.h	/^	ImageButton *_btnStandoff, *_btnCautious, *_btnStandard, *_btnAggressive, *_btnDisengage, *_btnUfo;$/;"	m	class:OpenXcom::DogfightState
_btnStart	Basescape/ManufactureStartState.h	/^	TextButton *_btnCancel, *_btnStart;$/;"	m	class:OpenXcom::ManufactureStartState
_btnStart	Basescape/SoldierTransformationState.h	/^	TextButton *_btnCancel, *_btnLeftArrow, *_btnRightArrow, *_btnStart;$/;"	m	class:OpenXcom::SoldierTransformationState
_btnStart	Geoscape/BaseDefenseState.h	/^	TextButton *_btnStart, *_btnAbort;$/;"	m	class:OpenXcom::BaseDefenseState
_btnStatistics	Basescape/SoldierMemorialState.h	/^	TextButton *_btnOk, *_btnStatistics;$/;"	m	class:OpenXcom::SoldierMemorialState
_btnStats	Battlescape/BattlescapeState.h	/^	InteractiveSurface *_btnStats;$/;"	m	class:OpenXcom::BattlescapeState
_btnStats	Battlescape/DebriefingState.h	/^	TextButton *_btnOk, *_btnStats, *_btnSell, *_btnTransfer;$/;"	m	class:OpenXcom::DebriefingState
_btnStop	Basescape/ManufactureInfoState.h	/^	TextButton * _btnStop, * _btnOk;$/;"	m	class:OpenXcom::ManufactureInfoState
_btnStores	Basescape/BaseInfoState.h	/^	TextButton *_btnOk, *_btnTransfers, *_btnStores, *_btnMonthlyCosts;$/;"	m	class:OpenXcom::BaseInfoState
_btnSummary	Basescape/SoldierBonusState.h	/^	ToggleTextButton *_btnSummary;$/;"	m	class:OpenXcom::SoldierBonusState
_btnSummary	Geoscape/ProductionCompleteState.h	/^	TextButton *_btnOk, *_btnGotoBase, *_btnSummary;$/;"	m	class:OpenXcom::ProductionCompleteState
_btnSuperhuman	Menu/NewGameState.h	/^	TextButton *_btnBeginner, *_btnExperienced, *_btnVeteran, *_btnGenius, *_btnSuperhuman;$/;"	m	class:OpenXcom::NewGameState
_btnTarget	Geoscape/GeoscapeCraftState.h	/^	TextButton *_btnBase, *_btnTarget, *_btnPatrol, *_btnCancel;$/;"	m	class:OpenXcom::GeoscapeCraftState
_btnTargets	Geoscape/MultipleTargetsState.h	/^	std::vector<TextButton*> _btnTargets;$/;"	m	class:OpenXcom::MultipleTargetsState
_btnTechTree	Geoscape/ExtendedGeoscapeLinksState.h	/^	TextButton *_btnFunding, *_btnTechTree, *_btnGlobalResearch, *_btnGlobalProduction, *_btnUfoTracker, *_btnPilotExp, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_btnTerrain	Menu/NewBattleState.h	/^	TextButton *_btnMission, *_btnTerrain, *_btnAlienRace;$/;"	m	class:OpenXcom::NewBattleState
_btnTest	Geoscape/ExtendedGeoscapeLinksState.h	/^	TextButton *_btnTest;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_btnTooltips	Menu/OptionsBattlescapeState.h	/^	ToggleTextButton *_btnTooltips, *_btnDeaths;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_btnTouch	Battlescape/ExtendedBattlescapeLinksState.h	/^	TextButton *_btnTouch, *_btnNightVision, *_btnPersonalLights, *_btnBrightness, *_btnTurnDiary, *_btnBriefing, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_btnTraining	Basescape/SoldiersState.h	/^	TextButton *_btnOk, *_btnPsiTraining, *_btnTraining, *_btnMemorial;$/;"	m	class:OpenXcom::SoldiersState
_btnTransfer	Basescape/BasescapeState.h	/^	TextButton *_btnNewBase, *_btnBaseInfo, *_btnSoldiers, *_btnCrafts, *_btnFacilities, *_btnResearch, *_btnManufacture, *_btnTransfer, *_btnPurchase, *_btnSell, *_btnGeoscape;$/;"	m	class:OpenXcom::BasescapeState
_btnTransfer	Basescape/ManageAlienContainmentState.h	/^	TextButton *_btnOk, *_btnSell, *_btnCancel, *_btnTransfer, *_btnCleanup;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_btnTransfer	Basescape/SellState.h	/^	TextButton *_btnOk, *_btnCancel, *_btnTransfer;$/;"	m	class:OpenXcom::SellState
_btnTransfer	Battlescape/DebriefingState.h	/^	TextButton *_btnOk, *_btnStats, *_btnSell, *_btnTransfer;$/;"	m	class:OpenXcom::DebriefingState
_btnTransfer	Geoscape/ConfirmDestinationState.h	/^	TextButton *_btnOk, *_btnTransfer, *_btnCancel;$/;"	m	class:OpenXcom::ConfirmDestinationState
_btnTransfers	Basescape/BaseInfoState.h	/^	TextButton *_btnOk, *_btnTransfers, *_btnStores, *_btnMonthlyCosts;$/;"	m	class:OpenXcom::BaseInfoState
_btnTuCost	Menu/OptionsBattlescapeState.h	/^	ToggleTextButton *_btnArrows, *_btnTuCost, *_btnEnergyCost;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_btnTurnDiary	Battlescape/ExtendedBattlescapeLinksState.h	/^	TextButton *_btnTouch, *_btnNightVision, *_btnPersonalLights, *_btnBrightness, *_btnTurnDiary, *_btnBriefing, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_btnUfo	Geoscape/DogfightState.h	/^	ImageButton *_btnStandoff, *_btnCautious, *_btnStandard, *_btnAggressive, *_btnDisengage, *_btnUfo;$/;"	m	class:OpenXcom::DogfightState
_btnUfoCountry	Geoscape/GraphsState.h	/^	InteractiveSurface *_btnXcomCountry, *_btnUfoCountry;$/;"	m	class:OpenXcom::GraphsState
_btnUfoRegion	Geoscape/GraphsState.h	/^	InteractiveSurface *_btnXcomRegion, *_btnUfoRegion;$/;"	m	class:OpenXcom::GraphsState
_btnUfoTracker	Geoscape/ExtendedGeoscapeLinksState.h	/^	TextButton *_btnFunding, *_btnTechTree, *_btnGlobalResearch, *_btnGlobalProduction, *_btnUfoTracker, *_btnPilotExp, *_btnNotes, *_btnMusic;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_btnUfopaedia	Geoscape/GeoscapeState.h	/^	TextButton *_btnIntercept, *_btnBases, *_btnGraphs, *_btnUfopaedia, *_btnOptions, *_btnFunding;$/;"	m	class:OpenXcom::GeoscapeState
_btnUfopedia	Battlescape/ExtendedInventoryLinksState.h	/^	TextButton *_btnArmor, *_btnAvatar, *_btnEquipmentSave, *_btnEquipmentLoad, *_btnPersonalSave, *_btnPersonalLoad, *_btnNotes, *_btnUfopedia, *_btnAutoEquip;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_btnUnitDown	Basescape/ManufactureInfoState.h	/^	ArrowButton * _btnUnitUp, * _btnUnitDown, * _btnEngineerUp, * _btnEngineerDown;$/;"	m	class:OpenXcom::ManufactureInfoState
_btnUnitDown	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnUnitUp, *_btnUnitDown, *_btnMapUp, *_btnMapDown, *_btnShowMap, *_btnKneel;$/;"	m	class:OpenXcom::BattlescapeState
_btnUnitUp	Basescape/ManufactureInfoState.h	/^	ArrowButton * _btnUnitUp, * _btnUnitDown, * _btnEngineerUp, * _btnEngineerDown;$/;"	m	class:OpenXcom::ManufactureInfoState
_btnUnitUp	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnUnitUp, *_btnUnitDown, *_btnMapUp, *_btnMapDown, *_btnShowMap, *_btnKneel;$/;"	m	class:OpenXcom::BattlescapeState
_btnUnload	Battlescape/InventoryState.h	/^	BattlescapeButton *_btnOk, *_btnPrev, *_btnNext, *_btnUnload, *_btnGround, *_btnRank, *_btnArmor;$/;"	m	class:OpenXcom::InventoryState
_btnUpdate	Menu/MainMenuState.h	/^	TextButton *_btnNewGame, *_btnNewBattle, *_btnLoad, *_btnOptions, *_btnMods, *_btnQuit, *_btnUpdate;$/;"	m	class:OpenXcom::MainMenuState
_btnVeteran	Menu/NewGameState.h	/^	TextButton *_btnBeginner, *_btnExperienced, *_btnVeteran, *_btnGenius, *_btnSuperhuman;$/;"	m	class:OpenXcom::NewGameState
_btnVideo	Menu/OptionsBaseState.h	/^	TextButton *_btnVideo, *_btnAudio, *_btnControls, *_btnGeoscape, *_btnBattlescape, *_btnAdvanced, *_btnFolders;$/;"	m	class:OpenXcom::OptionsBaseState
_btnVisibleUnit	Battlescape/BattlescapeState.h	/^	InteractiveSurface *_btnVisibleUnit[VISIBLE_MAX];$/;"	m	class:OpenXcom::BattlescapeState
_btnW	Basescape/CraftInfoState.h	/^	TextButton *_btnOk, *_btnW[RuleCraft::WeaponMax], *_btnCrew, *_btnEquip, *_btnArmor, *_btnPilots, *_btnNewBattle;$/;"	m	class:OpenXcom::CraftInfoState
_btnXcomCountry	Geoscape/GraphsState.h	/^	InteractiveSurface *_btnXcomCountry, *_btnUfoCountry;$/;"	m	class:OpenXcom::GraphsState
_btnXcomRegion	Geoscape/GraphsState.h	/^	InteractiveSurface *_btnXcomRegion, *_btnUfoRegion;$/;"	m	class:OpenXcom::GraphsState
_btnYes	Geoscape/ConfirmCydoniaState.h	/^	TextButton *_btnNo, *_btnYes;$/;"	m	class:OpenXcom::ConfirmCydoniaState
_btnYes	Geoscape/ConfirmLandingState.h	/^	TextButton *_btnYes, *_btnNo;$/;"	m	class:OpenXcom::ConfirmLandingState
_btnYes	Menu/AbandonGameState.h	/^	TextButton *_btnYes, *_btnNo;$/;"	m	class:OpenXcom::AbandonGameState
_btnYes	Menu/ConfirmLoadState.h	/^	TextButton *_btnYes, *_btnNo;$/;"	m	class:OpenXcom::ConfirmLoadState
_btnYes	Menu/DeleteGameState.h	/^	TextButton *_btnNo, *_btnYes;$/;"	m	class:OpenXcom::DeleteGameState
_btnYes	Menu/ModConfirmExtendedState.h	/^		TextButton *_btnYes, *_btnNo;$/;"	m	class:OpenXcom::ModConfirmExtendedState
_btnYes	Menu/OptionsConfirmState.h	/^	TextButton *_btnYes, *_btnNo;$/;"	m	class:OpenXcom::OptionsConfirmState
_btnYes	Menu/OptionsDefaultsState.h	/^	TextButton *_btnYes, *_btnNo;$/;"	m	class:OpenXcom::OptionsDefaultsState
_btnZeroTUs	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnReserveNone, *_btnReserveSnap, *_btnReserveAimed, *_btnReserveAuto, *_btnReserveKneel, *_btnZeroTUs;$/;"	m	class:OpenXcom::BattlescapeState
_btnZoomIn	Geoscape/BuildNewBaseState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::BuildNewBaseState
_btnZoomIn	Geoscape/GeoscapeState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::GeoscapeState
_btnZoomIn	Geoscape/SelectDestinationState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::SelectDestinationState
_btnZoomOut	Geoscape/BuildNewBaseState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::BuildNewBaseState
_btnZoomOut	Geoscape/GeoscapeState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::GeoscapeState
_btnZoomOut	Geoscape/SelectDestinationState.h	/^	InteractiveSurface *_btnRotateLeft, *_btnRotateRight, *_btnRotateUp, *_btnRotateDown, *_btnZoomIn, *_btnZoomOut;$/;"	m	class:OpenXcom::SelectDestinationState
_buffer	Engine/Screen.h	/^	Surface::UniqueBufferPtr _buffer;$/;"	m	class:OpenXcom::Screen
_buffer	Engine/Surface.h	/^	Pixel* _buffer;$/;"	m	class:OpenXcom::SurfaceRaw
_bughuntLowMorale	Mod/Mod.h	/^	int _bughuntMinTurn, _bughuntMaxEnemies, _bughuntRank, _bughuntLowMorale, _bughuntTimeUnitsLeft;$/;"	m	class:OpenXcom::Mod
_bughuntMaxEnemies	Mod/Mod.h	/^	int _bughuntMinTurn, _bughuntMaxEnemies, _bughuntRank, _bughuntLowMorale, _bughuntTimeUnitsLeft;$/;"	m	class:OpenXcom::Mod
_bughuntMinTurn	Mod/AlienDeployment.h	/^	int _bughuntMinTurn;$/;"	m	class:OpenXcom::AlienDeployment
_bughuntMinTurn	Mod/Mod.h	/^	int _bughuntMinTurn, _bughuntMaxEnemies, _bughuntRank, _bughuntLowMorale, _bughuntTimeUnitsLeft;$/;"	m	class:OpenXcom::Mod
_bughuntMinTurn	Savegame/SavedBattleGame.h	/^	int _turn, _bughuntMinTurn;$/;"	m	class:OpenXcom::SavedBattleGame
_bughuntMode	Savegame/SavedBattleGame.h	/^	bool _debugMode, _bughuntMode;$/;"	m	class:OpenXcom::SavedBattleGame
_bughuntRank	Mod/Mod.h	/^	int _bughuntMinTurn, _bughuntMaxEnemies, _bughuntRank, _bughuntLowMorale, _bughuntTimeUnitsLeft;$/;"	m	class:OpenXcom::Mod
_bughuntTimeUnitsLeft	Mod/Mod.h	/^	int _bughuntMinTurn, _bughuntMaxEnemies, _bughuntRank, _bughuntLowMorale, _bughuntTimeUnitsLeft;$/;"	m	class:OpenXcom::Mod
_buildCost	Mod/RuleBaseFacility.h	/^	int _size, _buildCost, _refundValue, _buildTime, _monthlyCost;$/;"	m	class:OpenXcom::RuleBaseFacility
_buildCostItems	Mod/RuleBaseFacility.h	/^	std::map<std::string, std::pair<int, int> > _buildCostItems;$/;"	m	class:OpenXcom::RuleBaseFacility
_buildInfiltrationBaseCloseToTheCountry	Mod/Mod.h	/^	bool _allowCountriesToCancelAlienPact, _buildInfiltrationBaseCloseToTheCountry;$/;"	m	class:OpenXcom::Mod
_buildOverFacilities	Mod/RuleBaseFacility.h	/^	std::vector<const RuleBaseFacility*> _buildOverFacilities;$/;"	m	class:OpenXcom::RuleBaseFacility
_buildOverFacilitiesNames	Mod/RuleBaseFacility.h	/^	std::vector<std::string> _buildOverFacilitiesNames;$/;"	m	class:OpenXcom::RuleBaseFacility
_buildTime	Mod/RuleBaseFacility.h	/^	int _size, _buildCost, _refundValue, _buildTime, _monthlyCost;$/;"	m	class:OpenXcom::RuleBaseFacility
_buildTime	Savegame/BaseFacility.h	/^	int _x, _y, _buildTime;$/;"	m	class:OpenXcom::BaseFacility
_buildTimeReductionScaling	Mod/Mod.h	/^	int _buildTimeReductionScaling;$/;"	m	class:OpenXcom::Mod
_builtInWeapons	Mod/Armor.h	/^	std::vector<const RuleItem*> _builtInWeapons;$/;"	m	class:OpenXcom::Armor
_builtInWeapons	Mod/Unit.h	/^	std::vector<std::vector<const RuleItem*> > _builtInWeapons;$/;"	m	class:OpenXcom::Unit
_builtInWeaponsNames	Mod/Armor.h	/^	std::vector<std::string> _builtInWeaponsNames;$/;"	m	class:OpenXcom::Armor
_builtInWeaponsNames	Mod/Unit.h	/^	std::vector<std::vector<std::string> > _builtInWeaponsNames;$/;"	m	class:OpenXcom::Unit
_bulletSpeed	Mod/RuleItem.h	/^	int _listOrder, _maxRange, _minRange, _dropoff, _bulletSpeed, _explosionSpeed, _shotgunPellets;$/;"	m	class:OpenXcom::RuleItem
_bulletSprite	Battlescape/Projectile.h	/^	int _bulletSprite;$/;"	m	class:OpenXcom::Projectile
_bulletSprite	Mod/RuleItem.h	/^	int _handSprite, _bulletSprite;$/;"	m	class:OpenXcom::RuleItem
_burn	Battlescape/UnitSprite.h	/^	int _x, _y, _shade, _burn;$/;"	m	class:OpenXcom::UnitSprite
_burnIndicator	Battlescape/Inventory.h	/^	Surface *_stunIndicator, *_woundIndicator, *_burnIndicator, *_shockIndicator;$/;"	m	class:OpenXcom::Inventory
_burnIndicator	Battlescape/Map.h	/^	Surface *_stunIndicator, *_woundIndicator, *_burnIndicator, *_shockIndicator;$/;"	m	class:OpenXcom::Map
_butCountriesOffset	Geoscape/GraphsState.h	/^	size_t _butRegionsOffset, _butCountriesOffset;$/;"	m	class:OpenXcom::GraphsState
_butRegionsOffset	Geoscape/GraphsState.h	/^	size_t _butRegionsOffset, _butCountriesOffset;$/;"	m	class:OpenXcom::GraphsState
_button	Battlescape/PrimeGrenadeState.h	/^	InteractiveSurface *_button[24];$/;"	m	class:OpenXcom::PrimeGrenadeState
_button	Interface/ComboBox.h	/^	TextButton *_button;$/;"	m	class:OpenXcom::ComboBox
_button	Interface/Slider.h	/^	TextButton *_button;$/;"	m	class:OpenXcom::Slider
_buttonColor	Ufopaedia/ArticleStateArmor.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2;$/;"	m	class:OpenXcom::ArticleStateArmor
_buttonColor	Ufopaedia/ArticleStateCraftWeapon.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2;$/;"	m	class:OpenXcom::ArticleStateCraftWeapon
_buttonColor	Ufopaedia/ArticleStateItem.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateItem
_buttonColor	Ufopaedia/ArticleStateTFTD.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateTFTD
_buttonColor	Ufopaedia/ArticleStateText.h	/^		Uint8 _buttonColor, _titleColor, _textColor1, _textColor2;$/;"	m	class:OpenXcom::ArticleStateText
_buttonColor	Ufopaedia/ArticleStateTextImage.h	/^		Uint8 _buttonColor, _titleColor, _textColor1, _textColor2;$/;"	m	class:OpenXcom::ArticleStateTextImage
_buttonsPressed	Engine/InteractiveSurface.h	/^	Uint8 _buttonsPressed;$/;"	m	class:OpenXcom::InteractiveSurface
_cQty	Basescape/PurchaseState.h	/^	int _total, _pQty, _cQty;$/;"	m	class:OpenXcom::PurchaseState
_cQty	Basescape/TransferItemsState.h	/^	int _total, _pQty, _cQty, _aQty;$/;"	m	class:OpenXcom::TransferItemsState
_cache	Savegame/Tile.h	/^	TileCache _cache = { };$/;"	m	class:OpenXcom::Tile
_cacheActiveWeaponUfopediaArticleUnlocked	Battlescape/Map.h	/^	int _cacheActiveWeaponUfopediaArticleUnlocked; \/\/ -1 = unknown, 0 = locked, 1 = unlocked$/;"	m	class:OpenXcom::Map
_cacheCursorPosition	Battlescape/Map.h	/^	Position _cacheCursorPosition;$/;"	m	class:OpenXcom::Map
_cacheHasLOS	Battlescape/Map.h	/^	int _cacheHasLOS; \/\/ -1 = unknown, 0 = no LOS, 1 = has LOS$/;"	m	class:OpenXcom::Map
_cacheIsCtrlPressed	Battlescape/Map.h	/^	bool _cacheIsCtrlPressed;$/;"	m	class:OpenXcom::Map
_cacheLand	Geoscape/Globe.h	/^	std::list<Polygon*> _cacheLand;$/;"	m	class:OpenXcom::Globe
_cacheTile	Battlescape/TileEngine.h	/^	Tile *_cacheTile;$/;"	m	class:OpenXcom::TileEngine
_cacheTileBelow	Battlescape/TileEngine.h	/^	Tile *_cacheTileBelow;$/;"	m	class:OpenXcom::TileEngine
_cacheTilePos	Battlescape/TileEngine.h	/^	Position _cacheTilePos;$/;"	m	class:OpenXcom::TileEngine
_callsign	Savegame/Soldier.h	/^	std::string _callsign;$/;"	m	class:OpenXcom::Soldier
_camera	Battlescape/Map.h	/^	Camera *_camera;$/;"	m	class:OpenXcom::Map
_camera	Battlescape/MiniMapView.h	/^	Camera * _camera;$/;"	m	class:OpenXcom::MiniMapView
_camouflageAtDark	Mod/Armor.h	/^	int _camouflageAtDay, _camouflageAtDark, _antiCamouflageAtDay, _antiCamouflageAtDark, _heatVision, _psiVision, _psiCamouflage;$/;"	m	class:OpenXcom::Armor
_camouflageAtDay	Mod/Armor.h	/^	int _camouflageAtDay, _camouflageAtDark, _antiCamouflageAtDay, _antiCamouflageAtDark, _heatVision, _psiVision, _psiCamouflage;$/;"	m	class:OpenXcom::Armor
_canBeBuiltOver	Mod/RuleBaseFacility.h	/^	bool _canBeBuiltOver;$/;"	m	class:OpenXcom::RuleBaseFacility
_canBeMindControlled	Mod/Unit.h	/^	bool _canBeMindControlled;$/;"	m	class:OpenXcom::Unit
_canBeSkipped	Mod/MapScript.h	/^	bool _canBeSkipped, _markAsReinforcementsBlock;$/;"	m	class:OpenXcom::MapScript
_canPanic	Mod/Unit.h	/^	bool _canPanic;$/;"	m	class:OpenXcom::Unit
_canSurrender	Mod/Unit.h	/^	bool _canSurrender, _autoSurrender;$/;"	m	class:OpenXcom::Unit
_cancelPact	Savegame/Country.h	/^	bool _pact, _newPact, _cancelPact;$/;"	m	class:OpenXcom::Country
_cancelPactList	Geoscape/MonthlyReportState.h	/^	std::vector<std::string> _happyList, _sadList, _pactList, _cancelPactList;$/;"	m	class:OpenXcom::MonthlyReportState
_captions	Menu/SlideshowState.h	/^	std::vector<Text *>_captions;$/;"	m	class:OpenXcom::SlideshowState
_capturable	Mod/Unit.h	/^	bool _capturable;$/;"	m	class:OpenXcom::Unit
_capturable	Savegame/BattleUnit.h	/^	bool _capturable;$/;"	m	class:OpenXcom::BattleUnit
_caret	Interface/TextEdit.h	/^	Text *_text, *_caret;$/;"	m	class:OpenXcom::TextEdit
_caretPos	Interface/TextEdit.h	/^	size_t _caretPos;$/;"	m	class:OpenXcom::TextEdit
_cat	Engine/OptionInfo.h	/^	std::string _id, _desc, _cat;$/;"	m	class:OpenXcom::OptionInfo
_catFile	Mod/SoundDefinition.h	/^	std::string _catFile;$/;"	m	class:OpenXcom::SoundDefinition
_catPos	Mod/RuleMusic.h	/^	int _catPos;$/;"	m	class:OpenXcom::RuleMusic
_catStrings	Basescape/NewManufactureListState.h	/^	std::vector<std::string> _catStrings;$/;"	m	class:OpenXcom::NewManufactureListState
_categories	Mod/RuleItem.h	/^	std::vector<std::string> _categories;$/;"	m	class:OpenXcom::RuleItem
_category	Mod/RuleManufacture.h	/^	std::string _name, _category;$/;"	m	class:OpenXcom::RuleManufacture
_categoryStrings	Basescape/CraftEquipmentState.h	/^	std::vector<std::string> _categoryStrings;$/;"	m	class:OpenXcom::CraftEquipmentState
_cats	Basescape/PurchaseState.h	/^	std::vector<std::string> _cats;$/;"	m	class:OpenXcom::PurchaseState
_cats	Basescape/SellState.h	/^	std::vector<std::string> _cats;$/;"	m	class:OpenXcom::SellState
_cats	Basescape/TransferItemsState.h	/^	std::vector<std::string> _cats;$/;"	m	class:OpenXcom::TransferItemsState
_cats	Ufopaedia/UfopaediaStartState.h	/^		const std::vector<std::string> &_cats;$/;"	m	class:OpenXcom::UfopaediaStartState
_cause	Savegame/SoldierDeath.h	/^	BattleUnitKills *_cause;$/;"	m	class:OpenXcom::SoldierDeath
_cbxAlienRace	Menu/NewBattleState.h	/^	ComboBox *_cbxMission, *_cbxCraft, *_cbxTerrain, *_cbxDifficulty, *_cbxAlienRace;$/;"	m	class:OpenXcom::NewBattleState
_cbxArea	Geoscape/GeoscapeState.h	/^	ComboBox *_cbxRegion, *_cbxZone, *_cbxArea, *_cbxCountry;$/;"	m	class:OpenXcom::GeoscapeState
_cbxBattleScale	Menu/OptionsVideoState.h	/^	ComboBox *_cbxLanguage, *_cbxFilter, *_cbxDisplayMode, *_cbxGeoScale, *_cbxBattleScale;$/;"	m	class:OpenXcom::OptionsVideoState
_cbxCategory	Basescape/NewManufactureListState.h	/^	ComboBox *_cbxCategory;$/;"	m	class:OpenXcom::NewManufactureListState
_cbxCategory	Basescape/PurchaseState.h	/^	ComboBox *_cbxCategory;$/;"	m	class:OpenXcom::PurchaseState
_cbxCategory	Basescape/SellState.h	/^	ComboBox *_cbxCategory;$/;"	m	class:OpenXcom::SellState
_cbxCategory	Basescape/TransferItemsState.h	/^	ComboBox *_cbxCategory;$/;"	m	class:OpenXcom::TransferItemsState
_cbxCountry	Geoscape/GeoscapeState.h	/^	ComboBox *_cbxRegion, *_cbxZone, *_cbxArea, *_cbxCountry;$/;"	m	class:OpenXcom::GeoscapeState
_cbxCraft	Menu/NewBattleState.h	/^	ComboBox *_cbxMission, *_cbxCraft, *_cbxTerrain, *_cbxDifficulty, *_cbxAlienRace;$/;"	m	class:OpenXcom::NewBattleState
_cbxDifficulty	Menu/NewBattleState.h	/^	ComboBox *_cbxMission, *_cbxCraft, *_cbxTerrain, *_cbxDifficulty, *_cbxAlienRace;$/;"	m	class:OpenXcom::NewBattleState
_cbxDisplayMode	Menu/OptionsVideoState.h	/^	ComboBox *_cbxLanguage, *_cbxFilter, *_cbxDisplayMode, *_cbxGeoScale, *_cbxBattleScale;$/;"	m	class:OpenXcom::OptionsVideoState
_cbxDragScroll	Menu/OptionsBattlescapeState.h	/^	ComboBox *_cbxEdgeScroll, *_cbxDragScroll;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_cbxDragScroll	Menu/OptionsGeoscapeState.h	/^	ComboBox *_cbxDragScroll;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_cbxEdgeScroll	Menu/OptionsBattlescapeState.h	/^	ComboBox *_cbxEdgeScroll, *_cbxDragScroll;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_cbxFilter	Basescape/NewManufactureListState.h	/^	ComboBox *_cbxFilter;$/;"	m	class:OpenXcom::NewManufactureListState
_cbxFilter	Menu/OptionsVideoState.h	/^	ComboBox *_cbxLanguage, *_cbxFilter, *_cbxDisplayMode, *_cbxGeoScale, *_cbxBattleScale;$/;"	m	class:OpenXcom::OptionsVideoState
_cbxFilterBy	Basescape/CraftEquipmentState.h	/^	ComboBox *_cbxFilterBy;$/;"	m	class:OpenXcom::CraftEquipmentState
_cbxGeoScale	Menu/OptionsVideoState.h	/^	ComboBox *_cbxLanguage, *_cbxFilter, *_cbxDisplayMode, *_cbxGeoScale, *_cbxBattleScale;$/;"	m	class:OpenXcom::OptionsVideoState
_cbxLanguage	Menu/OptionsVideoState.h	/^	ComboBox *_cbxLanguage, *_cbxFilter, *_cbxDisplayMode, *_cbxGeoScale, *_cbxBattleScale;$/;"	m	class:OpenXcom::OptionsVideoState
_cbxMasters	Menu/ModListState.h	/^	ComboBox *_cbxMasters;$/;"	m	class:OpenXcom::ModListState
_cbxMission	Menu/NewBattleState.h	/^	ComboBox *_cbxMission, *_cbxCraft, *_cbxTerrain, *_cbxDifficulty, *_cbxAlienRace;$/;"	m	class:OpenXcom::NewBattleState
_cbxMusicFormat	Menu/OptionsAudioState.h	/^	ComboBox *_cbxMusicFormat, *_cbxSoundFormat, *_cbxVideoFormat;$/;"	m	class:OpenXcom::OptionsAudioState
_cbxPalette	Menu/TestState.h	/^	ComboBox *_cbxPalette;$/;"	m	class:OpenXcom::TestState
_cbxPaletteAction	Menu/TestState.h	/^	ComboBox *_cbxPaletteAction;$/;"	m	class:OpenXcom::TestState
_cbxRegion	Geoscape/GeoscapeState.h	/^	ComboBox *_cbxRegion, *_cbxZone, *_cbxArea, *_cbxCountry;$/;"	m	class:OpenXcom::GeoscapeState
_cbxRelatedStuff	Ufopaedia/StatsForNerdsState.h	/^	ComboBox *_cbxRelatedStuff;$/;"	m	class:OpenXcom::StatsForNerdsState
_cbxScreenActions	Basescape/SoldiersState.h	/^	ComboBox *_cbxSortBy, *_cbxScreenActions;$/;"	m	class:OpenXcom::SoldiersState
_cbxSoldierStatus	Basescape/SoldierTransformationListState.h	/^	ComboBox* _cbxSoldierType, * _cbxSoldierStatus;$/;"	m	class:OpenXcom::SoldierTransformationListState
_cbxSoldierType	Basescape/SoldierTransformationListState.h	/^	ComboBox* _cbxSoldierType, * _cbxSoldierStatus;$/;"	m	class:OpenXcom::SoldierTransformationListState
_cbxSort	Basescape/NewResearchListState.h	/^	ComboBox *_cbxSort;$/;"	m	class:OpenXcom::NewResearchListState
_cbxSortBy	Basescape/CraftArmorState.h	/^	ComboBox *_cbxSortBy;$/;"	m	class:OpenXcom::CraftArmorState
_cbxSortBy	Basescape/CraftSoldiersState.h	/^	ComboBox *_cbxSortBy;$/;"	m	class:OpenXcom::CraftSoldiersState
_cbxSortBy	Basescape/SoldiersState.h	/^	ComboBox *_cbxSortBy, *_cbxScreenActions;$/;"	m	class:OpenXcom::SoldiersState
_cbxSortBy	Geoscape/AllocatePsiTrainingState.h	/^	ComboBox *_cbxSortBy;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_cbxSortBy	Geoscape/AllocateTrainingState.h	/^	ComboBox *_cbxSortBy;$/;"	m	class:OpenXcom::AllocateTrainingState
_cbxSoundFormat	Menu/OptionsAudioState.h	/^	ComboBox *_cbxMusicFormat, *_cbxSoundFormat, *_cbxVideoFormat;$/;"	m	class:OpenXcom::OptionsAudioState
_cbxTerrain	Menu/NewBattleState.h	/^	ComboBox *_cbxMission, *_cbxCraft, *_cbxTerrain, *_cbxDifficulty, *_cbxAlienRace;$/;"	m	class:OpenXcom::NewBattleState
_cbxTestCase	Menu/TestState.h	/^	ComboBox *_cbxTestCase;$/;"	m	class:OpenXcom::TestState
_cbxVideoFormat	Menu/OptionsAudioState.h	/^	ComboBox *_cbxMusicFormat, *_cbxSoundFormat, *_cbxVideoFormat;$/;"	m	class:OpenXcom::OptionsAudioState
_cbxZone	Geoscape/GeoscapeState.h	/^	ComboBox *_cbxRegion, *_cbxZone, *_cbxArea, *_cbxCountry;$/;"	m	class:OpenXcom::GeoscapeState
_cellColor	Basescape/BaseView.h	/^	Uint8 _cellColor, _selectorColor;$/;"	m	class:OpenXcom::BaseView
_cenLat	Geoscape/Globe.h	/^	double _cenLon, _cenLat, _rotLon, _rotLat, _hoverLon, _hoverLat;$/;"	m	class:OpenXcom::Globe
_cenLon	Geoscape/Globe.h	/^	double _cenLon, _cenLat, _rotLon, _rotLat, _hoverLon, _hoverLat;$/;"	m	class:OpenXcom::Globe
_cenX	Geoscape/Globe.h	/^	Sint16 _cenX, _cenY;$/;"	m	class:OpenXcom::Globe
_cenY	Geoscape/Globe.h	/^	Sint16 _cenX, _cenY;$/;"	m	class:OpenXcom::Globe
_center	Battlescape/Camera.h	/^	Position _mapOffset, _center;$/;"	m	class:OpenXcom::Camera
_center	Battlescape/ExplosionBState.h	/^	Position _center;$/;"	m	class:OpenXcom::ExplosionBState
_chanceToStopRetaliation	Mod/Mod.h	/^	int _chanceToStopRetaliation;$/;"	m	class:OpenXcom::Mod
_change	Interface/ComboBox.h	/^	ActionHandler _change;$/;"	m	class:OpenXcom::ComboBox
_change	Interface/Slider.h	/^	ActionHandler _change;$/;"	m	class:OpenXcom::Slider
_change	Interface/TextEdit.h	/^	ActionHandler _change;$/;"	m	class:OpenXcom::TextEdit
_char	Interface/TextEdit.h	/^	UCode _char;$/;"	m	class:OpenXcom::TextEdit
_chargeTUs	Battlescape/UnitTurnBState.h	/^	bool _turret, _chargeTUs;$/;"	m	class:OpenXcom::UnitTurnBState
_charging	Savegame/BattleUnit.h	/^	BattleUnit *_charging;$/;"	m	class:OpenXcom::BattleUnit
_chars	Engine/Font.h	/^	std::unordered_map< UCode, std::pair<size_t, SDL_Rect> > _chars;$/;"	m	class:OpenXcom::Font
_chars	Interface/NumberText.h	/^	Surface *_chars[10];$/;"	m	class:OpenXcom::NumberText
_cheatTurn	Mod/AlienDeployment.h	/^	int _objectiveType, _objectivesRequired, _objectiveCompleteScore, _objectiveFailedScore, _despawnPenalty, _abortPenalty, _points, _turnLimit, _cheatTurn;$/;"	m	class:OpenXcom::AlienDeployment
_cheatTurn	Savegame/SavedBattleGame.h	/^	int _turnLimit, _cheatTurn;$/;"	m	class:OpenXcom::SavedBattleGame
_cheating	Savegame/SavedBattleGame.h	/^	bool _unitsFalling, _cheating;$/;"	m	class:OpenXcom::SavedBattleGame
_checkHandsOnly	Mod/RuleSkill.h	/^	bool _checkHandsOnly;$/;"	m	class:OpenXcom::RuleSkill
_checked	Battlescape/PathfindingNode.h	/^	bool _checked;$/;"	m	class:OpenXcom::PathfindingNode
_choices	Savegame/WeightedOptions.h	/^	std::map<std::string, size_t> _choices; \/\/!< Options and weights$/;"	m	class:OpenXcom::WeightedOptions
_chronoTrigger	Mod/AlienDeployment.h	/^	ChronoTrigger _chronoTrigger;$/;"	m	class:OpenXcom::AlienDeployment
_chronoTrigger	Savegame/SavedBattleGame.h	/^	ChronoTrigger _chronoTrigger;$/;"	m	class:OpenXcom::SavedBattleGame
_chunkData	Engine/FlcPlayer.h	/^	Uint8 *_chunkData;$/;"	m	class:OpenXcom::FlcPlayer
_chunkSize	Engine/FlcPlayer.h	/^	Uint32 _chunkSize;     \/* Size of chunk *\/$/;"	m	class:OpenXcom::FlcPlayer
_chunkType	Engine/FlcPlayer.h	/^	Uint16 _chunkType;     \/* Type of chunk *\/$/;"	m	class:OpenXcom::FlcPlayer
_cities	Mod/RuleRegion.h	/^	std::vector<City*> _cities;$/;"	m	class:OpenXcom::RuleRegion
_city	Mod/RuleEvent.h	/^	bool _city;$/;"	m	class:OpenXcom::RuleEvent
_city	Savegame/MissionSite.h	/^	std::string _race, _city;$/;"	m	class:OpenXcom::MissionSite
_civilianRecoveryType	Mod/Unit.h	/^	std::string _civilianRecoveryType, _spawnedPersonName, _liveAlienName;$/;"	m	class:OpenXcom::Unit
_civilianSpawnNodeRank	Mod/AlienDeployment.h	/^	int _civilianSpawnNodeRank;$/;"	m	class:OpenXcom::AlienDeployment
_civilianTypes	Mod/RuleTerrain.h	/^	std::vector<std::string> _civilianTypes, _music;$/;"	m	class:OpenXcom::RuleTerrain
_civilians	Mod/AlienDeployment.h	/^	int _width, _length, _height, _civilians;$/;"	m	class:OpenXcom::AlienDeployment
_civiliansByType	Mod/AlienDeployment.h	/^	std::map<std::string, int> _civiliansByType;$/;"	m	class:OpenXcom::AlienDeployment
_cjk	Engine/Language.cpp	/^std::vector<std::string> Language::_rtl, Language::_cjk;$/;"	m	class:OpenXcom::Language	file:
_cjk	Engine/Language.h	/^	static std::vector<std::string> _rtl, _cjk;$/;"	m	class:OpenXcom::Language
_clang_auto_hack	Engine/ScriptBind.h	/^static constexpr decltype(T) _clang_auto_hack()$/;"	f	namespace:OpenXcom
_clearInventoryTemplate	Battlescape/InventoryState.cpp	/^static void _clearInventoryTemplate(std::vector<EquipmentLayoutItem*> &inventoryTemplate)$/;"	f	namespace:OpenXcom
_click	Engine/InteractiveSurface.h	/^	std::map<Uint8, ActionHandler> _click, _press, _release;$/;"	m	class:OpenXcom::InteractiveSurface
_clip	Mod/RuleCraftWeapon.h	/^	const RuleItem* _clip;$/;"	m	class:OpenXcom::RuleCraftWeapon
_clipName	Mod/RuleCraftWeapon.h	/^	std::string _launcherName, _clipName;$/;"	m	class:OpenXcom::RuleCraftWeapon
_clipSize	Mod/RuleItem.h	/^	int _clipSize, _specialChance, _tuLoad[AmmoSlotMax], _tuUnload[AmmoSlotMax];$/;"	m	class:OpenXcom::RuleItem
_clipper	Geoscape/Globe.h	/^	FastLineClip *_clipper;$/;"	m	class:OpenXcom::Globe
_closeQuartersAccuracyGlobal	Mod/Mod.h	/^	int _enableCloseQuartersCombat, _closeQuartersAccuracyGlobal, _closeQuartersTuCostGlobal, _closeQuartersEnergyCostGlobal, _closeQuartersSneakUpGlobal;$/;"	m	class:OpenXcom::Mod
_closeQuartersEnergyCostGlobal	Mod/Mod.h	/^	int _enableCloseQuartersCombat, _closeQuartersAccuracyGlobal, _closeQuartersTuCostGlobal, _closeQuartersEnergyCostGlobal, _closeQuartersSneakUpGlobal;$/;"	m	class:OpenXcom::Mod
_closeQuartersMulti	Mod/RuleItem.h	/^	RuleStatBonus _damageBonus, _meleeBonus, _accuracyMulti, _meleeMulti, _throwMulti, _closeQuartersMulti;$/;"	m	class:OpenXcom::RuleItem
_closeQuartersSneakUpGlobal	Mod/Mod.h	/^	int _enableCloseQuartersCombat, _closeQuartersAccuracyGlobal, _closeQuartersTuCostGlobal, _closeQuartersEnergyCostGlobal, _closeQuartersSneakUpGlobal;$/;"	m	class:OpenXcom::Mod
_closeQuartersTuCostGlobal	Mod/Mod.h	/^	int _enableCloseQuartersCombat, _closeQuartersAccuracyGlobal, _closeQuartersTuCostGlobal, _closeQuartersEnergyCostGlobal, _closeQuartersSneakUpGlobal;$/;"	m	class:OpenXcom::Mod
_closestDist	Battlescape/AIModule.h	/^	int _AIMode, _intelligence, _closestDist;$/;"	m	class:OpenXcom::AIModule
_color	Battlescape/Particle.h	/^	Uint8 _color, _opacity, _size;$/;"	m	class:OpenXcom::Particle
_color	Battlescape/WarningMessage.h	/^	Uint8 _color, _fade;$/;"	m	class:OpenXcom::WarningMessage
_color	Geoscape/GraphsState.cpp	/^	int _color;$/;"	m	struct:OpenXcom::GraphButInfo	file:
_color	Interface/Bar.h	/^	Uint8 _color, _color2, _borderColor;$/;"	m	class:OpenXcom::Bar
_color	Interface/BattlescapeButton.h	/^	Uint8 _color;$/;"	m	class:OpenXcom::BattlescapeButton
_color	Interface/ComboBox.h	/^	Uint8 _color;$/;"	m	class:OpenXcom::ComboBox
_color	Interface/Cursor.h	/^	Uint8 _color;$/;"	m	class:OpenXcom::Cursor
_color	Interface/Frame.h	/^	Uint8 _color, _bg;$/;"	m	class:OpenXcom::Frame
_color	Interface/ImageButton.h	/^	Uint8 _color;$/;"	m	class:OpenXcom::ImageButton
_color	Interface/NumberText.h	/^	Uint8 _color;$/;"	m	class:OpenXcom::NumberText
_color	Interface/ScrollBar.h	/^	Uint8 _color;$/;"	m	class:OpenXcom::ScrollBar
_color	Interface/Text.h	/^	Uint8 _color, _color2;$/;"	m	class:OpenXcom::Text
_color	Interface/TextButton.h	/^	Uint8 _color;$/;"	m	class:OpenXcom::TextButton
_color	Interface/TextList.h	/^	Uint8 _color, _color2;$/;"	m	class:OpenXcom::TextList
_color	Interface/Window.h	/^	Uint8 _color;$/;"	m	class:OpenXcom::Window
_color2	Interface/Bar.h	/^	Uint8 _color, _color2, _borderColor;$/;"	m	class:OpenXcom::Bar
_color2	Interface/Text.h	/^	Uint8 _color, _color2;$/;"	m	class:OpenXcom::Text
_color2	Interface/TextList.h	/^	Uint8 _color, _color2;$/;"	m	class:OpenXcom::TextList
_colorFacilityRequired	Basescape/NewManufactureListState.h	/^	Uint8 _colorHidden, _colorFacilityRequired;$/;"	m	class:OpenXcom::NewManufactureListState
_colorGroup	Menu/OptionsAdvancedState.h	/^	Uint8 _colorGroup, _greyedOutColor;$/;"	m	class:OpenXcom::OptionsAdvancedState
_colorGroup	Menu/OptionsControlsState.h	/^	Uint8 _colorGroup, _colorSel, _colorNormal;$/;"	m	class:OpenXcom::OptionsControlsState
_colorHidden	Basescape/NewManufactureListState.h	/^	Uint8 _colorHidden, _colorFacilityRequired;$/;"	m	class:OpenXcom::NewManufactureListState
_colorNew	Basescape/NewManufactureListState.h	/^	Uint8 _colorNormal, _colorNew;$/;"	m	class:OpenXcom::NewManufactureListState
_colorNew	Basescape/NewResearchListState.h	/^	Uint8 _colorNormal, _colorNew;$/;"	m	class:OpenXcom::NewResearchListState
_colorNew	Ufopaedia/UfopaediaSelectState.h	/^		Uint8 _colorNormal, _colorNew;$/;"	m	class:OpenXcom::UfopaediaSelectState
_colorNormal	Basescape/NewManufactureListState.h	/^	Uint8 _colorNormal, _colorNew;$/;"	m	class:OpenXcom::NewManufactureListState
_colorNormal	Basescape/NewResearchListState.h	/^	Uint8 _colorNormal, _colorNew;$/;"	m	class:OpenXcom::NewResearchListState
_colorNormal	Menu/OptionsControlsState.h	/^	Uint8 _colorGroup, _colorSel, _colorNormal;$/;"	m	class:OpenXcom::OptionsControlsState
_colorNormal	Ufopaedia/UfopaediaSelectState.h	/^		Uint8 _colorNormal, _colorNew;$/;"	m	class:OpenXcom::UfopaediaSelectState
_colorSel	Menu/OptionsControlsState.h	/^	Uint8 _colorGroup, _colorSel, _colorNormal;$/;"	m	class:OpenXcom::OptionsControlsState
_colors	Engine/FlcPlayer.h	/^	SDL_Color _colors[256];$/;"	m	class:OpenXcom::FlcPlayer
_colors	Engine/Palette.h	/^	SDL_Color *_colors;$/;"	m	class:OpenXcom::Palette
_colors	Geoscape/DogfightState.h	/^	int _colors[13];$/;"	m	class:OpenXcom::DogfightState
_columns	Interface/TextList.h	/^	std::vector<size_t> _columns, _rows;$/;"	m	class:OpenXcom::TextList
_comboBox	Interface/TextButton.h	/^	ComboBox *_comboBox;$/;"	m	class:OpenXcom::TextButton
_comboBox	Interface/TextList.h	/^	ComboBox *_comboBox;$/;"	m	class:OpenXcom::TextList
_commandLine	Engine/Options.cpp	/^std::map<std::string, std::string> _commandLine;$/;"	m	namespace:OpenXcom::Options	file:
_commendationDecorations	Basescape/SoldierDiaryPerformanceState.h	/^	std::vector<Surface*> _commendations, _commendationDecorations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_commendations	Basescape/SoldierDiaryPerformanceState.h	/^	std::vector<Surface*> _commendations, _commendationDecorations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_commendations	Mod/Mod.h	/^	std::map<std::string, RuleCommendations *> _commendations;$/;"	m	class:OpenXcom::Mod
_commendations	Savegame/SoldierDiary.h	/^	std::vector<SoldierCommendations*> _commendations;$/;"	m	class:OpenXcom::SoldierDiary
_commendationsListEntry	Basescape/SoldierDiaryPerformanceState.h	/^	std::vector<std::string> _commendationsListEntry;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_commendationsNames	Basescape/SoldierDiaryPerformanceState.h	/^	std::vector<std::string> _commendationsNames;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_commendationsNames	Battlescape/CommendationLateState.h	/^	std::vector<std::string> _commendationsNames;$/;"	m	class:OpenXcom::CommendationLateState
_commendationsNames	Battlescape/CommendationState.h	/^	std::vector<std::string> _commendationsNames;$/;"	m	class:OpenXcom::CommendationState
_compatibleAmmo	Mod/RuleItem.h	/^	std::vector<const RuleItem*> _compatibleAmmo[AmmoSlotMax];$/;"	m	class:OpenXcom::RuleItem
_compatibleAmmoNames	Mod/RuleItem.h	/^	std::vector<std::vector<std::string>> _compatibleAmmoNames = std::vector<std::vector<std::string>>(AmmoSlotMax);$/;"	m	class:OpenXcom::RuleItem
_compatibleAmmoSlots	Mod/RuleItem.h	/^	std::unordered_map<const RuleItem*, int> _compatibleAmmoSlots;$/;"	m	class:OpenXcom::RuleItem
_compatibleBattleType	Mod/RuleSkill.h	/^	BattleType _compatibleBattleType;$/;"	m	class:OpenXcom::RuleSkill
_compatibleWeaponNames	Mod/RuleSkill.h	/^	std::vector<std::string> _compatibleWeaponNames;$/;"	m	class:OpenXcom::RuleSkill
_compatibleWeapons	Mod/RuleSkill.h	/^	std::vector<const RuleItem*> _compatibleWeapons;$/;"	m	class:OpenXcom::RuleSkill
_compliantBlocksList	Battlescape/NextTurnState.h	/^	std::vector<Position> _compliantBlocksList;$/;"	m	class:OpenXcom::NextTurnState
_compliantBlocksMap	Battlescape/NextTurnState.h	/^	std::vector< std::vector<int> > _compliantBlocksMap;$/;"	m	class:OpenXcom::NextTurnState
_compliantNodesList	Battlescape/NextTurnState.h	/^	std::vector<Node*> _compliantNodesList;$/;"	m	class:OpenXcom::NextTurnState
_condensed	Interface/TextList.h	/^	bool _dot, _selectable, _condensed, _contrast, _wrap, _flooding, _ignoreSeparators;$/;"	m	class:OpenXcom::TextList
_conditionName	Mod/StatStringCondition.h	/^	std::string _conditionName;$/;"	m	class:OpenXcom::StatStringCondition
_conditionals	Mod/MapScript.h	/^	std::vector<int> _groups, _blocks, _frequencies, _maxUses, _conditionals;$/;"	m	class:OpenXcom::MapScript
_conditionals	Mod/RuleMissionScript.h	/^	std::vector<int> _conditionals;$/;"	m	class:OpenXcom::RuleMissionScript
_conditions	Mod/StatString.h	/^	std::vector<StatStringCondition*> _conditions;$/;"	m	class:OpenXcom::StatString
_confAimed	Mod/RuleItem.h	/^	RuleItemAction _confAimed, _confAuto, _confSnap, _confMelee;$/;"	m	class:OpenXcom::RuleItem
_confAimedOrLaunch	Savegame/BattleItem.h	/^	const RuleItemAction *_confAimedOrLaunch = nullptr;$/;"	m	class:OpenXcom::BattleItem
_confAuto	Mod/RuleItem.h	/^	RuleItemAction _confAimed, _confAuto, _confSnap, _confMelee;$/;"	m	class:OpenXcom::RuleItem
_confAuto	Savegame/BattleItem.h	/^	const RuleItemAction *_confAuto = nullptr;$/;"	m	class:OpenXcom::BattleItem
_confMelee	Mod/RuleItem.h	/^	RuleItemAction _confAimed, _confAuto, _confSnap, _confMelee;$/;"	m	class:OpenXcom::RuleItem
_confMelee	Savegame/BattleItem.h	/^	const RuleItemAction *_confMelee = nullptr;$/;"	m	class:OpenXcom::BattleItem
_confSnap	Mod/RuleItem.h	/^	RuleItemAction _confAimed, _confAuto, _confSnap, _confMelee;$/;"	m	class:OpenXcom::RuleItem
_confSnap	Savegame/BattleItem.h	/^	const RuleItemAction *_confSnap = nullptr;$/;"	m	class:OpenXcom::BattleItem
_configFolder	Engine/Options.cpp	/^std::string _configFolder;$/;"	m	namespace:OpenXcom::Options	file:
_connectorsDisabled	Mod/RuleBaseFacility.h	/^	bool _connectorsDisabled;$/;"	m	class:OpenXcom::RuleBaseFacility
_constantAnimation	Mod/Armor.h	/^	bool _constantAnimation, _hasInventory;$/;"	m	class:OpenXcom::Armor
_container	Mod/RuleStatBonus.h	/^	ModScript::BonusStatsCommon::Container _container;$/;"	m	class:OpenXcom::RuleStatBonus
_containmentStateInfo	Battlescape/DebriefingState.h	/^	std::map<int, int>  _containmentStateInfo;$/;"	m	class:OpenXcom::DebriefingState
_contrast	Interface/Frame.h	/^	bool _contrast;$/;"	m	class:OpenXcom::Frame
_contrast	Interface/ScrollBar.h	/^	bool _pressed, _contrast;$/;"	m	class:OpenXcom::ScrollBar
_contrast	Interface/Text.h	/^	bool _wrap, _invert, _contrast, _indent, _scroll, _ignoreSeparators;$/;"	m	class:OpenXcom::Text
_contrast	Interface/TextButton.h	/^	bool _contrast, _geoscapeButton;$/;"	m	class:OpenXcom::TextButton
_contrast	Interface/TextList.h	/^	bool _dot, _selectable, _condensed, _contrast, _wrap, _flooding, _ignoreSeparators;$/;"	m	class:OpenXcom::TextList
_contrast	Interface/Window.h	/^	bool _contrast, _screen, _thinBorder;$/;"	m	class:OpenXcom::Window
_controlsBattle	Menu/OptionsControlsState.h	/^	std::vector<OptionInfo> _controlsGeneral, _controlsGeo, _controlsBattle, _controlsOxce;$/;"	m	class:OpenXcom::OptionsControlsState
_controlsGeneral	Menu/OptionsControlsState.h	/^	std::vector<OptionInfo> _controlsGeneral, _controlsGeo, _controlsBattle, _controlsOxce;$/;"	m	class:OpenXcom::OptionsControlsState
_controlsGeo	Menu/OptionsControlsState.h	/^	std::vector<OptionInfo> _controlsGeneral, _controlsGeo, _controlsBattle, _controlsOxce;$/;"	m	class:OpenXcom::OptionsControlsState
_controlsOxce	Menu/OptionsControlsState.h	/^	std::vector<OptionInfo> _controlsGeneral, _controlsGeo, _controlsBattle, _controlsOxce;$/;"	m	class:OpenXcom::OptionsControlsState
_converter	Mod/Mod.h	/^	RuleConverter *_converter;$/;"	m	class:OpenXcom::Mod
_corpseBattle	Mod/Armor.h	/^	std::vector<const RuleItem*> _corpseBattle;$/;"	m	class:OpenXcom::Armor
_corpseBattleNames	Mod/Armor.h	/^	std::vector<std::string> _corpseBattleNames;$/;"	m	class:OpenXcom::Armor
_corpseGeo	Mod/Armor.h	/^	const RuleItem* _corpseGeo = nullptr;$/;"	m	class:OpenXcom::Armor
_corpseGeoName	Mod/Armor.h	/^	std::string _type, _spriteSheet, _spriteInv, _corpseGeoName, _storeItemName, _specWeaponName;$/;"	m	class:OpenXcom::Armor
_corpseRecovered	Savegame/Soldier.h	/^	bool _corpseRecovered;$/;"	m	class:OpenXcom::Soldier
_cosmetic	Mod/Unit.h	/^	bool _cosmetic, _ignoredByAI;$/;"	m	class:OpenXcom::Unit
_cost	Battlescape/PathfindingOpenSet.h	/^	Sint16 _cost;$/;"	m	struct:OpenXcom::OpenSetEntry
_cost	Geoscape/ConfirmNewBaseState.h	/^	int _cost;$/;"	m	class:OpenXcom::ConfirmNewBaseState
_cost	Mod/RuleManufacture.h	/^	int _space, _time, _cost;$/;"	m	class:OpenXcom::RuleManufacture
_cost	Mod/RuleRegion.h	/^	int _cost;$/;"	m	class:OpenXcom::RuleRegion
_cost	Mod/RuleResearch.h	/^	int _cost, _points;$/;"	m	class:OpenXcom::RuleResearch
_cost	Mod/RuleSkill.h	/^	RuleItemUseCost _cost;$/;"	m	class:OpenXcom::RuleSkill
_cost	Mod/RuleSoldierTransformation.h	/^	int _listOrder, _cost, _transferTime, _recoveryTime;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_cost	Savegame/ResearchProject.h	/^	int _cost;$/;"	m	class:OpenXcom::ResearchProject
_costBuy	Mod/RuleCraft.h	/^	int _costBuy, _costRent, _costSell;$/;"	m	class:OpenXcom::RuleCraft
_costBuy	Mod/RuleItem.h	/^	int _costBuy, _costSell, _transferTime, _weight;$/;"	m	class:OpenXcom::RuleItem
_costBuy	Mod/RuleSoldier.h	/^	int _costBuy, _costSalary, _costSalarySquaddie, _costSalarySergeant, _costSalaryCaptain, _costSalaryColonel, _costSalaryCommander;$/;"	m	class:OpenXcom::RuleSoldier
_costEngineer	Mod/Mod.h	/^	int _costEngineer, _costScientist, _timePersonnel, _hireByCountryOdds, _hireByRegionOdds, _initialFunding;$/;"	m	class:OpenXcom::Mod
_costHireEngineer	Mod/Mod.h	/^	int _costHireEngineer, _costHireScientist;$/;"	m	class:OpenXcom::Mod
_costHireScientist	Mod/Mod.h	/^	int _costHireEngineer, _costHireScientist;$/;"	m	class:OpenXcom::Mod
_costMind	Mod/RuleItem.h	/^	RuleItemUseCost _costUse, _costMind, _costPanic, _costThrow, _costPrime, _costUnprime;$/;"	m	class:OpenXcom::RuleItem
_costPanic	Mod/RuleItem.h	/^	RuleItemUseCost _costUse, _costMind, _costPanic, _costThrow, _costPrime, _costUnprime;$/;"	m	class:OpenXcom::RuleItem
_costPrime	Mod/RuleItem.h	/^	RuleItemUseCost _costUse, _costMind, _costPanic, _costThrow, _costPrime, _costUnprime;$/;"	m	class:OpenXcom::RuleItem
_costRent	Mod/RuleCraft.h	/^	int _costBuy, _costRent, _costSell;$/;"	m	class:OpenXcom::RuleCraft
_costSalary	Mod/RuleSoldier.h	/^	int _costBuy, _costSalary, _costSalarySquaddie, _costSalarySergeant, _costSalaryCaptain, _costSalaryColonel, _costSalaryCommander;$/;"	m	class:OpenXcom::RuleSoldier
_costSalaryCaptain	Mod/RuleSoldier.h	/^	int _costBuy, _costSalary, _costSalarySquaddie, _costSalarySergeant, _costSalaryCaptain, _costSalaryColonel, _costSalaryCommander;$/;"	m	class:OpenXcom::RuleSoldier
_costSalaryColonel	Mod/RuleSoldier.h	/^	int _costBuy, _costSalary, _costSalarySquaddie, _costSalarySergeant, _costSalaryCaptain, _costSalaryColonel, _costSalaryCommander;$/;"	m	class:OpenXcom::RuleSoldier
_costSalaryCommander	Mod/RuleSoldier.h	/^	int _costBuy, _costSalary, _costSalarySquaddie, _costSalarySergeant, _costSalaryCaptain, _costSalaryColonel, _costSalaryCommander;$/;"	m	class:OpenXcom::RuleSoldier
_costSalarySergeant	Mod/RuleSoldier.h	/^	int _costBuy, _costSalary, _costSalarySquaddie, _costSalarySergeant, _costSalaryCaptain, _costSalaryColonel, _costSalaryCommander;$/;"	m	class:OpenXcom::RuleSoldier
_costSalarySquaddie	Mod/RuleSoldier.h	/^	int _costBuy, _costSalary, _costSalarySquaddie, _costSalarySergeant, _costSalaryCaptain, _costSalaryColonel, _costSalaryCommander;$/;"	m	class:OpenXcom::RuleSoldier
_costScientist	Mod/Mod.h	/^	int _costEngineer, _costScientist, _timePersonnel, _hireByCountryOdds, _hireByRegionOdds, _initialFunding;$/;"	m	class:OpenXcom::Mod
_costSell	Mod/RuleCraft.h	/^	int _costBuy, _costRent, _costSell;$/;"	m	class:OpenXcom::RuleCraft
_costSell	Mod/RuleItem.h	/^	int _costBuy, _costSell, _transferTime, _weight;$/;"	m	class:OpenXcom::RuleItem
_costThrow	Mod/RuleItem.h	/^	RuleItemUseCost _costUse, _costMind, _costPanic, _costThrow, _costPrime, _costUnprime;$/;"	m	class:OpenXcom::RuleItem
_costUnprime	Mod/RuleItem.h	/^	RuleItemUseCost _costUse, _costMind, _costPanic, _costThrow, _costPrime, _costUnprime;$/;"	m	class:OpenXcom::RuleItem
_costUse	Mod/RuleItem.h	/^	RuleItemUseCost _costUse, _costMind, _costPanic, _costThrow, _costPrime, _costUnprime;$/;"	m	class:OpenXcom::RuleItem
_costs	Mod/RuleInventory.h	/^	std::map<std::string, int> _costs;$/;"	m	class:OpenXcom::RuleInventory
_count	Engine/Palette.h	/^	int _count;$/;"	m	class:OpenXcom::Palette
_countdown	Menu/OptionsConfirmState.h	/^	int _countdown;$/;"	m	class:OpenXcom::OptionsConfirmState
_counter	Ufopaedia/StatsForNerdsState.h	/^	int _counter;$/;"	m	class:OpenXcom::StatsForNerdsState
_counterAll	Mod/AlienDeployment.h	/^	std::string _counterSuccess, _counterFailure, _counterDespawn, _counterAll;$/;"	m	class:OpenXcom::AlienDeployment
_counterDespawn	Mod/AlienDeployment.h	/^	std::string _counterSuccess, _counterFailure, _counterDespawn, _counterAll;$/;"	m	class:OpenXcom::AlienDeployment
_counterFailure	Mod/AlienDeployment.h	/^	std::string _counterSuccess, _counterFailure, _counterDespawn, _counterAll;$/;"	m	class:OpenXcom::AlienDeployment
_counterMax	Mod/RuleArcScript.h	/^	int _counterMin, _counterMax;$/;"	m	class:OpenXcom::RuleArcScript
_counterMax	Mod/RuleEventScript.h	/^	int _counterMin, _counterMax;$/;"	m	class:OpenXcom::RuleEventScript
_counterMax	Mod/RuleMissionScript.h	/^	int _counterMin, _counterMax;$/;"	m	class:OpenXcom::RuleMissionScript
_counterMin	Mod/RuleArcScript.h	/^	int _counterMin, _counterMax;$/;"	m	class:OpenXcom::RuleArcScript
_counterMin	Mod/RuleEventScript.h	/^	int _counterMin, _counterMax;$/;"	m	class:OpenXcom::RuleEventScript
_counterMin	Mod/RuleMissionScript.h	/^	int _counterMin, _counterMax;$/;"	m	class:OpenXcom::RuleMissionScript
_counterSuccess	Mod/AlienDeployment.h	/^	std::string _counterSuccess, _counterFailure, _counterDespawn, _counterAll;$/;"	m	class:OpenXcom::AlienDeployment
_countries	Geoscape/Globe.h	/^	Surface *_markers, *_countries, *_radars;$/;"	m	class:OpenXcom::Globe
_countries	Mod/Mod.h	/^	std::map<std::string, RuleCountry*> _countries, _extraGlobeLabels;$/;"	m	class:OpenXcom::Mod
_countries	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_countries	Savegame/SavedGame.h	/^	std::vector<Country*> _countries;$/;"	m	class:OpenXcom::SavedGame
_countriesIndex	Mod/Mod.h	/^	std::vector<std::string> _countriesIndex, _extraGlobeLabelsIndex, _regionsIndex, _facilitiesIndex, _craftsIndex, _craftWeaponsIndex, _itemCategoriesIndex, _itemsIndex, _invsIndex, _ufosIndex;$/;"	m	class:OpenXcom::Mod
_country	Battlescape/DebriefingState.h	/^	Country *_country;$/;"	m	class:OpenXcom::DebriefingState
_country	Geoscape/GraphsState.h	/^	bool _alien, _income, _country, _finance;$/;"	m	class:OpenXcom::GraphsState
_country	Mod/SoldierNamePool.h	/^	std::string _country, _region;$/;"	m	class:OpenXcom::SoldierNamePool
_countryToggles	Geoscape/GraphsState.h	/^	std::vector<GraphButInfo *>  _regionToggles, _countryToggles;$/;"	m	class:OpenXcom::GraphsState
_craft	Basescape/CraftArmorState.h	/^	size_t _craft, _savedScrollPosition;$/;"	m	class:OpenXcom::CraftArmorState
_craft	Basescape/CraftEquipmentState.h	/^	size_t _sel, _craft;$/;"	m	class:OpenXcom::CraftEquipmentState
_craft	Basescape/CraftInfoState.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::CraftInfoState
_craft	Basescape/CraftPilotSelectState.h	/^	size_t _craft;$/;"	m	class:OpenXcom::CraftPilotSelectState
_craft	Basescape/CraftPilotsState.h	/^	size_t _craft;$/;"	m	class:OpenXcom::CraftPilotsState
_craft	Basescape/CraftSoldiersState.h	/^	size_t _craft;$/;"	m	class:OpenXcom::CraftSoldiersState
_craft	Basescape/CraftWeaponsState.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::CraftWeaponsState
_craft	Battlescape/BattlescapeGenerator.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::BattlescapeGenerator
_craft	Geoscape/ConfirmCydoniaState.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::ConfirmCydoniaState
_craft	Geoscape/ConfirmLandingState.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::ConfirmLandingState
_craft	Geoscape/CraftNotEnoughPilotsState.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::CraftNotEnoughPilotsState
_craft	Geoscape/CraftPatrolState.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::CraftPatrolState
_craft	Geoscape/DogfightErrorState.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::DogfightErrorState
_craft	Geoscape/DogfightState.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::DogfightState
_craft	Geoscape/GeoscapeCraftState.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::GeoscapeCraftState
_craft	Geoscape/Globe.h	/^	bool _hover, _craft;$/;"	m	class:OpenXcom::Globe
_craft	Geoscape/LowFuelState.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::LowFuelState
_craft	Menu/NewBattleState.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::NewBattleState
_craft	Savegame/Soldier.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::Soldier
_craft	Savegame/Transfer.h	/^	Craft *_craft;$/;"	m	class:OpenXcom::Transfer
_craftAccelerationBonus	Geoscape/DogfightState.h	/^	int _pilotAccuracyBonus, _pilotDodgeBonus, _pilotApproachSpeedModifier, _craftAccelerationBonus;$/;"	m	class:OpenXcom::DogfightState
_craftDamageAnimTimer	Geoscape/DogfightState.h	/^	Timer *_craftDamageAnimTimer;$/;"	m	class:OpenXcom::DogfightState
_craftDeployed	Battlescape/BattlescapeGenerator.h	/^	bool _allowAutoLoadout, _baseInventory, _generateFuel, _craftDeployed, _ufoDeployed;$/;"	m	class:OpenXcom::BattlescapeGenerator
_craftForDrawing	Savegame/BaseFacility.h	/^	Craft *_craftForDrawing;	\/\/ craft, used for drawing facility$/;"	m	class:OpenXcom::BaseFacility
_craftForPreview	Savegame/SavedBattleGame.h	/^	Craft* _craftForPreview;$/;"	m	class:OpenXcom::SavedBattleGame
_craftHeight	Geoscape/DogfightState.h	/^	int _ufoSize, _craftHeight, _currentCraftDamageColor, _interceptionNumber;$/;"	m	class:OpenXcom::DogfightState
_craftId	Basescape/CraftInfoState.h	/^	size_t _craftId;$/;"	m	class:OpenXcom::CraftInfoState
_craftInventoryTile	Battlescape/BattlescapeGenerator.h	/^	Tile *_craftInventoryTile;$/;"	m	class:OpenXcom::BattlescapeGenerator
_craftInventoryTile	Mod/RuleCraft.h	/^	std::vector<int> _craftInventoryTile;$/;"	m	class:OpenXcom::RuleCraft
_craftIsDefenseless	Geoscape/DogfightState.h	/^	bool _ufoIsAttacking, _disableDisengage, _disableCautious, _craftIsDefenseless, _selfDestructPressed;$/;"	m	class:OpenXcom::DogfightState
_craftLat	Geoscape/Globe.h	/^	double _craftLon, _craftLat, _craftRange;$/;"	m	class:OpenXcom::Globe
_craftListOrder	Mod/Mod.h	/^	int _facilityListOrder, _craftListOrder, _itemCategoryListOrder, _itemListOrder, _researchListOrder,  _manufactureListOrder;$/;"	m	class:OpenXcom::Mod
_craftLon	Geoscape/Globe.h	/^	double _craftLon, _craftLat, _craftRange;$/;"	m	class:OpenXcom::Globe
_craftName	Mod/MapScript.h	/^	std::string _ufoName, _craftName;$/;"	m	class:OpenXcom::MapScript
_craftPos	Battlescape/BattlescapeGenerator.h	/^	SDL_Rect _craftPos;$/;"	m	class:OpenXcom::BattlescapeGenerator
_craftPos	Savegame/SavedBattleGame.h	/^	SDL_Rect _craftPos;$/;"	m	class:OpenXcom::SavedBattleGame
_craftRange	Geoscape/Globe.h	/^	double _craftLon, _craftLat, _craftRange;$/;"	m	class:OpenXcom::Globe
_craftRules	Battlescape/BattlescapeGenerator.h	/^	const RuleCraft *_craftRules;$/;"	m	class:OpenXcom::BattlescapeGenerator
_craftScripts	Mod/RuleCraft.h	/^	ModScript::CraftScripts::Container _craftScripts;$/;"	m	class:OpenXcom::RuleCraft
_craftShield	Geoscape/DogfightState.h	/^	Surface *_window, *_battle, *_range[RuleCraft::WeaponMax], *_damage, *_craftSprite, *_craftShield;$/;"	m	class:OpenXcom::DogfightState
_craftSprite	Geoscape/DogfightState.h	/^	Surface *_window, *_battle, *_range[RuleCraft::WeaponMax], *_damage, *_craftSprite, *_craftShield;$/;"	m	class:OpenXcom::DogfightState
_craftTiles	Savegame/SavedBattleGame.h	/^	std::vector<Position> _craftTiles;$/;"	m	class:OpenXcom::SavedBattleGame
_craftTransformations	Mod/RuleStartingCondition.h	/^	std::map<const RuleCraft*, const RuleCraft*> _craftTransformations;$/;"	m	class:OpenXcom::RuleStartingCondition
_craftTransformationsName	Mod/RuleStartingCondition.h	/^	std::map<std::string, std::string> _craftTransformationsName;$/;"	m	class:OpenXcom::RuleStartingCondition
_craftWeaponStorageItemsCache	Mod/Mod.h	/^	std::vector<const RuleItem*> _craftWeaponStorageItemsCache;$/;"	m	class:OpenXcom::Mod
_craftWeapons	Mod/Mod.h	/^	std::map<std::string, RuleCraftWeapon*> _craftWeapons;$/;"	m	class:OpenXcom::Mod
_craftWeapons	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_craftWeaponsIndex	Mod/Mod.h	/^	std::vector<std::string> _countriesIndex, _extraGlobeLabelsIndex, _regionsIndex, _facilitiesIndex, _craftsIndex, _craftWeaponsIndex, _itemCategoriesIndex, _itemsIndex, _invsIndex, _ufosIndex;$/;"	m	class:OpenXcom::Mod
_craftZ	Battlescape/BattlescapeGenerator.h	/^	int _craftZ;$/;"	m	class:OpenXcom::BattlescapeGenerator
_craftZ	Savegame/SavedBattleGame.h	/^	int _craftZ;$/;"	m	class:OpenXcom::SavedBattleGame
_crafts	Geoscape/ConfirmDestinationState.h	/^	std::vector<Craft*> _crafts;$/;"	m	class:OpenXcom::ConfirmDestinationState
_crafts	Geoscape/InterceptState.h	/^	std::vector<Craft*> _crafts;$/;"	m	class:OpenXcom::InterceptState
_crafts	Geoscape/MultipleTargetsState.h	/^	std::vector<Craft*> _crafts;$/;"	m	class:OpenXcom::MultipleTargetsState
_crafts	Geoscape/SelectDestinationState.h	/^	std::vector<Craft*> _crafts; $/;"	m	class:OpenXcom::SelectDestinationState
_crafts	Menu/NewBattleState.h	/^	std::vector<std::string> _missionTypes, _terrainTypes, _alienRaces, _crafts;$/;"	m	class:OpenXcom::NewBattleState
_crafts	Mod/Mod.h	/^	std::map<std::string, RuleCraft*> _crafts;$/;"	m	class:OpenXcom::Mod
_crafts	Mod/RuleBaseFacility.h	/^	int _storage, _personnel, _aliens, _crafts, _labs, _workshops, _psiLabs;$/;"	m	class:OpenXcom::RuleBaseFacility
_crafts	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_crafts	Savegame/Base.h	/^	std::vector<Craft*> _crafts;$/;"	m	class:OpenXcom::Base
_craftsIndex	Mod/Mod.h	/^	std::vector<std::string> _countriesIndex, _extraGlobeLabelsIndex, _regionsIndex, _facilitiesIndex, _craftsIndex, _craftWeaponsIndex, _itemCategoriesIndex, _itemsIndex, _invsIndex, _ufosIndex;$/;"	m	class:OpenXcom::Mod
_crashId	Savegame/Ufo.h	/^	int _crashId, _landId, _damage;$/;"	m	class:OpenXcom::Ufo
_createInventoryTemplate	Battlescape/InventoryState.cpp	/^void InventoryState::_createInventoryTemplate(std::vector<EquipmentLayoutItem*> &inventoryTemplate)$/;"	f	class:OpenXcom::InventoryState
_createTemplateBtnY	Battlescape/InventoryState.cpp	/^static const int _createTemplateBtnY = 90;$/;"	m	namespace:OpenXcom	file:
_createsClone	Mod/RuleSoldierTransformation.h	/^	bool _keepSoldierArmor, _createsClone, _needsCorpseRecovered, _allowsDeadSoldiers, _allowsLiveSoldiers, _allowsWoundedSoldiers;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_createsMeleeThreat	Mod/Armor.h	/^	Sint8 _ignoresMeleeThreat, _createsMeleeThreat;$/;"	m	class:OpenXcom::Armor
_crew	Basescape/CraftInfoState.h	/^	Surface *_crew, *_equip;$/;"	m	class:OpenXcom::CraftInfoState
_crewEmergencyEvacuationSurvivalChance	Mod/Mod.h	/^	int _crewEmergencyEvacuationSurvivalChance, _pilotsEmergencyEvacuationSurvivalChance;$/;"	m	class:OpenXcom::Mod
_crews	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_criteria	Mod/RuleCommendations.h	/^	std::map<std::string, std::vector<int> > _criteria;$/;"	m	class:OpenXcom::RuleCommendations
_crop	Engine/Surface.h	/^	SDL_Rect _crop;$/;"	m	class:OpenXcom::SurfaceCrop
_crossingGroup	Mod/MapScript.h	/^	int _verticalGroup, _horizontalGroup, _crossingGroup;$/;"	m	class:OpenXcom::MapScript
_ctrl	Engine/Game.h	/^	bool _ctrl, _alt, _shift, _rmb, _mmb;$/;"	m	class:OpenXcom::Game
_ctrlUsed	Battlescape/Pathfinding.h	/^	bool _ctrlUsed = false;$/;"	m	class:OpenXcom::Pathfinding
_cumulativeFrequency	Mod/MapScript.h	/^	int _sizeX, _sizeY, _sizeZ, _executionChances, _executions, _cumulativeFrequency, _label;$/;"	m	class:OpenXcom::MapScript
_curInventoryTemplate	Battlescape/InventoryState.h	/^	std::vector<EquipmentLayoutItem*> _curInventoryTemplate, _tempInventoryTemplate;$/;"	m	class:OpenXcom::InventoryState
_curMasterId	Menu/ModListState.h	/^	std::string _curMasterId;$/;"	m	class:OpenXcom::ModListState
_curMasterIdx	Menu/ModListState.h	/^	size_t _curMasterIdx;$/;"	m	class:OpenXcom::ModListState
_curScreen	Menu/SlideshowState.h	/^	int _curScreen;$/;"	m	class:OpenXcom::SlideshowState
_curr	Engine/Collections.h	/^		It _curr;$/;"	m	class:OpenXcom::Collections::FilterIterator
_curr	Engine/Collections.h	/^		It _curr;$/;"	m	struct:OpenXcom::Collections::ReverseIterator
_curr_x	Engine/ShaderRepeat.h	/^	int _curr_x;$/;"	m	struct:OpenXcom::helper::controler
_curr_y	Engine/ShaderRepeat.h	/^	int _curr_y;$/;"	m	struct:OpenXcom::helper::controler
_current	Mod/ExtraSounds.h	/^	const ModData* _current;$/;"	m	class:OpenXcom::ExtraSounds
_current	Mod/ExtraSprites.h	/^	const ModData* _current;$/;"	m	class:OpenXcom::ExtraSprites
_currentAIState	Savegame/BattleUnit.h	/^	AIModule *_currentAIState;$/;"	m	class:OpenXcom::BattleUnit
_currentAction	Battlescape/BattlescapeGame.h	/^	BattleAction _currentAction;$/;"	m	class:OpenXcom::BattlescapeGame
_currentAmbienceDelay	Savegame/SavedBattleGame.h	/^	int _minAmbienceRandomDelay, _maxAmbienceRandomDelay, _currentAmbienceDelay;$/;"	m	class:OpenXcom::SavedBattleGame
_currentArmor	Savegame/BattleUnit.h	/^	int _currentArmor[SIDE_MAX], _maxArmor[SIDE_MAX];$/;"	m	class:OpenXcom::BattleUnit
_currentCraftDamageColor	Geoscape/DogfightState.h	/^	int _ufoSize, _craftHeight, _currentCraftDamageColor, _interceptionNumber;$/;"	m	class:OpenXcom::DogfightState
_currentDamageTooltip	Battlescape/InventoryState.h	/^	std::string _currentDamageTooltip;$/;"	m	class:OpenXcom::InventoryState
_currentDamageTooltipItem	Battlescape/InventoryState.h	/^	BattleItem *_currentDamageTooltipItem = nullptr;$/;"	m	class:OpenXcom::InventoryState
_currentDist	Geoscape/DogfightState.h	/^	int _timeout, _currentDist, _targetDist, _weaponFireInterval[RuleCraft::WeaponMax], _weaponFireCountdown[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_currentFrame	Battlescape/Explosion.h	/^	int _currentFrame, _startFrame, _frameDelay;$/;"	m	class:OpenXcom::Explosion
_currentMusicTrack	Mod/Mod.h	/^	std::string _playingMusic, _currentMusicTrack;$/;"	m	class:OpenXcom::Mod
_currentPosition	Savegame/CraftWeaponProjectile.h	/^	int _currentPosition; \/\/ relative to interceptor, apparently, which is a problem when the interceptor disengages while projectile is in flight$/;"	m	class:OpenXcom::CraftWeaponProjectile
_currentSort	Basescape/SellState.h	/^	TransferSortDirection _previousSort, _currentSort;$/;"	m	class:OpenXcom::SellState
_currentSort	Basescape/TransferItemsState.h	/^	TransferSortDirection _previousSort, _currentSort;$/;"	m	class:OpenXcom::TransferItemsState
_currentStats	Savegame/Soldier.h	/^	UnitStats _initialStats, _currentStats, _tmpStatsWithSoldierBonuses, _tmpStatsWithAllBonuses;$/;"	m	class:OpenXcom::Soldier
_currentSurface	Savegame/Tile.h	/^	SurfaceRaw<const Uint8> _currentSurface[O_MAX] = { };$/;"	m	class:OpenXcom::Tile
_currentTooltip	Battlescape/BattlescapeState.h	/^	std::string _currentTooltip;$/;"	m	class:OpenXcom::BattlescapeState
_currentTooltip	Battlescape/DebriefingState.h	/^	std::string _currentTooltip;$/;"	m	class:OpenXcom::DebriefingState
_currentTooltip	Battlescape/InventoryState.h	/^	std::string _currentTooltip;$/;"	m	class:OpenXcom::InventoryState
_currentTooltip	Menu/ModListState.h	/^	std::string _currentTooltip;$/;"	m	class:OpenXcom::ModListState
_currentTooltip	Menu/OptionsBaseState.h	/^	std::string _currentTooltip;$/;"	m	class:OpenXcom::OptionsBaseState
_currentTurn	Battlescape/NextTurnState.h	/^	int _currentTurn;$/;"	m	class:OpenXcom::NextTurnState
_cursor	Engine/Game.h	/^	Cursor *_cursor;$/;"	m	class:OpenXcom::Game
_cursor	Menu/StartState.h	/^	Text *_text, *_cursor;$/;"	m	class:OpenXcom::StartState
_cursorColor	Engine/State.h	/^	Uint8 _cursorColor;$/;"	m	class:OpenXcom::State
_cursorLeftBlackBand	Engine/Screen.h	/^	int _topBlackBand, _bottomBlackBand, _leftBlackBand, _rightBlackBand, _cursorTopBlackBand, _cursorLeftBlackBand;$/;"	m	class:OpenXcom::Screen
_cursorPosition	Battlescape/BattlescapeState.h	/^	Position _cursorPosition;$/;"	m	class:OpenXcom::BattlescapeState
_cursorPosition	Battlescape/MiniMapView.h	/^	Position _posBeforeMouseScrolling, _cursorPosition;$/;"	m	class:OpenXcom::MiniMapView
_cursorSize	Battlescape/Map.h	/^	int _cursorSize;$/;"	m	class:OpenXcom::Map
_cursorTopBlackBand	Engine/Screen.h	/^	int _topBlackBand, _bottomBlackBand, _leftBlackBand, _rightBlackBand, _cursorTopBlackBand, _cursorLeftBlackBand;$/;"	m	class:OpenXcom::Screen
_cursorType	Battlescape/Map.h	/^	CursorType _cursorType;$/;"	m	class:OpenXcom::Map
_customArmorPreviewIndex	Mod/Armor.h	/^	std::vector<int> _customArmorPreviewIndex;$/;"	m	class:OpenXcom::Armor
_customBriefing	Battlescape/NextTurnState.h	/^	BriefingData _customBriefing;$/;"	m	class:OpenXcom::NextTurnState
_customItemPreviewIndex	Mod/RuleItem.h	/^	std::vector<int> _customItemPreviewIndex;$/;"	m	class:OpenXcom::RuleItem
_customPalettes	Mod/Mod.h	/^	std::map<std::string, CustomPalettes *> _customPalettes;$/;"	m	class:OpenXcom::Mod
_customPalettesIndex	Mod/Mod.h	/^	std::vector<std::string> _alienMissionsIndex, _terrainIndex, _customPalettesIndex, _arcScriptIndex, _eventScriptIndex, _eventIndex, _missionScriptIndex;$/;"	m	class:OpenXcom::Mod
_customPreview	Mod/RuleCraft.h	/^	std::string _customPreview;$/;"	m	class:OpenXcom::RuleCraft
_customRuleCraftDeployments	Savegame/SavedGame.h	/^	std::map<std::string, RuleCraftDeployment> _customRuleCraftDeployments;$/;"	m	class:OpenXcom::SavedGame
_customSoldierDeployment	Savegame/Craft.h	/^	std::map<int, SoldierDeploymentData> _customSoldierDeployment;$/;"	m	class:OpenXcom::Craft
_customSound	Engine/State.h	/^	const Sound* _customSound;$/;"	m	class:OpenXcom::State
_customTrainingFactor	Mod/Mod.h	/^	int _maxLookVariant, _tooMuchSmokeThreshold, _customTrainingFactor, _minReactionAccuracy;$/;"	m	class:OpenXcom::Mod
_customUfo	Mod/AlienDeployment.h	/^	std::string _customUfo;$/;"	m	class:OpenXcom::AlienDeployment
_customVehicleDeployment	Savegame/Craft.h	/^	std::vector<VehicleDeploymentData> _customVehicleDeployment;$/;"	m	class:OpenXcom::Craft
_cutscene	Mod/RuleResearch.h	/^	std::string _name, _lookup, _cutscene, _spawnedItem, _spawnedEvent;$/;"	m	class:OpenXcom::RuleResearch
_cutsceneId	Battlescape/BriefingState.h	/^	std::string _cutsceneId, _musicId;$/;"	m	class:OpenXcom::BriefingState
_cutsceneId	Menu/CutsceneState.h	/^	std::string _cutsceneId;$/;"	m	class:OpenXcom::CutsceneState
_dailyDogfightExperienceCache	Savegame/Soldier.h	/^	UnitStats _dailyDogfightExperienceCache;$/;"	m	class:OpenXcom::Soldier
_damage	Geoscape/DogfightState.h	/^	Surface *_window, *_battle, *_range[RuleCraft::WeaponMax], *_damage, *_craftSprite, *_craftShield;$/;"	m	class:OpenXcom::DogfightState
_damage	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_damage	Savegame/Craft.h	/^	int _fuel, _damage, _shield, _interceptionOrder, _takeoff;$/;"	m	class:OpenXcom::Craft
_damage	Savegame/CraftWeaponProjectile.h	/^	int _damage;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_damage	Savegame/Ufo.h	/^	int _crashId, _landId, _damage;$/;"	m	class:OpenXcom::Ufo
_damageBonus	Mod/RuleItem.h	/^	RuleStatBonus _damageBonus, _meleeBonus, _accuracyMulti, _meleeMulti, _throwMulti, _closeQuartersMulti;$/;"	m	class:OpenXcom::RuleItem
_damageModifier	Mod/Armor.h	/^	float _damageModifier[DAMAGE_TYPES];$/;"	m	class:OpenXcom::Armor
_damageType	Battlescape/ExplosionBState.h	/^	const RuleDamageType *_damageType;$/;"	m	class:OpenXcom::ExplosionBState
_damageType	Battlescape/UnitDieBState.h	/^	const RuleDamageType *_damageType;$/;"	m	class:OpenXcom::UnitDieBState
_damageType	Mod/RuleItem.h	/^	RuleDamageType _damageType, _meleeType;$/;"	m	class:OpenXcom::RuleItem
_damageTypeSet	Mod/RuleItem.h	/^	bool _damageTypeSet, _meleeTypeSet;$/;"	m	class:OpenXcom::RuleItem
_damageTypes	Mod/Mod.h	/^	std::vector<RuleDamageType*> _damageTypes;$/;"	m	class:OpenXcom::Mod
_data	Engine/AdlibMusic.h	/^	char *_data;$/;"	m	class:OpenXcom::AdlibMusic
_data	Engine/CatFile.h	/^	Uint8 *_data;$/;"	m	class:OpenXcom::CatFile
_data	Engine/Functions.h	/^	void* _data;$/;"	m	class:OpenXcom::FuncRef
_data	Mod/AlienDeployment.h	/^	std::vector<DeploymentData> _data;$/;"	m	class:OpenXcom::AlienDeployment
_dataFolder	Engine/Options.cpp	/^std::string _dataFolder;$/;"	m	namespace:OpenXcom::Options	file:
_dataList	Engine/Options.cpp	/^std::vector<std::string> _dataList;$/;"	m	namespace:OpenXcom::Options	file:
_dataset	Mod/MapData.h	/^	MapDataSet *_dataset;$/;"	m	class:OpenXcom::MapData
_day	Savegame/GameTime.h	/^	int _second, _minute, _hour, _weekday, _day, _month, _year;$/;"	m	class:OpenXcom::GameTime
_daysWoundedTotal	Savegame/SoldierDiary.h	/^	int _daysWoundedTotal, _totalShotByFriendlyCounter, _totalShotFriendlyCounter, _loneSurvivorTotal, _monthsService, _unconciousTotal, _shotAtCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_deadSoldiers	Savegame/SavedGame.h	/^	std::vector<Soldier*> _deadSoldiers;$/;"	m	class:OpenXcom::SavedGame
_deadSoldiersCommended	Battlescape/DebriefingState.h	/^	std::vector<Soldier*> _soldiersCommended, _deadSoldiersCommended;$/;"	m	class:OpenXcom::DebriefingState
_death	Savegame/Soldier.h	/^	SoldierDeath *_death;$/;"	m	class:OpenXcom::Soldier
_deathFrames	Mod/Armor.h	/^	int _deathFrames;$/;"	m	class:OpenXcom::Armor
_deathSound	Mod/Unit.h	/^	std::vector<int> _deathSound, _panicSound, _berserkSound, _aggroSound;$/;"	m	class:OpenXcom::Unit
_deathSound	Savegame/BattleUnit.h	/^	std::vector<int> _deathSound, _aggroSound;$/;"	m	class:OpenXcom::BattleUnit
_deathSoundFemale	Mod/Armor.h	/^	std::vector<int> _deathSoundMale, _deathSoundFemale;$/;"	m	class:OpenXcom::Armor
_deathSoundFemale	Mod/RuleSoldier.h	/^	std::vector<int> _deathSoundMale, _deathSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_deathSoundMale	Mod/Armor.h	/^	std::vector<int> _deathSoundMale, _deathSoundFemale;$/;"	m	class:OpenXcom::Armor
_deathSoundMale	Mod/RuleSoldier.h	/^	std::vector<int> _deathSoundMale, _deathSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_deathTiles	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_debriefingState	Basescape/SellState.h	/^	DebriefingState *_debriefingState;$/;"	m	class:OpenXcom::SellState
_debriefingState	Basescape/TransferBaseState.h	/^	DebriefingState *_debriefingState;$/;"	m	class:OpenXcom::TransferBaseState
_debriefingState	Basescape/TransferItemsState.h	/^	DebriefingState *_debriefingState;$/;"	m	class:OpenXcom::TransferItemsState
_debug	Savegame/SavedGame.h	/^	bool _debug, _warned;$/;"	m	class:OpenXcom::SavedGame
_debugInVisualStudio	Menu/MainMenuState.h	/^	bool _debugInVisualStudio;$/;"	m	class:OpenXcom::MainMenuState
_debugMode	Savegame/SavedBattleGame.h	/^	bool _debugMode, _bughuntMode;$/;"	m	class:OpenXcom::SavedBattleGame
_debugPlay	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::_debugPlay = false;$/;"	m	class:OpenXcom::BattlescapeGame	file:
_debugPlay	Battlescape/BattlescapeGame.h	/^	static bool _debugPlay;$/;"	m	class:OpenXcom::BattlescapeGame
_debugVisionMode	Battlescape/Map.h	/^	int _debugVisionMode;$/;"	m	class:OpenXcom::Map
_decorationLevel	Savegame/SoldierDiary.h	/^	int  _decorationLevel;$/;"	m	class:OpenXcom::SoldierCommendations
_decreaseCounter	Mod/RuleResearch.h	/^	std::vector<std::string> _decreaseCounter, _increaseCounter;$/;"	m	class:OpenXcom::RuleResearch
_decreaseCounterAll	Mod/AlienDeployment.h	/^	std::string _decreaseCounterSuccess, _decreaseCounterFailure, _decreaseCounterDespawn, _decreaseCounterAll;$/;"	m	class:OpenXcom::AlienDeployment
_decreaseCounterDespawn	Mod/AlienDeployment.h	/^	std::string _decreaseCounterSuccess, _decreaseCounterFailure, _decreaseCounterDespawn, _decreaseCounterAll;$/;"	m	class:OpenXcom::AlienDeployment
_decreaseCounterFailure	Mod/AlienDeployment.h	/^	std::string _decreaseCounterSuccess, _decreaseCounterFailure, _decreaseCounterDespawn, _decreaseCounterAll;$/;"	m	class:OpenXcom::AlienDeployment
_decreaseCounterSuccess	Mod/AlienDeployment.h	/^	std::string _decreaseCounterSuccess, _decreaseCounterFailure, _decreaseCounterDespawn, _decreaseCounterAll;$/;"	m	class:OpenXcom::AlienDeployment
_def	Engine/OptionInfo.h	/^	union { bool b; int i; const char *s; SDLKey k; } _def; \/\/ can't put strings in unions$/;"	m	class:OpenXcom::OptionInfo	typeref:union:OpenXcom::OptionInfo::__anon2
_defaultArmor	Mod/RuleStartingCondition.h	/^	std::map<std::string, std::map<std::string, int> > _defaultArmor;$/;"	m	class:OpenXcom::RuleStartingCondition
_defaultInvSlotX	Mod/RuleItem.h	/^	int _defaultInvSlotX, _defaultInvSlotY;$/;"	m	class:OpenXcom::RuleItem
_defaultInvSlotY	Mod/RuleItem.h	/^	int _defaultInvSlotX, _defaultInvSlotY;$/;"	m	class:OpenXcom::RuleItem
_defaultInventorySlot	Mod/RuleItem.h	/^	const RuleInventory* _defaultInventorySlot;$/;"	m	class:OpenXcom::RuleItem
_defaultInventorySlotName	Mod/RuleItem.h	/^	std::string _defaultInventorySlotName;$/;"	m	class:OpenXcom::RuleItem
_defeatFunds	Mod/Mod.h	/^	int _defeatScore, _defeatFunds;$/;"	m	class:OpenXcom::Mod
_defeatScore	Mod/Mod.h	/^	int _defeatScore, _defeatFunds;$/;"	m	class:OpenXcom::Mod
_defense	Mod/RuleBaseFacility.h	/^	int _radarRange, _radarChance, _defense, _hitRatio, _fireSound, _hitSound, _placeSound;$/;"	m	class:OpenXcom::RuleBaseFacility
_defenses	Geoscape/BaseDefenseState.h	/^	int _thinkcycles, _row, _passes, _gravShields, _defenses, _attacks, _explosionCount;$/;"	m	class:OpenXcom::BaseDefenseState
_defenses	Savegame/Base.h	/^	std::vector<BaseFacility*> _defenses;$/;"	m	class:OpenXcom::Base
_delay	Mod/RuleMissionScript.h	/^	int _firstMonth, _lastMonth, _label, _executionOdds, _targetBaseOdds, _minDifficulty, _maxRuns, _avoidRepeats, _delay, _randomDelay;$/;"	m	class:OpenXcom::RuleMissionScript
_delayOverride	Engine/FlcPlayer.h	/^	Uint16 _delayOverride; \/* FRAME_TYPE extension *\/$/;"	m	class:OpenXcom::FlcPlayer
_delayedInitDone	Basescape/SellState.h	/^	bool _delayedInitDone;$/;"	m	class:OpenXcom::SellState
_delayedRecolorDone	Geoscape/DogfightState.h	/^	bool _delayedRecolorDone;$/;"	m	class:OpenXcom::DogfightState
_deleted	Battlescape/BattlescapeGame.h	/^	std::list<BattleState*> _states, _deleted;$/;"	m	class:OpenXcom::BattlescapeGame
_deleted	Engine/Game.h	/^	std::list<State*> _states, _deleted;$/;"	m	class:OpenXcom::Game
_deleted	Savegame/SavedBattleGame.h	/^	std::vector<BattleItem*> _items, _deleted;$/;"	m	class:OpenXcom::SavedBattleGame
_delivered	Savegame/Transfer.h	/^	bool _delivered;$/;"	m	class:OpenXcom::Transfer
_density	Battlescape/Particle.h	/^	float _xOffset, _yOffset, _density;$/;"	m	class:OpenXcom::Particle
_dependencies	Mod/RuleResearch.h	/^	std::vector<const RuleResearch*> _dependencies, _unlocks, _disables, _reenables, _getOneFree, _requires;$/;"	m	class:OpenXcom::RuleResearch
_dependenciesName	Mod/RuleResearch.h	/^	std::vector<std::string> _dependenciesName, _unlocksName, _disablesName, _reenablesName, _getOneFreeName, _requiresName;$/;"	m	class:OpenXcom::RuleResearch
_deployment	Mod/RuleCraft.h	/^	RuleCraftDeployment _deployment;$/;"	m	class:OpenXcom::RuleCraft
_deployment	Savegame/AlienBase.h	/^	AlienDeployment *_deployment;$/;"	m	class:OpenXcom::AlienBase
_deployment	Savegame/MissionSite.h	/^	const AlienDeployment *_deployment;$/;"	m	class:OpenXcom::MissionSite
_deploymentRule	Geoscape/TargetInfoState.h	/^	AlienDeployment *_deploymentRule;$/;"	m	class:OpenXcom::TargetInfoState
_deployments	Mod/Texture.h	/^	std::map<std::string, int> _deployments;$/;"	m	class:OpenXcom::Texture
_deploymentsIndex	Mod/Mod.h	/^	std::vector<std::string> _aliensIndex, _enviroEffectsIndex, _startingConditionsIndex, _deploymentsIndex, _armorsIndex, _ufopaediaIndex, _ufopaediaCatIndex, _researchIndex, _manufactureIndex;$/;"	m	class:OpenXcom::Mod
_depth	Battlescape/Inventory.h	/^	int _depth, _groundSlotsX, _groundSlotsY;$/;"	m	class:OpenXcom::Inventory
_depth	Savegame/SavedBattleGame.h	/^	int _depth, _ambience;$/;"	m	class:OpenXcom::SavedBattleGame
_desc	Engine/ModInfo.h	/^	std::string _name, _desc, _author, _url, _id, _master;$/;"	m	class:OpenXcom::ModInfo
_desc	Engine/OptionInfo.h	/^	std::string _id, _desc, _cat;$/;"	m	class:OpenXcom::OptionInfo
_description	Mod/RuleCommendations.h	/^	std::string _description;$/;"	m	class:OpenXcom::RuleCommendations
_description	Mod/RuleEvent.h	/^	std::string _name, _description, _background, _music;$/;"	m	class:OpenXcom::RuleEvent
_despawnEvenIfTargeted	Mod/RuleAlienMission.h	/^	bool _despawnEvenIfTargeted;$/;"	m	class:OpenXcom::RuleAlienMission
_despawnEvents	Mod/AlienDeployment.h	/^	WeightedOptions _genMission, _successEvents, _failureEvents, _despawnEvents;$/;"	m	class:OpenXcom::AlienDeployment
_despawnPenalty	Mod/AlienDeployment.h	/^	int _objectiveType, _objectivesRequired, _objectiveCompleteScore, _objectiveFailedScore, _despawnPenalty, _abortPenalty, _points, _turnLimit, _cheatTurn;$/;"	m	class:OpenXcom::AlienDeployment
_dest	Battlescape/ItemSprite.h	/^	Surface *_dest;$/;"	m	class:OpenXcom::ItemSprite
_dest	Battlescape/UnitSprite.h	/^	Surface *_dest;$/;"	m	class:OpenXcom::UnitSprite
_dest	Savegame/MovingTarget.h	/^	Target *_dest;$/;"	m	class:OpenXcom::MovingTarget
_destination	Savegame/BattleUnit.h	/^	Position _destination;$/;"	m	class:OpenXcom::BattleUnit
_destroyBase	Battlescape/DebriefingState.h	/^	bool _positiveScore, _destroyBase, _promotions, _showSellButton, _initDone;$/;"	m	class:OpenXcom::DebriefingState
_destroyCraft	Geoscape/DogfightState.h	/^	bool _end, _endUfoHandled, _endCraftHandled, _ufoBreakingOff, _destroyUfo, _destroyCraft, _weaponEnabled[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_destroyItem	Mod/RuleResearch.h	/^	bool _needItem, _destroyItem;$/;"	m	class:OpenXcom::RuleResearch
_destroyRequiredItems	Mod/RuleStartingCondition.h	/^	bool _destroyRequiredItems;$/;"	m	class:OpenXcom::RuleStartingCondition
_destroyUfo	Geoscape/DogfightState.h	/^	bool _end, _endUfoHandled, _endCraftHandled, _ufoBreakingOff, _destroyUfo, _destroyCraft, _weaponEnabled[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_destroyedFacilitiesCache	Savegame/Base.h	/^	std::map<const RuleBaseFacility*, int> _destroyedFacilitiesCache;$/;"	m	class:OpenXcom::Base
_destroyedFacility	Mod/Mod.h	/^	std::string _destroyedFacility;$/;"	m	class:OpenXcom::Mod
_destroyedFacility	Mod/RuleBaseFacility.h	/^	const RuleBaseFacility* _destroyedFacility;$/;"	m	class:OpenXcom::RuleBaseFacility
_destroyedFacilityName	Mod/RuleBaseFacility.h	/^	std::string _destroyedFacilityName;$/;"	m	class:OpenXcom::RuleBaseFacility
_detected	Savegame/MissionSite.h	/^	bool _inBattlescape, _detected;$/;"	m	class:OpenXcom::MissionSite
_detected	Savegame/Ufo.h	/^	bool _detected, _hyperDetected, _processedIntercept;$/;"	m	class:OpenXcom::Ufo
_diary	Savegame/Soldier.h	/^	SoldierDiary *_diary;$/;"	m	class:OpenXcom::Soldier
_didPsi	Battlescape/AIModule.h	/^	bool _traceAI, _didPsi;$/;"	m	class:OpenXcom::AIModule
_dieMCD	Mod/MapData.h	/^	int _yOffset, _TUWalk, _TUFly, _TUSlide, _terrainLevel, _footstepSound, _dieMCD, _altMCD;$/;"	m	class:OpenXcom::MapData
_difficulty	Menu/NewGameState.h	/^	TextButton *_difficulty;$/;"	m	class:OpenXcom::NewGameState
_difficulty	Savegame/SavedGame.h	/^	GameDifficulty _difficulty;$/;"	m	class:OpenXcom::SavedGame
_difficultyDemigod	Mod/Mod.h	/^	bool _difficultyDemigod;$/;"	m	class:OpenXcom::Mod
_direction	Engine/Language.h	/^	TextDirection _direction;$/;"	m	class:OpenXcom::Language
_direction	Mod/MapScript.h	/^	MapDirection _direction;$/;"	m	class:OpenXcom::MapScript
_direction	Savegame/BattleUnit.h	/^	int _direction, _toDirection;$/;"	m	class:OpenXcom::BattleUnit
_direction	Savegame/CraftWeaponProjectile.h	/^	int _direction;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_direction	Savegame/Ufo.h	/^	std::string _direction, _altitude;$/;"	m	class:OpenXcom::Ufo
_directionTurret	Savegame/BattleUnit.h	/^	int _directionTurret, _toDirectionTurret;$/;"	m	class:OpenXcom::BattleUnit
_disableCautious	Geoscape/DogfightState.h	/^	bool _ufoIsAttacking, _disableDisengage, _disableCautious, _craftIsDefenseless, _selfDestructPressed;$/;"	m	class:OpenXcom::DogfightState
_disableCutsceneAndMusic	Battlescape/BriefingState.h	/^	bool _disableCutsceneAndMusic;$/;"	m	class:OpenXcom::BriefingState
_disableDisengage	Geoscape/DogfightState.h	/^	bool _ufoIsAttacking, _disableDisengage, _disableCautious, _craftIsDefenseless, _selfDestructPressed;$/;"	m	class:OpenXcom::DogfightState
_disableIndicators	Savegame/BattleUnit.h	/^	bool _disableIndicators;$/;"	m	class:OpenXcom::BattleUnit
_disableSoldierEquipment	Savegame/SavedGame.h	/^	bool _disableSoldierEquipment;$/;"	m	class:OpenXcom::SavedGame
_disableUnderwaterSounds	Mod/Mod.h	/^	bool _disableUnderwaterSounds;$/;"	m	class:OpenXcom::Mod
_disabled	Savegame/BaseFacility.h	/^	bool _disabled;$/;"	m	class:OpenXcom::BaseFacility
_disabled	Savegame/CraftWeapon.h	/^	bool _disabled;$/;"	m	class:OpenXcom::CraftWeapon
_disabledFacilities	Basescape/BuildFacilitiesState.h	/^	std::vector<RuleBaseFacility*> _facilities, _disabledFacilities;$/;"	m	class:OpenXcom::BuildFacilitiesState
_disabledResearch	Basescape/TechTreeViewerState.h	/^	std::unordered_set<std::string> _disabledResearch;$/;"	m	class:OpenXcom::TechTreeViewerState
_disables	Mod/RuleResearch.h	/^	std::vector<const RuleResearch*> _dependencies, _unlocks, _disables, _reenables, _getOneFree, _requires;$/;"	m	class:OpenXcom::RuleResearch
_disablesName	Mod/RuleResearch.h	/^	std::vector<std::string> _dependenciesName, _unlocksName, _disablesName, _reenablesName, _getOneFreeName, _requiresName;$/;"	m	class:OpenXcom::RuleResearch
_discovered	Savegame/AlienBase.h	/^	bool _inBattlescape, _discovered;$/;"	m	class:OpenXcom::AlienBase
_discovered	Savegame/SavedGame.h	/^	std::vector<const RuleResearch*> _discovered;$/;"	m	class:OpenXcom::SavedGame
_display	Basescape/SoldierDiaryPerformanceState.h	/^	SoldierDiaryDisplay _display;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_displayCustomCategories	Mod/Mod.h	/^	int _displayCustomCategories;$/;"	m	class:OpenXcom::Mod
_displaySurface	Menu/OptionsVideoState.h	/^	InteractiveSurface *_displaySurface;$/;"	m	class:OpenXcom::OptionsVideoState
_displayedStrings	Basescape/NewManufactureListState.h	/^	std::vector<std::string> _displayedStrings;$/;"	m	class:OpenXcom::NewManufactureListState
_dist	Engine/Scalers/xbrz.cpp	286;"	d	file:
_distance	Basescape/TransferItemsState.h	/^	double _distance;$/;"	m	class:OpenXcom::TransferItemsState
_distance	Battlescape/Projectile.h	/^	float _distance;$/;"	m	class:OpenXcom::Projectile
_distanceCovered	Savegame/CraftWeaponProjectile.h	/^	int _distanceCovered;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_doInit	Basescape/NewManufactureListState.h	/^	bool _showRequirements, _refreshCategories, _doInit;$/;"	m	class:OpenXcom::NewManufactureListState
_doNotReset	Basescape/ManageAlienContainmentState.h	/^	bool _doNotReset, _threeButtons;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_dogfightExperience	Mod/RuleSoldier.h	/^	UnitStats _minStats, _maxStats, _statCaps, _trainingStatCaps, _dogfightExperience;$/;"	m	class:OpenXcom::RuleSoldier
_dogfightStartTimer	Geoscape/GeoscapeState.h	/^	Timer *_gameTimer, *_zoomInEffectTimer, *_zoomOutEffectTimer, *_dogfightStartTimer, *_dogfightTimer;$/;"	m	class:OpenXcom::GeoscapeState
_dogfightTimer	Geoscape/GeoscapeState.h	/^	Timer *_gameTimer, *_zoomInEffectTimer, *_zoomOutEffectTimer, *_dogfightStartTimer, *_dogfightTimer;$/;"	m	class:OpenXcom::GeoscapeState
_dogfights	Geoscape/GeoscapeState.h	/^	std::list<DogfightState*> _dogfights, _dogfightsToBeStarted;$/;"	m	class:OpenXcom::GeoscapeState
_dogfightsToBeStarted	Geoscape/GeoscapeState.h	/^	std::list<DogfightState*> _dogfights, _dogfightsToBeStarted;$/;"	m	class:OpenXcom::GeoscapeState
_done	Battlescape/BattlescapeGame.h	/^		bool _done = false;$/;"	m	class:OpenXcom::BattlescapeGame::SingleRun
_dontReselect	Savegame/BattleUnit.h	/^	bool _kneeled, _floating, _dontReselect;$/;"	m	class:OpenXcom::BattleUnit
_dot	Interface/TextList.h	/^	bool _dot, _selectable, _condensed, _contrast, _wrap, _flooding, _ignoreSeparators;$/;"	m	class:OpenXcom::TextList
_down	Interface/TextList.h	/^	ArrowButton *_up, *_down;$/;"	m	class:OpenXcom::TextList
_drawBubbles	Mod/Armor.h	/^	bool _drawBubbles;$/;"	m	class:OpenXcom::Armor
_drawEnemyRadarCircles	Mod/Mod.h	/^	int _escortRange, _drawEnemyRadarCircles;$/;"	m	class:OpenXcom::Mod
_drawingRoutine	Battlescape/UnitSprite.h	/^	int _part, _animationFrame, _drawingRoutine;$/;"	m	class:OpenXcom::UnitSprite
_drawingRoutine	Mod/Armor.h	/^	int _frontArmor, _sideArmor, _leftArmorDiff, _rearArmor, _underArmor, _drawingRoutine;$/;"	m	class:OpenXcom::Armor
_drillMap	Battlescape/BattlescapeGenerator.h	/^	std::vector< std::vector<int> > _segments, _drillMap;$/;"	m	class:OpenXcom::BattlescapeGenerator
_dropoff	Mod/RuleItem.h	/^	int _listOrder, _maxRange, _minRange, _dropoff, _bulletSpeed, _explosionSpeed, _shotgunPellets;$/;"	m	class:OpenXcom::RuleItem
_droppedOnAlienTurn	Savegame/BattleItem.h	/^	bool _XCOMProperty, _droppedOnAlienTurn, _isAmmo, _isWeaponWithAmmo, _fuseEnabled;$/;"	m	class:OpenXcom::BattleItem
_dummy	Battlescape/BattlescapeGenerator.h	/^	MapBlock *_dummy;$/;"	m	class:OpenXcom::BattlescapeGenerator
_dummy	Savegame/Node.h	/^	bool _dummy;$/;"	m	class:OpenXcom::Node
_durationMax	Mod/AlienDeployment.h	/^	int _markerIcon, _durationMin, _durationMax, _minDepth, _maxDepth, _genMissionFrequency, _genMissionLimit;$/;"	m	class:OpenXcom::AlienDeployment
_durationMin	Mod/AlienDeployment.h	/^	int _markerIcon, _durationMin, _durationMax, _minDepth, _maxDepth, _genMissionFrequency, _genMissionLimit;$/;"	m	class:OpenXcom::AlienDeployment
_dx	Engine/FlcPlayer.h	/^	int _dx, _dy;$/;"	m	class:OpenXcom::FlcPlayer
_dx	Interface/Window.h	/^	int _dx, _dy;$/;"	m	class:OpenXcom::Window
_dy	Engine/FlcPlayer.h	/^	int _dx, _dy;$/;"	m	class:OpenXcom::FlcPlayer
_dy	Interface/Window.h	/^	int _dx, _dy;$/;"	m	class:OpenXcom::Window
_dynGetter	Basescape/CraftArmorState.h	/^	getStatFn_t _dynGetter;$/;"	m	class:OpenXcom::CraftArmorState
_dynGetter	Basescape/CraftSoldiersState.h	/^	getStatFn_t _dynGetter;$/;"	m	class:OpenXcom::CraftSoldiersState
_dynGetter	Basescape/SoldiersState.h	/^	getStatFn_t _dynGetter;$/;"	m	class:OpenXcom::SoldiersState
_dynamicOffset	Battlescape/AlienInventory.h	/^	int _dynamicOffset;$/;"	m	class:OpenXcom::AlienInventory
_earthData	Geoscape/Globe.h	/^	std::vector<std::vector<Cord> > _earthData;$/;"	m	class:OpenXcom::Globe
_ecEnabledFriendly	Savegame/SavedBattleGame.h	/^	bool _ecEnabledFriendly, _ecEnabledHostile, _ecEnabledNeutral;$/;"	m	class:OpenXcom::SavedBattleGame
_ecEnabledHostile	Savegame/SavedBattleGame.h	/^	bool _ecEnabledFriendly, _ecEnabledHostile, _ecEnabledNeutral;$/;"	m	class:OpenXcom::SavedBattleGame
_ecEnabledNeutral	Savegame/SavedBattleGame.h	/^	bool _ecEnabledFriendly, _ecEnabledHostile, _ecEnabledNeutral;$/;"	m	class:OpenXcom::SavedBattleGame
_edtBase	Basescape/BaseInfoState.h	/^	TextEdit *_edtBase;$/;"	m	class:OpenXcom::BaseInfoState
_edtBase	Basescape/BasescapeState.h	/^	TextEdit *_edtBase;$/;"	m	class:OpenXcom::BasescapeState
_edtCraft	Basescape/CraftInfoState.h	/^	TextEdit *_edtCraft;$/;"	m	class:OpenXcom::CraftInfoState
_edtName	Geoscape/BaseNameState.h	/^	TextEdit *_edtName;$/;"	m	class:OpenXcom::BaseNameState
_edtNote	Menu/NotesState.h	/^	TextEdit* _edtNote;$/;"	m	class:OpenXcom::NotesState
_edtSave	Basescape/CraftEquipmentSaveState.h	/^	TextEdit *_edtSave;$/;"	m	class:OpenXcom::CraftEquipmentSaveState
_edtSave	Battlescape/InventorySaveState.h	/^	TextEdit *_edtSave;$/;"	m	class:OpenXcom::InventorySaveState
_edtSave	Menu/ListSaveState.h	/^	TextEdit *_edtSave;$/;"	m	class:OpenXcom::ListSaveState
_edtSoldier	Basescape/SoldierInfoState.h	/^	TextEdit *_edtSoldier;$/;"	m	class:OpenXcom::SoldierInfoState
_edtSoldier	Basescape/SoldierTransformationState.h	/^	TextEdit *_edtSoldier;$/;"	m	class:OpenXcom::SoldierTransformationState
_edtTitle	Geoscape/TargetInfoState.h	/^	TextEdit *_edtTitle;$/;"	m	class:OpenXcom::TargetInfoState
_edtWindowedModePositionX	Menu/SetWindowedRootState.h	/^	TextEdit *_edtWindowedModePositionX, *_edtWindowedModePositionY;$/;"	m	class:OpenXcom::SetWindowedRootState
_edtWindowedModePositionY	Menu/SetWindowedRootState.h	/^	TextEdit *_edtWindowedModePositionX, *_edtWindowedModePositionY;$/;"	m	class:OpenXcom::SetWindowedRootState
_elements	Mod/RuleInterface.h	/^	std::map <std::string, Element> _elements;$/;"	m	class:OpenXcom::RuleInterface
_emptySpaceIndex	Battlescape/MiniMapView.h	/^	int _emptySpaceIndex;$/;"	m	class:OpenXcom::MiniMapView
_enableCloseQuartersCombat	Mod/Mod.h	/^	int _enableCloseQuartersCombat, _closeQuartersAccuracyGlobal, _closeQuartersTuCostGlobal, _closeQuartersEnergyCostGlobal, _closeQuartersSneakUpGlobal;$/;"	m	class:OpenXcom::Mod
_enableNewResearchSorting	Mod/Mod.h	/^	bool _enableNewResearchSorting;$/;"	m	class:OpenXcom::Mod
_enableUnitResponseSounds	Mod/Mod.h	/^	bool _enableUnitResponseSounds;$/;"	m	class:OpenXcom::Mod
_end	Engine/Collections.h	/^		It _end;$/;"	m	class:OpenXcom::Collections::FilterIterator
_end	Engine/Collections.h	/^		It _end;$/;"	m	class:OpenXcom::Collections::Range
_end	Geoscape/DogfightState.h	/^	bool _end, _endUfoHandled, _endCraftHandled, _ufoBreakingOff, _destroyUfo, _destroyCraft, _weaponEnabled[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_end	Savegame/SavedGame.h	/^	GameEnding _end;$/;"	m	class:OpenXcom::SavedGame
_endButton	Battlescape/MedikitState.h	/^	InteractiveSurface *_endButton, *_stimulantButton, *_pkButton, *_healButton;$/;"	m	class:OpenXcom::MedikitState
_endConfirmationHandled	Battlescape/BattlescapeGame.h	/^	bool _endConfirmationHandled;$/;"	m	class:OpenXcom::BattlescapeGame
_endCraftHandled	Geoscape/DogfightState.h	/^	bool _end, _endUfoHandled, _endCraftHandled, _ufoBreakingOff, _destroyUfo, _destroyCraft, _weaponEnabled[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_endDogfight	Geoscape/DogfightState.h	/^	bool _minimized, _endDogfight, _animatingHit, _waitForPoly, _waitForAltitude;$/;"	m	class:OpenXcom::DogfightState
_endTurnProcessed	Battlescape/BattlescapeGame.h	/^	SingleRun _endTurnProcessed;$/;"	m	class:OpenXcom::BattlescapeGame
_endTurnRequested	Battlescape/BattlescapeGame.h	/^	bool _endTurnRequested;$/;"	m	class:OpenXcom::BattlescapeGame
_endType	Geoscape/ProductionCompleteState.h	/^	productionProgress_e _endType;$/;"	m	class:OpenXcom::ProductionCompleteState
_endUfoHandled	Geoscape/DogfightState.h	/^	bool _end, _endUfoHandled, _endCraftHandled, _ufoBreakingOff, _destroyUfo, _destroyCraft, _weaponEnabled[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_endlessInfiltration	Mod/RuleAlienMission.h	/^	bool _endlessInfiltration;$/;"	m	class:OpenXcom::RuleAlienMission
_energy	Savegame/BattleUnit.h	/^	int _tu, _energy, _health, _morale, _stunlevel, _mana;$/;"	m	class:OpenXcom::BattleUnit
_energyRecovery	Mod/Armor.h	/^	RuleStatBonus _timeRecovery, _energyRecovery, _moraleRecovery, _healthRecovery, _stunRecovery, _manaRecovery;$/;"	m	class:OpenXcom::Armor
_energyRecovery	Mod/RuleItem.h	/^	int _woundRecovery, _healthRecovery, _stunRecovery, _energyRecovery, _manaRecovery, _moraleRecovery, _painKillerRecovery;$/;"	m	class:OpenXcom::RuleItem
_energyRecovery	Mod/RuleSoldierBonus.h	/^	RuleStatBonus _timeRecovery, _energyRecovery, _moraleRecovery, _healthRecovery, _stunRecovery, _manaRecovery;$/;"	m	class:OpenXcom::RuleSoldierBonus
_energyRecovery	Mod/Unit.h	/^	int _intelligence, _aggression, _spotter, _sniper, _energyRecovery;$/;"	m	class:OpenXcom::Unit
_engine	Geoscape/GeoscapeState.cpp	/^	Game &_engine;$/;"	m	class:OpenXcom::GenerateSupplyMission	file:
_engineOk	Engine/ModInfo.h	/^	bool _engineOk;$/;"	m	class:OpenXcom::ModInfo
_engineers	Savegame/Base.h	/^	int _scientists, _engineers;$/;"	m	class:OpenXcom::Base
_engineers	Savegame/Production.h	/^	int _engineers;$/;"	m	class:OpenXcom::Production
_engineers	Savegame/Transfer.h	/^	int _itemQty, _scientists, _engineers;$/;"	m	class:OpenXcom::Transfer
_enhancedLighting	Battlescape/TileEngine.h	/^	const int _enhancedLighting;$/;"	m	class:OpenXcom::TileEngine
_enhancedLighting	Mod/Mod.h	/^	int _maxStaticLightDistance, _maxDynamicLightDistance, _enhancedLighting;$/;"	m	class:OpenXcom::Mod
_enter	Interface/TextEdit.h	/^	ActionHandler _enter;$/;"	m	class:OpenXcom::TextEdit
_enviroEffects	Mod/AlienDeployment.h	/^	std::string _enviroEffects, _startingCondition;$/;"	m	class:OpenXcom::AlienDeployment
_enviroEffects	Mod/Mod.h	/^	std::map<std::string, RuleEnviroEffects*> _enviroEffects;$/;"	m	class:OpenXcom::Mod
_enviroEffects	Mod/RuleTerrain.h	/^	std::string _enviroEffects;$/;"	m	class:OpenXcom::RuleTerrain
_enviroEffects	Savegame/SavedBattleGame.h	/^	const RuleEnviroEffects *_enviroEffects;$/;"	m	class:OpenXcom::SavedBattleGame
_enviroEffectsIndex	Mod/Mod.h	/^	std::vector<std::string> _aliensIndex, _enviroEffectsIndex, _startingConditionsIndex, _deploymentsIndex, _armorsIndex, _ufopaediaIndex, _ufopaediaCatIndex, _researchIndex, _manufactureIndex;$/;"	m	class:OpenXcom::Mod
_environmentalConditions	Mod/RuleEnviroEffects.h	/^	std::map<std::string, EnvironmentalCondition> _environmentalConditions;$/;"	m	class:OpenXcom::RuleEnviroEffects
_eq	Engine/Scalers/xbrz.cpp	285;"	d	file:
_equip	Basescape/CraftInfoState.h	/^	Surface *_crew, *_equip;$/;"	m	class:OpenXcom::CraftInfoState
_equipmentLayout	Savegame/Soldier.h	/^	std::vector<EquipmentLayoutItem*> _equipmentLayout;           \/\/ last used equipment layout, managed by the game$/;"	m	class:OpenXcom::Soldier
_errorShown	Basescape/TransferItemsState.h	/^	bool _errorShown;$/;"	m	class:OpenXcom::TransferItemsState
_escapeAction	Battlescape/AIModule.h	/^	BattleAction _escapeAction, _ambushAction, _attackAction, _patrolAction, _psiAction;$/;"	m	class:OpenXcom::AIModule
_escapeCountdown	Savegame/Ufo.h	/^	int _shootingAt, _hitFrame, _fireCountdown, _escapeCountdown;$/;"	m	class:OpenXcom::Ufo
_escapeTUs	Battlescape/AIModule.h	/^	int _escapeTUs, _ambushTUs;$/;"	m	class:OpenXcom::AIModule
_escapeType	Mod/AlienDeployment.h	/^	EscapeType _escapeType;$/;"	m	class:OpenXcom::AlienDeployment
_escortRange	Mod/Mod.h	/^	int _escortRange, _drawEnemyRadarCircles;$/;"	m	class:OpenXcom::Mod
_escortsJoinFightAgainstHK	Mod/Mod.h	/^	bool _escortsJoinFightAgainstHK, _hunterKillerFastRetarget;$/;"	m	class:OpenXcom::Mod
_ev	Engine/Action.h	/^	SDL_Event *_ev;$/;"	m	class:OpenXcom::Action
_event	Engine/Game.h	/^	SDL_Event _event;$/;"	m	class:OpenXcom::Game
_eventIndex	Mod/Mod.h	/^	std::vector<std::string> _alienMissionsIndex, _terrainIndex, _customPalettesIndex, _arcScriptIndex, _eventScriptIndex, _eventIndex, _missionScriptIndex;$/;"	m	class:OpenXcom::Mod
_eventRule	Geoscape/GeoscapeEventState.h	/^	const RuleEvent &_eventRule;$/;"	m	class:OpenXcom::GeoscapeEventState
_eventScriptIndex	Mod/Mod.h	/^	std::vector<std::string> _alienMissionsIndex, _terrainIndex, _customPalettesIndex, _arcScriptIndex, _eventScriptIndex, _eventIndex, _missionScriptIndex;$/;"	m	class:OpenXcom::Mod
_eventScripts	Mod/Mod.h	/^	std::map<std::string, RuleEventScript*> _eventScripts;$/;"	m	class:OpenXcom::Mod
_eventToSpawn	Battlescape/DebriefingState.h	/^	RuleEvent *_eventToSpawn;$/;"	m	class:OpenXcom::DebriefingState
_eventVisibilityObserverPos	Battlescape/TileEngine.h	/^	Position _eventVisibilitySectorL, _eventVisibilitySectorR, _eventVisibilityObserverPos;$/;"	m	class:OpenXcom::TileEngine
_eventVisibilitySectorL	Battlescape/TileEngine.h	/^	Position _eventVisibilitySectorL, _eventVisibilitySectorR, _eventVisibilityObserverPos;$/;"	m	class:OpenXcom::TileEngine
_eventVisibilitySectorR	Battlescape/TileEngine.h	/^	Position _eventVisibilitySectorL, _eventVisibilitySectorR, _eventVisibilityObserverPos;$/;"	m	class:OpenXcom::TileEngine
_eventWeights	Mod/RuleEventScript.h	/^	std::vector<std::pair<size_t, WeightedOptions*> > _eventWeights;$/;"	m	class:OpenXcom::RuleEventScript
_events	Mod/Mod.h	/^	std::map<std::string, RuleEvent*> _events;$/;"	m	class:OpenXcom::Mod
_everyItemList	Mod/RuleEvent.h	/^	std::vector<std::string> _everyItemList, _randomItemList;$/;"	m	class:OpenXcom::RuleEvent
_everyMultiItemList	Mod/RuleEvent.h	/^	std::map<std::string, int> _everyMultiItemList;$/;"	m	class:OpenXcom::RuleEvent
_executionChances	Mod/MapScript.h	/^	int _sizeX, _sizeY, _sizeZ, _executionChances, _executions, _cumulativeFrequency, _label;$/;"	m	class:OpenXcom::MapScript
_executionOdds	Mod/RuleArcScript.h	/^	int _firstMonth, _lastMonth, _executionOdds, _maxArcs, _minDifficulty, _maxDifficulty;$/;"	m	class:OpenXcom::RuleArcScript
_executionOdds	Mod/RuleEventScript.h	/^	int _firstMonth, _lastMonth, _executionOdds, _minDifficulty, _maxDifficulty;$/;"	m	class:OpenXcom::RuleEventScript
_executionOdds	Mod/RuleMissionScript.h	/^	int _firstMonth, _lastMonth, _label, _executionOdds, _targetBaseOdds, _minDifficulty, _maxRuns, _avoidRepeats, _delay, _randomDelay;$/;"	m	class:OpenXcom::RuleMissionScript
_executions	Mod/MapScript.h	/^	int _sizeX, _sizeY, _sizeZ, _executionChances, _executions, _cumulativeFrequency, _label;$/;"	m	class:OpenXcom::MapScript
_exit	Battlescape/UnitInfoState.h	/^	InteractiveSurface *_exit;$/;"	m	class:OpenXcom::UnitInfoState
_exp	Savegame/BattleUnit.h	/^	UnitStats _exp, _expTmp;$/;"	m	class:OpenXcom::BattleUnit
_expTmp	Savegame/BattleUnit.h	/^	UnitStats _exp, _expTmp;$/;"	m	class:OpenXcom::BattleUnit
_expenditures	Savegame/SavedGame.h	/^	std::vector<int64_t> _funds, _maintenance, _incomes, _expenditures;$/;"	m	class:OpenXcom::SavedGame
_experienceAwarded	Geoscape/DogfightState.h	/^	bool _firedAtLeastOnce, _experienceAwarded;$/;"	m	class:OpenXcom::DogfightState
_experienceTrainingMode	Mod/RuleItem.h	/^	ExperienceTrainingMode _experienceTrainingMode;$/;"	m	class:OpenXcom::RuleItem
_explosionCount	Geoscape/BaseDefenseState.h	/^	int _thinkcycles, _row, _passes, _gravShields, _defenses, _attacks, _explosionCount;$/;"	m	class:OpenXcom::BaseDefenseState
_explosionCounter	Battlescape/ExplosionBState.h	/^	int _explosionCounter;$/;"	m	class:OpenXcom::ExplosionBState
_explosionHitSound	Mod/RuleItem.h	/^	std::vector<int> _meleeHitSound, _explosionHitSound, _psiSound;$/;"	m	class:OpenXcom::RuleItem
_explosionInFOV	Battlescape/Map.h	/^	bool _explosionInFOV, _launch;$/;"	m	class:OpenXcom::Map
_explosionSpeed	Mod/RuleItem.h	/^	int _listOrder, _maxRange, _minRange, _dropoff, _bulletSpeed, _explosionSpeed, _shotgunPellets;$/;"	m	class:OpenXcom::RuleItem
_explosions	Battlescape/Map.h	/^	std::list<Explosion *> _explosions;$/;"	m	class:OpenXcom::Map
_explosive	Mod/MapData.h	/^	int _armor, _flammable, _fuel, _explosive, _explosiveType, _bigWall;$/;"	m	class:OpenXcom::MapData
_explosive	Savegame/Tile.h	/^	Sint16 _explosive = 0;$/;"	m	class:OpenXcom::Tile
_explosiveType	Mod/MapData.h	/^	int _armor, _flammable, _fuel, _explosive, _explosiveType, _bigWall;$/;"	m	class:OpenXcom::MapData
_explosiveType	Savegame/Tile.h	/^	Uint8 _explosiveType = 0;$/;"	m	class:OpenXcom::Tile
_explosives	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_exposedUnits	Savegame/SavedBattleGame.h	/^	std::vector<BattleUnit*> _exposedUnits;$/;"	m	class:OpenXcom::SavedBattleGame
_externalResourceDirs	Engine/ModInfo.h	/^	std::vector<std::string> _externalResourceDirs;$/;"	m	class:OpenXcom::ModInfo
_extraFrame	Battlescape/UnitDieBState.h	/^	int _extraFrame;$/;"	m	class:OpenXcom::UnitDieBState
_extraGlobeLabels	Mod/Mod.h	/^	std::map<std::string, RuleCountry*> _countries, _extraGlobeLabels;$/;"	m	class:OpenXcom::Mod
_extraGlobeLabelsIndex	Mod/Mod.h	/^	std::vector<std::string> _countriesIndex, _extraGlobeLabelsIndex, _regionsIndex, _facilitiesIndex, _craftsIndex, _craftWeaponsIndex, _itemCategoriesIndex, _itemsIndex, _invsIndex, _ufosIndex;$/;"	m	class:OpenXcom::Mod
_extraNerdyPediaInfoType	Mod/Mod.h	/^	int _extraNerdyPediaInfoType;$/;"	m	class:OpenXcom::Mod
_extraSounds	Mod/Mod.h	/^	std::vector<std::pair<std::string, ExtraSounds *> > _extraSounds;$/;"	m	class:OpenXcom::Mod
_extraSprites	Mod/Mod.h	/^	std::map<std::string, std::vector<ExtraSprites *> > _extraSprites;$/;"	m	class:OpenXcom::Mod
_extraStrings	Mod/Mod.h	/^	std::map<std::string, ExtraStrings *> _extraStrings;$/;"	m	class:OpenXcom::Mod
_fac	Basescape/DismantleFacilityState.h	/^	BaseFacility *_fac;$/;"	m	class:OpenXcom::DismantleFacilityState
_faceColor	Mod/Armor.h	/^	std::vector<int> _faceColor, _hairColor, _utileColor, _rankColor;$/;"	m	class:OpenXcom::Armor
_faceColorGroup	Mod/Armor.h	/^	int _faceColorGroup, _hairColorGroup, _utileColorGroup, _rankColorGroup;$/;"	m	class:OpenXcom::Armor
_faceDirection	Savegame/BattleUnit.h	/^	int _faceDirection; \/\/ used only during strafing moves$/;"	m	class:OpenXcom::BattleUnit
_facilities	Basescape/BaseView.h	/^	BaseFacility *_facilities[BASE_SIZE][BASE_SIZE], *_selFacility;$/;"	m	class:OpenXcom::BaseView
_facilities	Basescape/BuildFacilitiesState.h	/^	std::vector<RuleBaseFacility*> _facilities, _disabledFacilities;$/;"	m	class:OpenXcom::BuildFacilitiesState
_facilities	Mod/Mod.h	/^	std::map<std::string, RuleBaseFacility*> _facilities;$/;"	m	class:OpenXcom::Mod
_facilities	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_facilities	Savegame/Base.h	/^	std::vector<BaseFacility*> _facilities;$/;"	m	class:OpenXcom::Base
_facilitiesIndex	Mod/Mod.h	/^	std::vector<std::string> _countriesIndex, _extraGlobeLabelsIndex, _regionsIndex, _facilitiesIndex, _craftsIndex, _craftWeaponsIndex, _itemCategoriesIndex, _itemsIndex, _invsIndex, _ufosIndex;$/;"	m	class:OpenXcom::Mod
_facilityListOrder	Mod/Mod.h	/^	int _facilityListOrder, _craftListOrder, _itemCategoryListOrder, _itemListOrder, _researchListOrder,  _manufactureListOrder;$/;"	m	class:OpenXcom::Mod
_facilityTriggers	Mod/RuleArcScript.h	/^	std::map<std::string, bool> _facilityTriggers;$/;"	m	class:OpenXcom::RuleArcScript
_facilityTriggers	Mod/RuleEventScript.h	/^	std::map<std::string, bool> _facilityTriggers;$/;"	m	class:OpenXcom::RuleEventScript
_facilityTriggers	Mod/RuleMissionScript.h	/^	std::map<std::string, bool> _facilityTriggers;$/;"	m	class:OpenXcom::RuleMissionScript
_facingArrowSurface	Battlescape/UnitSprite.h	/^	const SurfaceSet *_unitSurface, *_itemSurface, *_fireSurface, *_breathSurface, *_facingArrowSurface;$/;"	m	class:OpenXcom::UnitSprite
_faction	Savegame/BattleUnit.h	/^	UnitFaction _faction, _originalFaction;$/;"	m	class:OpenXcom::BattleUnit
_fade	Battlescape/WarningMessage.h	/^	Uint8 _color, _fade;$/;"	m	class:OpenXcom::WarningMessage
_fadeShade	Battlescape/Map.h	/^	int _fadeShade;$/;"	m	class:OpenXcom::Map
_fadeTimer	Battlescape/Map.h	/^	Timer *_fadeTimer;$/;"	m	class:OpenXcom::Map
_failureEvents	Mod/AlienDeployment.h	/^	WeightedOptions _genMission, _successEvents, _failureEvents, _despawnEvents;$/;"	m	class:OpenXcom::AlienDeployment
_fakeGroup	Interface/ToggleTextButton.h	/^	TextButton *_fakeGroup;$/;"	m	class:OpenXcom::ToggleTextButton
_fakeUnderwater	Mod/RuleBaseFacility.h	/^	int _fakeUnderwater;$/;"	m	class:OpenXcom::RuleBaseFacility
_fakeUnderwater	Mod/Texture.h	/^	bool _fakeUnderwater;$/;"	m	class:OpenXcom::Texture
_fakeUnderwater	Savegame/Base.h	/^	bool _fakeUnderwater;$/;"	m	class:OpenXcom::Base
_fakeUnderwaterBaseUnlockResearch	Mod/Mod.h	/^	std::string _fontName, _finalResearch, _psiUnlockResearch, _fakeUnderwaterBaseUnlockResearch, _newBaseUnlockResearch;$/;"	m	class:OpenXcom::Mod
_fakeUnderwaterSpawnChance	Mod/AlienDeployment.h	/^	int _fakeUnderwaterSpawnChance;$/;"	m	class:OpenXcom::AlienDeployment
_fakeWaterLandingChance	Mod/RuleUfo.h	/^	int _fakeWaterLandingChance;$/;"	m	class:OpenXcom::RuleUfo
_fallPhase	Savegame/BattleUnit.h	/^	int _walkPhase, _fallPhase;$/;"	m	class:OpenXcom::BattleUnit
_falling	Battlescape/UnitWalkBState.h	/^	bool _falling;$/;"	m	class:OpenXcom::UnitWalkBState
_fallingUnits	Savegame/SavedBattleGame.h	/^	std::list<BattleUnit*> _fallingUnits;$/;"	m	class:OpenXcom::SavedBattleGame
_fatalShotBodyPart	Savegame/BattleUnit.h	/^	UnitBodyPart _fatalShotBodyPart;$/;"	m	class:OpenXcom::BattleUnit
_fatalShotSide	Savegame/BattleUnit.h	/^	UnitSide _fatalShotSide;$/;"	m	class:OpenXcom::BattleUnit
_fatalWounds	Savegame/BattleUnit.h	/^	int _fatalWounds[BODYPART_MAX];$/;"	m	class:OpenXcom::BattleUnit
_fearImmune	Mod/Armor.h	/^	Sint8  _fearImmune, _bleedImmune, _painImmune, _zombiImmune;$/;"	m	class:OpenXcom::Armor
_femaleCallsign	Mod/SoldierNamePool.h	/^	std::vector<std::string> _maleFirst, _femaleFirst, _maleLast, _femaleLast, _maleCallsign, _femaleCallsign;$/;"	m	class:OpenXcom::SoldierNamePool
_femaleFirst	Mod/SoldierNamePool.h	/^	std::vector<std::string> _maleFirst, _femaleFirst, _maleLast, _femaleLast, _maleCallsign, _femaleCallsign;$/;"	m	class:OpenXcom::SoldierNamePool
_femaleFrequency	Mod/RuleSoldier.h	/^	int _femaleFrequency, _value, _transferTime, _moraleLossWhenKilled;$/;"	m	class:OpenXcom::RuleSoldier
_femaleFrequency	Mod/SoldierNamePool.h	/^	int _totalWeight, _femaleFrequency;$/;"	m	class:OpenXcom::SoldierNamePool
_femaleLast	Mod/SoldierNamePool.h	/^	std::vector<std::string> _maleFirst, _femaleFirst, _maleLast, _femaleLast, _maleCallsign, _femaleCallsign;$/;"	m	class:OpenXcom::SoldierNamePool
_file	Mod/CustomPalettes.h	/^	std::string _type, _target, _file;$/;"	m	class:OpenXcom::CustomPalettes
_fileBuf	Engine/FlcPlayer.h	/^	Uint8 *_fileBuf;$/;"	m	class:OpenXcom::FlcPlayer
_fileName	Menu/ConfirmLoadState.h	/^	std::string _fileName;$/;"	m	class:OpenXcom::ConfirmLoadState
_fileSize	Engine/FlcPlayer.h	/^	Uint32 _fileSize;$/;"	m	class:OpenXcom::FlcPlayer
_filename	Engine/CatFile.h	/^	std::string _filename;$/;"	m	class:OpenXcom::CatFile
_filename	Menu/DeleteGameState.h	/^	std::string _filename;$/;"	m	class:OpenXcom::DeleteGameState
_filename	Menu/LoadGameState.h	/^	std::string _filename;$/;"	m	class:OpenXcom::LoadGameState
_filename	Menu/SaveGameState.h	/^	std::string _filename;$/;"	m	class:OpenXcom::SaveGameState
_filter	Engine/Collections.h	/^		Filter _filter;$/;"	m	class:OpenXcom::Collections::FilterIterator
_filterFiles	Engine/FileMap.cpp	/^NameSet _filterFiles(const T &files, const std::string &ext)$/;"	f	namespace:OpenXcom::FileMap
_filterOptions	Ufopaedia/StatsForNerdsState.h	/^	std::vector<std::string> _filterOptions;$/;"	m	class:OpenXcom::StatsForNerdsState
_filtered	Menu/NewBattleState.h	/^	std::vector<size_t> _filtered;$/;"	m	class:OpenXcom::NewBattleState
_filteredListOfSoldiers	Basescape/SoldierTransformationState.h	/^	std::vector<Soldier *> *_filteredListOfSoldiers;$/;"	m	class:OpenXcom::SoldierTransformationState
_filteredListOfSoldiers	Basescape/SoldiersState.h	/^	std::vector<Soldier *> _origSoldierOrder, _filteredListOfSoldiers;$/;"	m	class:OpenXcom::SoldiersState
_filtered_article_list	Ufopaedia/UfopaediaSelectState.h	/^		ArticleDefinitionList _article_list, _filtered_article_list;$/;"	m	class:OpenXcom::UfopaediaSelectState
_filters	Menu/OptionsVideoState.h	/^	std::vector<std::string> _langs, _filters;$/;"	m	class:OpenXcom::OptionsVideoState
_finalDestination	Mod/AlienDeployment.h	/^	bool _finalDestination, _isAlienBase, _isHidden;$/;"	m	class:OpenXcom::AlienDeployment
_finalResearch	Mod/Mod.h	/^	std::string _fontName, _finalResearch, _psiUnlockResearch, _fakeUnderwaterBaseUnlockResearch, _newBaseUnlockResearch;$/;"	m	class:OpenXcom::Mod
_finance	Geoscape/GraphsState.h	/^	bool _alien, _income, _country, _finance;$/;"	m	class:OpenXcom::GraphsState
_financeLines	Geoscape/GraphsState.h	/^	std::vector<Surface *> _financeLines, _incomeLines;$/;"	m	class:OpenXcom::GraphsState
_financeToggles	Geoscape/GraphsState.h	/^	std::vector<bool> _financeToggles;$/;"	m	class:OpenXcom::GraphsState
_fire	Savegame/BattleUnit.h	/^	int _fire;$/;"	m	class:OpenXcom::BattleUnit
_fire	Savegame/Tile.h	/^		Uint8 _fire;$/;"	m	struct:OpenXcom::Tile::SerializationKey
_fire	Savegame/Tile.h	/^	Uint8 _fire = 0;$/;"	m	class:OpenXcom::Tile
_fireCountdown	Savegame/Ufo.h	/^	int _shootingAt, _hitFrame, _fireCountdown, _escapeCountdown;$/;"	m	class:OpenXcom::Ufo
_fireMaxHit	Savegame/BattleUnit.h	/^	int _fireMaxHit;$/;"	m	class:OpenXcom::BattleUnit
_fireSound	Mod/RuleBaseFacility.h	/^	int _radarRange, _radarChance, _defense, _hitRatio, _fireSound, _hitSound, _placeSound;$/;"	m	class:OpenXcom::RuleBaseFacility
_fireSound	Mod/RuleItem.h	/^	std::vector<int> _fireSound, _hitSound;$/;"	m	class:OpenXcom::RuleItem
_fireSound	Mod/RuleUfo.h	/^	int _fireSound;$/;"	m	class:OpenXcom::RuleUfo
_fireSurface	Battlescape/UnitSprite.h	/^	const SurfaceSet *_unitSurface, *_itemSurface, *_fireSurface, *_breathSurface, *_facingArrowSurface;$/;"	m	class:OpenXcom::UnitSprite
_firedAtLeastOnce	Geoscape/DogfightState.h	/^	bool _firedAtLeastOnce, _experienceAwarded;$/;"	m	class:OpenXcom::DogfightState
_first	Basescape/PlaceLiftState.h	/^	bool _first;$/;"	m	class:OpenXcom::PlaceLiftState
_first	Geoscape/BaseNameState.h	/^	bool _first;$/;"	m	class:OpenXcom::BaseNameState
_first	Geoscape/BuildNewBaseState.h	/^	bool _first;$/;"	m	class:OpenXcom::BuildNewBaseState
_firstColor	Engine/Screen.h	/^	int _numColors, _firstColor;$/;"	m	class:OpenXcom::Screen
_firstCraftTopicIndex	Basescape/TechTreeSelectState.h	/^	size_t _firstCraftTopicIndex;$/;"	m	class:OpenXcom::TechTreeSelectState
_firstFacilitiesTopicIndex	Basescape/TechTreeSelectState.h	/^	size_t _firstFacilitiesTopicIndex;$/;"	m	class:OpenXcom::TechTreeSelectState
_firstInit	Basescape/CraftEquipmentState.h	/^	bool _firstInit;$/;"	m	class:OpenXcom::CraftEquipmentState
_firstInit	Battlescape/BattlescapeState.h	/^	bool _firstInit, _paletteResetNeeded, _paletteResetRequested;$/;"	m	class:OpenXcom::BattlescapeState
_firstItemTopicIndex	Basescape/TechTreeSelectState.h	/^	size_t _firstItemTopicIndex;$/;"	m	class:OpenXcom::TechTreeSelectState
_firstManufacturingTopicIndex	Basescape/TechTreeSelectState.h	/^	size_t _firstManufacturingTopicIndex;$/;"	m	class:OpenXcom::TechTreeSelectState
_firstMonth	Mod/RuleArcScript.h	/^	int _firstMonth, _lastMonth, _executionOdds, _maxArcs, _minDifficulty, _maxDifficulty;$/;"	m	class:OpenXcom::RuleArcScript
_firstMonth	Mod/RuleEventScript.h	/^	int _firstMonth, _lastMonth, _executionOdds, _minDifficulty, _maxDifficulty;$/;"	m	class:OpenXcom::RuleEventScript
_firstMonth	Mod/RuleMissionScript.h	/^	int _firstMonth, _lastMonth, _label, _executionOdds, _targetBaseOdds, _minDifficulty, _maxRuns, _avoidRepeats, _delay, _randomDelay;$/;"	m	class:OpenXcom::RuleMissionScript
_firstRun	Menu/LoadGameState.h	/^	int _firstRun;$/;"	m	class:OpenXcom::LoadGameState
_firstRun	Menu/SaveGameState.h	/^	int _firstRun;$/;"	m	class:OpenXcom::SaveGameState
_firstValidRow	Menu/ListGamesState.h	/^	unsigned int _firstValidRow;$/;"	m	class:OpenXcom::ListGamesState
_fixed	Savegame/EquipmentLayoutItem.h	/^	bool _fixed;$/;"	m	class:OpenXcom::EquipmentLayoutItem
_fixedLocation	Geoscape/BaseNameState.h	/^	bool _fixedLocation;$/;"	m	class:OpenXcom::BaseNameState
_fixedUserOptions	Mod/Mod.h	/^	std::map<std::string, std::string> _fixedUserOptions, _recommendedUserOptions;$/;"	m	class:OpenXcom::Mod
_fixedWeapon	Mod/RuleItem.h	/^	bool _twoHanded, _blockBothHands, _fixedWeapon, _fixedWeaponShow, _isConsumable, _isFireExtinguisher;$/;"	m	class:OpenXcom::RuleItem
_fixedWeaponNames	Mod/RuleCraft.h	/^	std::string _fixedWeaponNames[WeaponMax];$/;"	m	class:OpenXcom::RuleCraft
_fixedWeaponShow	Mod/RuleItem.h	/^	bool _twoHanded, _blockBothHands, _fixedWeapon, _fixedWeaponShow, _isConsumable, _isFireExtinguisher;$/;"	m	class:OpenXcom::RuleItem
_flag	Basescape/SoldierInfoState.h	/^	InteractiveSurface *_flag;$/;"	m	class:OpenXcom::SoldierInfoState
_flagByKills	Mod/Mod.h	/^	std::vector<int> _flagByKills;$/;"	m	class:OpenXcom::Mod
_flagOffset	Mod/RuleSoldier.h	/^	int _avatarOffsetX, _avatarOffsetY, _flagOffset;$/;"	m	class:OpenXcom::RuleSoldier
_flags	Engine/Screen.h	/^	Uint32 _flags;$/;"	m	class:OpenXcom::Screen
_flags	Savegame/Node.h	/^	int _flags;     \/\/ 21 = Patrol priority in Mapview 2$/;"	m	class:OpenXcom::Node
_flammabilities	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_flammable	Mod/MapData.h	/^	int _armor, _flammable, _fuel, _explosive, _explosiveType, _bigWall;$/;"	m	class:OpenXcom::MapData
_flashScreen	Battlescape/Map.h	/^	bool _unitDying, _smoothCamera, _smoothingEngaged, _flashScreen;$/;"	m	class:OpenXcom::Map
_flat	Mod/RuleSkill.h	/^	RuleItemUseCost _flat;$/;"	m	class:OpenXcom::RuleSkill
_flatMax	Mod/RuleSoldierTransformation.h	/^	UnitStats _flatMin, _flatMax, _percentMin, _percentMax, _percentGainedMin, _percentGainedMax;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_flatMin	Mod/RuleSoldierTransformation.h	/^	UnitStats _flatMin, _flatMax, _percentMin, _percentMax, _percentGainedMin, _percentGainedMax;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_flatOverallStatChange	Mod/RuleSoldierTransformation.h	/^	UnitStats _requiredMinStats, _flatOverallStatChange, _percentOverallStatChange, _percentGainedStatChange;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_flatPrime	Mod/RuleItem.h	/^	RuleItemUseCost _flatUse, _flatThrow, _flatPrime, _flatUnprime;$/;"	m	class:OpenXcom::RuleItem
_flatThrow	Mod/RuleItem.h	/^	RuleItemUseCost _flatUse, _flatThrow, _flatPrime, _flatUnprime;$/;"	m	class:OpenXcom::RuleItem
_flatUnprime	Mod/RuleItem.h	/^	RuleItemUseCost _flatUse, _flatThrow, _flatPrime, _flatUnprime;$/;"	m	class:OpenXcom::RuleItem
_flatUse	Mod/RuleItem.h	/^	RuleItemUseCost _flatUse, _flatThrow, _flatPrime, _flatUnprime;$/;"	m	class:OpenXcom::RuleItem
_flattenedMapBlockNames	Savegame/SavedBattleGame.h	/^	std::vector< std::vector<std::string> > _flattenedMapBlockNames;$/;"	m	class:OpenXcom::SavedBattleGame
_flattenedMapTerrainNames	Savegame/SavedBattleGame.h	/^	std::vector< std::vector<std::string> > _flattenedMapTerrainNames;$/;"	m	class:OpenXcom::SavedBattleGame
_flcPlayer	Menu/VideoState.cpp	/^	FlcPlayer *_flcPlayer;$/;"	m	struct:OpenXcom::AudioSequence	file:
_flickerFix	Engine/Screen.h	/^	bool _flickerFix;$/;"	m	class:OpenXcom::Screen
_floatHeight	Mod/Armor.h	/^	int _standHeight, _kneelHeight, _floatHeight;$/;"	m	class:OpenXcom::Armor
_floatHeight	Mod/RuleSoldier.h	/^	int _standHeight, _kneelHeight, _floatHeight;$/;"	m	class:OpenXcom::RuleSoldier
_floatHeight	Mod/Unit.h	/^	int _standHeight, _kneelHeight, _floatHeight;$/;"	m	class:OpenXcom::Unit
_floatHeight	Savegame/BattleUnit.h	/^	int _standHeight, _kneelHeight, _floatHeight;$/;"	m	class:OpenXcom::BattleUnit
_floating	Savegame/BattleUnit.h	/^	bool _kneeled, _floating, _dontReselect;$/;"	m	class:OpenXcom::BattleUnit
_flooding	Interface/TextList.h	/^	bool _dot, _selectable, _condensed, _contrast, _wrap, _flooding, _ignoreSeparators;$/;"	m	class:OpenXcom::TextList
_floorAbove	Savegame/BattleUnit.h	/^	bool _hidingForTurn, _floorAbove, _respawn, _alreadyRespawned;$/;"	m	class:OpenXcom::BattleUnit
_floorSprite	Mod/RuleItem.h	/^	int _floorSprite;$/;"	m	class:OpenXcom::RuleItem
_followProjectile	Battlescape/Map.h	/^	bool _followProjectile;$/;"	m	class:OpenXcom::Map
_followers	Savegame/Target.h	/^	std::vector<MovingTarget*> _followers;$/;"	m	class:OpenXcom::Target
_font	Interface/Text.h	/^	Font *_big, *_small, *_font, *_fontOrig;$/;"	m	class:OpenXcom::Text
_font	Interface/TextList.h	/^	Font *_big, *_small, *_font;$/;"	m	class:OpenXcom::TextList
_font	Menu/StartState.h	/^	Font *_font;$/;"	m	class:OpenXcom::StartState
_fontName	Mod/Mod.h	/^	std::string _fontName, _finalResearch, _psiUnlockResearch, _fakeUnderwaterBaseUnlockResearch, _newBaseUnlockResearch;$/;"	m	class:OpenXcom::Mod
_fontOrig	Interface/Text.h	/^	Font *_big, *_small, *_font, *_fontOrig;$/;"	m	class:OpenXcom::Text
_fonts	Mod/Mod.h	/^	std::map<std::string, Font*> _fonts;$/;"	m	class:OpenXcom::Mod
_footstepSound	Mod/MapData.h	/^	int _yOffset, _TUWalk, _TUFly, _TUSlide, _terrainLevel, _footstepSound, _dieMCD, _altMCD;$/;"	m	class:OpenXcom::MapData
_footstepSounds	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_forbiddenArmors	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _allowedArmors, _forbiddenArmors;$/;"	m	class:OpenXcom::RuleStartingCondition
_forbiddenArmorsInNextStage	Mod/RuleStartingCondition.h	/^	std::vector<const Armor*> _forbiddenArmorsInNextStage;$/;"	m	class:OpenXcom::RuleStartingCondition
_forbiddenArmorsInNextStageName	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _forbiddenArmorsInNextStageName;$/;"	m	class:OpenXcom::RuleStartingCondition
_forbiddenBaseFunc	Mod/RuleBaseFacility.h	/^	RuleBaseFacilityFunctions _forbiddenBaseFunc = 0;$/;"	m	class:OpenXcom::RuleBaseFacility
_forbiddenCraft	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _allowedCraft, _forbiddenCraft;$/;"	m	class:OpenXcom::RuleStartingCondition
_forbiddenItemCategories	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _allowedItemCategories, _forbiddenItemCategories;$/;"	m	class:OpenXcom::RuleStartingCondition
_forbiddenItems	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _allowedItems, _forbiddenItems;$/;"	m	class:OpenXcom::RuleStartingCondition
_forbiddenPreviousTransformations	Mod/RuleSoldierTransformation.h	/^	std::vector<std::string > _requires, _requiredPreviousTransformations, _forbiddenPreviousTransformations;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_forbiddenSoldierTypes	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _allowedSoldierTypes, _forbiddenSoldierTypes;$/;"	m	class:OpenXcom::RuleStartingCondition
_forbiddenVehicles	Mod/RuleStartingCondition.h	/^	std::vector<std::string> _allowedVehicles, _forbiddenVehicles;$/;"	m	class:OpenXcom::RuleStartingCondition
_forceShowInMonthlyCosts	Mod/RuleCraft.h	/^	bool _mapVisible, _forceShowInMonthlyCosts;$/;"	m	class:OpenXcom::RuleCraft
_forcedTorso	Mod/Armor.h	/^	ForcedTorso _forcedTorso;$/;"	m	class:OpenXcom::Armor
_foundBaseModuleToDestroy	Battlescape/AIModule.h	/^	bool _foundBaseModuleToDestroy;$/;"	m	class:OpenXcom::AIModule
_fpsCounter	Engine/Game.h	/^	FpsCounter *_fpsCounter;$/;"	m	class:OpenXcom::Game
_frame	Battlescape/ActionMenuItem.h	/^	Frame *_frame;$/;"	m	class:OpenXcom::ActionMenuItem
_frame	Battlescape/InfoboxOKState.h	/^	Frame *_frame;$/;"	m	class:OpenXcom::InfoboxOKState
_frame	Battlescape/InfoboxState.h	/^	Frame *_frame;$/;"	m	class:OpenXcom::InfoboxState
_frame	Battlescape/MiniMapView.h	/^	int _frame;$/;"	m	class:OpenXcom::MiniMapView
_frame	Battlescape/PrimeGrenadeState.h	/^	Frame *_frame;$/;"	m	class:OpenXcom::PrimeGrenadeState
_frame	Battlescape/ScannerView.h	/^	int _frame;$/;"	m	class:OpenXcom::ScannerView
_frame	Interface/Slider.h	/^	Frame *_frame;$/;"	m	class:OpenXcom::Slider
_frameCallBack	Engine/FlcPlayer.h	/^	void (*_frameCallBack)();$/;"	m	class:OpenXcom::FlcPlayer
_frameChunks	Engine/FlcPlayer.h	/^	Uint16 _frameChunks;   \/* Number of chunks in frame *\/$/;"	m	class:OpenXcom::FlcPlayer
_frameCount	Engine/FlcPlayer.h	/^	Uint16 _frameCount;    \/* Frame Counter *\/$/;"	m	class:OpenXcom::FlcPlayer
_frameDelay	Battlescape/Explosion.h	/^	int _currentFrame, _startFrame, _frameDelay;$/;"	m	class:OpenXcom::Explosion
_frameLeft	Menu/NewBattleState.h	/^	Frame *_frameLeft, *_frameRight;$/;"	m	class:OpenXcom::NewBattleState
_frameRight	Menu/NewBattleState.h	/^	Frame *_frameLeft, *_frameRight;$/;"	m	class:OpenXcom::NewBattleState
_frameSkipStart	Engine/Timer.h	/^	Uint32 _frameSkipStart;$/;"	m	class:OpenXcom::Timer
_frameSkipping	Engine/Timer.h	/^	bool _frameSkipping;$/;"	m	class:OpenXcom::Timer
_frames	Battlescape/Explosion.h	/^	int _frames;$/;"	m	class:OpenXcom::Explosion
_frames	Engine/SurfaceSet.h	/^	std::vector<Surface> _frames;$/;"	m	class:OpenXcom::SurfaceSet
_frames	Interface/FpsCounter.h	/^	int _frames;$/;"	m	class:OpenXcom::FpsCounter
_frequencies	Mod/MapScript.h	/^	std::vector<int> _groups, _blocks, _frequencies, _maxUses, _conditionals;$/;"	m	class:OpenXcom::MapScript
_frequenciesTemp	Mod/MapScript.h	/^	std::vector<int> _groupsTemp, _blocksTemp, _frequenciesTemp, _maxUsesTemp;$/;"	m	class:OpenXcom::MapScript
_fromInventory	Battlescape/UnitInfoState.h	/^	bool _fromInventory, _mindProbe;$/;"	m	class:OpenXcom::UnitInfoState
_fromNode	Battlescape/AIModule.h	/^	Node *_fromNode, *_toNode;$/;"	m	class:OpenXcom::AIModule
_frontArmor	Mod/Armor.h	/^	int _frontArmor, _sideArmor, _leftArmorDiff, _rearArmor, _underArmor, _drawingRoutine;$/;"	m	class:OpenXcom::Armor
_frontArmor	Mod/RuleSoldierBonus.h	/^	int _frontArmor, _sideArmor, _leftArmorDiff, _rearArmor, _underArmor;$/;"	m	class:OpenXcom::RuleSoldierBonus
_fuel	Mod/MapData.h	/^	int _armor, _flammable, _fuel, _explosive, _explosiveType, _bigWall;$/;"	m	class:OpenXcom::MapData
_fuel	Savegame/Craft.h	/^	int _fuel, _damage, _shield, _interceptionOrder, _takeoff;$/;"	m	class:OpenXcom::Craft
_fuels	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_func	Engine/Functions.h	/^	InternalFunc _func;$/;"	m	class:OpenXcom::FuncRef
_funding	Savegame/Country.h	/^	std::vector<int> _funding, _activityXcom, _activityAlien;$/;"	m	class:OpenXcom::Country
_fundingBase	Mod/RuleCountry.h	/^	int _fundingBase, _fundingCap;$/;"	m	class:OpenXcom::RuleCountry
_fundingCap	Mod/RuleCountry.h	/^	int _fundingBase, _fundingCap;$/;"	m	class:OpenXcom::RuleCountry
_fundingDiff	Geoscape/MonthlyReportState.h	/^	int _ratingTotal, _fundingDiff, _lastMonthsRating;$/;"	m	class:OpenXcom::MonthlyReportState
_funds	Mod/RuleEvent.h	/^	int _points, _funds;$/;"	m	class:OpenXcom::RuleEvent
_funds	Savegame/SaveConverter.h	/^	int _year, _funds;$/;"	m	class:OpenXcom::SaveConverter
_funds	Savegame/SavedGame.h	/^	std::vector<int64_t> _funds, _maintenance, _incomes, _expenditures;$/;"	m	class:OpenXcom::SavedGame
_fuseEnabled	Savegame/BattleItem.cpp	/^BattleItem::BattleItem(const RuleItem *rules, int *id) : _id(*id), _rules(rules), _owner(0), _previousOwner(0), _unit(0), _tile(0), _inventorySlot(0), _inventoryX(0), _inventoryY(0), _ammoItem{ }, _fuseTimer(-1), _ammoQuantity(0), _painKiller(0), _heal(0), _stimulant(0), _XCOMProperty(false), _droppedOnAlienTurn(false), _isAmmo(false), _isWeaponWithAmmo(false), _fuseEnabled(false)$/;"	f	namespace:OpenXcom
_fuseEnabled	Savegame/BattleItem.h	/^	bool _XCOMProperty, _droppedOnAlienTurn, _isAmmo, _isWeaponWithAmmo, _fuseEnabled;$/;"	m	class:OpenXcom::BattleItem
_fuseTimer	Savegame/BattleItem.h	/^	int _fuseTimer, _ammoQuantity;$/;"	m	class:OpenXcom::BattleItem
_fuseTimer	Savegame/EquipmentLayoutItem.h	/^	int _fuseTimer;$/;"	m	class:OpenXcom::EquipmentLayoutItem
_fuseTriggerEvents	Mod/RuleItem.h	/^	RuleItemFuseTrigger _fuseTriggerEvents;$/;"	m	class:OpenXcom::RuleItem
_fuseType	Mod/RuleItem.h	/^	BattleFuseType _fuseType;$/;"	m	class:OpenXcom::RuleItem
_game	Basescape/SoldierSortUtil.h	/^	Game *_game;$/;"	m	struct:OpenXcom::SortFunctor
_game	Battlescape/AlienInventory.h	/^	Game *_game;$/;"	m	class:OpenXcom::AlienInventory
_game	Battlescape/BattlescapeGenerator.h	/^	Game *_game;$/;"	m	class:OpenXcom::BattlescapeGenerator
_game	Battlescape/Inventory.h	/^	Game *_game;$/;"	m	class:OpenXcom::Inventory
_game	Battlescape/Map.h	/^	Game *_game;$/;"	m	class:OpenXcom::Map
_game	Battlescape/MedikitView.h	/^	Game * _game;$/;"	m	class:OpenXcom::MedikitView
_game	Battlescape/MiniMapView.h	/^	Game * _game;$/;"	m	class:OpenXcom::MiniMapView
_game	Battlescape/ScannerView.h	/^	Game * _game;$/;"	m	class:OpenXcom::ScannerView
_game	Engine/FlcPlayer.h	/^	Game *_game;$/;"	m	class:OpenXcom::FlcPlayer
_game	Engine/State.cpp	/^Game* State::_game = 0;$/;"	m	class:OpenXcom::State	file:
_game	Engine/State.h	/^	static Game *_game;$/;"	m	class:OpenXcom::State
_game	Geoscape/Globe.h	/^	Game *_game;$/;"	m	class:OpenXcom::Globe
_gameIsInstalled	Engine/Options.cpp	/^static bool _gameIsInstalled(const std::string &gameName)$/;"	f	namespace:OpenXcom::Options
_gameOver	Geoscape/MonthlyReportState.h	/^	int _gameOver;$/;"	m	class:OpenXcom::MonthlyReportState
_gameTimer	Battlescape/BattlescapeState.h	/^	Timer *_animTimer, *_gameTimer;$/;"	m	class:OpenXcom::BattlescapeState
_gameTimer	Geoscape/GeoscapeState.h	/^	Timer *_gameTimer, *_zoomInEffectTimer, *_zoomOutEffectTimer, *_dogfightStartTimer, *_dogfightTimer;$/;"	m	class:OpenXcom::GeoscapeState
_genMission	Mod/AlienDeployment.h	/^	WeightedOptions _genMission, _successEvents, _failureEvents, _despawnEvents;$/;"	m	class:OpenXcom::AlienDeployment
_genMissionCount	Savegame/AlienBase.h	/^	int _genMissionCount;$/;"	m	class:OpenXcom::AlienBase
_genMissionFrequency	Mod/AlienDeployment.h	/^	int _markerIcon, _durationMin, _durationMax, _minDepth, _maxDepth, _genMissionFrequency, _genMissionLimit;$/;"	m	class:OpenXcom::AlienDeployment
_genMissionLimit	Mod/AlienDeployment.h	/^	int _markerIcon, _durationMin, _durationMax, _minDepth, _maxDepth, _genMissionFrequency, _genMissionLimit;$/;"	m	class:OpenXcom::AlienDeployment
_genMissionRaceFromAlienBase	Mod/AlienDeployment.h	/^	bool _genMissionRaceFromAlienBase;$/;"	m	class:OpenXcom::AlienDeployment
_gender	Savegame/BattleUnit.h	/^	SoldierGender _gender;$/;"	m	class:OpenXcom::BattleUnit
_gender	Savegame/Soldier.h	/^	SoldierGender _gender;$/;"	m	class:OpenXcom::Soldier
_gender	Savegame/SoldierAvatar.h	/^	SoldierGender _gender;$/;"	m	class:OpenXcom::SoldierAvatar
_generateFuel	Battlescape/BattlescapeGenerator.h	/^	bool _allowAutoLoadout, _baseInventory, _generateFuel, _craftDeployed, _ufoDeployed;$/;"	m	class:OpenXcom::BattlescapeGenerator
_generatedEvents	Savegame/SavedGame.h	/^	std::map<std::string, int> _generatedEvents;$/;"	m	class:OpenXcom::SavedGame
_geoscapeButton	Interface/TextButton.h	/^	bool _contrast, _geoscapeButton;$/;"	m	class:OpenXcom::TextButton
_geoscapeEvents	Savegame/SavedGame.h	/^	std::vector<GeoscapeEvent*> _geoscapeEvents;$/;"	m	class:OpenXcom::SavedGame
_geoscapeSoldier	Savegame/BattleUnit.h	/^	Soldier *_geoscapeSoldier;$/;"	m	class:OpenXcom::BattleUnit
_getOneFree	Mod/RuleResearch.h	/^	std::vector<const RuleResearch*> _dependencies, _unlocks, _disables, _reenables, _getOneFree, _requires;$/;"	m	class:OpenXcom::RuleResearch
_getOneFreeName	Mod/RuleResearch.h	/^	std::vector<std::string> _dependenciesName, _unlocksName, _disablesName, _reenablesName, _getOneFreeName, _requiresName;$/;"	m	class:OpenXcom::RuleResearch
_getOneFreeProtected	Mod/RuleResearch.h	/^	std::vector<std::pair<const RuleResearch*, std::vector<const RuleResearch*> > > _getOneFreeProtected;$/;"	m	class:OpenXcom::RuleResearch
_getOneFreeProtectedName	Mod/RuleResearch.h	/^	std::vector<std::pair<std::string, std::vector<std::string> > > _getOneFreeProtectedName;$/;"	m	class:OpenXcom::RuleResearch
_getStatFn	Basescape/SoldierSortUtil.h	/^	getStatFn_t _getStatFn;$/;"	m	struct:OpenXcom::SortFunctor
_giveScoreAlsoForResearchedArtifacts	Mod/Mod.h	/^	bool _giveScoreAlsoForResearchedArtifacts, _statisticalBulletConservation, _stunningImprovesMorale;$/;"	m	class:OpenXcom::Mod
_globalCraftLoadout	Savegame/SavedGame.h	/^	ItemContainer *_globalCraftLoadout[MAX_CRAFT_LOADOUT_TEMPLATES];$/;"	m	class:OpenXcom::SavedGame
_globalCraftLoadoutName	Savegame/SavedGame.h	/^	std::string _globalCraftLoadoutName[MAX_CRAFT_LOADOUT_TEMPLATES];$/;"	m	class:OpenXcom::SavedGame
_globalEquipmentLayout	Savegame/SavedGame.h	/^	std::vector<EquipmentLayoutItem*> _globalEquipmentLayout[MAX_EQUIPMENT_LAYOUT_TEMPLATES];$/;"	m	class:OpenXcom::SavedGame
_globalEquipmentLayoutArmor	Savegame/SavedGame.h	/^	std::string _globalEquipmentLayoutArmor[MAX_EQUIPMENT_LAYOUT_TEMPLATES];$/;"	m	class:OpenXcom::SavedGame
_globalEquipmentLayoutName	Savegame/SavedGame.h	/^	std::string _globalEquipmentLayoutName[MAX_EQUIPMENT_LAYOUT_TEMPLATES];$/;"	m	class:OpenXcom::SavedGame
_globalLayoutIndex	Battlescape/InventoryState.h	/^	int _globalLayoutIndex;$/;"	m	class:OpenXcom::InventoryState
_globalShade	Savegame/SavedBattleGame.h	/^	int _globalShade;$/;"	m	class:OpenXcom::SavedBattleGame
_globalType	Savegame/CraftWeaponProjectile.h	/^	CraftWeaponProjectileGlobalType _globalType;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_globalWeight	Mod/SoldierNamePool.h	/^	int _globalWeight;$/;"	m	class:OpenXcom::SoldierNamePool
_globe	Basescape/BasescapeState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::BasescapeState
_globe	Basescape/PlaceLiftState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::PlaceLiftState
_globe	Basescape/SelectStartFacilityState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::SelectStartFacilityState
_globe	Geoscape/BaseNameState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::BaseNameState
_globe	Geoscape/BuildNewBaseState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::BuildNewBaseState
_globe	Geoscape/ConfirmNewBaseState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::ConfirmNewBaseState
_globe	Geoscape/CraftPatrolState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::CraftPatrolState
_globe	Geoscape/GeoscapeCraftState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::GeoscapeCraftState
_globe	Geoscape/GeoscapeState.cpp	/^	const Globe &_globe;$/;"	m	class:OpenXcom::GenerateSupplyMission	file:
_globe	Geoscape/GeoscapeState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::GeoscapeState
_globe	Geoscape/InterceptState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::InterceptState
_globe	Geoscape/MonthlyReportState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::MonthlyReportState
_globe	Geoscape/NewPossibleFacilityState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::NewPossibleFacilityState
_globe	Geoscape/SelectDestinationState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::SelectDestinationState
_globe	Geoscape/TargetInfoState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::TargetInfoState
_globe	Geoscape/UfoTrackerState.h	/^	Globe *_globe;$/;"	m	class:OpenXcom::UfoTrackerState
_globe	Mod/Mod.h	/^	RuleGlobe *_globe;$/;"	m	class:OpenXcom::Mod
_globeLat	Savegame/SavedGame.h	/^	double _globeLon, _globeLat;$/;"	m	class:OpenXcom::SavedGame
_globeLon	Savegame/SavedGame.h	/^	double _globeLon, _globeLat;$/;"	m	class:OpenXcom::SavedGame
_globeTerrain	Battlescape/BattlescapeGenerator.h	/^	RuleTerrain *_terrain, *_baseTerrain, *_globeTerrain, *_alternateTerrain;$/;"	m	class:OpenXcom::BattlescapeGenerator
_globeTexture	Battlescape/BattlescapeGenerator.h	/^	Texture *_missionTexture, *_globeTexture;$/;"	m	class:OpenXcom::BattlescapeGenerator
_globeTexture	Geoscape/ConfirmLandingState.h	/^	Texture *_missionTexture, *_globeTexture;$/;"	m	class:OpenXcom::ConfirmLandingState
_globeTrotter	Savegame/SoldierDiary.h	/^	bool _globeTrotter;$/;"	m	class:OpenXcom::SoldierDiary
_globeZoom	Savegame/SavedGame.h	/^	int _globeZoom;$/;"	m	class:OpenXcom::SavedGame
_gold	Basescape/TechTreeViewerState.h	/^	Uint8 _purple, _pink, _blue, _white, _gold, _grey;$/;"	m	class:OpenXcom::TechTreeViewerState
_gold	Ufopaedia/StatsForNerdsState.h	/^	Uint8 _purple, _pink, _blue, _white, _gold;$/;"	m	class:OpenXcom::StatsForNerdsState
_graphCountryToggles	Savegame/SavedGame.h	/^	std::string _graphCountryToggles;$/;"	m	class:OpenXcom::SavedGame
_graphFinanceToggles	Savegame/SavedGame.h	/^	std::string _graphFinanceToggles;$/;"	m	class:OpenXcom::SavedGame
_graphRegionToggles	Savegame/SavedGame.h	/^	std::string _graphRegionToggles;$/;"	m	class:OpenXcom::SavedGame
_grav	Mod/RuleBaseFacility.h	/^	bool _lift, _hyper, _mind, _grav;$/;"	m	class:OpenXcom::RuleBaseFacility
_gravShields	Geoscape/BaseDefenseState.h	/^	int _thinkcycles, _row, _passes, _gravShields, _defenses, _attacks, _explosionCount;$/;"	m	class:OpenXcom::BaseDefenseState
_green	Basescape/MiniBaseView.h	/^	Uint8 _red, _green, _blue;$/;"	m	class:OpenXcom::MiniBaseView
_grenade	Battlescape/AIModule.h	/^	bool _rifle, _melee, _blaster, _grenade;$/;"	m	class:OpenXcom::AIModule
_grenadeInInventory	Battlescape/PrimeGrenadeState.h	/^	BattleItem *_grenadeInInventory;$/;"	m	class:OpenXcom::PrimeGrenadeState
_grey	Basescape/TechTreeViewerState.h	/^	Uint8 _purple, _pink, _blue, _white, _gold, _grey;$/;"	m	class:OpenXcom::TechTreeViewerState
_greyedOutColor	Menu/OptionsAdvancedState.h	/^	Uint8 _colorGroup, _greyedOutColor;$/;"	m	class:OpenXcom::OptionsAdvancedState
_grid	Battlescape/AlienInventory.h	/^	Surface *_grid, *_items;$/;"	m	class:OpenXcom::AlienInventory
_grid	Battlescape/Inventory.h	/^	Surface *_grid, *_items, *_gridLabels, *_selection;$/;"	m	class:OpenXcom::Inventory
_gridLabels	Battlescape/Inventory.h	/^	Surface *_grid, *_items, *_gridLabels, *_selection;$/;"	m	class:OpenXcom::Inventory
_gridX	Basescape/BaseView.h	/^	int _gridX, _gridY, _selSize;$/;"	m	class:OpenXcom::BaseView
_gridY	Basescape/BaseView.h	/^	int _gridX, _gridY, _selSize;$/;"	m	class:OpenXcom::BaseView
_groundOffset	Battlescape/Inventory.h	/^	int _groundOffset, _animFrame;$/;"	m	class:OpenXcom::Inventory
_groundSlotsX	Battlescape/Inventory.h	/^	int _depth, _groundSlotsX, _groundSlotsY;$/;"	m	class:OpenXcom::Inventory
_groundSlotsY	Battlescape/Inventory.h	/^	int _depth, _groundSlotsX, _groundSlotsY;$/;"	m	class:OpenXcom::Inventory
_groundTimer	Mod/UfoTrajectory.h	/^	size_t _groundTimer;$/;"	m	class:OpenXcom::UfoTrajectory
_group	Basescape/SoldierDiaryPerformanceState.h	/^	TextButton *_group;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_group	Interface/BattlescapeButton.h	/^	BattlescapeButton **_group;$/;"	m	class:OpenXcom::BattlescapeButton
_group	Interface/ImageButton.h	/^	ImageButton **_group;$/;"	m	class:OpenXcom::ImageButton
_group	Interface/TextButton.h	/^	TextButton **_group;$/;"	m	class:OpenXcom::TextButton
_group	Menu/OptionsBaseState.h	/^	TextButton *_group;$/;"	m	class:OpenXcom::OptionsBaseState
_groups	Mod/MapBlock.h	/^	std::vector<int> _groups, _revealedFloors;$/;"	m	class:OpenXcom::MapBlock
_groups	Mod/MapScript.h	/^	std::vector<int> _groups, _blocks, _frequencies, _maxUses, _conditionals;$/;"	m	class:OpenXcom::MapScript
_groupsTemp	Mod/MapScript.h	/^	std::vector<int> _groupsTemp, _blocksTemp, _frequenciesTemp, _maxUsesTemp;$/;"	m	class:OpenXcom::MapScript
_hadPreviousFacility	Savegame/BaseFacility.h	/^	bool _hadPreviousFacility;$/;"	m	class:OpenXcom::BaseFacility
_hairColor	Mod/Armor.h	/^	std::vector<int> _faceColor, _hairColor, _utileColor, _rankColor;$/;"	m	class:OpenXcom::Armor
_hairColorGroup	Mod/Armor.h	/^	int _faceColorGroup, _hairColorGroup, _utileColorGroup, _rankColorGroup;$/;"	m	class:OpenXcom::Armor
_hand	Mod/RuleInventory.h	/^	int _hand;$/;"	m	class:OpenXcom::RuleInventory
_handSprite	Mod/RuleItem.h	/^	int _handSprite, _bulletSprite;$/;"	m	class:OpenXcom::RuleItem
_handler	Engine/Language.h	/^	LanguagePlurality *_handler;$/;"	m	class:OpenXcom::Language
_happyList	Geoscape/MonthlyReportState.h	/^	std::vector<std::string> _happyList, _sadList, _pactList, _cancelPactList;$/;"	m	class:OpenXcom::MonthlyReportState
_hasAudio	Engine/FlcPlayer.h	/^	bool _hasAudio, _useInternalAudio;$/;"	m	class:OpenXcom::FlcPlayer
_hasInventory	Mod/Armor.h	/^	bool _constantAnimation, _hasInventory;$/;"	m	class:OpenXcom::Armor
_haveNoFloorBelow	Savegame/BattleUnit.h	/^	bool _haveNoFloorBelow = false;$/;"	m	class:OpenXcom::BattleUnit
_headerDepth	Engine/FlcPlayer.h	/^	Uint16 _headerDepth;   \/* Color depth *\/$/;"	m	class:OpenXcom::FlcPlayer
_headerFrames	Engine/FlcPlayer.h	/^	Uint16 _headerFrames;  \/* Number of frames in flic *\/$/;"	m	class:OpenXcom::FlcPlayer
_headerHeight	Engine/FlcPlayer.h	/^	Uint16 _headerHeight;  \/* Fli height *\/$/;"	m	class:OpenXcom::FlcPlayer
_headerSize	Engine/FlcPlayer.h	/^	Uint32 _headerSize;    \/* Fli file size *\/$/;"	m	class:OpenXcom::FlcPlayer
_headerSpeed	Engine/FlcPlayer.h	/^	Uint16 _headerSpeed;   \/* Number of video ticks between frame *\/$/;"	m	class:OpenXcom::FlcPlayer
_headerType	Engine/FlcPlayer.h	/^	Uint16 _headerType;    \/* Fli header check *\/$/;"	m	class:OpenXcom::FlcPlayer
_headerWidth	Engine/FlcPlayer.h	/^	Uint16 _headerWidth;   \/* Fli width *\/$/;"	m	class:OpenXcom::FlcPlayer
_heal	Mod/RuleItem.h	/^	int _painKiller, _heal, _stimulant;$/;"	m	class:OpenXcom::RuleItem
_heal	Savegame/BattleItem.h	/^	int _painKiller, _heal, _stimulant;$/;"	m	class:OpenXcom::BattleItem
_healButton	Battlescape/MedikitState.h	/^	InteractiveSurface *_endButton, *_stimulantButton, *_pkButton, *_healButton;$/;"	m	class:OpenXcom::MedikitState
_healTxt	Battlescape/MedikitState.h	/^	Text *_pkText, *_stimulantTxt,  *_healTxt, *_partTxt, *_woundTxt;$/;"	m	class:OpenXcom::MedikitState
_health	Savegame/BattleUnit.h	/^	int _tu, _energy, _health, _morale, _stunlevel, _mana;$/;"	m	class:OpenXcom::BattleUnit
_healthMissing	Savegame/Soldier.h	/^	int _healthMissing = 0; \/\/ amount of health missing until full health recovery, this is less serious than wound recovery.$/;"	m	class:OpenXcom::Soldier
_healthMissingWoundThreshold	Mod/Mod.h	/^	int _healthMissingWoundThreshold = 100;$/;"	m	class:OpenXcom::Mod
_healthMissingWoundThreshold	Mod/RuleSoldier.h	/^	int _healthMissingWoundThreshold = -1;$/;"	m	class:OpenXcom::RuleSoldier
_healthRecovery	Mod/Armor.h	/^	RuleStatBonus _timeRecovery, _energyRecovery, _moraleRecovery, _healthRecovery, _stunRecovery, _manaRecovery;$/;"	m	class:OpenXcom::Armor
_healthRecovery	Mod/RuleItem.h	/^	int _woundRecovery, _healthRecovery, _stunRecovery, _energyRecovery, _manaRecovery, _moraleRecovery, _painKillerRecovery;$/;"	m	class:OpenXcom::RuleItem
_healthRecovery	Mod/RuleSoldierBonus.h	/^	RuleStatBonus _timeRecovery, _energyRecovery, _moraleRecovery, _healthRecovery, _stunRecovery, _manaRecovery;$/;"	m	class:OpenXcom::RuleSoldierBonus
_healthRecoveryPerDay	Mod/RuleBaseFacility.h	/^	int _healthRecoveryPerDay = 0;$/;"	m	class:OpenXcom::RuleBaseFacility
_healthReplenishAfterMission	Mod/Mod.h	/^	bool _healthReplenishAfterMission = true;$/;"	m	class:OpenXcom::Mod
_heatVision	Mod/Armor.h	/^	int _camouflageAtDay, _camouflageAtDark, _antiCamouflageAtDay, _antiCamouflageAtDark, _heatVision, _psiVision, _psiCamouflage;$/;"	m	class:OpenXcom::Armor
_height	Engine/Surface.h	/^	Uint16 _width, _height, _pitch;$/;"	m	class:OpenXcom::Surface
_height	Engine/Surface.h	/^	Uint16 _width, _height, _pitch;$/;"	m	class:OpenXcom::SurfaceRaw
_height	Engine/SurfaceSet.h	/^	int _width, _height;$/;"	m	class:OpenXcom::SurfaceSet
_height	Mod/AlienDeployment.h	/^	int _width, _length, _height, _civilians;$/;"	m	class:OpenXcom::AlienDeployment
_height	Mod/ExtraSprites.h	/^	int _width, _height;$/;"	m	class:OpenXcom::ExtraSprites
_heightOffset	Ufopaedia/UfopaediaStartState.h	/^		int _heightOffset, _windowOffset;$/;"	m	class:OpenXcom::UfopaediaStartState
_helmet	Battlescape/UnitSprite.h	/^	bool _helmet;$/;"	m	class:OpenXcom::UnitSprite
_hidden	Mod/RuleItemCategory.h	/^	bool _hidden;$/;"	m	class:OpenXcom::RuleItemCategory
_hiddenMovementBackground	Savegame/SavedBattleGame.h	/^	std::string _hiddenMovementBackground;$/;"	m	class:OpenXcom::SavedBattleGame
_hiddenMovementBackgrounds	Mod/Mod.h	/^	std::vector<std::string> _hiddenMovementBackgrounds;$/;"	m	class:OpenXcom::Mod
_hiddenOnMinimap	Mod/RuleItem.h	/^	bool _hiddenOnMinimap;$/;"	m	class:OpenXcom::RuleItem
_hiddenPurchaseItemsMap	Savegame/SavedGame.h	/^	std::map<std::string, bool> _hiddenPurchaseItemsMap;$/;"	m	class:OpenXcom::SavedGame
_hidePediaInfo	Mod/RuleCraftWeapon.h	/^	bool _hidePediaInfo;$/;"	m	class:OpenXcom::RuleCraftWeapon
_hidePediaInfoButton	Mod/Mod.h	/^	bool _hidePediaInfoButton;$/;"	m	class:OpenXcom::Mod
_hidePower	Mod/RuleItem.h	/^	bool _hidePower;$/;"	m	class:OpenXcom::RuleItem
_hidingForTurn	Savegame/BattleUnit.h	/^	bool _hidingForTurn, _floorAbove, _respawn, _alreadyRespawned;$/;"	m	class:OpenXcom::BattleUnit
_highlightModifier	Battlescape/ActionMenuItem.h	/^	int _tu, _highlightModifier;$/;"	m	class:OpenXcom::ActionMenuItem
_highlighted	Battlescape/ActionMenuItem.h	/^	bool _highlighted;$/;"	m	class:OpenXcom::ActionMenuItem
_hireByCountryOdds	Mod/Mod.h	/^	int _costEngineer, _costScientist, _timePersonnel, _hireByCountryOdds, _hireByRegionOdds, _initialFunding;$/;"	m	class:OpenXcom::Mod
_hireByRegionOdds	Mod/Mod.h	/^	int _costEngineer, _costScientist, _timePersonnel, _hireByCountryOdds, _hireByRegionOdds, _initialFunding;$/;"	m	class:OpenXcom::Mod
_hireEngineersRequiresBaseFunc	Mod/Mod.h	/^	RuleBaseFacilityFunctions _hireScientistsRequiresBaseFunc, _hireEngineersRequiresBaseFunc;$/;"	m	class:OpenXcom::Mod
_hireEngineersUnlockResearch	Mod/Mod.h	/^	std::string _hireScientistsUnlockResearch, _hireEngineersUnlockResearch;$/;"	m	class:OpenXcom::Mod
_hireScientistsRequiresBaseFunc	Mod/Mod.h	/^	RuleBaseFacilityFunctions _hireScientistsRequiresBaseFunc, _hireEngineersRequiresBaseFunc;$/;"	m	class:OpenXcom::Mod
_hireScientistsUnlockResearch	Mod/Mod.h	/^	std::string _hireScientistsUnlockResearch, _hireEngineersUnlockResearch;$/;"	m	class:OpenXcom::Mod
_history	Basescape/TechTreeViewerState.h	/^	std::vector<std::pair<std::string, TTVMode> > _history;$/;"	m	class:OpenXcom::TechTreeViewerState
_hit	Battlescape/Explosion.h	/^	bool _big, _hit;$/;"	m	class:OpenXcom::Explosion
_hit	Battlescape/ExplosionBState.h	/^	bool _areaOfEffect, _lowerWeapon, _hit, _psi;$/;"	m	class:OpenXcom::ExplosionBState
_hitAnimFrames	Mod/RuleItem.h	/^	int _hitAnimation, _hitAnimFrames;$/;"	m	class:OpenXcom::RuleItem
_hitAnimation	Mod/RuleItem.h	/^	int _hitAnimation, _hitAnimFrames;$/;"	m	class:OpenXcom::RuleItem
_hitByAnything	Savegame/BattleUnit.h	/^	bool _hitByFire, _hitByAnything, _alreadyExploded;$/;"	m	class:OpenXcom::BattleUnit
_hitByFire	Savegame/BattleUnit.h	/^	bool _hitByFire, _hitByAnything, _alreadyExploded;$/;"	m	class:OpenXcom::BattleUnit
_hitCounter5in1Mission	Savegame/SoldierDiary.h	/^		_shotAtCounter10in1Mission,	_hitCounter5in1Mission, _timesWoundedTotal, _KIA, _allAliensKilledTotal, _allAliensStunnedTotal,$/;"	m	class:OpenXcom::SoldierDiary
_hitCounterTotal	Savegame/SoldierDiary.h	/^		_hitCounterTotal, _ironManTotal, _longDistanceHitCounterTotal, _lowAccuracyHitCounterTotal, _shotsFiredCounterTotal, _shotsLandedCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_hitFrame	Savegame/Ufo.h	/^	int _shootingAt, _hitFrame, _fireCountdown, _escapeCountdown;$/;"	m	class:OpenXcom::Ufo
_hitLog	Savegame/SavedBattleGame.h	/^	HitLog *_hitLog;$/;"	m	class:OpenXcom::SavedBattleGame
_hitMissAnimFrames	Mod/RuleItem.h	/^	int _hitMissAnimation, _hitMissAnimFrames;$/;"	m	class:OpenXcom::RuleItem
_hitMissAnimation	Mod/RuleItem.h	/^	int _hitMissAnimation, _hitMissAnimFrames;$/;"	m	class:OpenXcom::RuleItem
_hitMissSound	Mod/RuleItem.h	/^	std::vector<int> _hitMissSound;$/;"	m	class:OpenXcom::RuleItem
_hitNumber	Battlescape/MeleeAttackBState.h	/^	int _hitNumber;$/;"	m	class:OpenXcom::MeleeAttackBState
_hitRatio	Mod/RuleBaseFacility.h	/^	int _radarRange, _radarChance, _defense, _hitRatio, _fireSound, _hitSound, _placeSound;$/;"	m	class:OpenXcom::RuleBaseFacility
_hitSound	Mod/RuleBaseFacility.h	/^	int _radarRange, _radarChance, _defense, _hitRatio, _fireSound, _hitSound, _placeSound;$/;"	m	class:OpenXcom::RuleBaseFacility
_hitSound	Mod/RuleItem.h	/^	std::vector<int> _fireSound, _hitSound;$/;"	m	class:OpenXcom::RuleItem
_horizontalGroup	Mod/MapScript.h	/^	int _verticalGroup, _horizontalGroup, _crossingGroup;$/;"	m	class:OpenXcom::MapScript
_horizontalPosition	Savegame/CraftWeaponProjectile.h	/^	int _horizontalPosition;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_hour	Savegame/GameTime.h	/^	int _second, _minute, _hour, _weekday, _day, _month, _year;$/;"	m	class:OpenXcom::GameTime
_hours	Savegame/Transfer.h	/^	int _hours;$/;"	m	class:OpenXcom::Transfer
_hover	Geoscape/Globe.h	/^	bool _hover, _craft;$/;"	m	class:OpenXcom::Globe
_hoverBase	Basescape/MiniBaseView.h	/^	size_t _base, _hoverBase;$/;"	m	class:OpenXcom::MiniBaseView
_hoverLat	Geoscape/Globe.h	/^	double _cenLon, _cenLat, _rotLon, _rotLat, _hoverLon, _hoverLat;$/;"	m	class:OpenXcom::Globe
_hoverLon	Geoscape/Globe.h	/^	double _cenLon, _cenLat, _rotLon, _rotLat, _hoverLon, _hoverLat;$/;"	m	class:OpenXcom::Globe
_hoverTimer	Geoscape/BuildNewBaseState.h	/^	Timer *_hoverTimer;$/;"	m	class:OpenXcom::BuildNewBaseState
_huntAlertSound	Mod/RuleUfo.h	/^	int _huntAlertSound;$/;"	m	class:OpenXcom::RuleUfo
_huntBehavior	Mod/RuleUfo.h	/^	int _hunterKillerPercentage, _huntMode, _huntSpeed, _huntBehavior, _softlockThreshold;$/;"	m	class:OpenXcom::RuleUfo
_huntBehavior	Savegame/Ufo.h	/^	int _huntMode, _huntBehavior;$/;"	m	class:OpenXcom::Ufo
_huntMissionDistribution	Mod/AlienDeployment.h	/^	std::vector<std::pair<size_t, WeightedOptions*> > _huntMissionDistribution;$/;"	m	class:OpenXcom::AlienDeployment
_huntMissionMaxFrequency	Mod/AlienDeployment.h	/^	int _baseDetectionRange, _baseDetectionChance, _huntMissionMaxFrequency;$/;"	m	class:OpenXcom::AlienDeployment
_huntMissionRaceFromAlienBase	Mod/AlienDeployment.h	/^	bool _huntMissionRaceFromAlienBase;$/;"	m	class:OpenXcom::AlienDeployment
_huntMode	Mod/RuleUfo.h	/^	int _hunterKillerPercentage, _huntMode, _huntSpeed, _huntBehavior, _softlockThreshold;$/;"	m	class:OpenXcom::RuleUfo
_huntMode	Savegame/Ufo.h	/^	int _huntMode, _huntBehavior;$/;"	m	class:OpenXcom::Ufo
_huntSpeed	Mod/RuleUfo.h	/^	int _hunterKillerPercentage, _huntMode, _huntSpeed, _huntBehavior, _softlockThreshold;$/;"	m	class:OpenXcom::RuleUfo
_hunterKillerFastRetarget	Mod/Mod.h	/^	bool _escortsJoinFightAgainstHK, _hunterKillerFastRetarget;$/;"	m	class:OpenXcom::Mod
_hunterKillerPercentage	Mod/RuleUfo.h	/^	int _hunterKillerPercentage, _huntMode, _huntSpeed, _huntBehavior, _softlockThreshold;$/;"	m	class:OpenXcom::RuleUfo
_hyper	Mod/RuleBaseFacility.h	/^	bool _lift, _hyper, _mind, _grav;$/;"	m	class:OpenXcom::RuleBaseFacility
_hyperDetected	Savegame/Ufo.h	/^	bool _detected, _hyperDetected, _processedIntercept;$/;"	m	class:OpenXcom::Ufo
_iPrisonQty	Basescape/PurchaseState.h	/^	std::map<int, int> _iPrisonQty;$/;"	m	class:OpenXcom::PurchaseState
_iQty	Basescape/PurchaseState.h	/^	double _iQty;$/;"	m	class:OpenXcom::PurchaseState
_iQty	Basescape/TransferItemsState.h	/^	double _iQty;$/;"	m	class:OpenXcom::TransferItemsState
_iconHeight	Battlescape/Map.h	/^	int _iconHeight, _iconWidth, _messageColor;$/;"	m	class:OpenXcom::Map
_iconWidth	Battlescape/Map.h	/^	int _iconHeight, _iconWidth, _messageColor;$/;"	m	class:OpenXcom::Map
_icons	Battlescape/BattlescapeState.h	/^	InteractiveSurface *_icons;$/;"	m	class:OpenXcom::BattlescapeState
_id	Engine/ModInfo.h	/^	std::string _name, _desc, _author, _url, _id, _master;$/;"	m	class:OpenXcom::ModInfo
_id	Engine/OptionInfo.h	/^	std::string _id, _desc, _cat;$/;"	m	class:OpenXcom::OptionInfo
_id	Geoscape/UfoLostState.h	/^	std::string _id;$/;"	m	class:OpenXcom::UfoLostState
_id	Mod/AlienRace.h	/^	std::string _id;$/;"	m	class:OpenXcom::AlienRace
_id	Mod/RuleInventory.h	/^	std::string _id;$/;"	m	class:OpenXcom::RuleInventory
_id	Mod/RuleVideo.h	/^	std::string _id;$/;"	m	class:OpenXcom::RuleVideo
_id	Mod/Texture.h	/^	int _id;$/;"	m	class:OpenXcom::Texture
_id	Mod/UfoTrajectory.h	/^	std::string _id;$/;"	m	class:OpenXcom::UfoTrajectory
_id	Savegame/AlienMission.cpp	/^	int _id;$/;"	m	class:OpenXcom::matchById	file:
_id	Savegame/BattleItem.h	/^	int _id;$/;"	m	class:OpenXcom::BattleItem
_id	Savegame/BattleUnit.h	/^	int _id;$/;"	m	class:OpenXcom::BattleUnit
_id	Savegame/Node.h	/^	int _id;$/;"	m	class:OpenXcom::Node
_id	Savegame/Soldier.h	/^	int _id, _nationality, _improvement, _psiStrImprovement;$/;"	m	class:OpenXcom::Soldier
_id	Savegame/Target.h	/^	int _id;$/;"	m	class:OpenXcom::Target
_id	Savegame/Ufo.cpp	/^	int _id;$/;"	m	class:OpenXcom::matchMissionID	file:
_id	Ufopaedia/ArticleState.h	/^		std::string _id;$/;"	m	class:OpenXcom::ArticleState
_ids	Savegame/SavedGame.h	/^	std::map<std::string, int> _ids;$/;"	m	class:OpenXcom::SavedGame
_ignoreAutoNightVisionUserSetting	Mod/RuleEnviroEffects.h	/^	bool _ignoreAutoNightVisionUserSetting;$/;"	m	class:OpenXcom::RuleEnviroEffects
_ignoreBaseDefenses	Mod/RuleAlienMission.h	/^	bool _ignoreBaseDefenses;$/;"	m	class:OpenXcom::RuleAlienMission
_ignoreInBaseDefense	Mod/RuleItem.h	/^	bool _recover, _recoverCorpse, _ignoreInBaseDefense, _ignoreInCraftEquip, _liveAlien;$/;"	m	class:OpenXcom::RuleItem
_ignoreInCraftEquip	Mod/RuleItem.h	/^	bool _recover, _recoverCorpse, _ignoreInBaseDefense, _ignoreInCraftEquip, _liveAlien;$/;"	m	class:OpenXcom::RuleItem
_ignoreSeparators	Interface/Text.h	/^	bool _wrap, _invert, _contrast, _indent, _scroll, _ignoreSeparators;$/;"	m	class:OpenXcom::Text
_ignoreSeparators	Interface/TextList.h	/^	bool _dot, _selectable, _condensed, _contrast, _wrap, _flooding, _ignoreSeparators;$/;"	m	class:OpenXcom::TextList
_ignoredByAI	Mod/Unit.h	/^	bool _cosmetic, _ignoredByAI;$/;"	m	class:OpenXcom::Unit
_ignoredUfos	Savegame/SavedGame.h	/^	std::set<int> _ignoredUfos;$/;"	m	class:OpenXcom::SavedGame
_ignoresMeleeThreat	Mod/Armor.h	/^	Sint8 _ignoresMeleeThreat, _createsMeleeThreat;$/;"	m	class:OpenXcom::Armor
_image	Ufopaedia/ArticleStateBaseFacility.h	/^		Surface *_image;$/;"	m	class:OpenXcom::ArticleStateBaseFacility
_image	Ufopaedia/ArticleStateItem.h	/^		Surface *_image;$/;"	m	class:OpenXcom::ArticleStateItem
_image	Ufopaedia/ArticleStateUfo.h	/^		Surface *_image;$/;"	m	class:OpenXcom::ArticleStateUfo
_imageAmmo	Ufopaedia/ArticleStateItem.h	/^		Surface *_imageAmmo[3];$/;"	m	class:OpenXcom::ArticleStateItem
_images	Engine/Font.h	/^	std::vector<FontImage> _images;$/;"	m	class:OpenXcom::Font
_improvement	Savegame/Soldier.h	/^	int _id, _nationality, _improvement, _psiStrImprovement;$/;"	m	class:OpenXcom::Soldier
_in	Engine/InteractiveSurface.h	/^	ActionHandler _in, _over, _out;$/;"	m	class:OpenXcom::InteractiveSurface
_inBattlescape	Savegame/AlienBase.h	/^	bool _inBattlescape, _discovered;$/;"	m	class:OpenXcom::AlienBase
_inBattlescape	Savegame/Base.h	/^	bool _inBattlescape;$/;"	m	class:OpenXcom::Base
_inBattlescape	Savegame/Craft.h	/^	bool _lowFuel, _mission, _inBattlescape, _inDogfight;$/;"	m	class:OpenXcom::Craft
_inBattlescape	Savegame/MissionSite.h	/^	bool _inBattlescape, _detected;$/;"	m	class:OpenXcom::MissionSite
_inBattlescape	Savegame/Ufo.h	/^	bool _inBattlescape;$/;"	m	class:OpenXcom::Ufo
_inDogfight	Savegame/Craft.h	/^	bool _lowFuel, _mission, _inBattlescape, _inDogfight;$/;"	m	class:OpenXcom::Craft
_inEntrance	Battlescape/AbortMissionState.h	/^	int _inEntrance, _inExit, _outside;$/;"	m	class:OpenXcom::AbortMissionState
_inExit	Battlescape/AbortMissionState.h	/^	int _inEntrance, _inExit, _outside;$/;"	m	class:OpenXcom::AbortMissionState
_inInventoryView	Battlescape/PrimeGrenadeState.h	/^	bool _inInventoryView;$/;"	m	class:OpenXcom::PrimeGrenadeState
_includeBonusesForMinStats	Mod/RuleSoldierTransformation.h	/^	bool _includeBonusesForMinStats;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_income	Geoscape/GraphsState.h	/^	bool _alien, _income, _country, _finance;$/;"	m	class:OpenXcom::GraphsState
_incomeLines	Geoscape/GraphsState.h	/^	std::vector<Surface *> _financeLines, _incomeLines;$/;"	m	class:OpenXcom::GraphsState
_incomes	Savegame/SavedGame.h	/^	std::vector<int64_t> _funds, _maintenance, _incomes, _expenditures;$/;"	m	class:OpenXcom::SavedGame
_increaseCounter	Mod/RuleResearch.h	/^	std::vector<std::string> _decreaseCounter, _increaseCounter;$/;"	m	class:OpenXcom::RuleResearch
_indent	Interface/Text.h	/^	bool _wrap, _invert, _contrast, _indent, _scroll, _ignoreSeparators;$/;"	m	class:OpenXcom::Text
_indent	Ufopaedia/StatsForNerdsState.cpp	/^StatsForNerdsState::StatsForNerdsState(std::shared_ptr<ArticleCommonState> state, bool debug, bool ids, bool defaults) : _state{ std::move(state) }, _counter(0), _indent(false)$/;"	f	namespace:OpenXcom
_indent	Ufopaedia/StatsForNerdsState.h	/^	bool _indent;$/;"	m	class:OpenXcom::StatsForNerdsState
_index	Geoscape/ProductionCompleteState.h	/^	std::vector<std::string> _index;$/;"	m	class:OpenXcom::ProductionCompleteState
_indicatorBlue	Battlescape/BattlescapeState.h	/^	Uint8 _indicatorTextColor, _indicatorGreen, _indicatorBlue, _indicatorPurple;$/;"	m	class:OpenXcom::BattlescapeState
_indicatorGreen	Battlescape/BattlescapeState.h	/^	Uint8 _indicatorTextColor, _indicatorGreen, _indicatorBlue, _indicatorPurple;$/;"	m	class:OpenXcom::BattlescapeState
_indicatorPurple	Battlescape/BattlescapeState.h	/^	Uint8 _indicatorTextColor, _indicatorGreen, _indicatorBlue, _indicatorPurple;$/;"	m	class:OpenXcom::BattlescapeState
_indicatorTextColor	Battlescape/BattlescapeState.h	/^	Uint8 _indicatorTextColor, _indicatorGreen, _indicatorBlue, _indicatorPurple;$/;"	m	class:OpenXcom::BattlescapeState
_indices	Basescape/SoldierArmorState.h	/^	std::vector<int> _indices;$/;"	m	class:OpenXcom::SoldierArmorState
_indices	Basescape/SoldierMemorialState.h	/^	std::vector<int> _indices;$/;"	m	class:OpenXcom::SoldierMemorialState
_infinite	Savegame/Production.h	/^	bool _infinite;$/;"	m	class:OpenXcom::Production
_infiniteSupply	Mod/Armor.h	/^	bool _infiniteSupply;$/;"	m	class:OpenXcom::Armor
_info	Engine/Options.cpp	/^std::vector<OptionInfo> _info;$/;"	m	namespace:OpenXcom::Options	file:
_infoOnly	Battlescape/BriefingState.h	/^	bool _infoOnly;$/;"	m	class:OpenXcom::BriefingState
_infoboxQueue	Battlescape/BattlescapeGame.h	/^	std::vector<InfoboxOKState*> _infoboxQueue;$/;"	m	class:OpenXcom::BattlescapeGame
_init	Engine/Game.h	/^	bool _quit, _init, _update;$/;"	m	class:OpenXcom::Game
_initDone	Battlescape/DebriefingState.h	/^	bool _positiveScore, _destroyBase, _promotions, _showSellButton, _initDone;$/;"	m	class:OpenXcom::DebriefingState
_initialFunding	Mod/Mod.h	/^	int _costEngineer, _costScientist, _timePersonnel, _hireByCountryOdds, _hireByRegionOdds, _initialFunding;$/;"	m	class:OpenXcom::Mod
_initialStats	Savegame/Soldier.h	/^	UnitStats _initialStats, _currentStats, _tmpStatsWithSoldierBonuses, _tmpStatsWithAllBonuses;$/;"	m	class:OpenXcom::Soldier
_initialized	Battlescape/MeleeAttackBState.h	/^	bool _initialized;$/;"	m	class:OpenXcom::MeleeAttackBState
_initialized	Battlescape/ProjectileFlyBState.h	/^	bool _initialized, _targetFloor;$/;"	m	class:OpenXcom::ProjectileFlyBState
_initialized	Battlescape/PsiAttackBState.h	/^	bool _initialized;$/;"	m	class:OpenXcom::PsiAttackBState
_innerColor	Interface/Window.h	/^	Uint8 _innerColor;$/;"	m	class:OpenXcom::Window
_instantWoundRecovery	Mod/Armor.h	/^	bool _instantWoundRecovery;$/;"	m	class:OpenXcom::Armor
_intelligence	Battlescape/AIModule.h	/^	int _AIMode, _intelligence, _closestDist;$/;"	m	class:OpenXcom::AIModule
_intelligence	Mod/Unit.h	/^	int _intelligence, _aggression, _spotter, _sniper, _energyRecovery;$/;"	m	class:OpenXcom::Unit
_intelligence	Savegame/BattleUnit.h	/^	int _intelligence, _aggression;$/;"	m	class:OpenXcom::BattleUnit
_interceptionNumber	Geoscape/DogfightState.h	/^	int _ufoSize, _craftHeight, _currentCraftDamageColor, _interceptionNumber;$/;"	m	class:OpenXcom::DogfightState
_interceptionOrder	Savegame/Craft.h	/^	int _fuel, _damage, _shield, _interceptionOrder, _takeoff;$/;"	m	class:OpenXcom::Craft
_interceptionsCount	Geoscape/DogfightState.h	/^	size_t _interceptionsCount;$/;"	m	class:OpenXcom::DogfightState
_interfaces	Mod/Mod.h	/^	std::map<std::string, RuleInterface *> _interfaces;$/;"	m	class:OpenXcom::Mod
_interruptResearch	Mod/RuleAlienMission.h	/^	std::string _interruptResearch;$/;"	m	class:OpenXcom::RuleAlienMission
_interruptResearch	Mod/RuleEvent.h	/^	std::string _interruptResearch;$/;"	m	class:OpenXcom::RuleEvent
_interrupted	Savegame/AlienMission.h	/^	bool _interrupted, _multiUfoRetaliationInProgress;$/;"	m	class:OpenXcom::AlienMission
_interval	Engine/Timer.h	/^	int _interval;$/;"	m	class:OpenXcom::Timer
_inv	Battlescape/AlienInventoryState.h	/^	AlienInventory *_inv;$/;"	m	class:OpenXcom::AlienInventoryState
_inv	Battlescape/InventoryState.h	/^	Inventory *_inv;$/;"	m	class:OpenXcom::InventoryState
_invHeight	Mod/RuleItem.h	/^	int _waypoints, _invWidth, _invHeight;$/;"	m	class:OpenXcom::RuleItem
_invListOrder	Mod/Mod.h	/^	int _soldierBonusListOrder, _transformationListOrder, _ufopaediaListOrder, _invListOrder, _soldierListOrder;$/;"	m	class:OpenXcom::Mod
_invWidth	Mod/RuleItem.h	/^	int _waypoints, _invWidth, _invHeight;$/;"	m	class:OpenXcom::RuleItem
_inventory	Savegame/BattleUnit.h	/^	std::vector<BattleItem*> _inventory;$/;"	m	class:OpenXcom::BattleUnit
_inventory	Savegame/Tile.h	/^	std::vector<BattleItem *> _inventory;$/;"	m	class:OpenXcom::Tile
_inventoryMoveCostPercent	Mod/RuleItem.h	/^	int _inventoryMoveCostPercent = 100;$/;"	m	class:OpenXcom::RuleItem
_inventoryMoveCostPercent	Savegame/BattleItem.h	/^	int _inventoryMoveCostPercent = 0;$/;"	m	class:OpenXcom::BattleItem
_inventoryOverlapsPaperdoll	Mod/Mod.h	/^	bool _inventoryOverlapsPaperdoll;$/;"	m	class:OpenXcom::Mod
_inventoryShockIndicator	Mod/RuleEnviroEffects.h	/^	std::string _inventoryShockIndicator;$/;"	m	class:OpenXcom::RuleEnviroEffects
_inventorySlot	Savegame/BattleItem.h	/^	const RuleInventory *_inventorySlot;$/;"	m	class:OpenXcom::BattleItem
_inventorySlotBackPack	Battlescape/Inventory.h	/^	RuleInventory *_inventorySlotBackPack = nullptr;$/;"	m	class:OpenXcom::Inventory
_inventorySlotBelt	Battlescape/Inventory.h	/^	RuleInventory *_inventorySlotBelt = nullptr;$/;"	m	class:OpenXcom::Inventory
_inventorySlotGround	Battlescape/BattlescapeGenerator.h	/^	RuleInventory *_inventorySlotGround = nullptr;$/;"	m	class:OpenXcom::BattlescapeGenerator
_inventorySlotGround	Battlescape/Inventory.h	/^	RuleInventory *_inventorySlotGround = nullptr;$/;"	m	class:OpenXcom::Inventory
_inventorySlotGround	Battlescape/TileEngine.h	/^	const RuleInventory *_inventorySlotGround;$/;"	m	class:OpenXcom::TileEngine
_inventorySlotLeftHand	Battlescape/Inventory.h	/^	RuleInventory *_inventorySlotLeftHand = nullptr;$/;"	m	class:OpenXcom::Inventory
_inventorySlotRightHand	Battlescape/Inventory.h	/^	RuleInventory *_inventorySlotRightHand = nullptr;$/;"	m	class:OpenXcom::Inventory
_inventoryX	Savegame/BattleItem.h	/^	int _inventoryX, _inventoryY;$/;"	m	class:OpenXcom::BattleItem
_inventoryY	Savegame/BattleItem.h	/^	int _inventoryX, _inventoryY;$/;"	m	class:OpenXcom::BattleItem
_invert	Interface/Text.h	/^	bool _wrap, _invert, _contrast, _indent, _scroll, _ignoreSeparators;$/;"	m	class:OpenXcom::Text
_inverted	Interface/BattlescapeButton.h	/^	bool _inverted;$/;"	m	class:OpenXcom::BattlescapeButton
_inverted	Interface/ImageButton.h	/^	bool _inverted;$/;"	m	class:OpenXcom::ImageButton
_invertedColor	Interface/ToggleTextButton.h	/^	int _originalColor, _invertedColor;$/;"	m	class:OpenXcom::ToggleTextButton
_invs	Mod/Mod.h	/^	std::map<std::string, RuleInventory*> _invs;$/;"	m	class:OpenXcom::Mod
_invsIndex	Mod/Mod.h	/^	std::vector<std::string> _countriesIndex, _extraGlobeLabelsIndex, _regionsIndex, _facilitiesIndex, _craftsIndex, _craftWeaponsIndex, _itemCategoriesIndex, _itemsIndex, _invsIndex, _ufosIndex;$/;"	m	class:OpenXcom::Mod
_ironManTotal	Savegame/SoldierDiary.h	/^		_hitCounterTotal, _ironManTotal, _longDistanceHitCounterTotal, _lowAccuracyHitCounterTotal, _shotsFiredCounterTotal, _shotsLandedCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_ironman	Savegame/SavedGame.h	/^	bool _ironman;$/;"	m	class:OpenXcom::SavedGame
_isAlienBase	Mod/AlienDeployment.h	/^	bool _finalDestination, _isAlienBase, _isHidden;$/;"	m	class:OpenXcom::AlienDeployment
_isAltPressed	Battlescape/Map.h	/^	bool _anyIndicator, _isAltPressed;$/;"	m	class:OpenXcom::Map
_isAlwaysVisible	Mod/Armor.h	/^	bool _isAlwaysVisible = false;$/;"	m	class:OpenXcom::Armor
_isAmmo	Savegame/BattleItem.h	/^	bool _XCOMProperty, _droppedOnAlienTurn, _isAmmo, _isWeaponWithAmmo, _fuseEnabled;$/;"	m	class:OpenXcom::BattleItem
_isAutoPatrolling	Savegame/Craft.h	/^	bool _isAutoPatrolling;$/;"	m	class:OpenXcom::Craft
_isConsumable	Mod/RuleItem.h	/^	bool _twoHanded, _blockBothHands, _fixedWeapon, _fixedWeaponShow, _isConsumable, _isFireExtinguisher;$/;"	m	class:OpenXcom::RuleItem
_isCurrentGameType	Savegame/SavedGame.cpp	/^static bool _isCurrentGameType(const SaveInfo &saveInfo, const std::string &curMaster)$/;"	f	namespace:OpenXcom
_isDoor	Mod/MapData.h	/^	bool _isUfoDoor, _stopLOS, _isNoFloor, _isGravLift, _isDoor, _blockFire, _blockSmoke, _baseModule;$/;"	m	class:OpenXcom::MapData
_isEscort	Savegame/Ufo.h	/^	bool _isHunterKiller, _isEscort;$/;"	m	class:OpenXcom::Ufo
_isEscorting	Savegame/Ufo.h	/^	bool _isHunting, _isEscorting;$/;"	m	class:OpenXcom::Ufo
_isExplodingInHands	Mod/RuleItem.h	/^	bool _isExplodingInHands, _specialUseEmptyHand, _specialUseEmptyHandShow;$/;"	m	class:OpenXcom::RuleItem
_isFireExtinguisher	Mod/RuleItem.h	/^	bool _twoHanded, _blockBothHands, _fixedWeapon, _fixedWeaponShow, _isConsumable, _isFireExtinguisher;$/;"	m	class:OpenXcom::RuleItem
_isFocused	Engine/InteractiveSurface.h	/^	bool _isHovered, _isFocused, _listButton, _tftdMode;$/;"	m	class:OpenXcom::InteractiveSurface
_isGravLift	Mod/MapData.h	/^	bool _isUfoDoor, _stopLOS, _isNoFloor, _isGravLift, _isDoor, _blockFire, _blockSmoke, _baseModule;$/;"	m	class:OpenXcom::MapData
_isHidden	Mod/AlienDeployment.h	/^	bool _finalDestination, _isAlienBase, _isHidden;$/;"	m	class:OpenXcom::AlienDeployment
_isHovered	Engine/InteractiveSurface.h	/^	bool _isHovered, _isFocused, _listButton, _tftdMode;$/;"	m	class:OpenXcom::InteractiveSurface
_isHunterKiller	Savegame/Ufo.h	/^	bool _isHunterKiller, _isEscort;$/;"	m	class:OpenXcom::Ufo
_isHunting	Savegame/Ufo.h	/^	bool _isHunting, _isEscorting;$/;"	m	class:OpenXcom::Ufo
_isLeeroyJenkins	Mod/Unit.h	/^	bool _isLeeroyJenkins;$/;"	m	class:OpenXcom::Unit
_isLeeroyJenkins	Savegame/BattleUnit.h	/^	bool _isLeeroyJenkins;	\/\/ always charges enemy, never retreats.$/;"	m	class:OpenXcom::BattleUnit
_isMaster	Engine/ModInfo.h	/^	bool _isMaster;$/;"	m	class:OpenXcom::ModInfo
_isMaster	Menu/ModConfirmExtendedState.h	/^		bool _isMaster;$/;"	m	class:OpenXcom::ModConfirmExtendedState
_isMouseScrolled	Battlescape/BattlescapeState.h	/^	bool _isMouseScrolling, _isMouseScrolled;$/;"	m	class:OpenXcom::BattlescapeState
_isMouseScrolled	Battlescape/MiniMapView.h	/^	bool _isMouseScrolled;$/;"	m	class:OpenXcom::MiniMapView
_isMouseScrolled	Geoscape/Globe.h	/^	bool _isMouseScrolling, _isMouseScrolled;$/;"	m	class:OpenXcom::Globe
_isMouseScrolling	Battlescape/BattlescapeState.h	/^	bool _isMouseScrolling, _isMouseScrolled;$/;"	m	class:OpenXcom::BattlescapeState
_isMouseScrolling	Battlescape/MiniMapView.h	/^	bool _isMouseScrolling;$/;"	m	class:OpenXcom::MiniMapView
_isMouseScrolling	Geoscape/Globe.h	/^	bool _isMouseScrolling, _isMouseScrolled;$/;"	m	class:OpenXcom::Globe
_isNew	Savegame/SoldierDiary.h	/^	bool _isNew;$/;"	m	class:OpenXcom::SoldierCommendations
_isNewBattle	Basescape/CraftEquipmentState.h	/^	bool _isNewBattle;$/;"	m	class:OpenXcom::CraftEquipmentState
_isNoFloor	Mod/MapData.h	/^	bool _isUfoDoor, _stopLOS, _isNoFloor, _isGravLift, _isDoor, _blockFire, _blockSmoke, _baseModule;$/;"	m	class:OpenXcom::MapData
_isPilotArmor	Mod/Armor.h	/^	bool _isPilotArmor;$/;"	m	class:OpenXcom::Armor
_isPressed	Interface/ToggleTextButton.h	/^	bool _isPressed;$/;"	m	class:OpenXcom::ToggleTextButton
_isPreview	Savegame/SavedBattleGame.h	/^	bool _isPreview;$/;"	m	class:OpenXcom::SavedBattleGame
_isPsiRequired	Mod/RuleSkill.h	/^	bool _isPsiRequired;$/;"	m	class:OpenXcom::RuleSkill
_isRightClick	Menu/NewBattleState.h	/^	bool _isRightClick;$/;"	m	class:OpenXcom::NewBattleState
_isSurrendering	Savegame/BattleUnit.h	/^	bool _wantsToSurrender, _isSurrendering;$/;"	m	class:OpenXcom::BattleUnit
_isTFTD	Menu/OptionsAdvancedState.h	/^	bool _isTFTD;$/;"	m	class:OpenXcom::OptionsAdvancedState
_isUfoDoor	Mod/MapData.h	/^	bool _isUfoDoor, _stopLOS, _isNoFloor, _isGravLift, _isDoor, _blockFire, _blockSmoke, _baseModule;$/;"	m	class:OpenXcom::MapData
_isWeaponWithAmmo	Savegame/BattleItem.h	/^	bool _XCOMProperty, _droppedOnAlienTurn, _isAmmo, _isWeaponWithAmmo, _fuseEnabled;$/;"	m	class:OpenXcom::BattleItem
_item	Basescape/ManufactureInfoState.h	/^	RuleManufacture * _item;$/;"	m	class:OpenXcom::ManufactureInfoState
_item	Basescape/ManufactureStartState.h	/^	RuleManufacture *_item;$/;"	m	class:OpenXcom::ManufactureStartState
_item	Battlescape/MedikitState.h	/^	BattleItem *_item;$/;"	m	class:OpenXcom::MedikitState
_item	Battlescape/PsiAttackBState.h	/^	BattleItem *_item;$/;"	m	class:OpenXcom::PsiAttackBState
_item	Savegame/SavedGame.cpp	/^	RuleManufacture * _item;$/;"	m	struct:OpenXcom::__anon41::equalProduction	file:
_itemCategories	Mod/Mod.h	/^	std::map<std::string, RuleItemCategory*> _itemCategories;$/;"	m	class:OpenXcom::Mod
_itemCategoriesIndex	Mod/Mod.h	/^	std::vector<std::string> _countriesIndex, _extraGlobeLabelsIndex, _regionsIndex, _facilitiesIndex, _craftsIndex, _craftWeaponsIndex, _itemCategoriesIndex, _itemsIndex, _invsIndex, _ufosIndex;$/;"	m	class:OpenXcom::Mod
_itemCategoryListOrder	Mod/Mod.h	/^	int _facilityListOrder, _craftListOrder, _itemCategoryListOrder, _itemListOrder, _researchListOrder,  _manufactureListOrder;$/;"	m	class:OpenXcom::Mod
_itemId	Savegame/SavedBattleGame.h	/^	int _itemId;$/;"	m	class:OpenXcom::SavedBattleGame
_itemId	Savegame/Transfer.h	/^	std::string _itemId;$/;"	m	class:OpenXcom::Transfer
_itemL	Battlescape/UnitSprite.h	/^	const BattleItem *_itemR, *_itemL;$/;"	m	class:OpenXcom::UnitSprite
_itemList	Basescape/StoresState.h	/^	std::vector<StoredItem> _itemList;$/;"	m	class:OpenXcom::StoresState
_itemListOrder	Mod/Mod.h	/^	int _facilityListOrder, _craftListOrder, _itemCategoryListOrder, _itemListOrder, _researchListOrder,  _manufactureListOrder;$/;"	m	class:OpenXcom::Mod
_itemQty	Savegame/Transfer.h	/^	int _itemQty, _scientists, _engineers;$/;"	m	class:OpenXcom::Transfer
_itemR	Battlescape/UnitSprite.h	/^	const BattleItem *_itemR, *_itemL;$/;"	m	class:OpenXcom::UnitSprite
_itemSurface	Battlescape/ItemSprite.h	/^	const SurfaceSet *_itemSurface;$/;"	m	class:OpenXcom::ItemSprite
_itemSurface	Battlescape/UnitSprite.h	/^	const SurfaceSet *_unitSurface, *_itemSurface, *_fireSurface, *_breathSurface, *_facingArrowSurface;$/;"	m	class:OpenXcom::UnitSprite
_itemTriggers	Mod/RuleArcScript.h	/^	std::map<std::string, bool> _itemTriggers;$/;"	m	class:OpenXcom::RuleArcScript
_itemTriggers	Mod/RuleEventScript.h	/^	std::map<std::string, bool> _itemTriggers;$/;"	m	class:OpenXcom::RuleEventScript
_itemTriggers	Mod/RuleMissionScript.h	/^	std::map<std::string, bool> _itemTriggers;$/;"	m	class:OpenXcom::RuleMissionScript
_itemType	Savegame/EquipmentLayoutItem.h	/^	std::string _itemType;$/;"	m	class:OpenXcom::EquipmentLayoutItem
_items	Basescape/CraftEquipmentState.h	/^	std::vector<std::string> _items;$/;"	m	class:OpenXcom::CraftEquipmentState
_items	Basescape/PurchaseState.h	/^	std::vector<TransferRow> _items;$/;"	m	class:OpenXcom::PurchaseState
_items	Basescape/SellState.h	/^	std::vector<TransferRow> _items;$/;"	m	class:OpenXcom::SellState
_items	Basescape/TransferItemsState.h	/^	std::vector<TransferRow> _items;$/;"	m	class:OpenXcom::TransferItemsState
_items	Battlescape/AlienInventory.h	/^	Surface *_grid, *_items;$/;"	m	class:OpenXcom::AlienInventory
_items	Battlescape/Inventory.h	/^	Surface *_grid, *_items, *_gridLabels, *_selection;$/;"	m	class:OpenXcom::Inventory
_items	Engine/CatFile.h	/^	std::vector<std::tuple<void *, size_t>> _items;$/;"	m	class:OpenXcom::CatFile
_items	Mod/MapBlock.h	/^	std::map<std::string, std::vector<Position> > _items;$/;"	m	class:OpenXcom::MapBlock
_items	Mod/Mod.h	/^	std::map<std::string, RuleItem*> _items;$/;"	m	class:OpenXcom::Mod
_items	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_items	Savegame/Base.h	/^	ItemContainer *_items;$/;"	m	class:OpenXcom::Base
_items	Savegame/Craft.h	/^	ItemContainer *_items;$/;"	m	class:OpenXcom::Craft
_items	Savegame/SavedBattleGame.h	/^	std::vector<BattleItem*> _items, _deleted;$/;"	m	class:OpenXcom::SavedBattleGame
_itemsFuseTimer	Mod/MapBlock.h	/^	std::map<std::string, std::pair<int, int> > _itemsFuseTimer;$/;"	m	class:OpenXcom::MapBlock
_itemsIndex	Mod/Mod.h	/^	std::vector<std::string> _countriesIndex, _extraGlobeLabelsIndex, _regionsIndex, _facilitiesIndex, _craftsIndex, _craftWeaponsIndex, _itemCategoriesIndex, _itemsIndex, _invsIndex, _ufosIndex;$/;"	m	class:OpenXcom::Mod
_keepCraftAfterFailedMission	Mod/AlienDeployment.h	/^	bool _keepCraftAfterFailedMission, _allowObjectiveRecovery;$/;"	m	class:OpenXcom::AlienDeployment
_keepCraftAfterFailedMission	Mod/RuleCraft.h	/^	bool _keepCraftAfterFailedMission, _allowLanding, _spacecraft, _notifyWhenRefueled, _autoPatrol, _undetectable;$/;"	m	class:OpenXcom::RuleCraft
_keepSoldierArmor	Mod/RuleSoldierTransformation.h	/^	bool _keepSoldierArmor, _createsClone, _needsCorpseRecovered, _allowsDeadSoldiers, _allowsLiveSoldiers, _allowsWoundedSoldiers;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_keyPress	Engine/InteractiveSurface.h	/^	std::map<SDLKey, ActionHandler> _keyPress, _keyRelease;$/;"	m	class:OpenXcom::InteractiveSurface
_keyRelease	Engine/InteractiveSurface.h	/^	std::map<SDLKey, ActionHandler> _keyPress, _keyRelease;$/;"	m	class:OpenXcom::InteractiveSurface
_key_repeats	Battlescape/InventoryState.h	/^	int _prev_key = 0, _key_repeats = 0;$/;"	m	class:OpenXcom::InventoryState
_killCriteria	Mod/RuleCommendations.h	/^	std::vector<std::vector<std::pair<int, std::vector<std::string> > > > _killCriteria;$/;"	m	class:OpenXcom::RuleCommendations
_killList	Savegame/SoldierDiary.h	/^	std::vector<BattleUnitKills*> _killList;$/;"	m	class:OpenXcom::SoldierDiary
_killedBy	Savegame/BattleUnit.h	/^	UnitFaction _killedBy;$/;"	m	class:OpenXcom::BattleUnit
_kills	Savegame/BattleUnit.h	/^	int _kills;$/;"	m	class:OpenXcom::BattleUnit
_kills	Savegame/Soldier.h	/^	int _missions, _kills, _stuns;$/;"	m	class:OpenXcom::Soldier
_kneelBonus	Mod/RuleItem.h	/^	int _kneelBonus, _oneHandedPenalty;$/;"	m	class:OpenXcom::RuleItem
_kneelBonusGlobal	Mod/Mod.h	/^	int _kneelBonusGlobal, _oneHandedPenaltyGlobal;$/;"	m	class:OpenXcom::Mod
_kneelHeight	Mod/Armor.h	/^	int _standHeight, _kneelHeight, _floatHeight;$/;"	m	class:OpenXcom::Armor
_kneelHeight	Mod/RuleSoldier.h	/^	int _standHeight, _kneelHeight, _floatHeight;$/;"	m	class:OpenXcom::RuleSoldier
_kneelHeight	Mod/Unit.h	/^	int _standHeight, _kneelHeight, _floatHeight;$/;"	m	class:OpenXcom::Unit
_kneelHeight	Savegame/BattleUnit.h	/^	int _standHeight, _kneelHeight, _floatHeight;$/;"	m	class:OpenXcom::BattleUnit
_kneelReserved	Savegame/SavedBattleGame.h	/^	bool _kneelReserved;$/;"	m	class:OpenXcom::SavedBattleGame
_kneeled	Savegame/BattleUnit.h	/^	bool _kneeled, _floating, _dontReselect;$/;"	m	class:OpenXcom::BattleUnit
_knownEnemies	Battlescape/AIModule.h	/^	int _knownEnemies, _visibleEnemies, _spottingEnemies;$/;"	m	class:OpenXcom::AIModule
_labSpace	Geoscape/AllocatePsiTrainingState.h	/^	int _labSpace;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_label	Mod/MapScript.h	/^	int _sizeX, _sizeY, _sizeZ, _executionChances, _executions, _cumulativeFrequency, _label;$/;"	m	class:OpenXcom::MapScript
_label	Mod/RuleMissionScript.h	/^	int _firstMonth, _lastMonth, _label, _executionOdds, _targetBaseOdds, _minDifficulty, _maxRuns, _avoidRepeats, _delay, _randomDelay;$/;"	m	class:OpenXcom::RuleMissionScript
_labelColor	Mod/RuleCountry.h	/^	int _labelColor, _zoomLevel;$/;"	m	class:OpenXcom::RuleCountry
_labelLat	Mod/RuleCountry.h	/^	double _labelLon, _labelLat;$/;"	m	class:OpenXcom::RuleCountry
_labelLon	Mod/RuleCountry.h	/^	double _labelLon, _labelLat;$/;"	m	class:OpenXcom::RuleCountry
_labs	Mod/RuleBaseFacility.h	/^	int _storage, _personnel, _aliens, _crafts, _labs, _workshops, _psiLabs;$/;"	m	class:OpenXcom::RuleBaseFacility
_landId	Savegame/Ufo.h	/^	int _crashId, _landId, _damage;$/;"	m	class:OpenXcom::Ufo
_landOnly	Mod/RuleItem.h	/^	bool _LOSRequired, _underwaterOnly, _landOnly, _psiReqiured, _manaRequired;$/;"	m	class:OpenXcom::RuleItem
_landingzone	Battlescape/BattlescapeGenerator.h	/^	std::vector< std::vector<bool> > _landingzone;$/;"	m	class:OpenXcom::BattlescapeGenerator
_lang	Basescape/BaseView.h	/^	Language *_lang;$/;"	m	class:OpenXcom::BaseView
_lang	Engine/Game.h	/^	Language *_lang;$/;"	m	class:OpenXcom::Game
_lang	Interface/ComboBox.h	/^	Language *_lang;$/;"	m	class:OpenXcom::ComboBox
_lang	Interface/Text.h	/^	Language *_lang;$/;"	m	class:OpenXcom::Text
_lang	Interface/TextList.h	/^	Language *_lang;$/;"	m	class:OpenXcom::TextList
_lang	Menu/StartState.h	/^	Language *_lang;$/;"	m	class:OpenXcom::StartState
_langs	Menu/OptionsVideoState.h	/^	std::vector<std::string> _langs, _filters;$/;"	m	class:OpenXcom::OptionsVideoState
_last	Engine/Collections.h	/^		size_t _last = 1; \/\/zero is reserved for "empty"$/;"	m	class:OpenXcom::Collections::NamesToIndex
_lastCraftSkinIndex	Mod/RuleTerrain.h	/^	int _lastCraftSkinIndex;$/;"	m	class:OpenXcom::RuleTerrain
_lastEventType	Savegame/HitLog.h	/^	HitLogEntryType _lastEventType;$/;"	m	class:OpenXcom::HitLog
_lastFaction	Savegame/HitLog.h	/^	UnitFaction _lastFaction;$/;"	m	class:OpenXcom::HitLog
_lastMonth	Mod/RuleArcScript.h	/^	int _firstMonth, _lastMonth, _executionOdds, _maxArcs, _minDifficulty, _maxDifficulty;$/;"	m	class:OpenXcom::RuleArcScript
_lastMonth	Mod/RuleEventScript.h	/^	int _firstMonth, _lastMonth, _executionOdds, _minDifficulty, _maxDifficulty;$/;"	m	class:OpenXcom::RuleEventScript
_lastMonth	Mod/RuleMissionScript.h	/^	int _firstMonth, _lastMonth, _label, _executionOdds, _targetBaseOdds, _minDifficulty, _maxRuns, _avoidRepeats, _delay, _randomDelay;$/;"	m	class:OpenXcom::RuleMissionScript
_lastMonthsRating	Geoscape/MonthlyReportState.h	/^	int _ratingTotal, _fundingDiff, _lastMonthsRating;$/;"	m	class:OpenXcom::MonthlyReportState
_lastPlayerWeapon	Savegame/HitLog.h	/^	std::string _lastPlayerWeapon;$/;"	m	class:OpenXcom::HitLog
_lastPos	Savegame/BattleUnit.h	/^	Position _lastPos;$/;"	m	class:OpenXcom::BattleUnit
_lastReloadSound	Savegame/BattleUnit.h	/^	int _lastReloadSound;$/;"	m	class:OpenXcom::BattleUnit
_lastScrollPos	Basescape/SoldierDiaryPerformanceState.h	/^	int _lastScrollPos;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_lastSelectedUnit	Savegame/SavedBattleGame.h	/^	BattleUnit *_selectedUnit, *_lastSelectedUnit;$/;"	m	class:OpenXcom::SavedBattleGame
_lastUsedMapScript	Savegame/SavedBattleGame.h	/^	std::string _lastUsedMapScript;$/;"	m	class:OpenXcom::SavedBattleGame
_lastselectedArmor	Savegame/SavedGame.h	/^	std::string _lastselectedArmor; \/\/contains the last selected armor$/;"	m	class:OpenXcom::SavedGame
_lat	Mod/Polygon.h	/^	double *_lat, *_lon;$/;"	m	class:OpenXcom::Polygon
_lat	Mod/Polyline.h	/^	double *_lat, *_lon;$/;"	m	class:OpenXcom::Polyline
_lat	Savegame/AlienMission.cpp	/^	double _lon, _lat;$/;"	m	class:OpenXcom::MatchBaseCoordinates	file:
_lat	Savegame/SavedGame.cpp	/^	double _lon, _lat;$/;"	m	class:OpenXcom::ContainsPoint	file:
_lat	Savegame/SavedGame.cpp	/^	double _lon, _lat;$/;"	m	class:OpenXcom::CountryContainsPoint	file:
_lat	Savegame/Target.h	/^	double _lon, _lat;$/;"	m	class:OpenXcom::Target
_latAuto	Savegame/Craft.h	/^	double _lonAuto, _latAuto;$/;"	m	class:OpenXcom::Craft
_latBeforeMouseScrolling	Geoscape/Globe.h	/^	double _lonBeforeMouseScrolling, _latBeforeMouseScrolling;$/;"	m	class:OpenXcom::Globe
_latMax	Mod/RuleCountry.h	/^	std::vector<double> _lonMin, _lonMax, _latMin, _latMax;$/;"	m	class:OpenXcom::RuleCountry
_latMax	Mod/RuleRegion.h	/^	std::vector<double> _lonMin, _lonMax, _latMin, _latMax;$/;"	m	class:OpenXcom::RuleRegion
_latMin	Mod/RuleCountry.h	/^	std::vector<double> _lonMin, _lonMax, _latMin, _latMax;$/;"	m	class:OpenXcom::RuleCountry
_latMin	Mod/RuleRegion.h	/^	std::vector<double> _lonMin, _lonMax, _latMin, _latMax;$/;"	m	class:OpenXcom::RuleRegion
_launch	Battlescape/Map.h	/^	bool _explosionInFOV, _launch;$/;"	m	class:OpenXcom::Map
_launcher	Mod/RuleCraftWeapon.h	/^	const RuleItem* _launcher;$/;"	m	class:OpenXcom::RuleCraftWeapon
_launcherName	Mod/RuleCraftWeapon.h	/^	std::string _launcherName, _clipName;$/;"	m	class:OpenXcom::RuleCraftWeapon
_layersDefaultPrefix	Mod/Armor.h	/^	std::string _layersDefaultPrefix;$/;"	m	class:OpenXcom::Armor
_layersDefinition	Mod/Armor.h	/^	std::map<std::string, std::vector<std::string> > _layersDefinition;$/;"	m	class:OpenXcom::Armor
_layersSpecificPrefix	Mod/Armor.h	/^	std::map<int, std::string> _layersSpecificPrefix;$/;"	m	class:OpenXcom::Armor
_leavesBehindOnSell	Mod/RuleBaseFacility.h	/^	std::vector<const RuleBaseFacility*> _leavesBehindOnSell;$/;"	m	class:OpenXcom::RuleBaseFacility
_leavesBehindOnSellNames	Mod/RuleBaseFacility.h	/^	std::vector<std::string> _leavesBehindOnSellNames;$/;"	m	class:OpenXcom::RuleBaseFacility
_leftArmorDiff	Mod/Armor.h	/^	int _frontArmor, _sideArmor, _leftArmorDiff, _rearArmor, _underArmor, _drawingRoutine;$/;"	m	class:OpenXcom::Armor
_leftArmorDiff	Mod/RuleSoldierBonus.h	/^	int _frontArmor, _sideArmor, _leftArmorDiff, _rearArmor, _underArmor;$/;"	m	class:OpenXcom::RuleSoldierBonus
_leftBlackBand	Engine/Action.h	/^	int _topBlackBand, _leftBlackBand, _mouseX, _mouseY, _surfaceX, _surfaceY;$/;"	m	class:OpenXcom::Action
_leftBlackBand	Engine/Screen.h	/^	int _topBlackBand, _bottomBlackBand, _leftBlackBand, _rightBlackBand, _cursorTopBlackBand, _cursorLeftBlackBand;$/;"	m	class:OpenXcom::Screen
_leftClick	Interface/TextList.h	/^	ActionHandler _leftClick, _leftPress, _leftRelease, _rightClick, _rightPress, _rightRelease;$/;"	m	class:OpenXcom::TextList
_leftFlags	Basescape/TechTreeViewerState.h	/^	std::vector<TTVMode> _leftFlags, _rightFlags;$/;"	m	class:OpenXcom::TechTreeViewerState
_leftPress	Interface/TextList.h	/^	ActionHandler _leftClick, _leftPress, _leftRelease, _rightClick, _rightPress, _rightRelease;$/;"	m	class:OpenXcom::TextList
_leftRelease	Interface/TextList.h	/^	ActionHandler _leftClick, _leftPress, _leftRelease, _rightClick, _rightPress, _rightRelease;$/;"	m	class:OpenXcom::TextList
_leftTopics	Basescape/TechTreeViewerState.h	/^	std::vector<std::string> _leftTopics, _rightTopics;$/;"	m	class:OpenXcom::TechTreeViewerState
_length	Mod/AlienDeployment.h	/^	int _width, _length, _height, _civilians;$/;"	m	class:OpenXcom::AlienDeployment
_lessAliensDuringBaseDefense	Mod/Mod.h	/^	bool _lessAliensDuringBaseDefense;$/;"	m	class:OpenXcom::Mod
_level	Engine/Logger.h	/^	SeverityLevel _level;$/;"	m	class:OpenXcom::Logger
_lift	Basescape/PlaceLiftState.h	/^	RuleBaseFacility *_lift;$/;"	m	class:OpenXcom::PlaceLiftState
_lift	Mod/RuleBaseFacility.h	/^	bool _lift, _hyper, _mind, _grav;$/;"	m	class:OpenXcom::RuleBaseFacility
_light	Savegame/Tile.h	/^	Uint8 _light[LL_MAX];$/;"	m	class:OpenXcom::Tile
_lightSource	Mod/MapData.h	/^	int _lightSource;$/;"	m	class:OpenXcom::MapData
_limitsEnforced	Battlescape/DebriefingState.h	/^	int _limitsEnforced;$/;"	m	class:OpenXcom::DebriefingState
_lineHeight	Interface/Text.h	/^	std::vector<int> _lineWidth, _lineHeight;$/;"	m	class:OpenXcom::Text
_lineWidth	Interface/Text.h	/^	std::vector<int> _lineWidth, _lineHeight;$/;"	m	class:OpenXcom::Text
_list	Basescape/SoldierDiaryOverviewState.h	/^	std::vector<Soldier*> *_list;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_list	Basescape/SoldierDiaryPerformanceState.h	/^	std::vector<Soldier*> *_list;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_list	Basescape/SoldierInfoState.h	/^	std::vector<Soldier*> *_list;$/;"	m	class:OpenXcom::SoldierInfoState
_list	Interface/ArrowButton.h	/^	TextList *_list;$/;"	m	class:OpenXcom::ArrowButton
_list	Interface/ComboBox.h	/^	TextList *_list;$/;"	m	class:OpenXcom::ComboBox
_list	Interface/ScrollBar.h	/^	TextList *_list;$/;"	m	class:OpenXcom::ScrollBar
_listButton	Engine/InteractiveSurface.h	/^	bool _isHovered, _isFocused, _listButton, _tftdMode;$/;"	m	class:OpenXcom::InteractiveSurface
_listColor1	Ufopaedia/ArticleStateArmor.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2;$/;"	m	class:OpenXcom::ArticleStateArmor
_listColor1	Ufopaedia/ArticleStateCraftWeapon.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2;$/;"	m	class:OpenXcom::ArticleStateCraftWeapon
_listColor1	Ufopaedia/ArticleStateItem.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateItem
_listColor1	Ufopaedia/ArticleStateTFTD.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateTFTD
_listColor2	Ufopaedia/ArticleStateArmor.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2;$/;"	m	class:OpenXcom::ArticleStateArmor
_listColor2	Ufopaedia/ArticleStateCraftWeapon.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2;$/;"	m	class:OpenXcom::ArticleStateCraftWeapon
_listColor2	Ufopaedia/ArticleStateItem.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateItem
_listColor2	Ufopaedia/ArticleStateTFTD.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateTFTD
_listOrder	Mod/ArticleDefinition.h	/^		int _listOrder;$/;"	m	class:OpenXcom::ArticleDefinition
_listOrder	Mod/RuleBaseFacility.h	/^	int _listOrder, _trainingRooms;$/;"	m	class:OpenXcom::RuleBaseFacility
_listOrder	Mod/RuleCraft.h	/^	int _listOrder, _maxItems, _maxAltitude;$/;"	m	class:OpenXcom::RuleCraft
_listOrder	Mod/RuleInventory.h	/^	int _listOrder;$/;"	m	class:OpenXcom::RuleInventory
_listOrder	Mod/RuleItem.h	/^	int _listOrder, _maxRange, _minRange, _dropoff, _bulletSpeed, _explosionSpeed, _shotgunPellets;$/;"	m	class:OpenXcom::RuleItem
_listOrder	Mod/RuleItemCategory.h	/^	int _listOrder;$/;"	m	class:OpenXcom::RuleItemCategory
_listOrder	Mod/RuleManufacture.h	/^	int _listOrder;$/;"	m	class:OpenXcom::RuleManufacture
_listOrder	Mod/RuleResearch.h	/^	int _listOrder;$/;"	m	class:OpenXcom::RuleResearch
_listOrder	Mod/RuleSoldier.h	/^	int _listOrder;$/;"	m	class:OpenXcom::RuleSoldier
_listOrder	Mod/RuleSoldierBonus.h	/^	int _listOrder;$/;"	m	class:OpenXcom::RuleSoldierBonus
_listOrder	Mod/RuleSoldierTransformation.h	/^	int _listOrder, _cost, _transferTime, _recoveryTime;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_liveAlien	Mod/RuleItem.h	/^	bool _recover, _recoverCorpse, _ignoreInBaseDefense, _ignoreInCraftEquip, _liveAlien;$/;"	m	class:OpenXcom::RuleItem
_liveAlien	Mod/Unit.h	/^	const RuleItem* _liveAlien = nullptr;$/;"	m	class:OpenXcom::Unit
_liveAlienName	Mod/Unit.h	/^	std::string _civilianRecoveryType, _spawnedPersonName, _liveAlienName;$/;"	m	class:OpenXcom::Unit
_liveAlienPrisonType	Mod/RuleItem.h	/^	int _liveAlienPrisonType;$/;"	m	class:OpenXcom::RuleItem
_liveUfos	Savegame/AlienMission.h	/^	size_t _liveUfos;$/;"	m	class:OpenXcom::AlienMission
_livingWeapon	Mod/Unit.h	/^	bool _livingWeapon;$/;"	m	class:OpenXcom::Unit
_loadLastSave	Engine/Options.cpp	/^bool _loadLastSave = false;$/;"	m	namespace:OpenXcom::Options	file:
_loadLastSaveExpended	Engine/Options.cpp	/^bool _loadLastSaveExpended = false;$/;"	m	namespace:OpenXcom::Options	file:
_loadSlide	Mod/RuleVideo.cpp	/^static void _loadSlide(SlideshowSlide &slide, const YAML::Node &node)$/;"	f	namespace:OpenXcom
_loaded	Mod/ExtraSprites.h	/^	bool _loaded;$/;"	m	class:OpenXcom::ExtraSprites
_loaded	Mod/MapDataSet.h	/^	bool _loaded;$/;"	m	class:OpenXcom::MapDataSet
_loadedTerrains	Battlescape/BattlescapeGenerator.h	/^	std::map<RuleTerrain*, int> _loadedTerrains;$/;"	m	class:OpenXcom::BattlescapeGenerator
_loftID	Mod/MapData.h	/^	int _loftID[12];$/;"	m	class:OpenXcom::MapData
_loftempsSet	Mod/Armor.h	/^	std::vector<int> _loftempsSet;$/;"	m	class:OpenXcom::Armor
_loftempsSet	Savegame/BattleUnit.h	/^	std::vector<int> _loftempsSet;$/;"	m	class:OpenXcom::BattleUnit
_lon	Mod/Polygon.h	/^	double *_lat, *_lon;$/;"	m	class:OpenXcom::Polygon
_lon	Mod/Polyline.h	/^	double *_lat, *_lon;$/;"	m	class:OpenXcom::Polyline
_lon	Savegame/AlienMission.cpp	/^	double _lon, _lat;$/;"	m	class:OpenXcom::MatchBaseCoordinates	file:
_lon	Savegame/SavedGame.cpp	/^	double _lon, _lat;$/;"	m	class:OpenXcom::ContainsPoint	file:
_lon	Savegame/SavedGame.cpp	/^	double _lon, _lat;$/;"	m	class:OpenXcom::CountryContainsPoint	file:
_lon	Savegame/Target.h	/^	double _lon, _lat;$/;"	m	class:OpenXcom::Target
_lonAuto	Savegame/Craft.h	/^	double _lonAuto, _latAuto;$/;"	m	class:OpenXcom::Craft
_lonBeforeMouseScrolling	Geoscape/Globe.h	/^	double _lonBeforeMouseScrolling, _latBeforeMouseScrolling;$/;"	m	class:OpenXcom::Globe
_lonMax	Mod/RuleCountry.h	/^	std::vector<double> _lonMin, _lonMax, _latMin, _latMax;$/;"	m	class:OpenXcom::RuleCountry
_lonMax	Mod/RuleRegion.h	/^	std::vector<double> _lonMin, _lonMax, _latMin, _latMax;$/;"	m	class:OpenXcom::RuleRegion
_lonMin	Mod/RuleCountry.h	/^	std::vector<double> _lonMin, _lonMax, _latMin, _latMax;$/;"	m	class:OpenXcom::RuleCountry
_lonMin	Mod/RuleRegion.h	/^	std::vector<double> _lonMin, _lonMax, _latMin, _latMax;$/;"	m	class:OpenXcom::RuleRegion
_loneSurvivorTotal	Savegame/SoldierDiary.h	/^	int _daysWoundedTotal, _totalShotByFriendlyCounter, _totalShotFriendlyCounter, _loneSurvivorTotal, _monthsService, _unconciousTotal, _shotAtCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_longDistanceHitCounterTotal	Savegame/SoldierDiary.h	/^		_hitCounterTotal, _ironManTotal, _longDistanceHitCounterTotal, _lowAccuracyHitCounterTotal, _shotsFiredCounterTotal, _shotsLandedCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_look	Savegame/Soldier.h	/^	SoldierLook _look;$/;"	m	class:OpenXcom::Soldier
_look	Savegame/SoldierAvatar.h	/^	SoldierLook _look;$/;"	m	class:OpenXcom::SoldierAvatar
_lookVariant	Savegame/Soldier.h	/^	int _lookVariant;$/;"	m	class:OpenXcom::Soldier
_lookVariant	Savegame/SoldierAvatar.h	/^	int _lookVariant;$/;"	m	class:OpenXcom::SoldierAvatar
_lookWeights	Mod/SoldierNamePool.h	/^	std::vector<int> _lookWeights;$/;"	m	class:OpenXcom::SoldierNamePool
_lookup	Mod/Mod.cpp	/^	RuleLookup _lookup;$/;"	m	struct:OpenXcom::compareRule	file:
_lookup	Mod/RuleResearch.h	/^	std::string _name, _lookup, _cutscene, _spawnedItem, _spawnedEvent;$/;"	m	class:OpenXcom::RuleResearch
_loseCutscene	Mod/AlienDeployment.h	/^	std::string _winCutscene, _loseCutscene, _abortCutscene;$/;"	m	class:OpenXcom::AlienDeployment
_loseDefeat	Mod/Mod.h	/^	std::string _loseMoney, _loseRating, _loseDefeat;$/;"	m	class:OpenXcom::Mod
_loseGame	Mod/RuleVideo.h	/^	bool _winGame, _loseGame;$/;"	m	class:OpenXcom::RuleVideo
_loseMoney	Mod/Mod.h	/^	std::string _loseMoney, _loseRating, _loseDefeat;$/;"	m	class:OpenXcom::Mod
_loseRating	Mod/Mod.h	/^	std::string _loseMoney, _loseRating, _loseDefeat;$/;"	m	class:OpenXcom::Mod
_lowAccuracyHitCounterTotal	Savegame/SoldierDiary.h	/^		_hitCounterTotal, _ironManTotal, _longDistanceHitCounterTotal, _lowAccuracyHitCounterTotal, _shotsFiredCounterTotal, _shotsLandedCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_lowFuel	Savegame/Craft.h	/^	bool _lowFuel, _mission, _inBattlescape, _inDogfight;$/;"	m	class:OpenXcom::Craft
_lowerBoundAtMinStats	Mod/RuleSoldierTransformation.h	/^	bool _lowerBoundAtMinStats, _upperBoundAtMaxStats, _upperBoundAtStatCaps;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_lowerWeapon	Battlescape/ExplosionBState.h	/^	bool _areaOfEffect, _lowerWeapon, _hit, _psi;$/;"	m	class:OpenXcom::ExplosionBState
_lstAccessLifts	Basescape/PlaceLiftState.h	/^	TextList *_lstAccessLifts;$/;"	m	class:OpenXcom::PlaceLiftState
_lstAliens	Basescape/ManageAlienContainmentState.h	/^	TextList *_lstAliens;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_lstArmor	Basescape/SoldierArmorState.h	/^	TextList *_lstArmor;$/;"	m	class:OpenXcom::SoldierArmorState
_lstArmors	Battlescape/BriefingLightState.h	/^	TextList* _lstArmors;$/;"	m	class:OpenXcom::BriefingLightState
_lstAvatar	Basescape/SoldierAvatarState.h	/^	TextList *_lstAvatar;$/;"	m	class:OpenXcom::SoldierAvatarState
_lstBases	Basescape/TransferBaseState.h	/^	TextList *_lstBases;$/;"	m	class:OpenXcom::TransferBaseState
_lstBonuses	Basescape/SoldierBonusState.h	/^	TextList *_lstBonuses;$/;"	m	class:OpenXcom::SoldierBonusState
_lstCommendations	Basescape/SoldierDiaryPerformanceState.h	/^	TextList *_lstPerformance, *_lstKillTotals, *_lstMissionTotals, *_lstCommendations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_lstControls	Menu/OptionsControlsState.h	/^	TextList *_lstControls;$/;"	m	class:OpenXcom::OptionsControlsState
_lstCountries	Geoscape/FundingState.h	/^	TextList *_lstCountries;$/;"	m	class:OpenXcom::FundingState
_lstCrafts	Basescape/CraftsState.h	/^	TextList *_lstCrafts;$/;"	m	class:OpenXcom::CraftsState
_lstCrafts	Basescape/MonthlyCostsState.h	/^	TextList *_lstCrafts, *_lstSalaries, *_lstMaintenance, *_lstTotal;$/;"	m	class:OpenXcom::MonthlyCostsState
_lstCrafts	Geoscape/InterceptState.h	/^	TextList *_lstCrafts;$/;"	m	class:OpenXcom::InterceptState
_lstDefenses	Geoscape/BaseDefenseState.h	/^	TextList *_lstDefenses;$/;"	m	class:OpenXcom::BaseDefenseState
_lstDestroyedFacilities	Geoscape/BaseDestroyedState.h	/^	TextList *_lstDestroyedFacilities;$/;"	m	class:OpenXcom::BaseDestroyedState
_lstDiary	Basescape/SoldierDiaryOverviewState.h	/^	TextList *_lstDiary;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_lstEquipment	Basescape/CraftEquipmentState.h	/^	TextList *_lstEquipment;$/;"	m	class:OpenXcom::CraftEquipmentState
_lstFacilities	Basescape/BuildFacilitiesState.h	/^	TextList *_lstFacilities;$/;"	m	class:OpenXcom::BuildFacilitiesState
_lstFull	Basescape/TechTreeViewerState.h	/^	TextList *_lstLeft, *_lstRight, *_lstFull;$/;"	m	class:OpenXcom::TechTreeViewerState
_lstInfo	Geoscape/UfoDetectedState.h	/^	TextList *_lstInfo, *_lstInfo2;$/;"	m	class:OpenXcom::UfoDetectedState
_lstInfo	Ufopaedia/ArticleStateArmor.h	/^		TextList *_lstInfo;$/;"	m	class:OpenXcom::ArticleStateArmor
_lstInfo	Ufopaedia/ArticleStateBaseFacility.h	/^		TextList *_lstInfo;$/;"	m	class:OpenXcom::ArticleStateBaseFacility
_lstInfo	Ufopaedia/ArticleStateCraftWeapon.h	/^		TextList *_lstInfo;$/;"	m	class:OpenXcom::ArticleStateCraftWeapon
_lstInfo	Ufopaedia/ArticleStateItem.h	/^		TextList *_lstInfo;$/;"	m	class:OpenXcom::ArticleStateItem
_lstInfo	Ufopaedia/ArticleStateTFTDArmor.h	/^		TextList *_lstInfo;$/;"	m	class:OpenXcom::ArticleStateTFTDArmor
_lstInfo	Ufopaedia/ArticleStateTFTDCraftWeapon.h	/^		TextList *_lstInfo;$/;"	m	class:OpenXcom::ArticleStateTFTDCraftWeapon
_lstInfo	Ufopaedia/ArticleStateTFTDFacility.h	/^		TextList *_lstInfo;$/;"	m	class:OpenXcom::ArticleStateTFTDFacility
_lstInfo	Ufopaedia/ArticleStateTFTDItem.h	/^		TextList *_lstInfo;$/;"	m	class:OpenXcom::ArticleStateTFTDItem
_lstInfo	Ufopaedia/ArticleStateTFTDUso.h	/^		TextList *_lstInfo;$/;"	m	class:OpenXcom::ArticleStateTFTDUso
_lstInfo	Ufopaedia/ArticleStateUfo.h	/^		TextList *_lstInfo;$/;"	m	class:OpenXcom::ArticleStateUfo
_lstInfo2	Geoscape/UfoDetectedState.h	/^	TextList *_lstInfo, *_lstInfo2;$/;"	m	class:OpenXcom::UfoDetectedState
_lstItems	Basescape/PurchaseState.h	/^	TextList *_lstItems;$/;"	m	class:OpenXcom::PurchaseState
_lstItems	Basescape/SellState.h	/^	TextList *_lstItems;$/;"	m	class:OpenXcom::SellState
_lstItems	Basescape/TransferItemsState.h	/^	TextList *_lstItems;$/;"	m	class:OpenXcom::TransferItemsState
_lstItems	Battlescape/CannotReequipState.h	/^	TextList *_lstItems;$/;"	m	class:OpenXcom::CannotReequipState
_lstKillTotals	Basescape/SoldierDiaryPerformanceState.h	/^	TextList *_lstPerformance, *_lstKillTotals, *_lstMissionTotals, *_lstCommendations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_lstKills	Basescape/SoldierDiaryMissionState.h	/^	TextList *_lstKills;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_lstLayout	Battlescape/InventoryLoadState.h	/^	TextList *_lstLayout;$/;"	m	class:OpenXcom::InventoryLoadState
_lstLayout	Battlescape/InventoryPersonalState.h	/^	TextList* _lstLayout;$/;"	m	class:OpenXcom::InventoryPersonalState
_lstLayout	Battlescape/InventorySaveState.h	/^	TextList *_lstLayout;$/;"	m	class:OpenXcom::InventorySaveState
_lstLeft	Basescape/TechTreeViewerState.h	/^	TextList *_lstLeft, *_lstRight, *_lstFull;$/;"	m	class:OpenXcom::TechTreeViewerState
_lstLoadout	Basescape/CraftEquipmentLoadState.h	/^	TextList *_lstLoadout;$/;"	m	class:OpenXcom::CraftEquipmentLoadState
_lstLoadout	Basescape/CraftEquipmentSaveState.h	/^	TextList *_lstLoadout;$/;"	m	class:OpenXcom::CraftEquipmentSaveState
_lstMaintenance	Basescape/MonthlyCostsState.h	/^	TextList *_lstCrafts, *_lstSalaries, *_lstMaintenance, *_lstTotal;$/;"	m	class:OpenXcom::MonthlyCostsState
_lstManufacture	Basescape/GlobalManufactureState.h	/^	TextList *_lstManufacture;$/;"	m	class:OpenXcom::GlobalManufactureState
_lstManufacture	Basescape/ManufactureState.h	/^	TextList *_lstManufacture;$/;"	m	class:OpenXcom::ManufactureState
_lstManufacture	Basescape/NewManufactureListState.h	/^	TextList *_lstManufacture;$/;"	m	class:OpenXcom::NewManufactureListState
_lstMissionTotals	Basescape/SoldierDiaryPerformanceState.h	/^	TextList *_lstPerformance, *_lstKillTotals, *_lstMissionTotals, *_lstCommendations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_lstMods	Menu/ModListState.h	/^	TextList *_lstMods;$/;"	m	class:OpenXcom::ModListState
_lstNotes	Menu/NotesState.h	/^	TextList* _lstNotes;$/;"	m	class:OpenXcom::NotesState
_lstObjects	Geoscape/UfoTrackerState.h	/^	TextList *_lstObjects;$/;"	m	class:OpenXcom::UfoTrackerState
_lstOptions	Menu/OptionsAdvancedState.h	/^	TextList *_lstOptions;$/;"	m	class:OpenXcom::OptionsAdvancedState
_lstOutput	Menu/TestState.h	/^	TextList *_lstOutput;$/;"	m	class:OpenXcom::TestState
_lstPerformance	Basescape/SoldierDiaryPerformanceState.h	/^	TextList *_lstPerformance, *_lstKillTotals, *_lstMissionTotals, *_lstCommendations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_lstPilot	Basescape/CraftPilotSelectState.h	/^	TextList *_lstPilot;$/;"	m	class:OpenXcom::CraftPilotSelectState
_lstPilots	Basescape/CraftPilotsState.h	/^	TextList *_lstPilots;$/;"	m	class:OpenXcom::CraftPilotsState
_lstPilots	Geoscape/DogfightExperienceState.h	/^	TextList *_lstPilots;$/;"	m	class:OpenXcom::DogfightExperienceState
_lstPossibilities	Geoscape/NewPossibleCraftState.h	/^	TextList * _lstPossibilities;$/;"	m	class:OpenXcom::NewPossibleCraftState
_lstPossibilities	Geoscape/NewPossibleFacilityState.h	/^	TextList * _lstPossibilities;$/;"	m	class:OpenXcom::NewPossibleFacilityState
_lstPossibilities	Geoscape/NewPossibleManufactureState.h	/^	TextList * _lstPossibilities;$/;"	m	class:OpenXcom::NewPossibleManufactureState
_lstPossibilities	Geoscape/NewPossiblePurchaseState.h	/^	TextList * _lstPossibilities;$/;"	m	class:OpenXcom::NewPossiblePurchaseState
_lstPossibilities	Geoscape/NewPossibleResearchState.h	/^	TextList * _lstPossibilities;$/;"	m	class:OpenXcom::NewPossibleResearchState
_lstPossibilities	Geoscape/TrainingFinishedState.h	/^	TextList * _lstPossibilities;$/;"	m	class:OpenXcom::TrainingFinishedState
_lstRawData	Ufopaedia/StatsForNerdsState.h	/^	TextList *_lstRawData;$/;"	m	class:OpenXcom::StatsForNerdsState
_lstRecoveredItems	Battlescape/DebriefingState.h	/^	TextList *_lstStats, *_lstRecovery, *_lstTotal, *_lstSoldierStats, *_lstRecoveredItems;$/;"	m	class:OpenXcom::DebriefingState
_lstRecovery	Battlescape/DebriefingState.h	/^	TextList *_lstStats, *_lstRecovery, *_lstTotal, *_lstSoldierStats, *_lstRecoveredItems;$/;"	m	class:OpenXcom::DebriefingState
_lstRequiredItems	Basescape/ManufactureStartState.h	/^	TextList *_lstRequiredItems;$/;"	m	class:OpenXcom::ManufactureStartState
_lstRequiredItems	Basescape/SoldierTransformationState.h	/^	TextList *_lstRequiredItems, *_lstStatChanges;$/;"	m	class:OpenXcom::SoldierTransformationState
_lstResearch	Basescape/GlobalResearchState.h	/^	TextList *_lstResearch;$/;"	m	class:OpenXcom::GlobalResearchState
_lstResearch	Basescape/NewResearchListState.h	/^	TextList *_lstResearch;$/;"	m	class:OpenXcom::NewResearchListState
_lstResearch	Basescape/ResearchState.h	/^	TextList *_lstResearch;$/;"	m	class:OpenXcom::ResearchState
_lstRight	Basescape/TechTreeViewerState.h	/^	TextList *_lstLeft, *_lstRight, *_lstFull;$/;"	m	class:OpenXcom::TechTreeViewerState
_lstSalaries	Basescape/MonthlyCostsState.h	/^	TextList *_lstCrafts, *_lstSalaries, *_lstMaintenance, *_lstTotal;$/;"	m	class:OpenXcom::MonthlyCostsState
_lstSaves	Menu/ListGamesState.h	/^	TextList *_lstSaves;$/;"	m	class:OpenXcom::ListGamesState
_lstScroll	Basescape/BuildFacilitiesState.h	/^	size_t _lstScroll;$/;"	m	class:OpenXcom::BuildFacilitiesState
_lstScroll	Basescape/CraftEquipmentState.h	/^	size_t _lstScroll;$/;"	m	class:OpenXcom::CraftEquipmentState
_lstScroll	Basescape/NewManufactureListState.h	/^	size_t _lstScroll;$/;"	m	class:OpenXcom::NewManufactureListState
_lstScroll	Basescape/NewResearchListState.h	/^	size_t _lstScroll;$/;"	m	class:OpenXcom::NewResearchListState
_lstScroll	Ufopaedia/UfopaediaSelectState.h	/^		size_t _lstScroll;$/;"	m	class:OpenXcom::UfopaediaSelectState
_lstSelect	Menu/NewBattleState.h	/^	TextList *_lstSelect;$/;"	m	class:OpenXcom::NewBattleState
_lstSelection	Ufopaedia/UfopaediaSelectState.h	/^		TextList *_lstSelection;$/;"	m	class:OpenXcom::UfopaediaSelectState
_lstSoldierStats	Battlescape/DebriefingState.h	/^	TextList *_lstStats, *_lstRecovery, *_lstTotal, *_lstSoldierStats, *_lstRecoveredItems;$/;"	m	class:OpenXcom::DebriefingState
_lstSoldiers	Basescape/CraftArmorState.h	/^	TextList *_lstSoldiers;$/;"	m	class:OpenXcom::CraftArmorState
_lstSoldiers	Basescape/CraftSoldiersState.h	/^	TextList *_lstSoldiers;$/;"	m	class:OpenXcom::CraftSoldiersState
_lstSoldiers	Basescape/SoldierMemorialState.h	/^	TextList *_lstSoldiers;$/;"	m	class:OpenXcom::SoldierMemorialState
_lstSoldiers	Basescape/SoldiersState.h	/^	TextList *_lstSoldiers;$/;"	m	class:OpenXcom::SoldiersState
_lstSoldiers	Battlescape/CommendationLateState.h	/^	TextList *_lstSoldiers;$/;"	m	class:OpenXcom::CommendationLateState
_lstSoldiers	Battlescape/CommendationState.h	/^	TextList *_lstSoldiers;$/;"	m	class:OpenXcom::CommendationState
_lstSoldiers	Battlescape/PromotionsState.h	/^	TextList *_lstSoldiers;$/;"	m	class:OpenXcom::PromotionsState
_lstSoldiers	Geoscape/AllocatePsiTrainingState.h	/^	TextList *_lstSoldiers;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_lstSoldiers	Geoscape/AllocateTrainingState.h	/^	TextList *_lstSoldiers;$/;"	m	class:OpenXcom::AllocateTrainingState
_lstStatChanges	Basescape/SoldierTransformationState.h	/^	TextList *_lstRequiredItems, *_lstStatChanges;$/;"	m	class:OpenXcom::SoldierTransformationState
_lstStats	Battlescape/DebriefingState.h	/^	TextList *_lstStats, *_lstRecovery, *_lstTotal, *_lstSoldierStats, *_lstRecoveredItems;$/;"	m	class:OpenXcom::DebriefingState
_lstStats	Menu/StatisticsState.h	/^	TextList *_lstStats;$/;"	m	class:OpenXcom::StatisticsState
_lstStats	Ufopaedia/ArticleStateTFTDVehicle.h	/^		TextList *_lstStats, *_lstStats2;$/;"	m	class:OpenXcom::ArticleStateTFTDVehicle
_lstStats	Ufopaedia/ArticleStateVehicle.h	/^		TextList *_lstStats;$/;"	m	class:OpenXcom::ArticleStateVehicle
_lstStats2	Ufopaedia/ArticleStateTFTDVehicle.h	/^		TextList *_lstStats, *_lstStats2;$/;"	m	class:OpenXcom::ArticleStateTFTDVehicle
_lstStores	Basescape/StoresState.h	/^	TextList *_lstStores;$/;"	m	class:OpenXcom::StoresState
_lstSummary	Basescape/SoldierBonusState.h	/^	TextList *_lstSummary;$/;"	m	class:OpenXcom::SoldierBonusState
_lstSummary	Geoscape/ProductionCompleteState.h	/^	TextList *_lstSummary;$/;"	m	class:OpenXcom::ProductionCompleteState
_lstTopics	Basescape/ManufactureDependenciesTreeState.h	/^	TextList *_lstTopics;$/;"	m	class:OpenXcom::ManufactureDependenciesTreeState
_lstTopics	Basescape/TechTreeSelectState.h	/^	TextList *_lstTopics;$/;"	m	class:OpenXcom::TechTreeSelectState
_lstTotal	Basescape/MonthlyCostsState.h	/^	TextList *_lstCrafts, *_lstSalaries, *_lstMaintenance, *_lstTotal;$/;"	m	class:OpenXcom::MonthlyCostsState
_lstTotal	Battlescape/DebriefingState.h	/^	TextList *_lstStats, *_lstRecovery, *_lstTotal, *_lstSoldierStats, *_lstRecoveredItems;$/;"	m	class:OpenXcom::DebriefingState
_lstTracks	Geoscape/SelectMusicTrackState.h	/^	TextList *_lstTracks;$/;"	m	class:OpenXcom::SelectMusicTrackState
_lstTransfers	Basescape/TransfersState.h	/^	TextList *_lstTransfers;$/;"	m	class:OpenXcom::TransfersState
_lstTransfers	Geoscape/ItemsArrivingState.h	/^	TextList *_lstTransfers;$/;"	m	class:OpenXcom::ItemsArrivingState
_lstTransformations	Basescape/SoldierTransformationListState.h	/^	TextList* _lstTransformations;$/;"	m	class:OpenXcom::SoldierTransformationListState
_lstTurnDiary	Battlescape/TurnDiaryState.h	/^	TextList *_lstTurnDiary;$/;"	m	class:OpenXcom::TurnDiaryState
_lstWeapons	Basescape/CraftWeaponsState.h	/^	TextList *_lstWeapons;$/;"	m	class:OpenXcom::CraftWeaponsState
_mainArticle	Ufopaedia/StatsForNerdsState.h	/^	bool _mainArticle;$/;"	m	class:OpenXcom::StatsForNerdsState
_mainScreen	Engine/FlcPlayer.h	/^	SDL_Surface *_mainScreen;$/;"	m	class:OpenXcom::FlcPlayer
_maintenance	Savegame/SavedGame.h	/^	std::vector<int64_t> _funds, _maintenance, _incomes, _expenditures;$/;"	m	class:OpenXcom::SavedGame
_maleCallsign	Mod/SoldierNamePool.h	/^	std::vector<std::string> _maleFirst, _femaleFirst, _maleLast, _femaleLast, _maleCallsign, _femaleCallsign;$/;"	m	class:OpenXcom::SoldierNamePool
_maleFirst	Mod/SoldierNamePool.h	/^	std::vector<std::string> _maleFirst, _femaleFirst, _maleLast, _femaleLast, _maleCallsign, _femaleCallsign;$/;"	m	class:OpenXcom::SoldierNamePool
_maleLast	Mod/SoldierNamePool.h	/^	std::vector<std::string> _maleFirst, _femaleFirst, _maleLast, _femaleLast, _maleCallsign, _femaleCallsign;$/;"	m	class:OpenXcom::SoldierNamePool
_mana	Savegame/BattleUnit.h	/^	int _tu, _energy, _health, _morale, _stunlevel, _mana;$/;"	m	class:OpenXcom::BattleUnit
_manaBarVisible	Battlescape/BattlescapeState.h	/^	bool _manaBarVisible;$/;"	m	class:OpenXcom::BattlescapeState
_manaBattleUI	Mod/Mod.h	/^	bool _manaEnabled, _manaBattleUI, _manaTrainingPrimary, _manaTrainingSecondary, _manaReplenishAfterMission;$/;"	m	class:OpenXcom::Mod
_manaEnabled	Mod/Mod.h	/^	bool _manaEnabled, _manaBattleUI, _manaTrainingPrimary, _manaTrainingSecondary, _manaReplenishAfterMission;$/;"	m	class:OpenXcom::Mod
_manaExperience	Mod/RuleItem.h	/^	int _manaExperience;$/;"	m	class:OpenXcom::RuleItem
_manaMissing	Savegame/Soldier.h	/^	int _manaMissing = 0;   \/\/ amount of mana missing until full mana recovery$/;"	m	class:OpenXcom::Soldier
_manaMissingWoundThreshold	Mod/Mod.h	/^	int _manaMissingWoundThreshold = 200;$/;"	m	class:OpenXcom::Mod
_manaMissingWoundThreshold	Mod/RuleSoldier.h	/^	int _manaMissingWoundThreshold = -1;$/;"	m	class:OpenXcom::RuleSoldier
_manaRecovery	Mod/Armor.h	/^	RuleStatBonus _timeRecovery, _energyRecovery, _moraleRecovery, _healthRecovery, _stunRecovery, _manaRecovery;$/;"	m	class:OpenXcom::Armor
_manaRecovery	Mod/RuleItem.h	/^	int _woundRecovery, _healthRecovery, _stunRecovery, _energyRecovery, _manaRecovery, _moraleRecovery, _painKillerRecovery;$/;"	m	class:OpenXcom::RuleItem
_manaRecovery	Mod/RuleSoldierBonus.h	/^	RuleStatBonus _timeRecovery, _energyRecovery, _moraleRecovery, _healthRecovery, _stunRecovery, _manaRecovery;$/;"	m	class:OpenXcom::RuleSoldierBonus
_manaRecoveryPerDay	Mod/RuleBaseFacility.h	/^	int _manaRecoveryPerDay = 0;$/;"	m	class:OpenXcom::RuleBaseFacility
_manaReplenishAfterMission	Mod/Mod.h	/^	bool _manaEnabled, _manaBattleUI, _manaTrainingPrimary, _manaTrainingSecondary, _manaReplenishAfterMission;$/;"	m	class:OpenXcom::Mod
_manaRequired	Mod/RuleItem.h	/^	bool _LOSRequired, _underwaterOnly, _landOnly, _psiReqiured, _manaRequired;$/;"	m	class:OpenXcom::RuleItem
_manaTrainingPrimary	Mod/Mod.h	/^	bool _manaEnabled, _manaBattleUI, _manaTrainingPrimary, _manaTrainingSecondary, _manaReplenishAfterMission;$/;"	m	class:OpenXcom::Mod
_manaTrainingSecondary	Mod/Mod.h	/^	bool _manaEnabled, _manaBattleUI, _manaTrainingPrimary, _manaTrainingSecondary, _manaReplenishAfterMission;$/;"	m	class:OpenXcom::Mod
_manaUnlockResearch	Mod/Mod.h	/^	std::string _manaUnlockResearch;$/;"	m	class:OpenXcom::Mod
_manufacture	Mod/Mod.h	/^	std::map<std::string, RuleManufacture *> _manufacture;$/;"	m	class:OpenXcom::Mod
_manufacture	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_manufactureIndex	Mod/Mod.h	/^	std::vector<std::string> _aliensIndex, _enviroEffectsIndex, _startingConditionsIndex, _deploymentsIndex, _armorsIndex, _ufopaediaIndex, _ufopaediaCatIndex, _researchIndex, _manufactureIndex;$/;"	m	class:OpenXcom::Mod
_manufactureListOrder	Mod/Mod.h	/^	int _facilityListOrder, _craftListOrder, _itemCategoryListOrder, _itemListOrder, _researchListOrder,  _manufactureListOrder;$/;"	m	class:OpenXcom::Mod
_manufactureRuleStatus	Savegame/SavedGame.h	/^	std::map<std::string, int> _manufactureRuleStatus;$/;"	m	class:OpenXcom::SavedGame
_manufactureShortcut	Mod/Mod.h	/^	std::map<std::string, RuleManufactureShortcut *> _manufactureShortcut;$/;"	m	class:OpenXcom::Mod
_map	Battlescape/BattlescapeState.h	/^	Map *_map;$/;"	m	class:OpenXcom::BattlescapeState
_map	Battlescape/Camera.h	/^	Map *_map;$/;"	m	class:OpenXcom::Camera
_mapBackgroundColor	Mod/RuleEnviroEffects.h	/^	int _mapBackgroundColor;$/;"	m	class:OpenXcom::RuleEnviroEffects
_mapBlocks	Mod/RuleTerrain.h	/^	std::vector<MapBlock*> _mapBlocks;$/;"	m	class:OpenXcom::RuleTerrain
_mapData	Savegame/Tile.h	/^	std::unique_ptr<TileMapDataCache> _mapData = std::make_unique<TileMapDataCache>();$/;"	m	class:OpenXcom::Tile
_mapDataID	Savegame/Tile.h	/^		Uint8 _mapDataID;$/;"	m	struct:OpenXcom::Tile::SerializationKey
_mapDataSetID	Savegame/Tile.h	/^		Uint8 _mapDataSetID;$/;"	m	struct:OpenXcom::Tile::SerializationKey
_mapDataSets	Mod/Mod.h	/^	std::map<std::string, MapDataSet*> _mapDataSets;$/;"	m	class:OpenXcom::Mod
_mapDataSets	Mod/RuleTerrain.h	/^	std::vector<MapDataSet*> _mapDataSets;$/;"	m	class:OpenXcom::RuleTerrain
_mapDataSets	Savegame/SavedBattleGame.h	/^	std::vector<MapDataSet*> _mapDataSets;$/;"	m	class:OpenXcom::SavedBattleGame
_mapName	Mod/RuleBaseFacility.h	/^	std::string _mapName;$/;"	m	class:OpenXcom::RuleBaseFacility
_mapOffset	Battlescape/Camera.h	/^	Position _mapOffset, _center;$/;"	m	class:OpenXcom::Camera
_mapOffsetBeforeMouseScrolling	Battlescape/BattlescapeState.h	/^	Position _mapOffsetBeforeMouseScrolling;$/;"	m	class:OpenXcom::BattlescapeState
_mapScript	Mod/AlienDeployment.h	/^	std::string _nextStage, _race, _mapScript;$/;"	m	class:OpenXcom::AlienDeployment
_mapScript	Mod/RuleTerrain.h	/^	std::string _name, _mapScript;$/;"	m	class:OpenXcom::RuleTerrain
_mapScripts	Mod/AlienDeployment.h	/^	std::vector<std::string> _mapScripts;$/;"	m	class:OpenXcom::AlienDeployment
_mapScripts	Mod/Mod.h	/^	std::map<std::string, std::vector<MapScript *> > _mapScripts;$/;"	m	class:OpenXcom::Mod
_mapScripts	Mod/RuleTerrain.h	/^	std::vector<std::string> _mapScripts;$/;"	m	class:OpenXcom::RuleTerrain
_mapShockIndicator	Mod/RuleEnviroEffects.h	/^	std::string _mapShockIndicator;$/;"	m	class:OpenXcom::RuleEnviroEffects
_mapVisible	Mod/RuleCraft.h	/^	bool _mapVisible, _forceShowInMonthlyCosts;$/;"	m	class:OpenXcom::RuleCraft
_mapsize_x	Battlescape/BattlescapeGenerator.h	/^	int _mapsize_x, _mapsize_y, _mapsize_z;$/;"	m	class:OpenXcom::BattlescapeGenerator
_mapsize_x	Battlescape/Camera.h	/^	int _mapsize_x, _mapsize_y, _mapsize_z;$/;"	m	class:OpenXcom::Camera
_mapsize_x	Savegame/SavedBattleGame.h	/^	int _mapsize_x, _mapsize_y, _mapsize_z;$/;"	m	class:OpenXcom::SavedBattleGame
_mapsize_y	Battlescape/BattlescapeGenerator.h	/^	int _mapsize_x, _mapsize_y, _mapsize_z;$/;"	m	class:OpenXcom::BattlescapeGenerator
_mapsize_y	Battlescape/Camera.h	/^	int _mapsize_x, _mapsize_y, _mapsize_z;$/;"	m	class:OpenXcom::Camera
_mapsize_y	Savegame/SavedBattleGame.h	/^	int _mapsize_x, _mapsize_y, _mapsize_z;$/;"	m	class:OpenXcom::SavedBattleGame
_mapsize_z	Battlescape/BattlescapeGenerator.h	/^	int _mapsize_x, _mapsize_y, _mapsize_z;$/;"	m	class:OpenXcom::BattlescapeGenerator
_mapsize_z	Battlescape/Camera.h	/^	int _mapsize_x, _mapsize_y, _mapsize_z;$/;"	m	class:OpenXcom::Camera
_mapsize_z	Savegame/SavedBattleGame.h	/^	int _mapsize_x, _mapsize_y, _mapsize_z;$/;"	m	class:OpenXcom::SavedBattleGame
_margin	Interface/TextList.h	/^	int _margin;$/;"	m	class:OpenXcom::TextList
_markAsReinforcementsBlock	Battlescape/BattlescapeGenerator.h	/^	int _markAsReinforcementsBlock;$/;"	m	class:OpenXcom::BattlescapeGenerator
_markAsReinforcementsBlock	Mod/MapScript.h	/^	bool _canBeSkipped, _markAsReinforcementsBlock;$/;"	m	class:OpenXcom::MapScript
_markCiviliansAsVIP	Mod/AlienDeployment.h	/^	bool _markCiviliansAsVIP;$/;"	m	class:OpenXcom::AlienDeployment
_marker	Mod/RuleCraft.h	/^	int _sprite, _marker;$/;"	m	class:OpenXcom::RuleCraft
_marker	Mod/RuleUfo.h	/^	int _sprite, _marker, _markerLand, _markerCrash;$/;"	m	class:OpenXcom::RuleUfo
_markerColor	Savegame/Tile.h	/^	Uint8 _markerColor = 0;$/;"	m	class:OpenXcom::Tile
_markerCrash	Mod/RuleUfo.h	/^	int _sprite, _marker, _markerLand, _markerCrash;$/;"	m	class:OpenXcom::RuleUfo
_markerIcon	Mod/AlienDeployment.h	/^	int _markerIcon, _durationMin, _durationMax, _minDepth, _maxDepth, _genMissionFrequency, _genMissionLimit;$/;"	m	class:OpenXcom::AlienDeployment
_markerLand	Mod/RuleUfo.h	/^	int _sprite, _marker, _markerLand, _markerCrash;$/;"	m	class:OpenXcom::RuleUfo
_markerName	Mod/AlienDeployment.h	/^	std::string _markerName, _objectivePopup, _objectiveCompleteText, _objectiveFailedText;$/;"	m	class:OpenXcom::AlienDeployment
_markerSet	Geoscape/Globe.h	/^	SurfaceSet *_texture, *_markerSet;$/;"	m	class:OpenXcom::Globe
_markers	Geoscape/Globe.h	/^	Surface *_markers, *_countries, *_radars;$/;"	m	class:OpenXcom::Globe
_markers	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_martyrKillsTotal	Savegame/SoldierDiary.h	/^		_martyrKillsTotal, _postMortemKills, _slaveKillsTotal, _bestSoldier, _revivedSoldierTotal, _revivedHostileTotal, _revivedNeutralTotal;$/;"	m	class:OpenXcom::SoldierDiary
_mask	Battlescape/UnitSprite.h	/^	GraphSubset _mask;$/;"	m	class:OpenXcom::UnitSprite
_master	Engine/ModInfo.h	/^	std::string _name, _desc, _author, _url, _id, _master;$/;"	m	class:OpenXcom::ModInfo
_masterMod	Engine/Options.cpp	/^std::string _masterMod;$/;"	m	namespace:OpenXcom::Options	file:
_masters	Menu/ModListState.h	/^	std::vector<const ModInfo *> _masters;$/;"	m	class:OpenXcom::ModListState
_max	Interface/Bar.h	/^	double _scale, _max, _value, _value2;$/;"	m	class:OpenXcom::Bar
_max	Interface/Slider.h	/^	int _min, _max, _value;$/;"	m	class:OpenXcom::Slider
_maxAllowedPerBase	Mod/RuleBaseFacility.h	/^	int _maxAllowedPerBase;$/;"	m	class:OpenXcom::RuleBaseFacility
_maxAltitude	Mod/RuleCraft.h	/^	int _listOrder, _maxItems, _maxAltitude;$/;"	m	class:OpenXcom::RuleCraft
_maxAmbienceRandomDelay	Mod/RuleTerrain.h	/^	int _minAmbienceRandomDelay, _maxAmbienceRandomDelay;$/;"	m	class:OpenXcom::RuleTerrain
_maxAmbienceRandomDelay	Savegame/SavedBattleGame.h	/^	int _minAmbienceRandomDelay, _maxAmbienceRandomDelay, _currentAmbienceDelay;$/;"	m	class:OpenXcom::SavedBattleGame
_maxArcs	Mod/RuleArcScript.h	/^	int _firstMonth, _lastMonth, _executionOdds, _maxArcs, _minDifficulty, _maxDifficulty;$/;"	m	class:OpenXcom::RuleArcScript
_maxArmor	Savegame/BattleUnit.h	/^	int _currentArmor[SIDE_MAX], _maxArmor[SIDE_MAX];$/;"	m	class:OpenXcom::BattleUnit
_maxButtons	Ufopaedia/UfopaediaStartState.h	/^		size_t _maxButtons;$/;"	m	class:OpenXcom::UfopaediaStartState
_maxDarknessToSeeUnits	Battlescape/TileEngine.h	/^	const int _maxDarknessToSeeUnits;  \/\/ 9 by default$/;"	m	class:OpenXcom::TileEngine
_maxDarknessToSeeUnits	Mod/Mod.h	/^	int _maxViewDistance, _maxDarknessToSeeUnits;$/;"	m	class:OpenXcom::Mod
_maxDepth	Mod/AlienDeployment.h	/^	int _markerIcon, _durationMin, _durationMax, _minDepth, _maxDepth, _genMissionFrequency, _genMissionLimit;$/;"	m	class:OpenXcom::AlienDeployment
_maxDepth	Mod/RuleTerrain.h	/^	int _minDepth, _maxDepth, _ambience;$/;"	m	class:OpenXcom::RuleTerrain
_maxDifficulty	Mod/RuleArcScript.h	/^	int _firstMonth, _lastMonth, _executionOdds, _maxArcs, _minDifficulty, _maxDifficulty;$/;"	m	class:OpenXcom::RuleArcScript
_maxDifficulty	Mod/RuleEventScript.h	/^	int _firstMonth, _lastMonth, _executionOdds, _minDifficulty, _maxDifficulty;$/;"	m	class:OpenXcom::RuleEventScript
_maxDynamicLightDistance	Battlescape/TileEngine.h	/^	const int _maxDynamicLightDistance;$/;"	m	class:OpenXcom::TileEngine
_maxDynamicLightDistance	Mod/Mod.h	/^	int _maxStaticLightDistance, _maxDynamicLightDistance, _enhancedLighting;$/;"	m	class:OpenXcom::Mod
_maxFunds	Mod/RuleArcScript.h	/^	int64_t _minFunds, _maxFunds;$/;"	m	class:OpenXcom::RuleArcScript
_maxFunds	Mod/RuleEventScript.h	/^	int64_t _minFunds, _maxFunds;$/;"	m	class:OpenXcom::RuleEventScript
_maxFunds	Mod/RuleMissionScript.h	/^	int64_t _minFunds, _maxFunds;$/;"	m	class:OpenXcom::RuleMissionScript
_maxItems	Mod/RuleCraft.h	/^	int _listOrder, _maxItems, _maxAltitude;$/;"	m	class:OpenXcom::RuleCraft
_maxLargeSoldiers	Mod/RuleCraft.h	/^	int _maxSmallSoldiers, _maxLargeSoldiers, _maxSmallVehicles, _maxLargeVehicles;$/;"	m	class:OpenXcom::RuleCraft
_maxLargeUnits	Mod/RuleCraft.h	/^	int _maxSmallUnits, _maxLargeUnits, _maxSoldiers, _maxVehicles;$/;"	m	class:OpenXcom::RuleCraft
_maxLargeVehicles	Mod/RuleCraft.h	/^	int _maxSmallSoldiers, _maxLargeSoldiers, _maxSmallVehicles, _maxLargeVehicles;$/;"	m	class:OpenXcom::RuleCraft
_maxLookVariant	Mod/Mod.h	/^	int _maxLookVariant, _tooMuchSmokeThreshold, _customTrainingFactor, _minReactionAccuracy;$/;"	m	class:OpenXcom::Mod
_maxRange	Mod/RuleItem.h	/^	int _listOrder, _maxRange, _minRange, _dropoff, _bulletSpeed, _explosionSpeed, _shotgunPellets;$/;"	m	class:OpenXcom::RuleItem
_maxRuns	Mod/RuleMissionScript.h	/^	int _firstMonth, _lastMonth, _label, _executionOdds, _targetBaseOdds, _minDifficulty, _maxRuns, _avoidRepeats, _delay, _randomDelay;$/;"	m	class:OpenXcom::RuleMissionScript
_maxScore	Mod/RuleArcScript.h	/^	int _minScore, _maxScore;$/;"	m	class:OpenXcom::RuleArcScript
_maxScore	Mod/RuleEventScript.h	/^	int _minScore, _maxScore;$/;"	m	class:OpenXcom::RuleEventScript
_maxScore	Mod/RuleMissionScript.h	/^	int _minScore, _maxScore;$/;"	m	class:OpenXcom::RuleMissionScript
_maxShade	Mod/AlienDeployment.h	/^	int _shade, _minShade, _maxShade;$/;"	m	class:OpenXcom::AlienDeployment
_maxSkinIndex	Mod/RuleCraft.h	/^	int _maxSkinIndex;$/;"	m	class:OpenXcom::RuleCraft
_maxSmallSoldiers	Mod/RuleCraft.h	/^	int _maxSmallSoldiers, _maxLargeSoldiers, _maxSmallVehicles, _maxLargeVehicles;$/;"	m	class:OpenXcom::RuleCraft
_maxSmallUnits	Mod/RuleCraft.h	/^	int _maxSmallUnits, _maxLargeUnits, _maxSoldiers, _maxVehicles;$/;"	m	class:OpenXcom::RuleCraft
_maxSmallVehicles	Mod/RuleCraft.h	/^	int _maxSmallSoldiers, _maxLargeSoldiers, _maxSmallVehicles, _maxLargeVehicles;$/;"	m	class:OpenXcom::RuleCraft
_maxSoldiers	Mod/RuleCraft.h	/^	int _maxSmallUnits, _maxLargeUnits, _maxSoldiers, _maxVehicles;$/;"	m	class:OpenXcom::RuleCraft
_maxStaticLightDistance	Battlescape/TileEngine.h	/^	const int _maxStaticLightDistance;$/;"	m	class:OpenXcom::TileEngine
_maxStaticLightDistance	Mod/Mod.h	/^	int _maxStaticLightDistance, _maxDynamicLightDistance, _enhancedLighting;$/;"	m	class:OpenXcom::Mod
_maxStats	Mod/RuleSoldier.h	/^	UnitStats _minStats, _maxStats, _statCaps, _trainingStatCaps, _dogfightExperience;$/;"	m	class:OpenXcom::RuleSoldier
_maxStorageSpace	Mod/RuleCraft.h	/^	double _maxStorageSpace;$/;"	m	class:OpenXcom::RuleCraft
_maxUses	Mod/MapScript.h	/^	std::vector<int> _groups, _blocks, _frequencies, _maxUses, _conditionals;$/;"	m	class:OpenXcom::MapScript
_maxUsesTemp	Mod/MapScript.h	/^	std::vector<int> _groupsTemp, _blocksTemp, _frequenciesTemp, _maxUsesTemp;$/;"	m	class:OpenXcom::MapScript
_maxVal	Mod/StatStringCondition.h	/^	int _maxVal;$/;"	m	class:OpenXcom::StatStringCondition
_maxVehicles	Mod/RuleCraft.h	/^	int _maxSmallUnits, _maxLargeUnits, _maxSoldiers, _maxVehicles;$/;"	m	class:OpenXcom::RuleCraft
_maxViewDistance	Battlescape/TileEngine.h	/^	const int _maxViewDistance;        \/\/ 20 tiles by default$/;"	m	class:OpenXcom::TileEngine
_maxViewDistance	Mod/Mod.h	/^	int _maxViewDistance, _maxDarknessToSeeUnits;$/;"	m	class:OpenXcom::Mod
_maxViewDistanceAtDark	Savegame/BattleUnit.h	/^	int _maxViewDistanceAtDark, _maxViewDistanceAtDay;$/;"	m	class:OpenXcom::BattleUnit
_maxViewDistanceAtDarkSquared	Savegame/BattleUnit.h	/^	int _maxViewDistanceAtDarkSquared;$/;"	m	class:OpenXcom::BattleUnit
_maxViewDistanceAtDay	Savegame/BattleUnit.h	/^	int _maxViewDistanceAtDark, _maxViewDistanceAtDay;$/;"	m	class:OpenXcom::BattleUnit
_maxViewDistanceSq	Battlescape/TileEngine.h	/^	const int _maxViewDistanceSq;      \/\/ 20 * 20$/;"	m	class:OpenXcom::TileEngine
_maxVoxelViewDistance	Battlescape/TileEngine.h	/^	const int _maxVoxelViewDistance;   \/\/ maxViewDistance * 16$/;"	m	class:OpenXcom::TileEngine
_maxX	Interface/Slider.h	/^	int _thickness, _textness, _minX, _maxX, _offsetX;$/;"	m	class:OpenXcom::Slider
_medikitActionName	Mod/RuleItem.h	/^	std::string _medikitActionName, _psiAttackName, _primeActionName, _unprimeActionName, _primeActionMessage, _unprimeActionMessage;$/;"	m	class:OpenXcom::RuleItem
_medikitBackground	Mod/RuleItem.h	/^	std::string _medikitBackground;$/;"	m	class:OpenXcom::RuleItem
_medikitBlue	Battlescape/BattlescapeState.h	/^	Uint8 _medikitRed, _medikitGreen, _medikitBlue, _medikitOrange;$/;"	m	class:OpenXcom::BattlescapeState
_medikitGreen	Battlescape/BattlescapeState.h	/^	Uint8 _medikitRed, _medikitGreen, _medikitBlue, _medikitOrange;$/;"	m	class:OpenXcom::BattlescapeState
_medikitOrange	Battlescape/BattlescapeState.h	/^	Uint8 _medikitRed, _medikitGreen, _medikitBlue, _medikitOrange;$/;"	m	class:OpenXcom::BattlescapeState
_medikitRed	Battlescape/BattlescapeState.h	/^	Uint8 _medikitRed, _medikitGreen, _medikitBlue, _medikitOrange;$/;"	m	class:OpenXcom::BattlescapeState
_medikitTargetImmune	Mod/RuleItem.h	/^	bool _medikitTargetSelf, _medikitTargetImmune;$/;"	m	class:OpenXcom::RuleItem
_medikitTargetMatrix	Mod/RuleItem.h	/^	int _medikitTargetMatrix;$/;"	m	class:OpenXcom::RuleItem
_medikitTargetSelf	Mod/RuleItem.h	/^	bool _medikitTargetSelf, _medikitTargetImmune;$/;"	m	class:OpenXcom::RuleItem
_medikitType	Mod/RuleItem.h	/^	BattleMediKitType _medikitType;$/;"	m	class:OpenXcom::RuleItem
_medikitView	Battlescape/MedikitState.h	/^	MedikitView *_medikitView;$/;"	m	class:OpenXcom::MedikitState
_meetCalculated	Savegame/MovingTarget.h	/^	bool _meetCalculated;$/;"	m	class:OpenXcom::MovingTarget
_meetPointLat	Savegame/MovingTarget.h	/^	double _meetPointLon, _meetPointLat;$/;"	m	class:OpenXcom::MovingTarget
_meetPointLon	Savegame/MovingTarget.h	/^	double _meetPointLon, _meetPointLat;$/;"	m	class:OpenXcom::MovingTarget
_melee	Battlescape/AIModule.h	/^	bool _rifle, _melee, _blaster, _grenade;$/;"	m	class:OpenXcom::AIModule
_meleeAnimFrames	Mod/RuleItem.h	/^	int _meleeAnimation, _meleeAnimFrames;$/;"	m	class:OpenXcom::RuleItem
_meleeAnimation	Mod/RuleItem.h	/^	int _meleeAnimation, _meleeAnimFrames;$/;"	m	class:OpenXcom::RuleItem
_meleeAttackedBy	Savegame/BattleUnit.h	/^	std::vector<int> _meleeAttackedBy;$/;"	m	class:OpenXcom::BattleUnit
_meleeBonus	Mod/RuleItem.h	/^	RuleStatBonus _damageBonus, _meleeBonus, _accuracyMulti, _meleeMulti, _throwMulti, _closeQuartersMulti;$/;"	m	class:OpenXcom::RuleItem
_meleeDodge	Mod/Armor.h	/^	RuleStatBonus _psiDefence, _meleeDodge;$/;"	m	class:OpenXcom::Armor
_meleeDodgeBackPenalty	Mod/Armor.h	/^	float _overKill, _meleeDodgeBackPenalty;$/;"	m	class:OpenXcom::Armor
_meleeHitSound	Mod/RuleItem.h	/^	std::vector<int> _meleeHitSound, _explosionHitSound, _psiSound;$/;"	m	class:OpenXcom::RuleItem
_meleeMissAnimFrames	Mod/RuleItem.h	/^	int _meleeMissAnimation, _meleeMissAnimFrames;$/;"	m	class:OpenXcom::RuleItem
_meleeMissAnimation	Mod/RuleItem.h	/^	int _meleeMissAnimation, _meleeMissAnimFrames;$/;"	m	class:OpenXcom::RuleItem
_meleeMissSound	Mod/RuleItem.h	/^	std::vector<int> _meleeMissSound;$/;"	m	class:OpenXcom::RuleItem
_meleeMulti	Mod/RuleItem.h	/^	RuleStatBonus _damageBonus, _meleeBonus, _accuracyMulti, _meleeMulti, _throwMulti, _closeQuartersMulti;$/;"	m	class:OpenXcom::RuleItem
_meleePower	Mod/RuleItem.h	/^	int _meleePower, _specialType, _vaporColor, _vaporDensity, _vaporProbability;$/;"	m	class:OpenXcom::RuleItem
_meleeSound	Mod/RuleItem.h	/^	std::vector<int> _meleeSound;$/;"	m	class:OpenXcom::RuleItem
_meleeType	Mod/RuleItem.h	/^	RuleDamageType _damageType, _meleeType;$/;"	m	class:OpenXcom::RuleItem
_meleeTypeSet	Mod/RuleItem.h	/^	bool _damageTypeSet, _meleeTypeSet;$/;"	m	class:OpenXcom::RuleItem
_meleeWeapon	Mod/Unit.h	/^	std::string _meleeWeapon, _psiWeapon;$/;"	m	class:OpenXcom::Unit
_members	Mod/AlienRace.h	/^	std::vector<std::string> _members;$/;"	m	class:OpenXcom::AlienRace
_membersRandom	Mod/AlienRace.h	/^	std::vector< std::vector<std::string> > _membersRandom;$/;"	m	class:OpenXcom::AlienRace
_merge_resources	Engine/FileMap.cpp	/^	void _merge_resources(VFSLayer *src, bool reverse) {$/;"	f	struct:OpenXcom::FileMap::VFSLayerStack
_merge_vdirs	Engine/FileMap.cpp	/^	void _merge_vdirs(VFSLayer *src) {$/;"	f	struct:OpenXcom::FileMap::VFSLayerStack
_message	Battlescape/Map.h	/^	BattlescapeMessage *_message;$/;"	m	class:OpenXcom::Map
_messageColor	Battlescape/Map.h	/^	int _iconHeight, _iconWidth, _messageColor;$/;"	m	class:OpenXcom::Map
_min	Interface/Slider.h	/^	int _min, _max, _value;$/;"	m	class:OpenXcom::Slider
_minAmbienceRandomDelay	Mod/RuleTerrain.h	/^	int _minAmbienceRandomDelay, _maxAmbienceRandomDelay;$/;"	m	class:OpenXcom::RuleTerrain
_minAmbienceRandomDelay	Savegame/SavedBattleGame.h	/^	int _minAmbienceRandomDelay, _maxAmbienceRandomDelay, _currentAmbienceDelay;$/;"	m	class:OpenXcom::SavedBattleGame
_minDepth	Mod/AlienDeployment.h	/^	int _markerIcon, _durationMin, _durationMax, _minDepth, _maxDepth, _genMissionFrequency, _genMissionLimit;$/;"	m	class:OpenXcom::AlienDeployment
_minDepth	Mod/RuleTerrain.h	/^	int _minDepth, _maxDepth, _ambience;$/;"	m	class:OpenXcom::RuleTerrain
_minDifficulty	Mod/RuleArcScript.h	/^	int _firstMonth, _lastMonth, _executionOdds, _maxArcs, _minDifficulty, _maxDifficulty;$/;"	m	class:OpenXcom::RuleArcScript
_minDifficulty	Mod/RuleEventScript.h	/^	int _firstMonth, _lastMonth, _executionOdds, _minDifficulty, _maxDifficulty;$/;"	m	class:OpenXcom::RuleEventScript
_minDifficulty	Mod/RuleMissionScript.h	/^	int _firstMonth, _lastMonth, _label, _executionOdds, _targetBaseOdds, _minDifficulty, _maxRuns, _avoidRepeats, _delay, _randomDelay;$/;"	m	class:OpenXcom::RuleMissionScript
_minFunds	Mod/RuleArcScript.h	/^	int64_t _minFunds, _maxFunds;$/;"	m	class:OpenXcom::RuleArcScript
_minFunds	Mod/RuleEventScript.h	/^	int64_t _minFunds, _maxFunds;$/;"	m	class:OpenXcom::RuleEventScript
_minFunds	Mod/RuleMissionScript.h	/^	int64_t _minFunds, _maxFunds;$/;"	m	class:OpenXcom::RuleMissionScript
_minRange	Mod/RuleItem.h	/^	int _listOrder, _maxRange, _minRange, _dropoff, _bulletSpeed, _explosionSpeed, _shotgunPellets;$/;"	m	class:OpenXcom::RuleItem
_minRank	Mod/RuleSoldierTransformation.h	/^	int _minRank;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_minReactionAccuracy	Mod/Mod.h	/^	int _maxLookVariant, _tooMuchSmokeThreshold, _customTrainingFactor, _minReactionAccuracy;$/;"	m	class:OpenXcom::Mod
_minScore	Mod/RuleArcScript.h	/^	int _minScore, _maxScore;$/;"	m	class:OpenXcom::RuleArcScript
_minScore	Mod/RuleEventScript.h	/^	int _minScore, _maxScore;$/;"	m	class:OpenXcom::RuleEventScript
_minScore	Mod/RuleMissionScript.h	/^	int _minScore, _maxScore;$/;"	m	class:OpenXcom::RuleMissionScript
_minShade	Mod/AlienDeployment.h	/^	int _shade, _minShade, _maxShade;$/;"	m	class:OpenXcom::AlienDeployment
_minStats	Mod/RuleSoldier.h	/^	UnitStats _minStats, _maxStats, _statCaps, _trainingStatCaps, _dogfightExperience;$/;"	m	class:OpenXcom::RuleSoldier
_minVal	Mod/StatStringCondition.h	/^	int _minVal;$/;"	m	class:OpenXcom::StatStringCondition
_minX	Interface/Slider.h	/^	int _thickness, _textness, _minX, _maxX, _offsetX;$/;"	m	class:OpenXcom::Slider
_mind	Mod/RuleBaseFacility.h	/^	bool _lift, _hyper, _mind, _grav;$/;"	m	class:OpenXcom::RuleBaseFacility
_mindControllerID	Savegame/BattleUnit.h	/^	int _mindControllerID;	\/\/ used to credit the mind controller with the kills of the mind controllee$/;"	m	class:OpenXcom::BattleUnit
_mindPower	Mod/RuleBaseFacility.h	/^	int _mindPower;$/;"	m	class:OpenXcom::RuleBaseFacility
_mindProbe	Battlescape/UnitInfoState.h	/^	bool _fromInventory, _mindProbe;$/;"	m	class:OpenXcom::UnitInfoState
_mini	Basescape/BaseInfoState.h	/^	MiniBaseView *_mini;$/;"	m	class:OpenXcom::BaseInfoState
_mini	Basescape/BasescapeState.h	/^	MiniBaseView *_mini;$/;"	m	class:OpenXcom::BasescapeState
_miniMapIndex	Mod/MapData.h	/^	unsigned short _miniMapIndex;$/;"	m	class:OpenXcom::MapData
_miniMapView	Battlescape/MiniMapState.h	/^	MiniMapView *_miniMapView;$/;"	m	class:OpenXcom::MiniMapState
_minimized	Geoscape/DogfightState.h	/^	bool _minimized, _endDogfight, _animatingHit, _waitForPoly, _waitForAltitude;$/;"	m	class:OpenXcom::DogfightState
_minimizedDogfights	Geoscape/GeoscapeState.h	/^	size_t _minimizedDogfights;$/;"	m	class:OpenXcom::GeoscapeState
_minimizedIconX	Geoscape/DogfightState.h	/^	int _x, _y, _minimizedIconX, _minimizedIconY;$/;"	m	class:OpenXcom::DogfightState
_minimizedIconY	Geoscape/DogfightState.h	/^	int _x, _y, _minimizedIconX, _minimizedIconY;$/;"	m	class:OpenXcom::DogfightState
_minute	Savegame/GameTime.h	/^	int _second, _minute, _hour, _weekday, _day, _month, _year;$/;"	m	class:OpenXcom::GameTime
_minutesSinceLastHuntMissionGeneration	Savegame/AlienBase.h	/^	int _minutesSinceLastHuntMissionGeneration;$/;"	m	class:OpenXcom::AlienBase
_missed	Savegame/CraftWeaponProjectile.h	/^	bool _missed;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_missileAttraction	Mod/RuleBaseFacility.h	/^	int _missileAttraction;$/;"	m	class:OpenXcom::RuleBaseFacility
_missilePower	Mod/RuleUfo.h	/^	int _missilePower;$/;"	m	class:OpenXcom::RuleUfo
_missiles	Geoscape/BaseDestroyedState.h	/^	bool _missiles, _partialDestruction;$/;"	m	class:OpenXcom::BaseDestroyedState
_missingItems	Battlescape/CannotReequipState.h	/^	std::vector<ReequipStat> _missingItems;$/;"	m	class:OpenXcom::CannotReequipState
_missingItems	Battlescape/DebriefingState.h	/^	std::vector<ReequipStat> _missingItems;$/;"	m	class:OpenXcom::DebriefingState
_missingItemsMap	Basescape/PurchaseState.h	/^	std::map<RuleItem*, int> _missingItemsMap;$/;"	m	class:OpenXcom::PurchaseState
_mission	Battlescape/BattlescapeGenerator.h	/^	MissionSite *_mission;$/;"	m	class:OpenXcom::BattlescapeGenerator
_mission	Geoscape/MissionDetectedState.h	/^	MissionSite *_mission;$/;"	m	class:OpenXcom::MissionDetectedState
_mission	Savegame/Craft.h	/^	bool _lowFuel, _mission, _inBattlescape, _inDogfight;$/;"	m	class:OpenXcom::Craft
_mission	Savegame/Ufo.h	/^	AlienMission *_mission;$/;"	m	class:OpenXcom::Ufo
_missionBountyItem	Mod/AlienDeployment.h	/^	std::string _missionBountyItem;$/;"	m	class:OpenXcom::AlienDeployment
_missionBountyItemCount	Mod/AlienDeployment.h	/^	int _missionBountyItemCount;$/;"	m	class:OpenXcom::AlienDeployment
_missionCompleteText	Mod/AlienDeployment.h	/^	std::string _missionCompleteText, _missionFailedText;$/;"	m	class:OpenXcom::AlienDeployment
_missionCustomDeploy	Savegame/MissionSite.h	/^	const AlienDeployment *_missionCustomDeploy;$/;"	m	class:OpenXcom::MissionSite
_missionFailedText	Mod/AlienDeployment.h	/^	std::string _missionCompleteText, _missionFailedText;$/;"	m	class:OpenXcom::AlienDeployment
_missionIdList	Savegame/SoldierDiary.h	/^	std::vector<int> _missionIdList;$/;"	m	class:OpenXcom::SoldierDiary
_missionLocations	Savegame/AlienStrategy.h	/^	std::map<std::string, std::vector<std::pair<std::string, int> > > _missionLocations;$/;"	m	class:OpenXcom::AlienStrategy
_missionMarkerName	Mod/RuleArcScript.h	/^	std::string _missionVarName, _missionMarkerName;$/;"	m	class:OpenXcom::RuleArcScript
_missionMarkerName	Mod/RuleEventScript.h	/^	std::string _missionVarName, _missionMarkerName;$/;"	m	class:OpenXcom::RuleEventScript
_missionMarkerName	Mod/RuleMissionScript.h	/^	std::string _missionVarName, _missionMarkerName;$/;"	m	class:OpenXcom::RuleMissionScript
_missionMarkerNames	Mod/RuleCommendations.h	/^	std::vector<std::string> _missionMarkerNames; \/\/ these are not alien deployment type names!$/;"	m	class:OpenXcom::RuleCommendations
_missionRatings	Mod/Mod.h	/^	std::map<int, std::string> _missionRatings, _monthlyRatings;$/;"	m	class:OpenXcom::Mod
_missionRegion	Mod/RuleRegion.h	/^	std::string _missionRegion;$/;"	m	class:OpenXcom::RuleRegion
_missionRuns	Savegame/AlienStrategy.h	/^	std::map<std::string, int> _missionRuns;$/;"	m	class:OpenXcom::AlienStrategy
_missionScore	Mod/RuleUfo.h	/^	int _power, _range, _score, _reload, _breakOffTime, _missionScore;$/;"	m	class:OpenXcom::RuleUfo
_missionScriptIndex	Mod/Mod.h	/^	std::vector<std::string> _alienMissionsIndex, _terrainIndex, _customPalettesIndex, _arcScriptIndex, _eventScriptIndex, _eventIndex, _missionScriptIndex;$/;"	m	class:OpenXcom::Mod
_missionScripts	Mod/Mod.h	/^	std::map<std::string, RuleMissionScript*> _missionScripts;$/;"	m	class:OpenXcom::Mod
_missionSiteZone	Savegame/AlienMission.h	/^	int _uniqueID, _missionSiteZone;$/;"	m	class:OpenXcom::AlienMission
_missionSites	Savegame/SavedGame.h	/^	std::vector<MissionSite*> _missionSites;$/;"	m	class:OpenXcom::SavedGame
_missionStatistics	Battlescape/DebriefingState.h	/^	MissionStatistics *_missionStatistics;$/;"	m	class:OpenXcom::DebriefingState
_missionStatistics	Savegame/SavedGame.h	/^	std::vector<MissionStatistics*> _missionStatistics;$/;"	m	class:OpenXcom::SavedGame
_missionTexture	Battlescape/BattlescapeGenerator.h	/^	Texture *_missionTexture, *_globeTexture;$/;"	m	class:OpenXcom::BattlescapeGenerator
_missionTexture	Geoscape/ConfirmLandingState.h	/^	Texture *_missionTexture, *_globeTexture;$/;"	m	class:OpenXcom::ConfirmLandingState
_missionType	Savegame/SavedBattleGame.h	/^	std::string _missionType, _strTarget, _strCraftOrBase, _alienCustomDeploy, _alienCustomMission;$/;"	m	class:OpenXcom::SavedBattleGame
_missionTypeNames	Mod/RuleCommendations.h	/^	std::vector<std::string> _missionTypeNames;   \/\/ these are not alien deployment type names!$/;"	m	class:OpenXcom::RuleCommendations
_missionTypes	Menu/NewBattleState.h	/^	std::vector<std::string> _missionTypes, _terrainTypes, _alienRaces, _crafts;$/;"	m	class:OpenXcom::NewBattleState
_missionVarName	Mod/RuleArcScript.h	/^	std::string _missionVarName, _missionMarkerName;$/;"	m	class:OpenXcom::RuleArcScript
_missionVarName	Mod/RuleEventScript.h	/^	std::string _missionVarName, _missionMarkerName;$/;"	m	class:OpenXcom::RuleEventScript
_missionVarName	Mod/RuleMissionScript.h	/^	std::string _missionVarName, _missionMarkerName;$/;"	m	class:OpenXcom::RuleMissionScript
_missionWaveNumber	Savegame/Ufo.h	/^	int _missionWaveNumber;$/;"	m	class:OpenXcom::Ufo
_missionWeights	Mod/RuleMissionScript.h	/^	std::vector<std::pair<size_t, WeightedOptions*> > _regionWeights, _missionWeights, _raceWeights;$/;"	m	class:OpenXcom::RuleMissionScript
_missionWeights	Mod/RuleRegion.h	/^	WeightedOptions _missionWeights;$/;"	m	class:OpenXcom::RuleRegion
_missionZones	Mod/RuleRegion.h	/^	std::vector<MissionZone> _missionZones;$/;"	m	class:OpenXcom::RuleRegion
_missions	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_missions	Savegame/SaveConverter.h	/^	std::map<std::pair<int, int>, AlienMission*> _missions;$/;"	m	class:OpenXcom::SaveConverter
_missions	Savegame/Soldier.h	/^	int _missions, _kills, _stuns;$/;"	m	class:OpenXcom::Soldier
_mmb	Engine/Game.h	/^	bool _ctrl, _alt, _shift, _rmb, _mmb;$/;"	m	class:OpenXcom::Game
_mod	Battlescape/BattlescapeGenerator.h	/^	Mod *_mod;$/;"	m	class:OpenXcom::BattlescapeGenerator
_mod	Battlescape/Projectile.h	/^	Mod *_mod;$/;"	m	class:OpenXcom::Projectile
_mod	Battlescape/UnitSprite.h	/^	const Mod *_mod;$/;"	m	class:OpenXcom::UnitSprite
_mod	Engine/Game.h	/^	Mod *_mod;$/;"	m	class:OpenXcom::Game
_mod	Mod/Mod.cpp	/^	Mod *_mod;$/;"	m	struct:OpenXcom::compareRule	file:
_mod	Mod/Mod.cpp	/^	Mod *_mod;$/;"	m	struct:OpenXcom::compareSection	file:
_mod	Mod/ModScript.h	/^	Mod* _mod;$/;"	m	class:OpenXcom::ModScript
_mod	Savegame/Base.h	/^	const Mod *_mod;$/;"	m	class:OpenXcom::Base
_mod	Savegame/SaveConverter.h	/^	Mod *_mod;$/;"	m	class:OpenXcom::SaveConverter
_modCurr	Mod/Mod.cpp	/^	size_t _modCurr = 0;$/;"	m	class:OpenXcom::ModScriptGlobal	file:
_modCurrent	Mod/Mod.h	/^	ModData* _modCurrent;$/;"	m	class:OpenXcom::Mod
_modData	Mod/Mod.h	/^	std::vector<ModData> _modData;$/;"	m	class:OpenXcom::Mod
_modInfos	Engine/Options.cpp	/^std::map<std::string, ModInfo> _modInfos;$/;"	m	namespace:OpenXcom::Options	file:
_modNames	Mod/Mod.cpp	/^	std::vector<std::pair<std::string, int>> _modNames;$/;"	m	class:OpenXcom::ModScriptGlobal	file:
_modSprite	Mod/RuleUfo.h	/^	std::string _modSprite;$/;"	m	class:OpenXcom::RuleUfo
_modal	Engine/State.h	/^	InteractiveSurface *_modal;$/;"	m	class:OpenXcom::State
_modal	Interface/TextEdit.h	/^	bool _blink, _modal;$/;"	m	class:OpenXcom::TextEdit
_modded	Mod/RuleStatBonus.h	/^	bool _modded = false;$/;"	m	class:OpenXcom::RuleStatBonus
_mode	Geoscape/DogfightState.h	/^	ImageButton *_mode;$/;"	m	class:OpenXcom::DogfightState
_mods	Menu/ModListState.h	/^	std::vector< std::pair<std::string, bool> > _mods;$/;"	m	class:OpenXcom::ModListState
_monospace	Engine/Font.h	/^	bool _monospace;$/;"	m	class:OpenXcom::Font
_month	Savegame/GameTime.h	/^	int _second, _minute, _hour, _weekday, _day, _month, _year;$/;"	m	class:OpenXcom::GameTime
_monthlyBuyLimit	Mod/RuleCraft.h	/^	int _monthlyBuyLimit;$/;"	m	class:OpenXcom::RuleCraft
_monthlyBuyLimit	Mod/RuleItem.h	/^	int _monthlyBuyLimit;$/;"	m	class:OpenXcom::RuleItem
_monthlyBuyLimit	Mod/RuleSoldier.h	/^	int _monthlyBuyLimit;$/;"	m	class:OpenXcom::RuleSoldier
_monthlyCost	Mod/RuleBaseFacility.h	/^	int _size, _buildCost, _refundValue, _buildTime, _monthlyCost;$/;"	m	class:OpenXcom::RuleBaseFacility
_monthlyMaintenance	Mod/RuleItem.h	/^	int _monthlySalary, _monthlyMaintenance;$/;"	m	class:OpenXcom::RuleItem
_monthlyPurchaseLimitLog	Savegame/SavedGame.h	/^	std::map<std::string, int> _monthlyPurchaseLimitLog;$/;"	m	class:OpenXcom::SavedGame
_monthlyRatingThresholds	Mod/Mod.h	/^	std::vector<int> _monthlyRatingThresholds;$/;"	m	class:OpenXcom::Mod
_monthlyRatings	Mod/Mod.h	/^	std::map<int, std::string> _missionRatings, _monthlyRatings;$/;"	m	class:OpenXcom::Mod
_monthlySalary	Mod/RuleItem.h	/^	int _monthlySalary, _monthlyMaintenance;$/;"	m	class:OpenXcom::RuleItem
_monthsPassed	Savegame/SavedGame.h	/^	int _monthsPassed;$/;"	m	class:OpenXcom::SavedGame
_monthsService	Savegame/SoldierDiary.h	/^	int _daysWoundedTotal, _totalShotByFriendlyCounter, _totalShotFriendlyCounter, _loneSurvivorTotal, _monthsService, _unconciousTotal, _shotAtCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_morale	Savegame/BattleUnit.h	/^	int _tu, _energy, _health, _morale, _stunlevel, _mana;$/;"	m	class:OpenXcom::BattleUnit
_moraleLossWhenKilled	Mod/RuleSoldier.h	/^	int _femaleFrequency, _value, _transferTime, _moraleLossWhenKilled;$/;"	m	class:OpenXcom::RuleSoldier
_moraleLossWhenKilled	Mod/Unit.h	/^	int _value, _moraleLossWhenKilled, _moveSound;$/;"	m	class:OpenXcom::Unit
_moraleRecovery	Mod/Armor.h	/^	RuleStatBonus _timeRecovery, _energyRecovery, _moraleRecovery, _healthRecovery, _stunRecovery, _manaRecovery;$/;"	m	class:OpenXcom::Armor
_moraleRecovery	Mod/RuleItem.h	/^	int _woundRecovery, _healthRecovery, _stunRecovery, _energyRecovery, _manaRecovery, _moraleRecovery, _painKillerRecovery;$/;"	m	class:OpenXcom::RuleItem
_moraleRecovery	Mod/RuleSoldierBonus.h	/^	RuleStatBonus _timeRecovery, _energyRecovery, _moraleRecovery, _healthRecovery, _stunRecovery, _manaRecovery;$/;"	m	class:OpenXcom::RuleSoldierBonus
_moraleRestored	Savegame/BattleUnit.h	/^	int _moraleRestored;$/;"	m	class:OpenXcom::BattleUnit
_motionPoints	Savegame/BattleUnit.h	/^	int _motionPoints;$/;"	m	class:OpenXcom::BattleUnit
_mouseActive	Engine/Game.h	/^	bool _mouseActive;$/;"	m	class:OpenXcom::Game
_mouseHoverItem	Battlescape/InventoryState.h	/^	BattleItem *_mouseHoverItem = nullptr;$/;"	m	class:OpenXcom::InventoryState
_mouseHoverItemFrame	Battlescape/InventoryState.h	/^	int _mouseHoverItemFrame = 0;$/;"	m	class:OpenXcom::InventoryState
_mouseMovedOverThreshold	Battlescape/BattlescapeState.h	/^	bool _mouseMovedOverThreshold;$/;"	m	class:OpenXcom::BattlescapeState
_mouseMovedOverThreshold	Battlescape/MiniMapView.h	/^	bool _mouseMovedOverThreshold;$/;"	m	class:OpenXcom::MiniMapView
_mouseMovedOverThreshold	Geoscape/Globe.h	/^	bool _mouseMovedOverThreshold;$/;"	m	class:OpenXcom::Globe
_mouseOverIcons	Battlescape/BattlescapeState.h	/^	bool _mouseOverIcons;$/;"	m	class:OpenXcom::BattlescapeState
_mouseOverItem	Battlescape/Inventory.h	/^	BattleItem *_mouseOverItem;$/;"	m	class:OpenXcom::Inventory
_mouseScrollX	Battlescape/MiniMapView.h	/^	int _mouseScrollX, _mouseScrollY;$/;"	m	class:OpenXcom::MiniMapView
_mouseScrollY	Battlescape/MiniMapView.h	/^	int _mouseScrollX, _mouseScrollY;$/;"	m	class:OpenXcom::MiniMapView
_mouseScrollingStartTime	Battlescape/BattlescapeState.h	/^	Uint32 _mouseScrollingStartTime;$/;"	m	class:OpenXcom::BattlescapeState
_mouseScrollingStartTime	Battlescape/MiniMapView.h	/^	Uint32 _mouseScrollingStartTime;$/;"	m	class:OpenXcom::MiniMapView
_mouseScrollingStartTime	Geoscape/Globe.h	/^	Uint32 _mouseScrollingStartTime;$/;"	m	class:OpenXcom::Globe
_mouseX	Battlescape/Map.h	/^	int _mouseX, _mouseY;$/;"	m	class:OpenXcom::Map
_mouseX	Engine/Action.h	/^	int _topBlackBand, _leftBlackBand, _mouseX, _mouseY, _surfaceX, _surfaceY;$/;"	m	class:OpenXcom::Action
_mouseY	Battlescape/Map.h	/^	int _mouseX, _mouseY;$/;"	m	class:OpenXcom::Map
_mouseY	Engine/Action.h	/^	int _topBlackBand, _leftBlackBand, _mouseX, _mouseY, _surfaceX, _surfaceY;$/;"	m	class:OpenXcom::Action
_mousex	Geoscape/BuildNewBaseState.h	/^	int _mousex, _mousey;$/;"	m	class:OpenXcom::BuildNewBaseState
_mousey	Geoscape/BuildNewBaseState.h	/^	int _mousex, _mousey;$/;"	m	class:OpenXcom::BuildNewBaseState
_moveAbove	Menu/ModListState.cpp	/^static void _moveAbove(const std::pair<std::string, bool> &srcMod, const std::pair<std::string, bool> &destMod)$/;"	f	namespace:OpenXcom
_moveBelow	Menu/ModListState.cpp	/^static void _moveBelow(const std::pair<std::string, bool> &srcMod, const std::pair<std::string, bool> &destMod)$/;"	f	namespace:OpenXcom
_moveCostBase	Mod/Armor.h	/^	ArmorMoveCost _moveCostBase = { 100, 100 };$/;"	m	class:OpenXcom::Armor
_moveCostBase	Savegame/BattleUnit.h	/^	ArmorMoveCost _moveCostBase = { 0, 0 };$/;"	m	class:OpenXcom::BattleUnit
_moveCostBaseFly	Mod/Armor.h	/^	ArmorMoveCost _moveCostBaseFly = { 100, 100 };$/;"	m	class:OpenXcom::Armor
_moveCostBaseFly	Savegame/BattleUnit.h	/^	ArmorMoveCost _moveCostBaseFly = { 0, 0 };$/;"	m	class:OpenXcom::BattleUnit
_moveCostBaseNormal	Mod/Armor.h	/^	ArmorMoveCost _moveCostBaseNormal = { 100, 100 };$/;"	m	class:OpenXcom::Armor
_moveCostBaseNormal	Savegame/BattleUnit.h	/^	ArmorMoveCost _moveCostBaseNormal = { 0, 0 };$/;"	m	class:OpenXcom::BattleUnit
_moveCostFlyDown	Mod/Armor.h	/^	ArmorMoveCost _moveCostFlyDown = { 100, 0 };$/;"	m	class:OpenXcom::Armor
_moveCostFlyRun	Mod/Armor.h	/^	ArmorMoveCost _moveCostFlyRun = { 75, 75 };$/;"	m	class:OpenXcom::Armor
_moveCostFlyStrafe	Mod/Armor.h	/^	ArmorMoveCost _moveCostFlyStrafe = { 100, 50 };$/;"	m	class:OpenXcom::Armor
_moveCostFlyUp	Mod/Armor.h	/^	ArmorMoveCost _moveCostFlyUp = { 100, 0 };$/;"	m	class:OpenXcom::Armor
_moveCostFlyWalk	Mod/Armor.h	/^	ArmorMoveCost _moveCostFlyWalk = { 100, 50 };$/;"	m	class:OpenXcom::Armor
_moveCostGravLift	Mod/Armor.h	/^	ArmorMoveCost _moveCostGravLift = { 100, 0 };$/;"	m	class:OpenXcom::Armor
_moveCostRun	Mod/Armor.h	/^	ArmorMoveCost _moveCostRun = { 75, 75 };$/;"	m	class:OpenXcom::Armor
_moveCostSneak	Mod/Armor.h	/^	ArmorMoveCost _moveCostSneak = { 100, 50 };$/;"	m	class:OpenXcom::Armor
_moveCostStrafe	Mod/Armor.h	/^	ArmorMoveCost _moveCostStrafe = { 100, 50 };$/;"	m	class:OpenXcom::Armor
_moveCostWalk	Mod/Armor.h	/^	ArmorMoveCost _moveCostWalk = { 100, 50 };$/;"	m	class:OpenXcom::Armor
_moveSound	Mod/Armor.h	/^	int _moveSound;$/;"	m	class:OpenXcom::Armor
_moveSound	Mod/Unit.h	/^	int _value, _moraleLossWhenKilled, _moveSound;$/;"	m	class:OpenXcom::Unit
_moveSound	Savegame/BattleUnit.h	/^	int _value, _moveSound;$/;"	m	class:OpenXcom::BattleUnit
_move_x	Engine/ShaderMove.h	/^	int _move_x;$/;"	m	class:OpenXcom::ShaderMove
_move_y	Engine/ShaderMove.h	/^	int _move_y;$/;"	m	class:OpenXcom::ShaderMove
_movementType	Mod/Armor.h	/^	MovementType _movementType;$/;"	m	class:OpenXcom::Armor
_movementType	Savegame/BattleUnit.h	/^	MovementType _movementType;$/;"	m	class:OpenXcom::BattleUnit
_movingUnit	Battlescape/TileEngine.h	/^	BattleUnit* _movingUnit = nullptr;$/;"	m	class:OpenXcom::TileEngine
_movingUnitPrev	Battlescape/TileEngine.h	/^	std::vector<BattleUnit*> _movingUnitPrev;$/;"	m	class:OpenXcom::TileEngine
_multiUfoRetaliation	Mod/RuleAlienMission.h	/^	bool _multiUfoRetaliation;$/;"	m	class:OpenXcom::RuleAlienMission
_multiUfoRetaliationInProgress	Savegame/AlienMission.h	/^	bool _interrupted, _multiUfoRetaliationInProgress;$/;"	m	class:OpenXcom::AlienMission
_murdererId	Savegame/BattleUnit.h	/^	int _murdererId;	\/\/ used to credit the murderer with the kills that this unit got by blowing up on death$/;"	m	class:OpenXcom::BattleUnit
_murdererWeapon	Savegame/BattleUnit.h	/^	std::string _murdererWeapon, _murdererWeaponAmmo;$/;"	m	class:OpenXcom::BattleUnit
_murdererWeaponAmmo	Savegame/BattleUnit.h	/^	std::string _murdererWeapon, _murdererWeaponAmmo;$/;"	m	class:OpenXcom::BattleUnit
_music	Engine/Music.h	/^	Mix_Music *_music;$/;"	m	class:OpenXcom::Music
_music	Mod/AlienDeployment.h	/^	std::vector<std::string> _terrains, _music;$/;"	m	class:OpenXcom::AlienDeployment
_music	Mod/RuleEvent.h	/^	std::string _name, _description, _background, _music;$/;"	m	class:OpenXcom::RuleEvent
_music	Mod/RuleInterface.h	/^	std::string _music;$/;"	m	class:OpenXcom::RuleInterface
_music	Mod/RuleTerrain.h	/^	std::vector<std::string> _civilianTypes, _music;$/;"	m	class:OpenXcom::RuleTerrain
_music	Savegame/SavedBattleGame.h	/^	std::string _music;$/;"	m	class:OpenXcom::SavedBattleGame
_musicDefs	Mod/Mod.h	/^	std::map<std::string, RuleMusic *> _musicDefs;$/;"	m	class:OpenXcom::Mod
_musicId	Battlescape/BriefingState.h	/^	std::string _cutsceneId, _musicId;$/;"	m	class:OpenXcom::BriefingState
_musics	Mod/Mod.h	/^	std::map<std::string, Music*> _musics;$/;"	m	class:OpenXcom::Mod
_mute	Interface/Window.h	/^	bool _mute;$/;"	m	class:OpenXcom::Window
_muteMusic	Mod/Mod.h	/^	Music *_muteMusic;$/;"	m	class:OpenXcom::Mod
_muteSound	Mod/Mod.h	/^	Sound *_muteSound;$/;"	m	class:OpenXcom::Mod
_name	Engine/ModInfo.h	/^	std::string _name, _desc, _author, _url, _id, _master;$/;"	m	class:OpenXcom::ModInfo
_name	Geoscape/GraphsState.cpp	/^	LocalizedText _name;$/;"	m	struct:OpenXcom::GraphButInfo	file:
_name	Mod/MapBlock.h	/^	std::string _name;$/;"	m	class:OpenXcom::MapBlock
_name	Mod/MapDataSet.h	/^	std::string _name;$/;"	m	class:OpenXcom::MapDataSet
_name	Mod/RuleEvent.h	/^	std::string _name, _description, _background, _music;$/;"	m	class:OpenXcom::RuleEvent
_name	Mod/RuleItem.h	/^	std::string _type, _name, _nameAsAmmo; \/\/ two types of objects can have the same name$/;"	m	class:OpenXcom::RuleItem
_name	Mod/RuleManufacture.h	/^	std::string _name, _category;$/;"	m	class:OpenXcom::RuleManufacture
_name	Mod/RuleManufactureShortcut.h	/^	std::string _name, _startFrom;$/;"	m	class:OpenXcom::RuleManufactureShortcut
_name	Mod/RuleMusic.h	/^	std::string _type, _name;$/;"	m	class:OpenXcom::RuleMusic
_name	Mod/RuleResearch.h	/^	std::string _name, _lookup, _cutscene, _spawnedItem, _spawnedEvent;$/;"	m	class:OpenXcom::RuleResearch
_name	Mod/RuleSoldierBonus.h	/^	std::string _name;$/;"	m	class:OpenXcom::RuleSoldierBonus
_name	Mod/RuleSoldierTransformation.h	/^	std::string _name;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_name	Mod/RuleTerrain.h	/^	std::string _name, _mapScript;$/;"	m	class:OpenXcom::RuleTerrain
_name	Savegame/BattleUnit.h	/^	std::string _name;$/;"	m	class:OpenXcom::BattleUnit
_name	Savegame/SavedGame.h	/^	std::string _name;$/;"	m	class:OpenXcom::SavedGame
_name	Savegame/Soldier.h	/^	std::string _name;$/;"	m	class:OpenXcom::Soldier
_name	Savegame/Target.h	/^	std::string _name;$/;"	m	class:OpenXcom::Target
_nameAsAmmo	Mod/RuleItem.h	/^	std::string _type, _name, _nameAsAmmo; \/\/ two types of objects can have the same name$/;"	m	class:OpenXcom::RuleItem
_nameDisplay	Savegame/SavedBattleGame.h	/^	bool _nameDisplay;$/;"	m	class:OpenXcom::SavedBattleGame
_names	Engine/Language.cpp	/^std::map<std::string, std::string> Language::_names;$/;"	m	class:OpenXcom::Language	file:
_names	Engine/Language.h	/^	static std::map<std::string, std::string> _names;$/;"	m	class:OpenXcom::Language
_names	Mod/RuleSoldier.h	/^	std::vector<SoldierNamePool*> _names;$/;"	m	class:OpenXcom::RuleSoldier
_nationality	Savegame/Soldier.h	/^	int _id, _nationality, _improvement, _psiStrImprovement;$/;"	m	class:OpenXcom::Soldier
_needItem	Mod/RuleResearch.h	/^	bool _needItem, _destroyItem;$/;"	m	class:OpenXcom::RuleResearch
_needsCorpseRecovered	Mod/RuleSoldierTransformation.h	/^	bool _keepSoldierArmor, _createsClone, _needsCorpseRecovered, _allowsDeadSoldiers, _allowsLiveSoldiers, _allowsWoundedSoldiers;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_newBaseUnlockResearch	Mod/Mod.h	/^	std::string _fontName, _finalResearch, _psiUnlockResearch, _fakeUnderwaterBaseUnlockResearch, _newBaseUnlockResearch;$/;"	m	class:OpenXcom::Mod
_newPact	Savegame/Country.h	/^	bool _pact, _newPact, _cancelPact;$/;"	m	class:OpenXcom::Country
_newShot	Savegame/HitLog.h	/^	std::string _newTurn, _reactionFire, _newShot, _noDamage, _smallDamage, _bigDamage;$/;"	m	class:OpenXcom::HitLog
_newTurn	Savegame/HitLog.h	/^	std::string _newTurn, _reactionFire, _newShot, _noDamage, _smallDamage, _bigDamage;$/;"	m	class:OpenXcom::HitLog
_newVersion	Menu/MainMenuState.h	/^	std::string _newVersion;$/;"	m	class:OpenXcom::MainMenuState
_nextArg	Engine/LocalizedText.h	/^	unsigned _nextArg; \/\/\/< The next argument ID.$/;"	m	class:OpenXcom::LocalizedText
_nextStage	Mod/AlienDeployment.h	/^	std::string _nextStage, _race, _mapScript;$/;"	m	class:OpenXcom::AlienDeployment
_nextUfoCounter	Savegame/AlienMission.h	/^	size_t _nextUfoCounter;$/;"	m	class:OpenXcom::AlienMission
_nextWave	Savegame/AlienMission.h	/^	size_t _nextWave;$/;"	m	class:OpenXcom::AlienMission
_nightVisionOn	Battlescape/Map.h	/^	bool _nightVisionOn;$/;"	m	class:OpenXcom::Map
_noCraft	Battlescape/InventoryState.h	/^	const bool _tu, _noCraft;$/;"	m	class:OpenXcom::InventoryState
_noDamage	Savegame/HitLog.h	/^	std::string _newTurn, _reactionFire, _newShot, _noDamage, _smallDamage, _bigDamage;$/;"	m	class:OpenXcom::HitLog
_noFloors	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, bool> > _noFloors, _stopLOSses;$/;"	m	class:OpenXcom::MCDPatch
_noLOSAccuracyPenalty	Mod/RuleItem.h	/^	int _noLOSAccuracyPenalty;$/;"	m	class:OpenXcom::RuleItem
_noLOSAccuracyPenaltyGlobal	Mod/Mod.h	/^	int _noLOSAccuracyPenaltyGlobal;$/;"	m	class:OpenXcom::Mod
_noScrollLeftEdge	Interface/TextList.h	/^	int _noScrollLeftEdge, _noScrollRightEdge;$/;"	m	class:OpenXcom::TextList
_noScrollRightEdge	Interface/TextList.h	/^	int _noScrollLeftEdge, _noScrollRightEdge;$/;"	m	class:OpenXcom::TextList
_noSound	Battlescape/UnitDieBState.h	/^	bool _noSound;$/;"	m	class:OpenXcom::UnitDieBState
_node	Battlescape/PathfindingOpenSet.h	/^	PathfindingNode *_node;$/;"	m	struct:OpenXcom::OpenSetEntry
_nodeLinks	Savegame/Node.h	/^	std::vector<int> _nodeLinks;$/;"	m	class:OpenXcom::Node
_nodes	Battlescape/Pathfinding.h	/^	std::vector<PathfindingNode> _nodes;$/;"	m	class:OpenXcom::Pathfinding
_nodes	Savegame/SavedBattleGame.h	/^	std::vector<Node*> _nodes;$/;"	m	class:OpenXcom::SavedBattleGame
_normalization	Mod/RuleMusic.h	/^	float _normalization;$/;"	m	class:OpenXcom::RuleMusic
_notifyWhenRefueled	Mod/RuleCraft.h	/^	bool _keepCraftAfterFailedMission, _allowLanding, _spacecraft, _notifyWhenRefueled, _autoPatrol, _undetectable;$/;"	m	class:OpenXcom::RuleCraft
_noun	Savegame/SoldierDiary.h	/^	std::string  _type, _noun;$/;"	m	class:OpenXcom::SoldierCommendations
_numAmmoLeft	Battlescape/BattlescapeState.h	/^	std::vector<NumberText*> _numAmmoLeft, _numAmmoRight;$/;"	m	class:OpenXcom::BattlescapeState
_numAmmoRight	Battlescape/BattlescapeState.h	/^	std::vector<NumberText*> _numAmmoLeft, _numAmmoRight;$/;"	m	class:OpenXcom::BattlescapeState
_numBravery	Basescape/SoldierInfoState.h	/^	Text *_numTimeUnits, *_numStamina, *_numHealth, *_numBravery, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength, *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::SoldierInfoState
_numBravery	Battlescape/UnitInfoState.h	/^	Text *_numTimeUnits, *_numEnergy, *_numHealth, *_numFatalWounds, *_numBravery, *_numMorale, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength;$/;"	m	class:OpenXcom::UnitInfoState
_numColors	Engine/Screen.h	/^	int _numColors, _firstColor;$/;"	m	class:OpenXcom::Screen
_numContainment	Basescape/BaseInfoState.h	/^	Text *_numQuarters, *_numStores, *_numLaboratories, *_numWorkshops, *_numContainment, *_numHangars;$/;"	m	class:OpenXcom::BaseInfoState
_numCost	Basescape/PlaceFacilityState.h	/^	Text *_txtFacility, *_txtCost, *_numCost, *_numResources, *_txtTime, *_numTime, *_txtMaintenance, *_numMaintenance;$/;"	m	class:OpenXcom::PlaceFacilityState
_numDefense	Basescape/BaseInfoState.h	/^	Text *_numDefense, *_numShortRange, *_numLongRange;$/;"	m	class:OpenXcom::BaseInfoState
_numEnergy	Battlescape/BattlescapeState.h	/^	NumberText *_numTimeUnits, *_numEnergy, *_numHealth, *_numMorale, *_numLayers;$/;"	m	class:OpenXcom::BattlescapeState
_numEnergy	Battlescape/UnitInfoState.h	/^	Text *_numTimeUnits, *_numEnergy, *_numHealth, *_numFatalWounds, *_numBravery, *_numMorale, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength;$/;"	m	class:OpenXcom::UnitInfoState
_numEngineers	Basescape/BaseInfoState.h	/^	Text *_numSoldiers, *_numEngineers, *_numScientists;$/;"	m	class:OpenXcom::BaseInfoState
_numFatalWounds	Battlescape/UnitInfoState.h	/^	Text *_numTimeUnits, *_numEnergy, *_numHealth, *_numFatalWounds, *_numBravery, *_numMorale, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength;$/;"	m	class:OpenXcom::UnitInfoState
_numFiring	Basescape/SoldierInfoState.h	/^	Text *_numTimeUnits, *_numStamina, *_numHealth, *_numBravery, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength, *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::SoldierInfoState
_numFiring	Battlescape/UnitInfoState.h	/^	Text *_numTimeUnits, *_numEnergy, *_numHealth, *_numFatalWounds, *_numBravery, *_numMorale, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength;$/;"	m	class:OpenXcom::UnitInfoState
_numFrontArmor	Battlescape/UnitInfoState.h	/^	Text *_numFrontArmor, *_numLeftArmor, *_numRightArmor, *_numRearArmor, *_numUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_numHangars	Basescape/BaseInfoState.h	/^	Text *_numQuarters, *_numStores, *_numLaboratories, *_numWorkshops, *_numContainment, *_numHangars;$/;"	m	class:OpenXcom::BaseInfoState
_numHealth	Basescape/SoldierInfoState.h	/^	Text *_numTimeUnits, *_numStamina, *_numHealth, *_numBravery, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength, *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::SoldierInfoState
_numHealth	Battlescape/BattlescapeState.h	/^	NumberText *_numTimeUnits, *_numEnergy, *_numHealth, *_numMorale, *_numLayers;$/;"	m	class:OpenXcom::BattlescapeState
_numHealth	Battlescape/UnitInfoState.h	/^	Text *_numTimeUnits, *_numEnergy, *_numHealth, *_numFatalWounds, *_numBravery, *_numMorale, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength;$/;"	m	class:OpenXcom::UnitInfoState
_numLaboratories	Basescape/BaseInfoState.h	/^	Text *_numQuarters, *_numStores, *_numLaboratories, *_numWorkshops, *_numContainment, *_numHangars;$/;"	m	class:OpenXcom::BaseInfoState
_numLayers	Battlescape/BattlescapeState.h	/^	NumberText *_numTimeUnits, *_numEnergy, *_numHealth, *_numMorale, *_numLayers;$/;"	m	class:OpenXcom::BattlescapeState
_numLeftArmor	Battlescape/UnitInfoState.h	/^	Text *_numFrontArmor, *_numLeftArmor, *_numRightArmor, *_numRearArmor, *_numUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_numLongRange	Basescape/BaseInfoState.h	/^	Text *_numDefense, *_numShortRange, *_numLongRange;$/;"	m	class:OpenXcom::BaseInfoState
_numMaintenance	Basescape/PlaceFacilityState.h	/^	Text *_txtFacility, *_txtCost, *_numCost, *_numResources, *_txtTime, *_numTime, *_txtMaintenance, *_numMaintenance;$/;"	m	class:OpenXcom::PlaceFacilityState
_numMana	Basescape/SoldierInfoState.h	/^	Text *_numTimeUnits, *_numStamina, *_numHealth, *_numBravery, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength, *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::SoldierInfoState
_numMana	Battlescape/UnitInfoState.h	/^	Text *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::UnitInfoState
_numMedikitLeft	Battlescape/BattlescapeState.h	/^	std::vector<NumberText*> _numMedikitLeft, _numMedikitRight;$/;"	m	class:OpenXcom::BattlescapeState
_numMedikitRight	Battlescape/BattlescapeState.h	/^	std::vector<NumberText*> _numMedikitLeft, _numMedikitRight;$/;"	m	class:OpenXcom::BattlescapeState
_numMelee	Basescape/SoldierInfoState.h	/^	Text *_numTimeUnits, *_numStamina, *_numHealth, *_numBravery, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength, *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::SoldierInfoState
_numMelee	Battlescape/UnitInfoState.h	/^	Text *_numTimeUnits, *_numEnergy, *_numHealth, *_numFatalWounds, *_numBravery, *_numMorale, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength;$/;"	m	class:OpenXcom::UnitInfoState
_numMorale	Battlescape/BattlescapeState.h	/^	NumberText *_numTimeUnits, *_numEnergy, *_numHealth, *_numMorale, *_numLayers;$/;"	m	class:OpenXcom::BattlescapeState
_numMorale	Battlescape/UnitInfoState.h	/^	Text *_numTimeUnits, *_numEnergy, *_numHealth, *_numFatalWounds, *_numBravery, *_numMorale, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength;$/;"	m	class:OpenXcom::UnitInfoState
_numPsiSkill	Basescape/SoldierInfoState.h	/^	Text *_numTimeUnits, *_numStamina, *_numHealth, *_numBravery, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength, *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::SoldierInfoState
_numPsiSkill	Battlescape/UnitInfoState.h	/^	Text *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::UnitInfoState
_numPsiStrength	Basescape/SoldierInfoState.h	/^	Text *_numTimeUnits, *_numStamina, *_numHealth, *_numBravery, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength, *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::SoldierInfoState
_numPsiStrength	Battlescape/UnitInfoState.h	/^	Text *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::UnitInfoState
_numQuarters	Basescape/BaseInfoState.h	/^	Text *_numQuarters, *_numStores, *_numLaboratories, *_numWorkshops, *_numContainment, *_numHangars;$/;"	m	class:OpenXcom::BaseInfoState
_numReactions	Basescape/SoldierInfoState.h	/^	Text *_numTimeUnits, *_numStamina, *_numHealth, *_numBravery, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength, *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::SoldierInfoState
_numReactions	Battlescape/UnitInfoState.h	/^	Text *_numTimeUnits, *_numEnergy, *_numHealth, *_numFatalWounds, *_numBravery, *_numMorale, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength;$/;"	m	class:OpenXcom::UnitInfoState
_numRearArmor	Battlescape/UnitInfoState.h	/^	Text *_numFrontArmor, *_numLeftArmor, *_numRightArmor, *_numRearArmor, *_numUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_numResources	Basescape/PlaceFacilityState.h	/^	Text *_txtFacility, *_txtCost, *_numCost, *_numResources, *_txtTime, *_numTime, *_txtMaintenance, *_numMaintenance;$/;"	m	class:OpenXcom::PlaceFacilityState
_numRightArmor	Battlescape/UnitInfoState.h	/^	Text *_numFrontArmor, *_numLeftArmor, *_numRightArmor, *_numRearArmor, *_numUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_numScientists	Basescape/BaseInfoState.h	/^	Text *_numSoldiers, *_numEngineers, *_numScientists;$/;"	m	class:OpenXcom::BaseInfoState
_numShortRange	Basescape/BaseInfoState.h	/^	Text *_numDefense, *_numShortRange, *_numLongRange;$/;"	m	class:OpenXcom::BaseInfoState
_numSoldiers	Basescape/BaseInfoState.h	/^	Text *_numSoldiers, *_numEngineers, *_numScientists;$/;"	m	class:OpenXcom::BaseInfoState
_numStamina	Basescape/SoldierInfoState.h	/^	Text *_numTimeUnits, *_numStamina, *_numHealth, *_numBravery, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength, *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::SoldierInfoState
_numStores	Basescape/BaseInfoState.h	/^	Text *_numQuarters, *_numStores, *_numLaboratories, *_numWorkshops, *_numContainment, *_numHangars;$/;"	m	class:OpenXcom::BaseInfoState
_numStrength	Basescape/SoldierInfoState.h	/^	Text *_numTimeUnits, *_numStamina, *_numHealth, *_numBravery, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength, *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::SoldierInfoState
_numStrength	Battlescape/UnitInfoState.h	/^	Text *_numTimeUnits, *_numEnergy, *_numHealth, *_numFatalWounds, *_numBravery, *_numMorale, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength;$/;"	m	class:OpenXcom::UnitInfoState
_numThrowing	Basescape/SoldierInfoState.h	/^	Text *_numTimeUnits, *_numStamina, *_numHealth, *_numBravery, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength, *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::SoldierInfoState
_numThrowing	Battlescape/UnitInfoState.h	/^	Text *_numTimeUnits, *_numEnergy, *_numHealth, *_numFatalWounds, *_numBravery, *_numMorale, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength;$/;"	m	class:OpenXcom::UnitInfoState
_numTime	Basescape/PlaceFacilityState.h	/^	Text *_txtFacility, *_txtCost, *_numCost, *_numResources, *_txtTime, *_numTime, *_txtMaintenance, *_numMaintenance;$/;"	m	class:OpenXcom::PlaceFacilityState
_numTimeUnits	Basescape/SoldierInfoState.h	/^	Text *_numTimeUnits, *_numStamina, *_numHealth, *_numBravery, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength, *_numPsiStrength, *_numPsiSkill, *_numMana;$/;"	m	class:OpenXcom::SoldierInfoState
_numTimeUnits	Battlescape/BattlescapeState.h	/^	NumberText *_numTimeUnits, *_numEnergy, *_numHealth, *_numMorale, *_numLayers;$/;"	m	class:OpenXcom::BattlescapeState
_numTimeUnits	Battlescape/UnitInfoState.h	/^	Text *_numTimeUnits, *_numEnergy, *_numHealth, *_numFatalWounds, *_numBravery, *_numMorale, *_numReactions, *_numFiring, *_numThrowing, *_numMelee, *_numStrength;$/;"	m	class:OpenXcom::UnitInfoState
_numTwoHandedIndicatorLeft	Battlescape/BattlescapeState.h	/^	NumberText *_numTwoHandedIndicatorLeft, *_numTwoHandedIndicatorRight;$/;"	m	class:OpenXcom::BattlescapeState
_numTwoHandedIndicatorRight	Battlescape/BattlescapeState.h	/^	NumberText *_numTwoHandedIndicatorLeft, *_numTwoHandedIndicatorRight;$/;"	m	class:OpenXcom::BattlescapeState
_numUnderArmor	Battlescape/UnitInfoState.h	/^	Text *_numFrontArmor, *_numLeftArmor, *_numRightArmor, *_numRearArmor, *_numUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_numUnitsSpotted	Battlescape/UnitWalkBState.h	/^	std::size_t _numUnitsSpotted;$/;"	m	class:OpenXcom::UnitWalkBState
_numVisibleUnit	Battlescape/BattlescapeState.h	/^	NumberText *_numVisibleUnit[VISIBLE_MAX];$/;"	m	class:OpenXcom::BattlescapeState
_numWorkshops	Basescape/BaseInfoState.h	/^	Text *_numQuarters, *_numStores, *_numLaboratories, *_numWorkshops, *_numContainment, *_numHangars;$/;"	m	class:OpenXcom::BaseInfoState
_number	Battlescape/PrimeGrenadeState.h	/^	Text *_number[24];$/;"	m	class:OpenXcom::PrimeGrenadeState
_numberOfDirectlyVisibleUnits	Battlescape/BattlescapeState.h	/^	int _numberOfDirectlyVisibleUnits, _numberOfEnemiesTotal, _numberOfEnemiesTotalPlusWounded;$/;"	m	class:OpenXcom::BattlescapeState
_numberOfEnemiesTotal	Battlescape/BattlescapeState.h	/^	int _numberOfDirectlyVisibleUnits, _numberOfEnemiesTotal, _numberOfEnemiesTotalPlusWounded;$/;"	m	class:OpenXcom::BattlescapeState
_numberOfEnemiesTotalPlusWounded	Battlescape/BattlescapeState.h	/^	int _numberOfDirectlyVisibleUnits, _numberOfEnemiesTotal, _numberOfEnemiesTotalPlusWounded;$/;"	m	class:OpenXcom::BattlescapeState
_nvColor	Battlescape/Map.h	/^	int _nvColor;$/;"	m	class:OpenXcom::Map
_objectType	Mod/MapData.h	/^	TilePart _objectType;$/;"	m	class:OpenXcom::MapData
_objectTypes	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_objective	Mod/RuleAlienMission.h	/^	MissionObjective _objective;$/;"	m	class:OpenXcom::RuleAlienMission
_objectiveCompleteScore	Mod/AlienDeployment.h	/^	int _objectiveType, _objectivesRequired, _objectiveCompleteScore, _objectiveFailedScore, _despawnPenalty, _abortPenalty, _points, _turnLimit, _cheatTurn;$/;"	m	class:OpenXcom::AlienDeployment
_objectiveCompleteText	Mod/AlienDeployment.h	/^	std::string _markerName, _objectivePopup, _objectiveCompleteText, _objectiveFailedText;$/;"	m	class:OpenXcom::AlienDeployment
_objectiveFailedScore	Mod/AlienDeployment.h	/^	int _objectiveType, _objectivesRequired, _objectiveCompleteScore, _objectiveFailedScore, _despawnPenalty, _abortPenalty, _points, _turnLimit, _cheatTurn;$/;"	m	class:OpenXcom::AlienDeployment
_objectiveFailedText	Mod/AlienDeployment.h	/^	std::string _markerName, _objectivePopup, _objectiveCompleteText, _objectiveFailedText;$/;"	m	class:OpenXcom::AlienDeployment
_objectivePopup	Mod/AlienDeployment.h	/^	std::string _markerName, _objectivePopup, _objectiveCompleteText, _objectiveFailedText;$/;"	m	class:OpenXcom::AlienDeployment
_objectiveType	Mod/AlienDeployment.h	/^	int _objectiveType, _objectivesRequired, _objectiveCompleteScore, _objectiveFailedScore, _despawnPenalty, _abortPenalty, _points, _turnLimit, _cheatTurn;$/;"	m	class:OpenXcom::AlienDeployment
_objectiveType	Savegame/SavedBattleGame.h	/^	int _objectiveType, _objectivesDestroyed, _objectivesNeeded;$/;"	m	class:OpenXcom::SavedBattleGame
_objectivesDestroyed	Savegame/SavedBattleGame.h	/^	int _objectiveType, _objectivesDestroyed, _objectivesNeeded;$/;"	m	class:OpenXcom::SavedBattleGame
_objectivesNeeded	Savegame/SavedBattleGame.h	/^	int _objectiveType, _objectivesDestroyed, _objectivesNeeded;$/;"	m	class:OpenXcom::SavedBattleGame
_objectivesRequired	Mod/AlienDeployment.h	/^	int _objectiveType, _objectivesRequired, _objectiveCompleteScore, _objectiveFailedScore, _despawnPenalty, _abortPenalty, _points, _turnLimit, _cheatTurn;$/;"	m	class:OpenXcom::AlienDeployment
_objects	Geoscape/UfoTrackerState.h	/^	std::vector<Target*> _objects;$/;"	m	class:OpenXcom::UfoTrackerState
_objects	Mod/MapDataSet.h	/^	std::vector<MapData*> _objects;$/;"	m	class:OpenXcom::MapDataSet
_objects	Savegame/Tile.h	/^	MapData *_objects[O_MAX];$/;"	m	class:OpenXcom::Tile
_objectsCache	Savegame/Tile.h	/^	TileObjectCache _objectsCache[O_MAX] = { };$/;"	m	class:OpenXcom::Tile
_obstacle	Savegame/Tile.h	/^	Uint8 _obstacle = 0;$/;"	m	class:OpenXcom::Tile
_obstacleTimer	Battlescape/Map.h	/^	Timer *_scrollMouseTimer, *_scrollKeyTimer, *_obstacleTimer;$/;"	m	class:OpenXcom::Map
_occupiedSlotsCache	Battlescape/Inventory.h	/^	std::vector<std::vector<char>> _occupiedSlotsCache;$/;"	m	class:OpenXcom::Inventory
_off_x	Engine/ShaderRepeat.h	/^	const int _off_x;$/;"	m	struct:OpenXcom::helper::controler
_off_x	Engine/ShaderRepeat.h	/^	int _off_x;$/;"	m	class:OpenXcom::ShaderRepeat
_off_y	Engine/ShaderRepeat.h	/^	const int _off_y;$/;"	m	struct:OpenXcom::helper::controler
_off_y	Engine/ShaderRepeat.h	/^	int _off_y;$/;"	m	class:OpenXcom::ShaderRepeat
_offset	Engine/FlcPlayer.h	/^	int _offset;$/;"	m	class:OpenXcom::FlcPlayer
_offset	Interface/ScrollBar.h	/^	int _offset;$/;"	m	class:OpenXcom::ScrollBar
_offset	Ufopaedia/UfopaediaStartState.h	/^		int _offset, _scroll;$/;"	m	class:OpenXcom::UfopaediaStartState
_offsetX	Interface/Slider.h	/^	int _thickness, _textness, _minX, _maxX, _offsetX;$/;"	m	class:OpenXcom::Slider
_offsets	Mod/RuleConverter.h	/^	std::map<std::string, int> _offsets;$/;"	m	class:OpenXcom::RuleConverter
_oldMaster	Menu/StartState.h	/^	std::string _oldMaster;$/;"	m	class:OpenXcom::StartState
_oldlat	Geoscape/BuildNewBaseState.h	/^	double _oldlat,_oldlon;$/;"	m	class:OpenXcom::BuildNewBaseState
_oldlon	Geoscape/BuildNewBaseState.h	/^	double _oldlat,_oldlon;$/;"	m	class:OpenXcom::BuildNewBaseState
_oldshowradar	Geoscape/BuildNewBaseState.h	/^	bool _oldshowradar;$/;"	m	class:OpenXcom::BuildNewBaseState
_oneHandedPenalty	Mod/RuleItem.h	/^	int _kneelBonus, _oneHandedPenalty;$/;"	m	class:OpenXcom::RuleItem
_oneHandedPenaltyGlobal	Mod/Mod.h	/^	int _kneelBonusGlobal, _oneHandedPenaltyGlobal;$/;"	m	class:OpenXcom::Mod
_oneTimeRandomEvents	Mod/RuleEventScript.h	/^	WeightedOptions _oneTimeRandomEvents;$/;"	m	class:OpenXcom::RuleEventScript
_oneTimeSequentialEvents	Mod/RuleEventScript.h	/^	std::vector<std::string> _oneTimeSequentialEvents;$/;"	m	class:OpenXcom::RuleEventScript
_opacity	Battlescape/Particle.h	/^	Uint8 _color, _opacity, _size;$/;"	m	class:OpenXcom::Particle
_openedFromBasescape	Basescape/GlobalManufactureState.h	/^	bool _openedFromBasescape;$/;"	m	class:OpenXcom::GlobalManufactureState
_openedFromBasescape	Basescape/GlobalResearchState.h	/^	bool _openedFromBasescape;$/;"	m	class:OpenXcom::GlobalResearchState
_openentry	Battlescape/PathfindingNode.h	/^	Uint8 _openentry;$/;"	m	class:OpenXcom::PathfindingNode
_openentry	Battlescape/PathfindingOpenSet.h	/^	Uint8 _openentry;$/;"	m	struct:OpenXcom::OpenSetEntry
_operationBaseType	Mod/RuleAlienMission.h	/^	std::string _operationBaseType;$/;"	m	class:OpenXcom::RuleAlienMission
_operationNamesFirst	Mod/Mod.h	/^	std::vector<std::string> _operationNamesFirst, _operationNamesLast;$/;"	m	class:OpenXcom::Mod
_operationNamesLast	Mod/Mod.h	/^	std::vector<std::string> _operationNamesFirst, _operationNamesLast;$/;"	m	class:OpenXcom::Mod
_operationSpawnZone	Mod/RuleAlienMission.h	/^	int _operationSpawnZone;$/;"	m	class:OpenXcom::RuleAlienMission
_operationType	Mod/RuleAlienMission.h	/^	AlienMissionOperationType _operationType;$/;"	m	class:OpenXcom::RuleAlienMission
_optionsVideoState	Menu/SetWindowedRootState.h	/^	OptionsVideoState *_optionsVideoState;$/;"	m	class:OpenXcom::SetWindowedRootState
_orgin	Engine/ShaderDrawHelper.h	/^	const PixelPtr _orgin;$/;"	m	class:OpenXcom::helper::ShaderBase
_origAvatar	Basescape/SoldierAvatarState.h	/^	SoldierAvatar _origAvatar;$/;"	m	class:OpenXcom::SoldierAvatarState
_origFac	Basescape/PlaceFacilityState.h	/^	BaseFacility *_origFac;$/;"	m	class:OpenXcom::PlaceFacilityState
_origSoldierOrder	Basescape/CraftArmorState.h	/^	std::vector<Soldier *> _origSoldierOrder;$/;"	m	class:OpenXcom::CraftArmorState
_origSoldierOrder	Basescape/CraftSoldiersState.h	/^	std::vector<Soldier *> _origSoldierOrder;$/;"	m	class:OpenXcom::CraftSoldiersState
_origSoldierOrder	Basescape/SoldiersState.h	/^	std::vector<Soldier *> _origSoldierOrder, _filteredListOfSoldiers;$/;"	m	class:OpenXcom::SoldiersState
_origSoldierOrder	Geoscape/AllocatePsiTrainingState.h	/^	std::vector<Soldier *> _origSoldierOrder;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_origSoldierOrder	Geoscape/AllocateTrainingState.h	/^	std::vector<Soldier *> _origSoldierOrder;$/;"	m	class:OpenXcom::AllocateTrainingState
_origWaypoint	Savegame/Ufo.h	/^	Waypoint *_origWaypoint;$/;"	m	class:OpenXcom::Ufo
_origin	Basescape/ManageAlienContainmentState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_origin	Basescape/SellState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::SellState
_origin	Basescape/SoldierArmorState.h	/^	SoldierArmorOrigin _origin;$/;"	m	class:OpenXcom::SoldierArmorState
_origin	Battlescape/Projectile.h	/^	Position _origin, _targetVoxel;$/;"	m	class:OpenXcom::Projectile
_origin	Battlescape/ProjectileFlyBState.h	/^	Position _origin, _targetVoxel, _originVoxel;$/;"	m	class:OpenXcom::ProjectileFlyBState
_origin	Geoscape/SelectMusicTrackState.h	/^	SelectMusicTrackOrigin _origin;$/;"	m	class:OpenXcom::SelectMusicTrackState
_origin	Menu/AbandonGameState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::AbandonGameState
_origin	Menu/ConfirmLoadState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::ConfirmLoadState
_origin	Menu/DeleteGameState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::DeleteGameState
_origin	Menu/ListGamesState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::ListGamesState
_origin	Menu/ListLoadOriginalState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::ListLoadOriginalState
_origin	Menu/LoadGameState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::LoadGameState
_origin	Menu/NotesState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::NotesState
_origin	Menu/OptionsBaseState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::OptionsBaseState
_origin	Menu/OptionsConfirmState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::OptionsConfirmState
_origin	Menu/OptionsDefaultsState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::OptionsDefaultsState
_origin	Menu/PauseState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::PauseState
_origin	Menu/SaveGameState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::SaveGameState
_origin	Menu/SetWindowedRootState.h	/^	OptionsOrigin _origin;$/;"	m	class:OpenXcom::SetWindowedRootState
_originVoxel	Battlescape/ProjectileFlyBState.h	/^	Position _origin, _targetVoxel, _originVoxel;$/;"	m	class:OpenXcom::ProjectileFlyBState
_originalColor	Interface/ToggleTextButton.h	/^	int _originalColor, _invertedColor;$/;"	m	class:OpenXcom::ToggleTextButton
_originalFaction	Savegame/BattleUnit.h	/^	UnitFaction _faction, _originalFaction;$/;"	m	class:OpenXcom::BattleUnit
_originalMovementType	Savegame/BattleUnit.h	/^	MovementType _originalMovementType;$/;"	m	class:OpenXcom::BattleUnit
_otherCraftColor	Basescape/CraftSoldiersState.h	/^	Uint8 _otherCraftColor;$/;"	m	class:OpenXcom::CraftSoldiersState
_out	Engine/InteractiveSurface.h	/^	ActionHandler _in, _over, _out;$/;"	m	class:OpenXcom::InteractiveSurface
_output	Menu/StartState.h	/^	std::ostringstream _output;$/;"	m	class:OpenXcom::StartState
_outside	Battlescape/AbortMissionState.h	/^	int _inEntrance, _inExit, _outside;$/;"	m	class:OpenXcom::AbortMissionState
_over	Engine/InteractiveSurface.h	/^	ActionHandler _in, _over, _out;$/;"	m	class:OpenXcom::InteractiveSurface
_over	Savegame/GeoscapeEvent.h	/^	bool _over;$/;"	m	class:OpenXcom::GeoscapeEvent
_overKill	Battlescape/UnitDieBState.h	/^	bool _overKill;$/;"	m	class:OpenXcom::UnitDieBState
_overKill	Mod/Armor.h	/^	float _overKill, _meleeDodgeBackPenalty;$/;"	m	class:OpenXcom::Armor
_overlaps	Savegame/Tile.h	/^	Uint8 _overlaps = 0;$/;"	m	class:OpenXcom::Tile
_owner	Savegame/BattleItem.h	/^	BattleUnit *_owner, *_previousOwner;$/;"	m	class:OpenXcom::BattleItem
_pQty	Basescape/PurchaseState.h	/^	int _total, _pQty, _cQty;$/;"	m	class:OpenXcom::PurchaseState
_pQty	Basescape/TransferItemsState.h	/^	int _total, _pQty, _cQty, _aQty;$/;"	m	class:OpenXcom::TransferItemsState
_pact	Savegame/Country.h	/^	bool _pact, _newPact, _cancelPact;$/;"	m	class:OpenXcom::Country
_pactCountry	Savegame/AlienBase.h	/^	std::string _pactCountry;$/;"	m	class:OpenXcom::AlienBase
_pactList	Geoscape/MonthlyReportState.h	/^	std::vector<std::string> _happyList, _sadList, _pactList, _cancelPactList;$/;"	m	class:OpenXcom::MonthlyReportState
_pageNumber	Battlescape/DebriefingState.h	/^	int _pageNumber;$/;"	m	class:OpenXcom::DebriefingState
_pages	Mod/ArticleDefinition.h	/^		std::vector<ArticlePage> _pages;$/;"	m	class:OpenXcom::ArticleDefinition
_painImmune	Mod/Armor.h	/^	Sint8  _fearImmune, _bleedImmune, _painImmune, _zombiImmune;$/;"	m	class:OpenXcom::Armor
_painKiller	Mod/RuleItem.h	/^	int _painKiller, _heal, _stimulant;$/;"	m	class:OpenXcom::RuleItem
_painKiller	Savegame/BattleItem.h	/^	int _painKiller, _heal, _stimulant;$/;"	m	class:OpenXcom::BattleItem
_painKillerRecovery	Mod/RuleItem.h	/^	int _woundRecovery, _healthRecovery, _stunRecovery, _energyRecovery, _manaRecovery, _moraleRecovery, _painKillerRecovery;$/;"	m	class:OpenXcom::RuleItem
_palette	Engine/State.h	/^	SDL_Color _palette[256];$/;"	m	class:OpenXcom::State
_palette	Mod/CustomPalettes.h	/^	std::map<int, Position> _palette;$/;"	m	class:OpenXcom::CustomPalettes
_palette	Mod/RuleInterface.h	/^	std::string _palette;$/;"	m	class:OpenXcom::RuleInterface
_paletteList	Menu/TestState.h	/^	std::vector<std::string> _paletteList;$/;"	m	class:OpenXcom::TestState
_paletteMetadataMap	Menu/TestState.cpp	/^static std::map<int, PaletteTestMetadata> _paletteMetadataMap =$/;"	m	namespace:OpenXcom	file:
_paletteResetNeeded	Battlescape/BattlescapeState.h	/^	bool _firstInit, _paletteResetNeeded, _paletteResetRequested;$/;"	m	class:OpenXcom::BattlescapeState
_paletteResetRequested	Battlescape/BattlescapeState.h	/^	bool _firstInit, _paletteResetNeeded, _paletteResetRequested;$/;"	m	class:OpenXcom::BattlescapeState
_paletteTransformations	Mod/RuleEnviroEffects.h	/^	std::map<std::string, std::string> _paletteTransformations;$/;"	m	class:OpenXcom::RuleEnviroEffects
_palettes	Mod/Mod.h	/^	std::map<std::string, Palette*> _palettes;$/;"	m	class:OpenXcom::Mod
_panicSound	Mod/Unit.h	/^	std::vector<int> _deathSound, _panicSound, _berserkSound, _aggroSound;$/;"	m	class:OpenXcom::Unit
_panicSoundFemale	Mod/RuleSoldier.h	/^	std::vector<int> _panicSoundMale, _panicSoundFemale, _berserkSoundMale, _berserkSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_panicSoundMale	Mod/RuleSoldier.h	/^	std::vector<int> _panicSoundMale, _panicSoundFemale, _berserkSoundMale, _berserkSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_parent	Basescape/CraftEquipmentLoadState.h	/^	CraftEquipmentState *_parent;$/;"	m	class:OpenXcom::CraftEquipmentLoadState
_parent	Basescape/CraftEquipmentSaveState.h	/^	CraftEquipmentState *_parent;$/;"	m	class:OpenXcom::CraftEquipmentSaveState
_parent	Basescape/PurchaseState.h	/^	CannotReequipState *_parent;$/;"	m	class:OpenXcom::PurchaseState
_parent	Basescape/TechTreeSelectState.h	/^	TechTreeViewerState *_parent;$/;"	m	class:OpenXcom::TechTreeSelectState
_parent	Battlescape/BattleState.h	/^	BattlescapeGame *_parent;$/;"	m	class:OpenXcom::BattleState
_parent	Battlescape/ConfirmEndMissionState.h	/^	BattlescapeGame *_parent;$/;"	m	class:OpenXcom::ConfirmEndMissionState
_parent	Battlescape/ExtendedBattlescapeLinksState.h	/^	BattlescapeState *_parent;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_parent	Battlescape/ExtendedInventoryLinksState.h	/^	InventoryState *_parent;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_parent	Battlescape/InventoryLoadState.h	/^	InventoryState *_parent;$/;"	m	class:OpenXcom::InventoryLoadState
_parent	Battlescape/InventorySaveState.h	/^	InventoryState *_parent;$/;"	m	class:OpenXcom::InventorySaveState
_parent	Battlescape/InventoryState.h	/^	BattlescapeState *_parent;$/;"	m	class:OpenXcom::InventoryState
_parent	Battlescape/UnitInfoState.h	/^	BattlescapeState *_parent;$/;"	m	class:OpenXcom::UnitInfoState
_parent	Geoscape/ExtendedGeoscapeLinksState.h	/^	GeoscapeState *_parent;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_parent	Mod/RuleInterface.h	/^	std::string _parent;$/;"	m	class:OpenXcom::RuleInterface
_parentState	Battlescape/BattlescapeGame.h	/^	BattlescapeState *_parentState;$/;"	m	class:OpenXcom::BattlescapeGame
_part	Battlescape/UnitSprite.h	/^	int _part, _animationFrame, _drawingRoutine;$/;"	m	class:OpenXcom::UnitSprite
_partTxt	Battlescape/MedikitState.h	/^	Text *_pkText, *_stimulantTxt,  *_healTxt, *_partTxt, *_woundTxt;$/;"	m	class:OpenXcom::MedikitState
_partTxt	Battlescape/MedikitView.h	/^	Text *_partTxt, *_woundTxt;$/;"	m	class:OpenXcom::MedikitView
_partialDestruction	Geoscape/BaseDestroyedState.h	/^	bool _missiles, _partialDestruction;$/;"	m	class:OpenXcom::BaseDestroyedState
_passes	Geoscape/BaseDefenseState.h	/^	int _thinkcycles, _row, _passes, _gravShields, _defenses, _attacks, _explosionCount;$/;"	m	class:OpenXcom::BaseDefenseState
_passwordCheck	Engine/Options.cpp	/^int _passwordCheck = -1;$/;"	m	namespace:OpenXcom::Options	file:
_path	Battlescape/Pathfinding.h	/^	std::vector<int> _path;$/;"	m	class:OpenXcom::Pathfinding
_path	Engine/ModInfo.h	/^	const std::string _path;$/;"	m	class:OpenXcom::ModInfo
_pathPreviewed	Battlescape/Pathfinding.h	/^	bool _pathPreviewed;$/;"	m	class:OpenXcom::Pathfinding
_pathfinding	Savegame/SavedBattleGame.h	/^	Pathfinding *_pathfinding;$/;"	m	class:OpenXcom::SavedBattleGame
_patrolAction	Battlescape/AIModule.h	/^	BattleAction _escapeAction, _ambushAction, _attackAction, _patrolAction, _psiAction;$/;"	m	class:OpenXcom::AIModule
_pause	Geoscape/GeoscapeState.h	/^	bool _pause, _zoomInEffectDone, _zoomOutEffectDone;$/;"	m	class:OpenXcom::GeoscapeState
_pediaReplaceCraftFuelWithRangeType	Mod/Mod.h	/^	int _pediaReplaceCraftFuelWithRangeType;$/;"	m	class:OpenXcom::Mod
_percentGainedMax	Mod/RuleSoldierTransformation.h	/^	UnitStats _flatMin, _flatMax, _percentMin, _percentMax, _percentGainedMin, _percentGainedMax;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_percentGainedMin	Mod/RuleSoldierTransformation.h	/^	UnitStats _flatMin, _flatMax, _percentMin, _percentMax, _percentGainedMin, _percentGainedMax;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_percentGainedStatChange	Mod/RuleSoldierTransformation.h	/^	UnitStats _requiredMinStats, _flatOverallStatChange, _percentOverallStatChange, _percentGainedStatChange;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_percentMax	Mod/RuleSoldierTransformation.h	/^	UnitStats _flatMin, _flatMax, _percentMin, _percentMax, _percentGainedMin, _percentGainedMax;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_percentMin	Mod/RuleSoldierTransformation.h	/^	UnitStats _flatMin, _flatMax, _percentMin, _percentMax, _percentGainedMin, _percentGainedMax;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_percentOverallStatChange	Mod/RuleSoldierTransformation.h	/^	UnitStats _requiredMinStats, _flatOverallStatChange, _percentOverallStatChange, _percentGainedStatChange;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_performanceBonusFactor	Mod/Mod.h	/^	int _performanceBonusFactor;$/;"	m	class:OpenXcom::Mod
_personalEquipmentArmor	Savegame/Soldier.h	/^	const Armor* _personalEquipmentArmor;$/;"	m	class:OpenXcom::Soldier
_personalEquipmentLayout	Savegame/Soldier.h	/^	std::vector<EquipmentLayoutItem*> _personalEquipmentLayout;   \/\/ personal  equipment layout, managed by the player$/;"	m	class:OpenXcom::Soldier
_personalLight	Mod/Armor.h	/^	int _size, _weight, _visibilityAtDark, _visibilityAtDay, _personalLight;$/;"	m	class:OpenXcom::Armor
_personalLighting	Battlescape/TileEngine.h	/^	bool _personalLighting;$/;"	m	class:OpenXcom::TileEngine
_personnel	Mod/RuleBaseFacility.h	/^	int _storage, _personnel, _aliens, _crafts, _labs, _workshops, _psiLabs;$/;"	m	class:OpenXcom::RuleBaseFacility
_pf	Battlescape/UnitWalkBState.h	/^	Pathfinding *_pf;$/;"	m	class:OpenXcom::UnitWalkBState
_pickUpWeaponsMoreActively	Mod/Unit.h	/^	int _pickUpWeaponsMoreActively;$/;"	m	class:OpenXcom::Unit
_pickUpWeaponsMoreActively	Savegame/BattleUnit.h	/^	bool _pickUpWeaponsMoreActively;$/;"	m	class:OpenXcom::BattleUnit
_pilot	Basescape/CraftPilotSelectState.h	/^	std::vector<int> _pilot;$/;"	m	class:OpenXcom::CraftPilotSelectState
_pilotAccuracyBonus	Geoscape/DogfightState.h	/^	int _pilotAccuracyBonus, _pilotDodgeBonus, _pilotApproachSpeedModifier, _craftAccelerationBonus;$/;"	m	class:OpenXcom::DogfightState
_pilotAccuracyRange	Mod/Mod.h	/^	int _pilotAccuracyZeroPoint, _pilotAccuracyRange, _pilotReactionsZeroPoint, _pilotReactionsRange;$/;"	m	class:OpenXcom::Mod
_pilotAccuracyZeroPoint	Mod/Mod.h	/^	int _pilotAccuracyZeroPoint, _pilotAccuracyRange, _pilotReactionsZeroPoint, _pilotReactionsRange;$/;"	m	class:OpenXcom::Mod
_pilotApproachSpeedModifier	Geoscape/DogfightState.h	/^	int _pilotAccuracyBonus, _pilotDodgeBonus, _pilotApproachSpeedModifier, _craftAccelerationBonus;$/;"	m	class:OpenXcom::DogfightState
_pilotBraveryThresholds	Mod/Mod.h	/^	int _pilotBraveryThresholds[3];$/;"	m	class:OpenXcom::Mod
_pilotDodgeBonus	Geoscape/DogfightState.h	/^	int _pilotAccuracyBonus, _pilotDodgeBonus, _pilotApproachSpeedModifier, _craftAccelerationBonus;$/;"	m	class:OpenXcom::DogfightState
_pilotReactionsRange	Mod/Mod.h	/^	int _pilotAccuracyZeroPoint, _pilotAccuracyRange, _pilotReactionsZeroPoint, _pilotReactionsRange;$/;"	m	class:OpenXcom::Mod
_pilotReactionsZeroPoint	Mod/Mod.h	/^	int _pilotAccuracyZeroPoint, _pilotAccuracyRange, _pilotReactionsZeroPoint, _pilotReactionsRange;$/;"	m	class:OpenXcom::Mod
_pilots	Mod/RuleCraft.h	/^	int _weapons, _soldiers, _pilots, _vehicles;$/;"	m	class:OpenXcom::RuleCraft
_pilots	Savegame/Craft.h	/^	std::vector<int> _pilots;$/;"	m	class:OpenXcom::Craft
_pilotsEmergencyEvacuationSurvivalChance	Mod/Mod.h	/^	int _crewEmergencyEvacuationSurvivalChance, _pilotsEmergencyEvacuationSurvivalChance;$/;"	m	class:OpenXcom::Mod
_pink	Basescape/TechTreeViewerState.h	/^	Uint8 _purple, _pink, _blue, _white, _gold, _grey;$/;"	m	class:OpenXcom::TechTreeViewerState
_pink	Ufopaedia/StatsForNerdsState.h	/^	Uint8 _purple, _pink, _blue, _white, _gold;$/;"	m	class:OpenXcom::StatsForNerdsState
_pitch	Engine/ShaderDrawHelper.h	/^	const int _pitch;$/;"	m	class:OpenXcom::helper::ShaderBase
_pitch	Engine/ShaderRepeat.h	/^	const int _pitch;$/;"	m	struct:OpenXcom::helper::controler
_pitch	Engine/Surface.h	/^	Uint16 _width, _height, _pitch;$/;"	m	class:OpenXcom::Surface
_pitch	Engine/Surface.h	/^	Uint16 _width, _height, _pitch;$/;"	m	class:OpenXcom::SurfaceRaw
_pkButton	Battlescape/MedikitState.h	/^	InteractiveSurface *_endButton, *_stimulantButton, *_pkButton, *_healButton;$/;"	m	class:OpenXcom::MedikitState
_pkText	Battlescape/MedikitState.h	/^	Text *_pkText, *_stimulantTxt,  *_healTxt, *_partTxt, *_woundTxt;$/;"	m	class:OpenXcom::MedikitState
_placeSound	Mod/RuleBaseFacility.h	/^	int _radarRange, _radarChance, _defense, _hitRatio, _fireSound, _hitSound, _placeSound;$/;"	m	class:OpenXcom::RuleBaseFacility
_placedBlockRects	Battlescape/BattlescapeGenerator.h	/^	std::vector<SDL_Rect> _placedBlockRects;$/;"	m	class:OpenXcom::BattlescapeGenerator
_playedAggroSound	Battlescape/BattlescapeGame.h	/^	bool _AISecondMove, _playedAggroSound;$/;"	m	class:OpenXcom::BattlescapeGame
_playerPanicHandled	Battlescape/BattlescapeGame.h	/^	bool _playerPanicHandled;$/;"	m	class:OpenXcom::BattlescapeGame
_playingMusic	Mod/Mod.h	/^	std::string _playingMusic, _currentMusicTrack;$/;"	m	class:OpenXcom::Mod
_playingState	Engine/FlcPlayer.h	/^	int _playingState;$/;"	m	class:OpenXcom::FlcPlayer
_points	Mod/AlienDeployment.h	/^	int _objectiveType, _objectivesRequired, _objectiveCompleteScore, _objectiveFailedScore, _despawnPenalty, _abortPenalty, _points, _turnLimit, _cheatTurn;$/;"	m	class:OpenXcom::AlienDeployment
_points	Mod/Polygon.h	/^	int _points, _texture;$/;"	m	class:OpenXcom::Polygon
_points	Mod/Polyline.h	/^	int _points;$/;"	m	class:OpenXcom::Polyline
_points	Mod/RuleAlienMission.h	/^	int _points;$/;"	m	class:OpenXcom::RuleAlienMission
_points	Mod/RuleEvent.h	/^	int _points, _funds;$/;"	m	class:OpenXcom::RuleEvent
_points	Mod/RuleResearch.h	/^	int _cost, _points;$/;"	m	class:OpenXcom::RuleResearch
_polygons	Mod/RuleGlobe.h	/^	std::list<Polygon*> _polygons;$/;"	m	class:OpenXcom::RuleGlobe
_polylines	Mod/RuleGlobe.h	/^	std::list<Polyline*> _polylines;$/;"	m	class:OpenXcom::RuleGlobe
_poppedResearch	Savegame/SavedGame.h	/^	std::vector<const RuleResearch*> _poppedResearch;$/;"	m	class:OpenXcom::SavedGame
_popup	Interface/Window.h	/^	WindowPopup _popup;$/;"	m	class:OpenXcom::Window
_popupAboveButton	Interface/ComboBox.h	/^	bool _popupAboveButton;$/;"	m	class:OpenXcom::ComboBox
_popupStep	Interface/Window.h	/^	double _popupStep;$/;"	m	class:OpenXcom::Window
_popups	Battlescape/BattlescapeState.h	/^	std::vector<State*> _popups;$/;"	m	class:OpenXcom::BattlescapeState
_popups	Geoscape/GeoscapeState.h	/^	std::list<State*> _popups;$/;"	m	class:OpenXcom::GeoscapeState
_pos	Battlescape/PathfindingNode.h	/^	Position _pos;$/;"	m	class:OpenXcom::PathfindingNode
_pos	Engine/ScriptBind.h	/^		ProgPos _pos;$/;"	m	class:OpenXcom::ParserWriter::ReservedPos
_pos	Interface/Slider.h	/^	double _pos;$/;"	m	class:OpenXcom::Slider
_pos	Savegame/BattleUnit.h	/^	Position _pos;$/;"	m	class:OpenXcom::BattleUnit
_pos	Savegame/Node.h	/^	Position _pos;$/;"	m	class:OpenXcom::Node
_pos	Savegame/Tile.h	/^	Position _pos;$/;"	m	class:OpenXcom::Tile
_posBeforeMouseScrolling	Battlescape/MiniMapView.h	/^	Position _posBeforeMouseScrolling, _cursorPosition;$/;"	m	class:OpenXcom::MiniMapView
_posSpecialActions	Battlescape/BattlescapeState.h	/^	int _posSpecialActions[SPECIAL_BUTTONS_MAX];$/;"	m	class:OpenXcom::BattlescapeState
_position	Battlescape/Explosion.h	/^	Position _position;$/;"	m	class:OpenXcom::Explosion
_position	Battlescape/Projectile.h	/^	size_t _position;$/;"	m	class:OpenXcom::Projectile
_positiveScore	Battlescape/DebriefingState.h	/^	bool _positiveScore, _destroyBase, _promotions, _showSellButton, _initDone;$/;"	m	class:OpenXcom::DebriefingState
_possibleProductions	Basescape/NewManufactureListState.h	/^	std::vector<RuleManufacture *> _possibleProductions;$/;"	m	class:OpenXcom::NewManufactureListState
_postMortemKills	Savegame/SoldierDiary.h	/^		_martyrKillsTotal, _postMortemKills, _slaveKillsTotal, _bestSoldier, _revivedSoldierTotal, _revivedHostileTotal, _revivedNeutralTotal;$/;"	m	class:OpenXcom::SoldierDiary
_power	Battlescape/ExplosionBState.h	/^	int _power;$/;"	m	class:OpenXcom::ExplosionBState
_power	Mod/RuleItem.h	/^	int _power, _powerForAnimation;$/;"	m	class:OpenXcom::RuleItem
_power	Mod/RuleUfo.h	/^	int _power, _range, _score, _reload, _breakOffTime, _missionScore;$/;"	m	class:OpenXcom::RuleUfo
_powerForAnimation	Mod/RuleItem.h	/^	int _power, _powerForAnimation;$/;"	m	class:OpenXcom::RuleItem
_powerRangeReduction	Mod/RuleItem.h	/^	float _powerRangeReduction;$/;"	m	class:OpenXcom::RuleItem
_powerRangeThreshold	Mod/RuleItem.h	/^	float _powerRangeThreshold;$/;"	m	class:OpenXcom::RuleItem
_preMovementCost	Battlescape/UnitWalkBState.h	/^	int _preMovementCost;$/;"	m	class:OpenXcom::UnitWalkBState
_preferredHandForReactions	Savegame/BattleUnit.h	/^	std::string _preferredHandForReactions;$/;"	m	class:OpenXcom::BattleUnit
_press	Engine/InteractiveSurface.h	/^	std::map<Uint8, ActionHandler> _click, _press, _release;$/;"	m	class:OpenXcom::InteractiveSurface
_pressed	Interface/ScrollBar.h	/^	bool _pressed, _contrast;$/;"	m	class:OpenXcom::ScrollBar
_pressed	Interface/Slider.h	/^	bool _pressed;$/;"	m	class:OpenXcom::Slider
_prevDir	Battlescape/PathfindingNode.h	/^	int _prevDir;$/;"	m	class:OpenXcom::PathfindingNode
_prevNode	Battlescape/PathfindingNode.h	/^	PathfindingNode* _prevNode;$/;"	m	class:OpenXcom::PathfindingNode
_prev_key	Battlescape/InventoryState.h	/^	int _prev_key = 0, _key_repeats = 0;$/;"	m	class:OpenXcom::InventoryState
_preview	Geoscape/DogfightState.h	/^	InteractiveSurface *_btnMinimize, *_preview, *_weapon[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_preview	Savegame/Tile.h	/^	Sint8 _preview = -1;$/;"	m	class:OpenXcom::Tile
_previewBase	Savegame/SavedGame.h	/^	Base* _previewBase;$/;"	m	class:OpenXcom::SavedGame
_previewSettingArrows	Battlescape/Map.h	/^	bool _previewSettingArrows, _previewSettingTu, _previewSettingEnergy;$/;"	m	class:OpenXcom::Map
_previewSettingEnergy	Battlescape/Map.h	/^	bool _previewSettingArrows, _previewSettingTu, _previewSettingEnergy;$/;"	m	class:OpenXcom::Map
_previewSettingTu	Battlescape/Map.h	/^	bool _previewSettingArrows, _previewSettingTu, _previewSettingEnergy;$/;"	m	class:OpenXcom::Map
_previousOwner	Savegame/BattleItem.h	/^	BattleUnit *_owner, *_previousOwner;$/;"	m	class:OpenXcom::BattleItem
_previousSelectedRow	Basescape/CraftEquipmentSaveState.h	/^	int _previousSelectedRow, _selectedRow;$/;"	m	class:OpenXcom::CraftEquipmentSaveState
_previousSelectedRow	Battlescape/InventorySaveState.h	/^	int _previousSelectedRow, _selectedRow;$/;"	m	class:OpenXcom::InventorySaveState
_previousSelectedRow	Menu/ListSaveState.h	/^	int _previousSelectedRow, _selectedRow;$/;"	m	class:OpenXcom::ListSaveState
_previousSelectedRow	Menu/NotesState.h	/^	int _previousSelectedRow, _selectedRow;$/;"	m	class:OpenXcom::NotesState
_previousSort	Basescape/SellState.h	/^	TransferSortDirection _previousSort, _currentSort;$/;"	m	class:OpenXcom::SellState
_previousSort	Basescape/TransferItemsState.h	/^	TransferSortDirection _previousSort, _currentSort;$/;"	m	class:OpenXcom::TransferItemsState
_previousTransformations	Savegame/Soldier.h	/^	std::map<std::string, int> _previousTransformations, _transformationBonuses;$/;"	m	class:OpenXcom::Soldier
_primeActionMessage	Mod/RuleItem.h	/^	std::string _medikitActionName, _psiAttackName, _primeActionName, _unprimeActionName, _primeActionMessage, _unprimeActionMessage;$/;"	m	class:OpenXcom::RuleItem
_primeActionName	Mod/RuleItem.h	/^	std::string _medikitActionName, _psiAttackName, _primeActionName, _unprimeActionName, _primeActionMessage, _unprimeActionMessage;$/;"	m	class:OpenXcom::RuleItem
_primeSound	Mod/RuleItem.h	/^	std::vector<int> _reloadSound, _primeSound, _unprimeSound;$/;"	m	class:OpenXcom::RuleItem
_priority	Savegame/Node.h	/^	int _priority;  \/\/ 23 = Spawn weight in Mapview 2$/;"	m	class:OpenXcom::Node
_prisonType	Basescape/ManageAlienContainmentState.h	/^	int _prisonType;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_prisonType	Mod/RuleBaseFacility.h	/^	int _prisonType;$/;"	m	class:OpenXcom::RuleBaseFacility
_processedIntercept	Savegame/Ufo.h	/^	bool _detected, _hyperDetected, _processedIntercept;$/;"	m	class:OpenXcom::Ufo
_processedText	Interface/Text.h	/^	UString _processedText;$/;"	m	class:OpenXcom::Text
_producedCraft	Mod/RuleManufacture.h	/^	const RuleCraft* _producedCraft;$/;"	m	class:OpenXcom::RuleManufacture
_producedItem	Mod/RuleSoldierTransformation.h	/^	std::string _producedItem;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_producedItems	Mod/RuleManufacture.h	/^	std::map<const RuleItem*, int> _requiredItems, _producedItems;$/;"	m	class:OpenXcom::RuleManufacture
_producedItemsNames	Mod/RuleManufacture.h	/^	std::map<std::string, int> _requiredItemsNames, _producedItemsNames;$/;"	m	class:OpenXcom::RuleManufacture
_producedItemsValue	Basescape/ManufactureInfoState.h	/^	int _producedItemsValue;$/;"	m	class:OpenXcom::ManufactureInfoState
_producedSoldierArmor	Mod/RuleSoldierTransformation.h	/^	std::string _producedSoldierType, _producedSoldierArmor;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_producedSoldierType	Mod/RuleSoldierTransformation.h	/^	std::string _producedSoldierType, _producedSoldierArmor;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_production	Basescape/ManufactureInfoState.h	/^	Production * _production;$/;"	m	class:OpenXcom::ManufactureInfoState
_productions	Savegame/Base.h	/^	std::vector<Production *> _productions;$/;"	m	class:OpenXcom::Base
_project	Basescape/ResearchInfoState.h	/^	ResearchProject *_project;$/;"	m	class:OpenXcom::ResearchInfoState
_project	Savegame/ResearchProject.h	/^	RuleResearch * _project;$/;"	m	class:OpenXcom::ResearchProject
_projectile	Battlescape/Map.h	/^	Projectile *_projectile;$/;"	m	class:OpenXcom::Map
_projectileBlobs	Geoscape/DogfightState.cpp	/^const int DogfightState::_projectileBlobs[4][6][3] =$/;"	m	class:OpenXcom::DogfightState	file:
_projectileBlobs	Geoscape/DogfightState.h	/^	static const int _projectileBlobs[4][6][3];$/;"	m	class:OpenXcom::DogfightState
_projectileImpact	Battlescape/ProjectileFlyBState.h	/^	int _projectileImpact;$/;"	m	class:OpenXcom::ProjectileFlyBState
_projectileInFOV	Battlescape/Map.h	/^	bool _projectileInFOV;$/;"	m	class:OpenXcom::Map
_projectileSet	Battlescape/Map.h	/^	SurfaceSet *_projectileSet;$/;"	m	class:OpenXcom::Map
_projectileSpeed	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_projectileType	Mod/RuleCraftWeapon.h	/^	CraftWeaponProjectileType _projectileType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_projectiles	Geoscape/DogfightState.h	/^	std::vector<CraftWeaponProjectile*> _projectiles;$/;"	m	class:OpenXcom::DogfightState
_projects	Basescape/NewResearchListState.h	/^	std::vector<RuleResearch *> _projects;$/;"	m	class:OpenXcom::NewResearchListState
_promotions	Battlescape/DebriefingState.h	/^	bool _positiveScore, _destroyBase, _promotions, _showSellButton, _initDone;$/;"	m	class:OpenXcom::DebriefingState
_propertyNodeName	Mod/ModScript.h	/^		std::string _propertyNodeName;$/;"	m	struct:OpenXcom::ModScript::BonusStatsBaseParser
_protectedItems	Basescape/TechTreeViewerState.h	/^	std::unordered_set<std::string> _protectedItems, _alreadyAvailableItems;$/;"	m	class:OpenXcom::TechTreeViewerState
_provideBaseFunc	Mod/RuleBaseFacility.h	/^	RuleBaseFacilityFunctions _provideBaseFunc = 0;$/;"	m	class:OpenXcom::RuleBaseFacility
_psi	Battlescape/ExplosionBState.h	/^	bool _areaOfEffect, _lowerWeapon, _hit, _psi;$/;"	m	class:OpenXcom::ExplosionBState
_psi	Geoscape/TrainingFinishedState.h	/^	bool _psi;$/;"	m	class:OpenXcom::TrainingFinishedState
_psiAction	Battlescape/AIModule.h	/^	BattleAction _escapeAction, _ambushAction, _attackAction, _patrolAction, _psiAction;$/;"	m	class:OpenXcom::AIModule
_psiAnimFrames	Mod/RuleItem.h	/^	int _psiAnimation, _psiAnimFrames;$/;"	m	class:OpenXcom::RuleItem
_psiAnimation	Mod/RuleItem.h	/^	int _psiAnimation, _psiAnimFrames;$/;"	m	class:OpenXcom::RuleItem
_psiAttackName	Mod/RuleItem.h	/^	std::string _medikitActionName, _psiAttackName, _primeActionName, _unprimeActionName, _primeActionMessage, _unprimeActionMessage;$/;"	m	class:OpenXcom::RuleItem
_psiCamouflage	Mod/Armor.h	/^	int _camouflageAtDay, _camouflageAtDark, _antiCamouflageAtDay, _antiCamouflageAtDark, _heatVision, _psiVision, _psiCamouflage;$/;"	m	class:OpenXcom::Armor
_psiDefence	Mod/Armor.h	/^	RuleStatBonus _psiDefence, _meleeDodge;$/;"	m	class:OpenXcom::Armor
_psiLabs	Mod/RuleBaseFacility.h	/^	int _storage, _personnel, _aliens, _crafts, _labs, _workshops, _psiLabs;$/;"	m	class:OpenXcom::RuleBaseFacility
_psiMissAnimFrames	Mod/RuleItem.h	/^	int _psiMissAnimation, _psiMissAnimFrames;$/;"	m	class:OpenXcom::RuleItem
_psiMissAnimation	Mod/RuleItem.h	/^	int _psiMissAnimation, _psiMissAnimFrames;$/;"	m	class:OpenXcom::RuleItem
_psiMissSound	Mod/RuleItem.h	/^	std::vector<int> _psiMissSound;$/;"	m	class:OpenXcom::RuleItem
_psiReqiured	Mod/RuleItem.h	/^	bool _LOSRequired, _underwaterOnly, _landOnly, _psiReqiured, _manaRequired;$/;"	m	class:OpenXcom::RuleItem
_psiRequirements	Mod/Mod.h	/^	std::vector<std::string> _psiRequirements; \/\/ it's a cache for psiStrengthEval$/;"	m	class:OpenXcom::Mod
_psiSound	Mod/RuleItem.h	/^	std::vector<int> _meleeHitSound, _explosionHitSound, _psiSound;$/;"	m	class:OpenXcom::RuleItem
_psiStrImprovement	Savegame/Soldier.h	/^	int _id, _nationality, _improvement, _psiStrImprovement;$/;"	m	class:OpenXcom::Soldier
_psiTraining	Savegame/Soldier.h	/^	bool _recentlyPromoted, _psiTraining, _training, _returnToTrainingWhenHealed;$/;"	m	class:OpenXcom::Soldier
_psiUnlockResearch	Mod/Mod.h	/^	std::string _fontName, _finalResearch, _psiUnlockResearch, _fakeUnderwaterBaseUnlockResearch, _newBaseUnlockResearch;$/;"	m	class:OpenXcom::Mod
_psiVision	Mod/Armor.h	/^	int _camouflageAtDay, _camouflageAtDark, _antiCamouflageAtDay, _antiCamouflageAtDark, _heatVision, _psiVision, _psiCamouflage;$/;"	m	class:OpenXcom::Armor
_psiWeapon	Mod/Unit.h	/^	std::string _meleeWeapon, _psiWeapon;$/;"	m	class:OpenXcom::Unit
_ptr_curr_x	Engine/ShaderRepeat.h	/^	PixelPtr _ptr_curr_x;$/;"	m	struct:OpenXcom::helper::controler
_ptr_curr_y	Engine/ShaderRepeat.h	/^	PixelPtr _ptr_curr_y;$/;"	m	struct:OpenXcom::helper::controler
_purple	Basescape/TechTreeViewerState.h	/^	Uint8 _purple, _pink, _blue, _white, _gold, _grey;$/;"	m	class:OpenXcom::TechTreeViewerState
_purple	Ufopaedia/StatsForNerdsState.h	/^	Uint8 _purple, _pink, _blue, _white, _gold;$/;"	m	class:OpenXcom::StatsForNerdsState
_pushPalette	Engine/Screen.h	/^	bool _pushPalette;$/;"	m	class:OpenXcom::Screen
_pushed	Geoscape/GraphsState.cpp	/^	bool _pushed;$/;"	m	struct:OpenXcom::GraphButInfo	file:
_qty	Savegame/ItemContainer.h	/^	std::map<std::string, int> _qty;$/;"	m	class:OpenXcom::ItemContainer
_qtys	Basescape/ManageAlienContainmentState.h	/^	std::vector<int> _qtys;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_queue	Battlescape/PathfindingOpenSet.h	/^	std::priority_queue<OpenSetEntry, std::vector<OpenSetEntry>, EntryCompare> _queue;$/;"	m	class:OpenXcom::PathfindingOpenSet
_quit	Engine/Game.h	/^	bool _quit, _init, _update;$/;"	m	class:OpenXcom::Game
_race	Mod/AlienDeployment.h	/^	std::string _nextStage, _race, _mapScript;$/;"	m	class:OpenXcom::AlienDeployment
_race	Mod/Unit.h	/^	std::string _race;$/;"	m	class:OpenXcom::Unit
_race	Savegame/AlienBase.h	/^	std::string _race;$/;"	m	class:OpenXcom::AlienBase
_race	Savegame/AlienMission.h	/^	std::string _region, _race;$/;"	m	class:OpenXcom::AlienMission
_race	Savegame/BattleUnit.h	/^	std::string _race;$/;"	m	class:OpenXcom::BattleUnit
_race	Savegame/MissionSite.h	/^	std::string _race, _city;$/;"	m	class:OpenXcom::MissionSite
_raceDistribution	Mod/RuleAlienMission.h	/^	std::vector<std::pair<size_t, WeightedOptions*> > _raceDistribution;$/;"	m	class:OpenXcom::RuleAlienMission
_raceWeights	Mod/RuleMissionScript.h	/^	std::vector<std::pair<size_t, WeightedOptions*> > _regionWeights, _missionWeights, _raceWeights;$/;"	m	class:OpenXcom::RuleMissionScript
_radarChance	Mod/RuleBaseFacility.h	/^	int _radarRange, _radarChance, _defense, _hitRatio, _fireSound, _hitSound, _placeSound;$/;"	m	class:OpenXcom::RuleBaseFacility
_radarRange	Mod/RuleBaseFacility.h	/^	int _radarRange, _radarChance, _defense, _hitRatio, _fireSound, _hitSound, _placeSound;$/;"	m	class:OpenXcom::RuleBaseFacility
_radars	Geoscape/Globe.h	/^	Surface *_markers, *_countries, *_radars;$/;"	m	class:OpenXcom::Globe
_radius	Battlescape/ExplosionBState.h	/^	int _radius;$/;"	m	class:OpenXcom::ExplosionBState
_radius	Geoscape/Globe.h	/^	double _radius, _radiusStep;$/;"	m	class:OpenXcom::Globe
_radiusStep	Geoscape/Globe.h	/^	double _radius, _radiusStep;$/;"	m	class:OpenXcom::Globe
_randomArcs	Mod/RuleArcScript.h	/^	WeightedOptions _randomArcs;$/;"	m	class:OpenXcom::RuleArcScript
_randomDelay	Mod/RuleMissionScript.h	/^	int _firstMonth, _lastMonth, _label, _executionOdds, _targetBaseOdds, _minDifficulty, _maxRuns, _avoidRepeats, _delay, _randomDelay;$/;"	m	class:OpenXcom::RuleMissionScript
_randomItemList	Mod/RuleEvent.h	/^	std::vector<std::string> _everyItemList, _randomItemList;$/;"	m	class:OpenXcom::RuleEvent
_randomMultiItemList	Mod/RuleEvent.h	/^	std::vector<std::map<std::string, int> > _randomMultiItemList;$/;"	m	class:OpenXcom::RuleEvent
_randomProducedItems	Mod/RuleManufacture.h	/^	std::vector<std::pair<int, std::map<const RuleItem*, int> > > _randomProducedItems;$/;"	m	class:OpenXcom::RuleManufacture
_randomProducedItemsNames	Mod/RuleManufacture.h	/^	std::vector<std::pair<int, std::map<std::string, int> > > _randomProducedItemsNames;$/;"	m	class:OpenXcom::RuleManufacture
_randomProductionInfo	Geoscape/ProductionCompleteState.h	/^	std::map<std::string, int> _randomProductionInfo;$/;"	m	class:OpenXcom::ProductionCompleteState
_randomProductionInfo	Savegame/Production.h	/^	std::map<std::string, int> _randomProductionInfo;$/;"	m	class:OpenXcom::Production
_randomRaces	Mod/AlienDeployment.h	/^	std::vector<std::string> _randomRaces;$/;"	m	class:OpenXcom::AlienDeployment
_randomTerrain	Mod/MapScript.h	/^	std::vector<std::string> _randomTerrain;$/;"	m	class:OpenXcom::MapScript
_randomizedItems	Mod/MapBlock.h	/^	std::vector<RandomizedItems> _randomizedItems;$/;"	m	class:OpenXcom::MapBlock
_range	Battlescape/ExplosionBState.h	/^	int _range;$/;"	m	class:OpenXcom::ExplosionBState
_range	Battlescape/ProjectileFlyBState.h	/^	int _range;$/;"	m	class:OpenXcom::ProjectileFlyBState
_range	Geoscape/DogfightState.h	/^	Surface *_window, *_battle, *_range[RuleCraft::WeaponMax], *_damage, *_craftSprite, *_craftShield;$/;"	m	class:OpenXcom::DogfightState
_range	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_range	Mod/RuleUfo.h	/^	int _power, _range, _score, _reload, _breakOffTime, _missionScore;$/;"	m	class:OpenXcom::RuleUfo
_range	Savegame/CraftWeaponProjectile.h	/^	int _range;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_range_base	Engine/ShaderDrawHelper.h	/^	const GraphSubset _range_base;$/;"	m	class:OpenXcom::helper::ShaderBase
_range_domain	Engine/ShaderDrawHelper.h	/^	GraphSubset _range_domain;$/;"	m	class:OpenXcom::helper::ShaderBase
_range_domain	Engine/ShaderRepeat.h	/^	const GraphSubset _range_domain;$/;"	m	struct:OpenXcom::helper::controler
_range_image	Engine/ShaderRepeat.h	/^	GraphSubset _range_image;$/;"	m	struct:OpenXcom::helper::controler
_rank	Basescape/SoldierInfoState.h	/^	Surface *_bg, *_rank;$/;"	m	class:OpenXcom::SoldierInfoState
_rank	Battlescape/BattlescapeState.h	/^	Surface *_rank, *_rankTiny;$/;"	m	class:OpenXcom::BattlescapeState
_rank	Mod/Unit.h	/^	std::string _rank;$/;"	m	class:OpenXcom::Unit
_rank	Savegame/BattleUnit.h	/^	std::string _rank;$/;"	m	class:OpenXcom::BattleUnit
_rank	Savegame/Node.h	/^	int _rank;      \/\/ 20 = Node rank in Mapview 2$/;"	m	class:OpenXcom::Node
_rank	Savegame/Soldier.h	/^	SoldierRank _rank;$/;"	m	class:OpenXcom::Soldier
_rankColor	Mod/Armor.h	/^	std::vector<int> _faceColor, _hairColor, _utileColor, _rankColor;$/;"	m	class:OpenXcom::Armor
_rankColorGroup	Mod/Armor.h	/^	int _faceColorGroup, _hairColorGroup, _utileColorGroup, _rankColorGroup;$/;"	m	class:OpenXcom::Armor
_rankInt	Savegame/BattleUnit.h	/^	int _rankInt;$/;"	m	class:OpenXcom::BattleUnit
_rankSprite	Mod/RuleSoldier.h	/^	int _rankSprite, _rankSpriteBattlescape, _rankSpriteTiny;$/;"	m	class:OpenXcom::RuleSoldier
_rankSpriteBattlescape	Mod/RuleSoldier.h	/^	int _rankSprite, _rankSpriteBattlescape, _rankSpriteTiny;$/;"	m	class:OpenXcom::RuleSoldier
_rankSpriteTiny	Mod/RuleSoldier.h	/^	int _rankSprite, _rankSpriteBattlescape, _rankSpriteTiny;$/;"	m	class:OpenXcom::RuleSoldier
_rankStrings	Mod/RuleSoldier.h	/^	std::vector<std::string> _rankStrings;$/;"	m	class:OpenXcom::RuleSoldier
_rankTiny	Battlescape/BattlescapeState.h	/^	Surface *_rank, *_rankTiny;$/;"	m	class:OpenXcom::BattlescapeState
_ratingTotal	Geoscape/MonthlyReportState.h	/^	int _ratingTotal, _fundingDiff, _lastMonthsRating;$/;"	m	class:OpenXcom::MonthlyReportState
_reachable	Battlescape/AIModule.h	/^	std::vector<int> _reachable, _reachableWithAttack, _wasHitBy;$/;"	m	class:OpenXcom::AIModule
_reachableWithAttack	Battlescape/AIModule.h	/^	std::vector<int> _reachable, _reachableWithAttack, _wasHitBy;$/;"	m	class:OpenXcom::AIModule
_reaction	Battlescape/MeleeAttackBState.h	/^	bool _reaction;$/;"	m	class:OpenXcom::MeleeAttackBState
_reactionFire	Savegame/HitLog.h	/^	std::string _newTurn, _reactionFire, _newShot, _noDamage, _smallDamage, _bigDamage;$/;"	m	class:OpenXcom::HitLog
_realScreen	Engine/FlcPlayer.h	/^	Screen *_realScreen;$/;"	m	class:OpenXcom::FlcPlayer
_rearArmor	Mod/Armor.h	/^	int _frontArmor, _sideArmor, _leftArmorDiff, _rearArmor, _underArmor, _drawingRoutine;$/;"	m	class:OpenXcom::Armor
_rearArmor	Mod/RuleSoldierBonus.h	/^	int _frontArmor, _sideArmor, _leftArmorDiff, _rearArmor, _underArmor;$/;"	m	class:OpenXcom::RuleSoldierBonus
_rearmRate	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_rearming	Savegame/CraftWeapon.h	/^	bool _rearming;$/;"	m	class:OpenXcom::CraftWeapon
_recentlyPromoted	Savegame/Soldier.h	/^	bool _recentlyPromoted, _psiTraining, _training, _returnToTrainingWhenHealed;$/;"	m	class:OpenXcom::Soldier
_recolor	Savegame/BattleUnit.h	/^	std::vector<std::pair<Uint8, Uint8> > _recolor;$/;"	m	class:OpenXcom::BattleUnit
_recommendedUserOptions	Mod/Mod.h	/^	std::map<std::string, std::string> _fixedUserOptions, _recommendedUserOptions;$/;"	m	class:OpenXcom::Mod
_recover	Mod/RuleItem.h	/^	bool _recover, _recoverCorpse, _ignoreInBaseDefense, _ignoreInCraftEquip, _liveAlien;$/;"	m	class:OpenXcom::RuleItem
_recoverConditional	Savegame/SavedBattleGame.h	/^	std::vector<BattleItem*> _recoverGuaranteed, _recoverConditional;$/;"	m	class:OpenXcom::SavedBattleGame
_recoverCorpse	Mod/RuleItem.h	/^	bool _recover, _recoverCorpse, _ignoreInBaseDefense, _ignoreInCraftEquip, _liveAlien;$/;"	m	class:OpenXcom::RuleItem
_recoverGuaranteed	Savegame/SavedBattleGame.h	/^	std::vector<BattleItem*> _recoverGuaranteed, _recoverConditional;$/;"	m	class:OpenXcom::SavedBattleGame
_recoveredItems	Battlescape/DebriefingState.h	/^	std::map<const RuleItem*, int> _rounds, _roundsPainKiller, _roundsStimulant, _roundsHeal, _recoveredItems;$/;"	m	class:OpenXcom::DebriefingState
_recovery	Savegame/Soldier.h	/^	float _recovery = 0.0;  \/\/ amount of hospital attention soldier needs... used to calculate recovery time$/;"	m	class:OpenXcom::Soldier
_recoveryDividers	Mod/RuleItem.h	/^	std::map<std::string, int> _recoveryDividers;$/;"	m	class:OpenXcom::RuleItem
_recoveryPoints	Mod/RuleItem.h	/^	int _recoveryPoints;$/;"	m	class:OpenXcom::RuleItem
_recoveryStats	Battlescape/DebriefingState.h	/^	std::map<int, RecoveryItem*> _recoveryStats;$/;"	m	class:OpenXcom::DebriefingState
_recoveryTime	Mod/RuleSoldierTransformation.h	/^	int _listOrder, _cost, _transferTime, _recoveryTime;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_recoveryTransformations	Mod/RuleItem.h	/^	std::map<const RuleItem*, std::vector<int> > _recoveryTransformations;$/;"	m	class:OpenXcom::RuleItem
_recoveryTransformationsName	Mod/RuleItem.h	/^	std::map<std::string, std::vector<int> > _recoveryTransformationsName;$/;"	m	class:OpenXcom::RuleItem
_rects	Mod/MapScript.h	/^	std::vector<SDL_Rect*> _rects;$/;"	m	class:OpenXcom::MapScript
_red	Basescape/MiniBaseView.h	/^	Uint8 _red, _green, _blue;$/;"	m	class:OpenXcom::MiniBaseView
_redraw	Engine/Surface.cpp	/^Surface::Surface() : _x{ }, _y{ }, _width{ }, _height{ }, _pitch{ }, _visible(true), _hidden(false), _redraw(false)$/;"	f	namespace:OpenXcom
_reenables	Mod/RuleResearch.h	/^	std::vector<const RuleResearch*> _dependencies, _unlocks, _disables, _reenables, _getOneFree, _requires;$/;"	m	class:OpenXcom::RuleResearch
_reenablesName	Mod/RuleResearch.h	/^	std::vector<std::string> _dependenciesName, _unlocksName, _disablesName, _reenablesName, _getOneFreeName, _requiresName;$/;"	m	class:OpenXcom::RuleResearch
_ref	Engine/OptionInfo.h	/^	union { bool *b; int *i; std::string *s; SDLKey *k; } _ref;$/;"	m	class:OpenXcom::OptionInfo	typeref:union:OpenXcom::OptionInfo::__anon1
_refresh	Mod/RuleStatBonus.h	/^	bool _refresh = true;$/;"	m	class:OpenXcom::RuleStatBonus
_refreshCategories	Basescape/NewManufactureListState.h	/^	bool _showRequirements, _refreshCategories, _doInit;$/;"	m	class:OpenXcom::NewManufactureListState
_refuelItem	Mod/RuleCraft.h	/^	std::string _refuelItem;$/;"	m	class:OpenXcom::RuleCraft
_refuelRate	Mod/RuleCraft.h	/^	int _repairRate, _refuelRate, _transferTime, _score;$/;"	m	class:OpenXcom::RuleCraft
_refund	Mod/RuleManufacture.h	/^	bool _refund;$/;"	m	class:OpenXcom::RuleManufacture
_refundValue	Mod/RuleBaseFacility.h	/^	int _size, _buildCost, _refundValue, _buildTime, _monthlyCost;$/;"	m	class:OpenXcom::RuleBaseFacility
_region	Battlescape/DebriefingState.h	/^	Region *_region;$/;"	m	class:OpenXcom::DebriefingState
_region	Mod/SoldierNamePool.h	/^	std::string _country, _region;$/;"	m	class:OpenXcom::SoldierNamePool
_region	Savegame/AlienMission.h	/^	std::string _region, _race;$/;"	m	class:OpenXcom::AlienMission
_regionChances	Savegame/AlienStrategy.h	/^	WeightedOptions _regionChances;$/;"	m	class:OpenXcom::AlienStrategy
_regionList	Mod/RuleEvent.h	/^	std::vector<std::string> _regionList;$/;"	m	class:OpenXcom::RuleEvent
_regionMissions	Savegame/AlienStrategy.h	/^	std::map<std::string, WeightedOptions*> _regionMissions;$/;"	m	class:OpenXcom::AlienStrategy
_regionToggles	Geoscape/GraphsState.h	/^	std::vector<GraphButInfo *>  _regionToggles, _countryToggles;$/;"	m	class:OpenXcom::GraphsState
_regionWeight	Mod/RuleRegion.h	/^	size_t _regionWeight;$/;"	m	class:OpenXcom::RuleRegion
_regionWeights	Mod/RuleAlienMission.h	/^	std::vector<std::pair<size_t, WeightedOptions*> > _regionWeights;$/;"	m	class:OpenXcom::RuleAlienMission
_regionWeights	Mod/RuleMissionScript.h	/^	std::vector<std::pair<size_t, WeightedOptions*> > _regionWeights, _missionWeights, _raceWeights;$/;"	m	class:OpenXcom::RuleMissionScript
_regions	Mod/Mod.h	/^	std::map<std::string, RuleRegion*> _regions;$/;"	m	class:OpenXcom::Mod
_regions	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_regions	Savegame/SavedGame.h	/^	std::vector<Region*> _regions;$/;"	m	class:OpenXcom::SavedGame
_regionsIndex	Mod/Mod.h	/^	std::vector<std::string> _countriesIndex, _extraGlobeLabelsIndex, _regionsIndex, _facilitiesIndex, _craftsIndex, _craftWeaponsIndex, _itemCategoriesIndex, _itemsIndex, _invsIndex, _ufosIndex;$/;"	m	class:OpenXcom::Mod
_reinforcements	Mod/AlienDeployment.h	/^	std::vector<ReinforcementsData> _reinforcements;$/;"	m	class:OpenXcom::AlienDeployment
_reinforcementsBlocks	Savegame/SavedBattleGame.h	/^	std::vector< std::vector<int> > _reinforcementsBlocks;$/;"	m	class:OpenXcom::SavedBattleGame
_reinforcementsDeployment	Savegame/SavedBattleGame.h	/^	std::string _reinforcementsDeployment, _reinforcementsRace;$/;"	m	class:OpenXcom::SavedBattleGame
_reinforcementsItemLevel	Savegame/SavedBattleGame.h	/^	int _reinforcementsItemLevel;$/;"	m	class:OpenXcom::SavedBattleGame
_reinforcementsMemory	Savegame/SavedBattleGame.h	/^	std::map<std::string, int> _reinforcementsMemory;$/;"	m	class:OpenXcom::SavedBattleGame
_reinforcementsRace	Savegame/SavedBattleGame.h	/^	std::string _reinforcementsDeployment, _reinforcementsRace;$/;"	m	class:OpenXcom::SavedBattleGame
_rejoinedXcomEvent	Mod/RuleCountry.h	/^	const RuleEvent* _rejoinedXcomEvent = nullptr;$/;"	m	class:OpenXcom::RuleCountry
_rejoinedXcomEventName	Mod/RuleCountry.h	/^	std::string _signedPactEventName, _rejoinedXcomEventName;$/;"	m	class:OpenXcom::RuleCountry
_release	Engine/InteractiveSurface.h	/^	std::map<Uint8, ActionHandler> _click, _press, _release;$/;"	m	class:OpenXcom::InteractiveSurface
_reload	Basescape/CraftEquipmentState.h	/^	bool _reload;$/;"	m	class:OpenXcom::CraftEquipmentState
_reload	Mod/RuleUfo.h	/^	int _power, _range, _score, _reload, _breakOffTime, _missionScore;$/;"	m	class:OpenXcom::RuleUfo
_reloadAggressive	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_reloadCautious	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_reloadSound	Mod/RuleItem.h	/^	std::vector<int> _reloadSound, _primeSound, _unprimeSound;$/;"	m	class:OpenXcom::RuleItem
_reloadStandard	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_reloadUnit	Battlescape/InventoryState.h	/^	bool _reloadUnit;$/;"	m	class:OpenXcom::InventoryState
_removalTime	Mod/RuleBaseFacility.h	/^	int _removalTime;$/;"	m	class:OpenXcom::RuleBaseFacility
_repairRate	Mod/RuleCraft.h	/^	int _repairRate, _refuelRate, _transferTime, _score;$/;"	m	class:OpenXcom::RuleCraft
_replaceBy	Mod/RuleItemCategory.h	/^	std::string _type, _replaceBy;$/;"	m	class:OpenXcom::RuleItemCategory
_replacedArmor	Savegame/Soldier.h	/^	Armor *_replacedArmor;$/;"	m	class:OpenXcom::Soldier
_requireCommanderOnboard	Mod/RuleStartingCondition.h	/^	bool _requireCommanderOnboard;$/;"	m	class:OpenXcom::RuleStartingCondition
_requiredBonusNames	Mod/RuleSkill.h	/^	std::vector<std::string> _requiredBonusNames;$/;"	m	class:OpenXcom::RuleSkill
_requiredBonuses	Mod/RuleSkill.h	/^	std::vector<const RuleSoldierBonus*> _requiredBonuses;$/;"	m	class:OpenXcom::RuleSkill
_requiredCommendations	Mod/RuleSoldierTransformation.h	/^	std::map<std::string, int> _requiredCommendations;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_requiredCrafts	Mod/RuleManufacture.h	/^	std::map<const RuleCraft*, int> _requiredCrafts;$/;"	m	class:OpenXcom::RuleManufacture
_requiredExtendedEngine	Engine/ModInfo.h	/^	std::string _requiredExtendedEngine;$/;"	m	class:OpenXcom::ModInfo
_requiredExtendedVersion	Engine/ModInfo.h	/^	std::string _requiredExtendedVersion;$/;"	m	class:OpenXcom::ModInfo
_requiredItems	Mod/RuleManufacture.h	/^	std::map<const RuleItem*, int> _requiredItems, _producedItems;$/;"	m	class:OpenXcom::RuleManufacture
_requiredItems	Mod/RuleSoldierTransformation.h	/^	std::map<std::string, int> _requiredItems;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_requiredItems	Mod/RuleStartingCondition.h	/^	std::map<std::string, int> _requiredItems;$/;"	m	class:OpenXcom::RuleStartingCondition
_requiredItemsNames	Mod/RuleManufacture.h	/^	std::map<std::string, int> _requiredItemsNames, _producedItemsNames;$/;"	m	class:OpenXcom::RuleManufacture
_requiredMasterModVersion	Engine/ModInfo.h	/^	ModInfoVersion _requiredMasterModVersion;$/;"	m	class:OpenXcom::ModInfo
_requiredMinStats	Mod/RuleSoldierTransformation.h	/^	UnitStats _requiredMinStats, _flatOverallStatChange, _percentOverallStatChange, _percentGainedStatChange;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_requiredPreviousTransformations	Mod/RuleSoldierTransformation.h	/^	std::vector<std::string > _requires, _requiredPreviousTransformations, _forbiddenPreviousTransformations;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_requires	Mod/Armor.h	/^	const RuleResearch* _requires = nullptr;$/;"	m	class:OpenXcom::Armor
_requires	Mod/ArticleDefinition.h	/^		std::vector<std::string> _requires;$/;"	m	class:OpenXcom::ArticleDefinition
_requires	Mod/RuleBaseFacility.h	/^	std::vector<std::string> _requires;$/;"	m	class:OpenXcom::RuleBaseFacility
_requires	Mod/RuleCraft.h	/^	std::vector<std::string> _requires;$/;"	m	class:OpenXcom::RuleCraft
_requires	Mod/RuleItem.h	/^	std::vector<const RuleResearch *> _requires, _requiresBuy;$/;"	m	class:OpenXcom::RuleItem
_requires	Mod/RuleManufacture.h	/^	std::vector<const RuleResearch*> _requires;$/;"	m	class:OpenXcom::RuleManufacture
_requires	Mod/RuleResearch.h	/^	std::vector<const RuleResearch*> _dependencies, _unlocks, _disables, _reenables, _getOneFree, _requires;$/;"	m	class:OpenXcom::RuleResearch
_requires	Mod/RuleSoldier.h	/^	std::vector<std::string> _requires;$/;"	m	class:OpenXcom::RuleSoldier
_requires	Mod/RuleSoldierTransformation.h	/^	std::vector<std::string > _requires, _requiredPreviousTransformations, _forbiddenPreviousTransformations;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_requiresBaseFunc	Mod/RuleBaseFacility.h	/^	RuleBaseFacilityFunctions _requiresBaseFunc = 0;$/;"	m	class:OpenXcom::RuleBaseFacility
_requiresBaseFunc	Mod/RuleManufacture.h	/^	RuleBaseFacilityFunctions _requiresBaseFunc;$/;"	m	class:OpenXcom::RuleManufacture
_requiresBaseFunc	Mod/RuleResearch.h	/^	RuleBaseFacilityFunctions _requiresBaseFunc;$/;"	m	class:OpenXcom::RuleResearch
_requiresBaseFunc	Mod/RuleSoldierTransformation.h	/^	RuleBaseFacilityFunctions _requiresBaseFunc;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_requiresBuy	Mod/RuleItem.h	/^	std::vector<const RuleResearch *> _requires, _requiresBuy;$/;"	m	class:OpenXcom::RuleItem
_requiresBuyBaseFunc	Mod/RuleCraft.h	/^	RuleBaseFacilityFunctions _requiresBuyBaseFunc;$/;"	m	class:OpenXcom::RuleCraft
_requiresBuyBaseFunc	Mod/RuleItem.h	/^	RuleBaseFacilityFunctions _requiresBuyBaseFunc;$/;"	m	class:OpenXcom::RuleItem
_requiresBuyBaseFunc	Mod/RuleSoldier.h	/^	RuleBaseFacilityFunctions _requiresBuyBaseFunc;$/;"	m	class:OpenXcom::RuleSoldier
_requiresBuyCountry	Mod/RuleItem.h	/^	std::string _requiresBuyCountry;$/;"	m	class:OpenXcom::RuleItem
_requiresBuyName	Mod/RuleItem.h	/^	std::vector<std::string> _requiresBuyName;$/;"	m	class:OpenXcom::RuleItem
_requiresName	Mod/Armor.h	/^	std::string _requiresName;$/;"	m	class:OpenXcom::Armor
_requiresName	Mod/RuleItem.h	/^	std::vector<std::string> _requiresName;$/;"	m	class:OpenXcom::RuleItem
_requiresName	Mod/RuleManufacture.h	/^	std::vector<std::string> _requiresName;$/;"	m	class:OpenXcom::RuleManufacture
_requiresName	Mod/RuleResearch.h	/^	std::vector<std::string> _dependenciesName, _unlocksName, _disablesName, _reenablesName, _getOneFreeName, _requiresName;$/;"	m	class:OpenXcom::RuleResearch
_rerollStats	Mod/RuleSoldierTransformation.h	/^	UnitStats _rerollStats;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_res	Menu/OptionsVideoState.h	/^	SDL_Rect** _res;$/;"	m	class:OpenXcom::OptionsVideoState
_resAmount	Menu/OptionsVideoState.h	/^	int _resAmount, _resCurrent;$/;"	m	class:OpenXcom::OptionsVideoState
_resCurrent	Menu/OptionsVideoState.h	/^	int _resAmount, _resCurrent;$/;"	m	class:OpenXcom::OptionsVideoState
_research	Geoscape/ResearchCompleteState.h	/^	const RuleResearch * _research, * _bonus;$/;"	m	class:OpenXcom::ResearchCompleteState
_research	Mod/Mod.h	/^	std::map<std::string, RuleResearch *> _research;$/;"	m	class:OpenXcom::Mod
_research	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_research	Savegame/Base.h	/^	std::vector<ResearchProject *> _research;$/;"	m	class:OpenXcom::Base
_researchIndex	Mod/Mod.h	/^	std::vector<std::string> _aliensIndex, _enviroEffectsIndex, _startingConditionsIndex, _deploymentsIndex, _armorsIndex, _ufopaediaIndex, _ufopaediaCatIndex, _researchIndex, _manufactureIndex;$/;"	m	class:OpenXcom::Mod
_researchList	Mod/RuleEvent.h	/^	std::vector<std::string> _researchList;$/;"	m	class:OpenXcom::RuleEvent
_researchListOrder	Mod/Mod.h	/^	int _facilityListOrder, _craftListOrder, _itemCategoryListOrder, _itemListOrder, _researchListOrder,  _manufactureListOrder;$/;"	m	class:OpenXcom::Mod
_researchName	Geoscape/GeoscapeEventState.h	/^	std::string _researchName;$/;"	m	class:OpenXcom::GeoscapeEventState
_researchRuleStatus	Savegame/SavedGame.h	/^	std::map<std::string, int> _researchRuleStatus;$/;"	m	class:OpenXcom::SavedGame
_researchScores	Savegame/SavedGame.h	/^	std::vector<int> _researchScores;$/;"	m	class:OpenXcom::SavedGame
_researchTriggers	Mod/RuleArcScript.h	/^	std::map<std::string, bool> _researchTriggers;$/;"	m	class:OpenXcom::RuleArcScript
_researchTriggers	Mod/RuleEventScript.h	/^	std::map<std::string, bool> _researchTriggers;$/;"	m	class:OpenXcom::RuleEventScript
_researchTriggers	Mod/RuleMissionScript.h	/^	std::map<std::string, bool> _researchTriggers;$/;"	m	class:OpenXcom::RuleMissionScript
_reserve	Battlescape/AIModule.h	/^	BattleActionType _reserve;$/;"	m	class:OpenXcom::AIModule
_reserve	Battlescape/BattlescapeState.h	/^	BattlescapeButton *_btnEndTurn, *_btnAbort, *_btnLaunch, *_btnPsi, *_btnSpecial, *_btnSkills, *_reserve;$/;"	m	class:OpenXcom::BattlescapeState
_reserved	Savegame/Node.h	/^	int _reserved;  \/\/ 22 = Base Attack in Mapview 2$/;"	m	class:OpenXcom::Node
_reservedSpace	Engine/ModInfo.h	/^	int _reservedSpace;$/;"	m	class:OpenXcom::ModInfo
_reset	Basescape/SellState.h	/^	bool _reset;$/;"	m	class:OpenXcom::SellState
_reset	Mod/RuleSoldierTransformation.h	/^	bool _reset;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_resetAlienBaseAge	Mod/AlienDeployment.h	/^	bool _resetAlienBaseAgeAfterUpgrade, _resetAlienBaseAge;$/;"	m	class:OpenXcom::AlienDeployment
_resetAlienBaseAgeAfterUpgrade	Mod/AlienDeployment.h	/^	bool _resetAlienBaseAgeAfterUpgrade, _resetAlienBaseAge;$/;"	m	class:OpenXcom::AlienDeployment
_resourceConfigFile	Engine/ModInfo.h	/^	std::string _resourceConfigFile;$/;"	m	class:OpenXcom::ModInfo
_respawn	Savegame/BattleUnit.h	/^	bool _hidingForTurn, _floorAbove, _respawn, _alreadyRespawned;$/;"	m	class:OpenXcom::BattleUnit
_resummonedFakeCivilian	Savegame/BattleUnit.h	/^	bool _summonedPlayerUnit, _resummonedFakeCivilian;$/;"	m	class:OpenXcom::BattleUnit
_retaliationAggression	Mod/AlienRace.h	/^	int _retaliationAggression;$/;"	m	class:OpenXcom::AlienRace
_retaliationBaseRegionOdds	Mod/Mod.h	/^	std::vector<int> _retaliationBaseRegionOdds;$/;"	m	class:OpenXcom::Mod
_retaliationMission	Savegame/Base.h	/^	AlienMission* _retaliationMission;$/;"	m	class:OpenXcom::Base
_retaliationMissionDistribution	Mod/AlienRace.h	/^	std::vector<std::pair<size_t, WeightedOptions*> > _retaliationMissionDistribution;$/;"	m	class:OpenXcom::AlienRace
_retaliationOdds	Mod/RuleAlienMission.h	/^	int _retaliationOdds;$/;"	m	class:OpenXcom::RuleAlienMission
_retaliationTarget	Savegame/Base.h	/^	bool _retaliationTarget;$/;"	m	class:OpenXcom::Base
_retaliationTriggerOdds	Mod/Mod.h	/^	std::vector<int> _retaliationTriggerOdds;$/;"	m	class:OpenXcom::Mod
_returnToTrainingWhenHealed	Savegame/Soldier.h	/^	bool _recentlyPromoted, _psiTraining, _training, _returnToTrainingWhenHealed;$/;"	m	class:OpenXcom::Soldier
_returningFromGlobalTemplates	Basescape/CraftEquipmentState.h	/^	bool _returningFromGlobalTemplates;$/;"	m	class:OpenXcom::CraftEquipmentState
_revealedFloors	Mod/MapBlock.h	/^	std::vector<int> _groups, _revealedFloors;$/;"	m	class:OpenXcom::MapBlock
_reverse	Basescape/SoldierArmorState.cpp	/^	bool _reverse;$/;"	m	struct:OpenXcom::compareArmorName	file:
_reverse	Basescape/StoresState.cpp	/^	bool _reverse;$/;"	m	struct:OpenXcom::compareItemName	file:
_reverse	Basescape/StoresState.cpp	/^	bool _reverse;$/;"	m	struct:OpenXcom::compareItemQuantity	file:
_reverse	Basescape/StoresState.cpp	/^	bool _reverse;$/;"	m	struct:OpenXcom::compareItemSize	file:
_reverse	Basescape/StoresState.cpp	/^	bool _reverse;$/;"	m	struct:OpenXcom::compareItemSpaceUsed	file:
_reverse	Menu/ListGamesState.cpp	/^	bool _reverse;$/;"	m	struct:OpenXcom::compareSaveName	file:
_reverse	Menu/ListGamesState.cpp	/^	bool _reverse;$/;"	m	struct:OpenXcom::compareSaveTimestamp	file:
_reverseScales	Menu/OptionsVideoState.h	/^	std::vector<int> _scales, _reverseScales;$/;"	m	class:OpenXcom::OptionsVideoState
_reversed	Battlescape/Projectile.h	/^	bool _reversed;$/;"	m	class:OpenXcom::Projectile
_revivedHostileTotal	Savegame/SoldierDiary.h	/^		_martyrKillsTotal, _postMortemKills, _slaveKillsTotal, _bestSoldier, _revivedSoldierTotal, _revivedHostileTotal, _revivedNeutralTotal;$/;"	m	class:OpenXcom::SoldierDiary
_revivedNeutralTotal	Savegame/SoldierDiary.h	/^		_martyrKillsTotal, _postMortemKills, _slaveKillsTotal, _bestSoldier, _revivedSoldierTotal, _revivedHostileTotal, _revivedNeutralTotal;$/;"	m	class:OpenXcom::SoldierDiary
_revivedSoldierTotal	Savegame/SoldierDiary.h	/^		_martyrKillsTotal, _postMortemKills, _slaveKillsTotal, _bestSoldier, _revivedSoldierTotal, _revivedHostileTotal, _revivedNeutralTotal;$/;"	m	class:OpenXcom::SoldierDiary
_revivedUnitTotal	Savegame/SoldierDiary.h	/^		_woundsHealedTotal, _allUFOs, _allMissionTypes, _statGainTotal, _revivedUnitTotal, _wholeMedikitTotal, _braveryGainTotal, _bestOfRank, _MIA,$/;"	m	class:OpenXcom::SoldierDiary
_rifle	Battlescape/AIModule.h	/^	bool _rifle, _melee, _blaster, _grenade;$/;"	m	class:OpenXcom::AIModule
_rightBlackBand	Engine/Screen.h	/^	int _topBlackBand, _bottomBlackBand, _leftBlackBand, _rightBlackBand, _cursorTopBlackBand, _cursorLeftBlackBand;$/;"	m	class:OpenXcom::Screen
_rightClick	Interface/TextList.h	/^	ActionHandler _leftClick, _leftPress, _leftRelease, _rightClick, _rightPress, _rightRelease;$/;"	m	class:OpenXcom::TextList
_rightClickActionType	Mod/RuleBaseFacility.h	/^	int _rightClickActionType;$/;"	m	class:OpenXcom::RuleBaseFacility
_rightFlags	Basescape/TechTreeViewerState.h	/^	std::vector<TTVMode> _leftFlags, _rightFlags;$/;"	m	class:OpenXcom::TechTreeViewerState
_rightPress	Interface/TextList.h	/^	ActionHandler _leftClick, _leftPress, _leftRelease, _rightClick, _rightPress, _rightRelease;$/;"	m	class:OpenXcom::TextList
_rightRelease	Interface/TextList.h	/^	ActionHandler _leftClick, _leftPress, _leftRelease, _rightClick, _rightPress, _rightRelease;$/;"	m	class:OpenXcom::TextList
_rightTopics	Basescape/TechTreeViewerState.h	/^	std::vector<std::string> _leftTopics, _rightTopics;$/;"	m	class:OpenXcom::TechTreeViewerState
_rmb	Engine/Game.h	/^	bool _ctrl, _alt, _shift, _rmb, _mmb;$/;"	m	class:OpenXcom::Game
_rotLat	Geoscape/Globe.h	/^	double _cenLon, _cenLat, _rotLon, _rotLat, _hoverLon, _hoverLat;$/;"	m	class:OpenXcom::Globe
_rotLon	Geoscape/Globe.h	/^	double _cenLon, _cenLat, _rotLon, _rotLat, _hoverLon, _hoverLat;$/;"	m	class:OpenXcom::Globe
_rotTimer	Geoscape/Globe.h	/^	Timer *_blinkTimer, *_rotTimer;$/;"	m	class:OpenXcom::Globe
_rounds	Battlescape/DebriefingState.h	/^	std::map<const RuleItem*, int> _rounds, _roundsPainKiller, _roundsStimulant, _roundsHeal, _recoveredItems;$/;"	m	class:OpenXcom::DebriefingState
_roundsHeal	Battlescape/DebriefingState.h	/^	std::map<const RuleItem*, int> _rounds, _roundsPainKiller, _roundsStimulant, _roundsHeal, _recoveredItems;$/;"	m	class:OpenXcom::DebriefingState
_roundsPainKiller	Battlescape/DebriefingState.h	/^	std::map<const RuleItem*, int> _rounds, _roundsPainKiller, _roundsStimulant, _roundsHeal, _recoveredItems;$/;"	m	class:OpenXcom::DebriefingState
_roundsStimulant	Battlescape/DebriefingState.h	/^	std::map<const RuleItem*, int> _rounds, _roundsPainKiller, _roundsStimulant, _roundsHeal, _recoveredItems;$/;"	m	class:OpenXcom::DebriefingState
_row	Geoscape/BaseDefenseState.h	/^	int _thinkcycles, _row, _passes, _gravShields, _defenses, _attacks, _explosionCount;$/;"	m	class:OpenXcom::BaseDefenseState
_row	Ufopaedia/ArticleStateArmor.h	/^		int _row;$/;"	m	class:OpenXcom::ArticleStateArmor
_row	Ufopaedia/ArticleStateTFTDArmor.h	/^		int _row;$/;"	m	class:OpenXcom::ArticleStateTFTDArmor
_rowEntry	Basescape/SoldierDiaryMissionState.h	/^	int _rowEntry;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_rows	Basescape/PurchaseState.h	/^	std::vector<int> _rows;$/;"	m	class:OpenXcom::PurchaseState
_rows	Basescape/SellState.h	/^	std::vector<int> _rows;$/;"	m	class:OpenXcom::SellState
_rows	Basescape/TransferItemsState.h	/^	std::vector<int> _rows;$/;"	m	class:OpenXcom::TransferItemsState
_rows	Interface/TextList.h	/^	std::vector<size_t> _columns, _rows;$/;"	m	class:OpenXcom::TextList
_rtl	Engine/Language.cpp	/^std::vector<std::string> Language::_rtl, Language::_cjk;$/;"	m	class:OpenXcom::Language	file:
_rtl	Engine/Language.h	/^	static std::vector<std::string> _rtl, _cjk;$/;"	m	class:OpenXcom::Language
_rule	Basescape/PlaceFacilityState.h	/^	const RuleBaseFacility *_rule;$/;"	m	class:OpenXcom::PlaceFacilityState
_rule	Basescape/ResearchInfoState.h	/^	RuleResearch *_rule;$/;"	m	class:OpenXcom::ResearchInfoState
_rule	Savegame/AlienMission.h	/^	const RuleAlienMission &_rule;$/;"	m	class:OpenXcom::AlienMission
_rule	Savegame/GeoscapeEvent.h	/^	const RuleEvent &_rule;$/;"	m	class:OpenXcom::GeoscapeEvent
_rule	Savegame/SavedBattleGame.h	/^	Mod *_rule;$/;"	m	class:OpenXcom::SavedBattleGame
_rule	Savegame/SoldierDiary.h	/^	RuleCommendations *_rule = nullptr;$/;"	m	class:OpenXcom::SoldierCommendations
_ruleInterface	Engine/State.h	/^	RuleInterface *_ruleInterface;$/;"	m	class:OpenXcom::State
_ruleInterfaceParent	Engine/State.h	/^	RuleInterface *_ruleInterfaceParent;$/;"	m	class:OpenXcom::State
_rules	Geoscape/Globe.h	/^	RuleGlobe *_rules;$/;"	m	class:OpenXcom::Globe
_rules	Savegame/BaseFacility.h	/^	const RuleBaseFacility *_rules;$/;"	m	class:OpenXcom::BaseFacility
_rules	Savegame/BattleItem.h	/^	const RuleItem *_rules;$/;"	m	class:OpenXcom::BattleItem
_rules	Savegame/Country.h	/^	RuleCountry *_rules;$/;"	m	class:OpenXcom::Country
_rules	Savegame/Craft.h	/^	const RuleCraft *_rules;$/;"	m	class:OpenXcom::Craft
_rules	Savegame/CraftWeapon.h	/^	RuleCraftWeapon *_rules;$/;"	m	class:OpenXcom::CraftWeapon
_rules	Savegame/MissionSite.h	/^	const RuleAlienMission *_rules;$/;"	m	class:OpenXcom::MissionSite
_rules	Savegame/Production.h	/^	const RuleManufacture * _rules;$/;"	m	class:OpenXcom::Production
_rules	Savegame/Region.h	/^	RuleRegion *_rules;$/;"	m	class:OpenXcom::Region
_rules	Savegame/SaveConverter.h	/^	RuleConverter *_rules;$/;"	m	class:OpenXcom::SaveConverter
_rules	Savegame/Soldier.h	/^	RuleSoldier *_rules;$/;"	m	class:OpenXcom::Soldier
_rules	Savegame/Ufo.h	/^	const RuleUfo *_rules;$/;"	m	class:OpenXcom::Ufo
_rules	Savegame/Vehicle.h	/^	RuleItem *_rules;$/;"	m	class:OpenXcom::Vehicle
_running	Engine/Timer.h	/^	bool _running;$/;"	m	class:OpenXcom::Timer
_rwops	Engine/Music.h	/^	SDL_RWops *_rwops;$/;"	m	class:OpenXcom::Music
_sadList	Geoscape/MonthlyReportState.h	/^	std::vector<std::string> _happyList, _sadList, _pactList, _cancelPactList;$/;"	m	class:OpenXcom::MonthlyReportState
_satisfaction	Savegame/Country.h	/^	int _satisfaction;$/;"	m	class:OpenXcom::Country
_save	Battlescape/AIModule.h	/^	SavedBattleGame *_save;$/;"	m	class:OpenXcom::AIModule
_save	Battlescape/BattlescapeGame.h	/^	SavedBattleGame *_save;$/;"	m	class:OpenXcom::BattlescapeGame
_save	Battlescape/BattlescapeGenerator.h	/^	SavedBattleGame *_save;$/;"	m	class:OpenXcom::BattlescapeGenerator
_save	Battlescape/BattlescapeState.h	/^	SavedBattleGame *_save;$/;"	m	class:OpenXcom::BattlescapeState
_save	Battlescape/ExtendedBattlescapeLinksState.h	/^	SavedBattleGame* _save;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_save	Battlescape/ExtendedInventoryLinksState.h	/^	SavedBattleGame* _save;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_save	Battlescape/ItemSprite.h	/^	const SavedBattleGame *_save;$/;"	m	class:OpenXcom::ItemSprite
_save	Battlescape/Map.h	/^	SavedBattleGame *_save;$/;"	m	class:OpenXcom::Map
_save	Battlescape/Pathfinding.h	/^	SavedBattleGame *_save;$/;"	m	class:OpenXcom::Pathfinding
_save	Battlescape/Projectile.h	/^	SavedBattleGame *_save;$/;"	m	class:OpenXcom::Projectile
_save	Battlescape/TileEngine.h	/^	SavedBattleGame *_save;$/;"	m	class:OpenXcom::TileEngine
_save	Battlescape/UnitSprite.h	/^	const SavedBattleGame *_save;$/;"	m	class:OpenXcom::UnitSprite
_save	Engine/Game.h	/^	SavedGame *_save;$/;"	m	class:OpenXcom::Game
_save	Savegame/SaveConverter.h	/^	SavedGame *_save;$/;"	m	class:OpenXcom::SaveConverter
_save	Savegame/Tile.h	/^	SavedBattleGame* _save;$/;"	m	class:OpenXcom::Tile
_saveName	Savegame/SaveConverter.h	/^	std::string _saveName, _savePath;$/;"	m	class:OpenXcom::SaveConverter
_savePath	Savegame/SaveConverter.h	/^	std::string _saveName, _savePath;$/;"	m	class:OpenXcom::SaveConverter
_savedScrollPosition	Basescape/CraftArmorState.h	/^	size_t _craft, _savedScrollPosition;$/;"	m	class:OpenXcom::CraftArmorState
_saves	Menu/ListGamesState.h	/^	std::vector<SaveInfo> _saves;$/;"	m	class:OpenXcom::ListGamesState
_saves	Menu/ListLoadOriginalState.h	/^	SaveOriginal _saves[SaveConverter::NUM_SAVES];$/;"	m	class:OpenXcom::ListLoadOriginalState
_scale	Interface/Bar.h	/^	double _scale, _max, _value, _value2;$/;"	m	class:OpenXcom::Bar
_scaleX	Engine/Action.h	/^	double _scaleX, _scaleY;$/;"	m	class:OpenXcom::Action
_scaleX	Engine/Screen.h	/^	double _scaleX, _scaleY;$/;"	m	class:OpenXcom::Screen
_scaleY	Engine/Action.h	/^	double _scaleX, _scaleY;$/;"	m	class:OpenXcom::Action
_scaleY	Engine/Screen.h	/^	double _scaleX, _scaleY;$/;"	m	class:OpenXcom::Screen
_scales	Menu/OptionsVideoState.h	/^	std::vector<int> _scales, _reverseScales;$/;"	m	class:OpenXcom::OptionsVideoState
_scan	Battlescape/ScannerState.h	/^	Surface *_scan;$/;"	m	class:OpenXcom::ScannerState
_scannedTurn	Savegame/BattleUnit.h	/^	int _scannedTurn;$/;"	m	class:OpenXcom::BattleUnit
_scannerView	Battlescape/ScannerState.h	/^	ScannerView *_scannerView;$/;"	m	class:OpenXcom::ScannerState
_scientists	Savegame/Base.h	/^	int _scientists, _engineers;$/;"	m	class:OpenXcom::Base
_scientists	Savegame/Transfer.h	/^	int _itemQty, _scientists, _engineers;$/;"	m	class:OpenXcom::Transfer
_scorchedTile	Mod/MapDataSet.cpp	/^MapData *MapDataSet::_scorchedTile = 0;$/;"	m	class:OpenXcom::MapDataSet	file:
_scorchedTile	Mod/MapDataSet.h	/^	static MapData *_scorchedTile;$/;"	m	class:OpenXcom::MapDataSet
_score	Mod/RuleCraft.h	/^	int _repairRate, _refuelRate, _transferTime, _score;$/;"	m	class:OpenXcom::RuleCraft
_score	Mod/RuleUfo.h	/^	int _power, _range, _score, _reload, _breakOffTime, _missionScore;$/;"	m	class:OpenXcom::RuleUfo
_screen	Engine/Game.h	/^	Screen *_screen;$/;"	m	class:OpenXcom::Game
_screen	Engine/Screen.h	/^	SDL_Surface *_screen;$/;"	m	class:OpenXcom::Screen
_screen	Engine/State.h	/^	bool _screen;$/;"	m	class:OpenXcom::State
_screen	Interface/Window.h	/^	bool _contrast, _screen, _thinBorder;$/;"	m	class:OpenXcom::Window
_screenActions	Basescape/SoldierTransformationListState.h	/^	ComboBox* _screenActions;$/;"	m	class:OpenXcom::SoldierTransformationListState
_screenDepth	Engine/FlcPlayer.h	/^	int _screenDepth;$/;"	m	class:OpenXcom::FlcPlayer
_screenHeight	Battlescape/Camera.h	/^	int _screenWidth, _screenHeight;$/;"	m	class:OpenXcom::Camera
_screenHeight	Engine/FlcPlayer.h	/^	int _screenHeight;$/;"	m	class:OpenXcom::FlcPlayer
_screenWidth	Battlescape/Camera.h	/^	int _screenWidth, _screenHeight;$/;"	m	class:OpenXcom::Camera
_screenWidth	Engine/FlcPlayer.h	/^	int _screenWidth;$/;"	m	class:OpenXcom::FlcPlayer
_scriptGlobal	Mod/Mod.h	/^	ModScriptGlobal *_scriptGlobal;$/;"	m	class:OpenXcom::Mod
_scriptValues	Mod/Armor.h	/^	ScriptValues<Armor> _scriptValues;$/;"	m	class:OpenXcom::Armor
_scriptValues	Mod/Mod.cpp	/^	ScriptValues<Mod> _scriptValues;$/;"	m	class:OpenXcom::ModScriptGlobal	file:
_scriptValues	Mod/RuleCraft.h	/^	ScriptValues<RuleCraft> _scriptValues;$/;"	m	class:OpenXcom::RuleCraft
_scriptValues	Mod/RuleItem.h	/^	ScriptValues<RuleItem> _scriptValues;$/;"	m	class:OpenXcom::RuleItem
_scriptValues	Mod/RuleResearch.h	/^	ScriptValues<RuleResearch> _scriptValues;$/;"	m	class:OpenXcom::RuleResearch
_scriptValues	Mod/RuleSkill.h	/^	ScriptValues<RuleSkill> _scriptValues;$/;"	m	class:OpenXcom::RuleSkill
_scriptValues	Mod/RuleSoldier.h	/^	ScriptValues<RuleSoldier> _scriptValues;$/;"	m	class:OpenXcom::RuleSoldier
_scriptValues	Mod/RuleSoldierBonus.h	/^	ScriptValues<RuleSoldierBonus> _scriptValues;$/;"	m	class:OpenXcom::RuleSoldierBonus
_scriptValues	Mod/RuleUfo.h	/^	ScriptValues<RuleUfo> _scriptValues;$/;"	m	class:OpenXcom::RuleUfo
_scriptValues	Savegame/BattleItem.h	/^	ScriptValues<BattleItem> _scriptValues;$/;"	m	class:OpenXcom::BattleItem
_scriptValues	Savegame/BattleUnit.h	/^	ScriptValues<BattleUnit> _scriptValues;$/;"	m	class:OpenXcom::BattleUnit
_scriptValues	Savegame/Craft.h	/^	ScriptValues<Craft> _scriptValues;$/;"	m	class:OpenXcom::Craft
_scriptValues	Savegame/SavedBattleGame.h	/^	ScriptValues<SavedBattleGame> _scriptValues;$/;"	m	class:OpenXcom::SavedBattleGame
_scriptValues	Savegame/SavedGame.h	/^	ScriptValues<SavedGame> _scriptValues;$/;"	m	class:OpenXcom::SavedGame
_scriptValues	Savegame/Soldier.h	/^	ScriptValues<Soldier> _scriptValues;$/;"	m	class:OpenXcom::Soldier
_scriptValues	Savegame/Ufo.h	/^	ScriptValues<Ufo> _scriptValues;$/;"	m	class:OpenXcom::Ufo
_scroll	Interface/Text.h	/^	bool _wrap, _invert, _contrast, _indent, _scroll, _ignoreSeparators;$/;"	m	class:OpenXcom::Text
_scroll	Interface/TextList.h	/^	size_t _scroll, _visibleRows, _selRow;$/;"	m	class:OpenXcom::TextList
_scroll	Ufopaedia/UfopaediaStartState.h	/^		int _offset, _scroll;$/;"	m	class:OpenXcom::UfopaediaStartState
_scrollKeyTimer	Battlescape/Camera.h	/^	Timer *_scrollMouseTimer, *_scrollKeyTimer;$/;"	m	class:OpenXcom::Camera
_scrollKeyTimer	Battlescape/Map.h	/^	Timer *_scrollMouseTimer, *_scrollKeyTimer, *_obstacleTimer;$/;"	m	class:OpenXcom::Map
_scrollKeyX	Battlescape/Camera.h	/^	int _scrollMouseX, _scrollMouseY, _scrollKeyX, _scrollKeyY;$/;"	m	class:OpenXcom::Camera
_scrollKeyY	Battlescape/Camera.h	/^	int _scrollMouseX, _scrollMouseY, _scrollKeyX, _scrollKeyY;$/;"	m	class:OpenXcom::Camera
_scrollMouseTimer	Battlescape/Camera.h	/^	Timer *_scrollMouseTimer, *_scrollKeyTimer;$/;"	m	class:OpenXcom::Camera
_scrollMouseTimer	Battlescape/Map.h	/^	Timer *_scrollMouseTimer, *_scrollKeyTimer, *_obstacleTimer;$/;"	m	class:OpenXcom::Map
_scrollMouseX	Battlescape/Camera.h	/^	int _scrollMouseX, _scrollMouseY, _scrollKeyX, _scrollKeyY;$/;"	m	class:OpenXcom::Camera
_scrollMouseY	Battlescape/Camera.h	/^	int _scrollMouseX, _scrollMouseY, _scrollKeyX, _scrollKeyY;$/;"	m	class:OpenXcom::Camera
_scrollPos	Interface/TextList.h	/^	int _arrowPos, _scrollPos;$/;"	m	class:OpenXcom::TextList
_scrollTrigger	Battlescape/Camera.h	/^	bool _scrollTrigger;$/;"	m	class:OpenXcom::Camera
_scrollY	Interface/Text.h	/^	int _scrollY;$/;"	m	class:OpenXcom::Text
_scrollbar	Interface/TextList.h	/^	ScrollBar *_scrollbar;$/;"	m	class:OpenXcom::TextList
_scrolling	Interface/TextList.h	/^	bool _scrolling;$/;"	m	class:OpenXcom::TextList
_searchString	Battlescape/Inventory.h	/^	std::string _searchString;$/;"	m	class:OpenXcom::Inventory
_second	Savegame/GameTime.h	/^	int _second, _minute, _hour, _weekday, _day, _month, _year;$/;"	m	class:OpenXcom::GameTime
_secondOnTop	Interface/Bar.h	/^	bool _secondOnTop;$/;"	m	class:OpenXcom::Bar
_secondsRemaining	Savegame/MissionSite.h	/^	size_t _secondsRemaining;$/;"	m	class:OpenXcom::MissionSite
_secondsRemaining	Savegame/Ufo.h	/^	size_t _secondsRemaining;$/;"	m	class:OpenXcom::Ufo
_section	Ufopaedia/UfopaediaSelectState.h	/^		std::string _section;$/;"	m	class:OpenXcom::UfopaediaSelectState
_sections	Mod/Mod.cpp	/^	const std::map<std::string, int> &_sections;$/;"	m	struct:OpenXcom::compareRule	file:
_sections	Mod/Mod.cpp	/^	const std::map<std::string, int> &_sections;$/;"	m	struct:OpenXcom::compareSection	file:
_seedState	Engine/RNG.h	/^		 uint64_t _seedState;$/;"	m	class:OpenXcom::RNG::RandomState
_segment	Savegame/Node.h	/^	int _segment;$/;"	m	class:OpenXcom::Node
_segments	Battlescape/BattlescapeGenerator.h	/^	std::vector< std::vector<int> > _segments, _drillMap;$/;"	m	class:OpenXcom::BattlescapeGenerator
_sel	Basescape/CraftEquipmentState.h	/^	size_t _sel, _craft;$/;"	m	class:OpenXcom::CraftEquipmentState
_sel	Basescape/ManageAlienContainmentState.h	/^	size_t _sel;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_sel	Basescape/PurchaseState.h	/^	size_t _sel;$/;"	m	class:OpenXcom::PurchaseState
_sel	Basescape/SellState.h	/^	size_t _sel;$/;"	m	class:OpenXcom::SellState
_sel	Basescape/TransferItemsState.h	/^	size_t _sel;$/;"	m	class:OpenXcom::TransferItemsState
_sel	Geoscape/AllocatePsiTrainingState.h	/^	size_t _sel;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_sel	Geoscape/AllocateTrainingState.h	/^	size_t _sel;$/;"	m	class:OpenXcom::AllocateTrainingState
_sel	Interface/ComboBox.h	/^	size_t _sel;$/;"	m	class:OpenXcom::ComboBox
_selAmmo	Battlescape/InventoryState.h	/^	Surface *_selAmmo;$/;"	m	class:OpenXcom::InventoryState
_selCrafts	Geoscape/InterceptState.h	/^	std::vector<Craft*> _selCrafts;$/;"	m	class:OpenXcom::InterceptState
_selFacility	Basescape/BaseView.h	/^	BaseFacility *_facilities[BASE_SIZE][BASE_SIZE], *_selFacility;$/;"	m	class:OpenXcom::BaseView
_selItem	Battlescape/Inventory.h	/^	BattleItem *_selItem;$/;"	m	class:OpenXcom::Inventory
_selKey	Menu/OptionsControlsState.h	/^	OptionInfo *_selKey;$/;"	m	class:OpenXcom::OptionsControlsState
_selRow	Interface/TextList.h	/^	size_t _scroll, _visibleRows, _selRow;$/;"	m	class:OpenXcom::TextList
_selSize	Basescape/BaseView.h	/^	int _gridX, _gridY, _selSize;$/;"	m	class:OpenXcom::BaseView
_selUnit	Battlescape/AlienInventory.h	/^	BattleUnit *_selUnit;$/;"	m	class:OpenXcom::AlienInventory
_selUnit	Battlescape/Inventory.h	/^	BattleUnit *_selUnit;$/;"	m	class:OpenXcom::Inventory
_select	Basescape/PlaceStartFacilityState.h	/^	SelectStartFacilityState *_select;$/;"	m	class:OpenXcom::PlaceStartFacilityState
_selectBaseSound	Mod/Mod.h	/^	std::vector<int> _selectBaseSound, _startDogfightSound;$/;"	m	class:OpenXcom::Mod
_selectSound	Mod/RuleCraft.h	/^	std::vector<int> _selectSound, _takeoffSound;$/;"	m	class:OpenXcom::RuleCraft
_selectType	Menu/NewBattleState.h	/^	NewBattleSelectType _selectType;$/;"	m	class:OpenXcom::NewBattleState
_selectUnitSound	Mod/Mod.h	/^	std::map<std::string, std::vector<int> > _selectUnitSound, _startMovingSound, _selectWeaponSound, _annoyedSound;$/;"	m	class:OpenXcom::Mod
_selectUnitSound	Mod/Unit.h	/^	std::vector<int> _selectUnitSound, _startMovingSound, _selectWeaponSound, _annoyedSound;$/;"	m	class:OpenXcom::Unit
_selectUnitSound	Savegame/BattleUnit.h	/^	std::vector<int> _selectUnitSound, _startMovingSound, _selectWeaponSound, _annoyedSound;$/;"	m	class:OpenXcom::BattleUnit
_selectUnitSoundFemale	Mod/Armor.h	/^	std::vector<int> _selectUnitSoundMale, _selectUnitSoundFemale;$/;"	m	class:OpenXcom::Armor
_selectUnitSoundFemale	Mod/RuleSoldier.h	/^	std::vector<int> _selectUnitSoundMale, _selectUnitSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_selectUnitSoundMale	Mod/Armor.h	/^	std::vector<int> _selectUnitSoundMale, _selectUnitSoundFemale;$/;"	m	class:OpenXcom::Armor
_selectUnitSoundMale	Mod/RuleSoldier.h	/^	std::vector<int> _selectUnitSoundMale, _selectUnitSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_selectWeaponSound	Mod/Mod.h	/^	std::map<std::string, std::vector<int> > _selectUnitSound, _startMovingSound, _selectWeaponSound, _annoyedSound;$/;"	m	class:OpenXcom::Mod
_selectWeaponSound	Mod/Unit.h	/^	std::vector<int> _selectUnitSound, _startMovingSound, _selectWeaponSound, _annoyedSound;$/;"	m	class:OpenXcom::Unit
_selectWeaponSound	Savegame/BattleUnit.h	/^	std::vector<int> _selectUnitSound, _startMovingSound, _selectWeaponSound, _annoyedSound;$/;"	m	class:OpenXcom::BattleUnit
_selectWeaponSoundFemale	Mod/Armor.h	/^	std::vector<int> _selectWeaponSoundMale, _selectWeaponSoundFemale;$/;"	m	class:OpenXcom::Armor
_selectWeaponSoundFemale	Mod/RuleSoldier.h	/^	std::vector<int> _selectWeaponSoundMale, _selectWeaponSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_selectWeaponSoundMale	Mod/Armor.h	/^	std::vector<int> _selectWeaponSoundMale, _selectWeaponSoundFemale;$/;"	m	class:OpenXcom::Armor
_selectWeaponSoundMale	Mod/RuleSoldier.h	/^	std::vector<int> _selectWeaponSoundMale, _selectWeaponSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_selectable	Interface/TextList.h	/^	bool _dot, _selectable, _condensed, _contrast, _wrap, _flooding, _ignoreSeparators;$/;"	m	class:OpenXcom::TextList
_selected	Basescape/CraftEquipmentSaveState.h	/^	std::string _selected;$/;"	m	class:OpenXcom::CraftEquipmentSaveState
_selected	Battlescape/InventorySaveState.h	/^	std::string _selected;$/;"	m	class:OpenXcom::InventorySaveState
_selected	Menu/ListSaveState.h	/^	std::string _selected;$/;"	m	class:OpenXcom::ListSaveState
_selected	Menu/OptionsControlsState.h	/^	int _selected;$/;"	m	class:OpenXcom::OptionsControlsState
_selectedBase	Savegame/SavedGame.h	/^	size_t _selectedBase;$/;"	m	class:OpenXcom::SavedGame
_selectedFlag	Basescape/TechTreeViewerState.h	/^	TTVMode _selectedFlag;$/;"	m	class:OpenXcom::TechTreeViewerState
_selectedItem	Basescape/ManufactureDependenciesTreeState.h	/^	std::string _selectedItem;$/;"	m	class:OpenXcom::ManufactureDependenciesTreeState
_selectedNote	Menu/NotesState.h	/^	std::string _selectedNote;$/;"	m	class:OpenXcom::NotesState
_selectedPart	Battlescape/MedikitView.h	/^	int _selectedPart;$/;"	m	class:OpenXcom::MedikitView
_selectedRow	Basescape/CraftEquipmentSaveState.h	/^	int _previousSelectedRow, _selectedRow;$/;"	m	class:OpenXcom::CraftEquipmentSaveState
_selectedRow	Battlescape/InventorySaveState.h	/^	int _previousSelectedRow, _selectedRow;$/;"	m	class:OpenXcom::InventorySaveState
_selectedRow	Menu/ListSaveState.h	/^	int _previousSelectedRow, _selectedRow;$/;"	m	class:OpenXcom::ListSaveState
_selectedRow	Menu/NotesState.h	/^	int _previousSelectedRow, _selectedRow;$/;"	m	class:OpenXcom::NotesState
_selectedTopic	Basescape/TechTreeViewerState.h	/^	std::string _selectedTopic;$/;"	m	class:OpenXcom::TechTreeViewerState
_selectedUnit	Savegame/SavedBattleGame.h	/^	BattleUnit *_selectedUnit, *_lastSelectedUnit;$/;"	m	class:OpenXcom::SavedBattleGame
_selection	Battlescape/Inventory.h	/^	Surface *_grid, *_items, *_gridLabels, *_selection;$/;"	m	class:OpenXcom::Inventory
_selector	Basescape/BaseView.h	/^	Surface *_selector;$/;"	m	class:OpenXcom::BaseView
_selector	Interface/TextList.h	/^	Surface *_bg, *_selector;$/;"	m	class:OpenXcom::TextList
_selectorColor	Basescape/BaseView.h	/^	Uint8 _cellColor, _selectorColor;$/;"	m	class:OpenXcom::BaseView
_selectorX	Battlescape/Map.h	/^	int _selectorX, _selectorY;$/;"	m	class:OpenXcom::Map
_selectorY	Battlescape/Map.h	/^	int _selectorX, _selectorY;$/;"	m	class:OpenXcom::Map
_selfDestructPressed	Geoscape/DogfightState.h	/^	bool _ufoIsAttacking, _disableDisengage, _disableCautious, _craftIsDefenseless, _selfDestructPressed;$/;"	m	class:OpenXcom::DogfightState
_sell	Savegame/Production.h	/^	bool _sell;$/;"	m	class:OpenXcom::Production
_sellAllButOne	Basescape/SellState.h	/^	bool _sellAllButOne;$/;"	m	class:OpenXcom::SellState
_sender	Engine/Action.h	/^	InteractiveSurface *_sender;$/;"	m	class:OpenXcom::Action
_sequentialArcs	Mod/RuleArcScript.h	/^	std::vector<std::string> _sequentialArcs;$/;"	m	class:OpenXcom::RuleArcScript
_sequentialGetOneFree	Mod/RuleResearch.h	/^	bool _sequentialGetOneFree;$/;"	m	class:OpenXcom::RuleResearch
_set	Battlescape/MiniMapView.h	/^	SurfaceSet * _set;$/;"	m	class:OpenXcom::MiniMapView
_setDefaultMods	Engine/Options.cpp	/^static void _setDefaultMods()$/;"	f	namespace:OpenXcom::Options
_sets	Mod/Mod.h	/^	std::map<std::string, SurfaceSet*> _sets;$/;"	m	class:OpenXcom::Mod
_settingsBattle	Menu/OptionsAdvancedState.h	/^	std::vector<OptionInfo> _settingsGeneral, _settingsGeo, _settingsBattle, _settingsOxce;$/;"	m	class:OpenXcom::OptionsAdvancedState
_settingsGeneral	Menu/OptionsAdvancedState.h	/^	std::vector<OptionInfo> _settingsGeneral, _settingsGeo, _settingsBattle, _settingsOxce;$/;"	m	class:OpenXcom::OptionsAdvancedState
_settingsGeo	Menu/OptionsAdvancedState.h	/^	std::vector<OptionInfo> _settingsGeneral, _settingsGeo, _settingsBattle, _settingsOxce;$/;"	m	class:OpenXcom::OptionsAdvancedState
_settingsOxce	Menu/OptionsAdvancedState.h	/^	std::vector<OptionInfo> _settingsGeneral, _settingsGeo, _settingsBattle, _settingsOxce;$/;"	m	class:OpenXcom::OptionsAdvancedState
_shade	Battlescape/UnitSprite.h	/^	int _x, _y, _shade, _burn;$/;"	m	class:OpenXcom::UnitSprite
_shade	Geoscape/ConfirmLandingState.h	/^	int _shade;$/;"	m	class:OpenXcom::ConfirmLandingState
_shade	Mod/AlienDeployment.h	/^	int _shade, _minShade, _maxShade;$/;"	m	class:OpenXcom::AlienDeployment
_shape	Interface/ArrowButton.h	/^	ArrowShape _shape;$/;"	m	class:OpenXcom::ArrowButton
_shareAmmoCategories	Mod/Mod.h	/^	bool _shareAmmoCategories, _showDogfightDistanceInKm, _showFullNameInAlienInventory;$/;"	m	class:OpenXcom::Mod
_shared	Mod/ModScript.h	/^	ScriptGlobal* _shared;$/;"	m	class:OpenXcom::ModScript
_sharedFrames	Engine/SurfaceSet.h	/^	int _sharedFrames;$/;"	m	class:OpenXcom::SurfaceSet
_sharedSounds	Engine/SoundSet.h	/^	int _sharedSounds;$/;"	m	class:OpenXcom::SoundSet
_shield	Savegame/Craft.h	/^	int _fuel, _damage, _shield, _interceptionOrder, _takeoff;$/;"	m	class:OpenXcom::Craft
_shield	Savegame/Ufo.h	/^	int _shield, _shieldRechargeHandle;$/;"	m	class:OpenXcom::Ufo
_shieldDamageModifier	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_shieldDamageModifier	Savegame/CraftWeaponProjectile.h	/^	int _shieldDamageModifier;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_shieldRechargeAtBase	Mod/RuleCraft.h	/^	int _shieldRechargeAtBase;$/;"	m	class:OpenXcom::RuleCraft
_shieldRechargeHandle	Savegame/Ufo.h	/^	int _shield, _shieldRechargeHandle;$/;"	m	class:OpenXcom::Ufo
_shift	Engine/Game.h	/^	bool _ctrl, _alt, _shift, _rmb, _mmb;$/;"	m	class:OpenXcom::Game
_shockIndicator	Battlescape/Inventory.h	/^	Surface *_stunIndicator, *_woundIndicator, *_burnIndicator, *_shockIndicator;$/;"	m	class:OpenXcom::Inventory
_shockIndicator	Battlescape/Map.h	/^	Surface *_stunIndicator, *_woundIndicator, *_burnIndicator, *_shockIndicator;$/;"	m	class:OpenXcom::Map
_shootingAt	Savegame/Ufo.h	/^	int _shootingAt, _hitFrame, _fireCountdown, _escapeCountdown;$/;"	m	class:OpenXcom::Ufo
_shortRadarRange	Mod/Mod.h	/^	int _shortRadarRange;$/;"	m	class:OpenXcom::Mod
_shotAtCounter10in1Mission	Savegame/SoldierDiary.h	/^		_shotAtCounter10in1Mission,	_hitCounter5in1Mission, _timesWoundedTotal, _KIA, _allAliensKilledTotal, _allAliensStunnedTotal,$/;"	m	class:OpenXcom::SoldierDiary
_shotAtCounterTotal	Savegame/SoldierDiary.h	/^	int _daysWoundedTotal, _totalShotByFriendlyCounter, _totalShotFriendlyCounter, _loneSurvivorTotal, _monthsService, _unconciousTotal, _shotAtCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_shotDownByCraftId	Savegame/Ufo.h	/^	CraftId _shotDownByCraftId;$/;"	m	class:OpenXcom::Ufo
_shotgunBehaviorType	Mod/RuleItem.h	/^	int _shotgunBehaviorType, _shotgunSpread, _shotgunChoke;$/;"	m	class:OpenXcom::RuleItem
_shotgunChoke	Mod/RuleItem.h	/^	int _shotgunBehaviorType, _shotgunSpread, _shotgunChoke;$/;"	m	class:OpenXcom::RuleItem
_shotgunPellets	Mod/RuleItem.h	/^	int _listOrder, _maxRange, _minRange, _dropoff, _bulletSpeed, _explosionSpeed, _shotgunPellets;$/;"	m	class:OpenXcom::RuleItem
_shotgunSpread	Mod/RuleItem.h	/^	int _shotgunBehaviorType, _shotgunSpread, _shotgunChoke;$/;"	m	class:OpenXcom::RuleItem
_shotsFired	Battlescape/UnitPanicBState.h	/^	int _shotsFired;$/;"	m	class:OpenXcom::UnitPanicBState
_shotsFiredCounterTotal	Savegame/SoldierDiary.h	/^		_hitCounterTotal, _ironManTotal, _longDistanceHitCounterTotal, _lowAccuracyHitCounterTotal, _shotsFiredCounterTotal, _shotsLandedCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_shotsLandedCounterTotal	Savegame/SoldierDiary.h	/^		_hitCounterTotal, _ironManTotal, _longDistanceHitCounterTotal, _lowAccuracyHitCounterTotal, _shotsFiredCounterTotal, _shotsLandedCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_showAlienBase	Mod/RuleAlienMission.h	/^	bool _showAlienBase;$/;"	m	class:OpenXcom::RuleAlienMission
_showAll	Basescape/ManufactureDependenciesTreeState.h	/^	bool _showAll;$/;"	m	class:OpenXcom::ManufactureDependenciesTreeState
_showAllLayers	Battlescape/Camera.h	/^	bool _showAllLayers;$/;"	m	class:OpenXcom::Camera
_showBriefing	Battlescape/NextTurnState.h	/^	bool _showBriefing;$/;"	m	class:OpenXcom::NextTurnState
_showDebug	Ufopaedia/StatsForNerdsState.h	/^	bool _showDebug, _showIds, _showDefaults;$/;"	m	class:OpenXcom::StatsForNerdsState
_showDefaults	Ufopaedia/StatsForNerdsState.h	/^	bool _showDebug, _showIds, _showDefaults;$/;"	m	class:OpenXcom::StatsForNerdsState
_showDogfightDistanceInKm	Mod/Mod.h	/^	bool _shareAmmoCategories, _showDogfightDistanceInKm, _showFullNameInAlienInventory;$/;"	m	class:OpenXcom::Mod
_showFullNameInAlienInventory	Mod/Mod.h	/^	bool _shareAmmoCategories, _showDogfightDistanceInKm, _showFullNameInAlienInventory;$/;"	m	class:OpenXcom::Mod
_showFullNameInAlienInventory	Mod/Unit.h	/^	int _showFullNameInAlienInventory;$/;"	m	class:OpenXcom::Unit
_showIds	Ufopaedia/StatsForNerdsState.h	/^	bool _showDebug, _showIds, _showDefaults;$/;"	m	class:OpenXcom::StatsForNerdsState
_showMinMax	Mod/RuleSoldierTransformation.h	/^	bool _showMinMax;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_showObstacles	Battlescape/Map.h	/^	bool _showObstacles;$/;"	m	class:OpenXcom::Map
_showRequirements	Basescape/NewManufactureListState.h	/^	bool _showRequirements, _refreshCategories, _doInit;$/;"	m	class:OpenXcom::NewManufactureListState
_showSellButton	Battlescape/DebriefingState.h	/^	bool _positiveScore, _destroyBase, _promotions, _showSellButton, _initDone;$/;"	m	class:OpenXcom::DebriefingState
_showTypeInInventory	Mod/RuleSoldier.h	/^	bool _allowPromotion, _allowPiloting, _showTypeInInventory;$/;"	m	class:OpenXcom::RuleSoldier
_sickBayAbsoluteBonus	Mod/RuleBaseFacility.h	/^	float _sickBayAbsoluteBonus, _sickBayRelativeBonus;$/;"	m	class:OpenXcom::RuleBaseFacility
_sickBayRelativeBonus	Mod/RuleBaseFacility.h	/^	float _sickBayAbsoluteBonus, _sickBayRelativeBonus;$/;"	m	class:OpenXcom::RuleBaseFacility
_side	Savegame/SavedBattleGame.h	/^	UnitFaction _side;$/;"	m	class:OpenXcom::SavedBattleGame
_sideArmor	Mod/Armor.h	/^	int _frontArmor, _sideArmor, _leftArmorDiff, _rearArmor, _underArmor, _drawingRoutine;$/;"	m	class:OpenXcom::Armor
_sideArmor	Mod/RuleSoldierBonus.h	/^	int _frontArmor, _sideArmor, _leftArmorDiff, _rearArmor, _underArmor;$/;"	m	class:OpenXcom::RuleSoldierBonus
_sideBottom	Geoscape/GeoscapeState.h	/^	TextButton *_sideTop, *_sideBottom;$/;"	m	class:OpenXcom::GeoscapeState
_sideLine	Geoscape/GeoscapeState.h	/^	Surface *_bg, *_sideLine, *_sidebar;$/;"	m	class:OpenXcom::GeoscapeState
_sideTop	Geoscape/GeoscapeState.h	/^	TextButton *_sideTop, *_sideBottom;$/;"	m	class:OpenXcom::GeoscapeState
_sidebar	Geoscape/GeoscapeState.h	/^	Surface *_bg, *_sideLine, *_sidebar;$/;"	m	class:OpenXcom::GeoscapeState
_sightChance	Mod/RuleBaseFacility.h	/^	int _sightRange, _sightChance;$/;"	m	class:OpenXcom::RuleBaseFacility
_sightRange	Mod/RuleBaseFacility.h	/^	int _sightRange, _sightChance;$/;"	m	class:OpenXcom::RuleBaseFacility
_signedPactEvent	Mod/RuleCountry.h	/^	const RuleEvent* _signedPactEvent = nullptr;$/;"	m	class:OpenXcom::RuleCountry
_signedPactEventName	Mod/RuleCountry.h	/^	std::string _signedPactEventName, _rejoinedXcomEventName;$/;"	m	class:OpenXcom::RuleCountry
_singleImage	Mod/ExtraSprites.h	/^	bool _singleImage;$/;"	m	class:OpenXcom::ExtraSprites
_siteType	Mod/RuleAlienMission.h	/^	std::string _siteType;$/;"	m	class:OpenXcom::RuleAlienMission
_siteType	Mod/RuleMissionScript.h	/^	bool _useTable, _siteType;$/;"	m	class:OpenXcom::RuleMissionScript
_size	Battlescape/Particle.h	/^	Uint8 _color, _opacity, _size;$/;"	m	class:OpenXcom::Particle
_size	Battlescape/Pathfinding.h	/^	int _size;$/;"	m	class:OpenXcom::Pathfinding
_size	Engine/AdlibMusic.h	/^	size_t _size;$/;"	m	class:OpenXcom::AdlibMusic
_size	Mod/Armor.h	/^	int _size, _weight, _visibilityAtDark, _visibilityAtDay, _personalLight;$/;"	m	class:OpenXcom::Armor
_size	Mod/RuleBaseFacility.h	/^	int _size, _buildCost, _refundValue, _buildTime, _monthlyCost;$/;"	m	class:OpenXcom::RuleBaseFacility
_size	Mod/RuleItem.h	/^	double _size;$/;"	m	class:OpenXcom::RuleItem
_size	Mod/RuleUfo.h	/^	std::string _type, _size;$/;"	m	class:OpenXcom::RuleUfo
_size	Savegame/Vehicle.h	/^	int _ammo, _size;$/;"	m	class:OpenXcom::Vehicle
_sizeX	Mod/MapScript.h	/^	int _sizeX, _sizeY, _sizeZ, _executionChances, _executions, _cumulativeFrequency, _label;$/;"	m	class:OpenXcom::MapScript
_sizeY	Mod/MapScript.h	/^	int _sizeX, _sizeY, _sizeZ, _executionChances, _executions, _cumulativeFrequency, _label;$/;"	m	class:OpenXcom::MapScript
_sizeZ	Mod/MapScript.h	/^	int _sizeX, _sizeY, _sizeZ, _executionChances, _executions, _cumulativeFrequency, _label;$/;"	m	class:OpenXcom::MapScript
_size_x	Engine/ShaderRepeat.h	/^	const int _size_x;$/;"	m	struct:OpenXcom::helper::controler
_size_x	Mod/MapBlock.h	/^	int _size_x, _size_y, _size_z;$/;"	m	class:OpenXcom::MapBlock
_size_y	Engine/ShaderRepeat.h	/^	const int _size_y;$/;"	m	struct:OpenXcom::helper::controler
_size_y	Mod/MapBlock.h	/^	int _size_x, _size_y, _size_z;$/;"	m	class:OpenXcom::MapBlock
_size_z	Mod/MapBlock.h	/^	int _size_x, _size_y, _size_z;$/;"	m	class:OpenXcom::MapBlock
_skill	Battlescape/ActionMenuItem.h	/^	const RuleSkill* _skill;$/;"	m	class:OpenXcom::ActionMenuItem
_skillIconSprite	Mod/RuleSoldier.h	/^	int _skillIconSprite;$/;"	m	class:OpenXcom::RuleSoldier
_skillNames	Mod/RuleSoldier.h	/^	std::vector<std::string> _skillNames;$/;"	m	class:OpenXcom::RuleSoldier
_skillScripts	Mod/RuleSkill.h	/^	ModScript::SkillScripts::Container _skillScripts;$/;"	m	class:OpenXcom::RuleSkill
_skills	Mod/Mod.h	/^	std::map<std::string, RuleSkill*> _skills;$/;"	m	class:OpenXcom::Mod
_skills	Mod/RuleSoldier.h	/^	std::vector<const RuleSkill*> _skills;$/;"	m	class:OpenXcom::RuleSoldier
_skillsIndex	Mod/Mod.h	/^	std::vector<std::string> _skillsIndex, _soldiersIndex, _soldierTransformationIndex, _soldierBonusIndex;$/;"	m	class:OpenXcom::Mod
_skinIndex	Savegame/Craft.h	/^	int _skinIndex;$/;"	m	class:OpenXcom::Craft
_skinSprites	Mod/RuleCraft.h	/^	std::vector<int> _skinSprites;$/;"	m	class:OpenXcom::RuleCraft
_slaveKillsTotal	Savegame/SoldierDiary.h	/^		_martyrKillsTotal, _postMortemKills, _slaveKillsTotal, _bestSoldier, _revivedSoldierTotal, _revivedHostileTotal, _revivedNeutralTotal;$/;"	m	class:OpenXcom::SoldierDiary
_slides	Menu/SlideshowState.h	/^	std::vector<InteractiveSurface *> _slides;$/;"	m	class:OpenXcom::SlideshowState
_slides	Mod/RuleVideo.h	/^	std::vector<SlideshowSlide> _slides;$/;"	m	class:OpenXcom::RuleVideo
_slideshowHeader	Menu/SlideshowState.h	/^	const SlideshowHeader &_slideshowHeader;$/;"	m	class:OpenXcom::SlideshowState
_slideshowHeader	Mod/RuleVideo.h	/^	SlideshowHeader _slideshowHeader;$/;"	m	class:OpenXcom::RuleVideo
_slideshowSlides	Menu/SlideshowState.h	/^	const std::vector<SlideshowSlide> *_slideshowSlides;$/;"	m	class:OpenXcom::SlideshowState
_slot	Savegame/EquipmentLayoutItem.h	/^	std::string _slot;$/;"	m	class:OpenXcom::EquipmentLayoutItem
_slotX	Savegame/EquipmentLayoutItem.h	/^	int _slotX, _slotY;$/;"	m	class:OpenXcom::EquipmentLayoutItem
_slotY	Savegame/EquipmentLayoutItem.h	/^	int _slotX, _slotY;$/;"	m	class:OpenXcom::EquipmentLayoutItem
_slots	Mod/RuleInventory.h	/^	std::vector<RuleSlot> _slots;$/;"	m	class:OpenXcom::RuleInventory
_slowdownCounter	Geoscape/GeoscapeState.h	/^	int _slowdownCounter;$/;"	m	class:OpenXcom::GeoscapeState
_slrAlienSpeed	Menu/OptionsBattlescapeState.h	/^	Slider *_slrScrollSpeed, *_slrFireSpeed, *_slrXcomSpeed, *_slrAlienSpeed;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_slrAlienTech	Menu/NewBattleState.h	/^	Slider *_slrDarkness, *_slrAlienTech, *_slrDepth;$/;"	m	class:OpenXcom::NewBattleState
_slrClockSpeed	Menu/OptionsGeoscapeState.h	/^	Slider *_slrScrollSpeed, *_slrDogfightSpeed, *_slrClockSpeed;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_slrDarkness	Menu/NewBattleState.h	/^	Slider *_slrDarkness, *_slrAlienTech, *_slrDepth;$/;"	m	class:OpenXcom::NewBattleState
_slrDepth	Menu/NewBattleState.h	/^	Slider *_slrDarkness, *_slrAlienTech, *_slrDepth;$/;"	m	class:OpenXcom::NewBattleState
_slrDogfightSpeed	Menu/OptionsGeoscapeState.h	/^	Slider *_slrScrollSpeed, *_slrDogfightSpeed, *_slrClockSpeed;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_slrFireSpeed	Menu/OptionsBattlescapeState.h	/^	Slider *_slrScrollSpeed, *_slrFireSpeed, *_slrXcomSpeed, *_slrAlienSpeed;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_slrMusicVolume	Menu/OptionsAudioState.h	/^	Slider *_slrMusicVolume, *_slrSoundVolume, *_slrUiVolume;$/;"	m	class:OpenXcom::OptionsAudioState
_slrScrollSpeed	Menu/OptionsBattlescapeState.h	/^	Slider *_slrScrollSpeed, *_slrFireSpeed, *_slrXcomSpeed, *_slrAlienSpeed;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_slrScrollSpeed	Menu/OptionsGeoscapeState.h	/^	Slider *_slrScrollSpeed, *_slrDogfightSpeed, *_slrClockSpeed;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_slrSoundVolume	Menu/OptionsAudioState.h	/^	Slider *_slrMusicVolume, *_slrSoundVolume, *_slrUiVolume;$/;"	m	class:OpenXcom::OptionsAudioState
_slrUiVolume	Menu/OptionsAudioState.h	/^	Slider *_slrMusicVolume, *_slrSoundVolume, *_slrUiVolume;$/;"	m	class:OpenXcom::OptionsAudioState
_slrXcomSpeed	Menu/OptionsBattlescapeState.h	/^	Slider *_slrScrollSpeed, *_slrFireSpeed, *_slrXcomSpeed, *_slrAlienSpeed;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_small	Basescape/BaseView.h	/^	Font *_big, *_small;$/;"	m	class:OpenXcom::BaseView
_small	Interface/Text.h	/^	Font *_big, *_small, *_font, *_fontOrig;$/;"	m	class:OpenXcom::Text
_small	Interface/TextList.h	/^	Font *_big, *_small, *_font;$/;"	m	class:OpenXcom::TextList
_smallDamage	Savegame/HitLog.h	/^	std::string _newTurn, _reactionFire, _newShot, _noDamage, _smallDamage, _bigDamage;$/;"	m	class:OpenXcom::HitLog
_smoke	Savegame/Tile.h	/^		Uint8 _smoke;$/;"	m	struct:OpenXcom::Tile::SerializationKey
_smoke	Savegame/Tile.h	/^	Uint8 _smoke = 0;$/;"	m	class:OpenXcom::Tile
_smokeMaxHit	Savegame/BattleUnit.h	/^	int _smokeMaxHit;$/;"	m	class:OpenXcom::BattleUnit
_smoothCamera	Battlescape/Map.h	/^	bool _unitDying, _smoothCamera, _smoothingEngaged, _flashScreen;$/;"	m	class:OpenXcom::Map
_smoothingEngaged	Battlescape/Map.h	/^	bool _unitDying, _smoothCamera, _smoothingEngaged, _flashScreen;$/;"	m	class:OpenXcom::Map
_sniper	Mod/Unit.h	/^	int _intelligence, _aggression, _spotter, _sniper, _energyRecovery;$/;"	m	class:OpenXcom::Unit
_softlockShotCounter	Savegame/Ufo.h	/^	int _softlockShotCounter;$/;"	m	class:OpenXcom::Ufo
_softlockThreshold	Mod/RuleUfo.h	/^	int _hunterKillerPercentage, _huntMode, _huntSpeed, _huntBehavior, _softlockThreshold;$/;"	m	class:OpenXcom::RuleUfo
_soldier	Basescape/SoldierArmorState.h	/^	size_t _soldier;$/;"	m	class:OpenXcom::SoldierArmorState
_soldier	Basescape/SoldierAvatarState.h	/^	size_t _soldier;$/;"	m	class:OpenXcom::SoldierAvatarState
_soldier	Basescape/SoldierBonusState.h	/^	size_t _soldier;$/;"	m	class:OpenXcom::SoldierBonusState
_soldier	Basescape/SoldierDiaryMissionState.h	/^	Soldier *_soldier;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_soldier	Basescape/SoldierDiaryOverviewState.h	/^	Soldier *_soldier;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_soldier	Basescape/SoldierDiaryPerformanceState.h	/^	Soldier *_soldier;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_soldier	Basescape/SoldierInfoState.h	/^	Soldier *_soldier;$/;"	m	class:OpenXcom::SoldierInfoState
_soldier	Battlescape/AlienInventoryState.h	/^	Surface *_bg, *_soldier;$/;"	m	class:OpenXcom::AlienInventoryState
_soldier	Battlescape/InventoryState.h	/^	Surface *_bg, *_soldier;$/;"	m	class:OpenXcom::InventoryState
_soldier	Savegame/Transfer.h	/^	Soldier *_soldier;$/;"	m	class:OpenXcom::Transfer
_soldierBonus	Mod/Mod.h	/^	std::map<std::string, RuleSoldierBonus *> _soldierBonus;$/;"	m	class:OpenXcom::Mod
_soldierBonusIndex	Mod/Mod.h	/^	std::vector<std::string> _skillsIndex, _soldiersIndex, _soldierTransformationIndex, _soldierBonusIndex;$/;"	m	class:OpenXcom::Mod
_soldierBonusListOrder	Mod/Mod.h	/^	int _soldierBonusListOrder, _transformationListOrder, _ufopaediaListOrder, _invListOrder, _soldierListOrder;$/;"	m	class:OpenXcom::Mod
_soldierBonusScripts	Mod/RuleSoldierBonus.h	/^	ModScript::SoldierBonusScripts::Container _soldierBonusScripts;$/;"	m	class:OpenXcom::RuleSoldierBonus
_soldierBonusType	Mod/RuleSoldierTransformation.h	/^	std::string _soldierBonusType;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_soldierBonusTypes	Mod/RuleCommendations.h	/^	std::vector<const RuleSoldierBonus*> _soldierBonusTypes;$/;"	m	class:OpenXcom::RuleCommendations
_soldierBonusTypesNames	Mod/RuleCommendations.h	/^	std::vector<std::string> _soldierBonusTypesNames;$/;"	m	class:OpenXcom::RuleCommendations
_soldierDiaryOverviewState	Basescape/SoldierDiaryPerformanceState.h	/^	SoldierDiaryOverviewState *_soldierDiaryOverviewState;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_soldierId	Basescape/SackSoldierState.h	/^	size_t _soldierId;$/;"	m	class:OpenXcom::SackSoldierState
_soldierId	Basescape/SoldierDiaryOverviewState.h	/^	size_t _soldierId;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_soldierId	Basescape/SoldierDiaryPerformanceState.h	/^	size_t _soldierId;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_soldierId	Basescape/SoldierInfoState.h	/^	size_t _soldierId;$/;"	m	class:OpenXcom::SoldierInfoState
_soldierInfoState	Basescape/SoldierDiaryOverviewState.h	/^	SoldierInfoState *_soldierInfoState;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_soldierListOrder	Mod/Mod.h	/^	int _soldierBonusListOrder, _transformationListOrder, _ufopaediaListOrder, _invListOrder, _soldierListOrder;$/;"	m	class:OpenXcom::Mod
_soldierStats	Battlescape/DebriefingState.h	/^	std::vector<SoldierStatsEntry> _soldierStats;$/;"	m	class:OpenXcom::DebriefingState
_soldierSurface	Basescape/SoldierAvatarState.h	/^	Surface *_soldierSurface;$/;"	m	class:OpenXcom::SoldierAvatarState
_soldierTransformation	Mod/Mod.h	/^	std::map<std::string, RuleSoldierTransformation *> _soldierTransformation;$/;"	m	class:OpenXcom::Mod
_soldierTransformationIndex	Mod/Mod.h	/^	std::vector<std::string> _skillsIndex, _soldiersIndex, _soldierTransformationIndex, _soldierBonusIndex;$/;"	m	class:OpenXcom::Mod
_soldierTypeTriggers	Mod/RuleEventScript.h	/^	std::map<std::string, bool> _soldierTypeTriggers;$/;"	m	class:OpenXcom::RuleEventScript
_soldiers	Geoscape/AllocatePsiTrainingState.h	/^	std::vector<Soldier*> _soldiers;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_soldiers	Geoscape/AllocateTrainingState.h	/^	std::vector<Soldier*> _soldiers;$/;"	m	class:OpenXcom::AllocateTrainingState
_soldiers	Mod/Mod.h	/^	std::map<std::string, RuleSoldier*> _soldiers;$/;"	m	class:OpenXcom::Mod
_soldiers	Mod/RuleCraft.h	/^	int _weapons, _soldiers, _pilots, _vehicles;$/;"	m	class:OpenXcom::RuleCraft
_soldiers	Savegame/Base.h	/^	std::vector<Soldier*> _soldiers;$/;"	m	class:OpenXcom::Base
_soldiers	Savegame/SaveConverter.h	/^	std::vector<Soldier*> _soldiers;$/;"	m	class:OpenXcom::SaveConverter
_soldiersCommended	Battlescape/DebriefingState.h	/^	std::vector<Soldier*> _soldiersCommended, _deadSoldiersCommended;$/;"	m	class:OpenXcom::DebriefingState
_soldiersIndex	Mod/Mod.h	/^	std::vector<std::string> _skillsIndex, _soldiersIndex, _soldierTransformationIndex, _soldierBonusIndex;$/;"	m	class:OpenXcom::Mod
_soldiersMedalled	Geoscape/MonthlyReportState.h	/^	std::vector<Soldier*> _soldiersMedalled;$/;"	m	class:OpenXcom::MonthlyReportState
_soldiersPerCaptain	Mod/Mod.h	/^	int _soldiersPerSergeant, _soldiersPerCaptain, _soldiersPerColonel, _soldiersPerCommander;$/;"	m	class:OpenXcom::Mod
_soldiersPerColonel	Mod/Mod.h	/^	int _soldiersPerSergeant, _soldiersPerCaptain, _soldiersPerColonel, _soldiersPerCommander;$/;"	m	class:OpenXcom::Mod
_soldiersPerCommander	Mod/Mod.h	/^	int _soldiersPerSergeant, _soldiersPerCaptain, _soldiersPerColonel, _soldiersPerCommander;$/;"	m	class:OpenXcom::Mod
_soldiersPerSergeant	Mod/Mod.h	/^	int _soldiersPerSergeant, _soldiersPerCaptain, _soldiersPerColonel, _soldiersPerCommander;$/;"	m	class:OpenXcom::Mod
_sortByCost	Basescape/NewResearchListState.h	/^	bool _sortByCost;$/;"	m	class:OpenXcom::NewResearchListState
_sortDate	Menu/ListGamesState.h	/^	ArrowButton *_sortName, *_sortDate;$/;"	m	class:OpenXcom::ListGamesState
_sortFunctors	Basescape/CraftArmorState.h	/^	std::vector<SortFunctor *> _sortFunctors;$/;"	m	class:OpenXcom::CraftArmorState
_sortFunctors	Basescape/CraftSoldiersState.h	/^	std::vector<SortFunctor *> _sortFunctors;$/;"	m	class:OpenXcom::CraftSoldiersState
_sortFunctors	Basescape/SoldiersState.h	/^	std::vector<SortFunctor *> _sortFunctors;$/;"	m	class:OpenXcom::SoldiersState
_sortFunctors	Geoscape/AllocatePsiTrainingState.h	/^	std::vector<SortFunctor *> _sortFunctors;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_sortFunctors	Geoscape/AllocateTrainingState.h	/^	std::vector<SortFunctor *> _sortFunctors;$/;"	m	class:OpenXcom::AllocateTrainingState
_sortFunctorsPlus	Geoscape/AllocatePsiTrainingState.h	/^	std::vector<SortFunctor *> _sortFunctorsPlus;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_sortFunctorsPlus	Geoscape/AllocateTrainingState.h	/^	std::vector<SortFunctor *> _sortFunctorsPlus;$/;"	m	class:OpenXcom::AllocateTrainingState
_sortName	Basescape/SoldierArmorState.h	/^	ArrowButton *_sortName;$/;"	m	class:OpenXcom::SoldierArmorState
_sortName	Basescape/StoresState.h	/^	ArrowButton *_sortName, *_sortQuantity, *_sortSize, *_sortSpaceUsed;$/;"	m	class:OpenXcom::StoresState
_sortName	Menu/ListGamesState.h	/^	ArrowButton *_sortName, *_sortDate;$/;"	m	class:OpenXcom::ListGamesState
_sortQuantity	Basescape/StoresState.h	/^	ArrowButton *_sortName, *_sortQuantity, *_sortSize, *_sortSpaceUsed;$/;"	m	class:OpenXcom::StoresState
_sortSize	Basescape/StoresState.h	/^	ArrowButton *_sortName, *_sortQuantity, *_sortSize, *_sortSpaceUsed;$/;"	m	class:OpenXcom::StoresState
_sortSpaceUsed	Basescape/StoresState.h	/^	ArrowButton *_sortName, *_sortQuantity, *_sortSize, *_sortSpaceUsed;$/;"	m	class:OpenXcom::StoresState
_sortable	Menu/ListGamesState.h	/^	bool _autoquick, _sortable;$/;"	m	class:OpenXcom::ListGamesState
_sortedCommendations	Basescape/SoldierDiaryPerformanceState.h	/^	std::vector<std::pair<std::string, SoldierCommendations*> > _sortedCommendations;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_sound	Engine/Sound.h	/^	UniqueSoundPtr _sound;$/;"	m	class:OpenXcom::Sound
_sound	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_sound	Mod/RuleInterface.h	/^	int _sound;$/;"	m	class:OpenXcom::RuleInterface
_soundDefs	Mod/Mod.h	/^	std::map<std::string, SoundDefinition *> _soundDefs;$/;"	m	class:OpenXcom::Mod
_soundList	Mod/SoundDefinition.h	/^	std::vector<int> _soundList;$/;"	m	class:OpenXcom::SoundDefinition
_soundOffsetBattle	Mod/Mod.h	/^	size_t _soundOffsetBattle = 0;$/;"	m	class:OpenXcom::Mod
_soundOffsetGeo	Mod/Mod.h	/^	size_t _soundOffsetGeo = 0;$/;"	m	class:OpenXcom::Mod
_soundPlayed	Engine/State.h	/^	bool _soundPlayed;$/;"	m	class:OpenXcom::State
_sounds	Engine/SoundSet.h	/^	std::map<int, Sound> _sounds;$/;"	m	class:OpenXcom::SoundSet
_sounds	Mod/ExtraSounds.h	/^	std::map<int, std::string> _sounds;$/;"	m	class:OpenXcom::ExtraSounds
_sounds	Mod/Mod.h	/^	std::map<std::string, SoundSet*> _sounds;$/;"	m	class:OpenXcom::Mod
_sourceSoldier	Basescape/SoldierTransformationState.h	/^	Soldier *_sourceSoldier;$/;"	m	class:OpenXcom::SoldierTransformationState
_space	Geoscape/AllocateTrainingState.h	/^	int _space;$/;"	m	class:OpenXcom::AllocateTrainingState
_space	Mod/RuleManufacture.h	/^	int _space, _time, _cost;$/;"	m	class:OpenXcom::RuleManufacture
_spaceChange	Basescape/SellState.h	/^	double _spaceChange;$/;"	m	class:OpenXcom::SellState
_spacecraft	Mod/RuleCraft.h	/^	bool _keepCraftAfterFailedMission, _allowLanding, _spacecraft, _notifyWhenRefueled, _autoPatrol, _undetectable;$/;"	m	class:OpenXcom::RuleCraft
_spawnCountdown	Savegame/AlienMission.h	/^	size_t _spawnCountdown;$/;"	m	class:OpenXcom::AlienMission
_spawnCountdown	Savegame/GeoscapeEvent.h	/^	size_t _spawnCountdown;$/;"	m	class:OpenXcom::GeoscapeEvent
_spawnUfo	Mod/RuleAlienMission.h	/^	std::string _spawnUfo;$/;"	m	class:OpenXcom::RuleAlienMission
_spawnUnit	Mod/RuleItem.h	/^	std::string _zombieUnit, _spawnUnit;$/;"	m	class:OpenXcom::RuleItem
_spawnUnit	Mod/Unit.h	/^	const Unit *_spawnUnit = nullptr;$/;"	m	class:OpenXcom::Unit
_spawnUnit	Savegame/BattleUnit.h	/^	const Unit *_spawnUnit = nullptr;$/;"	m	class:OpenXcom::BattleUnit
_spawnUnitFaction	Mod/RuleItem.h	/^	int _spawnUnitFaction;$/;"	m	class:OpenXcom::RuleItem
_spawnUnitFaction	Savegame/BattleUnit.h	/^	UnitFaction _spawnUnitFaction = FACTION_HOSTILE;$/;"	m	class:OpenXcom::BattleUnit
_spawnUnitName	Mod/Unit.h	/^	std::string _spawnUnitName;$/;"	m	class:OpenXcom::Unit
_spawnZone	Mod/RuleAlienMission.h	/^	int _spawnZone;$/;"	m	class:OpenXcom::RuleAlienMission
_spawnedEvent	Mod/RuleResearch.h	/^	std::string _name, _lookup, _cutscene, _spawnedItem, _spawnedEvent;$/;"	m	class:OpenXcom::RuleResearch
_spawnedItem	Mod/RuleResearch.h	/^	std::string _name, _lookup, _cutscene, _spawnedItem, _spawnedEvent;$/;"	m	class:OpenXcom::RuleResearch
_spawnedItemCount	Mod/RuleResearch.h	/^	int _spawnedItemCount;$/;"	m	class:OpenXcom::RuleResearch
_spawnedItemList	Mod/RuleResearch.h	/^	std::vector<std::string> _spawnedItemList;$/;"	m	class:OpenXcom::RuleResearch
_spawnedPersonName	Mod/RuleEvent.h	/^	std::string _spawnedPersonType, _spawnedPersonName;$/;"	m	class:OpenXcom::RuleEvent
_spawnedPersonName	Mod/RuleManufacture.h	/^	std::string _spawnedPersonType, _spawnedPersonName;$/;"	m	class:OpenXcom::RuleManufacture
_spawnedPersonName	Mod/Unit.h	/^	std::string _civilianRecoveryType, _spawnedPersonName, _liveAlienName;$/;"	m	class:OpenXcom::Unit
_spawnedPersonType	Mod/RuleEvent.h	/^	std::string _spawnedPersonType, _spawnedPersonName;$/;"	m	class:OpenXcom::RuleEvent
_spawnedPersonType	Mod/RuleManufacture.h	/^	std::string _spawnedPersonType, _spawnedPersonName;$/;"	m	class:OpenXcom::RuleManufacture
_spawnedPersons	Mod/RuleEvent.h	/^	int _spawnedPersons;$/;"	m	class:OpenXcom::RuleEvent
_spawnedSoldier	Mod/RuleEvent.h	/^	YAML::Node _spawnedSoldier;$/;"	m	class:OpenXcom::RuleEvent
_spawnedSoldier	Mod/RuleManufacture.h	/^	YAML::Node _spawnedSoldier;$/;"	m	class:OpenXcom::RuleManufacture
_spawnedSoldier	Mod/Unit.h	/^	YAML::Node _spawnedSoldier;$/;"	m	class:OpenXcom::Unit
_specWeapon	Mod/Armor.h	/^	const RuleItem* _specWeapon = nullptr;$/;"	m	class:OpenXcom::Armor
_specWeapon	Mod/RuleSoldier.h	/^	const RuleItem* _specWeapon;$/;"	m	class:OpenXcom::RuleSoldier
_specWeapon	Savegame/BattleUnit.h	/^	BattleItem* _specWeapon[SPEC_WEAPON_MAX];$/;"	m	class:OpenXcom::BattleUnit
_specWeaponName	Mod/Armor.h	/^	std::string _type, _spriteSheet, _spriteInv, _corpseGeoName, _storeItemName, _specWeaponName;$/;"	m	class:OpenXcom::Armor
_specWeaponName	Mod/RuleSoldier.h	/^	std::string _specWeaponName;$/;"	m	class:OpenXcom::RuleSoldier
_specab	Mod/Armor.h	/^	SpecialAbility _specab;$/;"	m	class:OpenXcom::Armor
_specab	Mod/Unit.h	/^	SpecialAbility _specab;$/;"	m	class:OpenXcom::Unit
_specab	Savegame/BattleUnit.h	/^	SpecialAbility _specab;$/;"	m	class:OpenXcom::BattleUnit
_specialChance	Mod/RuleItem.h	/^	int _clipSize, _specialChance, _tuLoad[AmmoSlotMax], _tuUnload[AmmoSlotMax];$/;"	m	class:OpenXcom::RuleItem
_specialIconSprite	Mod/RuleItem.h	/^	int _specialIconSprite;$/;"	m	class:OpenXcom::RuleItem
_specialType	Mod/MapData.h	/^	SpecialTileType _specialType;$/;"	m	class:OpenXcom::MapData
_specialType	Mod/RuleItem.h	/^	int _meleePower, _specialType, _vaporColor, _vaporDensity, _vaporProbability;$/;"	m	class:OpenXcom::RuleItem
_specialTypes	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_specialUseEmptyHand	Mod/RuleItem.h	/^	bool _isExplodingInHands, _specialUseEmptyHand, _specialUseEmptyHandShow;$/;"	m	class:OpenXcom::RuleItem
_specialUseEmptyHandShow	Mod/RuleItem.h	/^	bool _isExplodingInHands, _specialUseEmptyHand, _specialUseEmptyHandShow;$/;"	m	class:OpenXcom::RuleItem
_speed	Battlescape/Projectile.h	/^	int _speed;$/;"	m	class:OpenXcom::Projectile
_speed	Savegame/CraftWeaponProjectile.h	/^	int _speed;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_speed	Savegame/MovingTarget.h	/^	int _speed;$/;"	m	class:OpenXcom::MovingTarget
_speedLat	Savegame/MovingTarget.h	/^	double _speedLon, _speedLat, _speedRadian;$/;"	m	class:OpenXcom::MovingTarget
_speedLon	Savegame/MovingTarget.h	/^	double _speedLon, _speedLat, _speedRadian;$/;"	m	class:OpenXcom::MovingTarget
_speedMaxRadian	Savegame/Craft.h	/^	double _speedMaxRadian;$/;"	m	class:OpenXcom::Craft
_speedRadian	Savegame/MovingTarget.h	/^	double _speedLon, _speedLat, _speedRadian;$/;"	m	class:OpenXcom::MovingTarget
_spent	Savegame/ResearchProject.h	/^	int _spent;$/;"	m	class:OpenXcom::ResearchProject
_splashdownSurvivalChance	Mod/RuleUfo.h	/^	int _splashdownSurvivalChance;$/;"	m	class:OpenXcom::RuleUfo
_spotter	Mod/Unit.h	/^	int _intelligence, _aggression, _spotter, _sniper, _energyRecovery;$/;"	m	class:OpenXcom::Unit
_spottingEnemies	Battlescape/AIModule.h	/^	int _knownEnemies, _visibleEnemies, _spottingEnemies;$/;"	m	class:OpenXcom::AIModule
_sprayWaypoints	Mod/RuleItem.h	/^	int _sprayWaypoints;$/;"	m	class:OpenXcom::RuleItem
_sprite	Basescape/CraftInfoState.h	/^	InteractiveSurface *_sprite, *_weapon[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::CraftInfoState
_sprite	Geoscape/ConfirmLandingState.h	/^	Surface *_sprite;$/;"	m	class:OpenXcom::ConfirmLandingState
_sprite	Mod/MapData.h	/^	int _sprite[8];$/;"	m	class:OpenXcom::MapData
_sprite	Mod/RuleCommendations.h	/^	int _sprite;$/;"	m	class:OpenXcom::RuleCommendations
_sprite	Mod/RuleCraft.h	/^	int _sprite, _marker;$/;"	m	class:OpenXcom::RuleCraft
_sprite	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_sprite	Mod/RuleUfo.h	/^	int _sprite, _marker, _markerLand, _markerCrash;$/;"	m	class:OpenXcom::RuleUfo
_spriteFacility	Mod/RuleBaseFacility.h	/^	int _spriteShape, _spriteFacility;$/;"	m	class:OpenXcom::RuleBaseFacility
_spriteHeight	Battlescape/Camera.h	/^	int _spriteWidth, _spriteHeight;$/;"	m	class:OpenXcom::Camera
_spriteHeight	Battlescape/Map.h	/^	int _spriteWidth, _spriteHeight;$/;"	m	class:OpenXcom::Map
_spriteInv	Mod/Armor.h	/^	std::string _type, _spriteSheet, _spriteInv, _corpseGeoName, _storeItemName, _specWeaponName;$/;"	m	class:OpenXcom::Armor
_spriteShape	Mod/RuleBaseFacility.h	/^	int _spriteShape, _spriteFacility;$/;"	m	class:OpenXcom::RuleBaseFacility
_spriteSheet	Mod/Armor.h	/^	std::string _type, _spriteSheet, _spriteInv, _corpseGeoName, _storeItemName, _specWeaponName;$/;"	m	class:OpenXcom::Armor
_spriteWidth	Battlescape/Camera.h	/^	int _spriteWidth, _spriteHeight;$/;"	m	class:OpenXcom::Camera
_spriteWidth	Battlescape/Map.h	/^	int _spriteWidth, _spriteHeight;$/;"	m	class:OpenXcom::Map
_sprites	Mod/ExtraSprites.h	/^	std::map<int, std::string> _sprites;$/;"	m	class:OpenXcom::ExtraSprites
_ss	Savegame/HitLog.h	/^	std::ostringstream _ss;$/;"	m	class:OpenXcom::HitLog
_stackLevel	Battlescape/Inventory.h	/^	std::map<int, std::map<int, int> > _stackLevel;$/;"	m	class:OpenXcom::Inventory
_stackNumber	Battlescape/Inventory.h	/^	NumberText *_stackNumber;$/;"	m	class:OpenXcom::Inventory
_standHeight	Mod/Armor.h	/^	int _standHeight, _kneelHeight, _floatHeight;$/;"	m	class:OpenXcom::Armor
_standHeight	Mod/RuleSoldier.h	/^	int _standHeight, _kneelHeight, _floatHeight;$/;"	m	class:OpenXcom::RuleSoldier
_standHeight	Mod/Unit.h	/^	int _standHeight, _kneelHeight, _floatHeight;$/;"	m	class:OpenXcom::Unit
_standHeight	Savegame/BattleUnit.h	/^	int _standHeight, _kneelHeight, _floatHeight;$/;"	m	class:OpenXcom::BattleUnit
_start	Engine/Timer.h	/^	Uint32 _start;$/;"	m	class:OpenXcom::Timer
_startDogfightSound	Mod/Mod.h	/^	std::vector<int> _selectBaseSound, _startDogfightSound;$/;"	m	class:OpenXcom::Mod
_startFrame	Battlescape/Explosion.h	/^	int _currentFrame, _startFrame, _frameDelay;$/;"	m	class:OpenXcom::Explosion
_startFrom	Mod/RuleManufactureShortcut.h	/^	std::string _name, _startFrom;$/;"	m	class:OpenXcom::RuleManufactureShortcut
_startMonth	Savegame/AlienBase.h	/^	int _startMonth;$/;"	m	class:OpenXcom::AlienBase
_startMovingSound	Mod/Mod.h	/^	std::map<std::string, std::vector<int> > _selectUnitSound, _startMovingSound, _selectWeaponSound, _annoyedSound;$/;"	m	class:OpenXcom::Mod
_startMovingSound	Mod/Unit.h	/^	std::vector<int> _selectUnitSound, _startMovingSound, _selectWeaponSound, _annoyedSound;$/;"	m	class:OpenXcom::Unit
_startMovingSound	Savegame/BattleUnit.h	/^	std::vector<int> _selectUnitSound, _startMovingSound, _selectWeaponSound, _annoyedSound;$/;"	m	class:OpenXcom::BattleUnit
_startMovingSoundFemale	Mod/Armor.h	/^	std::vector<int> _startMovingSoundMale, _startMovingSoundFemale;$/;"	m	class:OpenXcom::Armor
_startMovingSoundFemale	Mod/RuleSoldier.h	/^	std::vector<int> _startMovingSoundMale, _startMovingSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_startMovingSoundMale	Mod/Armor.h	/^	std::vector<int> _startMovingSoundMale, _startMovingSoundFemale;$/;"	m	class:OpenXcom::Armor
_startMovingSoundMale	Mod/RuleSoldier.h	/^	std::vector<int> _startMovingSoundMale, _startMovingSoundFemale;$/;"	m	class:OpenXcom::RuleSoldier
_startingBaseBeginner	Mod/Mod.h	/^	YAML::Node _startingBaseDefault, _startingBaseBeginner, _startingBaseExperienced, _startingBaseVeteran, _startingBaseGenius, _startingBaseSuperhuman;$/;"	m	class:OpenXcom::Mod
_startingBaseDefault	Mod/Mod.h	/^	YAML::Node _startingBaseDefault, _startingBaseBeginner, _startingBaseExperienced, _startingBaseVeteran, _startingBaseGenius, _startingBaseSuperhuman;$/;"	m	class:OpenXcom::Mod
_startingBaseExperienced	Mod/Mod.h	/^	YAML::Node _startingBaseDefault, _startingBaseBeginner, _startingBaseExperienced, _startingBaseVeteran, _startingBaseGenius, _startingBaseSuperhuman;$/;"	m	class:OpenXcom::Mod
_startingBaseGenius	Mod/Mod.h	/^	YAML::Node _startingBaseDefault, _startingBaseBeginner, _startingBaseExperienced, _startingBaseVeteran, _startingBaseGenius, _startingBaseSuperhuman;$/;"	m	class:OpenXcom::Mod
_startingBaseSuperhuman	Mod/Mod.h	/^	YAML::Node _startingBaseDefault, _startingBaseBeginner, _startingBaseExperienced, _startingBaseVeteran, _startingBaseGenius, _startingBaseSuperhuman;$/;"	m	class:OpenXcom::Mod
_startingBaseVeteran	Mod/Mod.h	/^	YAML::Node _startingBaseDefault, _startingBaseBeginner, _startingBaseExperienced, _startingBaseVeteran, _startingBaseGenius, _startingBaseSuperhuman;$/;"	m	class:OpenXcom::Mod
_startingCondition	Mod/AlienDeployment.h	/^	std::string _enviroEffects, _startingCondition;$/;"	m	class:OpenXcom::AlienDeployment
_startingCondition	Mod/Texture.h	/^	std::string _startingCondition;$/;"	m	class:OpenXcom::Texture
_startingCondition	Savegame/SavedBattleGame.h	/^	const RuleStartingCondition *_startingCondition;$/;"	m	class:OpenXcom::SavedBattleGame
_startingConditions	Mod/Mod.h	/^	std::map<std::string, RuleStartingCondition*> _startingConditions;$/;"	m	class:OpenXcom::Mod
_startingConditionsIndex	Mod/Mod.h	/^	std::vector<std::string> _aliensIndex, _enviroEffectsIndex, _startingConditionsIndex, _deploymentsIndex, _armorsIndex, _ufopaediaIndex, _ufopaediaCatIndex, _researchIndex, _manufactureIndex;$/;"	m	class:OpenXcom::Mod
_startingDifficulty	Mod/Mod.h	/^	int _startingDifficulty;$/;"	m	class:OpenXcom::Mod
_startingTime	Mod/Mod.h	/^	GameTime _startingTime;$/;"	m	class:OpenXcom::Mod
_statAdjustment	Mod/Mod.h	/^	std::vector<StatAdjustment> _statAdjustment;$/;"	m	class:OpenXcom::Mod
_statCaps	Mod/RuleSoldier.h	/^	UnitStats _minStats, _maxStats, _statCaps, _trainingStatCaps, _dogfightExperience;$/;"	m	class:OpenXcom::RuleSoldier
_statGainTotal	Savegame/SoldierDiary.h	/^		_woundsHealedTotal, _allUFOs, _allMissionTypes, _statGainTotal, _revivedUnitTotal, _wholeMedikitTotal, _braveryGainTotal, _bestOfRank, _MIA,$/;"	m	class:OpenXcom::SoldierDiary
_statString	Savegame/Soldier.h	/^	std::string _statString;$/;"	m	class:OpenXcom::Soldier
_statStrings	Mod/Mod.h	/^	std::vector<StatString*> _statStrings;$/;"	m	class:OpenXcom::Mod
_statStrings	Mod/RuleSoldier.h	/^	std::vector<StatString*> _statStrings;$/;"	m	class:OpenXcom::RuleSoldier
_state	Basescape/BaseInfoState.h	/^	BasescapeState *_state;$/;"	m	class:OpenXcom::BaseInfoState
_state	Basescape/BuildFacilitiesState.h	/^	State *_state;$/;"	m	class:OpenXcom::BuildFacilitiesState
_state	Basescape/TransferConfirmState.h	/^	TransferItemsState *_state;$/;"	m	class:OpenXcom::TransferConfirmState
_state	Battlescape/AbortMissionState.h	/^	BattlescapeState *_state;$/;"	m	class:OpenXcom::AbortMissionState
_state	Battlescape/NextTurnState.h	/^	BattlescapeState *_state;$/;"	m	class:OpenXcom::NextTurnState
_state	Engine/Timer.h	/^	StateHandler _state;$/;"	m	class:OpenXcom::Timer
_state	Geoscape/AlienBaseState.h	/^	GeoscapeState *_state;$/;"	m	class:OpenXcom::AlienBaseState
_state	Geoscape/BaseDefenseState.h	/^	GeoscapeState *_state;$/;"	m	class:OpenXcom::BaseDefenseState
_state	Geoscape/CraftErrorState.h	/^	GeoscapeState *_state;$/;"	m	class:OpenXcom::CraftErrorState
_state	Geoscape/DogfightState.h	/^	GeoscapeState *_state;$/;"	m	class:OpenXcom::DogfightState
_state	Geoscape/ItemsArrivingState.h	/^	GeoscapeState *_state;$/;"	m	class:OpenXcom::ItemsArrivingState
_state	Geoscape/LowFuelState.h	/^	GeoscapeState *_state;$/;"	m	class:OpenXcom::LowFuelState
_state	Geoscape/MissionDetectedState.h	/^	GeoscapeState *_state;$/;"	m	class:OpenXcom::MissionDetectedState
_state	Geoscape/MultipleTargetsState.h	/^	GeoscapeState *_state;$/;"	m	class:OpenXcom::MultipleTargetsState
_state	Geoscape/ProductionCompleteState.h	/^	GeoscapeState *_state;$/;"	m	class:OpenXcom::ProductionCompleteState
_state	Geoscape/UfoDetectedState.h	/^	GeoscapeState *_state;$/;"	m	class:OpenXcom::UfoDetectedState
_state	Geoscape/UfoTrackerState.h	/^	GeoscapeState *_state;$/;"	m	class:OpenXcom::UfoTrackerState
_state	Interface/ComboBox.h	/^	State *_state;$/;"	m	class:OpenXcom::ComboBox
_state	Interface/TextEdit.h	/^	State *_state;$/;"	m	class:OpenXcom::TextEdit
_state	Interface/Window.h	/^	State *_state;$/;"	m	class:OpenXcom::Window
_state	Menu/ModConfirmExtendedState.h	/^		ModListState *_state;$/;"	m	class:OpenXcom::ModConfirmExtendedState
_state	Menu/OptionsDefaultsState.h	/^	OptionsBaseState *_state;$/;"	m	class:OpenXcom::OptionsDefaultsState
_state	Savegame/CraftWeaponProjectile.h	/^	int _state;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_state	Ufopaedia/ArticleState.h	/^		std::shared_ptr<ArticleCommonState> _state;$/;"	m	class:OpenXcom::ArticleState
_state	Ufopaedia/StatsForNerdsState.h	/^	std::shared_ptr<ArticleCommonState> _state;$/;"	m	class:OpenXcom::StatsForNerdsState
_statePalette	Mod/Mod.h	/^	const SDL_Color *_statePalette;$/;"	m	class:OpenXcom::Mod
_states	Battlescape/BattlescapeGame.h	/^	std::list<BattleState*> _states, _deleted;$/;"	m	class:OpenXcom::BattlescapeGame
_states	Engine/Game.h	/^	std::list<State*> _states, _deleted;$/;"	m	class:OpenXcom::Game
_statisticalBulletConservation	Mod/Mod.h	/^	bool _giveScoreAlsoForResearchedArtifacts, _statisticalBulletConservation, _stunningImprovesMorale;$/;"	m	class:OpenXcom::Mod
_statisticalBulletSaving	Mod/RuleCraftWeapon.h	/^	bool _statisticalBulletSaving;$/;"	m	class:OpenXcom::RuleCraftWeapon
_statistics	Savegame/BattleUnit.h	/^	BattleUnitStatistics* _statistics;$/;"	m	class:OpenXcom::BattleUnit
_stats	Battlescape/DebriefingState.h	/^	std::vector<DebriefingStat*> _stats;$/;"	m	class:OpenXcom::DebriefingState
_stats	Mod/Armor.h	/^	UnitStats _stats;$/;"	m	class:OpenXcom::Armor
_stats	Mod/RuleCraft.h	/^	RuleCraftStats _stats;$/;"	m	class:OpenXcom::RuleCraft
_stats	Mod/RuleCraftWeapon.h	/^	RuleCraftStats _stats;$/;"	m	class:OpenXcom::RuleCraftWeapon
_stats	Mod/RuleSoldierBonus.h	/^	UnitStats _stats;$/;"	m	class:OpenXcom::RuleSoldierBonus
_stats	Mod/RuleUfo.h	/^	RuleUfoStats _stats;$/;"	m	class:OpenXcom::RuleUfo
_stats	Mod/Unit.h	/^	UnitStats _stats;$/;"	m	class:OpenXcom::Unit
_stats	Savegame/BattleUnit.h	/^	UnitStats _stats;$/;"	m	class:OpenXcom::BattleUnit
_stats	Savegame/Craft.h	/^	RuleCraftStats _stats;$/;"	m	class:OpenXcom::Craft
_stats	Savegame/Ufo.h	/^	RuleUfoStats _stats;$/;"	m	class:OpenXcom::Ufo
_statsRaceBonus	Mod/RuleUfo.h	/^	std::map<std::string, RuleUfoStats> _statsRaceBonus;$/;"	m	class:OpenXcom::RuleUfo
_status	Savegame/BattleUnit.h	/^	UnitStatus _status;$/;"	m	class:OpenXcom::BattleUnit
_status	Savegame/Craft.h	/^	std::string _status;$/;"	m	class:OpenXcom::Craft
_status	Savegame/Ufo.h	/^	enum UfoStatus _status;$/;"	m	class:OpenXcom::Ufo	typeref:enum:OpenXcom::Ufo::UfoStatus
_stimulant	Mod/RuleItem.h	/^	int _painKiller, _heal, _stimulant;$/;"	m	class:OpenXcom::RuleItem
_stimulant	Savegame/BattleItem.h	/^	int _painKiller, _heal, _stimulant;$/;"	m	class:OpenXcom::BattleItem
_stimulantButton	Battlescape/MedikitState.h	/^	InteractiveSurface *_endButton, *_stimulantButton, *_pkButton, *_healButton;$/;"	m	class:OpenXcom::MedikitState
_stimulantTxt	Battlescape/MedikitState.h	/^	Text *_pkText, *_stimulantTxt,  *_healTxt, *_partTxt, *_woundTxt;$/;"	m	class:OpenXcom::MedikitState
_stopLOS	Mod/MapData.h	/^	bool _isUfoDoor, _stopLOS, _isNoFloor, _isGravLift, _isDoor, _blockFire, _blockSmoke, _baseModule;$/;"	m	class:OpenXcom::MapData
_stopLOSses	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, bool> > _noFloors, _stopLOSses;$/;"	m	class:OpenXcom::MCDPatch
_storage	Mod/RuleBaseFacility.h	/^	int _storage, _personnel, _aliens, _crafts, _labs, _workshops, _psiLabs;$/;"	m	class:OpenXcom::RuleBaseFacility
_storageSpace	Savegame/SavedBattleGame.h	/^	std::vector<Position> _tileSearch, _storageSpace;$/;"	m	class:OpenXcom::SavedBattleGame
_storageTiles	Mod/RuleBaseFacility.h	/^	std::vector<Position> _storageTiles;$/;"	m	class:OpenXcom::RuleBaseFacility
_storeItem	Mod/Armor.h	/^	const RuleItem* _storeItem = nullptr;$/;"	m	class:OpenXcom::Armor
_storeItemName	Mod/Armor.h	/^	std::string _type, _spriteSheet, _spriteInv, _corpseGeoName, _storeItemName, _specWeaponName;$/;"	m	class:OpenXcom::Armor
_strCraftOrBase	Savegame/SavedBattleGame.h	/^	std::string _missionType, _strTarget, _strCraftOrBase, _alienCustomDeploy, _alienCustomMission;$/;"	m	class:OpenXcom::SavedBattleGame
_strTarget	Savegame/SavedBattleGame.h	/^	std::string _missionType, _strTarget, _strCraftOrBase, _alienCustomDeploy, _alienCustomMission;$/;"	m	class:OpenXcom::SavedBattleGame
_strafeMove	Battlescape/Pathfinding.h	/^	bool _strafeMove;$/;"	m	class:OpenXcom::Pathfinding
_stringToBeAddedIfAllConditionsAreMet	Mod/StatString.h	/^	std::string _stringToBeAddedIfAllConditionsAreMet;$/;"	m	class:OpenXcom::StatString
_strings	Engine/Language.h	/^	std::map<std::string, LocalizedText> _strings;$/;"	m	class:OpenXcom::Language
_strings	Mod/ExtraStrings.h	/^	std::map<std::string, std::string> _strings;$/;"	m	class:OpenXcom::ExtraStrings
_stunIndicator	Battlescape/Inventory.h	/^	Surface *_stunIndicator, *_woundIndicator, *_burnIndicator, *_shockIndicator;$/;"	m	class:OpenXcom::Inventory
_stunIndicator	Battlescape/Map.h	/^	Surface *_stunIndicator, *_woundIndicator, *_burnIndicator, *_shockIndicator;$/;"	m	class:OpenXcom::Map
_stunRecovery	Mod/Armor.h	/^	RuleStatBonus _timeRecovery, _energyRecovery, _moraleRecovery, _healthRecovery, _stunRecovery, _manaRecovery;$/;"	m	class:OpenXcom::Armor
_stunRecovery	Mod/RuleItem.h	/^	int _woundRecovery, _healthRecovery, _stunRecovery, _energyRecovery, _manaRecovery, _moraleRecovery, _painKillerRecovery;$/;"	m	class:OpenXcom::RuleItem
_stunRecovery	Mod/RuleSoldierBonus.h	/^	RuleStatBonus _timeRecovery, _energyRecovery, _moraleRecovery, _healthRecovery, _stunRecovery, _manaRecovery;$/;"	m	class:OpenXcom::RuleSoldierBonus
_stunlevel	Savegame/BattleUnit.h	/^	int _tu, _energy, _health, _morale, _stunlevel, _mana;$/;"	m	class:OpenXcom::BattleUnit
_stunningImprovesMorale	Mod/Mod.h	/^	bool _giveScoreAlsoForResearchedArtifacts, _statisticalBulletConservation, _stunningImprovesMorale;$/;"	m	class:OpenXcom::Mod
_stuns	Savegame/Soldier.h	/^	int _missions, _kills, _stuns;$/;"	m	class:OpenXcom::Soldier
_subX	Mod/ExtraSprites.h	/^	int _subX, _subY;$/;"	m	class:OpenXcom::ExtraSprites
_subY	Mod/ExtraSprites.h	/^	int _subX, _subY;$/;"	m	class:OpenXcom::ExtraSprites
_successEvents	Mod/AlienDeployment.h	/^	WeightedOptions _genMission, _successEvents, _failureEvents, _despawnEvents;$/;"	m	class:OpenXcom::AlienDeployment
_summonedPlayerUnit	Savegame/BattleUnit.h	/^	bool _summonedPlayerUnit, _resummonedFakeCivilian;$/;"	m	class:OpenXcom::BattleUnit
_supportedInventorySections	Mod/RuleItem.h	/^	std::vector<const RuleInventory*> _supportedInventorySections;$/;"	m	class:OpenXcom::RuleItem
_supportedInventorySectionsNames	Mod/RuleItem.h	/^	std::vector<std::string> _supportedInventorySectionsNames;$/;"	m	class:OpenXcom::RuleItem
_surface	Engine/Screen.h	/^	Surface::UniqueSurfacePtr _surface;$/;"	m	class:OpenXcom::Screen
_surface	Engine/Surface.h	/^	UniqueSurfacePtr _surface;$/;"	m	class:OpenXcom::Surface
_surface	Engine/Surface.h	/^	const Surface* _surface;$/;"	m	class:OpenXcom::SurfaceCrop
_surface	Engine/Timer.h	/^	SurfaceHandler _surface;$/;"	m	class:OpenXcom::Timer
_surfaceBackup	Menu/NewBattleState.h	/^	std::map<Surface*, bool> _surfaceBackup;$/;"	m	class:OpenXcom::NewBattleState
_surfaceEngineers	Basescape/ManufactureInfoState.h	/^	InteractiveSurface *_surfaceEngineers, *_surfaceUnits;$/;"	m	class:OpenXcom::ManufactureInfoState
_surfaceOffsetBasebits	Mod/Mod.h	/^	size_t _surfaceOffsetBasebits = 0;$/;"	m	class:OpenXcom::Mod
_surfaceOffsetBigobs	Mod/Mod.h	/^	size_t _surfaceOffsetBigobs = 0;$/;"	m	class:OpenXcom::Mod
_surfaceOffsetFloorob	Mod/Mod.h	/^	size_t _surfaceOffsetFloorob = 0;$/;"	m	class:OpenXcom::Mod
_surfaceOffsetHandob	Mod/Mod.h	/^	size_t _surfaceOffsetHandob = 0;$/;"	m	class:OpenXcom::Mod
_surfaceOffsetHit	Mod/Mod.h	/^	size_t _surfaceOffsetHit = 0;$/;"	m	class:OpenXcom::Mod
_surfaceOffsetSmoke	Mod/Mod.h	/^	size_t _surfaceOffsetSmoke = 0;$/;"	m	class:OpenXcom::Mod
_surfaceScientists	Basescape/ResearchInfoState.h	/^	InteractiveSurface *_surfaceScientists;$/;"	m	class:OpenXcom::ResearchInfoState
_surfaceSet	Mod/MapDataSet.h	/^	SurfaceSet *_surfaceSet;$/;"	m	class:OpenXcom::MapDataSet
_surfaceUnits	Basescape/ManufactureInfoState.h	/^	InteractiveSurface *_surfaceEngineers, *_surfaceUnits;$/;"	m	class:OpenXcom::ManufactureInfoState
_surfaceX	Engine/Action.h	/^	int _topBlackBand, _leftBlackBand, _mouseX, _mouseY, _surfaceX, _surfaceY;$/;"	m	class:OpenXcom::Action
_surfaceY	Engine/Action.h	/^	int _topBlackBand, _leftBlackBand, _mouseX, _mouseY, _surfaceX, _surfaceY;$/;"	m	class:OpenXcom::Action
_surfaces	Engine/State.h	/^	std::vector<Surface*> _surfaces;$/;"	m	class:OpenXcom::State
_surfaces	Mod/Mod.h	/^	std::map<std::string, Surface*> _surfaces;$/;"	m	class:OpenXcom::Mod
_surrenderMode	Mod/Mod.h	/^	int _surrenderMode;$/;"	m	class:OpenXcom::Mod
_takeoff	Savegame/Craft.h	/^	int _fuel, _damage, _shield, _interceptionOrder, _takeoff;$/;"	m	class:OpenXcom::Craft
_takeoffSound	Mod/RuleCraft.h	/^	std::vector<int> _selectSound, _takeoffSound;$/;"	m	class:OpenXcom::RuleCraft
_target	Battlescape/MeleeAttackBState.h	/^	BattleUnit *_unit, *_target;$/;"	m	class:OpenXcom::MeleeAttackBState
_target	Battlescape/PsiAttackBState.h	/^	BattleUnit *_unit, *_target;$/;"	m	class:OpenXcom::PsiAttackBState
_target	Battlescape/UnitWalkBState.h	/^	Position _target;$/;"	m	class:OpenXcom::UnitWalkBState
_target	Geoscape/ConfirmDestinationState.h	/^	Target *_target;$/;"	m	class:OpenXcom::ConfirmDestinationState
_target	Geoscape/InterceptState.h	/^	Target *_target;$/;"	m	class:OpenXcom::InterceptState
_target	Geoscape/TargetInfoState.h	/^	Target *_target;$/;"	m	class:OpenXcom::TargetInfoState
_target	Mod/CustomPalettes.h	/^	std::string _type, _target, _file;$/;"	m	class:OpenXcom::CustomPalettes
_targetBaseOdds	Mod/RuleAlienMission.h	/^	int _targetBaseOdds;$/;"	m	class:OpenXcom::RuleAlienMission
_targetBaseOdds	Mod/RuleMissionScript.h	/^	int _firstMonth, _lastMonth, _label, _executionOdds, _targetBaseOdds, _minDifficulty, _maxRuns, _avoidRepeats, _delay, _randomDelay;$/;"	m	class:OpenXcom::RuleMissionScript
_targetDat	Savegame/SaveConverter.h	/^	std::vector<int> _targetDat;$/;"	m	class:OpenXcom::SaveConverter
_targetDist	Geoscape/DogfightState.h	/^	int _timeout, _currentDist, _targetDist, _weaponFireInterval[RuleCraft::WeaponMax], _weaponFireCountdown[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_targetFaction	Battlescape/AIModule.h	/^	UnitFaction _targetFaction;$/;"	m	class:OpenXcom::AIModule
_targetFloor	Battlescape/ProjectileFlyBState.h	/^	bool _initialized, _targetFloor;$/;"	m	class:OpenXcom::ProjectileFlyBState
_targetMatrix	Mod/RuleItem.h	/^	int _targetMatrix;$/;"	m	class:OpenXcom::RuleItem
_targetMode	Mod/RuleSkill.h	/^	BattleActionType _targetMode;$/;"	m	class:OpenXcom::RuleSkill
_targetPsiOrHit	Battlescape/ExplosionBState.h	/^	BattleUnit *_targetPsiOrHit;$/;"	m	class:OpenXcom::ExplosionBState
_targetUnit	Battlescape/MedikitState.h	/^	BattleUnit *_targetUnit;$/;"	m	class:OpenXcom::MedikitState
_targetVoxel	Battlescape/Projectile.h	/^	Position _origin, _targetVoxel;$/;"	m	class:OpenXcom::Projectile
_targetVoxel	Battlescape/ProjectileFlyBState.h	/^	Position _origin, _targetVoxel, _originVoxel;$/;"	m	class:OpenXcom::ProjectileFlyBState
_targets	Geoscape/MultipleTargetsState.h	/^	std::vector<Target*> _targets;$/;"	m	class:OpenXcom::MultipleTargetsState
_targets	Savegame/SaveConverter.h	/^	std::vector<Target*> _targets;$/;"	m	class:OpenXcom::SaveConverter
_tempInventoryTemplate	Battlescape/InventoryState.h	/^	std::vector<EquipmentLayoutItem*> _curInventoryTemplate, _tempInventoryTemplate;$/;"	m	class:OpenXcom::InventoryState
_tempSoldierItems	Savegame/Craft.h	/^	ItemContainer *_tempSoldierItems;$/;"	m	class:OpenXcom::Craft
_templateBtnX	Battlescape/InventoryState.cpp	/^static const int _templateBtnX = 288;$/;"	m	namespace:OpenXcom	file:
_terrain	Battlescape/BattlescapeGenerator.h	/^	RuleTerrain *_terrain, *_baseTerrain, *_globeTerrain, *_alternateTerrain;$/;"	m	class:OpenXcom::BattlescapeGenerator
_terrain	Battlescape/UnitFallBState.h	/^	TileEngine *_terrain;$/;"	m	class:OpenXcom::UnitFallBState
_terrain	Battlescape/UnitWalkBState.h	/^	TileEngine *_terrain;$/;"	m	class:OpenXcom::UnitWalkBState
_terrain	Mod/Texture.h	/^	std::vector<TerrainCriteria> _terrain;$/;"	m	class:OpenXcom::Texture
_terrainHeight	Mod/MCDPatch.h	/^	std::vector<std::pair<size_t, int> > _bigWalls, _TUWalks, _TUFlys, _TUSlides, _deathTiles, _terrainHeight, _specialTypes, _armors, _explosives, _flammabilities, _fuels, _HEBlocks, _footstepSounds, _objectTypes;$/;"	m	class:OpenXcom::MCDPatch
_terrainIndex	Mod/Mod.h	/^	std::vector<std::string> _alienMissionsIndex, _terrainIndex, _customPalettesIndex, _arcScriptIndex, _eventScriptIndex, _eventIndex, _missionScriptIndex;$/;"	m	class:OpenXcom::Mod
_terrainLevel	Mod/MapData.h	/^	int _yOffset, _TUWalk, _TUFly, _TUSlide, _terrainLevel, _footstepSound, _dieMCD, _altMCD;$/;"	m	class:OpenXcom::MapData
_terrainMeleeTilePart	Battlescape/ExplosionBState.h	/^	int _terrainMeleeTilePart;$/;"	m	class:OpenXcom::ExplosionBState
_terrainTypes	Menu/NewBattleState.h	/^	std::vector<std::string> _missionTypes, _terrainTypes, _alienRaces, _crafts;$/;"	m	class:OpenXcom::NewBattleState
_terrains	Mod/AlienDeployment.h	/^	std::vector<std::string> _terrains, _music;$/;"	m	class:OpenXcom::AlienDeployment
_terrains	Mod/Mod.h	/^	std::map<std::string, RuleTerrain*> _terrains;$/;"	m	class:OpenXcom::Mod
_testCases	Menu/TestState.h	/^	std::vector<std::string> _testCases;$/;"	m	class:OpenXcom::TestState
_text	Battlescape/BattlescapeMessage.h	/^	Text *_text;$/;"	m	class:OpenXcom::BattlescapeMessage
_text	Battlescape/InfoboxState.h	/^	Text *_text;$/;"	m	class:OpenXcom::InfoboxState
_text	Battlescape/WarningMessage.h	/^	Text *_text;$/;"	m	class:OpenXcom::WarningMessage
_text	Engine/LocalizedText.h	/^	std::string _text; \/\/\/< The actual localized text.$/;"	m	class:OpenXcom::LocalizedText
_text	Interface/FpsCounter.h	/^	NumberText *_text;$/;"	m	class:OpenXcom::FpsCounter
_text	Interface/Text.h	/^	std::string _text;$/;"	m	class:OpenXcom::Text
_text	Interface/TextButton.h	/^	Text *_text;$/;"	m	class:OpenXcom::TextButton
_text	Interface/TextEdit.h	/^	Text *_text, *_caret;$/;"	m	class:OpenXcom::TextEdit
_text	Menu/StartState.h	/^	Text *_text, *_cursor;$/;"	m	class:OpenXcom::StartState
_textColor	Ufopaedia/ArticleStateArmor.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2;$/;"	m	class:OpenXcom::ArticleStateArmor
_textColor	Ufopaedia/ArticleStateCraftWeapon.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2;$/;"	m	class:OpenXcom::ArticleStateCraftWeapon
_textColor	Ufopaedia/ArticleStateItem.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateItem
_textColor	Ufopaedia/ArticleStateTFTD.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateTFTD
_textColor1	Ufopaedia/ArticleStateText.h	/^		Uint8 _buttonColor, _titleColor, _textColor1, _textColor2;$/;"	m	class:OpenXcom::ArticleStateText
_textColor1	Ufopaedia/ArticleStateTextImage.h	/^		Uint8 _buttonColor, _titleColor, _textColor1, _textColor2;$/;"	m	class:OpenXcom::ArticleStateTextImage
_textColor2	Ufopaedia/ArticleStateArmor.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2;$/;"	m	class:OpenXcom::ArticleStateArmor
_textColor2	Ufopaedia/ArticleStateCraftWeapon.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2;$/;"	m	class:OpenXcom::ArticleStateCraftWeapon
_textColor2	Ufopaedia/ArticleStateItem.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateItem
_textColor2	Ufopaedia/ArticleStateTFTD.h	/^		Uint8 _buttonColor, _textColor, _textColor2, _listColor1, _listColor2, _ammoColor, _arrowColor;$/;"	m	class:OpenXcom::ArticleStateTFTD
_textColor2	Ufopaedia/ArticleStateText.h	/^		Uint8 _buttonColor, _titleColor, _textColor1, _textColor2;$/;"	m	class:OpenXcom::ArticleStateText
_textColor2	Ufopaedia/ArticleStateTextImage.h	/^		Uint8 _buttonColor, _titleColor, _textColor1, _textColor2;$/;"	m	class:OpenXcom::ArticleStateTextImage
_textEditConstraint	Interface/TextEdit.h	/^	TextEditConstraint _textEditConstraint;$/;"	m	class:OpenXcom::TextEdit
_textness	Interface/Slider.h	/^	int _thickness, _textness, _minX, _maxX, _offsetX;$/;"	m	class:OpenXcom::Slider
_texts	Interface/TextList.h	/^	std::vector< std::vector<Text*> > _texts;$/;"	m	class:OpenXcom::TextList
_texture	Basescape/BaseView.h	/^	SurfaceSet *_texture;$/;"	m	class:OpenXcom::BaseView
_texture	Basescape/MiniBaseView.h	/^	SurfaceSet *_texture;$/;"	m	class:OpenXcom::MiniBaseView
_texture	Geoscape/Globe.h	/^	SurfaceSet *_texture, *_markerSet;$/;"	m	class:OpenXcom::Globe
_texture	Mod/Polygon.h	/^	int _points, _texture;$/;"	m	class:OpenXcom::Polygon
_texture	Savegame/MissionSite.h	/^	int _texture;$/;"	m	class:OpenXcom::MissionSite
_textures	Mod/RuleGlobe.h	/^	std::map<int, Texture*> _textures;$/;"	m	class:OpenXcom::RuleGlobe
_tftdIsInstalled	Engine/Options.cpp	/^static bool _tftdIsInstalled()$/;"	f	namespace:OpenXcom::Options
_tftdMode	Engine/InteractiveSurface.h	/^	bool _isHovered, _isFocused, _listButton, _tftdMode;$/;"	m	class:OpenXcom::InteractiveSurface
_thickness	Interface/Frame.h	/^	int _thickness;$/;"	m	class:OpenXcom::Frame
_thickness	Interface/Slider.h	/^	int _thickness, _textness, _minX, _maxX, _offsetX;$/;"	m	class:OpenXcom::Slider
_thinBorder	Interface/Window.h	/^	bool _contrast, _screen, _thinBorder;$/;"	m	class:OpenXcom::Window
_thinkcycles	Geoscape/BaseDefenseState.h	/^	int _thinkcycles, _row, _passes, _gravShields, _defenses, _attacks, _explosionCount;$/;"	m	class:OpenXcom::BaseDefenseState
_thread	Menu/StartState.h	/^	SDL_Thread *_thread;$/;"	m	class:OpenXcom::StartState
_threeButtons	Basescape/ManageAlienContainmentState.h	/^	bool _doNotReset, _threeButtons;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_throwMulti	Mod/RuleItem.h	/^	RuleStatBonus _damageBonus, _meleeBonus, _accuracyMulti, _meleeMulti, _throwMulti, _closeQuartersMulti;$/;"	m	class:OpenXcom::RuleItem
_throwRange	Mod/RuleItem.h	/^	int _throwRange, _underwaterThrowRange;$/;"	m	class:OpenXcom::RuleItem
_thumb	Interface/ScrollBar.h	/^	Surface *_track, *_thumb;$/;"	m	class:OpenXcom::ScrollBar
_thumbRect	Interface/ScrollBar.h	/^	SDL_Rect _thumbRect;$/;"	m	class:OpenXcom::ScrollBar
_tile	Battlescape/ExplosionBState.h	/^	Tile *_tile;$/;"	m	class:OpenXcom::ExplosionBState
_tile	Savegame/BattleItem.h	/^	Tile *_tile;$/;"	m	class:OpenXcom::BattleItem
_tile	Savegame/BattleUnit.h	/^	Tile *_tile;$/;"	m	class:OpenXcom::BattleUnit
_tileEngine	Battlescape/MedikitState.h	/^	TileEngine *_tileEngine;$/;"	m	class:OpenXcom::MedikitState
_tileEngine	Savegame/SavedBattleGame.h	/^	TileEngine *_tileEngine;$/;"	m	class:OpenXcom::SavedBattleGame
_tileSearch	Savegame/SavedBattleGame.h	/^	std::vector<Position> _tileSearch, _storageSpace;$/;"	m	class:OpenXcom::SavedBattleGame
_tiles	Savegame/SavedBattleGame.h	/^	std::vector<Tile> _tiles;$/;"	m	class:OpenXcom::SavedBattleGame
_time	Mod/RuleManufacture.h	/^	int _space, _time, _cost;$/;"	m	class:OpenXcom::RuleManufacture
_time	Savegame/SavedGame.h	/^	GameTime *_time;$/;"	m	class:OpenXcom::SavedGame
_time	Savegame/SoldierDeath.h	/^	GameTime _time;$/;"	m	class:OpenXcom::SoldierDeath
_timeOfLastFrame	Engine/Game.h	/^	unsigned int _timeOfLastFrame;$/;"	m	class:OpenXcom::Game
_timePersonnel	Mod/Mod.h	/^	int _costEngineer, _costScientist, _timePersonnel, _hireByCountryOdds, _hireByRegionOdds, _initialFunding;$/;"	m	class:OpenXcom::Mod
_timeRecovery	Mod/Armor.h	/^	RuleStatBonus _timeRecovery, _energyRecovery, _moraleRecovery, _healthRecovery, _stunRecovery, _manaRecovery;$/;"	m	class:OpenXcom::Armor
_timeRecovery	Mod/RuleSoldierBonus.h	/^	RuleStatBonus _timeRecovery, _energyRecovery, _moraleRecovery, _healthRecovery, _stunRecovery, _manaRecovery;$/;"	m	class:OpenXcom::RuleSoldierBonus
_timeSpeed	Geoscape/GeoscapeState.h	/^	TextButton *_timeSpeed;$/;"	m	class:OpenXcom::GeoscapeState
_timeSpent	Savegame/Production.h	/^	int _timeSpent;$/;"	m	class:OpenXcom::Production
_timeUntilNextFrame	Engine/Game.h	/^	int _timeUntilNextFrame;$/;"	m	class:OpenXcom::Game
_timeout	Geoscape/DogfightState.h	/^	int _timeout, _currentDist, _targetDist, _weaponFireInterval[RuleCraft::WeaponMax], _weaponFireCountdown[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_timer	Basescape/BaseView.h	/^	Timer *_timer;$/;"	m	class:OpenXcom::BaseView
_timer	Battlescape/InfoboxState.h	/^	Timer *_timer;$/;"	m	class:OpenXcom::InfoboxState
_timer	Battlescape/NextTurnState.h	/^	Timer *_timer;$/;"	m	class:OpenXcom::NextTurnState
_timer	Battlescape/WarningMessage.h	/^	Timer *_timer;$/;"	m	class:OpenXcom::WarningMessage
_timer	Geoscape/BaseDefenseState.h	/^	Timer *_timer;$/;"	m	class:OpenXcom::BaseDefenseState
_timer	Interface/ArrowButton.h	/^	Timer *_timer;$/;"	m	class:OpenXcom::ArrowButton
_timer	Interface/FpsCounter.h	/^	Timer *_timer;$/;"	m	class:OpenXcom::FpsCounter
_timer	Interface/TextEdit.h	/^	Timer *_timer;$/;"	m	class:OpenXcom::TextEdit
_timer	Interface/Window.h	/^	Timer *_timer;$/;"	m	class:OpenXcom::Window
_timer	Menu/OptionsConfirmState.h	/^	Timer *_timer;$/;"	m	class:OpenXcom::OptionsConfirmState
_timer	Menu/StartState.h	/^	Timer *_timer;$/;"	m	class:OpenXcom::StartState
_timer	Mod/RuleEvent.h	/^	int _timer, _timerRandom;$/;"	m	class:OpenXcom::RuleEvent
_timerAnimate	Battlescape/MiniMapState.h	/^	Timer *_timerAnimate;$/;"	m	class:OpenXcom::MiniMapState
_timerAnimate	Battlescape/ScannerState.h	/^	Timer *_timerAnimate;$/;"	m	class:OpenXcom::ScannerState
_timerDec	Basescape/ManageAlienContainmentState.h	/^	Timer *_timerInc, *_timerDec;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_timerDec	Basescape/PurchaseState.h	/^	Timer *_timerInc, *_timerDec;$/;"	m	class:OpenXcom::PurchaseState
_timerDec	Basescape/SellState.h	/^	Timer *_timerInc, *_timerDec;$/;"	m	class:OpenXcom::SellState
_timerDec	Basescape/TransferItemsState.h	/^	Timer *_timerInc, *_timerDec;$/;"	m	class:OpenXcom::TransferItemsState
_timerInc	Basescape/ManageAlienContainmentState.h	/^	Timer *_timerInc, *_timerDec;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_timerInc	Basescape/PurchaseState.h	/^	Timer *_timerInc, *_timerDec;$/;"	m	class:OpenXcom::PurchaseState
_timerInc	Basescape/SellState.h	/^	Timer *_timerInc, *_timerDec;$/;"	m	class:OpenXcom::SellState
_timerInc	Basescape/TransferItemsState.h	/^	Timer *_timerInc, *_timerDec;$/;"	m	class:OpenXcom::TransferItemsState
_timerLeft	Basescape/CraftEquipmentState.h	/^	Timer *_timerLeft, *_timerRight;$/;"	m	class:OpenXcom::CraftEquipmentState
_timerLess	Basescape/ResearchInfoState.h	/^	Timer *_timerMore, *_timerLess;$/;"	m	class:OpenXcom::ResearchInfoState
_timerLessEngineer	Basescape/ManufactureInfoState.h	/^	Timer * _timerMoreEngineer, * _timerMoreUnit, * _timerLessEngineer, * _timerLessUnit;$/;"	m	class:OpenXcom::ManufactureInfoState
_timerLessUnit	Basescape/ManufactureInfoState.h	/^	Timer * _timerMoreEngineer, * _timerMoreUnit, * _timerLessEngineer, * _timerLessUnit;$/;"	m	class:OpenXcom::ManufactureInfoState
_timerMore	Basescape/ResearchInfoState.h	/^	Timer *_timerMore, *_timerLess;$/;"	m	class:OpenXcom::ResearchInfoState
_timerMoreEngineer	Basescape/ManufactureInfoState.h	/^	Timer * _timerMoreEngineer, * _timerMoreUnit, * _timerLessEngineer, * _timerLessUnit;$/;"	m	class:OpenXcom::ManufactureInfoState
_timerMoreUnit	Basescape/ManufactureInfoState.h	/^	Timer * _timerMoreEngineer, * _timerMoreUnit, * _timerLessEngineer, * _timerLessUnit;$/;"	m	class:OpenXcom::ManufactureInfoState
_timerRandom	Mod/RuleEvent.h	/^	int _timer, _timerRandom;$/;"	m	class:OpenXcom::RuleEvent
_timerRight	Basescape/CraftEquipmentState.h	/^	Timer *_timerLeft, *_timerRight;$/;"	m	class:OpenXcom::CraftEquipmentState
_timerScroll	Ufopaedia/UfopaediaStartState.h	/^		Timer *_timerScroll;$/;"	m	class:OpenXcom::UfopaediaStartState
_timesWoundedTotal	Savegame/SoldierDiary.h	/^		_shotAtCounter10in1Mission,	_hitCounter5in1Mission, _timesWoundedTotal, _KIA, _allAliensKilledTotal, _allAliensStunnedTotal,$/;"	m	class:OpenXcom::SoldierDiary
_title	Battlescape/PrimeGrenadeState.h	/^	Text *_title;$/;"	m	class:OpenXcom::PrimeGrenadeState
_titleColor	Ufopaedia/ArticleStateText.h	/^		Uint8 _buttonColor, _titleColor, _textColor1, _textColor2;$/;"	m	class:OpenXcom::ArticleStateText
_titleColor	Ufopaedia/ArticleStateTextImage.h	/^		Uint8 _buttonColor, _titleColor, _textColor1, _textColor2;$/;"	m	class:OpenXcom::ArticleStateTextImage
_tmpStatsWithAllBonuses	Savegame/Soldier.h	/^	UnitStats _initialStats, _currentStats, _tmpStatsWithSoldierBonuses, _tmpStatsWithAllBonuses;$/;"	m	class:OpenXcom::Soldier
_tmpStatsWithSoldierBonuses	Savegame/Soldier.h	/^	UnitStats _initialStats, _currentStats, _tmpStatsWithSoldierBonuses, _tmpStatsWithAllBonuses;$/;"	m	class:OpenXcom::Soldier
_toBeRemoved	Savegame/CraftWeaponProjectile.h	/^	bool _toBeRemoved;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_toDirection	Savegame/BattleUnit.h	/^	int _direction, _toDirection;$/;"	m	class:OpenXcom::BattleUnit
_toDirectionTurret	Savegame/BattleUnit.h	/^	int _directionTurret, _toDirectionTurret;$/;"	m	class:OpenXcom::BattleUnit
_toFind	Savegame/SavedGame.cpp	/^	RuleResearch * _toFind;$/;"	m	struct:OpenXcom::__anon41::findRuleResearch	file:
_toNode	Battlescape/AIModule.h	/^	Node *_fromNode, *_toNode;$/;"	m	class:OpenXcom::AIModule
_toggleBrightness	Savegame/SavedBattleGame.h	/^	int _toggleBrightness;$/;"	m	class:OpenXcom::SavedBattleGame
_toggleBrightness	Savegame/SavedGame.h	/^	int _toggleBrightness;$/;"	m	class:OpenXcom::SavedGame
_toggleMode	Interface/BattlescapeButton.h	/^	InversionType _toggleMode;$/;"	m	class:OpenXcom::BattlescapeButton
_toggleNightVision	Savegame/SavedBattleGame.h	/^	bool _togglePersonalLight, _toggleNightVision;$/;"	m	class:OpenXcom::SavedBattleGame
_toggleNightVision	Savegame/SavedGame.h	/^	bool _togglePersonalLight, _toggleNightVision;$/;"	m	class:OpenXcom::SavedGame
_togglePersonalLight	Savegame/SavedBattleGame.h	/^	bool _togglePersonalLight, _toggleNightVision;$/;"	m	class:OpenXcom::SavedBattleGame
_togglePersonalLight	Savegame/SavedGame.h	/^	bool _togglePersonalLight, _toggleNightVision;$/;"	m	class:OpenXcom::SavedGame
_toggled	Interface/ComboBox.h	/^	bool _toggled;$/;"	m	class:OpenXcom::ComboBox
_tooMuchSmokeThreshold	Mod/Mod.h	/^	int _maxLookVariant, _tooMuchSmokeThreshold, _customTrainingFactor, _minReactionAccuracy;$/;"	m	class:OpenXcom::Mod
_tooltip	Engine/InteractiveSurface.h	/^	std::string _tooltip;$/;"	m	class:OpenXcom::InteractiveSurface
_tooltipDefaultColor	Battlescape/BattlescapeState.h	/^	Uint8 _tooltipDefaultColor;$/;"	m	class:OpenXcom::BattlescapeState
_topBlackBand	Engine/Action.h	/^	int _topBlackBand, _leftBlackBand, _mouseX, _mouseY, _surfaceX, _surfaceY;$/;"	m	class:OpenXcom::Action
_topBlackBand	Engine/Screen.h	/^	int _topBlackBand, _bottomBlackBand, _leftBlackBand, _rightBlackBand, _cursorTopBlackBand, _cursorLeftBlackBand;$/;"	m	class:OpenXcom::Screen
_topicId	Ufopaedia/StatsForNerdsState.h	/^	std::string _topicId;$/;"	m	class:OpenXcom::StatsForNerdsState
_topics	Basescape/GlobalManufactureState.h	/^	std::vector<RuleManufacture*> _topics;$/;"	m	class:OpenXcom::GlobalManufactureState
_topics	Basescape/GlobalResearchState.h	/^	std::vector<RuleResearch*> _topics;$/;"	m	class:OpenXcom::GlobalResearchState
_total	Basescape/ManageAlienContainmentState.h	/^	int64_t _total;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_total	Basescape/PurchaseState.h	/^	int _total, _pQty, _cQty;$/;"	m	class:OpenXcom::PurchaseState
_total	Basescape/SellState.h	/^	int64_t _total;$/;"	m	class:OpenXcom::SellState
_total	Basescape/TransferItemsState.h	/^	int _total, _pQty, _cQty, _aQty;$/;"	m	class:OpenXcom::TransferItemsState
_totalItemStorageSize	Basescape/CraftEquipmentState.h	/^	double _totalItemStorageSize;$/;"	m	class:OpenXcom::CraftEquipmentState
_totalItems	Basescape/CraftEquipmentState.h	/^	int _totalItems;$/;"	m	class:OpenXcom::CraftEquipmentState
_totalMouseMoveX	Battlescape/BattlescapeState.h	/^	int _totalMouseMoveX, _totalMouseMoveY;$/;"	m	class:OpenXcom::BattlescapeState
_totalMouseMoveX	Battlescape/MiniMapView.h	/^	int _totalMouseMoveX, _totalMouseMoveY;$/;"	m	class:OpenXcom::MiniMapView
_totalMouseMoveX	Geoscape/Globe.h	/^	int _totalMouseMoveX, _totalMouseMoveY;$/;"	m	class:OpenXcom::Globe
_totalMouseMoveY	Battlescape/BattlescapeState.h	/^	int _totalMouseMoveX, _totalMouseMoveY;$/;"	m	class:OpenXcom::BattlescapeState
_totalMouseMoveY	Battlescape/MiniMapView.h	/^	int _totalMouseMoveX, _totalMouseMoveY;$/;"	m	class:OpenXcom::MiniMapView
_totalMouseMoveY	Geoscape/Globe.h	/^	int _totalMouseMoveX, _totalMouseMoveY;$/;"	m	class:OpenXcom::Globe
_totalShotByFriendlyCounter	Savegame/SoldierDiary.h	/^	int _daysWoundedTotal, _totalShotByFriendlyCounter, _totalShotFriendlyCounter, _loneSurvivorTotal, _monthsService, _unconciousTotal, _shotAtCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_totalShotFriendlyCounter	Savegame/SoldierDiary.h	/^	int _daysWoundedTotal, _totalShotByFriendlyCounter, _totalShotFriendlyCounter, _loneSurvivorTotal, _monthsService, _unconciousTotal, _shotAtCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_totalSoldierNamePoolWeight	Mod/RuleSoldier.h	/^	int _totalSoldierNamePoolWeight;$/;"	m	class:OpenXcom::RuleSoldier
_totalTUCost	Battlescape/Pathfinding.h	/^	PathfindingCost _totalTUCost;$/;"	m	class:OpenXcom::Pathfinding
_totalWeight	Mod/SoldierNamePool.h	/^	int _totalWeight, _femaleFrequency;$/;"	m	class:OpenXcom::SoldierNamePool
_totalWeight	Savegame/WeightedOptions.h	/^	size_t _totalWeight; \/\/!< The total weight of all options.$/;"	m	class:OpenXcom::WeightedOptions
_touchButtonsEnabled	Battlescape/BattlescapeState.h	/^	bool _touchButtonsEnabled, _touchButtonsEnabledLastTurn;$/;"	m	class:OpenXcom::BattlescapeState
_touchButtonsEnabledLastTurn	Battlescape/BattlescapeState.h	/^	bool _touchButtonsEnabled, _touchButtonsEnabledLastTurn;$/;"	m	class:OpenXcom::BattlescapeState
_traceAI	Battlescape/AIModule.h	/^	bool _traceAI, _didPsi;$/;"	m	class:OpenXcom::AIModule
_track	Interface/ScrollBar.h	/^	Surface *_track, *_thumb;$/;"	m	class:OpenXcom::ScrollBar
_trackNames	Geoscape/SelectMusicTrackState.h	/^	std::vector<std::string> _trackNames;$/;"	m	class:OpenXcom::SelectMusicTrackState
_tracks	Geoscape/SelectMusicTrackState.h	/^	std::vector<Music*> _tracks;$/;"	m	class:OpenXcom::SelectMusicTrackState
_tracks	Menu/VideoState.h	/^	const std::vector<std::string> *_videos, *_tracks;$/;"	m	class:OpenXcom::VideoState
_tractorBeamPower	Mod/RuleCraftWeapon.h	/^	int _tractorBeamPower;$/;"	m	class:OpenXcom::RuleCraftWeapon
_tractorBeamSlowdown	Savegame/Ufo.h	/^	int _tractorBeamSlowdown;$/;"	m	class:OpenXcom::Ufo
_tractorLockedOn	Geoscape/DogfightState.h	/^	bool _tractorLockedOn[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_training	Savegame/Soldier.h	/^	bool _recentlyPromoted, _psiTraining, _training, _returnToTrainingWhenHealed;$/;"	m	class:OpenXcom::Soldier
_trainingRooms	Mod/RuleBaseFacility.h	/^	int _listOrder, _trainingRooms;$/;"	m	class:OpenXcom::RuleBaseFacility
_trainingStatCaps	Mod/RuleSoldier.h	/^	UnitStats _minStats, _maxStats, _statCaps, _trainingStatCaps, _dogfightExperience;$/;"	m	class:OpenXcom::RuleSoldier
_trajectory	Battlescape/Projectile.h	/^	std::vector<Position> _trajectory;$/;"	m	class:OpenXcom::Projectile
_trajectory	Savegame/Ufo.h	/^	const UfoTrajectory *_trajectory;$/;"	m	class:OpenXcom::Ufo
_trajectoryPoint	Savegame/Ufo.h	/^	size_t _trajectoryPoint;$/;"	m	class:OpenXcom::Ufo
_transferTime	Mod/RuleCraft.h	/^	int _repairRate, _refuelRate, _transferTime, _score;$/;"	m	class:OpenXcom::RuleCraft
_transferTime	Mod/RuleItem.h	/^	int _costBuy, _costSell, _transferTime, _weight;$/;"	m	class:OpenXcom::RuleItem
_transferTime	Mod/RuleSoldier.h	/^	int _femaleFrequency, _value, _transferTime, _moraleLossWhenKilled;$/;"	m	class:OpenXcom::RuleSoldier
_transferTime	Mod/RuleSoldierTransformation.h	/^	int _listOrder, _cost, _transferTime, _recoveryTime;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_transfers	Savegame/Base.h	/^	std::vector<Transfer*> _transfers;$/;"	m	class:OpenXcom::Base
_transformationBonuses	Savegame/Soldier.h	/^	std::map<std::string, int> _previousTransformations, _transformationBonuses;$/;"	m	class:OpenXcom::Soldier
_transformationIndices	Basescape/SoldierTransformationListState.h	/^	std::vector<int> _transformationIndices;$/;"	m	class:OpenXcom::SoldierTransformationListState
_transformationListOrder	Mod/Mod.h	/^	int _soldierBonusListOrder, _transformationListOrder, _ufopaediaListOrder, _invListOrder, _soldierListOrder;$/;"	m	class:OpenXcom::Mod
_transformationRule	Basescape/SoldierTransformationState.h	/^	RuleSoldierTransformation *_transformationRule;$/;"	m	class:OpenXcom::SoldierTransformationState
_transformedArmor	Savegame/Soldier.h	/^	Armor *_transformedArmor;$/;"	m	class:OpenXcom::Soldier
_transitionTimer	Menu/SlideshowState.h	/^	Timer *_transitionTimer;$/;"	m	class:OpenXcom::SlideshowState
_transparencies	Battlescape/Map.h	/^	const std::vector<Uint8> *_transparencies;$/;"	m	class:OpenXcom::Map
_transparencies	Mod/Mod.h	/^	std::vector<SDL_Color> _transparencies;$/;"	m	class:OpenXcom::Mod
_transparencyLUTs	Mod/Mod.h	/^	std::vector<std::vector<Uint8> > _transparencyLUTs;$/;"	m	class:OpenXcom::Mod
_triggerProcessed	Battlescape/BattlescapeGame.h	/^	SingleRun _triggerProcessed;$/;"	m	class:OpenXcom::BattlescapeGame
_tu	Battlescape/ActionMenuItem.h	/^	int _tu, _highlightModifier;$/;"	m	class:OpenXcom::ActionMenuItem
_tu	Battlescape/Inventory.h	/^	bool _tu, _base;$/;"	m	class:OpenXcom::Inventory
_tu	Battlescape/InventoryState.h	/^	const bool _tu, _noCraft;$/;"	m	class:OpenXcom::InventoryState
_tu	Savegame/BattleUnit.h	/^	int _tu, _energy, _health, _morale, _stunlevel, _mana;$/;"	m	class:OpenXcom::BattleUnit
_tuCost	Battlescape/PathfindingNode.h	/^	PathfindingCost _tuCost;$/;"	m	class:OpenXcom::PathfindingNode
_tuGuess	Battlescape/PathfindingNode.h	/^	Sint16 _tuGuess;$/;"	m	class:OpenXcom::PathfindingNode
_tuLoad	Mod/RuleItem.h	/^	int _clipSize, _specialChance, _tuLoad[AmmoSlotMax], _tuUnload[AmmoSlotMax];$/;"	m	class:OpenXcom::RuleItem
_tuRecoveryWakeUpNewTurn	Mod/Mod.h	/^	int _tuRecoveryWakeUpNewTurn;$/;"	m	class:OpenXcom::Mod
_tuReserved	Savegame/SavedBattleGame.h	/^	BattleActionType _tuReserved;$/;"	m	class:OpenXcom::SavedBattleGame
_tuUnload	Mod/RuleItem.h	/^	int _clipSize, _specialChance, _tuLoad[AmmoSlotMax], _tuUnload[AmmoSlotMax];$/;"	m	class:OpenXcom::RuleItem
_tunnelData	Mod/MapScript.h	/^	TunnelData *_tunnelData;$/;"	m	class:OpenXcom::MapScript
_turn	Savegame/SavedBattleGame.h	/^	int _turn, _bughuntMinTurn;$/;"	m	class:OpenXcom::SavedBattleGame
_turnBeforeFirstStep	Mod/Armor.h	/^	bool _turnBeforeFirstStep;$/;"	m	class:OpenXcom::Armor
_turnCost	Mod/Armor.h	/^	int _turnCost;$/;"	m	class:OpenXcom::Armor
_turnDiary	Savegame/HitLog.h	/^	std::vector<std::string> _turnDiary;$/;"	m	class:OpenXcom::HitLog
_turnLimit	Mod/AlienDeployment.h	/^	int _objectiveType, _objectivesRequired, _objectiveCompleteScore, _objectiveFailedScore, _despawnPenalty, _abortPenalty, _points, _turnLimit, _cheatTurn;$/;"	m	class:OpenXcom::AlienDeployment
_turnLimit	Savegame/SavedBattleGame.h	/^	int _turnLimit, _cheatTurn;$/;"	m	class:OpenXcom::SavedBattleGame
_turnsLeftSpottedForSnipers	Savegame/BattleUnit.h	/^	int _turnsSinceSpotted, _turnsLeftSpottedForSnipers, _turnsSinceStunned = 255;$/;"	m	class:OpenXcom::BattleUnit
_turnsSinceSpotted	Savegame/BattleUnit.h	/^	int _turnsSinceSpotted, _turnsLeftSpottedForSnipers, _turnsSinceStunned = 255;$/;"	m	class:OpenXcom::BattleUnit
_turnsSinceStunned	Savegame/BattleUnit.h	/^	int _turnsSinceSpotted, _turnsLeftSpottedForSnipers, _turnsSinceStunned = 255;$/;"	m	class:OpenXcom::BattleUnit
_turret	Battlescape/UnitTurnBState.h	/^	bool _turret, _chargeTUs;$/;"	m	class:OpenXcom::UnitTurnBState
_turretType	Mod/RuleItem.h	/^	int _turretType;$/;"	m	class:OpenXcom::RuleItem
_turretType	Savegame/BattleUnit.h	/^	int _turretType;$/;"	m	class:OpenXcom::BattleUnit
_twoHanded	Mod/RuleItem.h	/^	bool _twoHanded, _blockBothHands, _fixedWeapon, _fixedWeaponShow, _isConsumable, _isFireExtinguisher;$/;"	m	class:OpenXcom::RuleItem
_twoHandedGreen	Battlescape/BattlescapeState.h	/^	Uint8 _twoHandedRed, _twoHandedGreen;$/;"	m	class:OpenXcom::BattlescapeState
_twoHandedGreen	Battlescape/Inventory.h	/^	Uint8 _twoHandedRed, _twoHandedGreen;$/;"	m	class:OpenXcom::Inventory
_twoHandedRed	Battlescape/BattlescapeState.h	/^	Uint8 _twoHandedRed, _twoHandedGreen;$/;"	m	class:OpenXcom::BattlescapeState
_twoHandedRed	Battlescape/Inventory.h	/^	Uint8 _twoHandedRed, _twoHandedGreen;$/;"	m	class:OpenXcom::Inventory
_txtAbort	Battlescape/AbortMissionState.h	/^	Text *_txtInEntrance, *_txtInExit, *_txtOutside, *_txtAbort;$/;"	m	class:OpenXcom::AbortMissionState
_txtAcc	Battlescape/ActionMenuItem.h	/^	Text *_txtDescription, *_txtAcc, *_txtTU;$/;"	m	class:OpenXcom::ActionMenuItem
_txtAccuracy	Battlescape/Map.h	/^	Text *_txtAccuracy;$/;"	m	class:OpenXcom::Map
_txtAccuracy	Ufopaedia/ArticleStateItem.h	/^		Text *_txtAccuracy;$/;"	m	class:OpenXcom::ArticleStateItem
_txtAccuracy	Ufopaedia/ArticleStateTFTDItem.h	/^		Text *_txtAccuracy;$/;"	m	class:OpenXcom::ArticleStateTFTDItem
_txtAccuracyBonus	Basescape/CraftPilotsState.h	/^	Text *_txtAccuracyBonus, *_txtAccuracyBonusValue;$/;"	m	class:OpenXcom::CraftPilotsState
_txtAccuracyBonusValue	Basescape/CraftPilotsState.h	/^	Text *_txtAccuracyBonus, *_txtAccuracyBonusValue;$/;"	m	class:OpenXcom::CraftPilotsState
_txtAccuracyModifier	Ufopaedia/ArticleStateItem.h	/^		Text *_txtAccuracyModifier;$/;"	m	class:OpenXcom::ArticleStateItem
_txtAlienOptions	Menu/NewBattleState.h	/^	Text *_txtTitle, *_txtMapOptions, *_txtAlienOptions;$/;"	m	class:OpenXcom::NewBattleState
_txtAlienRace	Menu/NewBattleState.h	/^	Text *_txtMission, *_txtCraft, *_txtDarkness, *_txtTerrain, *_txtDifficulty, *_txtAlienRace, *_txtAlienTech, *_txtDepth;$/;"	m	class:OpenXcom::NewBattleState
_txtAlienSpeed	Menu/OptionsBattlescapeState.h	/^	Text *_txtScrollSpeed, *_txtFireSpeed, *_txtXcomSpeed, *_txtAlienSpeed;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_txtAlienTech	Menu/NewBattleState.h	/^	Text *_txtMission, *_txtCraft, *_txtDarkness, *_txtTerrain, *_txtDifficulty, *_txtAlienRace, *_txtAlienTech, *_txtDepth;$/;"	m	class:OpenXcom::NewBattleState
_txtAllocated	Basescape/GlobalManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::GlobalManufactureState
_txtAllocated	Basescape/GlobalResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::GlobalResearchState
_txtAllocated	Basescape/ManufactureInfoState.h	/^	Text * _txtAllocatedEngineer, * _txtUnitToProduce, * _txtUnitUp, * _txtUnitDown, * _txtEngineerUp, * _txtEngineerDown, * _txtAllocated, * _txtTodo;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtAllocated	Basescape/ManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::ManufactureState
_txtAllocated	Basescape/ResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::ResearchState
_txtAllocatedEngineer	Basescape/ManufactureInfoState.h	/^	Text * _txtAllocatedEngineer, * _txtUnitToProduce, * _txtUnitUp, * _txtUnitDown, * _txtEngineerUp, * _txtEngineerDown, * _txtAllocated, * _txtTodo;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtAllocatedScientist	Basescape/ResearchInfoState.h	/^	Text *_txtTitle, *_txtAvailableScientist, *_txtAvailableSpace, *_txtAllocatedScientist, *_txtMore, *_txtLess;$/;"	m	class:OpenXcom::ResearchInfoState
_txtAltitude	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtAltitude	Geoscape/UfoTrackerState.h	/^	Text *_txtTitle, *_txtObject, *_txtSize, *_txtAltitude, *_txtHeading, *_txtSpeed;$/;"	m	class:OpenXcom::UfoTrackerState
_txtAmmo	Battlescape/InventoryState.h	/^	Text *_txtItem, *_txtAmmo, *_txtWeight, *_txtTus, *_txtStatLine1, *_txtStatLine2, *_txtStatLine3, *_txtStatLine4;$/;"	m	class:OpenXcom::InventoryState
_txtAmmo	Geoscape/DogfightState.h	/^	Text *_txtAmmo[RuleCraft::WeaponMax], *_txtDistance, *_txtStatus, *_txtInterceptionNumber;$/;"	m	class:OpenXcom::DogfightState
_txtAmmo	Ufopaedia/ArticleStateItem.h	/^		Text *_txtAmmo;$/;"	m	class:OpenXcom::ArticleStateItem
_txtAmmoDamage	Ufopaedia/ArticleStateItem.h	/^		Text *_txtAmmoDamage[3];$/;"	m	class:OpenXcom::ArticleStateItem
_txtAmmoDamage	Ufopaedia/ArticleStateTFTDItem.h	/^		Text *_txtAmmoDamage[3];$/;"	m	class:OpenXcom::ArticleStateTFTDItem
_txtAmmoType	Ufopaedia/ArticleStateItem.h	/^		Text *_txtAmmoType[3];$/;"	m	class:OpenXcom::ArticleStateItem
_txtAmmoType	Ufopaedia/ArticleStateTFTDItem.h	/^		Text *_txtAmmoType[3];$/;"	m	class:OpenXcom::ArticleStateTFTDItem
_txtAmmunition	Basescape/CraftWeaponsState.h	/^	Text *_txtTitle, *_txtArmament, *_txtQuantity, *_txtAmmunition, *_txtCurrentWeapon;$/;"	m	class:OpenXcom::CraftWeaponsState
_txtAmountDestination	Basescape/TransferItemsState.h	/^	Text *_txtTitle, *_txtQuantity, *_txtAmountTransfer, *_txtAmountDestination;$/;"	m	class:OpenXcom::TransferItemsState
_txtAmountTransfer	Basescape/TransferItemsState.h	/^	Text *_txtTitle, *_txtQuantity, *_txtAmountTransfer, *_txtAmountDestination;$/;"	m	class:OpenXcom::TransferItemsState
_txtApproachSpeed	Basescape/CraftPilotsState.h	/^	Text *_txtApproachSpeed, *_txtApproachSpeedValue;$/;"	m	class:OpenXcom::CraftPilotsState
_txtApproachSpeedValue	Basescape/CraftPilotsState.h	/^	Text *_txtApproachSpeed, *_txtApproachSpeedValue;$/;"	m	class:OpenXcom::CraftPilotsState
_txtArea	Basescape/TransferBaseState.h	/^	Text *_txtTitle, *_txtFunds, *_txtName, *_txtArea;$/;"	m	class:OpenXcom::TransferBaseState
_txtArea	Geoscape/ConfirmNewBaseState.h	/^	Text *_txtCost, *_txtArea;$/;"	m	class:OpenXcom::ConfirmNewBaseState
_txtArmament	Basescape/CraftWeaponsState.h	/^	Text *_txtTitle, *_txtArmament, *_txtQuantity, *_txtAmmunition, *_txtCurrentWeapon;$/;"	m	class:OpenXcom::CraftWeaponsState
_txtArmor	Basescape/CraftArmorState.h	/^	Text *_txtTitle, *_txtName, *_txtCraft, *_txtArmor;$/;"	m	class:OpenXcom::CraftArmorState
_txtArmors	Battlescape/BriefingLightState.h	/^	Text *_txtTitle, *_txtBriefing, *_txtArmors;$/;"	m	class:OpenXcom::BriefingLightState
_txtArrivalTime	Basescape/TransfersState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtArrivalTime;$/;"	m	class:OpenXcom::TransfersState
_txtArrows	Ufopaedia/ArticleStateItem.h	/^		Text * _txtArrows;$/;"	m	class:OpenXcom::ArticleStateItem
_txtArrows	Ufopaedia/ArticleStateTFTDItem.h	/^		Text *_txtArrows;$/;"	m	class:OpenXcom::ArticleStateTFTDItem
_txtArticle	Ufopaedia/StatsForNerdsState.h	/^	Text *_txtArticle;$/;"	m	class:OpenXcom::StatsForNerdsState
_txtAvailable	Basescape/CraftEquipmentState.h	/^	Text *_txtTitle, *_txtItem, *_txtStores, *_txtAvailable, *_txtUsed, *_txtCrew;$/;"	m	class:OpenXcom::CraftEquipmentState
_txtAvailable	Basescape/CraftSoldiersState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtCraft, *_txtAvailable, *_txtUsed;$/;"	m	class:OpenXcom::CraftSoldiersState
_txtAvailable	Basescape/GlobalManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::GlobalManufactureState
_txtAvailable	Basescape/GlobalResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::GlobalResearchState
_txtAvailable	Basescape/ManageAlienContainmentState.h	/^	Text *_txtTitle, *_txtUsed, *_txtAvailable, *_txtValueOfSales, *_txtItem, *_txtLiveAliens, *_txtDeadAliens, *_txtInterrogatedAliens;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_txtAvailable	Basescape/ManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::ManufactureState
_txtAvailable	Basescape/ResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::ResearchState
_txtAvailableEngineer	Basescape/ManufactureInfoState.h	/^	Text * _txtTitle, * _txtAvailableEngineer, * _txtAvailableSpace, * _txtHoursPerUnit, * _txtMonthlyProfit;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtAvailableScientist	Basescape/ResearchInfoState.h	/^	Text *_txtTitle, *_txtAvailableScientist, *_txtAvailableSpace, *_txtAllocatedScientist, *_txtMore, *_txtLess;$/;"	m	class:OpenXcom::ResearchInfoState
_txtAvailableSpace	Basescape/ManufactureInfoState.h	/^	Text * _txtTitle, * _txtAvailableEngineer, * _txtAvailableSpace, * _txtHoursPerUnit, * _txtMonthlyProfit;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtAvailableSpace	Basescape/ResearchInfoState.h	/^	Text *_txtTitle, *_txtAvailableScientist, *_txtAvailableSpace, *_txtAllocatedScientist, *_txtMore, *_txtLess;$/;"	m	class:OpenXcom::ResearchInfoState
_txtBalance	Geoscape/MonthlyReportState.h	/^	Text *_txtIncome, *_txtMaintenance, *_txtBalance, *_txtBonus;$/;"	m	class:OpenXcom::MonthlyReportState
_txtBase	Basescape/CraftsState.h	/^	Text *_txtTitle, *_txtBase, *_txtName, *_txtStatus, *_txtWeapon, *_txtCrew, *_txtHwp;$/;"	m	class:OpenXcom::CraftsState
_txtBase	Battlescape/PromotionsState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtBase;$/;"	m	class:OpenXcom::PromotionsState
_txtBase	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtBase	Geoscape/InterceptState.h	/^	Text *_txtTitle, *_txtCraft, *_txtStatus, *_txtBase, *_txtWeapons;$/;"	m	class:OpenXcom::InterceptState
_txtBattleScale	Menu/OptionsVideoState.h	/^	Text *_txtLanguage, *_txtFilter, *_txtGeoScale, *_txtBattleScale;$/;"	m	class:OpenXcom::OptionsVideoState
_txtBegin	Geoscape/ConfirmLandingState.h	/^	Text *_txtMessage, *_txtBegin;$/;"	m	class:OpenXcom::ConfirmLandingState
_txtBonus	Geoscape/MonthlyReportState.h	/^	Text *_txtIncome, *_txtMaintenance, *_txtBalance, *_txtBonus;$/;"	m	class:OpenXcom::MonthlyReportState
_txtBravery	Basescape/CraftPilotSelectState.h	/^	Text *_txtTitle, *_txtName, *_txtFiringAcc, *_txtReactions, *_txtBravery;$/;"	m	class:OpenXcom::CraftPilotSelectState
_txtBravery	Basescape/CraftPilotsState.h	/^	Text *_txtTitle, *_txtFiringAcc, *_txtReactions, *_txtBravery, *_txtPilots;$/;"	m	class:OpenXcom::CraftPilotsState
_txtBravery	Basescape/SoldierInfoState.h	/^	Text *_txtTimeUnits, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::SoldierInfoState
_txtBravery	Battlescape/DebriefingState.h	/^	Text *_txtSoldier, *_txtTU, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions;$/;"	m	class:OpenXcom::DebriefingState
_txtBravery	Battlescape/UnitInfoState.h	/^	Text *_txtTimeUnits, *_txtEnergy, *_txtHealth, *_txtFatalWounds, *_txtBravery, *_txtMorale, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::UnitInfoState
_txtBravery	Geoscape/DogfightExperienceState.h	/^	Text *_txtTitle, *_txtFiringAcc, *_txtReactions, *_txtBravery, *_txtPilots;$/;"	m	class:OpenXcom::DogfightExperienceState
_txtBriefing	Battlescape/BriefingLightState.h	/^	Text *_txtTitle, *_txtBriefing, *_txtArmors;$/;"	m	class:OpenXcom::BriefingLightState
_txtBriefing	Battlescape/BriefingState.h	/^	Text *_txtTitle, *_txtTarget, *_txtCraft, *_txtBriefing;$/;"	m	class:OpenXcom::BriefingState
_txtCategory	Basescape/NewManufactureListState.h	/^	Text *_txtTitle, *_txtItem, *_txtCategory;$/;"	m	class:OpenXcom::NewManufactureListState
_txtCaveat	Geoscape/NewPossibleCraftState.h	/^	Text* _txtCaveat;$/;"	m	class:OpenXcom::NewPossibleCraftState
_txtCaveat	Geoscape/NewPossibleFacilityState.h	/^	Text* _txtCaveat;$/;"	m	class:OpenXcom::NewPossibleFacilityState
_txtCaveat	Geoscape/NewPossibleManufactureState.h	/^	Text* _txtCaveat;$/;"	m	class:OpenXcom::NewPossibleManufactureState
_txtCaveat	Geoscape/NewPossiblePurchaseState.h	/^	Text* _txtCaveat;$/;"	m	class:OpenXcom::NewPossiblePurchaseState
_txtChange	Geoscape/FundingState.h	/^	Text *_txtTitle, *_txtCountry, *_txtFunding, *_txtChange;$/;"	m	class:OpenXcom::FundingState
_txtCity	Geoscape/MissionDetectedState.h	/^	Text *_txtTitle, *_txtCity;$/;"	m	class:OpenXcom::MissionDetectedState
_txtClockSpeed	Menu/OptionsGeoscapeState.h	/^	Text *_txtScrollSpeed, *_txtDogfightSpeed, *_txtClockSpeed;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_txtConfigFolder	Menu/OptionsFoldersState.h	/^	Text *_txtDataFolder, *_txtUserFolder, *_txtSaveFolder, *_txtConfigFolder;$/;"	m	class:OpenXcom::OptionsFoldersState
_txtConfigFolderPath	Menu/OptionsFoldersState.h	/^	Text *_txtDataFolderPath, *_txtUserFolderPath, *_txtSaveFolderPath, *_txtConfigFolderPath;$/;"	m	class:OpenXcom::OptionsFoldersState
_txtConfirm	Battlescape/ConfirmEndMissionState.h	/^	Text *_txtTitle, *_txtWounded, *_txtConfirm;$/;"	m	class:OpenXcom::ConfirmEndMissionState
_txtContainment	Basescape/BaseInfoState.h	/^	Text *_txtSpace, *_txtQuarters, *_txtStores, *_txtLaboratories, *_txtWorkshops, *_txtContainment, *_txtHangars;$/;"	m	class:OpenXcom::BaseInfoState
_txtCost	Basescape/GlobalManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::GlobalManufactureState
_txtCost	Basescape/ManufactureStartState.h	/^	Text *_txtTitle, *_txtManHour, *_txtCost, *_txtWorkSpace, *_txtRequiredItemsTitle, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::ManufactureStartState
_txtCost	Basescape/ManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::ManufactureState
_txtCost	Basescape/MonthlyCostsState.h	/^	Text *_txtTitle, *_txtCost, *_txtQuantity, *_txtTotal, *_txtRental, *_txtSalaries, *_txtIncome, *_txtMaintenance;$/;"	m	class:OpenXcom::MonthlyCostsState
_txtCost	Basescape/PlaceFacilityState.h	/^	Text *_txtFacility, *_txtCost, *_numCost, *_numResources, *_txtTime, *_numTime, *_txtMaintenance, *_numMaintenance;$/;"	m	class:OpenXcom::PlaceFacilityState
_txtCost	Basescape/PurchaseState.h	/^	Text *_txtTitle, *_txtFunds, *_txtPurchases, *_txtCost, *_txtQuantity, *_txtSpaceUsed;$/;"	m	class:OpenXcom::PurchaseState
_txtCost	Basescape/SoldierTransformationState.h	/^	Text *_txtCost, *_txtTransferTime, *_txtRecoveryTime, *_txtRequiredItems, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::SoldierTransformationState
_txtCost	Basescape/TransferConfirmState.h	/^	Text *_txtTitle, *_txtCost, *_txtTotal;$/;"	m	class:OpenXcom::TransferConfirmState
_txtCost	Geoscape/ConfirmNewBaseState.h	/^	Text *_txtCost, *_txtArea;$/;"	m	class:OpenXcom::ConfirmNewBaseState
_txtCostIndicator	Basescape/TechTreeViewerState.h	/^	Text *_txtTitle, *_txtSelectedTopic, *_txtProgress, *_txtCostIndicator;$/;"	m	class:OpenXcom::TechTreeViewerState
_txtCountry	Geoscape/FundingState.h	/^	Text *_txtTitle, *_txtCountry, *_txtFunding, *_txtChange;$/;"	m	class:OpenXcom::FundingState
_txtCraft	Basescape/CraftArmorState.h	/^	Text *_txtTitle, *_txtName, *_txtCraft, *_txtArmor;$/;"	m	class:OpenXcom::CraftArmorState
_txtCraft	Basescape/CraftSoldiersState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtCraft, *_txtAvailable, *_txtUsed;$/;"	m	class:OpenXcom::CraftSoldiersState
_txtCraft	Basescape/SoldierInfoState.h	/^	Text *_txtRank, *_txtMissions, *_txtKills, *_txtCraft, *_txtRecovery, *_txtPsionic, *_txtDead;$/;"	m	class:OpenXcom::SoldierInfoState
_txtCraft	Basescape/SoldiersState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtCraft;$/;"	m	class:OpenXcom::SoldiersState
_txtCraft	Battlescape/BriefingState.h	/^	Text *_txtTitle, *_txtTarget, *_txtCraft, *_txtBriefing;$/;"	m	class:OpenXcom::BriefingState
_txtCraft	Battlescape/CannotReequipState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtCraft;$/;"	m	class:OpenXcom::CannotReequipState
_txtCraft	Geoscape/DogfightErrorState.h	/^	Text *_txtCraft, *_txtMessage;$/;"	m	class:OpenXcom::DogfightErrorState
_txtCraft	Geoscape/InterceptState.h	/^	Text *_txtTitle, *_txtCraft, *_txtStatus, *_txtBase, *_txtWeapons;$/;"	m	class:OpenXcom::InterceptState
_txtCraft	Menu/NewBattleState.h	/^	Text *_txtMission, *_txtCraft, *_txtDarkness, *_txtTerrain, *_txtDifficulty, *_txtAlienRace, *_txtAlienTech, *_txtDepth;$/;"	m	class:OpenXcom::NewBattleState
_txtCrew	Basescape/CraftEquipmentState.h	/^	Text *_txtTitle, *_txtItem, *_txtStores, *_txtAvailable, *_txtUsed, *_txtCrew;$/;"	m	class:OpenXcom::CraftEquipmentState
_txtCrew	Basescape/CraftsState.h	/^	Text *_txtTitle, *_txtBase, *_txtName, *_txtStatus, *_txtWeapon, *_txtCrew, *_txtHwp;$/;"	m	class:OpenXcom::CraftsState
_txtCurrentMusic	Menu/OptionsAudioState.h	/^	Text *_txtMusicFormat, *_txtCurrentMusic, *_txtSoundFormat, *_txtCurrentSound, *_txtVideoFormat;$/;"	m	class:OpenXcom::OptionsAudioState
_txtCurrentSound	Menu/OptionsAudioState.h	/^	Text *_txtMusicFormat, *_txtCurrentMusic, *_txtSoundFormat, *_txtCurrentSound, *_txtVideoFormat;$/;"	m	class:OpenXcom::OptionsAudioState
_txtCurrentWeapon	Basescape/CraftWeaponsState.h	/^	Text *_txtTitle, *_txtArmament, *_txtQuantity, *_txtAmmunition, *_txtCurrentWeapon;$/;"	m	class:OpenXcom::CraftWeaponsState
_txtDamage	Basescape/CraftInfoState.h	/^	Text *_txtDamage, *_txtShield, *_txtFuel, *_txtSkin;$/;"	m	class:OpenXcom::CraftInfoState
_txtDamage	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtDamage	Ufopaedia/ArticleStateItem.h	/^		Text *_txtDamage;$/;"	m	class:OpenXcom::ArticleStateItem
_txtDarkness	Menu/NewBattleState.h	/^	Text *_txtMission, *_txtCraft, *_txtDarkness, *_txtTerrain, *_txtDifficulty, *_txtAlienRace, *_txtAlienTech, *_txtDepth;$/;"	m	class:OpenXcom::NewBattleState
_txtDataFolder	Menu/OptionsFoldersState.h	/^	Text *_txtDataFolder, *_txtUserFolder, *_txtSaveFolder, *_txtConfigFolder;$/;"	m	class:OpenXcom::OptionsFoldersState
_txtDataFolderPath	Menu/OptionsFoldersState.h	/^	Text *_txtDataFolderPath, *_txtUserFolderPath, *_txtSaveFolderPath, *_txtConfigFolderPath;$/;"	m	class:OpenXcom::OptionsFoldersState
_txtDate	Basescape/SoldierDiaryOverviewState.h	/^	Text *_txtTitle, *_txtMission, *_txtRating, *_txtDate, *_txtDeathTitle, *_txtDeathInfo, *_txtDeathDate;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_txtDate	Basescape/SoldierMemorialState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtDate, *_txtRecruited, *_txtLost;$/;"	m	class:OpenXcom::SoldierMemorialState
_txtDate	Menu/ListGamesState.h	/^	Text *_txtTitle, *_txtName, *_txtDate, *_txtDelete, *_txtDetails;$/;"	m	class:OpenXcom::ListGamesState
_txtDate	Menu/ListLoadOriginalState.h	/^	Text *_txtTitle, *_txtName, *_txtTime, *_txtDate;$/;"	m	class:OpenXcom::ListLoadOriginalState
_txtDay	Geoscape/GeoscapeState.h	/^	Text *_txtFunds, *_txtHour, *_txtHourSep, *_txtMin, *_txtMinSep, *_txtSec, *_txtWeekday, *_txtDay, *_txtMonth, *_txtYear;$/;"	m	class:OpenXcom::GeoscapeState
_txtDaylight	Basescape/SoldierDiaryMissionState.h	/^	Text *_txtTitle, *_txtUFO, *_txtScore, *_txtKills, *_txtLocation, *_txtRace, *_txtDaylight, *_txtDaysWounded;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_txtDaysWounded	Basescape/SoldierDiaryMissionState.h	/^	Text *_txtTitle, *_txtUFO, *_txtScore, *_txtKills, *_txtLocation, *_txtRace, *_txtDaylight, *_txtDaysWounded;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_txtDead	Basescape/SoldierInfoState.h	/^	Text *_txtRank, *_txtMissions, *_txtKills, *_txtCraft, *_txtRecovery, *_txtPsionic, *_txtDead;$/;"	m	class:OpenXcom::SoldierInfoState
_txtDeadAliens	Basescape/ManageAlienContainmentState.h	/^	Text *_txtTitle, *_txtUsed, *_txtAvailable, *_txtValueOfSales, *_txtItem, *_txtLiveAliens, *_txtDeadAliens, *_txtInterrogatedAliens;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_txtDeathDate	Basescape/SoldierDiaryOverviewState.h	/^	Text *_txtTitle, *_txtMission, *_txtRating, *_txtDate, *_txtDeathTitle, *_txtDeathInfo, *_txtDeathDate;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_txtDeathInfo	Basescape/SoldierDiaryOverviewState.h	/^	Text *_txtTitle, *_txtMission, *_txtRating, *_txtDate, *_txtDeathTitle, *_txtDeathInfo, *_txtDeathDate;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_txtDeathTitle	Basescape/SoldierDiaryOverviewState.h	/^	Text *_txtTitle, *_txtMission, *_txtRating, *_txtDate, *_txtDeathTitle, *_txtDeathInfo, *_txtDeathDate;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_txtDebug	Battlescape/BattlescapeState.h	/^	Text *_txtDebug, *_txtTooltip;$/;"	m	class:OpenXcom::BattlescapeState
_txtDebug	Geoscape/GeoscapeState.h	/^	Text *_txtDebug;$/;"	m	class:OpenXcom::GeoscapeState
_txtDefense	Basescape/BaseInfoState.h	/^	Text *_txtDefense, *_txtShortRange, *_txtLongRange;$/;"	m	class:OpenXcom::BaseInfoState
_txtDelete	Menu/ListGamesState.h	/^	Text *_txtTitle, *_txtName, *_txtDate, *_txtDelete, *_txtDetails;$/;"	m	class:OpenXcom::ListGamesState
_txtDelete	Menu/NotesState.h	/^	Text* _txtDelete;$/;"	m	class:OpenXcom::NotesState
_txtDepth	Menu/NewBattleState.h	/^	Text *_txtMission, *_txtCraft, *_txtDarkness, *_txtTerrain, *_txtDifficulty, *_txtAlienRace, *_txtAlienTech, *_txtDepth;$/;"	m	class:OpenXcom::NewBattleState
_txtDesc	Geoscape/MonthlyReportState.h	/^	Text *_txtDesc, *_txtFailure;$/;"	m	class:OpenXcom::MonthlyReportState
_txtDescription	Battlescape/ActionMenuItem.h	/^	Text *_txtDescription, *_txtAcc, *_txtTU;$/;"	m	class:OpenXcom::ActionMenuItem
_txtDescription	Menu/TestState.h	/^	Text *_txtTitle, *_txtTestCase, *_txtDescription;$/;"	m	class:OpenXcom::TestState
_txtDestination	Geoscape/CraftPatrolState.h	/^	Text *_txtDestination, *_txtPatrolling;$/;"	m	class:OpenXcom::CraftPatrolState
_txtDestination	Geoscape/ItemsArrivingState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtDestination;$/;"	m	class:OpenXcom::ItemsArrivingState
_txtDetails	Menu/ListGamesState.h	/^	Text *_txtTitle, *_txtName, *_txtDate, *_txtDelete, *_txtDetails;$/;"	m	class:OpenXcom::ListGamesState
_txtDetected	Geoscape/UfoDetectedState.h	/^	Text *_txtUfo, *_txtDetected, *_txtHyperwave;$/;"	m	class:OpenXcom::UfoDetectedState
_txtDifficulty	Menu/NewBattleState.h	/^	Text *_txtMission, *_txtCraft, *_txtDarkness, *_txtTerrain, *_txtDifficulty, *_txtAlienRace, *_txtAlienTech, *_txtDepth;$/;"	m	class:OpenXcom::NewBattleState
_txtDisplayHeight	Menu/OptionsVideoState.h	/^	TextEdit *_txtDisplayWidth, *_txtDisplayHeight;$/;"	m	class:OpenXcom::OptionsVideoState
_txtDisplayResolution	Menu/OptionsVideoState.h	/^	Text *_txtDisplayResolution, *_txtDisplayX;$/;"	m	class:OpenXcom::OptionsVideoState
_txtDisplayWidth	Menu/OptionsVideoState.h	/^	TextEdit *_txtDisplayWidth, *_txtDisplayHeight;$/;"	m	class:OpenXcom::OptionsVideoState
_txtDisplayX	Menu/OptionsVideoState.h	/^	Text *_txtDisplayResolution, *_txtDisplayX;$/;"	m	class:OpenXcom::OptionsVideoState
_txtDistance	Geoscape/DogfightState.h	/^	Text *_txtAmmo[RuleCraft::WeaponMax], *_txtDistance, *_txtStatus, *_txtInterceptionNumber;$/;"	m	class:OpenXcom::DogfightState
_txtDodgeBonus	Basescape/CraftPilotsState.h	/^	Text *_txtDodgeBonus, *_txtDodgeBonusValue;$/;"	m	class:OpenXcom::CraftPilotsState
_txtDodgeBonusValue	Basescape/CraftPilotsState.h	/^	Text *_txtDodgeBonus, *_txtDodgeBonusValue;$/;"	m	class:OpenXcom::CraftPilotsState
_txtDogfightSpeed	Menu/OptionsGeoscapeState.h	/^	Text *_txtScrollSpeed, *_txtDogfightSpeed, *_txtClockSpeed;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_txtDragScroll	Menu/OptionsBattlescapeState.h	/^	Text *_txtEdgeScroll, *_txtDragScroll;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_txtDragScroll	Menu/OptionsGeoscapeState.h	/^	Text *_txtDragScroll;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_txtEdgeScroll	Menu/OptionsBattlescapeState.h	/^	Text *_txtEdgeScroll, *_txtDragScroll;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_txtEnergy	Battlescape/UnitInfoState.h	/^	Text *_txtTimeUnits, *_txtEnergy, *_txtHealth, *_txtFatalWounds, *_txtBravery, *_txtMorale, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::UnitInfoState
_txtEngineerDown	Basescape/ManufactureInfoState.h	/^	Text * _txtAllocatedEngineer, * _txtUnitToProduce, * _txtUnitUp, * _txtUnitDown, * _txtEngineerUp, * _txtEngineerDown, * _txtAllocated, * _txtTodo;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtEngineerUp	Basescape/ManufactureInfoState.h	/^	Text * _txtAllocatedEngineer, * _txtUnitToProduce, * _txtUnitUp, * _txtUnitDown, * _txtEngineerUp, * _txtEngineerDown, * _txtAllocated, * _txtTodo;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtEngineers	Basescape/BaseInfoState.h	/^	Text *_txtPersonnel, *_txtSoldiers, *_txtEngineers, *_txtScientists;$/;"	m	class:OpenXcom::BaseInfoState
_txtEngineers	Basescape/GlobalManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::GlobalManufactureState
_txtEngineers	Basescape/ManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::ManufactureState
_txtError	Menu/OptionsNoAudioState.h	/^	Text *_txtError;$/;"	m	class:OpenXcom::OptionsNoAudioState
_txtFacility	Basescape/BasescapeState.h	/^	Text *_txtFacility, *_txtLocation, *_txtFunds;$/;"	m	class:OpenXcom::BasescapeState
_txtFacility	Basescape/DismantleFacilityState.h	/^	Text *_txtTitle, *_txtFacility, *_txtRefundValue;$/;"	m	class:OpenXcom::DismantleFacilityState
_txtFacility	Basescape/PlaceFacilityState.h	/^	Text *_txtFacility, *_txtCost, *_numCost, *_numResources, *_txtTime, *_numTime, *_txtMaintenance, *_numMaintenance;$/;"	m	class:OpenXcom::PlaceFacilityState
_txtFactor	Geoscape/GraphsState.h	/^	Text *_txtTitle, *_txtFactor;$/;"	m	class:OpenXcom::GraphsState
_txtFailure	Geoscape/MonthlyReportState.h	/^	Text *_txtDesc, *_txtFailure;$/;"	m	class:OpenXcom::MonthlyReportState
_txtFatalWounds	Battlescape/UnitInfoState.h	/^	Text *_txtTimeUnits, *_txtEnergy, *_txtHealth, *_txtFatalWounds, *_txtBravery, *_txtMorale, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::UnitInfoState
_txtFilter	Menu/OptionsVideoState.h	/^	Text *_txtLanguage, *_txtFilter, *_txtGeoScale, *_txtBattleScale;$/;"	m	class:OpenXcom::OptionsVideoState
_txtFireSpeed	Menu/OptionsBattlescapeState.h	/^	Text *_txtScrollSpeed, *_txtFireSpeed, *_txtXcomSpeed, *_txtAlienSpeed;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_txtFiring	Basescape/SoldierInfoState.h	/^	Text *_txtTimeUnits, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::SoldierInfoState
_txtFiring	Battlescape/DebriefingState.h	/^	Text *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill;$/;"	m	class:OpenXcom::DebriefingState
_txtFiring	Battlescape/UnitInfoState.h	/^	Text *_txtTimeUnits, *_txtEnergy, *_txtHealth, *_txtFatalWounds, *_txtBravery, *_txtMorale, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::UnitInfoState
_txtFiring	Geoscape/AllocateTrainingState.h	/^	Text *_txtTu, *_txtStamina, *_txtHealth, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::AllocateTrainingState
_txtFiringAcc	Basescape/CraftPilotSelectState.h	/^	Text *_txtTitle, *_txtName, *_txtFiringAcc, *_txtReactions, *_txtBravery;$/;"	m	class:OpenXcom::CraftPilotSelectState
_txtFiringAcc	Basescape/CraftPilotsState.h	/^	Text *_txtTitle, *_txtFiringAcc, *_txtReactions, *_txtBravery, *_txtPilots;$/;"	m	class:OpenXcom::CraftPilotsState
_txtFiringAcc	Geoscape/DogfightExperienceState.h	/^	Text *_txtTitle, *_txtFiringAcc, *_txtReactions, *_txtBravery, *_txtPilots;$/;"	m	class:OpenXcom::DogfightExperienceState
_txtFollowers	Geoscape/TargetInfoState.h	/^	Text *_txtTargetted, *_txtFollowers, *_txtPenalty;$/;"	m	class:OpenXcom::TargetInfoState
_txtFrontArmor	Battlescape/UnitInfoState.h	/^	Text *_txtFrontArmor, *_txtLeftArmor, *_txtRightArmor, *_txtRearArmor, *_txtUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_txtFuel	Basescape/CraftInfoState.h	/^	Text *_txtDamage, *_txtShield, *_txtFuel, *_txtSkin;$/;"	m	class:OpenXcom::CraftInfoState
_txtFuel	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtFunding	Geoscape/FundingState.h	/^	Text *_txtTitle, *_txtCountry, *_txtFunding, *_txtChange;$/;"	m	class:OpenXcom::FundingState
_txtFunds	Basescape/BasescapeState.h	/^	Text *_txtFacility, *_txtLocation, *_txtFunds;$/;"	m	class:OpenXcom::BasescapeState
_txtFunds	Basescape/GlobalManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::GlobalManufactureState
_txtFunds	Basescape/ManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::ManufactureState
_txtFunds	Basescape/PurchaseState.h	/^	Text *_txtTitle, *_txtFunds, *_txtPurchases, *_txtCost, *_txtQuantity, *_txtSpaceUsed;$/;"	m	class:OpenXcom::PurchaseState
_txtFunds	Basescape/SellState.h	/^	Text *_txtTitle, *_txtSales, *_txtFunds, *_txtQuantity, *_txtSell, *_txtValue, *_txtSpaceUsed;$/;"	m	class:OpenXcom::SellState
_txtFunds	Basescape/TransferBaseState.h	/^	Text *_txtTitle, *_txtFunds, *_txtName, *_txtArea;$/;"	m	class:OpenXcom::TransferBaseState
_txtFunds	Geoscape/GeoscapeState.h	/^	Text *_txtFunds, *_txtHour, *_txtHourSep, *_txtMin, *_txtMinSep, *_txtSec, *_txtWeekday, *_txtDay, *_txtMonth, *_txtYear;$/;"	m	class:OpenXcom::GeoscapeState
_txtGeoScale	Menu/OptionsVideoState.h	/^	Text *_txtLanguage, *_txtFilter, *_txtGeoScale, *_txtBattleScale;$/;"	m	class:OpenXcom::OptionsVideoState
_txtGlobeDetails	Menu/OptionsGeoscapeState.h	/^	Text *_txtGlobeDetails;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_txtHWP	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtHangars	Basescape/BaseInfoState.h	/^	Text *_txtSpace, *_txtQuarters, *_txtStores, *_txtLaboratories, *_txtWorkshops, *_txtContainment, *_txtHangars;$/;"	m	class:OpenXcom::BaseInfoState
_txtHeader	Basescape/PlaceLiftState.h	/^	Text *_txtHeader;$/;"	m	class:OpenXcom::PlaceLiftState
_txtHeading	Geoscape/UfoTrackerState.h	/^	Text *_txtTitle, *_txtObject, *_txtSize, *_txtAltitude, *_txtHeading, *_txtSpeed;$/;"	m	class:OpenXcom::UfoTrackerState
_txtHealth	Basescape/SoldierInfoState.h	/^	Text *_txtTimeUnits, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::SoldierInfoState
_txtHealth	Battlescape/DebriefingState.h	/^	Text *_txtSoldier, *_txtTU, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions;$/;"	m	class:OpenXcom::DebriefingState
_txtHealth	Battlescape/UnitInfoState.h	/^	Text *_txtTimeUnits, *_txtEnergy, *_txtHealth, *_txtFatalWounds, *_txtBravery, *_txtMorale, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::UnitInfoState
_txtHealth	Geoscape/AllocateTrainingState.h	/^	Text *_txtTu, *_txtStamina, *_txtHealth, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::AllocateTrainingState
_txtHour	Geoscape/GeoscapeState.h	/^	Text *_txtFunds, *_txtHour, *_txtHourSep, *_txtMin, *_txtMinSep, *_txtSec, *_txtWeekday, *_txtDay, *_txtMonth, *_txtYear;$/;"	m	class:OpenXcom::GeoscapeState
_txtHourSep	Geoscape/GeoscapeState.h	/^	Text *_txtFunds, *_txtHour, *_txtHourSep, *_txtMin, *_txtMinSep, *_txtSec, *_txtWeekday, *_txtDay, *_txtMonth, *_txtYear;$/;"	m	class:OpenXcom::GeoscapeState
_txtHoursPerUnit	Basescape/ManufactureInfoState.h	/^	Text * _txtTitle, * _txtAvailableEngineer, * _txtAvailableSpace, * _txtHoursPerUnit, * _txtMonthlyProfit;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtHwp	Basescape/CraftsState.h	/^	Text *_txtTitle, *_txtBase, *_txtName, *_txtStatus, *_txtWeapon, *_txtCrew, *_txtHwp;$/;"	m	class:OpenXcom::CraftsState
_txtHyperwave	Geoscape/UfoDetectedState.h	/^	Text *_txtUfo, *_txtDetected, *_txtHyperwave;$/;"	m	class:OpenXcom::UfoDetectedState
_txtInEntrance	Battlescape/AbortMissionState.h	/^	Text *_txtInEntrance, *_txtInExit, *_txtOutside, *_txtAbort;$/;"	m	class:OpenXcom::AbortMissionState
_txtInExit	Battlescape/AbortMissionState.h	/^	Text *_txtInEntrance, *_txtInExit, *_txtOutside, *_txtAbort;$/;"	m	class:OpenXcom::AbortMissionState
_txtIncome	Basescape/MonthlyCostsState.h	/^	Text *_txtTitle, *_txtCost, *_txtQuantity, *_txtTotal, *_txtRental, *_txtSalaries, *_txtIncome, *_txtMaintenance;$/;"	m	class:OpenXcom::MonthlyCostsState
_txtIncome	Geoscape/MonthlyReportState.h	/^	Text *_txtIncome, *_txtMaintenance, *_txtBalance, *_txtBonus;$/;"	m	class:OpenXcom::MonthlyReportState
_txtInfo	Ufopaedia/ArticleStateArmor.h	/^		Text *_txtInfo;$/;"	m	class:OpenXcom::ArticleStateArmor
_txtInfo	Ufopaedia/ArticleStateBaseFacility.h	/^		Text *_txtInfo;$/;"	m	class:OpenXcom::ArticleStateBaseFacility
_txtInfo	Ufopaedia/ArticleStateCraft.h	/^		Text *_txtInfo;$/;"	m	class:OpenXcom::ArticleStateCraft
_txtInfo	Ufopaedia/ArticleStateCraftWeapon.h	/^		Text *_txtInfo;$/;"	m	class:OpenXcom::ArticleStateCraftWeapon
_txtInfo	Ufopaedia/ArticleStateItem.h	/^		Text *_txtInfo;$/;"	m	class:OpenXcom::ArticleStateItem
_txtInfo	Ufopaedia/ArticleStateTFTD.h	/^		Text *_txtInfo;$/;"	m	class:OpenXcom::ArticleStateTFTD
_txtInfo	Ufopaedia/ArticleStateText.h	/^		Text *_txtInfo;$/;"	m	class:OpenXcom::ArticleStateText
_txtInfo	Ufopaedia/ArticleStateTextImage.h	/^		Text *_txtInfo;$/;"	m	class:OpenXcom::ArticleStateTextImage
_txtInfo	Ufopaedia/ArticleStateUfo.h	/^		Text *_txtInfo;$/;"	m	class:OpenXcom::ArticleStateUfo
_txtInfo	Ufopaedia/ArticleStateVehicle.h	/^		Text *_txtInfo;$/;"	m	class:OpenXcom::ArticleStateVehicle
_txtInit	Geoscape/BaseDefenseState.h	/^	Text *_txtTitle, *_txtInit;$/;"	m	class:OpenXcom::BaseDefenseState
_txtInterceptionNumber	Geoscape/DogfightState.h	/^	Text *_txtAmmo[RuleCraft::WeaponMax], *_txtDistance, *_txtStatus, *_txtInterceptionNumber;$/;"	m	class:OpenXcom::DogfightState
_txtInterrogatedAliens	Basescape/ManageAlienContainmentState.h	/^	Text *_txtTitle, *_txtUsed, *_txtAvailable, *_txtValueOfSales, *_txtItem, *_txtLiveAliens, *_txtDeadAliens, *_txtInterrogatedAliens;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_txtIronman	Menu/NewGameState.h	/^	Text *_txtTitle, *_txtIronman;$/;"	m	class:OpenXcom::NewGameState
_txtItem	Basescape/CraftEquipmentState.h	/^	Text *_txtTitle, *_txtItem, *_txtStores, *_txtAvailable, *_txtUsed, *_txtCrew;$/;"	m	class:OpenXcom::CraftEquipmentState
_txtItem	Basescape/GlobalManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::GlobalManufactureState
_txtItem	Basescape/ManageAlienContainmentState.h	/^	Text *_txtTitle, *_txtUsed, *_txtAvailable, *_txtValueOfSales, *_txtItem, *_txtLiveAliens, *_txtDeadAliens, *_txtInterrogatedAliens;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_txtItem	Basescape/ManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::ManufactureState
_txtItem	Basescape/NewManufactureListState.h	/^	Text *_txtTitle, *_txtItem, *_txtCategory;$/;"	m	class:OpenXcom::NewManufactureListState
_txtItem	Basescape/StoresState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtSize, *_txtSpaceUsed;$/;"	m	class:OpenXcom::StoresState
_txtItem	Basescape/TransfersState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtArrivalTime;$/;"	m	class:OpenXcom::TransfersState
_txtItem	Battlescape/CannotReequipState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtCraft;$/;"	m	class:OpenXcom::CannotReequipState
_txtItem	Battlescape/DebriefingState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtScore, *_txtRecovery, *_txtRating;$/;"	m	class:OpenXcom::DebriefingState
_txtItem	Battlescape/InventoryState.h	/^	Text *_txtItem, *_txtAmmo, *_txtWeight, *_txtTus, *_txtStatLine1, *_txtStatLine2, *_txtStatLine3, *_txtStatLine4;$/;"	m	class:OpenXcom::InventoryState
_txtItem	Geoscape/ItemsArrivingState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtDestination;$/;"	m	class:OpenXcom::ItemsArrivingState
_txtItem	Geoscape/ProductionCompleteState.h	/^	Text *_txtMessage, *_txtItem, *_txtQuantity;$/;"	m	class:OpenXcom::ProductionCompleteState
_txtItemNameColumn	Basescape/ManufactureStartState.h	/^	Text *_txtTitle, *_txtManHour, *_txtCost, *_txtWorkSpace, *_txtRequiredItemsTitle, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::ManufactureStartState
_txtItemNameColumn	Basescape/SoldierTransformationState.h	/^	Text *_txtCost, *_txtTransferTime, *_txtRecoveryTime, *_txtRequiredItems, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::SoldierTransformationState
_txtKills	Basescape/SoldierDiaryMissionState.h	/^	Text *_txtTitle, *_txtUFO, *_txtScore, *_txtKills, *_txtLocation, *_txtRace, *_txtDaylight, *_txtDaysWounded;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_txtKills	Basescape/SoldierInfoState.h	/^	Text *_txtRank, *_txtMissions, *_txtKills, *_txtCraft, *_txtRecovery, *_txtPsionic, *_txtDead;$/;"	m	class:OpenXcom::SoldierInfoState
_txtLaboratories	Basescape/BaseInfoState.h	/^	Text *_txtSpace, *_txtQuarters, *_txtStores, *_txtLaboratories, *_txtWorkshops, *_txtContainment, *_txtHangars;$/;"	m	class:OpenXcom::BaseInfoState
_txtLanguage	Menu/OptionsVideoState.h	/^	Text *_txtLanguage, *_txtFilter, *_txtGeoScale, *_txtBattleScale;$/;"	m	class:OpenXcom::OptionsVideoState
_txtLeftArmor	Battlescape/UnitInfoState.h	/^	Text *_txtFrontArmor, *_txtLeftArmor, *_txtRightArmor, *_txtRearArmor, *_txtUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_txtLeftHand	Battlescape/AlienInventoryState.h	/^	Text *_txtLeftHand, *_txtRightHand;$/;"	m	class:OpenXcom::AlienInventoryState
_txtLess	Basescape/ResearchInfoState.h	/^	Text *_txtTitle, *_txtAvailableScientist, *_txtAvailableSpace, *_txtAllocatedScientist, *_txtMore, *_txtLess;$/;"	m	class:OpenXcom::ResearchInfoState
_txtLevel	Battlescape/MiniMapState.h	/^	Text *_txtLevel;$/;"	m	class:OpenXcom::MiniMapState
_txtLiveAliens	Basescape/ManageAlienContainmentState.h	/^	Text *_txtTitle, *_txtUsed, *_txtAvailable, *_txtValueOfSales, *_txtItem, *_txtLiveAliens, *_txtDeadAliens, *_txtInterrogatedAliens;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_txtLocation	Basescape/BasescapeState.h	/^	Text *_txtFacility, *_txtLocation, *_txtFunds;$/;"	m	class:OpenXcom::BasescapeState
_txtLocation	Basescape/SoldierDiaryMissionState.h	/^	Text *_txtTitle, *_txtUFO, *_txtScore, *_txtKills, *_txtLocation, *_txtRace, *_txtDaylight, *_txtDaysWounded;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_txtLongRange	Basescape/BaseInfoState.h	/^	Text *_txtDefense, *_txtShortRange, *_txtLongRange;$/;"	m	class:OpenXcom::BaseInfoState
_txtLost	Basescape/SoldierMemorialState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtDate, *_txtRecruited, *_txtLost;$/;"	m	class:OpenXcom::SoldierMemorialState
_txtMaintenance	Basescape/MonthlyCostsState.h	/^	Text *_txtTitle, *_txtCost, *_txtQuantity, *_txtTotal, *_txtRental, *_txtSalaries, *_txtIncome, *_txtMaintenance;$/;"	m	class:OpenXcom::MonthlyCostsState
_txtMaintenance	Basescape/PlaceFacilityState.h	/^	Text *_txtFacility, *_txtCost, *_numCost, *_numResources, *_txtTime, *_numTime, *_txtMaintenance, *_numMaintenance;$/;"	m	class:OpenXcom::PlaceFacilityState
_txtMaintenance	Geoscape/MonthlyReportState.h	/^	Text *_txtIncome, *_txtMaintenance, *_txtBalance, *_txtBonus;$/;"	m	class:OpenXcom::MonthlyReportState
_txtManHour	Basescape/ManufactureStartState.h	/^	Text *_txtTitle, *_txtManHour, *_txtCost, *_txtWorkSpace, *_txtRequiredItemsTitle, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::ManufactureStartState
_txtMana	Basescape/SoldierInfoState.h	/^	Text *_txtTimeUnits, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::SoldierInfoState
_txtMana	Battlescape/UnitInfoState.h	/^	Text *_txtPsiStrength,  *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::UnitInfoState
_txtMapOptions	Menu/NewBattleState.h	/^	Text *_txtTitle, *_txtMapOptions, *_txtAlienOptions;$/;"	m	class:OpenXcom::NewBattleState
_txtMaster	Menu/ModListState.h	/^	Text *_txtMaster;$/;"	m	class:OpenXcom::ModListState
_txtMaxSpeed	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtMedalInfo	Basescape/SoldierDiaryPerformanceState.h	/^	Text *_txtTitle, *_txtMedalName, *_txtMedalLevel, *_txtMedalInfo;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_txtMedalLevel	Basescape/SoldierDiaryPerformanceState.h	/^	Text *_txtTitle, *_txtMedalName, *_txtMedalLevel, *_txtMedalInfo;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_txtMedalName	Basescape/SoldierDiaryPerformanceState.h	/^	Text *_txtTitle, *_txtMedalName, *_txtMedalLevel, *_txtMedalInfo;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_txtMelee	Basescape/SoldierInfoState.h	/^	Text *_txtTimeUnits, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::SoldierInfoState
_txtMelee	Battlescape/DebriefingState.h	/^	Text *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill;$/;"	m	class:OpenXcom::DebriefingState
_txtMelee	Battlescape/UnitInfoState.h	/^	Text *_txtTimeUnits, *_txtEnergy, *_txtHealth, *_txtFatalWounds, *_txtBravery, *_txtMorale, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::UnitInfoState
_txtMelee	Geoscape/AllocateTrainingState.h	/^	Text *_txtTu, *_txtStamina, *_txtHealth, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::AllocateTrainingState
_txtMessage	Battlescape/NextTurnState.h	/^	Text *_txtTitle, *_txtTurn, *_txtSide, *_txtMessage, *_txtMessage2, *_txtMessage3, *_txtMessageReinforcements;$/;"	m	class:OpenXcom::NextTurnState
_txtMessage	Geoscape/BaseDestroyedState.h	/^	Text *_txtMessage;$/;"	m	class:OpenXcom::BaseDestroyedState
_txtMessage	Geoscape/ConfirmCydoniaState.h	/^	Text *_txtMessage;$/;"	m	class:OpenXcom::ConfirmCydoniaState
_txtMessage	Geoscape/ConfirmLandingState.h	/^	Text *_txtMessage, *_txtBegin;$/;"	m	class:OpenXcom::ConfirmLandingState
_txtMessage	Geoscape/CraftErrorState.h	/^	Text *_txtMessage;$/;"	m	class:OpenXcom::CraftErrorState
_txtMessage	Geoscape/CraftNotEnoughPilotsState.h	/^	Text *_txtMessage;$/;"	m	class:OpenXcom::CraftNotEnoughPilotsState
_txtMessage	Geoscape/DogfightErrorState.h	/^	Text *_txtCraft, *_txtMessage;$/;"	m	class:OpenXcom::DogfightErrorState
_txtMessage	Geoscape/GeoscapeEventState.h	/^	Text *_txtTitle, *_txtMessage;$/;"	m	class:OpenXcom::GeoscapeEventState
_txtMessage	Geoscape/LowFuelState.h	/^	Text *_txtTitle, *_txtMessage;$/;"	m	class:OpenXcom::LowFuelState
_txtMessage	Geoscape/ProductionCompleteState.h	/^	Text *_txtMessage, *_txtItem, *_txtQuantity;$/;"	m	class:OpenXcom::ProductionCompleteState
_txtMessage	Menu/DeleteGameState.h	/^	Text *_txtMessage;$/;"	m	class:OpenXcom::DeleteGameState
_txtMessage	Menu/ErrorMessageState.h	/^	Text *_txtMessage;$/;"	m	class:OpenXcom::ErrorMessageState
_txtMessage2	Battlescape/NextTurnState.h	/^	Text *_txtTitle, *_txtTurn, *_txtSide, *_txtMessage, *_txtMessage2, *_txtMessage3, *_txtMessageReinforcements;$/;"	m	class:OpenXcom::NextTurnState
_txtMessage3	Battlescape/NextTurnState.h	/^	Text *_txtTitle, *_txtTurn, *_txtSide, *_txtMessage, *_txtMessage2, *_txtMessage3, *_txtMessageReinforcements;$/;"	m	class:OpenXcom::NextTurnState
_txtMessageReinforcements	Battlescape/NextTurnState.h	/^	Text *_txtTitle, *_txtTurn, *_txtSide, *_txtMessage, *_txtMessage2, *_txtMessage3, *_txtMessageReinforcements;$/;"	m	class:OpenXcom::NextTurnState
_txtMin	Geoscape/GeoscapeState.h	/^	Text *_txtFunds, *_txtHour, *_txtHourSep, *_txtMin, *_txtMinSep, *_txtSec, *_txtWeekday, *_txtDay, *_txtMonth, *_txtYear;$/;"	m	class:OpenXcom::GeoscapeState
_txtMinSep	Geoscape/GeoscapeState.h	/^	Text *_txtFunds, *_txtHour, *_txtHourSep, *_txtMin, *_txtMinSep, *_txtSec, *_txtWeekday, *_txtDay, *_txtMonth, *_txtYear;$/;"	m	class:OpenXcom::GeoscapeState
_txtMinus	Interface/Slider.h	/^	Text *_txtMinus, *_txtPlus;$/;"	m	class:OpenXcom::Slider
_txtMission	Basescape/SoldierDiaryOverviewState.h	/^	Text *_txtTitle, *_txtMission, *_txtRating, *_txtDate, *_txtDeathTitle, *_txtDeathInfo, *_txtDeathDate;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_txtMission	Menu/NewBattleState.h	/^	Text *_txtMission, *_txtCraft, *_txtDarkness, *_txtTerrain, *_txtDifficulty, *_txtAlienRace, *_txtAlienTech, *_txtDepth;$/;"	m	class:OpenXcom::NewBattleState
_txtMissions	Basescape/SoldierInfoState.h	/^	Text *_txtRank, *_txtMissions, *_txtKills, *_txtCraft, *_txtRecovery, *_txtPsionic, *_txtDead;$/;"	m	class:OpenXcom::SoldierInfoState
_txtMode	Menu/OptionsVideoState.h	/^	Text *_txtMode;$/;"	m	class:OpenXcom::OptionsVideoState
_txtMonth	Geoscape/GeoscapeState.h	/^	Text *_txtFunds, *_txtHour, *_txtHourSep, *_txtMin, *_txtMinSep, *_txtSec, *_txtWeekday, *_txtDay, *_txtMonth, *_txtYear;$/;"	m	class:OpenXcom::GeoscapeState
_txtMonth	Geoscape/MonthlyReportState.h	/^	Text *_txtTitle, *_txtMonth, *_txtRating;$/;"	m	class:OpenXcom::MonthlyReportState
_txtMonthlyProfit	Basescape/ManufactureInfoState.h	/^	Text * _txtTitle, * _txtAvailableEngineer, * _txtAvailableSpace, * _txtHoursPerUnit, * _txtMonthlyProfit;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtMonths	Geoscape/GraphsState.h	/^	TextList *_txtMonths, *_txtYears;$/;"	m	class:OpenXcom::GraphsState
_txtMorale	Battlescape/UnitInfoState.h	/^	Text *_txtTimeUnits, *_txtEnergy, *_txtHealth, *_txtFatalWounds, *_txtBravery, *_txtMorale, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::UnitInfoState
_txtMore	Basescape/ResearchInfoState.h	/^	Text *_txtTitle, *_txtAvailableScientist, *_txtAvailableSpace, *_txtAllocatedScientist, *_txtMore, *_txtLess;$/;"	m	class:OpenXcom::ResearchInfoState
_txtMusicFormat	Menu/OptionsAudioState.h	/^	Text *_txtMusicFormat, *_txtCurrentMusic, *_txtSoundFormat, *_txtCurrentSound, *_txtVideoFormat;$/;"	m	class:OpenXcom::OptionsAudioState
_txtMusicVolume	Menu/OptionsAudioState.h	/^	Text *_txtMusicVolume, *_txtSoundVolume, *_txtUiVolume;$/;"	m	class:OpenXcom::OptionsAudioState
_txtName	Basescape/CraftArmorState.h	/^	Text *_txtTitle, *_txtName, *_txtCraft, *_txtArmor;$/;"	m	class:OpenXcom::CraftArmorState
_txtName	Basescape/CraftPilotSelectState.h	/^	Text *_txtTitle, *_txtName, *_txtFiringAcc, *_txtReactions, *_txtBravery;$/;"	m	class:OpenXcom::CraftPilotSelectState
_txtName	Basescape/CraftSoldiersState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtCraft, *_txtAvailable, *_txtUsed;$/;"	m	class:OpenXcom::CraftSoldiersState
_txtName	Basescape/CraftsState.h	/^	Text *_txtTitle, *_txtBase, *_txtName, *_txtStatus, *_txtWeapon, *_txtCrew, *_txtHwp;$/;"	m	class:OpenXcom::CraftsState
_txtName	Basescape/SoldierMemorialState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtDate, *_txtRecruited, *_txtLost;$/;"	m	class:OpenXcom::SoldierMemorialState
_txtName	Basescape/SoldiersState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtCraft;$/;"	m	class:OpenXcom::SoldiersState
_txtName	Basescape/TransferBaseState.h	/^	Text *_txtTitle, *_txtFunds, *_txtName, *_txtArea;$/;"	m	class:OpenXcom::TransferBaseState
_txtName	Battlescape/AlienInventoryState.h	/^	Text *_txtName;$/;"	m	class:OpenXcom::AlienInventoryState
_txtName	Battlescape/BattlescapeState.h	/^	Text *_txtName;$/;"	m	class:OpenXcom::BattlescapeState
_txtName	Battlescape/InventoryState.h	/^	TextEdit *_txtName;$/;"	m	class:OpenXcom::InventoryState
_txtName	Battlescape/PromotionsState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtBase;$/;"	m	class:OpenXcom::PromotionsState
_txtName	Battlescape/UnitInfoState.h	/^	Text *_txtName;$/;"	m	class:OpenXcom::UnitInfoState
_txtName	Geoscape/AllocatePsiTrainingState.h	/^	Text *_txtTitle, *_txtTraining, *_txtName, *_txtRemaining;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_txtName	Geoscape/AllocateTrainingState.h	/^	Text *_txtTitle, *_txtTraining, *_txtName, *_txtRemaining;$/;"	m	class:OpenXcom::AllocateTrainingState
_txtName	Menu/ListGamesState.h	/^	Text *_txtTitle, *_txtName, *_txtDate, *_txtDelete, *_txtDetails;$/;"	m	class:OpenXcom::ListGamesState
_txtName	Menu/ListLoadOriginalState.h	/^	Text *_txtTitle, *_txtName, *_txtTime, *_txtDate;$/;"	m	class:OpenXcom::ListLoadOriginalState
_txtNoRecord	Basescape/SoldierDiaryMissionState.h	/^	Text *_txtNoRecord;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_txtNumber	Basescape/SoldierTransformationListState.h	/^	Text* _txtTitle, * _txtProject, * _txtNumber, * _txtSoldierNumber;$/;"	m	class:OpenXcom::SoldierTransformationListState
_txtObject	Geoscape/UfoTrackerState.h	/^	Text *_txtTitle, *_txtObject, *_txtSize, *_txtAltitude, *_txtHeading, *_txtSpeed;$/;"	m	class:OpenXcom::UfoTrackerState
_txtOptions	Menu/OptionsAudioState.h	/^	Text* _txtOptions;$/;"	m	class:OpenXcom::OptionsAudioState
_txtOptions	Menu/OptionsBattlescapeState.h	/^	Text *_txtOptions;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_txtOptions	Menu/OptionsGeoscapeState.h	/^	Text *_txtOptions;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_txtOptions	Menu/OptionsVideoState.h	/^	Text *_txtOptions;$/;"	m	class:OpenXcom::OptionsVideoState
_txtOutside	Battlescape/AbortMissionState.h	/^	Text *_txtInEntrance, *_txtInExit, *_txtOutside, *_txtAbort;$/;"	m	class:OpenXcom::AbortMissionState
_txtPalette	Menu/TestState.h	/^	Text *_txtPalette;$/;"	m	class:OpenXcom::TestState
_txtPathPreview	Menu/OptionsBattlescapeState.h	/^	Text *_txtPathPreview;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_txtPatrolling	Geoscape/CraftPatrolState.h	/^	Text *_txtDestination, *_txtPatrolling;$/;"	m	class:OpenXcom::CraftPatrolState
_txtPenalty	Geoscape/TargetInfoState.h	/^	Text *_txtTargetted, *_txtFollowers, *_txtPenalty;$/;"	m	class:OpenXcom::TargetInfoState
_txtPersonnel	Basescape/BaseInfoState.h	/^	Text *_txtPersonnel, *_txtSoldiers, *_txtEngineers, *_txtScientists;$/;"	m	class:OpenXcom::BaseInfoState
_txtPilots	Basescape/CraftPilotsState.h	/^	Text *_txtTitle, *_txtFiringAcc, *_txtReactions, *_txtBravery, *_txtPilots;$/;"	m	class:OpenXcom::CraftPilotsState
_txtPilots	Geoscape/DogfightExperienceState.h	/^	Text *_txtTitle, *_txtFiringAcc, *_txtReactions, *_txtBravery, *_txtPilots;$/;"	m	class:OpenXcom::DogfightExperienceState
_txtPlus	Interface/Slider.h	/^	Text *_txtMinus, *_txtPlus;$/;"	m	class:OpenXcom::Slider
_txtPowerBonus	Ufopaedia/ArticleStateItem.h	/^		Text *_txtPowerBonus;$/;"	m	class:OpenXcom::ArticleStateItem
_txtProduced	Basescape/GlobalManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::GlobalManufactureState
_txtProduced	Basescape/ManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::ManufactureState
_txtProgress	Basescape/GlobalResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::GlobalResearchState
_txtProgress	Basescape/ResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::ResearchState
_txtProgress	Basescape/TechTreeViewerState.h	/^	Text *_txtTitle, *_txtSelectedTopic, *_txtProgress, *_txtCostIndicator;$/;"	m	class:OpenXcom::TechTreeViewerState
_txtProject	Basescape/GlobalResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::GlobalResearchState
_txtProject	Basescape/ResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::ResearchState
_txtProject	Basescape/SoldierTransformationListState.h	/^	Text* _txtTitle, * _txtProject, * _txtNumber, * _txtSoldierNumber;$/;"	m	class:OpenXcom::SoldierTransformationListState
_txtPsiSkill	Basescape/SoldierInfoState.h	/^	Text *_txtTimeUnits, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::SoldierInfoState
_txtPsiSkill	Battlescape/DebriefingState.h	/^	Text *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill;$/;"	m	class:OpenXcom::DebriefingState
_txtPsiSkill	Battlescape/UnitInfoState.h	/^	Text *_txtPsiStrength,  *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::UnitInfoState
_txtPsiSkill	Geoscape/AllocatePsiTrainingState.h	/^	Text *_txtPsiStrength, *_txtPsiSkill;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_txtPsiStrength	Basescape/SoldierInfoState.h	/^	Text *_txtTimeUnits, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::SoldierInfoState
_txtPsiStrength	Battlescape/DebriefingState.h	/^	Text *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill;$/;"	m	class:OpenXcom::DebriefingState
_txtPsiStrength	Battlescape/UnitInfoState.h	/^	Text *_txtPsiStrength,  *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::UnitInfoState
_txtPsiStrength	Geoscape/AllocatePsiTrainingState.h	/^	Text *_txtPsiStrength, *_txtPsiSkill;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_txtPsionic	Basescape/SoldierInfoState.h	/^	Text *_txtRank, *_txtMissions, *_txtKills, *_txtCraft, *_txtRecovery, *_txtPsionic, *_txtDead;$/;"	m	class:OpenXcom::SoldierInfoState
_txtPurchases	Basescape/PurchaseState.h	/^	Text *_txtTitle, *_txtFunds, *_txtPurchases, *_txtCost, *_txtQuantity, *_txtSpaceUsed;$/;"	m	class:OpenXcom::PurchaseState
_txtQuantity	Basescape/CraftWeaponsState.h	/^	Text *_txtTitle, *_txtArmament, *_txtQuantity, *_txtAmmunition, *_txtCurrentWeapon;$/;"	m	class:OpenXcom::CraftWeaponsState
_txtQuantity	Basescape/MonthlyCostsState.h	/^	Text *_txtTitle, *_txtCost, *_txtQuantity, *_txtTotal, *_txtRental, *_txtSalaries, *_txtIncome, *_txtMaintenance;$/;"	m	class:OpenXcom::MonthlyCostsState
_txtQuantity	Basescape/PurchaseState.h	/^	Text *_txtTitle, *_txtFunds, *_txtPurchases, *_txtCost, *_txtQuantity, *_txtSpaceUsed;$/;"	m	class:OpenXcom::PurchaseState
_txtQuantity	Basescape/SellState.h	/^	Text *_txtTitle, *_txtSales, *_txtFunds, *_txtQuantity, *_txtSell, *_txtValue, *_txtSpaceUsed;$/;"	m	class:OpenXcom::SellState
_txtQuantity	Basescape/SoldierArmorState.h	/^	Text *_txtTitle, *_txtType, *_txtQuantity;$/;"	m	class:OpenXcom::SoldierArmorState
_txtQuantity	Basescape/StoresState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtSize, *_txtSpaceUsed;$/;"	m	class:OpenXcom::StoresState
_txtQuantity	Basescape/TransferItemsState.h	/^	Text *_txtTitle, *_txtQuantity, *_txtAmountTransfer, *_txtAmountDestination;$/;"	m	class:OpenXcom::TransferItemsState
_txtQuantity	Basescape/TransfersState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtArrivalTime;$/;"	m	class:OpenXcom::TransfersState
_txtQuantity	Battlescape/CannotReequipState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtCraft;$/;"	m	class:OpenXcom::CannotReequipState
_txtQuantity	Battlescape/DebriefingState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtScore, *_txtRecovery, *_txtRating;$/;"	m	class:OpenXcom::DebriefingState
_txtQuantity	Geoscape/ItemsArrivingState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtDestination;$/;"	m	class:OpenXcom::ItemsArrivingState
_txtQuantity	Geoscape/ProductionCompleteState.h	/^	Text *_txtMessage, *_txtItem, *_txtQuantity;$/;"	m	class:OpenXcom::ProductionCompleteState
_txtQuarters	Basescape/BaseInfoState.h	/^	Text *_txtSpace, *_txtQuarters, *_txtStores, *_txtLaboratories, *_txtWorkshops, *_txtContainment, *_txtHangars;$/;"	m	class:OpenXcom::BaseInfoState
_txtRace	Basescape/SoldierDiaryMissionState.h	/^	Text *_txtTitle, *_txtUFO, *_txtScore, *_txtKills, *_txtLocation, *_txtRace, *_txtDaylight, *_txtDaysWounded;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_txtRank	Basescape/CraftSoldiersState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtCraft, *_txtAvailable, *_txtUsed;$/;"	m	class:OpenXcom::CraftSoldiersState
_txtRank	Basescape/SoldierInfoState.h	/^	Text *_txtRank, *_txtMissions, *_txtKills, *_txtCraft, *_txtRecovery, *_txtPsionic, *_txtDead;$/;"	m	class:OpenXcom::SoldierInfoState
_txtRank	Basescape/SoldierMemorialState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtDate, *_txtRecruited, *_txtLost;$/;"	m	class:OpenXcom::SoldierMemorialState
_txtRank	Basescape/SoldiersState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtCraft;$/;"	m	class:OpenXcom::SoldiersState
_txtRank	Battlescape/PromotionsState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtBase;$/;"	m	class:OpenXcom::PromotionsState
_txtRating	Basescape/SoldierDiaryOverviewState.h	/^	Text *_txtTitle, *_txtMission, *_txtRating, *_txtDate, *_txtDeathTitle, *_txtDeathInfo, *_txtDeathDate;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_txtRating	Battlescape/DebriefingState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtScore, *_txtRecovery, *_txtRating;$/;"	m	class:OpenXcom::DebriefingState
_txtRating	Geoscape/MonthlyReportState.h	/^	Text *_txtTitle, *_txtMonth, *_txtRating;$/;"	m	class:OpenXcom::MonthlyReportState
_txtReactions	Basescape/CraftPilotSelectState.h	/^	Text *_txtTitle, *_txtName, *_txtFiringAcc, *_txtReactions, *_txtBravery;$/;"	m	class:OpenXcom::CraftPilotSelectState
_txtReactions	Basescape/CraftPilotsState.h	/^	Text *_txtTitle, *_txtFiringAcc, *_txtReactions, *_txtBravery, *_txtPilots;$/;"	m	class:OpenXcom::CraftPilotsState
_txtReactions	Basescape/SoldierInfoState.h	/^	Text *_txtTimeUnits, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::SoldierInfoState
_txtReactions	Battlescape/DebriefingState.h	/^	Text *_txtSoldier, *_txtTU, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions;$/;"	m	class:OpenXcom::DebriefingState
_txtReactions	Battlescape/UnitInfoState.h	/^	Text *_txtTimeUnits, *_txtEnergy, *_txtHealth, *_txtFatalWounds, *_txtBravery, *_txtMorale, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::UnitInfoState
_txtReactions	Geoscape/DogfightExperienceState.h	/^	Text *_txtTitle, *_txtFiringAcc, *_txtReactions, *_txtBravery, *_txtPilots;$/;"	m	class:OpenXcom::DogfightExperienceState
_txtRearArmor	Battlescape/UnitInfoState.h	/^	Text *_txtFrontArmor, *_txtLeftArmor, *_txtRightArmor, *_txtRearArmor, *_txtUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_txtRecovery	Basescape/SoldierInfoState.h	/^	Text *_txtRank, *_txtMissions, *_txtKills, *_txtCraft, *_txtRecovery, *_txtPsionic, *_txtDead;$/;"	m	class:OpenXcom::SoldierInfoState
_txtRecovery	Battlescape/DebriefingState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtScore, *_txtRecovery, *_txtRating;$/;"	m	class:OpenXcom::DebriefingState
_txtRecoveryTime	Basescape/SoldierTransformationState.h	/^	Text *_txtCost, *_txtTransferTime, *_txtRecoveryTime, *_txtRequiredItems, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::SoldierTransformationState
_txtRecruited	Basescape/SoldierMemorialState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtDate, *_txtRecruited, *_txtLost;$/;"	m	class:OpenXcom::SoldierMemorialState
_txtRedirect	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtRefundValue	Basescape/DismantleFacilityState.h	/^	Text *_txtTitle, *_txtFacility, *_txtRefundValue;$/;"	m	class:OpenXcom::DismantleFacilityState
_txtRemaining	Geoscape/AllocatePsiTrainingState.h	/^	Text *_txtTitle, *_txtTraining, *_txtName, *_txtRemaining;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_txtRemaining	Geoscape/AllocateTrainingState.h	/^	Text *_txtTitle, *_txtTraining, *_txtName, *_txtRemaining;$/;"	m	class:OpenXcom::AllocateTrainingState
_txtRental	Basescape/MonthlyCostsState.h	/^	Text *_txtTitle, *_txtCost, *_txtQuantity, *_txtTotal, *_txtRental, *_txtSalaries, *_txtIncome, *_txtMaintenance;$/;"	m	class:OpenXcom::MonthlyCostsState
_txtRequired	Basescape/CraftPilotsState.h	/^	Text *_txtRequired;$/;"	m	class:OpenXcom::CraftPilotsState
_txtRequiredItems	Basescape/SoldierTransformationState.h	/^	Text *_txtCost, *_txtTransferTime, *_txtRecoveryTime, *_txtRequiredItems, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::SoldierTransformationState
_txtRequiredItemsTitle	Basescape/ManufactureStartState.h	/^	Text *_txtTitle, *_txtManHour, *_txtCost, *_txtWorkSpace, *_txtRequiredItemsTitle, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::ManufactureStartState
_txtResearch	Geoscape/ResearchCompleteState.h	/^	Text *_txtTitle, *_txtResearch;$/;"	m	class:OpenXcom::ResearchCompleteState
_txtRightArmor	Battlescape/UnitInfoState.h	/^	Text *_txtFrontArmor, *_txtLeftArmor, *_txtRightArmor, *_txtRearArmor, *_txtUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_txtRightHand	Battlescape/AlienInventoryState.h	/^	Text *_txtLeftHand, *_txtRightHand;$/;"	m	class:OpenXcom::AlienInventoryState
_txtSalaries	Basescape/MonthlyCostsState.h	/^	Text *_txtTitle, *_txtCost, *_txtQuantity, *_txtTotal, *_txtRental, *_txtSalaries, *_txtIncome, *_txtMaintenance;$/;"	m	class:OpenXcom::MonthlyCostsState
_txtSales	Basescape/SellState.h	/^	Text *_txtTitle, *_txtSales, *_txtFunds, *_txtQuantity, *_txtSell, *_txtValue, *_txtSpaceUsed;$/;"	m	class:OpenXcom::SellState
_txtSaveFolder	Menu/OptionsFoldersState.h	/^	Text *_txtDataFolder, *_txtUserFolder, *_txtSaveFolder, *_txtConfigFolder;$/;"	m	class:OpenXcom::OptionsFoldersState
_txtSaveFolderPath	Menu/OptionsFoldersState.h	/^	Text *_txtDataFolderPath, *_txtUserFolderPath, *_txtSaveFolderPath, *_txtConfigFolderPath;$/;"	m	class:OpenXcom::OptionsFoldersState
_txtScale	Geoscape/GraphsState.h	/^	std::vector<Text *> _txtScale;$/;"	m	class:OpenXcom::GraphsState
_txtScientists	Basescape/BaseInfoState.h	/^	Text *_txtPersonnel, *_txtSoldiers, *_txtEngineers, *_txtScientists;$/;"	m	class:OpenXcom::BaseInfoState
_txtScientists	Basescape/GlobalResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::GlobalResearchState
_txtScientists	Basescape/ResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::ResearchState
_txtScore	Basescape/SoldierDiaryMissionState.h	/^	Text *_txtTitle, *_txtUFO, *_txtScore, *_txtKills, *_txtLocation, *_txtRace, *_txtDaylight, *_txtDaysWounded;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_txtScore	Battlescape/DebriefingState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtScore, *_txtRecovery, *_txtRating;$/;"	m	class:OpenXcom::DebriefingState
_txtScrollSpeed	Menu/OptionsBattlescapeState.h	/^	Text *_txtScrollSpeed, *_txtFireSpeed, *_txtXcomSpeed, *_txtAlienSpeed;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_txtScrollSpeed	Menu/OptionsGeoscapeState.h	/^	Text *_txtScrollSpeed, *_txtDogfightSpeed, *_txtClockSpeed;$/;"	m	class:OpenXcom::OptionsGeoscapeState
_txtSec	Geoscape/GeoscapeState.h	/^	Text *_txtFunds, *_txtHour, *_txtHourSep, *_txtMin, *_txtMinSep, *_txtSec, *_txtWeekday, *_txtDay, *_txtMonth, *_txtYear;$/;"	m	class:OpenXcom::GeoscapeState
_txtSelectedTopic	Basescape/TechTreeViewerState.h	/^	Text *_txtTitle, *_txtSelectedTopic, *_txtProgress, *_txtCostIndicator;$/;"	m	class:OpenXcom::TechTreeViewerState
_txtSell	Basescape/SellState.h	/^	Text *_txtTitle, *_txtSales, *_txtFunds, *_txtQuantity, *_txtSell, *_txtValue, *_txtSpaceUsed;$/;"	m	class:OpenXcom::SellState
_txtShield	Basescape/CraftInfoState.h	/^	Text *_txtDamage, *_txtShield, *_txtFuel, *_txtSkin;$/;"	m	class:OpenXcom::CraftInfoState
_txtShield	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtShortRange	Basescape/BaseInfoState.h	/^	Text *_txtDefense, *_txtShortRange, *_txtLongRange;$/;"	m	class:OpenXcom::BaseInfoState
_txtShotType	Ufopaedia/ArticleStateItem.h	/^		Text *_txtShotType;$/;"	m	class:OpenXcom::ArticleStateItem
_txtShotType	Ufopaedia/ArticleStateTFTDItem.h	/^		Text *_txtShotType;$/;"	m	class:OpenXcom::ArticleStateTFTDItem
_txtSide	Battlescape/NextTurnState.h	/^	Text *_txtTitle, *_txtTurn, *_txtSide, *_txtMessage, *_txtMessage2, *_txtMessage3, *_txtMessageReinforcements;$/;"	m	class:OpenXcom::NextTurnState
_txtSize	Basescape/StoresState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtSize, *_txtSpaceUsed;$/;"	m	class:OpenXcom::StoresState
_txtSize	Geoscape/UfoTrackerState.h	/^	Text *_txtTitle, *_txtObject, *_txtSize, *_txtAltitude, *_txtHeading, *_txtSpeed;$/;"	m	class:OpenXcom::UfoTrackerState
_txtSkin	Basescape/CraftInfoState.h	/^	Text *_txtDamage, *_txtShield, *_txtFuel, *_txtSkin;$/;"	m	class:OpenXcom::CraftInfoState
_txtSlacking	Geoscape/GeoscapeState.h	/^	Text *_txtSlacking;$/;"	m	class:OpenXcom::GeoscapeState
_txtSlotDate	Menu/ListLoadOriginalState.h	/^	Text *_txtSlotDate[SaveConverter::NUM_SAVES];$/;"	m	class:OpenXcom::ListLoadOriginalState
_txtSlotName	Menu/ListLoadOriginalState.h	/^	Text *_txtSlotName[SaveConverter::NUM_SAVES];$/;"	m	class:OpenXcom::ListLoadOriginalState
_txtSlotTime	Menu/ListLoadOriginalState.h	/^	Text *_txtSlotTime[SaveConverter::NUM_SAVES];$/;"	m	class:OpenXcom::ListLoadOriginalState
_txtSoldier	Basescape/SackSoldierState.h	/^	Text *_txtTitle, *_txtSoldier;$/;"	m	class:OpenXcom::SackSoldierState
_txtSoldier	Battlescape/DebriefingState.h	/^	Text *_txtSoldier, *_txtTU, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions;$/;"	m	class:OpenXcom::DebriefingState
_txtSoldier	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtSoldierNumber	Basescape/SoldierTransformationListState.h	/^	Text* _txtTitle, * _txtProject, * _txtNumber, * _txtSoldierNumber;$/;"	m	class:OpenXcom::SoldierTransformationListState
_txtSoldiers	Basescape/BaseInfoState.h	/^	Text *_txtPersonnel, *_txtSoldiers, *_txtEngineers, *_txtScientists;$/;"	m	class:OpenXcom::BaseInfoState
_txtSoundFormat	Menu/OptionsAudioState.h	/^	Text *_txtMusicFormat, *_txtCurrentMusic, *_txtSoundFormat, *_txtCurrentSound, *_txtVideoFormat;$/;"	m	class:OpenXcom::OptionsAudioState
_txtSoundVolume	Menu/OptionsAudioState.h	/^	Text *_txtMusicVolume, *_txtSoundVolume, *_txtUiVolume;$/;"	m	class:OpenXcom::OptionsAudioState
_txtSpace	Basescape/BaseInfoState.h	/^	Text *_txtSpace, *_txtQuarters, *_txtStores, *_txtLaboratories, *_txtWorkshops, *_txtContainment, *_txtHangars;$/;"	m	class:OpenXcom::BaseInfoState
_txtSpace	Basescape/GlobalManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::GlobalManufactureState
_txtSpace	Basescape/GlobalResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::GlobalResearchState
_txtSpace	Basescape/ManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::ManufactureState
_txtSpace	Basescape/ResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::ResearchState
_txtSpaceUsed	Basescape/PurchaseState.h	/^	Text *_txtTitle, *_txtFunds, *_txtPurchases, *_txtCost, *_txtQuantity, *_txtSpaceUsed;$/;"	m	class:OpenXcom::PurchaseState
_txtSpaceUsed	Basescape/SellState.h	/^	Text *_txtTitle, *_txtSales, *_txtFunds, *_txtQuantity, *_txtSell, *_txtValue, *_txtSpaceUsed;$/;"	m	class:OpenXcom::SellState
_txtSpaceUsed	Basescape/StoresState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtSize, *_txtSpaceUsed;$/;"	m	class:OpenXcom::StoresState
_txtSpeed	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtSpeed	Geoscape/UfoTrackerState.h	/^	Text *_txtTitle, *_txtObject, *_txtSize, *_txtAltitude, *_txtHeading, *_txtSpeed;$/;"	m	class:OpenXcom::UfoTrackerState
_txtStamina	Basescape/SoldierInfoState.h	/^	Text *_txtTimeUnits, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::SoldierInfoState
_txtStamina	Battlescape/DebriefingState.h	/^	Text *_txtSoldier, *_txtTU, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions;$/;"	m	class:OpenXcom::DebriefingState
_txtStamina	Geoscape/AllocateTrainingState.h	/^	Text *_txtTu, *_txtStamina, *_txtHealth, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::AllocateTrainingState
_txtStatLine1	Battlescape/InventoryState.h	/^	Text *_txtItem, *_txtAmmo, *_txtWeight, *_txtTus, *_txtStatLine1, *_txtStatLine2, *_txtStatLine3, *_txtStatLine4;$/;"	m	class:OpenXcom::InventoryState
_txtStatLine2	Battlescape/InventoryState.h	/^	Text *_txtItem, *_txtAmmo, *_txtWeight, *_txtTus, *_txtStatLine1, *_txtStatLine2, *_txtStatLine3, *_txtStatLine4;$/;"	m	class:OpenXcom::InventoryState
_txtStatLine3	Battlescape/InventoryState.h	/^	Text *_txtItem, *_txtAmmo, *_txtWeight, *_txtTus, *_txtStatLine1, *_txtStatLine2, *_txtStatLine3, *_txtStatLine4;$/;"	m	class:OpenXcom::InventoryState
_txtStatLine4	Battlescape/InventoryState.h	/^	Text *_txtItem, *_txtAmmo, *_txtWeight, *_txtTus, *_txtStatLine1, *_txtStatLine2, *_txtStatLine3, *_txtStatLine4;$/;"	m	class:OpenXcom::InventoryState
_txtStats	Ufopaedia/ArticleStateCraft.h	/^		Text *_txtStats;$/;"	m	class:OpenXcom::ArticleStateCraft
_txtStats	Ufopaedia/ArticleStateTFTDCraft.h	/^		Text *_txtStats;$/;"	m	class:OpenXcom::ArticleStateTFTDCraft
_txtStatus	Basescape/CraftsState.h	/^	Text *_txtTitle, *_txtBase, *_txtName, *_txtStatus, *_txtWeapon, *_txtCrew, *_txtHwp;$/;"	m	class:OpenXcom::CraftsState
_txtStatus	Geoscape/DogfightState.h	/^	Text *_txtAmmo[RuleCraft::WeaponMax], *_txtDistance, *_txtStatus, *_txtInterceptionNumber;$/;"	m	class:OpenXcom::DogfightState
_txtStatus	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtStatus	Geoscape/InterceptState.h	/^	Text *_txtTitle, *_txtCraft, *_txtStatus, *_txtBase, *_txtWeapons;$/;"	m	class:OpenXcom::InterceptState
_txtStatus	Menu/LoadGameState.h	/^	Text *_txtStatus;$/;"	m	class:OpenXcom::LoadGameState
_txtStatus	Menu/SaveGameState.h	/^	Text *_txtStatus;$/;"	m	class:OpenXcom::SaveGameState
_txtStores	Basescape/BaseInfoState.h	/^	Text *_txtSpace, *_txtQuarters, *_txtStores, *_txtLaboratories, *_txtWorkshops, *_txtContainment, *_txtHangars;$/;"	m	class:OpenXcom::BaseInfoState
_txtStores	Basescape/CraftEquipmentState.h	/^	Text *_txtTitle, *_txtItem, *_txtStores, *_txtAvailable, *_txtUsed, *_txtCrew;$/;"	m	class:OpenXcom::CraftEquipmentState
_txtStrength	Basescape/SoldierInfoState.h	/^	Text *_txtTimeUnits, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::SoldierInfoState
_txtStrength	Battlescape/DebriefingState.h	/^	Text *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill;$/;"	m	class:OpenXcom::DebriefingState
_txtStrength	Battlescape/UnitInfoState.h	/^	Text *_txtTimeUnits, *_txtEnergy, *_txtHealth, *_txtFatalWounds, *_txtBravery, *_txtMorale, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::UnitInfoState
_txtStrength	Geoscape/AllocateTrainingState.h	/^	Text *_txtTu, *_txtStamina, *_txtHealth, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::AllocateTrainingState
_txtStuns	Basescape/SoldierInfoState.h	/^	Text *_txtStuns;$/;"	m	class:OpenXcom::SoldierInfoState
_txtTU	Battlescape/ActionMenuItem.h	/^	Text *_txtDescription, *_txtAcc, *_txtTU;$/;"	m	class:OpenXcom::ActionMenuItem
_txtTU	Battlescape/DebriefingState.h	/^	Text *_txtSoldier, *_txtTU, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions;$/;"	m	class:OpenXcom::DebriefingState
_txtTarget	Battlescape/BriefingState.h	/^	Text *_txtTitle, *_txtTarget, *_txtCraft, *_txtBriefing;$/;"	m	class:OpenXcom::BriefingState
_txtTarget	Geoscape/ConfirmDestinationState.h	/^	Text *_txtTarget;$/;"	m	class:OpenXcom::ConfirmDestinationState
_txtTargetted	Geoscape/TargetInfoState.h	/^	Text *_txtTargetted, *_txtFollowers, *_txtPenalty;$/;"	m	class:OpenXcom::TargetInfoState
_txtTerrain	Menu/NewBattleState.h	/^	Text *_txtMission, *_txtCraft, *_txtDarkness, *_txtTerrain, *_txtDifficulty, *_txtAlienRace, *_txtAlienTech, *_txtDepth;$/;"	m	class:OpenXcom::NewBattleState
_txtTestCase	Menu/TestState.h	/^	Text *_txtTitle, *_txtTestCase, *_txtDescription;$/;"	m	class:OpenXcom::TestState
_txtText	Menu/ConfirmLoadState.h	/^	Text *_txtText;$/;"	m	class:OpenXcom::ConfirmLoadState
_txtThrowing	Basescape/SoldierInfoState.h	/^	Text *_txtTimeUnits, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::SoldierInfoState
_txtThrowing	Battlescape/DebriefingState.h	/^	Text *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill;$/;"	m	class:OpenXcom::DebriefingState
_txtThrowing	Battlescape/UnitInfoState.h	/^	Text *_txtTimeUnits, *_txtEnergy, *_txtHealth, *_txtFatalWounds, *_txtBravery, *_txtMorale, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::UnitInfoState
_txtThrowing	Geoscape/AllocateTrainingState.h	/^	Text *_txtTu, *_txtStamina, *_txtHealth, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::AllocateTrainingState
_txtTime	Basescape/PlaceFacilityState.h	/^	Text *_txtFacility, *_txtCost, *_numCost, *_numResources, *_txtTime, *_numTime, *_txtMaintenance, *_numMaintenance;$/;"	m	class:OpenXcom::PlaceFacilityState
_txtTime	Menu/ListLoadOriginalState.h	/^	Text *_txtTitle, *_txtName, *_txtTime, *_txtDate;$/;"	m	class:OpenXcom::ListLoadOriginalState
_txtTimeLeft	Basescape/GlobalManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::GlobalManufactureState
_txtTimeLeft	Basescape/ManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::ManufactureState
_txtTimeUnits	Basescape/SoldierInfoState.h	/^	Text *_txtTimeUnits, *_txtStamina, *_txtHealth, *_txtBravery, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength, *_txtPsiStrength, *_txtPsiSkill, *_txtMana;$/;"	m	class:OpenXcom::SoldierInfoState
_txtTimeUnits	Battlescape/UnitInfoState.h	/^	Text *_txtTimeUnits, *_txtEnergy, *_txtHealth, *_txtFatalWounds, *_txtBravery, *_txtMorale, *_txtReactions, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::UnitInfoState
_txtTimer	Menu/OptionsConfirmState.h	/^	Text *_txtTitle, *_txtTimer;$/;"	m	class:OpenXcom::OptionsConfirmState
_txtTitle	Basescape/BuildFacilitiesState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::BuildFacilitiesState
_txtTitle	Basescape/CraftArmorState.h	/^	Text *_txtTitle, *_txtName, *_txtCraft, *_txtArmor;$/;"	m	class:OpenXcom::CraftArmorState
_txtTitle	Basescape/CraftEquipmentLoadState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::CraftEquipmentLoadState
_txtTitle	Basescape/CraftEquipmentSaveState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::CraftEquipmentSaveState
_txtTitle	Basescape/CraftEquipmentState.h	/^	Text *_txtTitle, *_txtItem, *_txtStores, *_txtAvailable, *_txtUsed, *_txtCrew;$/;"	m	class:OpenXcom::CraftEquipmentState
_txtTitle	Basescape/CraftPilotSelectState.h	/^	Text *_txtTitle, *_txtName, *_txtFiringAcc, *_txtReactions, *_txtBravery;$/;"	m	class:OpenXcom::CraftPilotSelectState
_txtTitle	Basescape/CraftPilotsState.h	/^	Text *_txtTitle, *_txtFiringAcc, *_txtReactions, *_txtBravery, *_txtPilots;$/;"	m	class:OpenXcom::CraftPilotsState
_txtTitle	Basescape/CraftSoldiersState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtCraft, *_txtAvailable, *_txtUsed;$/;"	m	class:OpenXcom::CraftSoldiersState
_txtTitle	Basescape/CraftWeaponsState.h	/^	Text *_txtTitle, *_txtArmament, *_txtQuantity, *_txtAmmunition, *_txtCurrentWeapon;$/;"	m	class:OpenXcom::CraftWeaponsState
_txtTitle	Basescape/CraftsState.h	/^	Text *_txtTitle, *_txtBase, *_txtName, *_txtStatus, *_txtWeapon, *_txtCrew, *_txtHwp;$/;"	m	class:OpenXcom::CraftsState
_txtTitle	Basescape/DismantleFacilityState.h	/^	Text *_txtTitle, *_txtFacility, *_txtRefundValue;$/;"	m	class:OpenXcom::DismantleFacilityState
_txtTitle	Basescape/GlobalManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::GlobalManufactureState
_txtTitle	Basescape/GlobalResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::GlobalResearchState
_txtTitle	Basescape/ManageAlienContainmentState.h	/^	Text *_txtTitle, *_txtUsed, *_txtAvailable, *_txtValueOfSales, *_txtItem, *_txtLiveAliens, *_txtDeadAliens, *_txtInterrogatedAliens;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_txtTitle	Basescape/ManufactureDependenciesTreeState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::ManufactureDependenciesTreeState
_txtTitle	Basescape/ManufactureInfoState.h	/^	Text * _txtTitle, * _txtAvailableEngineer, * _txtAvailableSpace, * _txtHoursPerUnit, * _txtMonthlyProfit;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtTitle	Basescape/ManufactureStartState.h	/^	Text *_txtTitle, *_txtManHour, *_txtCost, *_txtWorkSpace, *_txtRequiredItemsTitle, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::ManufactureStartState
_txtTitle	Basescape/ManufactureState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtFunds, *_txtItem, *_txtEngineers, *_txtProduced, *_txtCost, *_txtTimeLeft;$/;"	m	class:OpenXcom::ManufactureState
_txtTitle	Basescape/MonthlyCostsState.h	/^	Text *_txtTitle, *_txtCost, *_txtQuantity, *_txtTotal, *_txtRental, *_txtSalaries, *_txtIncome, *_txtMaintenance;$/;"	m	class:OpenXcom::MonthlyCostsState
_txtTitle	Basescape/NewManufactureListState.h	/^	Text *_txtTitle, *_txtItem, *_txtCategory;$/;"	m	class:OpenXcom::NewManufactureListState
_txtTitle	Basescape/NewResearchListState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::NewResearchListState
_txtTitle	Basescape/PlaceLiftState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::PlaceLiftState
_txtTitle	Basescape/PurchaseState.h	/^	Text *_txtTitle, *_txtFunds, *_txtPurchases, *_txtCost, *_txtQuantity, *_txtSpaceUsed;$/;"	m	class:OpenXcom::PurchaseState
_txtTitle	Basescape/ResearchInfoState.h	/^	Text *_txtTitle, *_txtAvailableScientist, *_txtAvailableSpace, *_txtAllocatedScientist, *_txtMore, *_txtLess;$/;"	m	class:OpenXcom::ResearchInfoState
_txtTitle	Basescape/ResearchState.h	/^	Text *_txtTitle, *_txtAvailable, *_txtAllocated, *_txtSpace, *_txtProject, *_txtScientists, *_txtProgress;$/;"	m	class:OpenXcom::ResearchState
_txtTitle	Basescape/SackSoldierState.h	/^	Text *_txtTitle, *_txtSoldier;$/;"	m	class:OpenXcom::SackSoldierState
_txtTitle	Basescape/SellState.h	/^	Text *_txtTitle, *_txtSales, *_txtFunds, *_txtQuantity, *_txtSell, *_txtValue, *_txtSpaceUsed;$/;"	m	class:OpenXcom::SellState
_txtTitle	Basescape/SoldierArmorState.h	/^	Text *_txtTitle, *_txtType, *_txtQuantity;$/;"	m	class:OpenXcom::SoldierArmorState
_txtTitle	Basescape/SoldierAvatarState.h	/^	Text *_txtTitle, *_txtType;$/;"	m	class:OpenXcom::SoldierAvatarState
_txtTitle	Basescape/SoldierBonusState.h	/^	Text *_txtTitle, *_txtType;$/;"	m	class:OpenXcom::SoldierBonusState
_txtTitle	Basescape/SoldierDiaryMissionState.h	/^	Text *_txtTitle, *_txtUFO, *_txtScore, *_txtKills, *_txtLocation, *_txtRace, *_txtDaylight, *_txtDaysWounded;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_txtTitle	Basescape/SoldierDiaryOverviewState.h	/^	Text *_txtTitle, *_txtMission, *_txtRating, *_txtDate, *_txtDeathTitle, *_txtDeathInfo, *_txtDeathDate;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_txtTitle	Basescape/SoldierDiaryPerformanceState.h	/^	Text *_txtTitle, *_txtMedalName, *_txtMedalLevel, *_txtMedalInfo;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_txtTitle	Basescape/SoldierMemorialState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtDate, *_txtRecruited, *_txtLost;$/;"	m	class:OpenXcom::SoldierMemorialState
_txtTitle	Basescape/SoldierTransformationListState.h	/^	Text* _txtTitle, * _txtProject, * _txtNumber, * _txtSoldierNumber;$/;"	m	class:OpenXcom::SoldierTransformationListState
_txtTitle	Basescape/SoldiersState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtCraft;$/;"	m	class:OpenXcom::SoldiersState
_txtTitle	Basescape/StoresState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtSize, *_txtSpaceUsed;$/;"	m	class:OpenXcom::StoresState
_txtTitle	Basescape/TechTreeSelectState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::TechTreeSelectState
_txtTitle	Basescape/TechTreeViewerState.h	/^	Text *_txtTitle, *_txtSelectedTopic, *_txtProgress, *_txtCostIndicator;$/;"	m	class:OpenXcom::TechTreeViewerState
_txtTitle	Basescape/TransferBaseState.h	/^	Text *_txtTitle, *_txtFunds, *_txtName, *_txtArea;$/;"	m	class:OpenXcom::TransferBaseState
_txtTitle	Basescape/TransferConfirmState.h	/^	Text *_txtTitle, *_txtCost, *_txtTotal;$/;"	m	class:OpenXcom::TransferConfirmState
_txtTitle	Basescape/TransferItemsState.h	/^	Text *_txtTitle, *_txtQuantity, *_txtAmountTransfer, *_txtAmountDestination;$/;"	m	class:OpenXcom::TransferItemsState
_txtTitle	Basescape/TransfersState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtArrivalTime;$/;"	m	class:OpenXcom::TransfersState
_txtTitle	Battlescape/AliensCrashState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::AliensCrashState
_txtTitle	Battlescape/BriefingLightState.h	/^	Text *_txtTitle, *_txtBriefing, *_txtArmors;$/;"	m	class:OpenXcom::BriefingLightState
_txtTitle	Battlescape/BriefingState.h	/^	Text *_txtTitle, *_txtTarget, *_txtCraft, *_txtBriefing;$/;"	m	class:OpenXcom::BriefingState
_txtTitle	Battlescape/CannotReequipState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtCraft;$/;"	m	class:OpenXcom::CannotReequipState
_txtTitle	Battlescape/CommendationLateState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::CommendationLateState
_txtTitle	Battlescape/CommendationState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::CommendationState
_txtTitle	Battlescape/ConfirmEndMissionState.h	/^	Text *_txtTitle, *_txtWounded, *_txtConfirm;$/;"	m	class:OpenXcom::ConfirmEndMissionState
_txtTitle	Battlescape/DebriefingState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtScore, *_txtRecovery, *_txtRating;$/;"	m	class:OpenXcom::DebriefingState
_txtTitle	Battlescape/ExtendedBattlescapeLinksState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_txtTitle	Battlescape/ExtendedInventoryLinksState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_txtTitle	Battlescape/InfoboxOKState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::InfoboxOKState
_txtTitle	Battlescape/InventoryLoadState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::InventoryLoadState
_txtTitle	Battlescape/InventoryPersonalState.h	/^	Text* _txtTitle;$/;"	m	class:OpenXcom::InventoryPersonalState
_txtTitle	Battlescape/InventorySaveState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::InventorySaveState
_txtTitle	Battlescape/NextTurnState.h	/^	Text *_txtTitle, *_txtTurn, *_txtSide, *_txtMessage, *_txtMessage2, *_txtMessage3, *_txtMessageReinforcements;$/;"	m	class:OpenXcom::NextTurnState
_txtTitle	Battlescape/PromotionsState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtBase;$/;"	m	class:OpenXcom::PromotionsState
_txtTitle	Battlescape/TurnDiaryState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::TurnDiaryState
_txtTitle	Geoscape/AlienBaseState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::AlienBaseState
_txtTitle	Geoscape/AllocatePsiTrainingState.h	/^	Text *_txtTitle, *_txtTraining, *_txtName, *_txtRemaining;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_txtTitle	Geoscape/AllocateTrainingState.h	/^	Text *_txtTitle, *_txtTraining, *_txtName, *_txtRemaining;$/;"	m	class:OpenXcom::AllocateTrainingState
_txtTitle	Geoscape/BaseDefenseState.h	/^	Text *_txtTitle, *_txtInit;$/;"	m	class:OpenXcom::BaseDefenseState
_txtTitle	Geoscape/BaseNameState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::BaseNameState
_txtTitle	Geoscape/BuildNewBaseState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::BuildNewBaseState
_txtTitle	Geoscape/DogfightExperienceState.h	/^	Text *_txtTitle, *_txtFiringAcc, *_txtReactions, *_txtBravery, *_txtPilots;$/;"	m	class:OpenXcom::DogfightExperienceState
_txtTitle	Geoscape/ExtendedGeoscapeLinksState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_txtTitle	Geoscape/FundingState.h	/^	Text *_txtTitle, *_txtCountry, *_txtFunding, *_txtChange;$/;"	m	class:OpenXcom::FundingState
_txtTitle	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtTitle	Geoscape/GeoscapeEventState.h	/^	Text *_txtTitle, *_txtMessage;$/;"	m	class:OpenXcom::GeoscapeEventState
_txtTitle	Geoscape/GraphsState.h	/^	Text *_txtTitle, *_txtFactor;$/;"	m	class:OpenXcom::GraphsState
_txtTitle	Geoscape/InterceptState.h	/^	Text *_txtTitle, *_txtCraft, *_txtStatus, *_txtBase, *_txtWeapons;$/;"	m	class:OpenXcom::InterceptState
_txtTitle	Geoscape/ItemsArrivingState.h	/^	Text *_txtTitle, *_txtItem, *_txtQuantity, *_txtDestination;$/;"	m	class:OpenXcom::ItemsArrivingState
_txtTitle	Geoscape/LowFuelState.h	/^	Text *_txtTitle, *_txtMessage;$/;"	m	class:OpenXcom::LowFuelState
_txtTitle	Geoscape/MissionDetectedState.h	/^	Text *_txtTitle, *_txtCity;$/;"	m	class:OpenXcom::MissionDetectedState
_txtTitle	Geoscape/MonthlyReportState.h	/^	Text *_txtTitle, *_txtMonth, *_txtRating;$/;"	m	class:OpenXcom::MonthlyReportState
_txtTitle	Geoscape/NewPossibleCraftState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::NewPossibleCraftState
_txtTitle	Geoscape/NewPossibleFacilityState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::NewPossibleFacilityState
_txtTitle	Geoscape/NewPossibleManufactureState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::NewPossibleManufactureState
_txtTitle	Geoscape/NewPossiblePurchaseState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::NewPossiblePurchaseState
_txtTitle	Geoscape/NewPossibleResearchState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::NewPossibleResearchState
_txtTitle	Geoscape/PsiTrainingState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::PsiTrainingState
_txtTitle	Geoscape/ResearchCompleteState.h	/^	Text *_txtTitle, *_txtResearch;$/;"	m	class:OpenXcom::ResearchCompleteState
_txtTitle	Geoscape/ResearchRequiredState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::ResearchRequiredState
_txtTitle	Geoscape/SelectDestinationState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::SelectDestinationState
_txtTitle	Geoscape/SelectMusicTrackState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::SelectMusicTrackState
_txtTitle	Geoscape/TrainingFinishedState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::TrainingFinishedState
_txtTitle	Geoscape/TrainingState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::TrainingState
_txtTitle	Geoscape/UfoLostState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::UfoLostState
_txtTitle	Geoscape/UfoTrackerState.h	/^	Text *_txtTitle, *_txtObject, *_txtSize, *_txtAltitude, *_txtHeading, *_txtSpeed;$/;"	m	class:OpenXcom::UfoTrackerState
_txtTitle	Menu/AbandonGameState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::AbandonGameState
_txtTitle	Menu/ListGamesState.h	/^	Text *_txtTitle, *_txtName, *_txtDate, *_txtDelete, *_txtDetails;$/;"	m	class:OpenXcom::ListGamesState
_txtTitle	Menu/ListLoadOriginalState.h	/^	Text *_txtTitle, *_txtName, *_txtTime, *_txtDate;$/;"	m	class:OpenXcom::ListLoadOriginalState
_txtTitle	Menu/MainMenuState.h	/^	Text *_txtTitle, *_txtUpdateInfo;$/;"	m	class:OpenXcom::MainMenuState
_txtTitle	Menu/ModConfirmExtendedState.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::ModConfirmExtendedState
_txtTitle	Menu/NewBattleState.h	/^	Text *_txtTitle, *_txtMapOptions, *_txtAlienOptions;$/;"	m	class:OpenXcom::NewBattleState
_txtTitle	Menu/NewGameState.h	/^	Text *_txtTitle, *_txtIronman;$/;"	m	class:OpenXcom::NewGameState
_txtTitle	Menu/NotesState.h	/^	Text* _txtTitle;$/;"	m	class:OpenXcom::NotesState
_txtTitle	Menu/OptionsConfirmState.h	/^	Text *_txtTitle, *_txtTimer;$/;"	m	class:OpenXcom::OptionsConfirmState
_txtTitle	Menu/OptionsDefaultsState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::OptionsDefaultsState
_txtTitle	Menu/PauseState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::PauseState
_txtTitle	Menu/SetWindowedRootState.h	/^	Text *_txtTitle, *_txtWindowedModePositionX, *_txtWindowedModePositionY;$/;"	m	class:OpenXcom::SetWindowedRootState
_txtTitle	Menu/StatisticsState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::StatisticsState
_txtTitle	Menu/TestState.h	/^	Text *_txtTitle, *_txtTestCase, *_txtDescription;$/;"	m	class:OpenXcom::TestState
_txtTitle	Ufopaedia/ArticleStateArmor.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::ArticleStateArmor
_txtTitle	Ufopaedia/ArticleStateBaseFacility.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::ArticleStateBaseFacility
_txtTitle	Ufopaedia/ArticleStateCraft.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::ArticleStateCraft
_txtTitle	Ufopaedia/ArticleStateCraftWeapon.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::ArticleStateCraftWeapon
_txtTitle	Ufopaedia/ArticleStateItem.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::ArticleStateItem
_txtTitle	Ufopaedia/ArticleStateTFTD.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::ArticleStateTFTD
_txtTitle	Ufopaedia/ArticleStateText.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::ArticleStateText
_txtTitle	Ufopaedia/ArticleStateTextImage.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::ArticleStateTextImage
_txtTitle	Ufopaedia/ArticleStateUfo.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::ArticleStateUfo
_txtTitle	Ufopaedia/ArticleStateVehicle.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::ArticleStateVehicle
_txtTitle	Ufopaedia/StatsForNerdsState.h	/^	Text *_txtTitle;$/;"	m	class:OpenXcom::StatsForNerdsState
_txtTitle	Ufopaedia/UfopaediaSelectState.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::UfopaediaSelectState
_txtTitle	Ufopaedia/UfopaediaStartState.h	/^		Text *_txtTitle;$/;"	m	class:OpenXcom::UfopaediaStartState
_txtTodo	Basescape/ManufactureInfoState.h	/^	Text * _txtAllocatedEngineer, * _txtUnitToProduce, * _txtUnitUp, * _txtUnitDown, * _txtEngineerUp, * _txtEngineerDown, * _txtAllocated, * _txtTodo;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtTooltip	Battlescape/BattlescapeState.h	/^	Text *_txtDebug, *_txtTooltip;$/;"	m	class:OpenXcom::BattlescapeState
_txtTooltip	Battlescape/DebriefingState.h	/^	Text *_txtTooltip;$/;"	m	class:OpenXcom::DebriefingState
_txtTooltip	Menu/ModListState.h	/^	Text *_txtTooltip;$/;"	m	class:OpenXcom::ModListState
_txtTooltip	Menu/OptionsBaseState.h	/^	Text *_txtTooltip;$/;"	m	class:OpenXcom::OptionsBaseState
_txtTotal	Basescape/MonthlyCostsState.h	/^	Text *_txtTitle, *_txtCost, *_txtQuantity, *_txtTotal, *_txtRental, *_txtSalaries, *_txtIncome, *_txtMaintenance;$/;"	m	class:OpenXcom::MonthlyCostsState
_txtTotal	Basescape/TransferConfirmState.h	/^	Text *_txtTitle, *_txtCost, *_txtTotal;$/;"	m	class:OpenXcom::TransferConfirmState
_txtTraining	Geoscape/AllocatePsiTrainingState.h	/^	Text *_txtTitle, *_txtTraining, *_txtName, *_txtRemaining;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_txtTraining	Geoscape/AllocateTrainingState.h	/^	Text *_txtTitle, *_txtTraining, *_txtName, *_txtRemaining;$/;"	m	class:OpenXcom::AllocateTrainingState
_txtTransferTime	Basescape/SoldierTransformationState.h	/^	Text *_txtCost, *_txtTransferTime, *_txtRecoveryTime, *_txtRequiredItems, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::SoldierTransformationState
_txtTu	Geoscape/AllocateTrainingState.h	/^	Text *_txtTu, *_txtStamina, *_txtHealth, *_txtFiring, *_txtThrowing, *_txtMelee, *_txtStrength;$/;"	m	class:OpenXcom::AllocateTrainingState
_txtTuCost	Ufopaedia/ArticleStateItem.h	/^		Text *_txtTuCost;$/;"	m	class:OpenXcom::ArticleStateItem
_txtTuCost	Ufopaedia/ArticleStateTFTDItem.h	/^		Text *_txtTuCost;$/;"	m	class:OpenXcom::ArticleStateTFTDItem
_txtTurn	Battlescape/NextTurnState.h	/^	Text *_txtTitle, *_txtTurn, *_txtSide, *_txtMessage, *_txtMessage2, *_txtMessage3, *_txtMessageReinforcements;$/;"	m	class:OpenXcom::NextTurnState
_txtTus	Battlescape/InventoryState.h	/^	Text *_txtItem, *_txtAmmo, *_txtWeight, *_txtTus, *_txtStatLine1, *_txtStatLine2, *_txtStatLine3, *_txtStatLine4;$/;"	m	class:OpenXcom::InventoryState
_txtType	Basescape/SoldierArmorState.h	/^	Text *_txtTitle, *_txtType, *_txtQuantity;$/;"	m	class:OpenXcom::SoldierArmorState
_txtType	Basescape/SoldierAvatarState.h	/^	Text *_txtTitle, *_txtType;$/;"	m	class:OpenXcom::SoldierAvatarState
_txtType	Basescape/SoldierBonusState.h	/^	Text *_txtTitle, *_txtType;$/;"	m	class:OpenXcom::SoldierBonusState
_txtUFO	Basescape/SoldierDiaryMissionState.h	/^	Text *_txtTitle, *_txtUFO, *_txtScore, *_txtKills, *_txtLocation, *_txtRace, *_txtDaylight, *_txtDaysWounded;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_txtUfo	Geoscape/UfoDetectedState.h	/^	Text *_txtUfo, *_txtDetected, *_txtHyperwave;$/;"	m	class:OpenXcom::UfoDetectedState
_txtUiVolume	Menu/OptionsAudioState.h	/^	Text *_txtMusicVolume, *_txtSoundVolume, *_txtUiVolume;$/;"	m	class:OpenXcom::OptionsAudioState
_txtUnderArmor	Battlescape/UnitInfoState.h	/^	Text *_txtFrontArmor, *_txtLeftArmor, *_txtRightArmor, *_txtRearArmor, *_txtUnderArmor;$/;"	m	class:OpenXcom::UnitInfoState
_txtUnitAvailableColumn	Basescape/ManufactureStartState.h	/^	Text *_txtTitle, *_txtManHour, *_txtCost, *_txtWorkSpace, *_txtRequiredItemsTitle, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::ManufactureStartState
_txtUnitAvailableColumn	Basescape/SoldierTransformationState.h	/^	Text *_txtCost, *_txtTransferTime, *_txtRecoveryTime, *_txtRequiredItems, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::SoldierTransformationState
_txtUnitDown	Basescape/ManufactureInfoState.h	/^	Text * _txtAllocatedEngineer, * _txtUnitToProduce, * _txtUnitUp, * _txtUnitDown, * _txtEngineerUp, * _txtEngineerDown, * _txtAllocated, * _txtTodo;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtUnitRequiredColumn	Basescape/ManufactureStartState.h	/^	Text *_txtTitle, *_txtManHour, *_txtCost, *_txtWorkSpace, *_txtRequiredItemsTitle, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::ManufactureStartState
_txtUnitRequiredColumn	Basescape/SoldierTransformationState.h	/^	Text *_txtCost, *_txtTransferTime, *_txtRecoveryTime, *_txtRequiredItems, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::SoldierTransformationState
_txtUnitToProduce	Basescape/ManufactureInfoState.h	/^	Text * _txtAllocatedEngineer, * _txtUnitToProduce, * _txtUnitUp, * _txtUnitDown, * _txtEngineerUp, * _txtEngineerDown, * _txtAllocated, * _txtTodo;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtUnitUp	Basescape/ManufactureInfoState.h	/^	Text * _txtAllocatedEngineer, * _txtUnitToProduce, * _txtUnitUp, * _txtUnitDown, * _txtEngineerUp, * _txtEngineerDown, * _txtAllocated, * _txtTodo;$/;"	m	class:OpenXcom::ManufactureInfoState
_txtUpdateInfo	Menu/MainMenuState.h	/^	Text *_txtTitle, *_txtUpdateInfo;$/;"	m	class:OpenXcom::MainMenuState
_txtUsed	Basescape/CraftEquipmentState.h	/^	Text *_txtTitle, *_txtItem, *_txtStores, *_txtAvailable, *_txtUsed, *_txtCrew;$/;"	m	class:OpenXcom::CraftEquipmentState
_txtUsed	Basescape/CraftSoldiersState.h	/^	Text *_txtTitle, *_txtName, *_txtRank, *_txtCraft, *_txtAvailable, *_txtUsed;$/;"	m	class:OpenXcom::CraftSoldiersState
_txtUsed	Basescape/ManageAlienContainmentState.h	/^	Text *_txtTitle, *_txtUsed, *_txtAvailable, *_txtValueOfSales, *_txtItem, *_txtLiveAliens, *_txtDeadAliens, *_txtInterrogatedAliens;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_txtUserFolder	Menu/OptionsFoldersState.h	/^	Text *_txtDataFolder, *_txtUserFolder, *_txtSaveFolder, *_txtConfigFolder;$/;"	m	class:OpenXcom::OptionsFoldersState
_txtUserFolderPath	Menu/OptionsFoldersState.h	/^	Text *_txtDataFolderPath, *_txtUserFolderPath, *_txtSaveFolderPath, *_txtConfigFolderPath;$/;"	m	class:OpenXcom::OptionsFoldersState
_txtValue	Basescape/SellState.h	/^	Text *_txtTitle, *_txtSales, *_txtFunds, *_txtQuantity, *_txtSell, *_txtValue, *_txtSpaceUsed;$/;"	m	class:OpenXcom::SellState
_txtValueOfSales	Basescape/ManageAlienContainmentState.h	/^	Text *_txtTitle, *_txtUsed, *_txtAvailable, *_txtValueOfSales, *_txtItem, *_txtLiveAliens, *_txtDeadAliens, *_txtInterrogatedAliens;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_txtVideoFormat	Menu/OptionsAudioState.h	/^	Text *_txtMusicFormat, *_txtCurrentMusic, *_txtSoundFormat, *_txtCurrentSound, *_txtVideoFormat;$/;"	m	class:OpenXcom::OptionsAudioState
_txtVisibleUnitTooltip	Battlescape/BattlescapeState.h	/^	std::string _txtVisibleUnitTooltip[VISIBLE_MAX+2];$/;"	m	class:OpenXcom::BattlescapeState
_txtWAmmo	Basescape/CraftInfoState.h	/^	Text *_txtWName[RuleCraft::WeaponMax], *_txtWAmmo[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::CraftInfoState
_txtWName	Basescape/CraftInfoState.h	/^	Text *_txtWName[RuleCraft::WeaponMax], *_txtWAmmo[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::CraftInfoState
_txtWeapon	Basescape/CraftsState.h	/^	Text *_txtTitle, *_txtBase, *_txtName, *_txtStatus, *_txtWeapon, *_txtCrew, *_txtHwp;$/;"	m	class:OpenXcom::CraftsState
_txtWeaponAmmo	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtWeaponName	Geoscape/GeoscapeCraftState.h	/^	Text *_txtTitle, *_txtStatus, *_txtBase, *_txtSpeed, *_txtMaxSpeed, *_txtAltitude, *_txtFuel, *_txtDamage, *_txtShield, *_txtWeaponName[RuleCraft::WeaponMax], *_txtWeaponAmmo[RuleCraft::WeaponMax], *_txtRedirect, *_txtSoldier, *_txtHWP;$/;"	m	class:OpenXcom::GeoscapeCraftState
_txtWeapons	Geoscape/InterceptState.h	/^	Text *_txtTitle, *_txtCraft, *_txtStatus, *_txtBase, *_txtWeapons;$/;"	m	class:OpenXcom::InterceptState
_txtWeekday	Geoscape/GeoscapeState.h	/^	Text *_txtFunds, *_txtHour, *_txtHourSep, *_txtMin, *_txtMinSep, *_txtSec, *_txtWeekday, *_txtDay, *_txtMonth, *_txtYear;$/;"	m	class:OpenXcom::GeoscapeState
_txtWeight	Battlescape/InventoryState.h	/^	Text *_txtItem, *_txtAmmo, *_txtWeight, *_txtTus, *_txtStatLine1, *_txtStatLine2, *_txtStatLine3, *_txtStatLine4;$/;"	m	class:OpenXcom::InventoryState
_txtWeight	Ufopaedia/ArticleStateItem.h	/^		Text *_txtWeight;$/;"	m	class:OpenXcom::ArticleStateItem
_txtWindowedModePositionX	Menu/SetWindowedRootState.h	/^	Text *_txtTitle, *_txtWindowedModePositionX, *_txtWindowedModePositionY;$/;"	m	class:OpenXcom::SetWindowedRootState
_txtWindowedModePositionY	Menu/SetWindowedRootState.h	/^	Text *_txtTitle, *_txtWindowedModePositionX, *_txtWindowedModePositionY;$/;"	m	class:OpenXcom::SetWindowedRootState
_txtWorkSpace	Basescape/ManufactureStartState.h	/^	Text *_txtTitle, *_txtManHour, *_txtCost, *_txtWorkSpace, *_txtRequiredItemsTitle, *_txtItemNameColumn, *_txtUnitRequiredColumn, *_txtUnitAvailableColumn;$/;"	m	class:OpenXcom::ManufactureStartState
_txtWorkshops	Basescape/BaseInfoState.h	/^	Text *_txtSpace, *_txtQuarters, *_txtStores, *_txtLaboratories, *_txtWorkshops, *_txtContainment, *_txtHangars;$/;"	m	class:OpenXcom::BaseInfoState
_txtWounded	Battlescape/ConfirmEndMissionState.h	/^	Text *_txtTitle, *_txtWounded, *_txtConfirm;$/;"	m	class:OpenXcom::ConfirmEndMissionState
_txtXcomSpeed	Menu/OptionsBattlescapeState.h	/^	Text *_txtScrollSpeed, *_txtFireSpeed, *_txtXcomSpeed, *_txtAlienSpeed;$/;"	m	class:OpenXcom::OptionsBattlescapeState
_txtYear	Geoscape/GeoscapeState.h	/^	Text *_txtFunds, *_txtHour, *_txtHourSep, *_txtMin, *_txtMinSep, *_txtSec, *_txtWeekday, *_txtDay, *_txtMonth, *_txtYear;$/;"	m	class:OpenXcom::GeoscapeState
_txtYears	Geoscape/GraphsState.h	/^	TextList *_txtMonths, *_txtYears;$/;"	m	class:OpenXcom::GraphsState
_type	Engine/OptionInfo.h	/^	OptionType _type;$/;"	m	class:OpenXcom::OptionInfo
_type	Engine/Script.cpp	/^	TokenEnum _type;$/;"	m	class:OpenXcom::SelectedToken	file:
_type	Menu/SaveGameState.h	/^	SaveType _type;$/;"	m	class:OpenXcom::SaveGameState
_type	Mod/AlienDeployment.h	/^	std::string _type;$/;"	m	class:OpenXcom::AlienDeployment
_type	Mod/Armor.h	/^	std::string _type, _spriteSheet, _spriteInv, _corpseGeoName, _storeItemName, _specWeaponName;$/;"	m	class:OpenXcom::Armor
_type	Mod/CustomPalettes.h	/^	std::string _type, _target, _file;$/;"	m	class:OpenXcom::CustomPalettes
_type	Mod/ExtraSounds.h	/^	std::string _type;$/;"	m	class:OpenXcom::ExtraSounds
_type	Mod/ExtraSprites.h	/^	std::string _type;$/;"	m	class:OpenXcom::ExtraSprites
_type	Mod/MapScript.h	/^	MapScriptCommand _type;$/;"	m	class:OpenXcom::MapScript
_type	Mod/RuleAlienMission.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleAlienMission
_type	Mod/RuleArcScript.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleArcScript
_type	Mod/RuleBaseFacility.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleBaseFacility
_type	Mod/RuleCommendations.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleCommendations
_type	Mod/RuleCountry.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleCountry
_type	Mod/RuleCraft.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleCraft
_type	Mod/RuleCraftWeapon.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleCraftWeapon
_type	Mod/RuleEnviroEffects.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleEnviroEffects
_type	Mod/RuleEventScript.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleEventScript
_type	Mod/RuleInterface.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleInterface
_type	Mod/RuleInventory.h	/^	InventoryType _type;$/;"	m	class:OpenXcom::RuleInventory
_type	Mod/RuleItem.h	/^	std::string _type, _name, _nameAsAmmo; \/\/ two types of objects can have the same name$/;"	m	class:OpenXcom::RuleItem
_type	Mod/RuleItemCategory.h	/^	std::string _type, _replaceBy;$/;"	m	class:OpenXcom::RuleItemCategory
_type	Mod/RuleMissionScript.h	/^	std::string _type, _varName;$/;"	m	class:OpenXcom::RuleMissionScript
_type	Mod/RuleMusic.h	/^	std::string _type, _name;$/;"	m	class:OpenXcom::RuleMusic
_type	Mod/RuleRegion.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleRegion
_type	Mod/RuleSkill.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleSkill
_type	Mod/RuleSoldier.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleSoldier
_type	Mod/RuleStartingCondition.h	/^	std::string _type;$/;"	m	class:OpenXcom::RuleStartingCondition
_type	Mod/RuleUfo.h	/^	std::string _type, _size;$/;"	m	class:OpenXcom::RuleUfo
_type	Mod/SoundDefinition.h	/^	std::string _type;$/;"	m	class:OpenXcom::SoundDefinition
_type	Mod/Unit.h	/^	std::string _type;$/;"	m	class:OpenXcom::Unit
_type	Savegame/AlienMission.cpp	/^	std::string _type;$/;"	m	class:OpenXcom::matchById	file:
_type	Savegame/BattleUnit.h	/^	std::string _type;$/;"	m	class:OpenXcom::BattleUnit
_type	Savegame/CraftWeaponProjectile.h	/^	CraftWeaponProjectileType _type;$/;"	m	class:OpenXcom::CraftWeaponProjectile
_type	Savegame/Node.h	/^	int _type;      \/\/ 19 = Unit type in Mapview 2$/;"	m	class:OpenXcom::Node
_type	Savegame/SoldierDiary.h	/^	std::string  _type, _noun;$/;"	m	class:OpenXcom::SoldierCommendations
_typeId	Ufopaedia/StatsForNerdsState.h	/^	UfopaediaTypeId _typeId;$/;"	m	class:OpenXcom::StatsForNerdsState
_type_id	Mod/ArticleDefinition.h	/^		UfopaediaTypeId _type_id;$/;"	m	class:OpenXcom::ArticleDefinition
_ufo	Battlescape/BattlescapeGenerator.h	/^	Ufo *_ufo;$/;"	m	class:OpenXcom::BattlescapeGenerator
_ufo	Geoscape/BaseDefenseState.h	/^	Ufo *_ufo;$/;"	m	class:OpenXcom::BaseDefenseState
_ufo	Geoscape/DogfightState.h	/^	Ufo *_ufo;$/;"	m	class:OpenXcom::DogfightState
_ufo	Geoscape/UfoDetectedState.h	/^	Ufo *_ufo;$/;"	m	class:OpenXcom::UfoDetectedState
_ufoBeamWidthParameter	Mod/Mod.h	/^	int _ufoGlancingHitThreshold, _ufoBeamWidthParameter;$/;"	m	class:OpenXcom::Mod
_ufoBlobs	Geoscape/DogfightState.cpp	/^const int DogfightState::_ufoBlobs[8][13][13] =$/;"	m	class:OpenXcom::DogfightState	file:
_ufoBlobs	Geoscape/DogfightState.h	/^	static const int _ufoBlobs[8][13][13];$/;"	m	class:OpenXcom::DogfightState
_ufoBreakingOff	Geoscape/DogfightState.h	/^	bool _end, _endUfoHandled, _endCraftHandled, _ufoBreakingOff, _destroyUfo, _destroyCraft, _weaponEnabled[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_ufoDamagePercentage	Battlescape/BattlescapeGenerator.h	/^	int _ufoDamagePercentage;$/;"	m	class:OpenXcom::BattlescapeGenerator
_ufoDeployed	Battlescape/BattlescapeGenerator.h	/^	bool _allowAutoLoadout, _baseInventory, _generateFuel, _craftDeployed, _ufoDeployed;$/;"	m	class:OpenXcom::BattlescapeGenerator
_ufoEscapeCountdownCoefficients	Mod/Mod.h	/^	std::vector<int> _ufoEscapeCountdownCoefficients;$/;"	m	class:OpenXcom::Mod
_ufoFiringRateCoefficients	Mod/Mod.h	/^	std::vector<int> _ufoFiringRateCoefficients;$/;"	m	class:OpenXcom::Mod
_ufoGlancingHitThreshold	Mod/Mod.h	/^	int _ufoGlancingHitThreshold, _ufoBeamWidthParameter;$/;"	m	class:OpenXcom::Mod
_ufoIsAttacking	Geoscape/DogfightState.h	/^	bool _ufoIsAttacking, _disableDisengage, _disableCautious, _craftIsDefenseless, _selfDestructPressed;$/;"	m	class:OpenXcom::DogfightState
_ufoIsInstalled	Engine/Options.cpp	/^static bool _ufoIsInstalled()$/;"	f	namespace:OpenXcom::Options
_ufoName	Mod/MapScript.h	/^	std::string _ufoName, _craftName;$/;"	m	class:OpenXcom::MapScript
_ufoPos	Battlescape/BattlescapeGenerator.h	/^	std::vector<SDL_Rect> _ufoPos;$/;"	m	class:OpenXcom::BattlescapeGenerator
_ufoScripts	Mod/RuleUfo.h	/^	ModScript::UfoScripts::Container _ufoScripts;$/;"	m	class:OpenXcom::RuleUfo
_ufoSize	Geoscape/DogfightState.h	/^	int _ufoSize, _craftHeight, _currentCraftDamageColor, _interceptionNumber;$/;"	m	class:OpenXcom::DogfightState
_ufoTractorBeamSizeModifiers	Mod/Mod.h	/^	int _ufoTractorBeamSizeModifiers[5];$/;"	m	class:OpenXcom::Mod
_ufoTrajectories	Mod/Mod.h	/^	std::map<std::string, UfoTrajectory *> _ufoTrajectories;$/;"	m	class:OpenXcom::Mod
_ufoZ	Battlescape/BattlescapeGenerator.h	/^	std::vector<int> _ufoZ;$/;"	m	class:OpenXcom::BattlescapeGenerator
_ufopaedia	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_ufopaediaArticles	Mod/Mod.h	/^	std::map<std::string, ArticleDefinition*> _ufopaediaArticles;$/;"	m	class:OpenXcom::Mod
_ufopaediaCatIndex	Mod/Mod.h	/^	std::vector<std::string> _aliensIndex, _enviroEffectsIndex, _startingConditionsIndex, _deploymentsIndex, _armorsIndex, _ufopaediaIndex, _ufopaediaCatIndex, _researchIndex, _manufactureIndex;$/;"	m	class:OpenXcom::Mod
_ufopaediaIndex	Mod/Mod.h	/^	std::vector<std::string> _aliensIndex, _enviroEffectsIndex, _startingConditionsIndex, _deploymentsIndex, _armorsIndex, _ufopaediaIndex, _ufopaediaCatIndex, _researchIndex, _manufactureIndex;$/;"	m	class:OpenXcom::Mod
_ufopaediaListOrder	Mod/Mod.h	/^	int _soldierBonusListOrder, _transformationListOrder, _ufopaediaListOrder, _invListOrder, _soldierListOrder;$/;"	m	class:OpenXcom::Mod
_ufopaediaSections	Mod/Mod.h	/^	std::map<std::string, int> _ufopaediaSections;$/;"	m	class:OpenXcom::Mod
_ufopediaRuleStatus	Savegame/SavedGame.h	/^	std::map<std::string, int> _ufopediaRuleStatus;$/;"	m	class:OpenXcom::SavedGame
_ufopediaType	Mod/Armor.h	/^	std::string _ufopediaType;$/;"	m	class:OpenXcom::Armor
_ufos	Mod/Mod.h	/^	std::map<std::string, RuleUfo*> _ufos;$/;"	m	class:OpenXcom::Mod
_ufos	Mod/RuleConverter.h	/^	std::vector<std::string> _markers, _countries, _regions, _facilities, _items, _crews, _crafts, _ufos, _craftWeapons, _missions, _armor, _alienRaces, _alienRanks, _research, _manufacture, _ufopaedia;$/;"	m	class:OpenXcom::RuleConverter
_ufos	Savegame/SavedGame.h	/^	std::vector<Ufo*> _ufos;$/;"	m	class:OpenXcom::SavedGame
_ufosIndex	Mod/Mod.h	/^	std::vector<std::string> _countriesIndex, _extraGlobeLabelsIndex, _regionsIndex, _facilitiesIndex, _craftsIndex, _craftWeaponsIndex, _itemCategoriesIndex, _itemsIndex, _invsIndex, _ufosIndex;$/;"	m	class:OpenXcom::Mod
_unconciousTotal	Savegame/SoldierDiary.h	/^	int _daysWoundedTotal, _totalShotByFriendlyCounter, _totalShotFriendlyCounter, _loneSurvivorTotal, _monthsService, _unconciousTotal, _shotAtCounterTotal,$/;"	m	class:OpenXcom::SoldierDiary
_underArmor	Mod/Armor.h	/^	int _frontArmor, _sideArmor, _leftArmorDiff, _rearArmor, _underArmor, _drawingRoutine;$/;"	m	class:OpenXcom::Armor
_underArmor	Mod/RuleSoldierBonus.h	/^	int _frontArmor, _sideArmor, _leftArmorDiff, _rearArmor, _underArmor;$/;"	m	class:OpenXcom::RuleSoldierBonus
_underwaterOnly	Mod/RuleCraftWeapon.h	/^	bool _underwaterOnly;$/;"	m	class:OpenXcom::RuleCraftWeapon
_underwaterOnly	Mod/RuleItem.h	/^	bool _LOSRequired, _underwaterOnly, _landOnly, _psiReqiured, _manaRequired;$/;"	m	class:OpenXcom::RuleItem
_underwaterThrowRange	Mod/RuleItem.h	/^	int _throwRange, _underwaterThrowRange;$/;"	m	class:OpenXcom::RuleItem
_undetectable	Mod/RuleCraft.h	/^	bool _keepCraftAfterFailedMission, _allowLanding, _spacecraft, _notifyWhenRefueled, _autoPatrol, _undetectable;$/;"	m	class:OpenXcom::RuleCraft
_uniqueID	Savegame/AlienMission.h	/^	int _uniqueID, _missionSiteZone;$/;"	m	class:OpenXcom::AlienMission
_uniqueId	Savegame/Ufo.h	/^	int _uniqueId;$/;"	m	class:OpenXcom::Ufo
_unit	Battlescape/AIModule.h	/^	BattleUnit *_unit;$/;"	m	class:OpenXcom::AIModule
_unit	Battlescape/MedikitView.h	/^	BattleUnit *_unit;$/;"	m	class:OpenXcom::MedikitView
_unit	Battlescape/MeleeAttackBState.h	/^	BattleUnit *_unit, *_target;$/;"	m	class:OpenXcom::MeleeAttackBState
_unit	Battlescape/Pathfinding.h	/^	BattleUnit *_unit;$/;"	m	class:OpenXcom::Pathfinding
_unit	Battlescape/ProjectileFlyBState.h	/^	BattleUnit *_unit;$/;"	m	class:OpenXcom::ProjectileFlyBState
_unit	Battlescape/PsiAttackBState.h	/^	BattleUnit *_unit, *_target;$/;"	m	class:OpenXcom::PsiAttackBState
_unit	Battlescape/ScannerView.h	/^	BattleUnit *_unit;$/;"	m	class:OpenXcom::ScannerView
_unit	Battlescape/UnitDieBState.h	/^	BattleUnit *_unit;$/;"	m	class:OpenXcom::UnitDieBState
_unit	Battlescape/UnitInfoState.h	/^	BattleUnit *_unit;$/;"	m	class:OpenXcom::UnitInfoState
_unit	Battlescape/UnitPanicBState.h	/^	BattleUnit *_unit;$/;"	m	class:OpenXcom::UnitPanicBState
_unit	Battlescape/UnitSprite.h	/^	const BattleUnit *_unit;$/;"	m	class:OpenXcom::UnitSprite
_unit	Battlescape/UnitTurnBState.h	/^	BattleUnit *_unit;$/;"	m	class:OpenXcom::UnitTurnBState
_unit	Battlescape/UnitWalkBState.h	/^	BattleUnit *_unit;$/;"	m	class:OpenXcom::UnitWalkBState
_unit	Savegame/BattleItem.h	/^	BattleUnit *_unit;$/;"	m	class:OpenXcom::BattleItem
_unit	Savegame/Tile.h	/^	BattleUnit *_unit = nullptr;$/;"	m	class:OpenXcom::Tile
_unitDying	Battlescape/Map.h	/^	bool _unitDying, _smoothCamera, _smoothingEngaged, _flashScreen;$/;"	m	class:OpenXcom::Map
_unitRules	Savegame/BattleUnit.h	/^	Unit *_unitRules;$/;"	m	class:OpenXcom::BattleUnit
_unitSequence	Battlescape/BattlescapeGenerator.h	/^	int _unitSequence;$/;"	m	class:OpenXcom::BattlescapeGenerator
_unitSurface	Battlescape/UnitSprite.h	/^	const SurfaceSet *_unitSurface, *_itemSurface, *_fireSurface, *_breathSurface, *_facingArrowSurface;$/;"	m	class:OpenXcom::UnitSprite
_units	Mod/Armor.h	/^	std::vector<const RuleSoldier*> _units;$/;"	m	class:OpenXcom::Armor
_units	Mod/Mod.h	/^	std::map<std::string, Unit*> _units;$/;"	m	class:OpenXcom::Mod
_units	Savegame/SavedBattleGame.h	/^	std::vector<BattleUnit*> _units;$/;"	m	class:OpenXcom::SavedBattleGame
_unitsFalling	Savegame/SavedBattleGame.h	/^	bool _unitsFalling, _cheating;$/;"	m	class:OpenXcom::SavedBattleGame
_unitsNames	Mod/Armor.h	/^	std::vector<std::string> _unitsNames;$/;"	m	class:OpenXcom::Armor
_unitsSpottedThisTurn	Savegame/BattleUnit.h	/^	std::vector<BattleUnit *> _visibleUnits, _unitsSpottedThisTurn;$/;"	m	class:OpenXcom::BattleUnit
_unlockedResearchOnDespawn	Mod/AlienDeployment.h	/^	std::string _unlockedResearchOnSuccess, _unlockedResearchOnFailure, _unlockedResearchOnDespawn;$/;"	m	class:OpenXcom::AlienDeployment
_unlockedResearchOnFailure	Mod/AlienDeployment.h	/^	std::string _unlockedResearchOnSuccess, _unlockedResearchOnFailure, _unlockedResearchOnDespawn;$/;"	m	class:OpenXcom::AlienDeployment
_unlockedResearchOnSuccess	Mod/AlienDeployment.h	/^	std::string _unlockedResearchOnSuccess, _unlockedResearchOnFailure, _unlockedResearchOnDespawn;$/;"	m	class:OpenXcom::AlienDeployment
_unlocks	Mod/RuleResearch.h	/^	std::vector<const RuleResearch*> _dependencies, _unlocks, _disables, _reenables, _getOneFree, _requires;$/;"	m	class:OpenXcom::RuleResearch
_unlocksName	Mod/RuleResearch.h	/^	std::vector<std::string> _dependenciesName, _unlocksName, _disablesName, _reenablesName, _getOneFreeName, _requiresName;$/;"	m	class:OpenXcom::RuleResearch
_unmanned	Mod/RuleUfo.h	/^	bool _unmanned;$/;"	m	class:OpenXcom::RuleUfo
_unprimeActionMessage	Mod/RuleItem.h	/^	std::string _medikitActionName, _psiAttackName, _primeActionName, _unprimeActionName, _primeActionMessage, _unprimeActionMessage;$/;"	m	class:OpenXcom::RuleItem
_unprimeActionName	Mod/RuleItem.h	/^	std::string _medikitActionName, _psiAttackName, _primeActionName, _unprimeActionName, _primeActionMessage, _unprimeActionMessage;$/;"	m	class:OpenXcom::RuleItem
_unprimeSound	Mod/RuleItem.h	/^	std::vector<int> _reloadSound, _primeSound, _unprimeSound;$/;"	m	class:OpenXcom::RuleItem
_up	Interface/TextList.h	/^	ArrowButton *_up, *_down;$/;"	m	class:OpenXcom::TextList
_update	Engine/Game.h	/^	bool _quit, _init, _update;$/;"	m	class:OpenXcom::Game
_updateCheck	Menu/MainMenuState.h	/^	bool _updateCheck;$/;"	m	class:OpenXcom::GoToMainMenuState
_upgradeRace	Mod/AlienDeployment.h	/^	std::string _upgradeRace;$/;"	m	class:OpenXcom::AlienDeployment
_upperBoundAtMaxStats	Mod/RuleSoldierTransformation.h	/^	bool _lowerBoundAtMinStats, _upperBoundAtMaxStats, _upperBoundAtStatCaps;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_upperBoundAtStatCaps	Mod/RuleSoldierTransformation.h	/^	bool _lowerBoundAtMinStats, _upperBoundAtMaxStats, _upperBoundAtStatCaps;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_upperBoundType	Mod/RuleSoldierTransformation.h	/^	int _upperBoundType;$/;"	m	class:OpenXcom::RuleSoldierTransformation
_url	Engine/ModInfo.h	/^	std::string _name, _desc, _author, _url, _id, _master;$/;"	m	class:OpenXcom::ModInfo
_useAllStartTiles	Mod/RuleCraft.h	/^	bool _useAllStartTiles;$/;"	m	class:OpenXcom::RuleCraft
_useCustomSound	Geoscape/MultipleTargetsState.h	/^	bool _useCustomSound;$/;"	m	class:OpenXcom::MultipleTargetsState
_useInternalAudio	Engine/FlcPlayer.h	/^	bool _hasAudio, _useInternalAudio;$/;"	m	class:OpenXcom::FlcPlayer
_useTable	Mod/RuleMissionScript.h	/^	bool _useTable, _siteType;$/;"	m	class:OpenXcom::RuleMissionScript
_useUfoAudioSequence	Menu/VideoState.h	/^	bool _useUfoAudioSequence;$/;"	m	class:OpenXcom::VideoState
_useUfoAudioSequence	Mod/RuleVideo.h	/^	bool _useUfoAudioSequence;$/;"	m	class:OpenXcom::RuleVideo
_usedCategoryStrings	Basescape/CraftEquipmentState.h	/^	std::map<std::string, bool> _usedCategoryStrings;$/;"	m	class:OpenXcom::CraftEquipmentState
_usedValues	Engine/Collections.h	/^		std::unordered_map<std::string, size_t> _usedValues;$/;"	m	class:OpenXcom::Collections::NamesToIndex
_userFolder	Engine/Options.cpp	/^std::string _userFolder;$/;"	m	namespace:OpenXcom::Options	file:
_userList	Engine/Options.cpp	/^std::vector<std::string> _userList;$/;"	m	namespace:OpenXcom::Options	file:
_userNotes	Savegame/SavedGame.h	/^	std::vector<std::string> _userNotes;$/;"	m	class:OpenXcom::SavedGame
_utileColor	Mod/Armor.h	/^	std::vector<int> _faceColor, _hairColor, _utileColor, _rankColor;$/;"	m	class:OpenXcom::Armor
_utileColorGroup	Mod/Armor.h	/^	int _faceColorGroup, _hairColorGroup, _utileColorGroup, _rankColorGroup;$/;"	m	class:OpenXcom::Armor
_valign	Interface/Text.h	/^	TextVAlign _valign;$/;"	m	class:OpenXcom::Text
_value	Interface/Bar.h	/^	double _scale, _max, _value, _value2;$/;"	m	class:OpenXcom::Bar
_value	Interface/NumberText.h	/^	unsigned int _value;$/;"	m	class:OpenXcom::NumberText
_value	Interface/Slider.h	/^	int _min, _max, _value;$/;"	m	class:OpenXcom::Slider
_value	Interface/TextEdit.h	/^	UString _value;$/;"	m	class:OpenXcom::TextEdit
_value	Mod/RuleSoldier.h	/^	int _femaleFrequency, _value, _transferTime, _moraleLossWhenKilled;$/;"	m	class:OpenXcom::RuleSoldier
_value	Mod/Unit.h	/^	int _value, _moraleLossWhenKilled, _moveSound;$/;"	m	class:OpenXcom::Unit
_value	Savegame/BattleUnit.h	/^	int _value, _moveSound;$/;"	m	class:OpenXcom::BattleUnit
_value2	Interface/Bar.h	/^	double _scale, _max, _value, _value2;$/;"	m	class:OpenXcom::Bar
_vanillaCategories	Basescape/PurchaseState.h	/^	size_t _vanillaCategories;$/;"	m	class:OpenXcom::PurchaseState
_vanillaCategories	Basescape/SellState.h	/^	size_t _vanillaCategories;$/;"	m	class:OpenXcom::SellState
_vanillaCategories	Basescape/TransferItemsState.h	/^	size_t _vanillaCategories;$/;"	m	class:OpenXcom::TransferItemsState
_vanillaPalettes	Menu/TestState.h	/^	std::map<int, Palette*> _vanillaPalettes;$/;"	m	class:OpenXcom::TestState
_vaporColor	Battlescape/Projectile.h	/^	int _vaporColor, _vaporDensity, _vaporProbability;$/;"	m	class:OpenXcom::Projectile
_vaporColor	Mod/RuleItem.h	/^	int _meleePower, _specialType, _vaporColor, _vaporDensity, _vaporProbability;$/;"	m	class:OpenXcom::RuleItem
_vaporColorSurface	Mod/RuleItem.h	/^	int _vaporColorSurface, _vaporDensitySurface, _vaporProbabilitySurface;$/;"	m	class:OpenXcom::RuleItem
_vaporDensity	Battlescape/Projectile.h	/^	int _vaporColor, _vaporDensity, _vaporProbability;$/;"	m	class:OpenXcom::Projectile
_vaporDensity	Mod/RuleItem.h	/^	int _meleePower, _specialType, _vaporColor, _vaporDensity, _vaporProbability;$/;"	m	class:OpenXcom::RuleItem
_vaporDensitySurface	Mod/RuleItem.h	/^	int _vaporColorSurface, _vaporDensitySurface, _vaporProbabilitySurface;$/;"	m	class:OpenXcom::RuleItem
_vaporParticles	Battlescape/Map.h	/^	std::vector<std::vector<Particle>> _vaporParticles;$/;"	m	class:OpenXcom::Map
_vaporParticlesInit	Battlescape/Map.h	/^	std::vector<std::vector<Particle>> _vaporParticlesInit;$/;"	m	class:OpenXcom::Map
_vaporProbability	Battlescape/Projectile.h	/^	int _vaporColor, _vaporDensity, _vaporProbability;$/;"	m	class:OpenXcom::Projectile
_vaporProbability	Mod/RuleItem.h	/^	int _meleePower, _specialType, _vaporColor, _vaporDensity, _vaporProbability;$/;"	m	class:OpenXcom::RuleItem
_vaporProbabilitySurface	Mod/RuleItem.h	/^	int _vaporColorSurface, _vaporDensitySurface, _vaporProbabilitySurface;$/;"	m	class:OpenXcom::RuleItem
_varName	Mod/RuleMissionScript.h	/^	std::string _type, _varName;$/;"	m	class:OpenXcom::RuleMissionScript
_vehicleUnit	Mod/RuleItem.h	/^	Unit* _vehicleUnit;$/;"	m	class:OpenXcom::RuleItem
_vehicles	Mod/RuleCraft.h	/^	int _weapons, _soldiers, _pilots, _vehicles;$/;"	m	class:OpenXcom::RuleCraft
_vehicles	Savegame/Base.h	/^	std::vector<Vehicle*> _vehicles;$/;"	m	class:OpenXcom::Base
_vehicles	Savegame/Craft.h	/^	std::vector<Vehicle*> _vehicles;$/;"	m	class:OpenXcom::Craft
_vehiclesFromBase	Savegame/Base.h	/^	std::vector<Vehicle*> _vehiclesFromBase;$/;"	m	class:OpenXcom::Base
_version	Engine/ModInfo.h	/^	ModInfoVersion _version;$/;"	m	class:OpenXcom::ModInfo
_versionDisplay	Engine/ModInfo.h	/^	std::string _versionDisplay;$/;"	m	class:OpenXcom::ModInfo
_verticalDirection	Savegame/BattleUnit.h	/^	int _verticalDirection;$/;"	m	class:OpenXcom::BattleUnit
_verticalGroup	Mod/MapScript.h	/^	int _verticalGroup, _horizontalGroup, _crossingGroup;$/;"	m	class:OpenXcom::MapScript
_verticalLevelSegments	Battlescape/BattlescapeGenerator.h	/^	std::vector<std::pair<MapBlock*, Position> > _verticalLevelSegments;$/;"	m	class:OpenXcom::BattlescapeGenerator
_verticalLevels	Battlescape/BattlescapeGenerator.h	/^	std::vector<VerticalLevel> _verticalLevels;$/;"	m	class:OpenXcom::BattlescapeGenerator
_verticalLevels	Mod/MapScript.h	/^	std::vector<VerticalLevel> _verticalLevels;$/;"	m	class:OpenXcom::MapScript
_verticalLevels	Mod/RuleBaseFacility.h	/^	std::vector<VerticalLevel> _verticalLevels;$/;"	m	class:OpenXcom::RuleBaseFacility
_videoDelay	Engine/FlcPlayer.h	/^	int _videoDelay;$/;"	m	class:OpenXcom::FlcPlayer
_videoFrameData	Engine/FlcPlayer.h	/^	Uint8 *_videoFrameData;$/;"	m	class:OpenXcom::FlcPlayer
_videoFrameSize	Engine/FlcPlayer.h	/^	Uint32 _videoFrameSize;     \/* Frame size in bytes *\/$/;"	m	class:OpenXcom::FlcPlayer
_videoFrameType	Engine/FlcPlayer.h	/^	Uint16 _videoFrameType;$/;"	m	class:OpenXcom::FlcPlayer
_videos	Menu/VideoState.h	/^	const std::vector<std::string> *_videos, *_tracks;$/;"	m	class:OpenXcom::VideoState
_videos	Mod/Mod.h	/^	std::map<std::string, RuleVideo *>_videos;$/;"	m	class:OpenXcom::Mod
_videos	Mod/RuleVideo.h	/^	std::vector<std::string> _videos, _audioTracks;$/;"	m	class:OpenXcom::RuleVideo
_view	Basescape/BasescapeState.h	/^	BaseView *_view;$/;"	m	class:OpenXcom::BasescapeState
_view	Basescape/DismantleFacilityState.h	/^	BaseView *_view;$/;"	m	class:OpenXcom::DismantleFacilityState
_view	Basescape/PlaceFacilityState.h	/^	BaseView *_view;$/;"	m	class:OpenXcom::PlaceFacilityState
_view	Basescape/PlaceLiftState.h	/^	BaseView *_view;$/;"	m	class:OpenXcom::PlaceLiftState
_vip	Mod/Unit.h	/^	bool _vip;$/;"	m	class:OpenXcom::Unit
_vip	Savegame/BattleUnit.h	/^	bool _vip;$/;"	m	class:OpenXcom::BattleUnit
_vipEscapeType	Savegame/SavedBattleGame.h	/^	EscapeType _vipEscapeType;$/;"	m	class:OpenXcom::SavedBattleGame
_vipSurvivalPercentage	Mod/AlienDeployment.h	/^	int _vipSurvivalPercentage;$/;"	m	class:OpenXcom::AlienDeployment
_vipSurvivalPercentage	Savegame/SavedBattleGame.h	/^	int _vipSurvivalPercentage, _vipsSaved, _vipsLost, _vipsWaitingOutside, _vipsSavedScore, _vipsLostScore, _vipsWaitingOutsideScore;$/;"	m	class:OpenXcom::SavedBattleGame
_vipsLost	Savegame/SavedBattleGame.h	/^	int _vipSurvivalPercentage, _vipsSaved, _vipsLost, _vipsWaitingOutside, _vipsSavedScore, _vipsLostScore, _vipsWaitingOutsideScore;$/;"	m	class:OpenXcom::SavedBattleGame
_vipsLostScore	Savegame/SavedBattleGame.h	/^	int _vipSurvivalPercentage, _vipsSaved, _vipsLost, _vipsWaitingOutside, _vipsSavedScore, _vipsLostScore, _vipsWaitingOutsideScore;$/;"	m	class:OpenXcom::SavedBattleGame
_vipsSaved	Savegame/SavedBattleGame.h	/^	int _vipSurvivalPercentage, _vipsSaved, _vipsLost, _vipsWaitingOutside, _vipsSavedScore, _vipsLostScore, _vipsWaitingOutsideScore;$/;"	m	class:OpenXcom::SavedBattleGame
_vipsSavedScore	Savegame/SavedBattleGame.h	/^	int _vipSurvivalPercentage, _vipsSaved, _vipsLost, _vipsWaitingOutside, _vipsSavedScore, _vipsLostScore, _vipsWaitingOutsideScore;$/;"	m	class:OpenXcom::SavedBattleGame
_vipsWaitingOutside	Savegame/SavedBattleGame.h	/^	int _vipSurvivalPercentage, _vipsSaved, _vipsLost, _vipsWaitingOutside, _vipsSavedScore, _vipsLostScore, _vipsWaitingOutsideScore;$/;"	m	class:OpenXcom::SavedBattleGame
_vipsWaitingOutsideScore	Savegame/SavedBattleGame.h	/^	int _vipSurvivalPercentage, _vipsSaved, _vipsLost, _vipsWaitingOutside, _vipsSavedScore, _vipsLostScore, _vipsWaitingOutsideScore;$/;"	m	class:OpenXcom::SavedBattleGame
_visibilityAtDark	Mod/Armor.h	/^	int _size, _weight, _visibilityAtDark, _visibilityAtDay, _personalLight;$/;"	m	class:OpenXcom::Armor
_visibilityAtDark	Mod/RuleSoldierBonus.h	/^	int _visibilityAtDark;$/;"	m	class:OpenXcom::RuleSoldierBonus
_visibilityAtDay	Mod/Armor.h	/^	int _size, _weight, _visibilityAtDark, _visibilityAtDay, _personalLight;$/;"	m	class:OpenXcom::Armor
_visible	Savegame/BattleUnit.h	/^	bool _visible;$/;"	m	class:OpenXcom::BattleUnit
_visible	Savegame/Tile.h	/^	Sint16 _visible = 0;$/;"	m	class:OpenXcom::Tile
_visibleEnemies	Battlescape/AIModule.h	/^	int _knownEnemies, _visibleEnemies, _spottingEnemies;$/;"	m	class:OpenXcom::AIModule
_visibleMapHeight	Battlescape/Camera.h	/^	int _visibleMapHeight;$/;"	m	class:OpenXcom::Camera
_visibleMapHeight	Battlescape/Map.h	/^	int _visibleMapHeight;$/;"	m	class:OpenXcom::Map
_visibleRows	Interface/TextList.h	/^	size_t _scroll, _visibleRows, _selRow;$/;"	m	class:OpenXcom::TextList
_visibleTiles	Savegame/BattleUnit.h	/^	std::vector<Tile *> _visibleTiles;$/;"	m	class:OpenXcom::BattleUnit
_visibleTilesLookup	Savegame/BattleUnit.h	/^	std::unordered_set<Tile *> _visibleTilesLookup;$/;"	m	class:OpenXcom::BattleUnit
_visibleUnit	Battlescape/BattlescapeState.h	/^	BattleUnit *_visibleUnit[VISIBLE_MAX];$/;"	m	class:OpenXcom::BattlescapeState
_visibleUnits	Savegame/BattleUnit.h	/^	std::vector<BattleUnit *> _visibleUnits, _unitsSpottedThisTurn;$/;"	m	class:OpenXcom::BattleUnit
_volume	Engine/AdlibMusic.h	/^	float _volume;$/;"	m	class:OpenXcom::AdlibMusic
_volume	Engine/FlcPlayer.h	/^	double _volume;$/;"	m	class:OpenXcom::FlcPlayer
_voxel	Battlescape/MeleeAttackBState.h	/^	Position _voxel;$/;"	m	class:OpenXcom::MeleeAttackBState
_voxelData	Battlescape/TileEngine.h	/^	const std::vector<Uint16> *_voxelData;$/;"	m	class:OpenXcom::TileEngine
_voxelData	Mod/Mod.h	/^	std::vector<Uint16> _voxelData;$/;"	m	class:OpenXcom::Mod
_voxelZ	Battlescape/Particle.h	/^	Uint16 _voxelZ;$/;"	m	class:OpenXcom::Particle
_waitForAltitude	Geoscape/DogfightState.h	/^	bool _minimized, _endDogfight, _animatingHit, _waitForPoly, _waitForAltitude;$/;"	m	class:OpenXcom::DogfightState
_waitForPoly	Geoscape/DogfightState.h	/^	bool _minimized, _endDogfight, _animatingHit, _waitForPoly, _waitForAltitude;$/;"	m	class:OpenXcom::DogfightState
_waitIfOutsideWeaponRange	Mod/Unit.h	/^	bool _waitIfOutsideWeaponRange;$/;"	m	class:OpenXcom::Unit
_walkPhase	Savegame/BattleUnit.h	/^	int _walkPhase, _fallPhase;$/;"	m	class:OpenXcom::BattleUnit
_wantsToSurrender	Savegame/BattleUnit.h	/^	bool _wantsToSurrender, _isSurrendering;$/;"	m	class:OpenXcom::BattleUnit
_warned	Savegame/SavedGame.h	/^	bool _debug, _warned;$/;"	m	class:OpenXcom::SavedGame
_warning	Battlescape/BattlescapeState.h	/^	WarningMessage *_warning;$/;"	m	class:OpenXcom::BattlescapeState
_warning	Battlescape/Inventory.h	/^	WarningMessage *_warning;$/;"	m	class:OpenXcom::Inventory
_wasHitBy	Battlescape/AIModule.h	/^	std::vector<int> _reachable, _reachableWithAttack, _wasHitBy;$/;"	m	class:OpenXcom::AIModule
_wasLetterboxed	Menu/SlideshowState.h	/^	bool _wasLetterboxed;$/;"	m	class:OpenXcom::SlideshowState
_waves	Mod/RuleAlienMission.h	/^	std::vector<MissionWave> _waves;$/;"	m	class:OpenXcom::RuleAlienMission
_waypoint	Geoscape/GeoscapeCraftState.h	/^	Waypoint *_waypoint;$/;"	m	class:OpenXcom::GeoscapeCraftState
_waypoints	Battlescape/Map.h	/^	std::vector<Position> _waypoints;$/;"	m	class:OpenXcom::Map
_waypoints	Mod/RuleItem.h	/^	int _waypoints, _invWidth, _invHeight;$/;"	m	class:OpenXcom::RuleItem
_waypoints	Mod/UfoTrajectory.h	/^	std::vector<TrajectoryWaypoint> _waypoints;$/;"	m	class:OpenXcom::UfoTrajectory
_waypoints	Savegame/SavedGame.h	/^	std::vector<Waypoint*> _waypoints;$/;"	m	class:OpenXcom::SavedGame
_weapon	Basescape/CraftInfoState.h	/^	InteractiveSurface *_sprite, *_weapon[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::CraftInfoState
_weapon	Basescape/CraftWeaponsState.h	/^	size_t _weapon;$/;"	m	class:OpenXcom::CraftWeaponsState
_weapon	Battlescape/MeleeAttackBState.h	/^	BattleItem *_weapon, *_ammo;$/;"	m	class:OpenXcom::MeleeAttackBState
_weapon	Geoscape/DogfightState.h	/^	InteractiveSurface *_btnMinimize, *_preview, *_weapon[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_weaponEnabled	Geoscape/DogfightState.h	/^	bool _end, _endUfoHandled, _endCraftHandled, _ufoBreakingOff, _destroyUfo, _destroyCraft, _weaponEnabled[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_weaponFireCountdown	Geoscape/DogfightState.h	/^	int _timeout, _currentDist, _targetDist, _weaponFireInterval[RuleCraft::WeaponMax], _weaponFireCountdown[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_weaponFireInterval	Geoscape/DogfightState.h	/^	int _timeout, _currentDist, _targetDist, _weaponFireInterval[RuleCraft::WeaponMax], _weaponFireCountdown[RuleCraft::WeaponMax];$/;"	m	class:OpenXcom::DogfightState
_weaponNum	Basescape/CraftInfoState.h	/^	int _weaponNum;$/;"	m	class:OpenXcom::CraftInfoState
_weaponNum	Geoscape/DogfightState.h	/^	int _weaponNum;$/;"	m	class:OpenXcom::DogfightState
_weaponNum	Geoscape/GeoscapeCraftState.h	/^	int _weaponNum;$/;"	m	class:OpenXcom::GeoscapeCraftState
_weaponPickedUp	Battlescape/AIModule.h	/^	bool _weaponPickedUp;$/;"	m	class:OpenXcom::AIModule
_weaponStrings	Mod/RuleCraft.h	/^	std::string _weaponStrings[WeaponMax];$/;"	m	class:OpenXcom::RuleCraft
_weaponType	Mod/RuleCraftWeapon.h	/^	int _sprite, _sound, _damage, _shieldDamageModifier, _range, _accuracy, _reloadCautious, _reloadStandard, _reloadAggressive, _ammoMax, _rearmRate, _projectileSpeed, _weaponType;$/;"	m	class:OpenXcom::RuleCraftWeapon
_weaponTypes	Mod/RuleCraft.h	/^	char _weaponTypes[WeaponMax][WeaponTypeMax];$/;"	m	class:OpenXcom::RuleCraft
_weapons	Basescape/CraftWeaponsState.h	/^	std::vector<RuleCraftWeapon*> _weapons;$/;"	m	class:OpenXcom::CraftWeaponsState
_weapons	Mod/RuleCraft.h	/^	int _weapons, _soldiers, _pilots, _vehicles;$/;"	m	class:OpenXcom::RuleCraft
_weapons	Savegame/Craft.h	/^	std::vector<CraftWeapon*> _weapons;$/;"	m	class:OpenXcom::Craft
_weekday	Savegame/GameTime.h	/^	int _second, _minute, _hour, _weekday, _day, _month, _year;$/;"	m	class:OpenXcom::GameTime
_weight	Mod/Armor.h	/^	int _size, _weight, _visibilityAtDark, _visibilityAtDay, _personalLight;$/;"	m	class:OpenXcom::Armor
_weight	Mod/RuleItem.h	/^	int _costBuy, _costSell, _transferTime, _weight;$/;"	m	class:OpenXcom::RuleItem
_weightedItemList	Mod/RuleEvent.h	/^	WeightedOptions _weightedItemList;$/;"	m	class:OpenXcom::RuleEvent
_weights	Mod/RuleAlienMission.h	/^	std::map<size_t, int> _weights;$/;"	m	class:OpenXcom::RuleAlienMission
_white	Basescape/TechTreeViewerState.h	/^	Uint8 _purple, _pink, _blue, _white, _gold, _grey;$/;"	m	class:OpenXcom::TechTreeViewerState
_white	Ufopaedia/StatsForNerdsState.h	/^	Uint8 _purple, _pink, _blue, _white, _gold;$/;"	m	class:OpenXcom::StatsForNerdsState
_wholeMedikitTotal	Savegame/SoldierDiary.h	/^		_woundsHealedTotal, _allUFOs, _allMissionTypes, _statGainTotal, _revivedUnitTotal, _wholeMedikitTotal, _braveryGainTotal, _bestOfRank, _MIA,$/;"	m	class:OpenXcom::SoldierDiary
_width	Engine/Surface.h	/^	Uint16 _width, _height, _pitch;$/;"	m	class:OpenXcom::Surface
_width	Engine/Surface.h	/^	Uint16 _width, _height, _pitch;$/;"	m	class:OpenXcom::SurfaceRaw
_width	Engine/SurfaceSet.h	/^	int _width, _height;$/;"	m	class:OpenXcom::SurfaceSet
_width	Mod/AlienDeployment.h	/^	int _width, _length, _height, _civilians;$/;"	m	class:OpenXcom::AlienDeployment
_width	Mod/ExtraSprites.h	/^	int _width, _height;$/;"	m	class:OpenXcom::ExtraSprites
_winCutscene	Mod/AlienDeployment.h	/^	std::string _winCutscene, _loseCutscene, _abortCutscene;$/;"	m	class:OpenXcom::AlienDeployment
_winGame	Mod/RuleVideo.h	/^	bool _winGame, _loseGame;$/;"	m	class:OpenXcom::RuleVideo
_window	Basescape/BuildFacilitiesState.h	/^	Window *_window;$/;"	m	class:OpenXcom::BuildFacilitiesState
_window	Basescape/CraftArmorState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftArmorState
_window	Basescape/CraftEquipmentLoadState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftEquipmentLoadState
_window	Basescape/CraftEquipmentSaveState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftEquipmentSaveState
_window	Basescape/CraftEquipmentState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftEquipmentState
_window	Basescape/CraftInfoState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftInfoState
_window	Basescape/CraftPilotSelectState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftPilotSelectState
_window	Basescape/CraftPilotsState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftPilotsState
_window	Basescape/CraftSoldiersState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftSoldiersState
_window	Basescape/CraftWeaponsState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftWeaponsState
_window	Basescape/CraftsState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftsState
_window	Basescape/DismantleFacilityState.h	/^	Window *_window;$/;"	m	class:OpenXcom::DismantleFacilityState
_window	Basescape/GlobalManufactureState.h	/^	Window *_window;$/;"	m	class:OpenXcom::GlobalManufactureState
_window	Basescape/GlobalResearchState.h	/^	Window *_window;$/;"	m	class:OpenXcom::GlobalResearchState
_window	Basescape/ManageAlienContainmentState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ManageAlienContainmentState
_window	Basescape/ManufactureDependenciesTreeState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ManufactureDependenciesTreeState
_window	Basescape/ManufactureInfoState.h	/^	Window * _window;$/;"	m	class:OpenXcom::ManufactureInfoState
_window	Basescape/ManufactureStartState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ManufactureStartState
_window	Basescape/ManufactureState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ManufactureState
_window	Basescape/MonthlyCostsState.h	/^	Window *_window;$/;"	m	class:OpenXcom::MonthlyCostsState
_window	Basescape/NewManufactureListState.h	/^	Window *_window;$/;"	m	class:OpenXcom::NewManufactureListState
_window	Basescape/NewResearchListState.h	/^	Window *_window;$/;"	m	class:OpenXcom::NewResearchListState
_window	Basescape/PlaceFacilityState.h	/^	Window *_window;$/;"	m	class:OpenXcom::PlaceFacilityState
_window	Basescape/PlaceLiftState.h	/^	Window *_window;$/;"	m	class:OpenXcom::PlaceLiftState
_window	Basescape/PurchaseState.h	/^	Window *_window;$/;"	m	class:OpenXcom::PurchaseState
_window	Basescape/ResearchInfoState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ResearchInfoState
_window	Basescape/ResearchState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ResearchState
_window	Basescape/SackSoldierState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SackSoldierState
_window	Basescape/SellState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SellState
_window	Basescape/SoldierArmorState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SoldierArmorState
_window	Basescape/SoldierAvatarState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SoldierAvatarState
_window	Basescape/SoldierBonusState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SoldierBonusState
_window	Basescape/SoldierDiaryMissionState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
_window	Basescape/SoldierDiaryOverviewState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
_window	Basescape/SoldierDiaryPerformanceState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
_window	Basescape/SoldierMemorialState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SoldierMemorialState
_window	Basescape/SoldierTransformationListState.h	/^	Window* _window;$/;"	m	class:OpenXcom::SoldierTransformationListState
_window	Basescape/SoldierTransformationState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SoldierTransformationState
_window	Basescape/SoldiersState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SoldiersState
_window	Basescape/StoresState.h	/^	Window *_window;$/;"	m	class:OpenXcom::StoresState
_window	Basescape/TechTreeSelectState.h	/^	Window *_window;$/;"	m	class:OpenXcom::TechTreeSelectState
_window	Basescape/TechTreeViewerState.h	/^	Window *_window;$/;"	m	class:OpenXcom::TechTreeViewerState
_window	Basescape/TransferBaseState.h	/^	Window *_window;$/;"	m	class:OpenXcom::TransferBaseState
_window	Basescape/TransferConfirmState.h	/^	Window *_window;$/;"	m	class:OpenXcom::TransferConfirmState
_window	Basescape/TransferItemsState.h	/^	Window *_window;$/;"	m	class:OpenXcom::TransferItemsState
_window	Basescape/TransfersState.h	/^	Window *_window;$/;"	m	class:OpenXcom::TransfersState
_window	Battlescape/AbortMissionState.h	/^	Window *_window;$/;"	m	class:OpenXcom::AbortMissionState
_window	Battlescape/AliensCrashState.h	/^	Window *_window;$/;"	m	class:OpenXcom::AliensCrashState
_window	Battlescape/BattlescapeMessage.h	/^	Window *_window;$/;"	m	class:OpenXcom::BattlescapeMessage
_window	Battlescape/BriefingLightState.h	/^	Window *_window;$/;"	m	class:OpenXcom::BriefingLightState
_window	Battlescape/BriefingState.h	/^	Window *_window;$/;"	m	class:OpenXcom::BriefingState
_window	Battlescape/CannotReequipState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CannotReequipState
_window	Battlescape/CommendationLateState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CommendationLateState
_window	Battlescape/CommendationState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CommendationState
_window	Battlescape/ConfirmEndMissionState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ConfirmEndMissionState
_window	Battlescape/DebriefingState.h	/^	Window *_window;$/;"	m	class:OpenXcom::DebriefingState
_window	Battlescape/ExtendedBattlescapeLinksState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ExtendedBattlescapeLinksState
_window	Battlescape/ExtendedInventoryLinksState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ExtendedInventoryLinksState
_window	Battlescape/InventoryLoadState.h	/^	Window *_window;$/;"	m	class:OpenXcom::InventoryLoadState
_window	Battlescape/InventoryPersonalState.h	/^	Window* _window;$/;"	m	class:OpenXcom::InventoryPersonalState
_window	Battlescape/InventorySaveState.h	/^	Window *_window;$/;"	m	class:OpenXcom::InventorySaveState
_window	Battlescape/NextTurnState.h	/^	Window *_window;$/;"	m	class:OpenXcom::NextTurnState
_window	Battlescape/PromotionsState.h	/^	Window *_window;$/;"	m	class:OpenXcom::PromotionsState
_window	Battlescape/TurnDiaryState.h	/^	Window *_window;$/;"	m	class:OpenXcom::TurnDiaryState
_window	Geoscape/AlienBaseState.h	/^	Window *_window;$/;"	m	class:OpenXcom::AlienBaseState
_window	Geoscape/AllocatePsiTrainingState.h	/^	Window *_window;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
_window	Geoscape/AllocateTrainingState.h	/^	Window *_window;$/;"	m	class:OpenXcom::AllocateTrainingState
_window	Geoscape/BaseDefenseState.h	/^	Window *_window;$/;"	m	class:OpenXcom::BaseDefenseState
_window	Geoscape/BaseDestroyedState.h	/^	Window *_window;$/;"	m	class:OpenXcom::BaseDestroyedState
_window	Geoscape/BaseNameState.h	/^	Window *_window;$/;"	m	class:OpenXcom::BaseNameState
_window	Geoscape/BuildNewBaseState.h	/^	Window *_window;$/;"	m	class:OpenXcom::BuildNewBaseState
_window	Geoscape/ConfirmCydoniaState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ConfirmCydoniaState
_window	Geoscape/ConfirmDestinationState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ConfirmDestinationState
_window	Geoscape/ConfirmLandingState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ConfirmLandingState
_window	Geoscape/ConfirmNewBaseState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ConfirmNewBaseState
_window	Geoscape/CraftErrorState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftErrorState
_window	Geoscape/CraftNotEnoughPilotsState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftNotEnoughPilotsState
_window	Geoscape/CraftPatrolState.h	/^	Window *_window;$/;"	m	class:OpenXcom::CraftPatrolState
_window	Geoscape/DogfightErrorState.h	/^	Window *_window;$/;"	m	class:OpenXcom::DogfightErrorState
_window	Geoscape/DogfightExperienceState.h	/^	Window *_window;$/;"	m	class:OpenXcom::DogfightExperienceState
_window	Geoscape/DogfightState.h	/^	Surface *_window, *_battle, *_range[RuleCraft::WeaponMax], *_damage, *_craftSprite, *_craftShield;$/;"	m	class:OpenXcom::DogfightState
_window	Geoscape/ExtendedGeoscapeLinksState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ExtendedGeoscapeLinksState
_window	Geoscape/FundingState.h	/^	Window *_window;$/;"	m	class:OpenXcom::FundingState
_window	Geoscape/GeoscapeCraftState.h	/^	Window *_window;$/;"	m	class:OpenXcom::GeoscapeCraftState
_window	Geoscape/GeoscapeEventState.h	/^	Window *_window;$/;"	m	class:OpenXcom::GeoscapeEventState
_window	Geoscape/InterceptState.h	/^	Window *_window;$/;"	m	class:OpenXcom::InterceptState
_window	Geoscape/ItemsArrivingState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ItemsArrivingState
_window	Geoscape/LowFuelState.h	/^	Window *_window;$/;"	m	class:OpenXcom::LowFuelState
_window	Geoscape/MissionDetectedState.h	/^	Window *_window;$/;"	m	class:OpenXcom::MissionDetectedState
_window	Geoscape/MonthlyReportState.h	/^	Window *_window;$/;"	m	class:OpenXcom::MonthlyReportState
_window	Geoscape/MultipleTargetsState.h	/^	Window *_window;$/;"	m	class:OpenXcom::MultipleTargetsState
_window	Geoscape/NewPossibleCraftState.h	/^	Window *_window;$/;"	m	class:OpenXcom::NewPossibleCraftState
_window	Geoscape/NewPossibleFacilityState.h	/^	Window *_window;$/;"	m	class:OpenXcom::NewPossibleFacilityState
_window	Geoscape/NewPossibleManufactureState.h	/^	Window *_window;$/;"	m	class:OpenXcom::NewPossibleManufactureState
_window	Geoscape/NewPossiblePurchaseState.h	/^	Window *_window;$/;"	m	class:OpenXcom::NewPossiblePurchaseState
_window	Geoscape/NewPossibleResearchState.h	/^	Window *_window;$/;"	m	class:OpenXcom::NewPossibleResearchState
_window	Geoscape/ProductionCompleteState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ProductionCompleteState
_window	Geoscape/PsiTrainingState.h	/^	Window *_window;$/;"	m	class:OpenXcom::PsiTrainingState
_window	Geoscape/ResearchCompleteState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ResearchCompleteState
_window	Geoscape/ResearchRequiredState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ResearchRequiredState
_window	Geoscape/SelectDestinationState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SelectDestinationState
_window	Geoscape/SelectMusicTrackState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SelectMusicTrackState
_window	Geoscape/TargetInfoState.h	/^	Window *_window;$/;"	m	class:OpenXcom::TargetInfoState
_window	Geoscape/TrainingFinishedState.h	/^	Window *_window;$/;"	m	class:OpenXcom::TrainingFinishedState
_window	Geoscape/TrainingState.h	/^	Window *_window;$/;"	m	class:OpenXcom::TrainingState
_window	Geoscape/UfoDetectedState.h	/^	Window *_window;$/;"	m	class:OpenXcom::UfoDetectedState
_window	Geoscape/UfoLostState.h	/^	Window *_window;$/;"	m	class:OpenXcom::UfoLostState
_window	Geoscape/UfoTrackerState.h	/^	Window *_window;$/;"	m	class:OpenXcom::UfoTrackerState
_window	Interface/ComboBox.h	/^	Window *_window;$/;"	m	class:OpenXcom::ComboBox
_window	Menu/AbandonGameState.h	/^	Window *_window;$/;"	m	class:OpenXcom::AbandonGameState
_window	Menu/ConfirmLoadState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ConfirmLoadState
_window	Menu/DeleteGameState.h	/^	Window *_window;$/;"	m	class:OpenXcom::DeleteGameState
_window	Menu/ErrorMessageState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ErrorMessageState
_window	Menu/ListGamesState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ListGamesState
_window	Menu/ListLoadOriginalState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ListLoadOriginalState
_window	Menu/MainMenuState.h	/^	Window *_window;$/;"	m	class:OpenXcom::MainMenuState
_window	Menu/ModConfirmExtendedState.h	/^		Window *_window;$/;"	m	class:OpenXcom::ModConfirmExtendedState
_window	Menu/ModListState.h	/^	Window *_window;$/;"	m	class:OpenXcom::ModListState
_window	Menu/NewBattleState.h	/^	Window *_window;$/;"	m	class:OpenXcom::NewBattleState
_window	Menu/NewGameState.h	/^	Window *_window;$/;"	m	class:OpenXcom::NewGameState
_window	Menu/NotesState.h	/^	Window* _window;$/;"	m	class:OpenXcom::NotesState
_window	Menu/OptionsBaseState.h	/^	Window *_window;$/;"	m	class:OpenXcom::OptionsBaseState
_window	Menu/OptionsConfirmState.h	/^	Window *_window;$/;"	m	class:OpenXcom::OptionsConfirmState
_window	Menu/OptionsDefaultsState.h	/^	Window *_window;$/;"	m	class:OpenXcom::OptionsDefaultsState
_window	Menu/PauseState.h	/^	Window *_window;$/;"	m	class:OpenXcom::PauseState
_window	Menu/SetWindowedRootState.h	/^	Window *_window;$/;"	m	class:OpenXcom::SetWindowedRootState
_window	Menu/StatisticsState.h	/^	Window *_window;$/;"	m	class:OpenXcom::StatisticsState
_window	Menu/TestState.h	/^	Window *_window;$/;"	m	class:OpenXcom::TestState
_window	Ufopaedia/StatsForNerdsState.h	/^	Window *_window;$/;"	m	class:OpenXcom::StatsForNerdsState
_window	Ufopaedia/UfopaediaSelectState.h	/^		Window *_window;$/;"	m	class:OpenXcom::UfopaediaSelectState
_window	Ufopaedia/UfopaediaStartState.h	/^		Window *_window;$/;"	m	class:OpenXcom::UfopaediaStartState
_windowOffset	Ufopaedia/UfopaediaStartState.h	/^		int _heightOffset, _windowOffset;$/;"	m	class:OpenXcom::UfopaediaStartState
_workshops	Mod/RuleBaseFacility.h	/^	int _storage, _personnel, _aliens, _crafts, _labs, _workshops, _psiLabs;$/;"	m	class:OpenXcom::RuleBaseFacility
_worldShade	Battlescape/BattlescapeGenerator.h	/^	int _worldShade;$/;"	m	class:OpenXcom::BattlescapeGenerator
_woundIndicator	Battlescape/Inventory.h	/^	Surface *_stunIndicator, *_woundIndicator, *_burnIndicator, *_shockIndicator;$/;"	m	class:OpenXcom::Inventory
_woundIndicator	Battlescape/Map.h	/^	Surface *_stunIndicator, *_woundIndicator, *_burnIndicator, *_shockIndicator;$/;"	m	class:OpenXcom::Map
_woundRecovery	Mod/RuleItem.h	/^	int _woundRecovery, _healthRecovery, _stunRecovery, _energyRecovery, _manaRecovery, _moraleRecovery, _painKillerRecovery;$/;"	m	class:OpenXcom::RuleItem
_woundTxt	Battlescape/MedikitState.h	/^	Text *_pkText, *_stimulantTxt,  *_healTxt, *_partTxt, *_woundTxt;$/;"	m	class:OpenXcom::MedikitState
_woundTxt	Battlescape/MedikitView.h	/^	Text *_partTxt, *_woundTxt;$/;"	m	class:OpenXcom::MedikitView
_wounded	Battlescape/ConfirmEndMissionState.h	/^	int _wounded;$/;"	m	class:OpenXcom::ConfirmEndMissionState
_woundsHealedTotal	Savegame/SoldierDiary.h	/^		_woundsHealedTotal, _allUFOs, _allMissionTypes, _statGainTotal, _revivedUnitTotal, _wholeMedikitTotal, _braveryGainTotal, _bestOfRank, _MIA,$/;"	m	class:OpenXcom::SoldierDiary
_wrap	Engine/Language.h	/^	TextWrapping _wrap;$/;"	m	class:OpenXcom::Language
_wrap	Interface/Text.h	/^	bool _wrap, _invert, _contrast, _indent, _scroll, _ignoreSeparators;$/;"	m	class:OpenXcom::Text
_wrap	Interface/TextList.h	/^	bool _dot, _selectable, _condensed, _contrast, _wrap, _flooding, _ignoreSeparators;$/;"	m	class:OpenXcom::TextList
_x	Battlescape/UnitSprite.h	/^	int _x, _y, _shade, _burn;$/;"	m	class:OpenXcom::UnitSprite
_x	Engine/Surface.h	/^	Sint16 _x, _y;$/;"	m	class:OpenXcom::Surface
_x	Engine/Surface.h	/^	int _x, _y;$/;"	m	class:OpenXcom::SurfaceCrop
_x	Geoscape/DogfightState.h	/^	int _x, _y, _minimizedIconX, _minimizedIconY;$/;"	m	class:OpenXcom::DogfightState
_x	Mod/Polygon.h	/^	Sint16 *_x, *_y;$/;"	m	class:OpenXcom::Polygon
_x	Mod/RuleInventory.h	/^	int _x, _y;$/;"	m	class:OpenXcom::RuleInventory
_x	Savegame/BaseFacility.h	/^	int _x, _y, _buildTime;$/;"	m	class:OpenXcom::BaseFacility
_xBeforeMouseScrolling	Battlescape/BattlescapeState.h	/^	int _xBeforeMouseScrolling, _yBeforeMouseScrolling;$/;"	m	class:OpenXcom::BattlescapeState
_xBeforeMouseScrolling	Battlescape/MiniMapView.h	/^	int _xBeforeMouseScrolling, _yBeforeMouseScrolling;$/;"	m	class:OpenXcom::MiniMapView
_xBeforeMouseScrolling	Geoscape/Globe.h	/^	int _xBeforeMouseScrolling, _yBeforeMouseScrolling;$/;"	m	class:OpenXcom::Globe
_xOffset	Battlescape/Particle.h	/^	float _xOffset, _yOffset, _density;$/;"	m	class:OpenXcom::Particle
_xcomBaseInCountryTriggers	Mod/RuleArcScript.h	/^	std::map<std::string, bool> _xcomBaseInCountryTriggers;$/;"	m	class:OpenXcom::RuleArcScript
_xcomBaseInCountryTriggers	Mod/RuleEventScript.h	/^	std::map<std::string, bool> _xcomBaseInCountryTriggers;$/;"	m	class:OpenXcom::RuleEventScript
_xcomBaseInCountryTriggers	Mod/RuleMissionScript.h	/^	std::map<std::string, bool> _xcomBaseInCountryTriggers;$/;"	m	class:OpenXcom::RuleMissionScript
_xcomBaseInRegionTriggers	Mod/RuleArcScript.h	/^	std::map<std::string, bool> _xcomBaseInRegionTriggers;$/;"	m	class:OpenXcom::RuleArcScript
_xcomBaseInRegionTriggers	Mod/RuleEventScript.h	/^	std::map<std::string, bool> _xcomBaseInRegionTriggers;$/;"	m	class:OpenXcom::RuleEventScript
_xcomBaseInRegionTriggers	Mod/RuleMissionScript.h	/^	std::map<std::string, bool> _xcomBaseInRegionTriggers;$/;"	m	class:OpenXcom::RuleMissionScript
_xcomCountryLines	Geoscape/GraphsState.h	/^	std::vector<Surface *> _xcomRegionLines, _xcomCountryLines;$/;"	m	class:OpenXcom::GraphsState
_xcomRegionLines	Geoscape/GraphsState.h	/^	std::vector<Surface *> _xcomRegionLines, _xcomCountryLines;$/;"	m	class:OpenXcom::GraphsState
_y	Battlescape/UnitSprite.h	/^	int _x, _y, _shade, _burn;$/;"	m	class:OpenXcom::UnitSprite
_y	Engine/Surface.h	/^	Sint16 _x, _y;$/;"	m	class:OpenXcom::Surface
_y	Engine/Surface.h	/^	int _x, _y;$/;"	m	class:OpenXcom::SurfaceCrop
_y	Geoscape/DogfightState.h	/^	int _x, _y, _minimizedIconX, _minimizedIconY;$/;"	m	class:OpenXcom::DogfightState
_y	Mod/Polygon.h	/^	Sint16 *_x, *_y;$/;"	m	class:OpenXcom::Polygon
_y	Mod/RuleInventory.h	/^	int _x, _y;$/;"	m	class:OpenXcom::RuleInventory
_y	Savegame/BaseFacility.h	/^	int _x, _y, _buildTime;$/;"	m	class:OpenXcom::BaseFacility
_yBeforeMouseScrolling	Battlescape/BattlescapeState.h	/^	int _xBeforeMouseScrolling, _yBeforeMouseScrolling;$/;"	m	class:OpenXcom::BattlescapeState
_yBeforeMouseScrolling	Battlescape/MiniMapView.h	/^	int _xBeforeMouseScrolling, _yBeforeMouseScrolling;$/;"	m	class:OpenXcom::MiniMapView
_yBeforeMouseScrolling	Geoscape/Globe.h	/^	int _xBeforeMouseScrolling, _yBeforeMouseScrolling;$/;"	m	class:OpenXcom::Globe
_yOffset	Battlescape/Particle.h	/^	float _xOffset, _yOffset, _density;$/;"	m	class:OpenXcom::Particle
_yOffset	Mod/MapData.h	/^	int _yOffset, _TUWalk, _TUFly, _TUSlide, _terrainLevel, _footstepSound, _dieMCD, _altMCD;$/;"	m	class:OpenXcom::MapData
_year	Savegame/GameTime.h	/^	int _second, _minute, _hour, _weekday, _day, _month, _year;$/;"	m	class:OpenXcom::GameTime
_year	Savegame/SaveConverter.h	/^	int _year, _funds;$/;"	m	class:OpenXcom::SaveConverter
_zombiImmune	Mod/Armor.h	/^	Sint8  _fearImmune, _bleedImmune, _painImmune, _zombiImmune;$/;"	m	class:OpenXcom::Armor
_zombieUnit	Mod/RuleItem.h	/^	std::string _zombieUnit, _spawnUnit;$/;"	m	class:OpenXcom::RuleItem
_zombieUnitByArmorFemale	Mod/RuleItem.h	/^	std::map<std::string, std::string> _zombieUnitByArmorMale, _zombieUnitByArmorFemale, _zombieUnitByType;$/;"	m	class:OpenXcom::RuleItem
_zombieUnitByArmorMale	Mod/RuleItem.h	/^	std::map<std::string, std::string> _zombieUnitByArmorMale, _zombieUnitByArmorFemale, _zombieUnitByType;$/;"	m	class:OpenXcom::RuleItem
_zombieUnitByType	Mod/RuleItem.h	/^	std::map<std::string, std::string> _zombieUnitByArmorMale, _zombieUnitByArmorFemale, _zombieUnitByType;$/;"	m	class:OpenXcom::RuleItem
_zoom	Geoscape/Globe.h	/^	size_t _zoom, _zoomOld, _zoomTexture;$/;"	m	class:OpenXcom::Globe
_zoom	Geoscape/GraphsState.h	/^	int _zoom;$/;"	m	class:OpenXcom::GraphsState
_zoomInEffectDone	Geoscape/GeoscapeState.h	/^	bool _pause, _zoomInEffectDone, _zoomOutEffectDone;$/;"	m	class:OpenXcom::GeoscapeState
_zoomInEffectTimer	Geoscape/GeoscapeState.h	/^	Timer *_gameTimer, *_zoomInEffectTimer, *_zoomOutEffectTimer, *_dogfightStartTimer, *_dogfightTimer;$/;"	m	class:OpenXcom::GeoscapeState
_zoomLevel	Mod/RuleCountry.h	/^	int _labelColor, _zoomLevel;$/;"	m	class:OpenXcom::RuleCountry
_zoomOld	Geoscape/Globe.h	/^	size_t _zoom, _zoomOld, _zoomTexture;$/;"	m	class:OpenXcom::Globe
_zoomOutEffectDone	Geoscape/GeoscapeState.h	/^	bool _pause, _zoomInEffectDone, _zoomOutEffectDone;$/;"	m	class:OpenXcom::GeoscapeState
_zoomOutEffectTimer	Geoscape/GeoscapeState.h	/^	Timer *_gameTimer, *_zoomInEffectTimer, *_zoomOutEffectTimer, *_dogfightStartTimer, *_dogfightTimer;$/;"	m	class:OpenXcom::GeoscapeState
_zoomRadius	Geoscape/Globe.h	/^	std::vector<double> _zoomRadius;$/;"	m	class:OpenXcom::Globe
_zoomSurfaceY	Engine/Zoom.cpp	/^int Zoom::_zoomSurfaceY(SDL_Surface * src, SDL_Surface * dst, int flipx, int flipy)$/;"	f	class:OpenXcom::Zoom
_zoomTexture	Geoscape/Globe.h	/^	size_t _zoom, _zoomOld, _zoomTexture;$/;"	m	class:OpenXcom::Globe
a	Engine/Scalers/xbrz.cpp	/^    \/**\/a,  b,  c,$/;"	m	struct:__anon10::Kernel_3x3	file:
a	Engine/Scalers/xbrz.cpp	/^    \/**\/a, b, c, d,$/;"	m	struct:__anon10::Kernel_4x4	file:
a	Engine/Scalers/xbrz.cpp	410;"	d	file:
a	Engine/Scalers/xbrz.cpp	471;"	d	file:
aStarPath	Battlescape/Pathfinding.cpp	/^bool Pathfinding::aStarPath(Position startPosition, Position endPosition, BattleActionMove bam, const BattleUnit *missileTarget, bool sneak, int maxTUCost)$/;"	f	class:OpenXcom::Pathfinding
abortPath	Battlescape/Pathfinding.cpp	/^void Pathfinding::abortPath()$/;"	f	class:OpenXcom::Pathfinding
abortTurn	Savegame/BattleUnit.cpp	/^void BattleUnit::abortTurn()$/;"	f	class:OpenXcom::BattleUnit
accel	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
accuracy	Mod/RuleItem.h	/^	int accuracy = 0;$/;"	m	struct:OpenXcom::RuleItemAction
accurate	Engine/Timer.cpp	/^const Uint32 accurate = 4;$/;"	m	namespace:OpenXcom::__anon9	file:
actor	Battlescape/BattlescapeGame.h	/^	BattleUnit *actor = nullptr;$/;"	m	struct:OpenXcom::BattleActionCost
add	Engine/ScriptBind.h	/^	void add(const std::string& func, const std::string& description = BindBase::functionWithoutDescription)$/;"	f	struct:OpenXcom::Bind
add	Engine/State.cpp	/^void State::add(Surface *surface)$/;"	f	class:OpenXcom::State
add	Engine/State.cpp	/^void State::add(Surface *surface, const std::string &id, const std::string &category, Surface *parent)$/;"	f	class:OpenXcom::State
addActivityAlien	Savegame/Country.cpp	/^void Country::addActivityAlien(int activity)$/;"	f	class:OpenXcom::Country
addActivityAlien	Savegame/Region.cpp	/^void Region::addActivityAlien(int activity)$/;"	f	class:OpenXcom::Region
addActivityXcom	Savegame/Country.cpp	/^void Country::addActivityXcom(int activity)$/;"	f	class:OpenXcom::Country
addActivityXcom	Savegame/Region.cpp	/^void Region::addActivityXcom(int activity)$/;"	f	class:OpenXcom::Region
addAlien	Battlescape/BattlescapeGenerator.cpp	/^BattleUnit *BattlescapeGenerator::addAlien(Unit *rules, int alienRank, bool outside)$/;"	f	class:OpenXcom::BattlescapeGenerator
addArmorDamageModifiers	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addArmorDamageModifiers(std::ostringstream &ss, const std::vector<float> &vec, const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
addArmorValueScript	Savegame/BattleUnit.cpp	/^void addArmorValueScript(BattleUnit *bu, int side, int value)$/;"	f	namespace:OpenXcom::__anon36
addBaseStatRangeScript	Savegame/BattleUnit.cpp	/^void addBaseStatRangeScript(BattleUnit *bu, int val)$/;"	f	namespace:OpenXcom::__anon36
addBaseStatScript	Savegame/BattleUnit.cpp	/^void addBaseStatScript(BattleUnit *bu, int val)$/;"	f	namespace:OpenXcom::__anon36
addBattleFuseType	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addBattleFuseType(std::ostringstream &ss, const BattleFuseType &value, const std::string &propertyName, const BattleFuseType &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addBattleMediKitType	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addBattleMediKitType(std::ostringstream &ss, const BattleMediKitType &value, const std::string &propertyName, const BattleMediKitType &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addBattleType	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addBattleType(std::ostringstream &ss, const BattleType &value, const std::string &propertyName, const BattleType &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addBigWallDir	Battlescape/TileEngine.cpp	/^void addBigWallDir(T& td, int dir, bool p)$/;"	f	namespace:OpenXcom::__anon45
addBitToStream	lodepng.cpp	421;"	d	file:
addBitsToStream	lodepng.cpp	/^static void addBitsToStream(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)$/;"	f	file:
addBitsToStreamReversed	lodepng.cpp	/^static void addBitsToStreamReversed(size_t* bitpointer, ucvector* bitstream, unsigned value, size_t nbits)$/;"	f	file:
addBlock	Battlescape/BattlescapeGenerator.cpp	/^bool BattlescapeGenerator::addBlock(int x, int y, MapBlock *block, RuleTerrain* terrain)$/;"	f	class:OpenXcom::BattlescapeGenerator
addBlockDir	Battlescape/TileEngine.cpp	/^void addBlockDir(T& td, int dir, int z, bool p)$/;"	f	namespace:OpenXcom::__anon45
addBlockDown	Battlescape/TileEngine.cpp	/^void addBlockDown(T& td,bool p)$/;"	f	namespace:OpenXcom::__anon45
addBlockUp	Battlescape/TileEngine.cpp	/^void addBlockUp(T& td, bool p)$/;"	f	namespace:OpenXcom::__anon45
addBoolOrInteger	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addBoolOrInteger(std::ostringstream &ss, const int &value, bool formatAsBoolean)$/;"	f	class:OpenXcom::StatsForNerdsState
addBoolean	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addBoolean(std::ostringstream &ss, const bool &value, const std::string &propertyName, const bool &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addBraveryExp	Savegame/BattleUnit.cpp	/^void BattleUnit::addBraveryExp()$/;"	f	class:OpenXcom::BattleUnit
addBuildCostItem	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addBuildCostItem(std::ostringstream &ss, const std::pair<const std::string, std::pair<int, int> > &costItem)$/;"	f	class:OpenXcom::StatsForNerdsState
addChunk	lodepng.cpp	/^static unsigned addChunk(ucvector* out, const char* chunkName, const unsigned char* data, size_t length)$/;"	f	file:
addChunk_IDAT	lodepng.cpp	/^static unsigned addChunk_IDAT(ucvector* out, const unsigned char* data, size_t datasize,$/;"	f	file:
addChunk_IEND	lodepng.cpp	/^static unsigned addChunk_IEND(ucvector* out)$/;"	f	file:
addChunk_IHDR	lodepng.cpp	/^static unsigned addChunk_IHDR(ucvector* out, unsigned w, unsigned h,$/;"	f	file:
addChunk_PLTE	lodepng.cpp	/^static unsigned addChunk_PLTE(ucvector* out, const LodePNGColorMode* info)$/;"	f	file:
addChunk_bKGD	lodepng.cpp	/^static unsigned addChunk_bKGD(ucvector* out, const LodePNGInfo* info)$/;"	f	file:
addChunk_iTXt	lodepng.cpp	/^static unsigned addChunk_iTXt(ucvector* out, unsigned compressed, const char* keyword, const char* langtag,$/;"	f	file:
addChunk_pHYs	lodepng.cpp	/^static unsigned addChunk_pHYs(ucvector* out, const LodePNGInfo* info)$/;"	f	file:
addChunk_tEXt	lodepng.cpp	/^static unsigned addChunk_tEXt(ucvector* out, const char* keyword, const char* textstring)$/;"	f	file:
addChunk_tIME	lodepng.cpp	/^static unsigned addChunk_tIME(ucvector* out, const LodePNGTime* time)$/;"	f	file:
addChunk_tRNS	lodepng.cpp	/^static unsigned addChunk_tRNS(ucvector* out, const LodePNGColorMode* info)$/;"	f	file:
addChunk_zTXt	lodepng.cpp	/^static unsigned addChunk_zTXt(ucvector* out, const char* keyword, const char* textstring,$/;"	f	file:
addCivilian	Battlescape/BattlescapeGenerator.cpp	/^BattleUnit *BattlescapeGenerator::addCivilian(Unit *rules, int nodeRank)$/;"	f	class:OpenXcom::BattlescapeGenerator
addColorBits	lodepng.cpp	/^static void addColorBits(unsigned char* out, size_t index, unsigned bits, unsigned in)$/;"	f	file:
addConst	Engine/Script.cpp	/^void ScriptGlobal::addConst(const std::string& name, ScriptValueData i)$/;"	f	class:OpenXcom::ScriptGlobal
addConst	Engine/Script.cpp	/^void ScriptParserBase::addConst(const std::string& s, ScriptValueData i)$/;"	f	class:OpenXcom::ScriptParserBase
addControls	Menu/OptionsControlsState.cpp	/^void OptionsControlsState::addControls(const std::vector<OptionInfo> &keys)$/;"	f	class:OpenXcom::OptionsControlsState
addCraft	Battlescape/BattlescapeGenerator.cpp	/^bool BattlescapeGenerator::addCraft(MapBlock *craftMap, MapScript *command, SDL_Rect &craftPos, RuleTerrain *terrain)$/;"	f	class:OpenXcom::BattlescapeGenerator
addCraftStats	Savegame/Craft.cpp	/^void Craft::addCraftStats(const RuleCraftStats& s)$/;"	f	class:OpenXcom::Craft
addCustomConst	Engine/ScriptBind.h	/^	void addCustomConst(const std::string& name, int i)$/;"	f	struct:OpenXcom::BindBase
addCustomFunc	Engine/ScriptBind.h	/^	void addCustomFunc(const std::string& name, const std::string& description = functionWithoutDescription)$/;"	f	struct:OpenXcom::BindBase
addCustomPtr	Engine/ScriptBind.h	/^	void addCustomPtr(const std::string& name, T* p)$/;"	f	struct:OpenXcom::BindBase
addDamageRandomType	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addDamageRandomType(std::ostringstream &ss, const ItemDamageRandomType &value, const std::string &propertyName, const ItemDamageRandomType &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addDamageType	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addDamageType(std::ostringstream &ss, const ItemDamageType &value, const std::string &propertyName, const ItemDamageType &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addDebugDisplay	Engine/ScriptBind.h	/^	void addDebugDisplay()$/;"	f	struct:OpenXcom::Bind
addDecoration	Savegame/SoldierDiary.cpp	/^void SoldierCommendations::addDecoration()$/;"	f	class:OpenXcom::SoldierCommendations
addDestroyedObjective	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::addDestroyedObjective()$/;"	f	class:OpenXcom::SavedBattleGame
addDouble	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addDouble(std::ostringstream &ss, const double &value, const std::string &propertyName, const double &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addDrawingRoutine	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addDrawingRoutine(std::ostringstream &ss, const int &value, const std::string &propertyName, const int &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addExperienceTrainingMode	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addExperienceTrainingMode(std::ostringstream &ss, const ExperienceTrainingMode &value, const std::string &propertyName, const ExperienceTrainingMode &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addFake	Engine/ScriptBind.h	/^	void addFake(const std::string& get)$/;"	f	struct:OpenXcom::Bind
addFallingUnit	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::addFallingUnit(BattleUnit* unit)$/;"	f	class:OpenXcom::SavedBattleGame
addFatalWoundScript	Savegame/BattleUnit.cpp	/^void addFatalWoundScript(BattleUnit *bu, int part, int val)$/;"	f	namespace:OpenXcom::__anon36
addField	Engine/ScriptBind.h	/^	void addField(const std::string& get)$/;"	f	struct:OpenXcom::Bind
addField	Engine/ScriptBind.h	/^	void addField(const std::string& get, const std::string& set)$/;"	f	struct:OpenXcom::Bind
addFinishedResearch	Savegame/SavedGame.cpp	/^void SavedGame::addFinishedResearch(const RuleResearch * research, const Mod * mod, Base * base, bool score)$/;"	f	class:OpenXcom::SavedGame
addFinishedResearchSimple	Savegame/SavedGame.cpp	/^void SavedGame::addFinishedResearchSimple(const RuleResearch * research)$/;"	f	class:OpenXcom::SavedGame
addFire	Battlescape/TileEngine.cpp	/^void addFire(T& td, bool p)$/;"	f	namespace:OpenXcom::__anon45
addFiringExp	Savegame/BattleUnit.cpp	/^void BattleUnit::addFiringExp()$/;"	f	class:OpenXcom::BattleUnit
addFixedItems	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::addFixedItems(BattleUnit *unit, const std::vector<const RuleItem*> &fixed)$/;"	f	class:OpenXcom::SavedBattleGame
addFloat	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addFloat(std::ostringstream &ss, const float &value, const std::string &propertyName, const float &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addFloatAsPercentage	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addFloatAsPercentage(std::ostringstream &ss, const float &value, const std::string &propertyName, const float &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addForcedTorso	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addForcedTorso(std::ostringstream &ss, const ForcedTorso &value, const std::string &propertyName, const ForcedTorso &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addFrame	Engine/SurfaceSet.cpp	/^Surface *SurfaceSet::addFrame(int i)$/;"	f	class:OpenXcom::SurfaceSet
addFrame	Interface/FpsCounter.cpp	/^void FpsCounter::addFrame()$/;"	f	class:OpenXcom::FpsCounter
addFunc	Engine/ScriptBind.h	/^	void addFunc(const std::string& name)$/;"	f	struct:OpenXcom::Bind
addFunc	Engine/ScriptBind.h	/^	void addFunc(const std::string& name, const std::string& description)$/;"	f	struct:OpenXcom::Bind
addGeneratedEvent	Savegame/SavedGame.cpp	/^void SavedGame::addGeneratedEvent(const RuleEvent* event)$/;"	f	class:OpenXcom::SavedGame
addGetStatsScript	Mod/RuleCraft.h	/^	static void addGetStatsScript(TBind& b, std::string prefix)$/;"	f	struct:OpenXcom::RuleCraftStats
addGetStatsScript	Mod/RuleUfo.h	/^	static void addGetStatsScript(TBind& b, std::string prefix)$/;"	f	struct:OpenXcom::RuleUfoStats
addGetStatsScript	Mod/Unit.h	/^	static void addGetStatsScript(TBind& b, std::string prefix, bool skipResorcesStats = false)$/;"	f	struct:OpenXcom::UnitStats
addHeading	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addHeading(const std::string &propertyName, const std::string &moreDetail, bool addDifficulty)$/;"	f	class:OpenXcom::StatsForNerdsState
addHuffmanSymbol	lodepng.cpp	/^static void addHuffmanSymbol(size_t* bp, ucvector* compressed, unsigned code, unsigned bitlen)$/;"	f	file:
addHuntBehavior	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addHuntBehavior(std::ostringstream &ss, const int &value, const std::string &propertyName, const int &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addHuntMode	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addHuntMode(std::ostringstream &ss, const int &value, const std::string &propertyName, const int &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addInteger	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addInteger(std::ostringstream &ss, const int &value, const std::string &propertyName, const int &defaultvalue, bool formatAsMoney, const std::string &specialTranslation, const int &specialvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addIntegerKm	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addIntegerKm(std::ostringstream &ss, const int &value, const std::string &propertyName, const int &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addIntegerKnots	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addIntegerKnots(std::ostringstream &ss, const int &value, const std::string &propertyName, const int &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addIntegerNauticalMiles	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addIntegerNauticalMiles(std::ostringstream &ss, const int &value, const std::string &propertyName, const int &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addIntegerPercent	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addIntegerPercent(std::ostringstream &ss, const int &value, const std::string &propertyName, const int &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addIntegerScript	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addIntegerScript(const std::string &propertyName, const int &value)$/;"	f	class:OpenXcom::StatsForNerdsState
addIntegerScriptTag	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addIntegerScriptTag(std::ostringstream &ss, const int &value, const std::string &propertyName, const int &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addIntegerSeconds	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addIntegerSeconds(std::ostringstream &ss, const int &value, const std::string &propertyName, const int &defaultvalue, const int &value2)$/;"	f	class:OpenXcom::StatsForNerdsState
addItem	Battlescape/ActionMenuState.cpp	/^void ActionMenuState::addItem(BattleActionType ba, const std::string &name, int *id, SDLKey key)$/;"	f	class:OpenXcom::ActionMenuState
addItem	Battlescape/SkillMenuState.cpp	/^void SkillMenuState::addItem(const RuleSkill* skill, int *id, SDLKey key)$/;"	f	class:OpenXcom::SkillMenuState
addItem	Savegame/BattleUnit.cpp	/^bool BattleUnit::addItem(BattleItem *item, const Mod *mod, bool allowSecondClip, bool allowAutoLoadout, bool allowUnloadedWeapons)$/;"	f	class:OpenXcom::BattleUnit
addItem	Savegame/ItemContainer.cpp	/^void ItemContainer::addItem(const RuleItem* item, int qty)$/;"	f	class:OpenXcom::ItemContainer
addItem	Savegame/ItemContainer.cpp	/^void ItemContainer::addItem(const std::string &id, int qty)$/;"	f	class:OpenXcom::ItemContainer
addItem	Savegame/Tile.cpp	/^void Tile::addItem(BattleItem *item, const RuleInventory *ground)$/;"	f	class:OpenXcom::Tile
addItemTargets	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addItemTargets(std::ostringstream& ss, const RuleItem* value, const std::string& propertyName, const int& defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addItemsToBaseStores	Battlescape/DebriefingState.cpp	/^void DebriefingState::addItemsToBaseStores(const RuleItem *ruleItem, Base *base, int quantity, bool considerTransformations)$/;"	f	class:OpenXcom::DebriefingState
addItemsToBaseStores	Battlescape/DebriefingState.cpp	/^void DebriefingState::addItemsToBaseStores(const std::string &itemType, Base *base, int quantity, bool considerTransformations)$/;"	f	class:OpenXcom::DebriefingState
addKillCount	Savegame/BattleUnit.cpp	/^void BattleUnit::addKillCount()$/;"	f	class:OpenXcom::BattleUnit
addKillCount	Savegame/Soldier.cpp	/^void Soldier::addKillCount(int count)$/;"	f	class:OpenXcom::Soldier
addLabel	Engine/Script.cpp	/^ScriptRefData ParserWriter::addLabel(const ScriptRef& name)$/;"	f	class:OpenXcom::ParserWriter
addLengthDistance	lodepng.cpp	/^static void addLengthDistance(uivector* values, size_t length, size_t distance)$/;"	f	file:
addLight	Battlescape/TileEngine.cpp	/^void TileEngine::addLight(MapSubset gs, Position center, int power, LightLayers layer)$/;"	f	class:OpenXcom::TileEngine
addLight	Savegame/Tile.cpp	/^void Tile::addLight(int light, LightLayers layer)$/;"	f	class:OpenXcom::Tile
addLine	Battlescape/BattlescapeGenerator.cpp	/^bool BattlescapeGenerator::addLine(MapDirection direction, const std::vector<SDL_Rect*> *rects, RuleTerrain *terrain, int verticalGroup, int horizontalGroup, int crossingGroup)$/;"	f	class:OpenXcom::BattlescapeGenerator
addLine	Menu/StartState.cpp	/^void StartState::addLine(const std::string &str)$/;"	f	class:OpenXcom::StartState
addLoadedSpecialWeapon	Savegame/BattleUnit.cpp	/^void BattleUnit::addLoadedSpecialWeapon(BattleItem* item)$/;"	f	class:OpenXcom::BattleUnit
addLostVIP	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::addLostVIP(int score)$/;"	f	class:OpenXcom::SavedBattleGame
addManaExp	Savegame/BattleUnit.cpp	/^void BattleUnit::addManaExp(int weaponStat)$/;"	f	class:OpenXcom::BattleUnit
addMaxAndCurrStatScript	Mod/Unit.h	/^	static void addMaxAndCurrStatScript(T *t, int val)$/;"	f	struct:OpenXcom::UnitStats
addMaxStatScript	Mod/Unit.h	/^	static void addMaxStatScript(T *t, int val)$/;"	f	struct:OpenXcom::UnitStats
addMediKitTargets	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addMediKitTargets(std::ostringstream& ss, const RuleItem* value, const std::string& propertyName, const int& defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addMeleeExp	Savegame/BattleUnit.cpp	/^void BattleUnit::addMeleeExp()$/;"	f	class:OpenXcom::BattleUnit
addMissionCount	Savegame/Soldier.cpp	/^void Soldier::addMissionCount()$/;"	f	class:OpenXcom::Soldier
addMissionLocation	Savegame/AlienStrategy.cpp	/^void AlienStrategy::addMissionLocation(const std::string &varName, const std::string &regionName, int zoneNumber, int maximum)$/;"	f	class:OpenXcom::AlienStrategy
addMissionRun	Savegame/AlienStrategy.cpp	/^void AlienStrategy::addMissionRun(const std::string &varName, int increment)$/;"	f	class:OpenXcom::AlienStrategy
addMod	Mod/Mod.cpp	/^	void addMod(const std::string& s, int i)$/;"	f	class:OpenXcom::ModScriptGlobal
addMonth	Savegame/SavedGame.cpp	/^void SavedGame::addMonth()$/;"	f	class:OpenXcom::SavedGame
addMonthlyService	Savegame/SoldierDiary.cpp	/^void SoldierDiary::addMonthlyService()$/;"	f	class:OpenXcom::SoldierDiary
addMove	Engine/ShaderMove.h	/^	inline void addMove(int x, int y)$/;"	f	class:OpenXcom::ShaderMove
addMovementType	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addMovementType(std::ostringstream &ss, const MovementType &value, const std::string &propertyName, const MovementType &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addMovingUnit	Battlescape/TileEngine.cpp	/^void TileEngine::addMovingUnit(BattleUnit* unit)$/;"	f	class:OpenXcom::TileEngine
addName	Engine/Collections.h	/^		size_t addName(const std::string& name, size_t max)$/;"	f	class:OpenXcom::Collections::NamesToIndex
addNameRef	Engine/Script.cpp	/^ScriptRef ScriptGlobal::addNameRef(const std::string& s)$/;"	f	class:OpenXcom::ScriptGlobal
addNameRef	Engine/Script.cpp	/^ScriptRef ScriptParserBase::addNameRef(const std::string& s)$/;"	f	class:OpenXcom::ScriptParserBase
addOffset	Engine/ShaderRepeat.h	/^	inline void addOffset(int x, int y)$/;"	f	class:OpenXcom::ShaderRepeat
addOverlap	Savegame/Tile.cpp	/^void Tile::addOverlap()$/;"	f	class:OpenXcom::Tile
addPaddingBits	lodepng.cpp	/^static void addPaddingBits(unsigned char* out, const unsigned char* in,$/;"	f	file:
addPair	Engine/ScriptBind.h	/^	void addPair(const std::string& get)$/;"	f	struct:OpenXcom::Bind
addParserBase	Engine/Script.cpp	/^void ScriptParserBase::addParserBase(const std::string& s, const std::string& description, ScriptProcData::overloadFunc overload, ScriptRange<ScriptRange<ArgEnum>> overloadArg, ScriptProcData::parserFunc parser, ScriptProcData::argFunc arg, ScriptProcData::getFunc get)$/;"	f	class:OpenXcom::ScriptParserBase
addPercentageSignOrNothing	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addPercentageSignOrNothing(std::ostringstream &ss, const int &value, bool smartFormat)$/;"	f	class:OpenXcom::StatsForNerdsState
addPilot	Savegame/Craft.cpp	/^void Craft::addPilot(int pilotId)$/;"	f	class:OpenXcom::Craft
addPoppedResearch	Savegame/SavedGame.cpp	/^void SavedGame::addPoppedResearch(const RuleResearch* research)$/;"	f	class:OpenXcom::SavedGame
addProduction	Savegame/Base.cpp	/^void Base::addProduction (Production * p)$/;"	f	class:OpenXcom::Base
addPsiSkillExp	Savegame/BattleUnit.cpp	/^void BattleUnit::addPsiSkillExp()$/;"	f	class:OpenXcom::BattleUnit
addPsiStrengthExp	Savegame/BattleUnit.cpp	/^void BattleUnit::addPsiStrengthExp()$/;"	f	class:OpenXcom::BattleUnit
addReactionExp	Savegame/BattleUnit.cpp	/^void BattleUnit::addReactionExp()$/;"	f	class:OpenXcom::BattleUnit
addReg	Engine/Script.cpp	/^ScriptRefData ParserWriter::addReg(const ScriptRef& s, ArgEnum type)$/;"	f	class:OpenXcom::ParserWriter
addReg	Engine/ScriptBind.h	/^	bool addReg(const ScriptRef& s)$/;"	f	struct:OpenXcom::ParserWriter
addReinforcement	Battlescape/NextTurnState.cpp	/^BattleUnit* NextTurnState::addReinforcement(const ReinforcementsData &wave, Unit *rules, int alienRank, bool civilian)$/;"	f	class:OpenXcom::NextTurnState
addResearch	Savegame/Base.cpp	/^void Base::addResearch(ResearchProject * project)$/;"	f	class:OpenXcom::Base
addResearchScore	Savegame/SavedGame.cpp	/^void SavedGame::addResearchScore(int score)$/;"	f	class:OpenXcom::SavedGame
addRightClickActionType	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addRightClickActionType(std::ostringstream &ss, const int &value, const std::string &propertyName, const int &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addRow	Interface/TextList.cpp	/^void TextList::addRow(int cols, ...)$/;"	f	class:OpenXcom::TextList
addRule	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addRule(std::ostringstream &ss, T* rule, const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
addRuleArmorMoveCost	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addRuleArmorMoveCost(std::ostringstream &ss, const ArmorMoveCost &value, const std::string &propertyName, const ArmorMoveCost &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addRuleId	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addRuleId(std::ostringstream &ss, T* rule, const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
addRuleItemUseCostBasic	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addRuleItemUseCostBasic(std::ostringstream &ss, const RuleItemUseCost &value, const std::string &propertyName, const int &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addRuleItemUseCostFull	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addRuleItemUseCostFull(std::ostringstream &ss, const RuleItemUseCost &value, const std::string &propertyName, const RuleItemUseCost &defaultvalue, bool smartFormat, const RuleItemUseCost &formatBy)$/;"	f	class:OpenXcom::StatsForNerdsState
addRuleNamed	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addRuleNamed(std::ostringstream &ss, T* rule, const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
addRuleStatBonus	Ufopaedia/ArticleStateItem.cpp	/^	std::string ArticleStateItem::addRuleStatBonus(const RuleStatBonus &value)$/;"	f	class:OpenXcom::ArticleStateItem
addRuleStatBonus	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addRuleStatBonus(std::ostringstream &ss, const RuleStatBonus &value, const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
addRules	Engine/ScriptBind.h	/^	void addRules(const std::string& get)$/;"	f	struct:OpenXcom::Bind
addSavedVIP	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::addSavedVIP(int score)$/;"	f	class:OpenXcom::SavedBattleGame
addScore	Savegame/AlienMission.cpp	/^void AlienMission::addScore(double lon, double lat, SavedGame &game) const$/;"	f	class:OpenXcom::AlienMission
addScriptReg	Engine/Script.cpp	/^void ScriptParserBase::addScriptReg(const std::string& s, ArgEnum type, bool writableReg, bool outputReg)$/;"	f	class:OpenXcom::ScriptParserBase
addScriptTag	Engine/ScriptBind.h	/^	void addScriptTag()$/;"	f	struct:OpenXcom::Bind
addScriptTags	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addScriptTags(std::ostringstream &ss, const ScriptValues<T, I> &values)$/;"	f	class:OpenXcom::StatsForNerdsState
addScriptValue	Engine/ScriptBind.h	/^	void addScriptValue()$/;"	f	struct:OpenXcom::Bind
addSection	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addSection(const std::string &name, const std::string &desc, Uint8 color, bool forceShow)$/;"	f	class:OpenXcom::StatsForNerdsState
addSetStatsScript	Mod/Unit.h	/^	static void addSetStatsScript(TBind& b, std::string prefix, bool skipResorcesStats = false)$/;"	f	struct:OpenXcom::UnitStats
addSetStatsWithCurrScript	Mod/Unit.h	/^	static void addSetStatsWithCurrScript(TBind& b, std::string prefix)$/;"	f	struct:OpenXcom::UnitStats
addSettings	Menu/OptionsAdvancedState.cpp	/^void OptionsAdvancedState::addSettings(const std::vector<OptionInfo> &settings)$/;"	f	class:OpenXcom::OptionsAdvancedState
addShade_h	Engine/Script.cpp	/^static inline void addShade_h(int& reg, const int& var)$/;"	f	namespace:OpenXcom
addSingleString	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addSingleString(std::ostringstream &ss, const std::string &id, const std::string &propertyName, const std::string &defaultId, bool translate)$/;"	f	class:OpenXcom::StatsForNerdsState
addSmoke	Battlescape/TileEngine.cpp	/^void addSmoke(T& td, bool p)$/;"	f	namespace:OpenXcom::__anon45
addSmoke	Savegame/Tile.cpp	/^void Tile::addSmoke(int smoke)$/;"	f	class:OpenXcom::Tile
addSoldierNamePool	Mod/RuleSoldier.cpp	/^void RuleSoldier::addSoldierNamePool(const std::string &namFile)$/;"	f	class:OpenXcom::RuleSoldier
addSortHelper	Engine/Script.cpp	/^void addSortHelper(std::vector<R>& vec, R value)$/;"	f	namespace:OpenXcom::__anon8
addSound	Engine/SoundSet.cpp	/^Sound *SoundSet::addSound(int i)$/;"	f	class:OpenXcom::SoundSet
addSoundVectorResourcePaths	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addSoundVectorResourcePaths(std::ostringstream &ss, Mod *mod, const std::string &resourceSetName, const std::vector<int> &resourceIds)$/;"	f	class:OpenXcom::StatsForNerdsState
addSpecialAbility	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addSpecialAbility(std::ostringstream &ss, const SpecialAbility &value, const std::string &propertyName, const SpecialAbility &defaultvalue)$/;"	f	class:OpenXcom::StatsForNerdsState
addSpriteResourcePath	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addSpriteResourcePath(std::ostringstream &ss, Mod *mod, const std::string &resourceSetName, const int &resourceId)$/;"	f	class:OpenXcom::StatsForNerdsState
addStat	Battlescape/DebriefingState.cpp	/^void DebriefingState::addStat(const std::string &name, int quantity, int score)$/;"	f	class:OpenXcom::DebriefingState
addStat	Ufopaedia/ArticleStateArmor.cpp	/^	void ArticleStateArmor::addStat(const std::string &label, const std::string &stat)$/;"	f	class:OpenXcom::ArticleStateArmor
addStat	Ufopaedia/ArticleStateArmor.cpp	/^	void ArticleStateArmor::addStat(const std::string &label, int stat, bool plus)$/;"	f	class:OpenXcom::ArticleStateArmor
addStat	Ufopaedia/ArticleStateTFTDArmor.cpp	/^	void ArticleStateTFTDArmor::addStat(const std::string &label, const std::string &stat)$/;"	f	class:OpenXcom::ArticleStateTFTDArmor
addStat	Ufopaedia/ArticleStateTFTDArmor.cpp	/^	void ArticleStateTFTDArmor::addStat(const std::string &label, int stat, bool plus)$/;"	f	class:OpenXcom::ArticleStateTFTDArmor
addString	Engine/Script.cpp	/^ScriptRef addString(std::vector<std::vector<char>>& list, const std::string& s)$/;"	f	namespace:OpenXcom::__anon8
addStunCount	Savegame/Soldier.cpp	/^void Soldier::addStunCount(int count)$/;"	f	class:OpenXcom::Soldier
addStunScript	Savegame/BattleUnit.cpp	/^void addStunScript(BattleUnit *bu, int val)$/;"	f	namespace:OpenXcom::__anon36
addTag	Engine/Script.cpp	/^size_t ScriptGlobal::addTag(ArgEnum type, ScriptRef s, size_t valueType)$/;"	f	class:OpenXcom::ScriptGlobal
addTextFormat1Script	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addTextFormat1Script(const std::string &propertyName, const std::string &format, const int &value1)$/;"	f	class:OpenXcom::StatsForNerdsState
addTextFormat2Script	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addTextFormat2Script(const std::string &propertyName, const std::string &format, const int &value1, const int &value2)$/;"	f	class:OpenXcom::StatsForNerdsState
addTextScript	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addTextScript(const std::string &propertyName, const std::string &value)$/;"	f	class:OpenXcom::StatsForNerdsState
addThrowingExp	Savegame/BattleUnit.cpp	/^void BattleUnit::addThrowingExp()$/;"	f	class:OpenXcom::BattleUnit
addToVisibleTiles	Savegame/BattleUnit.cpp	/^bool BattleUnit::addToVisibleTiles(Tile *tile)$/;"	f	class:OpenXcom::BattleUnit
addToVisibleUnits	Savegame/BattleUnit.cpp	/^bool BattleUnit::addToVisibleUnits(BattleUnit *unit)$/;"	f	class:OpenXcom::BattleUnit
addTranslation	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addTranslation(std::ostringstream &ss, const std::string &id)$/;"	f	class:OpenXcom::StatsForNerdsState
addTypeBase	Engine/Script.cpp	/^void ScriptParserBase::addTypeBase(const std::string& s, ArgEnum type, TypeInfo meta)$/;"	f	class:OpenXcom::ScriptParserBase
addUfoToIgnoreList	Savegame/SavedGame.cpp	/^void SavedGame::addUfoToIgnoreList(int ufoId)$/;"	f	class:OpenXcom::SavedGame
addUnitStatBonus	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addUnitStatBonus(std::ostringstream &ss, const UnitStats &value, const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
addUnitStatFormatted	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addUnitStatFormatted(std::ostringstream &ss, const int &value, const std::string &label, bool &isFirst)$/;"	f	class:OpenXcom::StatsForNerdsState
addUnknownChunks	lodepng.cpp	/^static unsigned addUnknownChunks(ucvector* out, unsigned char* data, size_t datasize)$/;"	f	file:
addValue	Engine/ScriptBind.h	/^		ScriptValueData addValue(CompType defaultValue)$/;"	f	class:OpenXcom::ParserWriter::ReservedCrossRefrenece
addVaporCloud	Battlescape/Projectile.cpp	/^void Projectile::addVaporCloud()$/;"	f	class:OpenXcom::Projectile
addVaporParticle	Battlescape/Map.cpp	/^void Map::addVaporParticle(const Tile* tile, Particle particle)$/;"	f	class:OpenXcom::Map
addVectorOfGeneric	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addVectorOfGeneric(std::ostringstream &ss, const std::vector<T> &vec, const std::string &propertyName, Callback&& callback, bool translate)$/;"	f	class:OpenXcom::StatsForNerdsState
addVectorOfIntegers	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addVectorOfIntegers(std::ostringstream &ss, const std::vector<int> &vec, const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
addVectorOfPositions	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addVectorOfPositions(std::ostringstream &ss, const std::vector<Position> &vec, const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
addVectorOfResearch	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addVectorOfResearch(std::ostringstream &ss, const std::vector<const RuleResearch *> &vec, const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
addVectorOfRules	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addVectorOfRules(std::ostringstream &ss, const std::vector<T*> &vec, const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
addVectorOfRulesId	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addVectorOfRulesId(std::ostringstream &ss, const std::vector<T*> &vec, const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
addVectorOfRulesNamed	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addVectorOfRulesNamed(std::ostringstream &ss, const std::vector<T*> &vec, const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
addVectorOfStrings	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::addVectorOfStrings(std::ostringstream &ss, const std::vector<std::string> &vec, const std::string &propertyName, bool translate)$/;"	f	class:OpenXcom::StatsForNerdsState
addWaitingOutsideVIP	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::addWaitingOutsideVIP(int score)$/;"	f	class:OpenXcom::SavedBattleGame
addXCOMUnit	Battlescape/BattlescapeGenerator.cpp	/^BattleUnit *BattlescapeGenerator::addXCOMUnit(BattleUnit *unit)$/;"	f	class:OpenXcom::BattlescapeGenerator
addXCOMVehicle	Battlescape/BattlescapeGenerator.cpp	/^BattleUnit *BattlescapeGenerator::addXCOMVehicle(Vehicle *v)$/;"	f	class:OpenXcom::BattlescapeGenerator
add_id	lodepng.h	/^  unsigned add_id;$/;"	m	struct:LodePNGEncoderSettings
address	Engine/Adlib/fmopl.h	/^	UINT8 address;		\/* address register                  *\/$/;"	m	struct:fm_opl_f
adjustStats	Savegame/BattleUnit.cpp	/^void BattleUnit::adjustStats(const StatAdjustment &adjustment)$/;"	f	class:OpenXcom::BattleUnit
adl_gv_FORMAT	Engine/Adlib/adlplayer.cpp	/^int adl_gv_FORMAT = 0;\/\/0 = without title, 1=with title$/;"	v
adl_gv_chorus_instruments	Engine/Adlib/adlplayer.cpp	/^unsigned char adl_gv_chorus_instruments[16];$/;"	v
adl_gv_detune_table	Engine/Adlib/adlplayer.cpp	/^const int8_t adl_gv_detune_table[] = { \/\/ 9 * 12 -- pitch bend scale values depending on note$/;"	v
adl_gv_freq_table	Engine/Adlib/adlplayer.cpp	/^const int16_t adl_gv_freq_table[] = { \/\/ 9 * 12 -- notes frequency$/;"	v
adl_gv_instr_order	Engine/Adlib/adlplayer.cpp	/^const int8_t adl_gv_instr_order[] = {0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,9};$/;"	v
adl_gv_instruments_count	Engine/Adlib/adlplayer.cpp	/^unsigned int adl_gv_instruments_count = 0;$/;"	v
adl_gv_master_music_volume	Engine/Adlib/adlplayer.cpp	/^int adl_gv_master_music_volume = 127;$/;"	v
adl_gv_music_playing	Engine/Adlib/adlplayer.cpp	/^bool adl_gv_music_playing = false;$/;"	v
adl_gv_octave_table	Engine/Adlib/adlplayer.cpp	/^const int8_t adl_gv_octave_table[] = { \/\/ 9 * 12 -- octaves of notes$/;"	v
adl_gv_operators1	Engine/Adlib/adlplayer.cpp	/^const int8_t adl_gv_operators1[] = {0,1,2, 8,9,10, 16,17,18, 24,25,26};$/;"	v
adl_gv_polyphony_level	Engine/Adlib/adlplayer.cpp	/^int adl_gv_polyphony_level = 0;$/;"	v
adl_gv_samples_addr	Engine/Adlib/adlplayer.cpp	/^unsigned char* adl_gv_samples_addr = 0;$/;"	v
adl_gv_subtracks	Engine/Adlib/adlplayer.cpp	/^unsigned char* adl_gv_subtracks[128];$/;"	v
adl_gv_subtracks_count	Engine/Adlib/adlplayer.cpp	/^unsigned int adl_gv_subtracks_count = 0;$/;"	v
adl_gv_tempo	Engine/Adlib/adlplayer.cpp	/^int adl_gv_tempo = 120;$/;"	v
adl_gv_tempo_inc	Engine/Adlib/adlplayer.cpp	/^int adl_gv_tempo_inc = 70;$/;"	v
adl_gv_tempo_run	Engine/Adlib/adlplayer.cpp	/^int adl_gv_tempo_run = 60;$/;"	v
adl_gv_tmp_music_volume	Engine/Adlib/adlplayer.cpp	/^int adl_gv_tmp_music_volume = 127;$/;"	v
adl_gv_want_fade	Engine/Adlib/adlplayer.cpp	/^bool adl_gv_want_fade = false;$/;"	v
adler32	lodepng.cpp	/^static unsigned adler32(const unsigned char* data, unsigned len)$/;"	f	file:
adlib_channels	Engine/Adlib/adlplayer.cpp	/^} adlib_channels[12];$/;"	v	typeref:struct:struc_adlib_channels
adlib_get_unused_channel	Engine/Adlib/adlplayer.cpp	/^int adlib_get_unused_channel(int sample_id, bool* same_sample)$/;"	f
adlib_init	Engine/Adlib/adlplayer.cpp	/^void adlib_init()$/;"	f
adlib_play_note	Engine/Adlib/adlplayer.cpp	/^void adlib_play_note(int note, int volume, int instrument)$/;"	f
adlib_reg	Engine/Adlib/adlplayer.cpp	/^void adlib_reg(int i, int v)$/;"	f
adlib_reset_channels	Engine/Adlib/adlplayer.cpp	/^void adlib_reset_channels()$/;"	f
adlib_set_amplitude	Engine/Adlib/adlplayer.cpp	/^void adlib_set_amplitude(int channel, int value)$/;"	f
adlib_set_instrument_pitch	Engine/Adlib/adlplayer.cpp	/^void adlib_set_instrument_pitch(int instrument, int pitch)$/;"	f
advance	Savegame/GameTime.cpp	/^TimeTrigger GameTime::advance()$/;"	f	class:OpenXcom::GameTime
advance	Savegame/Transfer.cpp	/^void Transfer::advance(Base *base)$/;"	f	class:OpenXcom::Transfer
afterLoad	Mod/Armor.cpp	/^void Armor::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::Armor
afterLoad	Mod/RuleBaseFacility.cpp	/^void RuleBaseFacility::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::RuleBaseFacility
afterLoad	Mod/RuleCommendations.cpp	/^void RuleCommendations::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::RuleCommendations
afterLoad	Mod/RuleCountry.cpp	/^void RuleCountry::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::RuleCountry
afterLoad	Mod/RuleCraftWeapon.cpp	/^void RuleCraftWeapon::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::RuleCraftWeapon
afterLoad	Mod/RuleEnviroEffects.cpp	/^void RuleEnviroEffects::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::RuleEnviroEffects
afterLoad	Mod/RuleItem.cpp	/^void RuleItem::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::RuleItem
afterLoad	Mod/RuleManufacture.cpp	/^void RuleManufacture::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::RuleManufacture
afterLoad	Mod/RuleResearch.cpp	/^void RuleResearch::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::RuleResearch
afterLoad	Mod/RuleSkill.cpp	/^void RuleSkill::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::RuleSkill
afterLoad	Mod/RuleSoldier.cpp	/^void RuleSoldier::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::RuleSoldier
afterLoad	Mod/RuleStartingCondition.cpp	/^void RuleStartingCondition::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::RuleStartingCondition
afterLoad	Mod/Unit.cpp	/^void Unit::afterLoad(const Mod* mod)$/;"	f	class:OpenXcom::Unit
afterLoadHelper	Mod/Mod.cpp	/^static void afterLoadHelper(const char* name, Mod* mod, std::map<std::string, T*>& list, void (T::* func)(const Mod*))$/;"	f	namespace:OpenXcom
aggressiveDistance	Geoscape/DogfightState.cpp	/^void DogfightState::aggressiveDistance()$/;"	f	class:OpenXcom::DogfightState
aggressiveRetaliation	Engine/Options.inc.h	/^	storageLimitsEnforced, canSellLiveAliens, canTransferCraftsWhileAirborne, customInitialBase, aggressiveRetaliation, geoDragScrollInvert,$/;"	v
aim	Savegame/BattleUnit.cpp	/^void BattleUnit::aim(bool aiming)$/;"	f	class:OpenXcom::BattleUnit
aimMultiplier	Mod/Unit.h	/^	double aimMultiplier;$/;"	m	struct:OpenXcom::StatAdjustment
alienBleeding	Engine/Options.inc.h	/^	battleUFOExtenderAccuracy, battleConfirmFireMode, battleSmoothCamera, noAlienPanicMessages, alienBleeding;$/;"	v
alienRace	Savegame/MissionStatistics.h	/^	std::string alienRace;$/;"	m	struct:OpenXcom::MissionStatistics
alienRank	Mod/AlienDeployment.h	/^	int alienRank;$/;"	m	struct:OpenXcom::DeploymentData
align	Mod/RuleVideo.h	/^	TextHAlign align; \/\/ caption alignment$/;"	m	struct:OpenXcom::SlideshowSlide
align_bottom	Mod/ArticleDefinition.h	/^		bool align_bottom;$/;"	m	class:OpenXcom::ArticleDefinitionTextImage
allObjectivesDestroyed	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::allObjectivesDestroyed() const$/;"	f	class:OpenXcom::SavedBattleGame
allocateNode	Savegame/Node.cpp	/^void Node::allocateNode()$/;"	f	class:OpenXcom::Node
allocsize	lodepng.cpp	/^  size_t allocsize; \/*allocated size in bytes*\/$/;"	m	struct:uivector	file:
allocsize	lodepng.cpp	/^  size_t allocsize; \/*allocated size*\/$/;"	m	struct:ucvector	file:
allowBuildingQueue	Engine/Options.inc.h	/^	allowBuildingQueue, showFundsOnGeoscape, psiStrengthEval, allowPsiStrengthImprovement, fieldPromotions, meetingPoint;$/;"	v
allowButtons	Battlescape/BattlescapeState.cpp	/^bool BattlescapeState::allowButtons(bool allowSaving) const$/;"	f	class:OpenXcom::BattlescapeState
allowClickInversion	Interface/BattlescapeButton.cpp	/^void BattlescapeButton::allowClickInversion()$/;"	f	class:OpenXcom::BattlescapeButton
allowObjectiveRecovery	Mod/AlienDeployment.cpp	/^bool AlienDeployment::allowObjectiveRecovery() const$/;"	f	class:OpenXcom::AlienDeployment
allowPsiStrengthImprovement	Engine/Options.inc.h	/^	allowBuildingQueue, showFundsOnGeoscape, psiStrengthEval, allowPsiStrengthImprovement, fieldPromotions, meetingPoint;$/;"	v
allowPsionicCapture	Engine/Options.inc.h	/^	strafe, forceFire, showMoreStatsInInventoryView, allowPsionicCapture, skipNextTurnScreen, disableAutoEquip, battleDragScrollInvert,$/;"	v
allowReselect	Savegame/BattleUnit.cpp	/^void BattleUnit::allowReselect()$/;"	f	class:OpenXcom::BattleUnit
allowResize	Engine/Options.inc.h	/^	autosave, allowResize, borderless, debug, debugUi, fpsCounter, newSeedOnLoad, keepAspectRatio, nonSquarePixelRatio,$/;"	v
allowToggleInversion	Interface/BattlescapeButton.cpp	/^void BattlescapeButton::allowToggleInversion()$/;"	f	class:OpenXcom::BattlescapeButton
allowsKneeling	Mod/Armor.cpp	/^bool Armor::allowsKneeling(bool def) const$/;"	f	class:OpenXcom::Armor
allowsMoving	Mod/Armor.cpp	/^bool Armor::allowsMoving() const$/;"	f	class:OpenXcom::Armor
allowsRunning	Mod/Armor.cpp	/^bool Armor::allowsRunning(bool def) const$/;"	f	class:OpenXcom::Armor
allowsSneaking	Mod/Armor.cpp	/^bool Armor::allowsSneaking(bool def) const$/;"	f	class:OpenXcom::Armor
allowsStrafing	Mod/Armor.cpp	/^bool Armor::allowsStrafing(bool def) const$/;"	f	class:OpenXcom::Armor
alpha	lodepng.h	/^  unsigned alpha; \/*image is not opaque and alpha channel or alpha palette required*\/$/;"	m	struct:LodePNGColorProfile
alphaGrad	Engine/Scalers/xbrz.cpp	/^    static void alphaGrad(uint32_t& pixBack, uint32_t pixFront) { ColorGradient::template alphaGrad<M, N>(pixBack, pixFront); }$/;"	f	struct:__anon10::Scaler2x
alphaGrad	Engine/Scalers/xbrz.cpp	/^    static void alphaGrad(uint32_t& pixBack, uint32_t pixFront) { ColorGradient::template alphaGrad<M, N>(pixBack, pixFront); }$/;"	f	struct:__anon10::Scaler3x
alphaGrad	Engine/Scalers/xbrz.cpp	/^    static void alphaGrad(uint32_t& pixBack, uint32_t pixFront) { ColorGradient::template alphaGrad<M, N>(pixBack, pixFront); }$/;"	f	struct:__anon10::Scaler4x
alphaGrad	Engine/Scalers/xbrz.cpp	/^    static void alphaGrad(uint32_t& pixBack, uint32_t pixFront) { ColorGradient::template alphaGrad<M, N>(pixBack, pixFront); }$/;"	f	struct:__anon10::Scaler5x
alphaGrad	Engine/Scalers/xbrz.cpp	/^    static void alphaGrad(uint32_t& pixBack, uint32_t pixFront) { ColorGradient::template alphaGrad<M, N>(pixBack, pixFront); }$/;"	f	struct:__anon10::Scaler6x
alphaGrad	Engine/Scalers/xbrz.cpp	/^    static void alphaGrad(uint32_t& pixBack, uint32_t pixFront)$/;"	f	struct:__anon10::ColorGradientARGB
alphaGrad	Engine/Scalers/xbrz.cpp	/^    static void alphaGrad(uint32_t& pixBack, uint32_t pixFront)$/;"	f	struct:__anon10::ColorGradientRGB
altitude	Mod/UfoTrajectory.h	/^	size_t altitude;$/;"	m	struct:OpenXcom::TrajectoryWaypoint
ammoSlot	Mod/ArticleDefinition.h	/^		int ammoSlot = 0;$/;"	m	struct:OpenXcom::ArticlePage
ammoSlot	Mod/RuleItem.h	/^	int ammoSlot = 0;$/;"	m	struct:OpenXcom::RuleItemAction
amount	Mod/MapBlock.h	/^	int amount;$/;"	m	struct:OpenXcom::RandomizedItems
amount	Savegame/Transfer.h	/^	int amount;$/;"	m	struct:OpenXcom::TransferRow
ams	Engine/Adlib/fmopl.cpp	/^static INT32 ams;$/;"	v	file:
ams	Engine/Adlib/fmopl.h	/^	UINT8 ams;		\/* ams flag                            *\/$/;"	m	struct:fm_opl_slot
amsCnt	Engine/Adlib/fmopl.h	/^	INT32 amsCnt;$/;"	m	struct:fm_opl_f
amsIncr	Engine/Adlib/fmopl.cpp	/^static INT32 amsIncr;$/;"	v	file:
amsIncr	Engine/Adlib/fmopl.h	/^	INT32 amsIncr;$/;"	m	struct:fm_opl_f
ams_table	Engine/Adlib/fmopl.cpp	/^INT32  *ams_table;$/;"	v
ams_table	Engine/Adlib/fmopl.h	/^	INT32 *ams_table;$/;"	m	struct:fm_opl_f
animate	Battlescape/AlienInventory.cpp	/^void AlienInventory::animate()$/;"	f	class:OpenXcom::AlienInventory
animate	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::animate()$/;"	f	class:OpenXcom::BattlescapeState
animate	Battlescape/Explosion.cpp	/^bool Explosion::animate()$/;"	f	class:OpenXcom::Explosion
animate	Battlescape/Inventory.cpp	/^void Inventory::animate()$/;"	f	class:OpenXcom::Inventory
animate	Battlescape/Map.cpp	/^void Map::animate(bool redraw)$/;"	f	class:OpenXcom::Map
animate	Battlescape/MiniMapState.cpp	/^void MiniMapState::animate()$/;"	f	class:OpenXcom::MiniMapState
animate	Battlescape/MiniMapView.cpp	/^void MiniMapView::animate()$/;"	f	class:OpenXcom::MiniMapView
animate	Battlescape/Particle.cpp	/^bool Particle::animate()$/;"	f	class:OpenXcom::Particle
animate	Battlescape/ScannerState.cpp	/^void ScannerState::animate()$/;"	f	class:OpenXcom::ScannerState
animate	Battlescape/ScannerView.cpp	/^void ScannerView::animate()$/;"	f	class:OpenXcom::ScannerView
animate	Geoscape/DogfightState.cpp	/^void DogfightState::animate()$/;"	f	class:OpenXcom::DogfightState
animate	Menu/StartState.cpp	/^void StartState::animate()$/;"	f	class:OpenXcom::StartState
animate	Savegame/Tile.cpp	/^void Tile::animate()$/;"	f	class:OpenXcom::Tile
animateCraftDamage	Geoscape/DogfightState.cpp	/^void DogfightState::animateCraftDamage()$/;"	f	class:OpenXcom::DogfightState
anytimePsiTraining	Engine/Options.inc.h	/^OPT bool includePrimeStateInSavedLayout, anytimePsiTraining, weaponSelfDestruction, retainCorpses, craftLaunchAlways, globeSeasons, globeDetail, globeRadarLines, globeFlightPaths, globeAllRadarsOnBaseBuild,$/;"	v
appendToHitLog	Savegame/HitLog.cpp	/^void HitLog::appendToHitLog(HitLogEntryType type, UnitFaction faction)$/;"	f	class:OpenXcom::HitLog
appendToHitLog	Savegame/HitLog.cpp	/^void HitLog::appendToHitLog(HitLogEntryType type, UnitFaction faction, const std::string &text)$/;"	f	class:OpenXcom::HitLog
appendToHitLog	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::appendToHitLog(HitLogEntryType type, UnitFaction faction)$/;"	f	class:OpenXcom::SavedBattleGame
appendToHitLog	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::appendToHitLog(HitLogEntryType type, UnitFaction faction, const std::string &text)$/;"	f	class:OpenXcom::SavedBattleGame
appliedPainKill	Savegame/BattleUnitStatistics.h	/^	int appliedPainKill;                 \/\/\/< Tracks how many times this soldier applied pain killers$/;"	m	struct:OpenXcom::BattleUnitStatistics
appliedStimulant	Savegame/BattleUnitStatistics.h	/^	int appliedStimulant;                \/\/\/< Tracks how many times this soldier applied stimulant$/;"	m	struct:OpenXcom::BattleUnitStatistics
applyAccuracy	Battlescape/Projectile.cpp	/^void Projectile::applyAccuracy(Position origin, Position *target, double accuracy, bool keepRange, bool extendLine)$/;"	f	class:OpenXcom::Projectile
applyBattlescapeTheme	Engine/State.cpp	/^void State::applyBattlescapeTheme(const std::string& category)$/;"	f	class:OpenXcom::State
applyEnvi	Savegame/Tile.cpp	/^static inline void applyEnvi(BattleUnit* unit, int smoke, int fire, bool smokeDamage)$/;"	f	namespace:OpenXcom
applyEnviroEffects	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::applyEnviroEffects(const RuleEnviroEffects* enviroEffects)$/;"	f	class:OpenXcom::SavedBattleGame
applyEnvironmentalConditionToFaction	Battlescape/NextTurnState.cpp	/^bool NextTurnState::applyEnvironmentalConditionToFaction(UnitFaction faction, EnvironmentalCondition condition)$/;"	f	class:OpenXcom::NextTurnState
applyGravity	Battlescape/TileEngine.cpp	/^Tile *TileEngine::applyGravity(Tile *t)$/;"	f	class:OpenXcom::TileEngine
applyPercentages	Savegame/BattleUnit.cpp	/^void BattleUnit::applyPercentages(RuleItemUseCost &cost, const RuleItemUseCost &flat) const$/;"	f	class:OpenXcom::BattleUnit
applyVisibility	Battlescape/DebriefingState.cpp	/^void DebriefingState::applyVisibility()$/;"	f	class:OpenXcom::DebriefingState
arcing	Mod/RuleItem.h	/^	bool arcing = false; \/\/ Only overrides arcing: false on a weapon for a specific action$/;"	m	struct:OpenXcom::RuleItemAction
areAllEnemiesNeutralized	Battlescape/BattlescapeGame.h	/^	bool areAllEnemiesNeutralized() const { return _allEnemiesNeutralized; }$/;"	f	class:OpenXcom::BattlescapeGame
areOnlyPermittedSoldierTypesOnboard	Savegame/Craft.cpp	/^bool Craft::areOnlyPermittedSoldierTypesOnboard(const RuleStartingCondition* sc)$/;"	f	class:OpenXcom::Craft
arePilotsOnboard	Savegame/Craft.cpp	/^bool Craft::arePilotsOnboard()$/;"	f	class:OpenXcom::Craft
areRequiredItemsOnboard	Savegame/Craft.cpp	/^bool Craft::areRequiredItemsOnboard(const std::map<std::string, int>& requiredItems)$/;"	f	class:OpenXcom::Craft
areas	Mod/RuleRegion.h	/^	std::vector<MissionArea> areas;$/;"	m	struct:OpenXcom::MissionZone
arg	Engine/LocalizedText.cpp	/^LocalizedText &LocalizedText::arg(const std::string &val)$/;"	f	class:OpenXcom::LocalizedText
arg	Engine/LocalizedText.cpp	/^LocalizedText LocalizedText::arg(const std::string &val) const$/;"	f	class:OpenXcom::LocalizedText
arg	Engine/LocalizedText.h	/^LocalizedText &LocalizedText::arg(T val)$/;"	f	class:OpenXcom::LocalizedText
arg	Engine/LocalizedText.h	/^LocalizedText LocalizedText::arg(T val) const$/;"	f	class:OpenXcom::LocalizedText
arg	Engine/ScriptBind.h	/^	static constexpr int arg()$/;"	f	struct:OpenXcom::helper::ArgColection
argHelper	Engine/ScriptBind.h	/^	static ScriptRange<ArgEnum> argHelper()$/;"	f	struct:OpenXcom::helper::ArgColection
argTypes	Engine/ScriptBind.h	/^	static ScriptRange<ArgEnum> argTypes()$/;"	f	struct:OpenXcom::helper::Arg
argTypes	Engine/ScriptBind.h	/^	static ScriptRange<ArgEnum> argTypes()$/;"	f	struct:OpenXcom::helper::ArgInternal
args	Engine/CrossPlatform.cpp	/^static std::vector<std::string> args;$/;"	m	namespace:OpenXcom::CrossPlatform	file:
argument_type	Geoscape/GeoscapeState.cpp	/^	typedef Ufo* argument_type;$/;"	t	class:OpenXcom::DetectXCOMBase	file:
argument_type	Geoscape/GeoscapeState.cpp	/^	typedef const AlienBase* argument_type;$/;"	t	class:OpenXcom::GenerateSupplyMission	file:
argument_type	Geoscape/GeoscapeState.cpp	/^	typedef std::map<const Region*, Base*>::value_type argument_type;$/;"	t	struct:OpenXcom::SetRetaliationTarget	file:
argument_type	Savegame/AlienMission.cpp	/^	typedef const AlienBase* argument_type;$/;"	t	class:OpenXcom::matchById	file:
argument_type	Savegame/AlienMission.cpp	/^	typedef const Base* argument_type;$/;"	t	class:OpenXcom::MatchBaseCoordinates	file:
argument_type	Savegame/SavedGame.cpp	/^	typedef Production* argument_type;$/;"	t	struct:OpenXcom::__anon41::equalProduction	file:
argument_type	Savegame/SavedGame.cpp	/^	typedef ResearchProject* argument_type;$/;"	t	struct:OpenXcom::__anon41::findRuleResearch	file:
argument_type	Savegame/SavedGame.cpp	/^	typedef const Country* argument_type;$/;"	t	class:OpenXcom::CountryContainsPoint	file:
argument_type	Savegame/SavedGame.cpp	/^	typedef const Region* argument_type;$/;"	t	class:OpenXcom::ContainsPoint	file:
argument_type	Savegame/Ufo.cpp	/^	typedef const AlienMission* argument_type;$/;"	t	class:OpenXcom::matchMissionID	file:
armor	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
armorMultiplier	Mod/Unit.h	/^	double armorMultiplier;$/;"	m	struct:OpenXcom::StatAdjustment
arrangeGround	Battlescape/Inventory.cpp	/^void Inventory::arrangeGround(int alterOffset)$/;"	f	class:OpenXcom::Inventory
articleList	Ufopaedia/ArticleState.h	/^		std::vector<ArticleDefinition *> articleList;$/;"	m	struct:OpenXcom::ArticleCommonState
asBool	Engine/OptionInfo.cpp	/^bool *OptionInfo::asBool() const$/;"	f	class:OpenXcom::OptionInfo
asInt	Engine/OptionInfo.cpp	/^int *OptionInfo::asInt() const$/;"	f	class:OpenXcom::OptionInfo
asKey	Engine/OptionInfo.cpp	/^SDLKey *OptionInfo::asKey() const$/;"	f	class:OpenXcom::OptionInfo
asString	Engine/OptionInfo.cpp	/^std::string *OptionInfo::asString() const$/;"	f	class:OpenXcom::OptionInfo
assert_throw	Engine/Unicode.cpp	772;"	d	file:
asyncBlit	Engine/Options.inc.h	/^OPT bool fullscreen, asyncBlit, playIntro, useScaleFilter, useHQXFilter, useXBRZFilter, useOpenGL, checkOpenGLErrors, vSyncForOpenGL, useOpenGLSmoothing,$/;"	v
at	Engine/FileMap.cpp	/^	const FileRecord *at(const std::string& relpath) { return stack.at(relpath); }$/;"	f	struct:OpenXcom::FileMap::ModRecord
at	Engine/FileMap.cpp	/^	const FileRecord *at(const std::string& relpath) { return stack.at(relpath); }$/;"	f	struct:OpenXcom::FileMap::VFS
at	Engine/FileMap.cpp	/^	const FileRecord *at(const std::string& relpath) {$/;"	f	struct:OpenXcom::FileMap::VFSLayer
at	Engine/FileMap.cpp	/^	const FileRecord *at(const std::string& relpath) {$/;"	f	struct:OpenXcom::FileMap::VFSLayerStack
at	Engine/FileMap.cpp	/^const FileRecord *at(const std::string &relativeFilePath) {$/;"	f	namespace:OpenXcom::FileMap
attachNodeLinks	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::attachNodeLinks()$/;"	f	class:OpenXcom::BattlescapeGenerator
attackType	Battlescape/TileEngine.h	/^		BattleActionType attackType;$/;"	m	struct:OpenXcom::TileEngine::ReactionScore
attacker	Mod/RuleItem.h	/^	BattleUnit *attacker = nullptr;$/;"	m	struct:OpenXcom::BattleActionAttack
attacker	Mod/RuleItem.h	/^	const BattleUnit *attacker = nullptr;$/;"	m	struct:OpenXcom::helper::BattleActionAttackReadOnlyImpl
audioBitDepth	Engine/Options.inc.h	/^	soundVolume, musicVolume, uiVolume, audioSampleRate, audioBitDepth, audioChunkSize, pauseMode, windowedModePositionX, windowedModePositionY, FPS, FPSInactive,$/;"	v
audioCallback	Engine/FlcPlayer.cpp	/^void FlcPlayer::audioCallback(void *userData, Uint8 *stream, int len)$/;"	f	class:OpenXcom::FlcPlayer
audioChunkSize	Engine/Options.inc.h	/^	soundVolume, musicVolume, uiVolume, audioSampleRate, audioBitDepth, audioChunkSize, pauseMode, windowedModePositionX, windowedModePositionY, FPS, FPSInactive,$/;"	v
audioHandler	Menu/VideoState.cpp	/^static void audioHandler()$/;"	f	namespace:OpenXcom
audioSampleRate	Engine/Options.inc.h	/^	soundVolume, musicVolume, uiVolume, audioSampleRate, audioBitDepth, audioChunkSize, pauseMode, windowedModePositionX, windowedModePositionY, FPS, FPSInactive,$/;"	v
audioSequence	Menu/VideoState.cpp	/^} *audioSequence = NULL;$/;"	m	namespace:OpenXcom	typeref:struct:OpenXcom::AudioSequence	file:
autoEndBattle	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::autoEndBattle()$/;"	f	class:OpenXcom::BattlescapeGame
autoEquip	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::autoEquip(std::vector<BattleUnit*> units, Mod *mod, std::vector<BattleItem*> *craftInv,$/;"	f	class:OpenXcom::BattlescapeGenerator
autoMoveEquipment	Savegame/Soldier.cpp	/^void Soldier::autoMoveEquipment(Craft* craft, Base* base, int toBase)$/;"	f	class:OpenXcom::Soldier
autoShotCounter	Battlescape/BattlescapeGame.h	/^	int autoShotCounter;$/;"	m	struct:OpenXcom::BattleAction
autoSurrender	Mod/Unit.cpp	/^bool Unit::autoSurrender() const$/;"	f	class:OpenXcom::Unit
auto_convert	lodepng.h	/^  unsigned auto_convert; \/*automatically choose output PNG color type. Default: true*\/$/;"	m	struct:LodePNGEncoderSettings
autosave	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::autosave(int currentTurn)$/;"	f	class:OpenXcom::BattlescapeState
autosave	Engine/Options.inc.h	/^	autosave, allowResize, borderless, debug, debugUi, fpsCounter, newSeedOnLoad, keepAspectRatio, nonSquarePixelRatio,$/;"	v
autosaveFrequency	Engine/Options.inc.h	/^	changeValueByMouseWheel, dragScrollTimeTolerance, dragScrollPixelTolerance, mousewheelSpeed, autosaveFrequency;$/;"	v
autosaveSlots	Engine/Options.inc.h	/^OPT int autosaveSlots;$/;"	v
avoidBonus	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
awardBestOfRank	Savegame/SoldierDiary.cpp	/^void SoldierDiary::awardBestOfRank(int score)$/;"	f	class:OpenXcom::SoldierDiary
awardBestOverall	Savegame/SoldierDiary.cpp	/^void SoldierDiary::awardBestOverall(int score)$/;"	f	class:OpenXcom::SoldierDiary
awardExperience	Battlescape/TileEngine.cpp	/^bool TileEngine::awardExperience(BattleActionAttack attack, BattleUnit *target, bool rangeAtack)$/;"	f	class:OpenXcom::TileEngine
awardExperienceToPilots	Geoscape/DogfightState.cpp	/^void DogfightState::awardExperienceToPilots()$/;"	f	class:OpenXcom::DogfightState
awardOriginalEightCommendation	Savegame/SoldierDiary.cpp	/^void SoldierDiary::awardOriginalEightCommendation(const Mod* mod)$/;"	f	class:OpenXcom::SoldierDiary
awardPostMortemKill	Savegame/SoldierDiary.cpp	/^void SoldierDiary::awardPostMortemKill(int kills)$/;"	f	class:OpenXcom::SoldierDiary
b	Engine/OptionInfo.h	/^	union { bool *b; int *i; std::string *s; SDLKey *k; } _ref;$/;"	m	union:OpenXcom::OptionInfo::__anon1
b	Engine/OptionInfo.h	/^	union { bool b; int i; const char *s; SDLKey k; } _def; \/\/ can't put strings in unions$/;"	m	union:OpenXcom::OptionInfo::__anon2
b	Engine/Scalers/xbrz.cpp	/^    \/**\/a,  b,  c,$/;"	m	struct:__anon10::Kernel_3x3	file:
b	Engine/Scalers/xbrz.cpp	/^    \/**\/a, b, c, d,$/;"	m	struct:__anon10::Kernel_4x4	file:
b	Engine/Scalers/xbrz.cpp	411;"	d	file:
b	Engine/Scalers/xbrz.cpp	472;"	d	file:
backPos	Engine/Palette.h	/^	static const int backPos = 224;$/;"	m	class:OpenXcom::Palette
background	Mod/AlienDeployment.h	/^	std::string title, desc, music, background, cutscene;$/;"	m	struct:OpenXcom::BriefingData
backgroundMute	Engine/Options.inc.h	/^	rootWindowedMode, lazyLoadResources, backgroundMute;$/;"	v
background_b	lodepng.h	/^  unsigned background_b;       \/*blue component of suggested background color*\/$/;"	m	struct:LodePNGInfo
background_defined	lodepng.h	/^  unsigned background_defined; \/*is a suggested background color given?*\/$/;"	m	struct:LodePNGInfo
background_g	lodepng.h	/^  unsigned background_g;       \/*green component of suggested background color*\/$/;"	m	struct:LodePNGInfo
background_r	lodepng.h	/^  unsigned background_r;       \/*red component of suggested background color*\/$/;"	m	struct:LodePNGInfo
backupDisplay	Engine/Options.cpp	/^void backupDisplay()$/;"	f	namespace:OpenXcom::Options
backupOriginalDestination	Savegame/Ufo.cpp	/^void Ufo::backupOriginalDestination()$/;"	f	class:OpenXcom::Ufo
baseFilename	Engine/CrossPlatform.cpp	/^std::string baseFilename(const std::string &path)$/;"	f	namespace:OpenXcom::CrossPlatform
baseHunting	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::baseHunting()$/;"	f	class:OpenXcom::GeoscapeState
baseXBattlescape	Engine/Options.inc.h	/^OPT int displayWidth, displayHeight, maxFrameSkip, baseXResolution, baseYResolution, baseXGeoscape, baseYGeoscape, baseXBattlescape, baseYBattlescape,$/;"	v
baseXGeoscape	Engine/Options.inc.h	/^OPT int displayWidth, displayHeight, maxFrameSkip, baseXResolution, baseYResolution, baseXGeoscape, baseYGeoscape, baseXBattlescape, baseYBattlescape,$/;"	v
baseXResolution	Engine/Options.inc.h	/^OPT int displayWidth, displayHeight, maxFrameSkip, baseXResolution, baseYResolution, baseXGeoscape, baseYGeoscape, baseXBattlescape, baseYBattlescape,$/;"	v
baseYBattlescape	Engine/Options.inc.h	/^OPT int displayWidth, displayHeight, maxFrameSkip, baseXResolution, baseYResolution, baseXGeoscape, baseYGeoscape, baseXBattlescape, baseYBattlescape,$/;"	v
baseYGeoscape	Engine/Options.inc.h	/^OPT int displayWidth, displayHeight, maxFrameSkip, baseXResolution, baseYResolution, baseXGeoscape, baseYGeoscape, baseXBattlescape, baseYBattlescape,$/;"	v
baseYResolution	Engine/Options.inc.h	/^OPT int displayWidth, displayHeight, maxFrameSkip, baseXResolution, baseYResolution, baseXGeoscape, baseYGeoscape, baseXBattlescape, baseYBattlescape,$/;"	v
base_type	Engine/ShaderDrawHelper.h	/^	typedef controler_base<PixelPtr, PixelRef> base_type;$/;"	t	struct:OpenXcom::helper::controler
base_type	Engine/ShaderMove.h	/^	typedef controler_base<PixelPtr, PixelRef> base_type;$/;"	t	struct:OpenXcom::helper::controler
basicEnergyRegeneration	Mod/RuleStatBonus.cpp	/^float basicEnergyRegeneration(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
battleActionImpl	Savegame/BattleUnit.cpp	/^void battleActionImpl(BindBase& b)$/;"	f	namespace:OpenXcom::__anon37
battleAlienSpeed	Engine/Options.inc.h	/^OPT int battleScrollSpeed, battleDragScrollButton, battleFireSpeed, battleXcomSpeed, battleAlienSpeed, battleExplosionHeight, battlescapeScale;$/;"	v
battleAutoEnd	Engine/Options.inc.h	/^OPT bool traceAI, sneakyAI, battleInstantGrenade, battleNotifyDeath, battleTooltips, battleHairBleach, battleAutoEnd,$/;"	v
battleConfirmFireMode	Engine/Options.inc.h	/^	battleUFOExtenderAccuracy, battleConfirmFireMode, battleSmoothCamera, noAlienPanicMessages, alienBleeding;$/;"	v
battleDragScrollButton	Engine/Options.inc.h	/^OPT int battleScrollSpeed, battleDragScrollButton, battleFireSpeed, battleXcomSpeed, battleAlienSpeed, battleExplosionHeight, battlescapeScale;$/;"	v
battleDragScrollInvert	Engine/Options.inc.h	/^	strafe, forceFire, showMoreStatsInInventoryView, allowPsionicCapture, skipNextTurnScreen, disableAutoEquip, battleDragScrollInvert,$/;"	v
battleEdgeScroll	Engine/Options.inc.h	/^OPT ScrollType battleEdgeScroll;$/;"	v
battleExplosionHeight	Engine/Options.inc.h	/^OPT int battleScrollSpeed, battleDragScrollButton, battleFireSpeed, battleXcomSpeed, battleAlienSpeed, battleExplosionHeight, battlescapeScale;$/;"	v
battleFireSpeed	Engine/Options.inc.h	/^OPT int battleScrollSpeed, battleDragScrollButton, battleFireSpeed, battleXcomSpeed, battleAlienSpeed, battleExplosionHeight, battlescapeScale;$/;"	v
battleHairBleach	Engine/Options.inc.h	/^OPT bool traceAI, sneakyAI, battleInstantGrenade, battleNotifyDeath, battleTooltips, battleHairBleach, battleAutoEnd,$/;"	v
battleInstantGrenade	Engine/Options.inc.h	/^OPT bool traceAI, sneakyAI, battleInstantGrenade, battleNotifyDeath, battleTooltips, battleHairBleach, battleAutoEnd,$/;"	v
battleItemScripts	Mod/ModScript.h	/^	BattleItemScripts battleItemScripts = { _shared, _mod, "item" };$/;"	m	class:OpenXcom::ModScript
battleNewPreviewPath	Engine/Options.inc.h	/^OPT PathPreview battleNewPreviewPath;$/;"	v
battleNotifyDeath	Engine/Options.inc.h	/^OPT bool traceAI, sneakyAI, battleInstantGrenade, battleNotifyDeath, battleTooltips, battleHairBleach, battleAutoEnd,$/;"	v
battleScrollSpeed	Engine/Options.inc.h	/^OPT int battleScrollSpeed, battleDragScrollButton, battleFireSpeed, battleXcomSpeed, battleAlienSpeed, battleExplosionHeight, battlescapeScale;$/;"	v
battleSmoothCamera	Engine/Options.inc.h	/^	battleUFOExtenderAccuracy, battleConfirmFireMode, battleSmoothCamera, noAlienPanicMessages, alienBleeding;$/;"	v
battleTooltips	Engine/Options.inc.h	/^OPT bool traceAI, sneakyAI, battleInstantGrenade, battleNotifyDeath, battleTooltips, battleHairBleach, battleAutoEnd,$/;"	v
battleUFOExtenderAccuracy	Engine/Options.inc.h	/^	battleUFOExtenderAccuracy, battleConfirmFireMode, battleSmoothCamera, noAlienPanicMessages, alienBleeding;$/;"	v
battleXcomSpeed	Engine/Options.inc.h	/^OPT int battleScrollSpeed, battleDragScrollButton, battleFireSpeed, battleXcomSpeed, battleAlienSpeed, battleExplosionHeight, battlescapeScale;$/;"	v
battlescapeScale	Engine/Options.inc.h	/^OPT int battleScrollSpeed, battleDragScrollButton, battleFireSpeed, battleXcomSpeed, battleAlienSpeed, battleExplosionHeight, battlescapeScale;$/;"	v
beg_x	Engine/GraphSubset.h	/^	DataType beg_x, end_x;$/;"	m	struct:OpenXcom::AreaSubset
beg_y	Engine/GraphSubset.h	/^	DataType beg_y, end_y;$/;"	m	struct:OpenXcom::AreaSubset
begin	Engine/Collections.h	/^		It begin()$/;"	f	class:OpenXcom::Collections::Range
beginLoad	Engine/Script.cpp	/^void ScriptGlobal::beginLoad()$/;"	f	class:OpenXcom::ScriptGlobal
belongsToCategory	Basescape/PurchaseState.cpp	/^bool PurchaseState::belongsToCategory(int sel, const std::string &cat) const$/;"	f	class:OpenXcom::PurchaseState
belongsToCategory	Basescape/SellState.cpp	/^bool SellState::belongsToCategory(int sel, const std::string &cat) const$/;"	f	class:OpenXcom::SellState
belongsToCategory	Basescape/TransferItemsState.cpp	/^bool TransferItemsState::belongsToCategory(int sel, const std::string &cat) const$/;"	f	class:OpenXcom::TransferItemsState
belongsToCategory	Mod/RuleItem.cpp	/^bool RuleItem::belongsToCategory(const std::string &category) const$/;"	f	class:OpenXcom::RuleItem
bigWall	Battlescape/TileEngine.h	/^		Uint8 bigWall;$/;"	m	struct:OpenXcom::TileEngine::VisibilityBlockCache
bigWall	Savegame/Tile.h	/^		Uint8 bigWall:1;$/;"	m	struct:OpenXcom::Tile::TileCache
bigWallTypes	Battlescape/Pathfinding.h	/^	enum bigWallTypes{ BLOCK = 1, BIGWALLNESW, BIGWALLNWSE, BIGWALLWEST, BIGWALLNORTH, BIGWALLEAST, BIGWALLSOUTH, BIGWALLEASTANDSOUTH, BIGWALLWESTANDNORTH};$/;"	g	class:OpenXcom::Pathfinding
binaryBuffer	Savegame/SaveConverter.cpp	/^char *SaveConverter::binaryBuffer(const std::string &filename, std::vector<char> &buffer) const$/;"	f	class:OpenXcom::SaveConverter
bitMask	Geoscape/Globe.cpp	/^	static int bitMask(int i)$/;"	f	struct:OpenXcom::__anon49::GlobeStaticData
bit_popcount_h	Engine/Script.cpp	/^static inline RetEnum bit_popcount_h(int& reg)$/;"	f	namespace:OpenXcom
bitdepth	lodepng.h	/^  unsigned bitdepth;  \/*bits per sample, see PNG standard or documentation further in this header file*\/$/;"	m	struct:LodePNGColorMode
bits	lodepng.h	/^  unsigned bits; \/*bits per channel (not for palette). 1,2 or 4 for greyscale only. 16 if 16-bit per channel required.*\/$/;"	m	struct:LodePNGColorProfile
black	Engine/FlcPlayer.cpp	/^void FlcPlayer::black()$/;"	f	class:OpenXcom::FlcPlayer
blendCorner	Engine/Scalers/xbrz.cpp	/^    static void blendCorner(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler2x
blendCorner	Engine/Scalers/xbrz.cpp	/^    static void blendCorner(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler3x
blendCorner	Engine/Scalers/xbrz.cpp	/^    static void blendCorner(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler4x
blendCorner	Engine/Scalers/xbrz.cpp	/^    static void blendCorner(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler5x
blendCorner	Engine/Scalers/xbrz.cpp	/^    static void blendCorner(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler6x
blendLineDiagonal	Engine/Scalers/xbrz.cpp	/^    static void blendLineDiagonal(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler2x
blendLineDiagonal	Engine/Scalers/xbrz.cpp	/^    static void blendLineDiagonal(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler3x
blendLineDiagonal	Engine/Scalers/xbrz.cpp	/^    static void blendLineDiagonal(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler4x
blendLineDiagonal	Engine/Scalers/xbrz.cpp	/^    static void blendLineDiagonal(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler5x
blendLineDiagonal	Engine/Scalers/xbrz.cpp	/^    static void blendLineDiagonal(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler6x
blendLineShallow	Engine/Scalers/xbrz.cpp	/^    static void blendLineShallow(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler2x
blendLineShallow	Engine/Scalers/xbrz.cpp	/^    static void blendLineShallow(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler3x
blendLineShallow	Engine/Scalers/xbrz.cpp	/^    static void blendLineShallow(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler4x
blendLineShallow	Engine/Scalers/xbrz.cpp	/^    static void blendLineShallow(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler5x
blendLineShallow	Engine/Scalers/xbrz.cpp	/^    static void blendLineShallow(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler6x
blendLineSteep	Engine/Scalers/xbrz.cpp	/^    static void blendLineSteep(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler2x
blendLineSteep	Engine/Scalers/xbrz.cpp	/^    static void blendLineSteep(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler3x
blendLineSteep	Engine/Scalers/xbrz.cpp	/^    static void blendLineSteep(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler4x
blendLineSteep	Engine/Scalers/xbrz.cpp	/^    static void blendLineSteep(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler5x
blendLineSteep	Engine/Scalers/xbrz.cpp	/^    static void blendLineSteep(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler6x
blendLineSteepAndShallow	Engine/Scalers/xbrz.cpp	/^    static void blendLineSteepAndShallow(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler2x
blendLineSteepAndShallow	Engine/Scalers/xbrz.cpp	/^    static void blendLineSteepAndShallow(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler3x
blendLineSteepAndShallow	Engine/Scalers/xbrz.cpp	/^    static void blendLineSteepAndShallow(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler4x
blendLineSteepAndShallow	Engine/Scalers/xbrz.cpp	/^    static void blendLineSteepAndShallow(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler5x
blendLineSteepAndShallow	Engine/Scalers/xbrz.cpp	/^    static void blendLineSteepAndShallow(uint32_t col, OutputMatrix& out)$/;"	f	struct:__anon10::Scaler6x
blendPixel	Engine/Scalers/xbrz.cpp	/^void blendPixel(const Kernel_3x3& ker,$/;"	f	namespace:__anon10
blend_f	Engine/Scalers/xbrz.cpp	/^    \/**\/blend_f, blend_g,$/;"	m	struct:__anon10::BlendResult	file:
blend_g	Engine/Scalers/xbrz.cpp	/^    \/**\/blend_f, blend_g,$/;"	m	struct:__anon10::BlendResult	file:
blend_j	Engine/Scalers/xbrz.cpp	/^    \/**\/blend_j, blend_k;$/;"	m	struct:__anon10::BlendResult	file:
blend_k	Engine/Scalers/xbrz.cpp	/^    \/**\/blend_j, blend_k;$/;"	m	struct:__anon10::BlendResult	file:
blendingNeeded	Engine/Scalers/xbrz.cpp	/^inline bool blendingNeeded(unsigned char b) { return b != 0; }$/;"	f	namespace:__anon10
blink	Basescape/BaseView.cpp	/^void BaseView::blink()$/;"	f	class:OpenXcom::BaseView
blink	Geoscape/Globe.cpp	/^void Globe::blink()$/;"	f	class:OpenXcom::Globe
blink	Interface/TextEdit.cpp	/^void TextEdit::blink()$/;"	f	class:OpenXcom::TextEdit
blinkHealthBar	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::blinkHealthBar()$/;"	f	class:OpenXcom::BattlescapeState
blinkVisibleUnitButtons	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::blinkVisibleUnitButtons()$/;"	f	class:OpenXcom::BattlescapeState
blit	Basescape/BaseView.cpp	/^void BaseView::blit(SDL_Surface *surface)$/;"	f	class:OpenXcom::BaseView
blit	Battlescape/AlienInventory.cpp	/^void AlienInventory::blit(SDL_Surface *surface)$/;"	f	class:OpenXcom::AlienInventory
blit	Battlescape/BattlescapeMessage.cpp	/^void BattlescapeMessage::blit(SDL_Surface *surface)$/;"	f	class:OpenXcom::BattlescapeMessage
blit	Battlescape/Inventory.cpp	/^void Inventory::blit(SDL_Surface *surface)$/;"	f	class:OpenXcom::Inventory
blit	Engine/State.cpp	/^void State::blit()$/;"	f	class:OpenXcom::State
blit	Engine/Surface.cpp	/^void Surface::blit(SDL_Surface *surface)$/;"	f	class:OpenXcom::Surface
blit	Engine/Surface.cpp	/^void SurfaceCrop::blit(Surface* dest)$/;"	f	class:OpenXcom::SurfaceCrop
blit	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::blit()$/;"	f	class:OpenXcom::GeoscapeState
blit	Geoscape/Globe.cpp	/^void Globe::blit(SDL_Surface *surface)$/;"	f	class:OpenXcom::Globe
blit	Interface/BattlescapeButton.cpp	/^void BattlescapeButton::blit(SDL_Surface *surface)$/;"	f	class:OpenXcom::BattlescapeButton
blit	Interface/ComboBox.cpp	/^void ComboBox::blit(SDL_Surface *surface)$/;"	f	class:OpenXcom::ComboBox
blit	Interface/ScrollBar.cpp	/^void ScrollBar::blit(SDL_Surface *surface)$/;"	f	class:OpenXcom::ScrollBar
blit	Interface/Slider.cpp	/^void Slider::blit(SDL_Surface *surface)$/;"	f	class:OpenXcom::Slider
blit	Interface/TextList.cpp	/^void TextList::blit(SDL_Surface *surface)$/;"	f	class:OpenXcom::TextList
blitBody	Battlescape/UnitSprite.cpp	/^void UnitSprite::blitBody(Part& body)$/;"	f	class:OpenXcom::UnitSprite
blitItem	Battlescape/UnitSprite.cpp	/^void UnitSprite::blitItem(Part& item)$/;"	f	class:OpenXcom::UnitSprite
blitNShade	Engine/Surface.cpp	/^void Surface::blitNShade(SurfaceRaw<Uint8> surface, int x, int y, int shade, GraphSubset range) const$/;"	f	class:OpenXcom::Surface
blitNShade	Engine/Surface.cpp	/^void Surface::blitNShade(SurfaceRaw<Uint8> surface, int x, int y, int shade, bool half, int newBaseColor) const$/;"	f	class:OpenXcom::Surface
blitRaw	Engine/Surface.cpp	/^void Surface::blitRaw(SurfaceRaw<Uint8> destSurf, SurfaceRaw<const Uint8> srcSurf, int x, int y, int shade, bool half, int newBaseColor)$/;"	f	class:OpenXcom::Surface
blockDir	Battlescape/TileEngine.h	/^		Uint32 blockDir;$/;"	m	struct:OpenXcom::TileEngine::VisibilityBlockCache
blockOffset	Engine/Palette.h	/^	static inline Uint8 blockOffset(Uint8 block) { return block*16; }$/;"	f	class:OpenXcom::Palette
block_fnum	Engine/Adlib/fmopl.h	/^	UINT32  block_fnum;	\/* block+fnum      :                   *\/$/;"	m	struct:fm_opl_channel
blockage	Battlescape/TileEngine.cpp	/^int TileEngine::blockage(Tile *tile, const TilePart part, ItemDamageType type, int direction, bool checkingFromOrigin)$/;"	f	class:OpenXcom::TileEngine
blocksize	md5.h	/^  enum {blocksize = 64}; \/\/ VC6 won't eat a const static int here$/;"	e	enum:MD5::__anon48
bodyPart	Battlescape/UnitSprite.h	/^		int bodyPart;$/;"	m	struct:OpenXcom::UnitSprite::Part
bodyPart	Mod/RuleEnviroEffects.h	/^	int bodyPart;$/;"	m	struct:OpenXcom::EnvironmentalCondition
bodypart	Savegame/BattleUnitStatistics.h	/^	UnitBodyPart bodypart;$/;"	m	struct:OpenXcom::BattleUnitKills
bonusStatsScripts	Mod/ModScript.h	/^	BonusStatsScripts bonusStatsScripts = { _shared, _mod, "bonuses" };$/;"	m	class:OpenXcom::ModScript
boolFields	Savegame/Tile.h	/^		Uint8 boolFields;$/;"	m	struct:OpenXcom::Tile::SerializationKey
border	Mod/RuleInterface.h	/^	int x, y, w, h, color, color2, border, custom;$/;"	m	struct:OpenXcom::Element
borderless	Engine/Options.inc.h	/^	autosave, allowResize, borderless, debug, debugUi, fpsCounter, newSeedOnLoad, keepAspectRatio, nonSquarePixelRatio,$/;"	v
boundSortHelper	Engine/Script.cpp	/^R* boundSortHelper(R* begin, R* end, ScriptRef prefix, ScriptRef postfix = {})$/;"	f	namespace:OpenXcom::__anon8
boundaryPM	lodepng.cpp	/^static void boundaryPM(BPMLists* lists, BPMNode* leaves, size_t numpresent, int c, int num)$/;"	f	file:
bpmnode_create	lodepng.cpp	/^static BPMNode* bpmnode_create(BPMLists* lists, int weight, unsigned index, BPMNode* tail)$/;"	f	file:
bpmnode_sort	lodepng.cpp	/^static void bpmnode_sort(BPMNode* leaves, size_t num)$/;"	f	file:
bravery	Mod/Unit.h	/^	Type tu, stamina, health, bravery, reactions, firing, throwing, strength, psiStrength, psiSkill, melee, mana;$/;"	m	struct:OpenXcom::UnitStats
breakDown	Mod/RuleManufacture.cpp	/^void RuleManufacture::breakDown(const Mod* mod, const RuleManufactureShortcut* recipe)$/;"	f	class:OpenXcom::RuleManufacture
breathe	Savegame/BattleUnit.cpp	/^void BattleUnit::breathe()$/;"	f	class:OpenXcom::BattleUnit
bresenhamPath	Battlescape/Pathfinding.cpp	/^bool Pathfinding::bresenhamPath(Position origin, Position target, BattleActionMove bam, const BattleUnit *missileTarget, bool sneak, int maxTUCost)$/;"	f	class:OpenXcom::Pathfinding
briefing	Mod/AlienDeployment.h	/^	BriefingData briefing;$/;"	m	struct:OpenXcom::ReinforcementsData
btnAbandonClick	Menu/PauseState.cpp	/^void PauseState::btnAbandonClick(Action *)$/;"	f	class:OpenXcom::PauseState
btnAbortClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnAbortClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnActionMenuItemClick	Battlescape/ActionMenuState.cpp	/^void ActionMenuState::btnActionMenuItemClick(Action *action)$/;"	f	class:OpenXcom::ActionMenuState
btnActionMenuItemClick	Battlescape/SkillMenuState.cpp	/^void SkillMenuState::btnActionMenuItemClick(Action *action)$/;"	f	class:OpenXcom::SkillMenuState
btnAddClick	Basescape/CraftPilotsState.cpp	/^void CraftPilotsState::btnAddClick(Action *)$/;"	f	class:OpenXcom::CraftPilotsState
btnAggressivePress	Geoscape/DogfightState.cpp	/^void DogfightState::btnAggressivePress(Action *)$/;"	f	class:OpenXcom::DogfightState
btnAggressiveRightPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnAggressiveRightPress(Action *)$/;"	f	class:OpenXcom::DogfightState
btnAggressiveSimulateLeftPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnAggressiveSimulateLeftPress(Action *action)$/;"	f	class:OpenXcom::DogfightState
btnAlienRaceChange	Menu/NewBattleState.cpp	/^void NewBattleState::btnAlienRaceChange(Action *action)$/;"	f	class:OpenXcom::NewBattleState
btnAltClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnAltClick(Action* action)$/;"	f	class:OpenXcom::BattlescapeState
btnApplyPersonalTemplateClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnApplyPersonalTemplateClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnApplyTemplateClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnApplyTemplateClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnArmorClick	Basescape/CraftInfoState.cpp	/^void CraftInfoState::btnArmorClick(Action *)$/;"	f	class:OpenXcom::CraftInfoState
btnArmorClick	Basescape/SoldierInfoState.cpp	/^void SoldierInfoState::btnArmorClick(Action *)$/;"	f	class:OpenXcom::SoldierInfoState
btnArmorClick	Battlescape/ExtendedInventoryLinksState.cpp	/^void ExtendedInventoryLinksState::btnArmorClick(Action *)$/;"	f	class:OpenXcom::ExtendedInventoryLinksState
btnArmorClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnArmorClick(Action *action)$/;"	f	class:OpenXcom::InventoryState
btnArmorClickMiddle	Battlescape/AlienInventoryState.cpp	/^void AlienInventoryState::btnArmorClickMiddle(Action *action)$/;"	f	class:OpenXcom::AlienInventoryState
btnArmorClickMiddle	Battlescape/InventoryState.cpp	/^void InventoryState::btnArmorClickMiddle(Action *action)$/;"	f	class:OpenXcom::InventoryState
btnArmorClickRight	Battlescape/InventoryState.cpp	/^void InventoryState::btnArmorClickRight(Action *action)$/;"	f	class:OpenXcom::InventoryState
btnArmorsClick	Battlescape/BriefingLightState.cpp	/^void BriefingLightState::btnArmorsClick(Action *)$/;"	f	class:OpenXcom::BriefingLightState
btnAssignAllSoldiersClick	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::btnAssignAllSoldiersClick(Action* action)$/;"	f	class:OpenXcom::AllocatePsiTrainingState
btnAssignAllSoldiersClick	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::btnAssignAllSoldiersClick(Action* action)$/;"	f	class:OpenXcom::AllocateTrainingState
btnAssignPilotsClick	Geoscape/CraftNotEnoughPilotsState.cpp	/^void CraftNotEnoughPilotsState::btnAssignPilotsClick(Action *)$/;"	f	class:OpenXcom::CraftNotEnoughPilotsState
btnAutoEquipClick	Battlescape/ExtendedInventoryLinksState.cpp	/^void ExtendedInventoryLinksState::btnAutoEquipClick(Action *)$/;"	f	class:OpenXcom::ExtendedInventoryLinksState
btnAvatarClick	Battlescape/ExtendedInventoryLinksState.cpp	/^void ExtendedInventoryLinksState::btnAvatarClick(Action *)$/;"	f	class:OpenXcom::ExtendedInventoryLinksState
btnBackClick	Basescape/TechTreeViewerState.cpp	/^void TechTreeViewerState::btnBackClick(Action *)$/;"	f	class:OpenXcom::TechTreeViewerState
btnBackgroundMuteClick	Menu/OptionsAudioState.cpp	/^void OptionsAudioState::btnBackgroundMuteClick(Action*)$/;"	f	class:OpenXcom::OptionsAudioState
btnBaseClick	Geoscape/DogfightErrorState.cpp	/^void DogfightErrorState::btnBaseClick(Action *)$/;"	f	class:OpenXcom::DogfightErrorState
btnBaseClick	Geoscape/GeoscapeCraftState.cpp	/^void GeoscapeCraftState::btnBaseClick(Action *)$/;"	f	class:OpenXcom::GeoscapeCraftState
btnBaseInfoClick	Basescape/BasescapeState.cpp	/^void BasescapeState::btnBaseInfoClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
btnBaseXClick	Geoscape/PsiTrainingState.cpp	/^void PsiTrainingState::btnBaseXClick(Action *action)$/;"	f	class:OpenXcom::PsiTrainingState
btnBaseXClick	Geoscape/TrainingState.cpp	/^void TrainingState::btnBaseXClick(Action *action)$/;"	f	class:OpenXcom::TrainingState
btnBasesClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnBasesClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnBonusesClick	Basescape/SoldierInfoState.cpp	/^void SoldierInfoState::btnBonusesClick(Action *)$/;"	f	class:OpenXcom::SoldierInfoState
btnBriefingClick	Battlescape/ExtendedBattlescapeLinksState.cpp	/^void ExtendedBattlescapeLinksState::btnBriefingClick(Action *)$/;"	f	class:OpenXcom::ExtendedBattlescapeLinksState
btnBriefingReinforcementsClick	Battlescape/NextTurnState.cpp	/^void NextTurnState::btnBriefingReinforcementsClick(Action*)$/;"	f	class:OpenXcom::NextTurnState
btnBrightnessClick	Battlescape/ExtendedBattlescapeLinksState.cpp	/^void ExtendedBattlescapeLinksState::btnBrightnessClick(Action *)$/;"	f	class:OpenXcom::ExtendedBattlescapeLinksState
btnCancelClick	Basescape/CraftEquipmentLoadState.cpp	/^void CraftEquipmentLoadState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::CraftEquipmentLoadState
btnCancelClick	Basescape/CraftEquipmentSaveState.cpp	/^void CraftEquipmentSaveState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::CraftEquipmentSaveState
btnCancelClick	Basescape/CraftPilotSelectState.cpp	/^void CraftPilotSelectState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::CraftPilotSelectState
btnCancelClick	Basescape/CraftWeaponsState.cpp	/^void CraftWeaponsState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::CraftWeaponsState
btnCancelClick	Basescape/DismantleFacilityState.cpp	/^void DismantleFacilityState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::DismantleFacilityState
btnCancelClick	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::ManageAlienContainmentState
btnCancelClick	Basescape/ManufactureStartState.cpp	/^void ManufactureStartState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::ManufactureStartState
btnCancelClick	Basescape/PlaceFacilityState.cpp	/^void PlaceFacilityState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::PlaceFacilityState
btnCancelClick	Basescape/PurchaseState.cpp	/^void PurchaseState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::PurchaseState
btnCancelClick	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::ResearchInfoState
btnCancelClick	Basescape/SackSoldierState.cpp	/^void SackSoldierState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::SackSoldierState
btnCancelClick	Basescape/SellState.cpp	/^void SellState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::SellState
btnCancelClick	Basescape/SoldierArmorState.cpp	/^void SoldierArmorState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::SoldierArmorState
btnCancelClick	Basescape/SoldierAvatarState.cpp	/^void SoldierAvatarState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::SoldierAvatarState
btnCancelClick	Basescape/SoldierBonusState.cpp	/^void SoldierBonusState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::SoldierBonusState
btnCancelClick	Basescape/SoldierTransformationState.cpp	/^void SoldierTransformationState::btnCancelClick(Action *action)$/;"	f	class:OpenXcom::SoldierTransformationState
btnCancelClick	Basescape/TransferBaseState.cpp	/^void TransferBaseState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::TransferBaseState
btnCancelClick	Basescape/TransferConfirmState.cpp	/^void TransferConfirmState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::TransferConfirmState
btnCancelClick	Basescape/TransferItemsState.cpp	/^void TransferItemsState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::TransferItemsState
btnCancelClick	Battlescape/AbortMissionState.cpp	/^void AbortMissionState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::AbortMissionState
btnCancelClick	Battlescape/ConfirmEndMissionState.cpp	/^void ConfirmEndMissionState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::ConfirmEndMissionState
btnCancelClick	Battlescape/InventoryLoadState.cpp	/^void InventoryLoadState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::InventoryLoadState
btnCancelClick	Battlescape/InventoryPersonalState.cpp	/^void InventoryPersonalState::btnCancelClick(Action*)$/;"	f	class:OpenXcom::InventoryPersonalState
btnCancelClick	Battlescape/InventorySaveState.cpp	/^void InventorySaveState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::InventorySaveState
btnCancelClick	Battlescape/TurnDiaryState.cpp	/^void TurnDiaryState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::TurnDiaryState
btnCancelClick	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnCancelClick	Geoscape/ConfirmDestinationState.cpp	/^void ConfirmDestinationState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::ConfirmDestinationState
btnCancelClick	Geoscape/ConfirmNewBaseState.cpp	/^void ConfirmNewBaseState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::ConfirmNewBaseState
btnCancelClick	Geoscape/GeoscapeCraftState.cpp	/^void GeoscapeCraftState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::GeoscapeCraftState
btnCancelClick	Geoscape/InterceptState.cpp	/^void InterceptState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::InterceptState
btnCancelClick	Geoscape/MissionDetectedState.cpp	/^void MissionDetectedState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::MissionDetectedState
btnCancelClick	Geoscape/MultipleTargetsState.cpp	/^void MultipleTargetsState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::MultipleTargetsState
btnCancelClick	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnCancelClick	Geoscape/SelectMusicTrackState.cpp	/^void SelectMusicTrackState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::SelectMusicTrackState
btnCancelClick	Geoscape/UfoDetectedState.cpp	/^void UfoDetectedState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::UfoDetectedState
btnCancelClick	Geoscape/UfoTrackerState.cpp	/^void UfoTrackerState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::UfoTrackerState
btnCancelClick	Menu/ListGamesState.cpp	/^void ListGamesState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::ListGamesState
btnCancelClick	Menu/ListLoadOriginalState.cpp	/^void ListLoadOriginalState::btnCancelClick(Action *action)$/;"	f	class:OpenXcom::ListLoadOriginalState
btnCancelClick	Menu/ModListState.cpp	/^void ModListState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::ModListState
btnCancelClick	Menu/NewBattleState.cpp	/^void NewBattleState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::NewBattleState
btnCancelClick	Menu/NewGameState.cpp	/^void NewGameState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::NewGameState
btnCancelClick	Menu/NotesState.cpp	/^void NotesState::btnCancelClick(Action*)$/;"	f	class:OpenXcom::NotesState
btnCancelClick	Menu/OptionsBaseState.cpp	/^void OptionsBaseState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::OptionsBaseState
btnCancelClick	Menu/PauseState.cpp	/^void PauseState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::PauseState
btnCancelClick	Menu/SetWindowedRootState.cpp	/^void SetWindowedRootState::btnCancelClick(Action *)$/;"	f	class:OpenXcom::SetWindowedRootState
btnCancelClick	Menu/TestPaletteState.cpp	/^void TestPaletteState::btnCancelClick(Action *action)$/;"	f	class:OpenXcom::TestPaletteState
btnCancelClick	Menu/TestState.cpp	/^void TestState::btnCancelClick(Action *action)$/;"	f	class:OpenXcom::TestState
btnCautiousPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnCautiousPress(Action *)$/;"	f	class:OpenXcom::DogfightState
btnCautiousRightPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnCautiousRightPress(Action *)$/;"	f	class:OpenXcom::DogfightState
btnCautiousSimulateLeftPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnCautiousSimulateLeftPress(Action *action)$/;"	f	class:OpenXcom::DogfightState
btnCenterClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnCenterClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnCenterClick	Geoscape/MissionDetectedState.cpp	/^void MissionDetectedState::btnCenterClick(Action *)$/;"	f	class:OpenXcom::MissionDetectedState
btnCentreClick	Geoscape/UfoDetectedState.cpp	/^void UfoDetectedState::btnCentreClick(Action *)$/;"	f	class:OpenXcom::UfoDetectedState
btnCleanupClick	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::btnCleanupClick(Action *)$/;"	f	class:OpenXcom::ManageAlienContainmentState
btnClearClick	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::btnClearClick(Action *)$/;"	f	class:OpenXcom::CraftEquipmentState
btnClick	Battlescape/PrimeGrenadeState.cpp	/^void PrimeGrenadeState::btnClick(Action *action)$/;"	f	class:OpenXcom::PrimeGrenadeState
btnCommendationsClick	Basescape/SoldierDiaryOverviewState.cpp	/^void SoldierDiaryOverviewState::btnCommendationsClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryOverviewState
btnCommendationsToggle	Basescape/SoldierDiaryPerformanceState.cpp	/^void SoldierDiaryPerformanceState::btnCommendationsToggle(Action *)$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
btnCountryListClick	Geoscape/GraphsState.cpp	/^void GraphsState::btnCountryListClick(Action * action)$/;"	f	class:OpenXcom::GraphsState
btnCraftIconClick	Basescape/CraftInfoState.cpp	/^void CraftInfoState::btnCraftIconClick(Action *action)$/;"	f	class:OpenXcom::CraftInfoState
btnCraftsClick	Basescape/BasescapeState.cpp	/^void BasescapeState::btnCraftsClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
btnCreatePersonalTemplateClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnCreatePersonalTemplateClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnCreateTemplateClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnCreateTemplateClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnCrewClick	Basescape/CraftInfoState.cpp	/^void CraftInfoState::btnCrewClick(Action *)$/;"	f	class:OpenXcom::CraftInfoState
btnCtrlClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnCtrlClick(Action* action)$/;"	f	class:OpenXcom::BattlescapeState
btnCydoniaClick	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnCydoniaClick(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnDeassignAllSoldiersClick	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::btnDeassignAllSoldiersClick(Action *action)$/;"	f	class:OpenXcom::CraftSoldiersState
btnDeassignAllSoldiersClick	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::btnDeassignAllSoldiersClick(Action* action)$/;"	f	class:OpenXcom::AllocatePsiTrainingState
btnDeassignAllSoldiersClick	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::btnDeassignAllSoldiersClick(Action* action)$/;"	f	class:OpenXcom::AllocateTrainingState
btnDeassignCraftSoldiersClick	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::btnDeassignCraftSoldiersClick(Action *action)$/;"	f	class:OpenXcom::CraftSoldiersState
btnDeathsClick	Menu/OptionsBattlescapeState.cpp	/^void OptionsBattlescapeState::btnDeathsClick(Action *)$/;"	f	class:OpenXcom::OptionsBattlescapeState
btnDebugClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnDebugClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnDeequipAllArmorClick	Basescape/CraftArmorState.cpp	/^void CraftArmorState::btnDeequipAllArmorClick(Action *action)$/;"	f	class:OpenXcom::CraftArmorState
btnDeequipCraftArmorClick	Basescape/CraftArmorState.cpp	/^void CraftArmorState::btnDeequipCraftArmorClick(Action *action)$/;"	f	class:OpenXcom::CraftArmorState
btnDefaultClick	Menu/OptionsBaseState.cpp	/^void OptionsBaseState::btnDefaultClick(Action *)$/;"	f	class:OpenXcom::OptionsBaseState
btnDiaryClick	Basescape/SoldierInfoState.cpp	/^void SoldierInfoState::btnDiaryClick(Action *)$/;"	f	class:OpenXcom::SoldierInfoState
btnDisengagePress	Geoscape/DogfightState.cpp	/^void DogfightState::btnDisengagePress(Action *)$/;"	f	class:OpenXcom::DogfightState
btnDisengageRightPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnDisengageRightPress(Action *)$/;"	f	class:OpenXcom::DogfightState
btnDisengageSimulateLeftPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnDisengageSimulateLeftPress(Action *action)$/;"	f	class:OpenXcom::DogfightState
btnDisplayResolutionDownClick	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::btnDisplayResolutionDownClick(Action *)$/;"	f	class:OpenXcom::OptionsVideoState
btnDisplayResolutionUpClick	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::btnDisplayResolutionUpClick(Action *)$/;"	f	class:OpenXcom::OptionsVideoState
btnDogfightExperienceClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnDogfightExperienceClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnEndTurnClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnEndTurnClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnEquipClick	Basescape/CraftInfoState.cpp	/^void CraftInfoState::btnEquipClick(Action *)$/;"	f	class:OpenXcom::CraftInfoState
btnEquipClick	Menu/NewBattleState.cpp	/^void NewBattleState::btnEquipClick(Action *)$/;"	f	class:OpenXcom::NewBattleState
btnEquipmentLoadClick	Battlescape/ExtendedInventoryLinksState.cpp	/^void ExtendedInventoryLinksState::btnEquipmentLoadClick(Action *)$/;"	f	class:OpenXcom::ExtendedInventoryLinksState
btnEquipmentSaveClick	Battlescape/ExtendedInventoryLinksState.cpp	/^void ExtendedInventoryLinksState::btnEquipmentSaveClick(Action *)$/;"	f	class:OpenXcom::ExtendedInventoryLinksState
btnFacilitiesClick	Basescape/BasescapeState.cpp	/^void BasescapeState::btnFacilitiesClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
btnFinanceClick	Geoscape/GraphsState.cpp	/^void GraphsState::btnFinanceClick(Action *)$/;"	f	class:OpenXcom::GraphsState
btnFinanceListClick	Geoscape/GraphsState.cpp	/^void GraphsState::btnFinanceListClick(Action *action)$/;"	f	class:OpenXcom::GraphsState
btnFlagClick	Basescape/SoldierInfoState.cpp	/^void SoldierInfoState::btnFlagClick(Action *action)$/;"	f	class:OpenXcom::SoldierInfoState
btnFundingClick	Geoscape/ExtendedGeoscapeLinksState.cpp	/^void ExtendedGeoscapeLinksState::btnFundingClick(Action *)$/;"	f	class:OpenXcom::ExtendedGeoscapeLinksState
btnFundingClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnFundingClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnGeoscapeClick	Basescape/BasescapeState.cpp	/^void BasescapeState::btnGeoscapeClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
btnGeoscapeClick	Geoscape/GraphsState.cpp	/^void GraphsState::btnGeoscapeClick(Action *)$/;"	f	class:OpenXcom::GraphsState
btnGlobalEquipmentLayoutClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnGlobalEquipmentLayoutClick(Action *action)$/;"	f	class:OpenXcom::InventoryState
btnGlobalProductionClick	Geoscape/ExtendedGeoscapeLinksState.cpp	/^void ExtendedGeoscapeLinksState::btnGlobalProductionClick(Action *)$/;"	f	class:OpenXcom::ExtendedGeoscapeLinksState
btnGlobalProductionClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnGlobalProductionClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnGlobalResearchClick	Geoscape/ExtendedGeoscapeLinksState.cpp	/^void ExtendedGeoscapeLinksState::btnGlobalResearchClick(Action *)$/;"	f	class:OpenXcom::ExtendedGeoscapeLinksState
btnGlobalResearchClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnGlobalResearchClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnGlobeCountriesClick	Menu/OptionsGeoscapeState.cpp	/^void OptionsGeoscapeState::btnGlobeCountriesClick(Action *)$/;"	f	class:OpenXcom::OptionsGeoscapeState
btnGlobePathsClick	Menu/OptionsGeoscapeState.cpp	/^void OptionsGeoscapeState::btnGlobePathsClick(Action *)$/;"	f	class:OpenXcom::OptionsGeoscapeState
btnGlobeRadarsClick	Menu/OptionsGeoscapeState.cpp	/^void OptionsGeoscapeState::btnGlobeRadarsClick(Action *)$/;"	f	class:OpenXcom::OptionsGeoscapeState
btnGotoBaseClick	Geoscape/InterceptState.cpp	/^void InterceptState::btnGotoBaseClick(Action *)$/;"	f	class:OpenXcom::InterceptState
btnGotoBaseClick	Geoscape/ItemsArrivingState.cpp	/^void ItemsArrivingState::btnGotoBaseClick(Action *)$/;"	f	class:OpenXcom::ItemsArrivingState
btnGotoBaseClick	Geoscape/ProductionCompleteState.cpp	/^void ProductionCompleteState::btnGotoBaseClick(Action *)$/;"	f	class:OpenXcom::ProductionCompleteState
btnGrandTotalClick	Basescape/StoresState.cpp	/^void StoresState::btnGrandTotalClick(Action *action)$/;"	f	class:OpenXcom::StoresState
btnGraphsClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnGraphsClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnGroundClickBackward	Battlescape/InventoryState.cpp	/^void InventoryState::btnGroundClickBackward(Action *action)$/;"	f	class:OpenXcom::InventoryState
btnGroundClickForward	Battlescape/InventoryState.cpp	/^void InventoryState::btnGroundClickForward(Action *action)$/;"	f	class:OpenXcom::InventoryState
btnGroupPress	Menu/OptionsBaseState.cpp	/^void OptionsBaseState::btnGroupPress(Action *action)$/;"	f	class:OpenXcom::OptionsBaseState
btnHelpClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnHelpClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnIncomeClick	Geoscape/GraphsState.cpp	/^void GraphsState::btnIncomeClick(Action *)$/;"	f	class:OpenXcom::GraphsState
btnInfoClick	Geoscape/TargetInfoState.cpp	/^void TargetInfoState::btnInfoClick(Action *)$/;"	f	class:OpenXcom::TargetInfoState
btnInfoClick	Ufopaedia/ArticleState.cpp	/^	void ArticleState::btnInfoClick(Action *)$/;"	f	class:OpenXcom::ArticleState
btnInterceptClick	Geoscape/DogfightErrorState.cpp	/^void DogfightErrorState::btnInterceptClick(Action *)$/;"	f	class:OpenXcom::DogfightErrorState
btnInterceptClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnInterceptClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnInterceptClick	Geoscape/MissionDetectedState.cpp	/^void MissionDetectedState::btnInterceptClick(Action *)$/;"	f	class:OpenXcom::MissionDetectedState
btnInterceptClick	Geoscape/TargetInfoState.cpp	/^void TargetInfoState::btnInterceptClick(Action *)$/;"	f	class:OpenXcom::TargetInfoState
btnInterceptClick	Geoscape/UfoDetectedState.cpp	/^void UfoDetectedState::btnInterceptClick(Action *)$/;"	f	class:OpenXcom::UfoDetectedState
btnInventoryClick	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::btnInventoryClick(Action *)$/;"	f	class:OpenXcom::CraftEquipmentState
btnInventoryClick	Basescape/SoldiersState.cpp	/^void SoldiersState::btnInventoryClick(Action *)$/;"	f	class:OpenXcom::SoldiersState
btnInventoryClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnInventoryClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnInventoryLoadClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnInventoryLoadClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnInventorySaveClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnInventorySaveClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnKillAllClick	Battlescape/ExtendedBattlescapeLinksState.cpp	/^void ExtendedBattlescapeLinksState::btnKillAllClick(Action *)$/;"	f	class:OpenXcom::ExtendedBattlescapeLinksState
btnKillsClick	Basescape/SoldierDiaryOverviewState.cpp	/^void SoldierDiaryOverviewState::btnKillsClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryOverviewState
btnKillsToggle	Basescape/SoldierDiaryPerformanceState.cpp	/^void SoldierDiaryPerformanceState::btnKillsToggle(Action *)$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
btnKneelClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnKneelClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnLaunchClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnLaunchClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnLeftArrowClick	Basescape/SoldierTransformationState.cpp	/^void SoldierTransformationState::btnLeftArrowClick(Action *action)$/;"	f	class:OpenXcom::SoldierTransformationState
btnLeftHandItemClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnLeftHandItemClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnLetterboxClick	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::btnLetterboxClick(Action *)$/;"	f	class:OpenXcom::OptionsVideoState
btnLevelDownClick	Battlescape/MiniMapState.cpp	/^void MiniMapState::btnLevelDownClick(Action *)$/;"	f	class:OpenXcom::MiniMapState
btnLevelUpClick	Battlescape/MiniMapState.cpp	/^void MiniMapState::btnLevelUpClick(Action *)$/;"	f	class:OpenXcom::MiniMapState
btnLinksClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnLinksClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnLoadClick	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::btnLoadClick(Action *)$/;"	f	class:OpenXcom::CraftEquipmentState
btnLoadClick	Menu/MainMenuState.cpp	/^void MainMenuState::btnLoadClick(Action *)$/;"	f	class:OpenXcom::MainMenuState
btnLoadClick	Menu/PauseState.cpp	/^void PauseState::btnLoadClick(Action *)$/;"	f	class:OpenXcom::PauseState
btnLockMouseClick	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::btnLockMouseClick(Action *)$/;"	f	class:OpenXcom::OptionsVideoState
btnMMBClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnMMBClick(Action* action)$/;"	f	class:OpenXcom::BattlescapeState
btnManufactureClick	Basescape/BasescapeState.cpp	/^void BasescapeState::btnManufactureClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
btnManufactureClick	Battlescape/CannotReequipState.cpp	/^void CannotReequipState::btnManufactureClick(Action *)$/;"	f	class:OpenXcom::CannotReequipState
btnManufactureClick	Geoscape/NewPossibleManufactureState.cpp	/^void NewPossibleManufactureState::btnManufactureClick(Action *)$/;"	f	class:OpenXcom::NewPossibleManufactureState
btnMapDownClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnMapDownClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnMapUpClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnMapUpClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnMarkAllAsSeenClick	Basescape/NewManufactureListState.cpp	/^void NewManufactureListState::btnMarkAllAsSeenClick(Action *)$/;"	f	class:OpenXcom::NewManufactureListState
btnMarkAllAsSeenClick	Basescape/NewResearchListState.cpp	/^void NewResearchListState::btnMarkAllAsSeenClick(Action *)$/;"	f	class:OpenXcom::NewResearchListState
btnMarkAllAsSeenClick	Ufopaedia/UfopaediaSelectState.cpp	/^	void UfopaediaSelectState::btnMarkAllAsSeenClick(Action *)$/;"	f	class:OpenXcom::UfopaediaSelectState
btnMemorialClick	Basescape/SoldiersState.cpp	/^void SoldiersState::btnMemorialClick(Action *)$/;"	f	class:OpenXcom::SoldiersState
btnMinimizeClick	Geoscape/DogfightState.cpp	/^void DogfightState::btnMinimizeClick(Action *)$/;"	f	class:OpenXcom::DogfightState
btnMinimizedIconClick	Geoscape/DogfightState.cpp	/^void DogfightState::btnMinimizedIconClick(Action *)$/;"	f	class:OpenXcom::DogfightState
btnMissionChange	Menu/NewBattleState.cpp	/^void NewBattleState::btnMissionChange(Action *action)$/;"	f	class:OpenXcom::NewBattleState
btnMissionsClick	Basescape/SoldierDiaryOverviewState.cpp	/^void SoldierDiaryOverviewState::btnMissionsClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryOverviewState
btnMissionsToggle	Basescape/SoldierDiaryPerformanceState.cpp	/^void SoldierDiaryPerformanceState::btnMissionsToggle(Action *)$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
btnModsClick	Menu/MainMenuState.cpp	/^void MainMenuState::btnModsClick(Action *)$/;"	f	class:OpenXcom::MainMenuState
btnMonthlyCostsClick	Basescape/BaseInfoState.cpp	/^void BaseInfoState::btnMonthlyCostsClick(Action *)$/;"	f	class:OpenXcom::BaseInfoState
btnMusicClick	Battlescape/ExtendedBattlescapeLinksState.cpp	/^void ExtendedBattlescapeLinksState::btnMusicClick(Action *)$/;"	f	class:OpenXcom::ExtendedBattlescapeLinksState
btnMusicClick	Geoscape/ExtendedGeoscapeLinksState.cpp	/^void ExtendedGeoscapeLinksState::btnMusicClick(Action *)$/;"	f	class:OpenXcom::ExtendedGeoscapeLinksState
btnNewBaseClick	Basescape/BasescapeState.cpp	/^void BasescapeState::btnNewBaseClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
btnNewBattleClick	Basescape/CraftInfoState.cpp	/^void CraftInfoState::btnNewBattleClick(Action *)$/;"	f	class:OpenXcom::CraftInfoState
btnNewBattleClick	Menu/MainMenuState.cpp	/^void MainMenuState::btnNewBattleClick(Action *)$/;"	f	class:OpenXcom::MainMenuState
btnNewClick	Basescape/ResearchState.cpp	/^void ResearchState::btnNewClick(Action *)$/;"	f	class:OpenXcom::ResearchState
btnNewClick	Basescape/TechTreeViewerState.cpp	/^void TechTreeViewerState::btnNewClick(Action *)$/;"	f	class:OpenXcom::TechTreeViewerState
btnNewClick	Menu/ListLoadOriginalState.cpp	/^void ListLoadOriginalState::btnNewClick(Action *)$/;"	f	class:OpenXcom::ListLoadOriginalState
btnNewGameClick	Menu/MainMenuState.cpp	/^void MainMenuState::btnNewGameClick(Action *)$/;"	f	class:OpenXcom::MainMenuState
btnNewProductionClick	Basescape/ManufactureState.cpp	/^void ManufactureState::btnNewProductionClick(Action *)$/;"	f	class:OpenXcom::ManufactureState
btnNextClick	Basescape/SoldierDiaryMissionState.cpp	/^void SoldierDiaryMissionState::btnNextClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryMissionState
btnNextClick	Basescape/SoldierDiaryOverviewState.cpp	/^void SoldierDiaryOverviewState::btnNextClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryOverviewState
btnNextClick	Basescape/SoldierDiaryPerformanceState.cpp	/^void SoldierDiaryPerformanceState::btnNextClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
btnNextClick	Basescape/SoldierInfoState.cpp	/^void SoldierInfoState::btnNextClick(Action *)$/;"	f	class:OpenXcom::SoldierInfoState
btnNextClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnNextClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnNextClick	Battlescape/UnitInfoState.cpp	/^void UnitInfoState::btnNextClick(Action *action)$/;"	f	class:OpenXcom::UnitInfoState
btnNextClick	Ufopaedia/ArticleState.cpp	/^	void ArticleState::btnNextClick(Action *)$/;"	f	class:OpenXcom::ArticleState
btnNextClick	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::btnNextClick(Action *)$/;"	f	class:OpenXcom::StatsForNerdsState
btnNextSoldierClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnNextSoldierClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnNextStopClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnNextStopClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnNightVisionClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnNightVisionClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnNightVisionClick	Battlescape/ExtendedBattlescapeLinksState.cpp	/^void ExtendedBattlescapeLinksState::btnNightVisionClick(Action *)$/;"	f	class:OpenXcom::ExtendedBattlescapeLinksState
btnNoClick	Geoscape/ConfirmCydoniaState.cpp	/^void ConfirmCydoniaState::btnNoClick(Action *)$/;"	f	class:OpenXcom::ConfirmCydoniaState
btnNoClick	Geoscape/ConfirmLandingState.cpp	/^void ConfirmLandingState::btnNoClick(Action *)$/;"	f	class:OpenXcom::ConfirmLandingState
btnNoClick	Menu/AbandonGameState.cpp	/^void AbandonGameState::btnNoClick(Action *)$/;"	f	class:OpenXcom::AbandonGameState
btnNoClick	Menu/ConfirmLoadState.cpp	/^void ConfirmLoadState::btnNoClick(Action *)$/;"	f	class:OpenXcom::ConfirmLoadState
btnNoClick	Menu/DeleteGameState.cpp	/^void DeleteGameState::btnNoClick(Action *)$/;"	f	class:OpenXcom::DeleteGameState
btnNoClick	Menu/ModConfirmExtendedState.cpp	/^	void ModConfirmExtendedState::btnNoClick(Action *)$/;"	f	class:OpenXcom::ModConfirmExtendedState
btnNoClick	Menu/OptionsConfirmState.cpp	/^void OptionsConfirmState::btnNoClick(Action *)$/;"	f	class:OpenXcom::OptionsConfirmState
btnNoClick	Menu/OptionsDefaultsState.cpp	/^void OptionsDefaultsState::btnNoClick(Action *)$/;"	f	class:OpenXcom::OptionsDefaultsState
btnNotesClick	Battlescape/ExtendedBattlescapeLinksState.cpp	/^void ExtendedBattlescapeLinksState::btnNotesClick(Action *)$/;"	f	class:OpenXcom::ExtendedBattlescapeLinksState
btnNotesClick	Battlescape/ExtendedInventoryLinksState.cpp	/^void ExtendedInventoryLinksState::btnNotesClick(Action *)$/;"	f	class:OpenXcom::ExtendedInventoryLinksState
btnNotesClick	Geoscape/ExtendedGeoscapeLinksState.cpp	/^void ExtendedGeoscapeLinksState::btnNotesClick(Action *)$/;"	f	class:OpenXcom::ExtendedGeoscapeLinksState
btnOKClick	Basescape/NewResearchListState.cpp	/^void NewResearchListState::btnOKClick(Action *)$/;"	f	class:OpenXcom::NewResearchListState
btnOk5SecsClick	Geoscape/CraftErrorState.cpp	/^void CraftErrorState::btnOk5SecsClick(Action *)$/;"	f	class:OpenXcom::CraftErrorState
btnOk5SecsClick	Geoscape/LowFuelState.cpp	/^void LowFuelState::btnOk5SecsClick(Action *)$/;"	f	class:OpenXcom::LowFuelState
btnOkClick	Basescape/BaseInfoState.cpp	/^void BaseInfoState::btnOkClick(Action *)$/;"	f	class:OpenXcom::BaseInfoState
btnOkClick	Basescape/BuildFacilitiesState.cpp	/^void BuildFacilitiesState::btnOkClick(Action *)$/;"	f	class:OpenXcom::BuildFacilitiesState
btnOkClick	Basescape/CraftArmorState.cpp	/^void CraftArmorState::btnOkClick(Action *)$/;"	f	class:OpenXcom::CraftArmorState
btnOkClick	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::btnOkClick(Action *)$/;"	f	class:OpenXcom::CraftEquipmentState
btnOkClick	Basescape/CraftInfoState.cpp	/^void CraftInfoState::btnOkClick(Action *)$/;"	f	class:OpenXcom::CraftInfoState
btnOkClick	Basescape/CraftPilotsState.cpp	/^void CraftPilotsState::btnOkClick(Action *)$/;"	f	class:OpenXcom::CraftPilotsState
btnOkClick	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::btnOkClick(Action *)$/;"	f	class:OpenXcom::CraftSoldiersState
btnOkClick	Basescape/CraftsState.cpp	/^void CraftsState::btnOkClick(Action *)$/;"	f	class:OpenXcom::CraftsState
btnOkClick	Basescape/DismantleFacilityState.cpp	/^void DismantleFacilityState::btnOkClick(Action *)$/;"	f	class:OpenXcom::DismantleFacilityState
btnOkClick	Basescape/GlobalManufactureState.cpp	/^void GlobalManufactureState::btnOkClick(Action *)$/;"	f	class:OpenXcom::GlobalManufactureState
btnOkClick	Basescape/GlobalResearchState.cpp	/^void GlobalResearchState::btnOkClick(Action *)$/;"	f	class:OpenXcom::GlobalResearchState
btnOkClick	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ManageAlienContainmentState
btnOkClick	Basescape/ManufactureDependenciesTreeState.cpp	/^void ManufactureDependenciesTreeState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ManufactureDependenciesTreeState
btnOkClick	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ManufactureInfoState
btnOkClick	Basescape/ManufactureState.cpp	/^void ManufactureState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ManufactureState
btnOkClick	Basescape/MonthlyCostsState.cpp	/^void MonthlyCostsState::btnOkClick(Action *)$/;"	f	class:OpenXcom::MonthlyCostsState
btnOkClick	Basescape/NewManufactureListState.cpp	/^void NewManufactureListState::btnOkClick(Action *)$/;"	f	class:OpenXcom::NewManufactureListState
btnOkClick	Basescape/PurchaseState.cpp	/^void PurchaseState::btnOkClick(Action *)$/;"	f	class:OpenXcom::PurchaseState
btnOkClick	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ResearchInfoState
btnOkClick	Basescape/ResearchState.cpp	/^void ResearchState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ResearchState
btnOkClick	Basescape/SackSoldierState.cpp	/^void SackSoldierState::btnOkClick(Action *)$/;"	f	class:OpenXcom::SackSoldierState
btnOkClick	Basescape/SelectStartFacilityState.cpp	/^void SelectStartFacilityState::btnOkClick(Action *)$/;"	f	class:OpenXcom::SelectStartFacilityState
btnOkClick	Basescape/SellState.cpp	/^void SellState::btnOkClick(Action *)$/;"	f	class:OpenXcom::SellState
btnOkClick	Basescape/SoldierAvatarState.cpp	/^void SoldierAvatarState::btnOkClick(Action *)$/;"	f	class:OpenXcom::SoldierAvatarState
btnOkClick	Basescape/SoldierDiaryMissionState.cpp	/^void SoldierDiaryMissionState::btnOkClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryMissionState
btnOkClick	Basescape/SoldierDiaryOverviewState.cpp	/^void SoldierDiaryOverviewState::btnOkClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryOverviewState
btnOkClick	Basescape/SoldierDiaryPerformanceState.cpp	/^void SoldierDiaryPerformanceState::btnOkClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
btnOkClick	Basescape/SoldierInfoState.cpp	/^void SoldierInfoState::btnOkClick(Action *)$/;"	f	class:OpenXcom::SoldierInfoState
btnOkClick	Basescape/SoldierMemorialState.cpp	/^void SoldierMemorialState::btnOkClick(Action *)$/;"	f	class:OpenXcom::SoldierMemorialState
btnOkClick	Basescape/SoldierTransformationListState.cpp	/^void SoldierTransformationListState::btnOkClick(Action *)$/;"	f	class:OpenXcom::SoldierTransformationListState
btnOkClick	Basescape/SoldiersState.cpp	/^void SoldiersState::btnOkClick(Action *)$/;"	f	class:OpenXcom::SoldiersState
btnOkClick	Basescape/StoresState.cpp	/^void StoresState::btnOkClick(Action *)$/;"	f	class:OpenXcom::StoresState
btnOkClick	Basescape/TechTreeSelectState.cpp	/^void TechTreeSelectState::btnOkClick(Action *)$/;"	f	class:OpenXcom::TechTreeSelectState
btnOkClick	Basescape/TechTreeViewerState.cpp	/^void TechTreeViewerState::btnOkClick(Action *)$/;"	f	class:OpenXcom::TechTreeViewerState
btnOkClick	Basescape/TransferConfirmState.cpp	/^void TransferConfirmState::btnOkClick(Action *)$/;"	f	class:OpenXcom::TransferConfirmState
btnOkClick	Basescape/TransferItemsState.cpp	/^void TransferItemsState::btnOkClick(Action *)$/;"	f	class:OpenXcom::TransferItemsState
btnOkClick	Basescape/TransfersState.cpp	/^void TransfersState::btnOkClick(Action *)$/;"	f	class:OpenXcom::TransfersState
btnOkClick	Battlescape/AbortMissionState.cpp	/^void AbortMissionState::btnOkClick(Action *)$/;"	f	class:OpenXcom::AbortMissionState
btnOkClick	Battlescape/AlienInventoryState.cpp	/^void AlienInventoryState::btnOkClick(Action *)$/;"	f	class:OpenXcom::AlienInventoryState
btnOkClick	Battlescape/AliensCrashState.cpp	/^void AliensCrashState::btnOkClick(Action *)$/;"	f	class:OpenXcom::AliensCrashState
btnOkClick	Battlescape/BriefingLightState.cpp	/^void BriefingLightState::btnOkClick(Action *)$/;"	f	class:OpenXcom::BriefingLightState
btnOkClick	Battlescape/BriefingState.cpp	/^void BriefingState::btnOkClick(Action *)$/;"	f	class:OpenXcom::BriefingState
btnOkClick	Battlescape/CannotReequipState.cpp	/^void CannotReequipState::btnOkClick(Action *)$/;"	f	class:OpenXcom::CannotReequipState
btnOkClick	Battlescape/CommendationLateState.cpp	/^void CommendationLateState::btnOkClick(Action *)$/;"	f	class:OpenXcom::CommendationLateState
btnOkClick	Battlescape/CommendationState.cpp	/^void CommendationState::btnOkClick(Action *)$/;"	f	class:OpenXcom::CommendationState
btnOkClick	Battlescape/ConfirmEndMissionState.cpp	/^void ConfirmEndMissionState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ConfirmEndMissionState
btnOkClick	Battlescape/DebriefingState.cpp	/^void DebriefingState::btnOkClick(Action *)$/;"	f	class:OpenXcom::DebriefingState
btnOkClick	Battlescape/ExtendedBattlescapeLinksState.cpp	/^void ExtendedBattlescapeLinksState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ExtendedBattlescapeLinksState
btnOkClick	Battlescape/ExtendedInventoryLinksState.cpp	/^void ExtendedInventoryLinksState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ExtendedInventoryLinksState
btnOkClick	Battlescape/InfoboxOKState.cpp	/^void InfoboxOKState::btnOkClick(Action *)$/;"	f	class:OpenXcom::InfoboxOKState
btnOkClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnOkClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnOkClick	Battlescape/MiniMapState.cpp	/^void MiniMapState::btnOkClick(Action *)$/;"	f	class:OpenXcom::MiniMapState
btnOkClick	Battlescape/PromotionsState.cpp	/^void PromotionsState::btnOkClick(Action *)$/;"	f	class:OpenXcom::PromotionsState
btnOkClick	Geoscape/AlienBaseState.cpp	/^void AlienBaseState::btnOkClick(Action *)$/;"	f	class:OpenXcom::AlienBaseState
btnOkClick	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::btnOkClick(Action *)$/;"	f	class:OpenXcom::AllocatePsiTrainingState
btnOkClick	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::btnOkClick(Action *)$/;"	f	class:OpenXcom::AllocateTrainingState
btnOkClick	Geoscape/BaseDefenseState.cpp	/^void BaseDefenseState::btnOkClick(Action *)$/;"	f	class:OpenXcom::BaseDefenseState
btnOkClick	Geoscape/BaseDestroyedState.cpp	/^void BaseDestroyedState::btnOkClick(Action *)$/;"	f	class:OpenXcom::BaseDestroyedState
btnOkClick	Geoscape/BaseNameState.cpp	/^void BaseNameState::btnOkClick(Action *)$/;"	f	class:OpenXcom::BaseNameState
btnOkClick	Geoscape/ConfirmDestinationState.cpp	/^void ConfirmDestinationState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ConfirmDestinationState
btnOkClick	Geoscape/ConfirmNewBaseState.cpp	/^void ConfirmNewBaseState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ConfirmNewBaseState
btnOkClick	Geoscape/CraftErrorState.cpp	/^void CraftErrorState::btnOkClick(Action *)$/;"	f	class:OpenXcom::CraftErrorState
btnOkClick	Geoscape/CraftNotEnoughPilotsState.cpp	/^void CraftNotEnoughPilotsState::btnOkClick(Action *)$/;"	f	class:OpenXcom::CraftNotEnoughPilotsState
btnOkClick	Geoscape/CraftPatrolState.cpp	/^void CraftPatrolState::btnOkClick(Action *)$/;"	f	class:OpenXcom::CraftPatrolState
btnOkClick	Geoscape/DogfightExperienceState.cpp	/^void DogfightExperienceState::btnOkClick(Action *)$/;"	f	class:OpenXcom::DogfightExperienceState
btnOkClick	Geoscape/ExtendedGeoscapeLinksState.cpp	/^void ExtendedGeoscapeLinksState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ExtendedGeoscapeLinksState
btnOkClick	Geoscape/FundingState.cpp	/^void FundingState::btnOkClick(Action *)$/;"	f	class:OpenXcom::FundingState
btnOkClick	Geoscape/GeoscapeEventState.cpp	/^void GeoscapeEventState::btnOkClick(Action *)$/;"	f	class:OpenXcom::GeoscapeEventState
btnOkClick	Geoscape/ItemsArrivingState.cpp	/^void ItemsArrivingState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ItemsArrivingState
btnOkClick	Geoscape/LowFuelState.cpp	/^void LowFuelState::btnOkClick(Action *)$/;"	f	class:OpenXcom::LowFuelState
btnOkClick	Geoscape/MonthlyReportState.cpp	/^void MonthlyReportState::btnOkClick(Action *)$/;"	f	class:OpenXcom::MonthlyReportState
btnOkClick	Geoscape/NewPossibleCraftState.cpp	/^void NewPossibleCraftState::btnOkClick(Action *)$/;"	f	class:OpenXcom::NewPossibleCraftState
btnOkClick	Geoscape/NewPossibleFacilityState.cpp	/^void NewPossibleFacilityState::btnOkClick(Action *)$/;"	f	class:OpenXcom::NewPossibleFacilityState
btnOkClick	Geoscape/NewPossibleManufactureState.cpp	/^void NewPossibleManufactureState::btnOkClick(Action *)$/;"	f	class:OpenXcom::NewPossibleManufactureState
btnOkClick	Geoscape/NewPossiblePurchaseState.cpp	/^void NewPossiblePurchaseState::btnOkClick(Action *)$/;"	f	class:OpenXcom::NewPossiblePurchaseState
btnOkClick	Geoscape/NewPossibleResearchState.cpp	/^void NewPossibleResearchState::btnOkClick(Action *)$/;"	f	class:OpenXcom::NewPossibleResearchState
btnOkClick	Geoscape/ProductionCompleteState.cpp	/^void ProductionCompleteState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ProductionCompleteState
btnOkClick	Geoscape/PsiTrainingState.cpp	/^void PsiTrainingState::btnOkClick(Action *)$/;"	f	class:OpenXcom::PsiTrainingState
btnOkClick	Geoscape/ResearchCompleteState.cpp	/^void ResearchCompleteState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ResearchCompleteState
btnOkClick	Geoscape/ResearchRequiredState.cpp	/^void ResearchRequiredState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ResearchRequiredState
btnOkClick	Geoscape/TargetInfoState.cpp	/^void TargetInfoState::btnOkClick(Action *)$/;"	f	class:OpenXcom::TargetInfoState
btnOkClick	Geoscape/TrainingFinishedState.cpp	/^void TrainingFinishedState::btnOkClick(Action *)$/;"	f	class:OpenXcom::TrainingFinishedState
btnOkClick	Geoscape/TrainingState.cpp	/^void TrainingState::btnOkClick(Action *)$/;"	f	class:OpenXcom::TrainingState
btnOkClick	Geoscape/UfoLostState.cpp	/^void UfoLostState::btnOkClick(Action *)$/;"	f	class:OpenXcom::UfoLostState
btnOkClick	Menu/ErrorMessageState.cpp	/^void ErrorMessageState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ErrorMessageState
btnOkClick	Menu/ModListState.cpp	/^void ModListState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ModListState
btnOkClick	Menu/NewBattleState.cpp	/^void NewBattleState::btnOkClick(Action *)$/;"	f	class:OpenXcom::NewBattleState
btnOkClick	Menu/NewGameState.cpp	/^void NewGameState::btnOkClick(Action *)$/;"	f	class:OpenXcom::NewGameState
btnOkClick	Menu/OptionsBaseState.cpp	/^void OptionsBaseState::btnOkClick(Action *)$/;"	f	class:OpenXcom::OptionsBaseState
btnOkClick	Menu/SetWindowedRootState.cpp	/^void SetWindowedRootState::btnOkClick(Action *)$/;"	f	class:OpenXcom::SetWindowedRootState
btnOkClick	Menu/StatisticsState.cpp	/^void StatisticsState::btnOkClick(Action *)$/;"	f	class:OpenXcom::StatisticsState
btnOkClick	Ufopaedia/ArticleState.cpp	/^	void ArticleState::btnOkClick(Action *)$/;"	f	class:OpenXcom::ArticleState
btnOkClick	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::btnOkClick(Action *)$/;"	f	class:OpenXcom::StatsForNerdsState
btnOkClick	Ufopaedia/UfopaediaSelectState.cpp	/^	void UfopaediaSelectState::btnOkClick(Action *)$/;"	f	class:OpenXcom::UfopaediaSelectState
btnOkClick	Ufopaedia/UfopaediaStartState.cpp	/^	void UfopaediaStartState::btnOkClick(Action *)$/;"	f	class:OpenXcom::UfopaediaStartState
btnOldClick	Menu/ListLoadState.cpp	/^void ListLoadState::btnOldClick(Action *)$/;"	f	class:OpenXcom::ListLoadState
btnOnlyEligibleClick	Basescape/SoldierTransformationListState.cpp	/^void SoldierTransformationListState::btnOnlyEligibleClick(Action *)$/;"	f	class:OpenXcom::SoldierTransformationListState
btnOpenClick	Geoscape/NewPossibleFacilityState.cpp	/^void NewPossibleFacilityState::btnOpenClick(Action *)$/;"	f	class:OpenXcom::NewPossibleFacilityState
btnOpenClick	Geoscape/TrainingFinishedState.cpp	/^void TrainingFinishedState::btnOpenClick(Action *)$/;"	f	class:OpenXcom::TrainingFinishedState
btnOptionsClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnOptionsClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnOptionsClick	Menu/MainMenuState.cpp	/^void MainMenuState::btnOptionsClick(Action *)$/;"	f	class:OpenXcom::MainMenuState
btnOptionsClick	Menu/PauseState.cpp	/^void PauseState::btnOptionsClick(Action *)$/;"	f	class:OpenXcom::PauseState
btnPathPreviewClick	Menu/OptionsBattlescapeState.cpp	/^void OptionsBattlescapeState::btnPathPreviewClick(Action *)$/;"	f	class:OpenXcom::OptionsBattlescapeState
btnPatrolClick	Geoscape/GeoscapeCraftState.cpp	/^void GeoscapeCraftState::btnPatrolClick(Action *)$/;"	f	class:OpenXcom::GeoscapeCraftState
btnPersonalLightingClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnPersonalLightingClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnPersonalLightsClick	Battlescape/ExtendedBattlescapeLinksState.cpp	/^void ExtendedBattlescapeLinksState::btnPersonalLightsClick(Action *)$/;"	f	class:OpenXcom::ExtendedBattlescapeLinksState
btnPersonalLoadClick	Battlescape/ExtendedInventoryLinksState.cpp	/^void ExtendedInventoryLinksState::btnPersonalLoadClick(Action *)$/;"	f	class:OpenXcom::ExtendedInventoryLinksState
btnPersonalSaveClick	Battlescape/ExtendedInventoryLinksState.cpp	/^void ExtendedInventoryLinksState::btnPersonalSaveClick(Action *)$/;"	f	class:OpenXcom::ExtendedInventoryLinksState
btnPilotExpClick	Geoscape/ExtendedGeoscapeLinksState.cpp	/^void ExtendedGeoscapeLinksState::btnPilotExpClick(Action *)$/;"	f	class:OpenXcom::ExtendedGeoscapeLinksState
btnPilotsClick	Basescape/CraftInfoState.cpp	/^void CraftInfoState::btnPilotsClick(Action *)$/;"	f	class:OpenXcom::CraftInfoState
btnPlusClick	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::btnPlusClick(Action *action)$/;"	f	class:OpenXcom::AllocatePsiTrainingState
btnPlusClick	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::btnPlusClick(Action *action)$/;"	f	class:OpenXcom::AllocateTrainingState
btnPrevClick	Basescape/SoldierDiaryMissionState.cpp	/^void SoldierDiaryMissionState::btnPrevClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryMissionState
btnPrevClick	Basescape/SoldierDiaryOverviewState.cpp	/^void SoldierDiaryOverviewState::btnPrevClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryOverviewState
btnPrevClick	Basescape/SoldierDiaryPerformanceState.cpp	/^void SoldierDiaryPerformanceState::btnPrevClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
btnPrevClick	Basescape/SoldierInfoState.cpp	/^void SoldierInfoState::btnPrevClick(Action *)$/;"	f	class:OpenXcom::SoldierInfoState
btnPrevClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnPrevClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnPrevClick	Battlescape/UnitInfoState.cpp	/^void UnitInfoState::btnPrevClick(Action *action)$/;"	f	class:OpenXcom::UnitInfoState
btnPrevClick	Ufopaedia/ArticleState.cpp	/^	void ArticleState::btnPrevClick(Action *)$/;"	f	class:OpenXcom::ArticleState
btnPrevClick	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::btnPrevClick(Action *)$/;"	f	class:OpenXcom::StatsForNerdsState
btnPrevSoldierClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnPrevSoldierClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnPreviewClick	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::btnPreviewClick(Action *)$/;"	f	class:OpenXcom::CraftSoldiersState
btnPreviewClick	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::btnPreviewClick(Action *)$/;"	f	class:OpenXcom::StatsForNerdsState
btnPsiClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnPsiClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnPsiTrainingClick	Basescape/SoldiersState.cpp	/^void SoldiersState::btnPsiTrainingClick(Action *)$/;"	f	class:OpenXcom::SoldiersState
btnPurchaseClick	Basescape/BasescapeState.cpp	/^void BasescapeState::btnPurchaseClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
btnPurchaseClick	Battlescape/CannotReequipState.cpp	/^void CannotReequipState::btnPurchaseClick(Action *)$/;"	f	class:OpenXcom::CannotReequipState
btnPurchaseClick	Geoscape/NewPossibleCraftState.cpp	/^void NewPossibleCraftState::btnPurchaseClick(Action *)$/;"	f	class:OpenXcom::NewPossibleCraftState
btnPurchaseClick	Geoscape/NewPossiblePurchaseState.cpp	/^void NewPossiblePurchaseState::btnPurchaseClick(Action *)$/;"	f	class:OpenXcom::NewPossiblePurchaseState
btnQuickSearchApply	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::CraftEquipmentState
btnQuickSearchApply	Basescape/NewManufactureListState.cpp	/^void NewManufactureListState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::NewManufactureListState
btnQuickSearchApply	Basescape/NewResearchListState.cpp	/^void NewResearchListState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::NewResearchListState
btnQuickSearchApply	Basescape/PurchaseState.cpp	/^void PurchaseState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::PurchaseState
btnQuickSearchApply	Basescape/SellState.cpp	/^void SellState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::SellState
btnQuickSearchApply	Basescape/SoldierArmorState.cpp	/^void SoldierArmorState::btnQuickSearchApply(Action*)$/;"	f	class:OpenXcom::SoldierArmorState
btnQuickSearchApply	Basescape/SoldierMemorialState.cpp	/^void SoldierMemorialState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::SoldierMemorialState
btnQuickSearchApply	Basescape/SoldierTransformationListState.cpp	/^void SoldierTransformationListState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::SoldierTransformationListState
btnQuickSearchApply	Basescape/StoresState.cpp	/^void StoresState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::StoresState
btnQuickSearchApply	Basescape/TechTreeSelectState.cpp	/^void TechTreeSelectState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::TechTreeSelectState
btnQuickSearchApply	Basescape/TransferItemsState.cpp	/^void TransferItemsState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::TransferItemsState
btnQuickSearchApply	Battlescape/InventoryState.cpp	/^void InventoryState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::InventoryState
btnQuickSearchApply	Menu/NewBattleState.cpp	/^void NewBattleState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::NewBattleState
btnQuickSearchApply	Ufopaedia/UfopaediaSelectState.cpp	/^	void UfopaediaSelectState::btnQuickSearchApply(Action *)$/;"	f	class:OpenXcom::UfopaediaSelectState
btnQuickSearchToggle	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::CraftEquipmentState
btnQuickSearchToggle	Basescape/NewManufactureListState.cpp	/^void NewManufactureListState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::NewManufactureListState
btnQuickSearchToggle	Basescape/NewResearchListState.cpp	/^void NewResearchListState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::NewResearchListState
btnQuickSearchToggle	Basescape/PurchaseState.cpp	/^void PurchaseState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::PurchaseState
btnQuickSearchToggle	Basescape/SellState.cpp	/^void SellState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::SellState
btnQuickSearchToggle	Basescape/SoldierArmorState.cpp	/^void SoldierArmorState::btnQuickSearchToggle(Action* action)$/;"	f	class:OpenXcom::SoldierArmorState
btnQuickSearchToggle	Basescape/SoldierMemorialState.cpp	/^void SoldierMemorialState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::SoldierMemorialState
btnQuickSearchToggle	Basescape/SoldierTransformationListState.cpp	/^void SoldierTransformationListState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::SoldierTransformationListState
btnQuickSearchToggle	Basescape/StoresState.cpp	/^void StoresState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::StoresState
btnQuickSearchToggle	Basescape/TechTreeSelectState.cpp	/^void TechTreeSelectState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::TechTreeSelectState
btnQuickSearchToggle	Basescape/TransferItemsState.cpp	/^void TransferItemsState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::TransferItemsState
btnQuickSearchToggle	Battlescape/InventoryState.cpp	/^void InventoryState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::InventoryState
btnQuickSearchToggle	Menu/NewBattleState.cpp	/^void NewBattleState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::NewBattleState
btnQuickSearchToggle	Ufopaedia/UfopaediaSelectState.cpp	/^	void UfopaediaSelectState::btnQuickSearchToggle(Action *action)$/;"	f	class:OpenXcom::UfopaediaSelectState
btnQuitClick	Menu/MainMenuState.cpp	/^void MainMenuState::btnQuitClick(Action *)$/;"	f	class:OpenXcom::MainMenuState
btnRMBClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnRMBClick(Action* action)$/;"	f	class:OpenXcom::BattlescapeState
btnRandomClick	Menu/NewBattleState.cpp	/^void NewBattleState::btnRandomClick(Action *)$/;"	f	class:OpenXcom::NewBattleState
btnRankClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnRankClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnRedirectClick	Geoscape/CraftPatrolState.cpp	/^void CraftPatrolState::btnRedirectClick(Action *)$/;"	f	class:OpenXcom::CraftPatrolState
btnRefreshClick	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::btnRefreshClick(Action *)$/;"	f	class:OpenXcom::StatsForNerdsState
btnRegionListClick	Geoscape/GraphsState.cpp	/^void GraphsState::btnRegionListClick(Action * action)$/;"	f	class:OpenXcom::GraphsState
btnReloadClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnReloadClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnRemoveAllClick	Basescape/CraftPilotsState.cpp	/^void CraftPilotsState::btnRemoveAllClick(Action *)$/;"	f	class:OpenXcom::CraftPilotsState
btnReportClick	Geoscape/ResearchCompleteState.cpp	/^void ResearchCompleteState::btnReportClick(Action *)$/;"	f	class:OpenXcom::ResearchCompleteState
btnResearchClick	Basescape/BasescapeState.cpp	/^void BasescapeState::btnResearchClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
btnResearchClick	Geoscape/NewPossibleResearchState.cpp	/^void NewPossibleResearchState::btnResearchClick(Action *)$/;"	f	class:OpenXcom::NewPossibleResearchState
btnReserveClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnReserveClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnReserveKneelClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnReserveKneelClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnResetMusicClick	Ufopaedia/ArticleState.cpp	/^	void ArticleState::btnResetMusicClick(Action *)$/;"	f	class:OpenXcom::ArticleState
btnRightArrowClick	Basescape/SoldierTransformationState.cpp	/^void SoldierTransformationState::btnRightArrowClick(Action *action)$/;"	f	class:OpenXcom::SoldierTransformationState
btnRightHandItemClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnRightHandItemClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnRootWindowedModeClick	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::btnRootWindowedModeClick(Action *)$/;"	f	class:OpenXcom::OptionsVideoState
btnRotateDownPress	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnRotateDownPress(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnRotateDownPress	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnRotateDownPress(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnRotateDownPress	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnRotateDownPress(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnRotateDownRelease	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnRotateDownRelease(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnRotateDownRelease	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnRotateDownRelease(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnRotateDownRelease	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnRotateDownRelease(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnRotateLeftPress	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnRotateLeftPress(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnRotateLeftPress	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnRotateLeftPress(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnRotateLeftPress	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnRotateLeftPress(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnRotateLeftRelease	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnRotateLeftRelease(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnRotateLeftRelease	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnRotateLeftRelease(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnRotateLeftRelease	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnRotateLeftRelease(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnRotateRightPress	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnRotateRightPress(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnRotateRightPress	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnRotateRightPress(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnRotateRightPress	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnRotateRightPress(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnRotateRightRelease	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnRotateRightRelease(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnRotateRightRelease	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnRotateRightRelease(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnRotateRightRelease	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnRotateRightRelease(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnRotateUpPress	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnRotateUpPress(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnRotateUpPress	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnRotateUpPress(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnRotateUpPress	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnRotateUpPress(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnRotateUpRelease	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnRotateUpRelease(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnRotateUpRelease	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnRotateUpRelease(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnRotateUpRelease	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnRotateUpRelease(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnRunClick	Menu/TestState.cpp	/^void TestState::btnRunClick(Action *action)$/;"	f	class:OpenXcom::TestState
btnSackClick	Basescape/SoldierInfoState.cpp	/^void SoldierInfoState::btnSackClick(Action *)$/;"	f	class:OpenXcom::SoldierInfoState
btnSaveClick	Basescape/CraftEquipmentSaveState.cpp	/^void CraftEquipmentSaveState::btnSaveClick(Action *)$/;"	f	class:OpenXcom::CraftEquipmentSaveState
btnSaveClick	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::btnSaveClick(Action *)$/;"	f	class:OpenXcom::CraftEquipmentState
btnSaveClick	Battlescape/InventorySaveState.cpp	/^void InventorySaveState::btnSaveClick(Action *)$/;"	f	class:OpenXcom::InventorySaveState
btnSaveClick	Menu/NotesState.cpp	/^void NotesState::btnSaveClick(Action*)$/;"	f	class:OpenXcom::NotesState
btnSaveClick	Menu/PauseState.cpp	/^void PauseState::btnSaveClick(Action *)$/;"	f	class:OpenXcom::PauseState
btnSaveGameClick	Menu/ListSaveState.cpp	/^void ListSaveState::btnSaveGameClick(Action *)$/;"	f	class:OpenXcom::ListSaveState
btnSaveWithArmorClick	Battlescape/InventorySaveState.cpp	/^void InventorySaveState::btnSaveWithArmorClick(Action*)$/;"	f	class:OpenXcom::InventorySaveState
btnScrollDownClick	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::btnScrollDownClick(Action *)$/;"	f	class:OpenXcom::StatsForNerdsState
btnScrollDownClick	Ufopaedia/UfopaediaStartState.cpp	/^	void UfopaediaStartState::btnScrollDownClick(Action *)$/;"	f	class:OpenXcom::UfopaediaStartState
btnScrollDownPress	Ufopaedia/UfopaediaStartState.cpp	/^	void UfopaediaStartState::btnScrollDownPress(Action *)$/;"	f	class:OpenXcom::UfopaediaStartState
btnScrollRelease	Ufopaedia/UfopaediaStartState.cpp	/^	void UfopaediaStartState::btnScrollRelease(Action *)$/;"	f	class:OpenXcom::UfopaediaStartState
btnScrollUpClick	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::btnScrollUpClick(Action *)$/;"	f	class:OpenXcom::StatsForNerdsState
btnScrollUpClick	Ufopaedia/UfopaediaStartState.cpp	/^	void UfopaediaStartState::btnScrollUpClick(Action *)$/;"	f	class:OpenXcom::UfopaediaStartState
btnScrollUpPress	Ufopaedia/UfopaediaStartState.cpp	/^	void UfopaediaStartState::btnScrollUpPress(Action *)$/;"	f	class:OpenXcom::UfopaediaStartState
btnSectionClick	Ufopaedia/UfopaediaStartState.cpp	/^	void UfopaediaStartState::btnSectionClick(Action *action)$/;"	f	class:OpenXcom::UfopaediaStartState
btnSelectMusicTrackClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnSelectMusicTrackClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnSelectMusicTrackClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnSelectMusicTrackClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnSellAllButOneClick	Basescape/SellState.cpp	/^void SellState::btnSellAllButOneClick(Action *)$/;"	f	class:OpenXcom::SellState
btnSellAllClick	Basescape/SellState.cpp	/^void SellState::btnSellAllClick(Action *)$/;"	f	class:OpenXcom::SellState
btnSellClick	Basescape/BasescapeState.cpp	/^void BasescapeState::btnSellClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
btnSellClick	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::btnSellClick(Action *)$/;"	f	class:OpenXcom::ManageAlienContainmentState
btnSellClick	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::btnSellClick(Action *)$/;"	f	class:OpenXcom::ManufactureInfoState
btnSellClick	Battlescape/DebriefingState.cpp	/^void DebriefingState::btnSellClick(Action *)$/;"	f	class:OpenXcom::DebriefingState
btnShiftClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnShiftClick(Action* action)$/;"	f	class:OpenXcom::BattlescapeState
btnShowAllClick	Basescape/ManufactureDependenciesTreeState.cpp	/^void ManufactureDependenciesTreeState::btnShowAllClick(Action *)$/;"	f	class:OpenXcom::ManufactureDependenciesTreeState
btnShowFundsClick	Menu/OptionsGeoscapeState.cpp	/^void OptionsGeoscapeState::btnShowFundsClick(Action *)$/;"	f	class:OpenXcom::OptionsGeoscapeState
btnShowLayersClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnShowLayersClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnShowLayersClickOrig	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnShowLayersClickOrig(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnShowMapClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnShowMapClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnShowOnlyNewClick	Basescape/NewManufactureListState.cpp	/^void NewManufactureListState::btnShowOnlyNewClick(Action *)$/;"	f	class:OpenXcom::NewManufactureListState
btnShowOnlyNewClick	Basescape/NewResearchListState.cpp	/^void NewResearchListState::btnShowOnlyNewClick(Action *)$/;"	f	class:OpenXcom::NewResearchListState
btnShowOnlyNewClick	Ufopaedia/UfopaediaSelectState.cpp	/^	void UfopaediaSelectState::btnShowOnlyNewClick(Action *)$/;"	f	class:OpenXcom::UfopaediaSelectState
btnShowPersonalTemplateClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnShowPersonalTemplateClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnSkillsClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnSkillsClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnSlotClick	Menu/ListLoadOriginalState.cpp	/^void ListLoadOriginalState::btnSlotClick(Action *action)$/;"	f	class:OpenXcom::ListLoadOriginalState
btnSoldiersClick	Basescape/BasescapeState.cpp	/^void BasescapeState::btnSoldiersClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
btnSpecialClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnSpecialClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnStandardPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnStandardPress(Action *)$/;"	f	class:OpenXcom::DogfightState
btnStandardRightPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnStandardRightPress(Action *)$/;"	f	class:OpenXcom::DogfightState
btnStandardSimulateLeftPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnStandardSimulateLeftPress(Action *action)$/;"	f	class:OpenXcom::DogfightState
btnStandoffPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnStandoffPress(Action *)$/;"	f	class:OpenXcom::DogfightState
btnStandoffRightPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnStandoffRightPress(Action *)$/;"	f	class:OpenXcom::DogfightState
btnStandoffSimulateLeftPress	Geoscape/DogfightState.cpp	/^void DogfightState::btnStandoffSimulateLeftPress(Action *action)$/;"	f	class:OpenXcom::DogfightState
btnStartClick	Basescape/ManufactureStartState.cpp	/^void ManufactureStartState::btnStartClick(Action *)$/;"	f	class:OpenXcom::ManufactureStartState
btnStartClick	Basescape/SoldierTransformationState.cpp	/^void SoldierTransformationState::btnStartClick(Action *action)$/;"	f	class:OpenXcom::SoldierTransformationState
btnStartClick	Geoscape/BaseDefenseState.cpp	/^void BaseDefenseState::btnStartClick(Action *)$/;"	f	class:OpenXcom::BaseDefenseState
btnStatisticsClick	Basescape/SoldierMemorialState.cpp	/^void SoldierMemorialState::btnStatisticsClick(Action *)$/;"	f	class:OpenXcom::SoldierMemorialState
btnStatsClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnStatsClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnStatsClick	Battlescape/DebriefingState.cpp	/^void DebriefingState::btnStatsClick(Action *)$/;"	f	class:OpenXcom::DebriefingState
btnStopClick	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::btnStopClick(Action *)$/;"	f	class:OpenXcom::ManufactureInfoState
btnStoresClick	Basescape/BaseInfoState.cpp	/^void BaseInfoState::btnStoresClick(Action *)$/;"	f	class:OpenXcom::BaseInfoState
btnSummaryClick	Basescape/SoldierBonusState.cpp	/^void SoldierBonusState::btnSummaryClick(Action*)$/;"	f	class:OpenXcom::SoldierBonusState
btnSummaryClick	Geoscape/ProductionCompleteState.cpp	/^void ProductionCompleteState::btnSummaryClick(Action *)$/;"	f	class:OpenXcom::ProductionCompleteState
btnTargetClick	Geoscape/GeoscapeCraftState.cpp	/^void GeoscapeCraftState::btnTargetClick(Action *)$/;"	f	class:OpenXcom::GeoscapeCraftState
btnTargetClick	Geoscape/MultipleTargetsState.cpp	/^void MultipleTargetsState::btnTargetClick(Action *action)$/;"	f	class:OpenXcom::MultipleTargetsState
btnTechTreeClick	Geoscape/ExtendedGeoscapeLinksState.cpp	/^void ExtendedGeoscapeLinksState::btnTechTreeClick(Action *)$/;"	f	class:OpenXcom::ExtendedGeoscapeLinksState
btnTechTreeViewerClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnTechTreeViewerClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnTerrainChange	Menu/NewBattleState.cpp	/^void NewBattleState::btnTerrainChange(Action *action)$/;"	f	class:OpenXcom::NewBattleState
btnTestClick	Geoscape/ExtendedGeoscapeLinksState.cpp	/^void ExtendedGeoscapeLinksState::btnTestClick(Action *)$/;"	f	class:OpenXcom::ExtendedGeoscapeLinksState
btnTimerClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnTimerClick(Action *action)$/;"	f	class:OpenXcom::GeoscapeState
btnToggleClick	Battlescape/AlienInventoryState.cpp	/^void AlienInventoryState::btnToggleClick(Action *)$/;"	f	class:OpenXcom::AlienInventoryState
btnTooltipsClick	Menu/OptionsBattlescapeState.cpp	/^void OptionsBattlescapeState::btnTooltipsClick(Action *)$/;"	f	class:OpenXcom::OptionsBattlescapeState
btnTouchButtonsClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnTouchButtonsClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnTouchClick	Battlescape/ExtendedBattlescapeLinksState.cpp	/^void ExtendedBattlescapeLinksState::btnTouchClick(Action *)$/;"	f	class:OpenXcom::ExtendedBattlescapeLinksState
btnTrainingClick	Basescape/SoldiersState.cpp	/^void SoldiersState::btnTrainingClick(Action *)$/;"	f	class:OpenXcom::SoldiersState
btnTransferAllClick	Basescape/TransferItemsState.cpp	/^void TransferItemsState::btnTransferAllClick(Action *)$/;"	f	class:OpenXcom::TransferItemsState
btnTransferClick	Basescape/BasescapeState.cpp	/^void BasescapeState::btnTransferClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
btnTransferClick	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::btnTransferClick(Action *)$/;"	f	class:OpenXcom::ManageAlienContainmentState
btnTransferClick	Basescape/SellState.cpp	/^void SellState::btnTransferClick(Action *)$/;"	f	class:OpenXcom::SellState
btnTransferClick	Battlescape/DebriefingState.cpp	/^void DebriefingState::btnTransferClick(Action *)$/;"	f	class:OpenXcom::DebriefingState
btnTransferClick	Geoscape/ConfirmDestinationState.cpp	/^void ConfirmDestinationState::btnTransferClick(Action *)$/;"	f	class:OpenXcom::ConfirmDestinationState
btnTransfersClick	Basescape/BaseInfoState.cpp	/^void BaseInfoState::btnTransfersClick(Action *)$/;"	f	class:OpenXcom::BaseInfoState
btnTurnDiaryClick	Battlescape/ExtendedBattlescapeLinksState.cpp	/^void ExtendedBattlescapeLinksState::btnTurnDiaryClick(Action *)$/;"	f	class:OpenXcom::ExtendedBattlescapeLinksState
btnUfoClick	Geoscape/DogfightState.cpp	/^void DogfightState::btnUfoClick(Action *)$/;"	f	class:OpenXcom::DogfightState
btnUfoCountryClick	Geoscape/GraphsState.cpp	/^void GraphsState::btnUfoCountryClick(Action *)$/;"	f	class:OpenXcom::GraphsState
btnUfoRegionClick	Geoscape/GraphsState.cpp	/^void GraphsState::btnUfoRegionClick(Action *)$/;"	f	class:OpenXcom::GraphsState
btnUfoTrackerClick	Geoscape/ExtendedGeoscapeLinksState.cpp	/^void ExtendedGeoscapeLinksState::btnUfoTrackerClick(Action *)$/;"	f	class:OpenXcom::ExtendedGeoscapeLinksState
btnUfoTrackerClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnUfoTrackerClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnUfopaediaClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnUfopaediaClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnUfopaediaClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnUfopaediaClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnUfopaediaClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnUfopaediaClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnUfopediaClick	Basescape/CraftInfoState.cpp	/^void CraftInfoState::btnUfopediaClick(Action *)$/;"	f	class:OpenXcom::CraftInfoState
btnUfopediaClick	Battlescape/ExtendedInventoryLinksState.cpp	/^void ExtendedInventoryLinksState::btnUfopediaClick(Action *)$/;"	f	class:OpenXcom::ExtendedInventoryLinksState
btnUnitDownClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnUnitDownClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnUnitUpClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnUnitUpClick(Action *)$/;"	f	class:OpenXcom::BattlescapeState
btnUnloadClick	Battlescape/InventoryState.cpp	/^void InventoryState::btnUnloadClick(Action *)$/;"	f	class:OpenXcom::InventoryState
btnUpdateClick	Menu/MainMenuState.cpp	/^void MainMenuState::btnUpdateClick(Action*)$/;"	f	class:OpenXcom::MainMenuState
btnVisibleUnitClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnVisibleUnitClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnWClick	Basescape/CraftInfoState.cpp	/^void CraftInfoState::btnWClick(Action * act)$/;"	f	class:OpenXcom::CraftInfoState
btnWIconClick	Basescape/CraftInfoState.cpp	/^void CraftInfoState::btnWIconClick(Action *action)$/;"	f	class:OpenXcom::CraftInfoState
btnXcomCountryClick	Geoscape/GraphsState.cpp	/^void GraphsState::btnXcomCountryClick(Action *)$/;"	f	class:OpenXcom::GraphsState
btnXcomRegionClick	Geoscape/GraphsState.cpp	/^void GraphsState::btnXcomRegionClick(Action *)$/;"	f	class:OpenXcom::GraphsState
btnYesClick	Geoscape/ConfirmCydoniaState.cpp	/^void ConfirmCydoniaState::btnYesClick(Action *)$/;"	f	class:OpenXcom::ConfirmCydoniaState
btnYesClick	Geoscape/ConfirmLandingState.cpp	/^void ConfirmLandingState::btnYesClick(Action *)$/;"	f	class:OpenXcom::ConfirmLandingState
btnYesClick	Menu/AbandonGameState.cpp	/^void AbandonGameState::btnYesClick(Action *)$/;"	f	class:OpenXcom::AbandonGameState
btnYesClick	Menu/ConfirmLoadState.cpp	/^void ConfirmLoadState::btnYesClick(Action *)$/;"	f	class:OpenXcom::ConfirmLoadState
btnYesClick	Menu/DeleteGameState.cpp	/^void DeleteGameState::btnYesClick(Action *)$/;"	f	class:OpenXcom::DeleteGameState
btnYesClick	Menu/ModConfirmExtendedState.cpp	/^	void ModConfirmExtendedState::btnYesClick(Action *)$/;"	f	class:OpenXcom::ModConfirmExtendedState
btnYesClick	Menu/OptionsConfirmState.cpp	/^void OptionsConfirmState::btnYesClick(Action *)$/;"	f	class:OpenXcom::OptionsConfirmState
btnYesClick	Menu/OptionsDefaultsState.cpp	/^void OptionsDefaultsState::btnYesClick(Action *action)$/;"	f	class:OpenXcom::OptionsDefaultsState
btnZeroTUsClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::btnZeroTUsClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
btnZoomInClick	Geoscape/GraphsState.cpp	/^void GraphsState::btnZoomInClick(Action *)$/;"	f	class:OpenXcom::GraphsState
btnZoomInLeftClick	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnZoomInLeftClick(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnZoomInLeftClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnZoomInLeftClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnZoomInLeftClick	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnZoomInLeftClick(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnZoomInRightClick	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnZoomInRightClick(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnZoomInRightClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnZoomInRightClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnZoomInRightClick	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnZoomInRightClick(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnZoomOutClick	Geoscape/GraphsState.cpp	/^void GraphsState::btnZoomOutClick(Action *)$/;"	f	class:OpenXcom::GraphsState
btnZoomOutLeftClick	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnZoomOutLeftClick(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnZoomOutLeftClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnZoomOutLeftClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnZoomOutLeftClick	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnZoomOutLeftClick(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btnZoomOutRightClick	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::btnZoomOutRightClick(Action *)$/;"	f	class:OpenXcom::BuildNewBaseState
btnZoomOutRightClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::btnZoomOutRightClick(Action *)$/;"	f	class:OpenXcom::GeoscapeState
btnZoomOutRightClick	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::btnZoomOutRightClick(Action *)$/;"	f	class:OpenXcom::SelectDestinationState
btype	lodepng.h	/^  unsigned btype; \/*the block type for LZ (0, 1, 2 or 3, see zlib standard). Should be 2 for proper compression.*\/$/;"	m	struct:LodePNGCompressSettings
buffer	Engine/OpenGL.h	/^  uint32_t *buffer;$/;"	m	class:OpenXcom::OpenGL
buffer	Engine/Scalers/xbrz.cpp	/^    std::vector<float> buffer; \/\/consumes 64 MB memory; using double is only 2% faster, but takes 128 MB$/;"	m	struct:__anon10::DistYCbCrBuffer	file:
buffer	md5.h	/^  uint1 buffer[blocksize]; \/\/ bytes that didn't fit in last 64 byte chunk$/;"	m	class:MD5
buffer_surface	Engine/OpenGL.h	/^  Surface::UniqueBufferPtr buffer_surface;$/;"	m	class:OpenXcom::OpenGL
bugHuntMessage	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::bugHuntMessage()$/;"	f	class:OpenXcom::BattlescapeState
build	Savegame/BaseFacility.cpp	/^void BaseFacility::build()$/;"	f	class:OpenXcom::BaseFacility
buildUI	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::buildUI(bool debug, bool ids, bool defaults)$/;"	f	class:OpenXcom::StatsForNerdsState
buildUi	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::buildUi()$/;"	f	class:OpenXcom::ManufactureInfoState
buildUi	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::buildUi()$/;"	f	class:OpenXcom::ResearchInfoState
buildUi	Menu/LoadGameState.cpp	/^void LoadGameState::buildUi(SDL_Color *palette)$/;"	f	class:OpenXcom::LoadGameState
buildUi	Menu/SaveGameState.cpp	/^void SaveGameState::buildUi(SDL_Color *palette)$/;"	f	class:OpenXcom::SaveGameState
burnShadeScript	Savegame/BattleUnit.cpp	/^struct burnShadeScript$/;"	s	namespace:OpenXcom::__anon36	file:
buttonsDisabled	Geoscape/GeoscapeState.cpp	/^bool GeoscapeState::buttonsDisabled()$/;"	f	class:OpenXcom::GeoscapeState
byteAdvance	Engine/Scalers/xbrz.cpp	/^const uint32_t* byteAdvance(const uint32_t* ptr, int bytes) { return reinterpret_cast<const uint32_t*>(reinterpret_cast<const char*>(ptr) + bytes); }$/;"	f	namespace:__anon10
byteAdvance	Engine/Scalers/xbrz.cpp	/^uint32_t*       byteAdvance(      uint32_t* ptr, int bytes) { return reinterpret_cast<      uint32_t*>(reinterpret_cast<      char*>(ptr) + bytes); }$/;"	f	namespace:__anon10
c	Engine/Scalers/xbrz.cpp	/^    \/**\/a,  b,  c,$/;"	m	struct:__anon10::Kernel_3x3	file:
c	Engine/Scalers/xbrz.cpp	/^    \/**\/a, b, c, d,$/;"	m	struct:__anon10::Kernel_4x4	file:
c	Engine/Scalers/xbrz.cpp	412;"	d	file:
c	Engine/Scalers/xbrz.cpp	473;"	d	file:
c	Geoscape/Cord.h	/^	inline Cord(const Cord& c) = default;$/;"	m	struct:OpenXcom::Cord
cache	Geoscape/Globe.cpp	/^void Globe::cache(std::list<Polygon*> *polygons, std::list<Polygon*> *cache)$/;"	f	class:OpenXcom::Globe
cachePolygons	Geoscape/Globe.cpp	/^void Globe::cachePolygons()$/;"	f	class:OpenXcom::Globe
calcColor	Engine/Scalers/xbrz.cpp	35;"	d	file:
calcFNum	Engine/Adlib/adlplayer.cpp	206;"	d	file:
calcRearmTime	Savegame/Craft.cpp	/^unsigned int Craft::calcRearmTime()$/;"	f	class:OpenXcom::Craft
calcRefuelTime	Savegame/Craft.cpp	/^unsigned int Craft::calcRefuelTime()$/;"	f	class:OpenXcom::Craft
calcRepairTime	Savegame/Craft.cpp	/^unsigned int Craft::calcRepairTime()$/;"	f	class:OpenXcom::Craft
calcStatString	Mod/StatString.cpp	/^std::string StatString::calcStatString(UnitStats &currentStats, const std::vector<StatString *> &statStrings, bool psiStrengthEval, bool inTraining)$/;"	f	class:OpenXcom::StatString
calcStatString	Savegame/Soldier.cpp	/^void Soldier::calcStatString(const std::vector<StatString *> &statStrings, bool psiStrengthEval)$/;"	f	class:OpenXcom::Soldier
calculate	Battlescape/Pathfinding.cpp	/^void Pathfinding::calculate(BattleUnit *unit, Position endPosition, BattleActionMove bam, const BattleUnit *missileTarget, int maxTUCost)$/;"	f	class:OpenXcom::Pathfinding
calculateChanges	Geoscape/MonthlyReportState.cpp	/^void MonthlyReportState::calculateChanges()$/;"	f	class:OpenXcom::MonthlyReportState
calculateCraftTiles	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::calculateCraftTiles()$/;"	f	class:OpenXcom::SavedBattleGame
calculateCurrentDamageTooltip	Battlescape/InventoryState.cpp	/^void InventoryState::calculateCurrentDamageTooltip()$/;"	f	class:OpenXcom::InventoryState
calculateEnviDamage	Savegame/BattleUnit.cpp	/^void BattleUnit::calculateEnviDamage(Mod *mod, SavedBattleGame *save)$/;"	f	class:OpenXcom::BattleUnit
calculateFOV	Battlescape/TileEngine.cpp	/^bool TileEngine::calculateFOV(BattleUnit *unit, bool doTileRecalc, bool doUnitRecalc)$/;"	f	class:OpenXcom::TileEngine
calculateFOV	Battlescape/TileEngine.cpp	/^void TileEngine::calculateFOV(Position position, int eventRadius, const bool updateTiles, const bool appendToTileVisibility)$/;"	f	class:OpenXcom::TileEngine
calculateLighting	Battlescape/TileEngine.cpp	/^void TileEngine::calculateLighting(LightLayers layer, Position position, int eventRadius, bool terrianChanged)$/;"	f	class:OpenXcom::TileEngine
calculateLineHelper	Battlescape/TileEngine.cpp	/^bool calculateLineHelper(const Position& origin, const Position& target, FuncNewPosition posFunc, FuncDrift driftFunc)$/;"	f	namespace:OpenXcom::__anon45
calculateLineTile	Battlescape/TileEngine.cpp	/^int TileEngine::calculateLineTile(Position origin, Position target, std::vector<Position> &trajectory)$/;"	f	class:OpenXcom::TileEngine
calculateLineVoxel	Battlescape/TileEngine.cpp	/^VoxelType TileEngine::calculateLineVoxel(Position origin, Position target, bool storeTrajectory, std::vector<Position> *trajectory, BattleUnit *excludeUnit, BattleUnit *excludeAllBut, bool onlyVisible)$/;"	f	class:OpenXcom::TileEngine
calculateMeetPoint	Savegame/MovingTarget.cpp	/^void MovingTarget::calculateMeetPoint()$/;"	f	class:OpenXcom::MovingTarget
calculateMeleeWeapon	Battlescape/AlienInventoryState.cpp	/^void AlienInventoryState::calculateMeleeWeapon(BattleUnit* unit, BattleItem* weapon, Text* label)$/;"	f	class:OpenXcom::AlienInventoryState
calculateModuleMap	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::calculateModuleMap()$/;"	f	class:OpenXcom::SavedBattleGame
calculateParabolaHelper	Battlescape/TileEngine.cpp	/^bool calculateParabolaHelper(const Position& origin, const Position& target, double curvature, const Position& delta, FuncNewPosition posFunc)$/;"	f	namespace:OpenXcom::__anon45
calculateParabolaVoxel	Battlescape/TileEngine.cpp	/^int TileEngine::calculateParabolaVoxel(Position origin, Position target, bool storeTrajectory, std::vector<Position> *trajectory, BattleUnit *excludeUnit, double curvature, const Position delta)$/;"	f	class:OpenXcom::TileEngine
calculateRadianSpeed	Savegame/MovingTarget.cpp	/^double MovingTarget::calculateRadianSpeed(int speed)$/;"	f	class:OpenXcom::MovingTarget
calculateRange	Mod/RuleCraft.cpp	/^int RuleCraft::calculateRange(int type)$/;"	f	class:OpenXcom::RuleCraft
calculateRangedWeapon	Battlescape/AlienInventoryState.cpp	/^void AlienInventoryState::calculateRangedWeapon(BattleUnit* unit, BattleItem* weapon, Text* label)$/;"	f	class:OpenXcom::AlienInventoryState
calculateSpeed	Savegame/MovingTarget.cpp	/^void MovingTarget::calculateSpeed()$/;"	f	class:OpenXcom::MovingTarget
calculateSpeed	Savegame/Ufo.cpp	/^void Ufo::calculateSpeed()$/;"	f	class:OpenXcom::Ufo
calculateStatChanges	Savegame/Soldier.cpp	/^UnitStats Soldier::calculateStatChanges(const Mod *mod, RuleSoldierTransformation *transformationRule, Soldier *sourceSoldier, int mode, const RuleSoldier *sourceSoldierType)$/;"	f	class:OpenXcom::Soldier
calculateSunShading	Battlescape/TileEngine.cpp	/^void TileEngine::calculateSunShading(MapSubset gs)$/;"	f	class:OpenXcom::TileEngine
calculateTerrainBackground	Battlescape/TileEngine.cpp	/^void TileEngine::calculateTerrainBackground(MapSubset gs)$/;"	f	class:OpenXcom::TileEngine
calculateTerrainItems	Battlescape/TileEngine.cpp	/^void TileEngine::calculateTerrainItems(MapSubset gs)$/;"	f	class:OpenXcom::TileEngine
calculateThrow	Battlescape/Projectile.cpp	/^int Projectile::calculateThrow(double accuracy)$/;"	f	class:OpenXcom::Projectile
calculateTilesInFOV	Battlescape/TileEngine.cpp	/^void TileEngine::calculateTilesInFOV(BattleUnit *unit, const Position eventPos, const int eventRadius)$/;"	f	class:OpenXcom::TileEngine
calculateTotalSoldierEquipment	Savegame/Craft.cpp	/^void Craft::calculateTotalSoldierEquipment()$/;"	f	class:OpenXcom::Craft
calculateTrajectory	Battlescape/Projectile.cpp	/^int Projectile::calculateTrajectory(double accuracy)$/;"	f	class:OpenXcom::Projectile
calculateTrajectory	Battlescape/Projectile.cpp	/^int Projectile::calculateTrajectory(double accuracy, const Position& originVoxel, bool excludeUnit)$/;"	f	class:OpenXcom::Projectile
calculateUnitLighting	Battlescape/TileEngine.cpp	/^void TileEngine::calculateUnitLighting(MapSubset gs)$/;"	f	class:OpenXcom::TileEngine
calculateUnitsInFOV	Battlescape/TileEngine.cpp	/^bool TileEngine::calculateUnitsInFOV(BattleUnit* unit, const Position eventPos, const int eventRadius)$/;"	f	class:OpenXcom::TileEngine
calculateWalkingOffset	Battlescape/Map.cpp	/^UnitWalkingOffset Map::calculateWalkingOffset(const BattleUnit *unit) const$/;"	f	class:OpenXcom::Map
calculateWindowPosition	Geoscape/DogfightState.cpp	/^void DogfightState::calculateWindowPosition()$/;"	f	class:OpenXcom::DogfightState
callOverloadProc	Engine/Script.cpp	/^bool callOverloadProc(ParserWriter& ph, const ScriptRange<ScriptProcData>& proc, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
call_func_h	Engine/Script.cpp	/^static inline RetEnum call_func_h(ScriptWorkerBase& c, ScriptFunc func, const Uint8* d, ProgPos& p)$/;"	f	namespace:OpenXcom
cameraPosition	Battlescape/BattlescapeGame.h	/^	Position cameraPosition;$/;"	m	struct:OpenXcom::BattleAction
canActivate	Engine/ModInfo.cpp	/^bool ModInfo::canActivate(const std::string &curMaster) const$/;"	f	class:OpenXcom::ModInfo
canAutoPatrol	Mod/RuleCraft.cpp	/^bool RuleCraft::canAutoPatrol() const$/;"	f	class:OpenXcom::RuleCraft
canAutoSell	Mod/RuleManufacture.cpp	/^bool RuleManufacture::canAutoSell() const$/;"	f	class:OpenXcom::RuleManufacture
canBeEquippedBeforeBaseDefense	Mod/RuleItem.cpp	/^bool RuleItem::canBeEquippedBeforeBaseDefense() const$/;"	f	class:OpenXcom::RuleItem
canBeEquippedToCraftInventory	Mod/RuleItem.cpp	/^bool RuleItem::canBeEquippedToCraftInventory() const$/;"	f	class:OpenXcom::RuleItem
canBeInfiltrated	Savegame/Country.cpp	/^bool Country::canBeInfiltrated()$/;"	f	class:OpenXcom::Country
canBeMindControlled	Mod/Unit.h	/^	bool canBeMindControlled() const { return _canBeMindControlled; }$/;"	f	class:OpenXcom::Unit
canBePlacedIntoInventorySection	Mod/RuleItem.cpp	/^bool RuleItem::canBePlacedIntoInventorySection(const RuleInventory* inventorySection) const$/;"	f	class:OpenXcom::RuleItem
canBeSkipped	Mod/MapScript.h	/^	bool canBeSkipped() const { return _canBeSkipped; };$/;"	f	class:OpenXcom::MapScript
canBeStacked	Battlescape/Inventory.cpp	/^bool Inventory::canBeStacked(BattleItem *itemA, BattleItem *itemB)$/;"	f	class:OpenXcom::Inventory
canDefendBase	Savegame/Soldier.cpp	/^bool Soldier::canDefendBase() const$/;"	f	class:OpenXcom::Soldier
canFallDown	Battlescape/Pathfinding.cpp	/^bool Pathfinding::canFallDown(Tile *here) const$/;"	f	class:OpenXcom::Pathfinding
canFallDown	Battlescape/Pathfinding.cpp	/^bool Pathfinding::canFallDown(Tile *here, int size) const$/;"	f	class:OpenXcom::Pathfinding
canPanic	Mod/Unit.h	/^	bool canPanic() const { return _canPanic; }$/;"	f	class:OpenXcom::Unit
canPlaceXCOMUnit	Battlescape/BattlescapeGenerator.cpp	/^bool BattlescapeGenerator::canPlaceXCOMUnit(Tile *tile)$/;"	f	class:OpenXcom::BattlescapeGenerator
canSellLiveAliens	Engine/Options.inc.h	/^	storageLimitsEnforced, canSellLiveAliens, canTransferCraftsWhileAirborne, customInitialBase, aggressiveRetaliation, geoDragScrollInvert,$/;"	v
canSpawnInstantEvent	Savegame/SavedGame.cpp	/^bool SavedGame::canSpawnInstantEvent(const RuleEvent* eventRules)$/;"	f	class:OpenXcom::SavedGame
canSurrender	Mod/Unit.cpp	/^bool Unit::canSurrender() const$/;"	f	class:OpenXcom::Unit
canTargetTile	Battlescape/TileEngine.cpp	/^bool TileEngine::canTargetTile(Position *originVoxel, Tile *tile, int part, Position *scanVoxel, BattleUnit *excludeUnit, bool rememberObstacles)$/;"	f	class:OpenXcom::TileEngine
canTargetUnit	Battlescape/TileEngine.cpp	/^bool TileEngine::canTargetUnit(Position *originVoxel, Tile *tile, Position *scanVoxel, BattleUnit *excludeUnit, bool rememberObstacles, BattleUnit *potentialUnit)$/;"	f	class:OpenXcom::TileEngine
canTransferCraftsWhileAirborne	Engine/Options.inc.h	/^	storageLimitsEnforced, canSellLiveAliens, canTransferCraftsWhileAirborne, customInitialBase, aggressiveRetaliation, geoDragScrollInvert,$/;"	v
canUseWeapon	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::canUseWeapon(const BattleItem* weapon, const BattleUnit* unit, bool isBerserking, BattleActionType actionType, std::string* message) const$/;"	f	class:OpenXcom::SavedBattleGame
cancel	Battlescape/BattleState.cpp	/^void BattleState::cancel()$/;"	f	class:OpenXcom::BattleState
cancel	Battlescape/ExplosionBState.cpp	/^void ExplosionBState::cancel()$/;"	f	class:OpenXcom::ExplosionBState
cancel	Battlescape/ProjectileFlyBState.cpp	/^void ProjectileFlyBState::cancel()$/;"	f	class:OpenXcom::ProjectileFlyBState
cancel	Battlescape/UnitDieBState.cpp	/^void UnitDieBState::cancel()$/;"	f	class:OpenXcom::UnitDieBState
cancel	Battlescape/UnitPanicBState.cpp	/^void UnitPanicBState::cancel()$/;"	f	class:OpenXcom::UnitPanicBState
cancel	Battlescape/UnitTurnBState.cpp	/^void UnitTurnBState::cancel()$/;"	f	class:OpenXcom::UnitTurnBState
cancel	Battlescape/UnitWalkBState.cpp	/^void UnitWalkBState::cancel()$/;"	f	class:OpenXcom::UnitWalkBState
cancelAllActions	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::cancelAllActions()$/;"	f	class:OpenXcom::BattlescapeGame
cancelCurrentAction	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::cancelCurrentAction(bool bForce)$/;"	f	class:OpenXcom::BattlescapeGame
canonicalize	Engine/FileMap.cpp	/^std::string canonicalize(const std::string &in)$/;"	f	namespace:OpenXcom::FileMap
caption	Mod/RuleVideo.h	/^	std::string caption; \/\/ STR id of caption text$/;"	m	struct:OpenXcom::SlideshowSlide
captureMouse	Engine/Options.inc.h	/^OPT SDL_GrabMode captureMouse;$/;"	v
cartToPolar	Geoscape/Globe.cpp	/^void Globe::cartToPolar(Sint16 x, Sint16 y, double *lon, double *lat) const$/;"	f	class:OpenXcom::Globe
caseCompare	Engine/Unicode.cpp	/^bool caseCompare(const std::string &a, const std::string &b)$/;"	f	namespace:OpenXcom::Unicode
caseFind	Engine/Unicode.cpp	/^bool caseFind(const std::string &haystack, const std::string &needle)$/;"	f	namespace:OpenXcom::Unicode
castedShade	Battlescape/TileEngine.cpp	/^int TileEngine::castedShade(Position voxel)$/;"	f	class:OpenXcom::TileEngine
catFile	Menu/VideoState.cpp	/^	std::string catFile;$/;"	m	struct:OpenXcom::__anon11	file:
category	Engine/OptionInfo.cpp	/^std::string OptionInfo::category() const$/;"	f	class:OpenXcom::OptionInfo
cbxAmmoSelect	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::cbxAmmoSelect(Action *)$/;"	f	class:OpenXcom::StatsForNerdsState
cbxAreaChange	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::cbxAreaChange(Action *)$/;"	f	class:OpenXcom::GeoscapeState
cbxCategoryChange	Basescape/NewManufactureListState.cpp	/^void NewManufactureListState::cbxCategoryChange(Action *)$/;"	f	class:OpenXcom::NewManufactureListState
cbxCategoryChange	Basescape/PurchaseState.cpp	/^void PurchaseState::cbxCategoryChange(Action *)$/;"	f	class:OpenXcom::PurchaseState
cbxCategoryChange	Basescape/SellState.cpp	/^void SellState::cbxCategoryChange(Action *)$/;"	f	class:OpenXcom::SellState
cbxCategoryChange	Basescape/TransferItemsState.cpp	/^void TransferItemsState::cbxCategoryChange(Action *)$/;"	f	class:OpenXcom::TransferItemsState
cbxCountryChange	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::cbxCountryChange(Action *)$/;"	f	class:OpenXcom::GeoscapeState
cbxCraftChange	Menu/NewBattleState.cpp	/^void NewBattleState::cbxCraftChange(Action *)$/;"	f	class:OpenXcom::NewBattleState
cbxDragScrollChange	Menu/OptionsBattlescapeState.cpp	/^void OptionsBattlescapeState::cbxDragScrollChange(Action *)$/;"	f	class:OpenXcom::OptionsBattlescapeState
cbxDragScrollChange	Menu/OptionsGeoscapeState.cpp	/^void OptionsGeoscapeState::cbxDragScrollChange(Action *)$/;"	f	class:OpenXcom::OptionsGeoscapeState
cbxEdgeScrollChange	Menu/OptionsBattlescapeState.cpp	/^void OptionsBattlescapeState::cbxEdgeScrollChange(Action *)$/;"	f	class:OpenXcom::OptionsBattlescapeState
cbxFilterByChange	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::cbxFilterByChange(Action *action)$/;"	f	class:OpenXcom::CraftEquipmentState
cbxFilterChange	Basescape/NewManufactureListState.cpp	/^void NewManufactureListState::cbxFilterChange(Action *)$/;"	f	class:OpenXcom::NewManufactureListState
cbxFilterChange	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::cbxFilterChange(Action *)$/;"	f	class:OpenXcom::OptionsVideoState
cbxLanguageChange	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::cbxLanguageChange(Action *)$/;"	f	class:OpenXcom::OptionsVideoState
cbxMasterChange	Menu/ModListState.cpp	/^void ModListState::cbxMasterChange(Action *)$/;"	f	class:OpenXcom::ModListState
cbxMasterHover	Menu/ModListState.cpp	/^void ModListState::cbxMasterHover(Action *)$/;"	f	class:OpenXcom::ModListState
cbxMissionChange	Menu/NewBattleState.cpp	/^void NewBattleState::cbxMissionChange(Action *)$/;"	f	class:OpenXcom::NewBattleState
cbxMusicFormatChange	Menu/OptionsAudioState.cpp	/^void OptionsAudioState::cbxMusicFormatChange(Action *)$/;"	f	class:OpenXcom::OptionsAudioState
cbxPaletteAction	Menu/TestState.cpp	/^void TestState::cbxPaletteAction(Action *action)$/;"	f	class:OpenXcom::TestState
cbxRegionChange	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::cbxRegionChange(Action *)$/;"	f	class:OpenXcom::GeoscapeState
cbxScreenActionsChange	Basescape/SoldiersState.cpp	/^void SoldiersState::cbxScreenActionsChange(Action *action)$/;"	f	class:OpenXcom::SoldiersState
cbxSoldierStatusChange	Basescape/SoldierTransformationListState.cpp	/^void SoldierTransformationListState::cbxSoldierStatusChange(Action *)$/;"	f	class:OpenXcom::SoldierTransformationListState
cbxSoldierTypeChange	Basescape/SoldierTransformationListState.cpp	/^void SoldierTransformationListState::cbxSoldierTypeChange(Action *)$/;"	f	class:OpenXcom::SoldierTransformationListState
cbxSortByChange	Basescape/CraftArmorState.cpp	/^void CraftArmorState::cbxSortByChange(Action *action)$/;"	f	class:OpenXcom::CraftArmorState
cbxSortByChange	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::cbxSortByChange(Action *)$/;"	f	class:OpenXcom::CraftSoldiersState
cbxSortByChange	Basescape/SoldiersState.cpp	/^void SoldiersState::cbxSortByChange(Action *action)$/;"	f	class:OpenXcom::SoldiersState
cbxSortByChange	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::cbxSortByChange(Action *action)$/;"	f	class:OpenXcom::AllocatePsiTrainingState
cbxSortByChange	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::cbxSortByChange(Action *action)$/;"	f	class:OpenXcom::AllocateTrainingState
cbxSortChange	Basescape/NewResearchListState.cpp	/^void NewResearchListState::cbxSortChange(Action *)$/;"	f	class:OpenXcom::NewResearchListState
cbxSoundFormatChange	Menu/OptionsAudioState.cpp	/^void OptionsAudioState::cbxSoundFormatChange(Action *)$/;"	f	class:OpenXcom::OptionsAudioState
cbxTerrainChange	Menu/NewBattleState.cpp	/^void NewBattleState::cbxTerrainChange(Action *)$/;"	f	class:OpenXcom::NewBattleState
cbxTestCaseChange	Menu/TestState.cpp	/^void TestState::cbxTestCaseChange(Action *)$/;"	f	class:OpenXcom::TestState
cbxVideoFormatChange	Menu/OptionsAudioState.cpp	/^void OptionsAudioState::cbxVideoFormatChange(Action *)$/;"	f	class:OpenXcom::OptionsAudioState
cbxZoneChange	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::cbxZoneChange(Action *)$/;"	f	class:OpenXcom::GeoscapeState
center	Geoscape/Globe.cpp	/^void Globe::center(double lon, double lat)$/;"	f	class:OpenXcom::Globe
centerAllSurfaces	Engine/State.cpp	/^void State::centerAllSurfaces()$/;"	f	class:OpenXcom::State
centerOnPosition	Battlescape/Camera.cpp	/^void Camera::centerOnPosition(Position mapPos, bool redraw)$/;"	f	class:OpenXcom::Camera
chain	lodepng.cpp	/^  unsigned short* chain;$/;"	m	struct:Hash	file:
chains0	lodepng.cpp	/^  BPMNode** chains0;$/;"	m	struct:BPMLists	file:
chains1	lodepng.cpp	/^  BPMNode** chains1;$/;"	m	struct:BPMLists	file:
chainz	lodepng.cpp	/^  unsigned short* chainz; \/*those with same amount of zeros*\/$/;"	m	struct:Hash	file:
chancePerTurn	Mod/RuleEnviroEffects.h	/^	int chancePerTurn;$/;"	m	struct:OpenXcom::EnvironmentalCondition
changeByValue	Basescape/SellState.cpp	/^void SellState::changeByValue(int change, int dir)$/;"	f	class:OpenXcom::SellState
changeMasterMod	Menu/ModListState.cpp	/^void ModListState::changeMasterMod()$/;"	f	class:OpenXcom::ModListState
changeRules	Savegame/Craft.cpp	/^void Craft::changeRules(RuleCraft *rules)$/;"	f	class:OpenXcom::Craft
changeRules	Savegame/Ufo.cpp	/^void Ufo::changeRules(const RuleUfo *rules)$/;"	f	class:OpenXcom::Ufo
changeValueByMouseWheel	Engine/Options.inc.h	/^	changeValueByMouseWheel, dragScrollTimeTolerance, dragScrollPixelTolerance, mousewheelSpeed, autosaveFrequency;$/;"	v
channel	Engine/GMCat.cpp	/^	unsigned channel;$/;"	m	struct:OpenXcom::track	file:
charDecoderInit	Engine/Script.cpp	/^constexpr std::array<CharClasses, 256> charDecoderInit()$/;"	f	namespace:OpenXcom::__anon8
checkAdjacentDoors	Battlescape/TileEngine.cpp	/^std::pair<int, Position> TileEngine::checkAdjacentDoors(Position pos, TilePart part)$/;"	f	class:OpenXcom::TileEngine
checkBugHuntMode	Battlescape/NextTurnState.cpp	/^void NextTurnState::checkBugHuntMode()$/;"	f	class:OpenXcom::NextTurnState
checkColorValidity	lodepng.cpp	/^static unsigned checkColorValidity(LodePNGColorType colortype, unsigned bd) \/*bd = bitdepth*\/$/;"	f	file:
checkErrors	Engine/OpenGL.cpp	/^bool OpenGL::checkErrors = true;$/;"	m	class:OpenXcom::OpenGL	file:
checkErrors	Engine/OpenGL.h	/^  static bool checkErrors;$/;"	m	class:OpenXcom::OpenGL
checkForCasualties	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::checkForCasualties(const RuleDamageType *damageType, BattleActionAttack attack, bool hiddenExplosion, bool terrainExplosion)$/;"	f	class:OpenXcom::BattlescapeGame
checkForProximityGrenades	Battlescape/BattlescapeGame.cpp	/^int BattlescapeGame::checkForProximityGrenades(BattleUnit *unit)$/;"	f	class:OpenXcom::BattlescapeGame
checkForSoftError	Mod/Mod.h	/^	bool checkForSoftError(bool check, const std::string &parent, const YAML::Node &node, const std::string &error, SeverityLevel level = LOG_WARNING) const$/;"	f	class:OpenXcom::Mod
checkForSoftError	Mod/Mod.h	/^	bool checkForSoftError(bool check, const std::string &parent, const std::string &error, SeverityLevel level = LOG_WARNING) const$/;"	f	class:OpenXcom::Mod
checkForTerrainExplosions	Battlescape/TileEngine.cpp	/^Tile *TileEngine::checkForTerrainExplosions()$/;"	f	class:OpenXcom::TileEngine
checkHandsOnly	Mod/RuleSkill.h	/^	bool checkHandsOnly() const { return _checkHandsOnly; }$/;"	f	class:OpenXcom::RuleSkill
checkMCD	Menu/TestState.cpp	/^int TestState::checkMCD(RuleTerrain *terrainRule, std::map<std::string, std::set<int>> &uniqueResults)$/;"	f	class:OpenXcom::TestState
checkModsDependencies	Engine/FileMap.cpp	/^void checkModsDependencies() {$/;"	f	namespace:OpenXcom::FileMap
checkOpenGLErrors	Engine/Options.inc.h	/^OPT bool fullscreen, asyncBlit, playIntro, useScaleFilter, useHQXFilter, useXBRZFilter, useOpenGL, checkOpenGLErrors, vSyncForOpenGL, useOpenGLSmoothing,$/;"	v
checkPalette	Menu/TestState.cpp	/^int TestState::checkPalette(const std::string& fullPath, int width, int height)$/;"	f	class:OpenXcom::TestState
checkRMP	Menu/TestState.cpp	/^int TestState::checkRMP(MapBlock *mapblock)$/;"	f	class:OpenXcom::TestState
checkReactionFire	Battlescape/TileEngine.cpp	/^bool TileEngine::checkReactionFire(BattleUnit *unit, const BattleAction &originalAction)$/;"	f	class:OpenXcom::TileEngine
checkReservedTU	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::checkReservedTU(BattleUnit *bu, int tu, int energy, bool justChecking)$/;"	f	class:OpenXcom::BattlescapeGame
checkSlotInPosition	Mod/RuleInventory.cpp	/^bool RuleInventory::checkSlotInPosition(int *x, int *y) const$/;"	f	class:OpenXcom::RuleInventory
checkStartingCondition	Battlescape/BriefingLightState.cpp	/^void BriefingLightState::checkStartingCondition(AlienDeployment *deployment)$/;"	f	class:OpenXcom::BriefingLightState
checkStartingCondition	Geoscape/ConfirmDestinationState.cpp	/^std::string ConfirmDestinationState::checkStartingCondition()$/;"	f	class:OpenXcom::ConfirmDestinationState
checkStartingCondition	Geoscape/ConfirmLandingState.cpp	/^std::string ConfirmLandingState::checkStartingCondition()$/;"	f	class:OpenXcom::ConfirmLandingState
checkViewSector	Savegame/BattleUnit.cpp	/^bool BattleUnit::checkViewSector (Position pos, bool useTurretDirection \/* = false *\/) const$/;"	f	class:OpenXcom::BattleUnit
checkVoxelExposure	Battlescape/TileEngine.cpp	/^int TileEngine::checkVoxelExposure(Position *originVoxel, Tile *tile, BattleUnit *excludeUnit, BattleUnit *excludeAllBut)$/;"	f	class:OpenXcom::TileEngine
checkup	Savegame/Craft.cpp	/^void Craft::checkup()$/;"	f	class:OpenXcom::Craft
children	lodepng.cpp	/^  ColorTree* children[16]; \/*up to 16 pointers to ColorTree of next level*\/$/;"	m	struct:ColorTree	file:
choose	Savegame/WeightedOptions.cpp	/^std::string WeightedOptions::choose() const$/;"	f	class:OpenXcom::WeightedOptions
chooseAlienBaseType	Savegame/AlienMission.cpp	/^AlienDeployment *AlienMission::chooseAlienBaseType(const Mod &mod, const MissionArea &area)$/;"	f	class:OpenXcom::AlienMission
chooseDespawnEvent	Mod/AlienDeployment.h	/^	std::string chooseDespawnEvent() const { return _despawnEvents.choose(); };$/;"	f	class:OpenXcom::AlienDeployment
chooseFailureEvent	Mod/AlienDeployment.h	/^	std::string chooseFailureEvent() const { return _failureEvents.choose(); };$/;"	f	class:OpenXcom::AlienDeployment
chooseGenMissionType	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::chooseGenMissionType() const$/;"	f	class:OpenXcom::AlienDeployment
chooseRandomMission	Savegame/AlienStrategy.cpp	/^std::string AlienStrategy::chooseRandomMission(const std::string &region) const$/;"	f	class:OpenXcom::AlienStrategy
chooseRandomRegion	Savegame/AlienStrategy.cpp	/^std::string AlienStrategy::chooseRandomRegion(const Mod *mod)$/;"	f	class:OpenXcom::AlienStrategy
chooseSuccessEvent	Mod/AlienDeployment.h	/^	std::string chooseSuccessEvent() const { return _successEvents.choose(); };$/;"	f	class:OpenXcom::AlienDeployment
chooseWeaponForSkill	Battlescape/SkillMenuState.cpp	/^void SkillMenuState::chooseWeaponForSkill(BattleAction* action, const std::vector<const RuleItem*> &compatibleWeaponTypes, BattleType compatibleBattleType, bool checkHandsOnly)$/;"	f	class:OpenXcom::SkillMenuState
circle_norm	Geoscape/Globe.cpp	/^	static inline Cord circle_norm(double ox, double oy, double r, double x, double y)$/;"	f	struct:OpenXcom::__anon49::GlobeStaticData
cleanup	Menu/NewBattleState.cpp	/^void NewBattleState::cleanup()$/;"	f	class:OpenXcom::NewBattleState
cleanupDefenses	Savegame/Base.cpp	/^void Base::cleanupDefenses(bool reclaimItems)$/;"	f	class:OpenXcom::Base
cleanupDeleted	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::cleanupDeleted()$/;"	f	class:OpenXcom::BattlescapeGame
cleanupPrisons	Savegame/Base.cpp	/^void Base::cleanupPrisons(int prisonType)$/;"	f	class:OpenXcom::Base
clear	Engine/FileMap.cpp	/^	void clear() {$/;"	f	struct:OpenXcom::FileMap::VFS
clear	Engine/FileMap.cpp	/^	void clear() {$/;"	f	struct:OpenXcom::FileMap::VFSLayerStack
clear	Engine/FileMap.cpp	/^void clear(bool clearOnly, bool embeddedOnly) {$/;"	f	namespace:OpenXcom::FileMap
clear	Engine/OpenGL.cpp	/^void OpenGL::clear() {$/;"	f	class:OpenXcom::OpenGL
clear	Engine/Screen.cpp	/^void Screen::clear()$/;"	f	class:OpenXcom::Screen
clear	Engine/Surface.cpp	/^void Surface::clear()$/;"	f	class:OpenXcom::Surface
clear	Savegame/WeightedOptions.h	/^	void clear() { _totalWeight = 0; _choices.clear(); }$/;"	f	class:OpenXcom::WeightedOptions
clearEquipmentLayout	Savegame/Soldier.cpp	/^void Soldier::clearEquipmentLayout()$/;"	f	class:OpenXcom::Soldier
clearHitLog	Savegame/HitLog.cpp	/^void HitLog::clearHitLog(bool resetTurnDiary, bool ignoreLastEntry)$/;"	f	class:OpenXcom::HitLog
clearLinksForAlienBase	Savegame/SavedGame.cpp	/^void SavedGame::clearLinksForAlienBase(AlienBase* alienBase, const Mod* mod)$/;"	f	class:OpenXcom::SavedGame
clearList	Interface/TextList.cpp	/^void TextList::clearList()$/;"	f	class:OpenXcom::TextList
clearModule	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::clearModule(int x, int y, int sizeX, int sizeY)$/;"	f	class:OpenXcom::BattlescapeGenerator
clearMouseScrollingState	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::clearMouseScrollingState()$/;"	f	class:OpenXcom::BattlescapeState
clearOccupiedSlotsCache	Battlescape/Inventory.cpp	/^std::vector<std::vector<char>>* Inventory::clearOccupiedSlotsCache()$/;"	f	class:OpenXcom::Inventory
clearScopeBlock	Engine/Script.cpp	/^ParserWriter::Block& ParserWriter::clearScopeBlock()$/;"	f	class:OpenXcom::ParserWriter
clearSpawnUnit	Savegame/BattleUnit.cpp	/^void BattleUnit::clearSpawnUnit()$/;"	f	class:OpenXcom::BattleUnit
clearTU	Battlescape/BattlescapeGame.cpp	/^void BattleActionCost::clearTU()$/;"	f	class:OpenXcom::BattleActionCost
clearTimeUnits	Savegame/BattleUnit.cpp	/^void BattleUnit::clearTimeUnits()$/;"	f	class:OpenXcom::BattleUnit
clearVisibleTiles	Savegame/BattleUnit.cpp	/^void BattleUnit::clearVisibleTiles()$/;"	f	class:OpenXcom::BattleUnit
clearVisibleUnits	Savegame/BattleUnit.cpp	/^void BattleUnit::clearVisibleUnits()$/;"	f	class:OpenXcom::BattleUnit
clear_channels	Engine/Adlib/adlplayer.cpp	/^void clear_channels()$/;"	f
clock	Engine/Adlib/fmopl.h	/^	int clock;			\/* master clock  (Hz)                *\/$/;"	m	struct:fm_opl_f
close	Battlescape/InfoboxState.cpp	/^void InfoboxState::close()$/;"	f	class:OpenXcom::InfoboxState
close	Battlescape/NextTurnState.cpp	/^void NextTurnState::close()$/;"	f	class:OpenXcom::NextTurnState
closeUfoDoor	Savegame/Tile.cpp	/^int Tile::closeUfoDoor()$/;"	f	class:OpenXcom::Tile
closeUfoDoors	Battlescape/TileEngine.cpp	/^int TileEngine::closeUfoDoors()$/;"	f	class:OpenXcom::TileEngine
codeBlocks	Engine/ScriptBind.h	/^	std::vector<Block> codeBlocks;$/;"	m	struct:OpenXcom::ParserWriter
codePointLengthUTF8	Engine/Unicode.cpp	/^std::size_t codePointLengthUTF8(const std::string &str)$/;"	f	namespace:OpenXcom::Unicode
codePointSubstrUTF8	Engine/Unicode.cpp	/^std::string codePointSubstrUTF8(const std::string &str, std::size_t pos, std::size_t count)$/;"	f	namespace:OpenXcom::Unicode
color	Mod/RuleEnviroEffects.h	/^	int color;$/;"	m	struct:OpenXcom::EnvironmentalCondition
color	Mod/RuleInterface.h	/^	int x, y, w, h, color, color2, border, custom;$/;"	m	struct:OpenXcom::Element
color	Mod/RuleVideo.h	/^	int w, h, x, y, color; \/\/ caption rect and color info$/;"	m	struct:OpenXcom::SlideshowSlide
color	lodepng.h	/^  LodePNGColorMode color;     \/*color type and bits, palette and transparency of the PNG file*\/$/;"	m	struct:LodePNGInfo
color2	Mod/RuleInterface.h	/^	int x, y, w, h, color, color2, border, custom;$/;"	m	struct:OpenXcom::Element
color256	Engine/FlcPlayer.cpp	/^void FlcPlayer::color256()$/;"	f	class:OpenXcom::FlcPlayer
color64	Engine/FlcPlayer.cpp	/^void FlcPlayer::color64()$/;"	f	class:OpenXcom::FlcPlayer
color_convert	lodepng.h	/^  unsigned color_convert; \/*whether to convert the PNG to the color type you want. Default: yes*\/$/;"	m	struct:LodePNGDecoderSettings
color_tree_add	lodepng.cpp	/^static void color_tree_add(ColorTree* tree,$/;"	f	file:
color_tree_cleanup	lodepng.cpp	/^static void color_tree_cleanup(ColorTree* tree)$/;"	f	file:
color_tree_get	lodepng.cpp	/^static int color_tree_get(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)$/;"	f	file:
color_tree_has	lodepng.cpp	/^static int color_tree_has(ColorTree* tree, unsigned char r, unsigned char g, unsigned char b, unsigned char a)$/;"	f	file:
color_tree_init	lodepng.cpp	/^static void color_tree_init(ColorTree* tree)$/;"	f	file:
colored	lodepng.h	/^  unsigned colored; \/*not greyscale*\/$/;"	m	struct:LodePNGColorProfile
colortype	lodepng.h	/^  LodePNGColorType colortype; \/*color type, see PNG standard or documentation further in this header file*\/$/;"	m	struct:LodePNGColorMode
combine	Mod/Unit.h	/^	static UnitStats combine(const UnitStats &mask, const UnitStats &keep, const UnitStats &reroll)$/;"	f	struct:OpenXcom::UnitStats
commonBattleUnitAnimations	Savegame/BattleUnit.cpp	/^void commonBattleUnitAnimations(ScriptParserBase* parser)$/;"	f	namespace:OpenXcom::__anon37
commonImpl	Savegame/BattleItem.cpp	/^void commonImpl(BindBase& b, Mod* mod)$/;"	f	namespace:OpenXcom::__anon40
commonImpl	Savegame/BattleUnit.cpp	/^void commonImpl(BindBase& b, Mod* mod)$/;"	f	namespace:OpenXcom::__anon37
common_zip	OpenXcom.s	/^common_zip:$/;"	l
common_zip_end	OpenXcom.s	/^common_zip_end:$/;"	l
common_zip_size	OpenXcom.s	/^common_zip_size:$/;"	l
compareArmorName	Basescape/SoldierArmorState.cpp	/^	compareArmorName(bool reverse) : _reverse(reverse) {}$/;"	f	struct:OpenXcom::compareArmorName
compareArmorName	Basescape/SoldierArmorState.cpp	/^struct compareArmorName$/;"	s	namespace:OpenXcom	file:
compareExt	Engine/CrossPlatform.cpp	/^bool compareExt(const std::string &filename, const std::string &extension)$/;"	f	namespace:OpenXcom::CrossPlatform
compareItemName	Basescape/StoresState.cpp	/^	compareItemName(bool reverse) : _reverse(reverse) {}$/;"	f	struct:OpenXcom::compareItemName
compareItemName	Basescape/StoresState.cpp	/^struct compareItemName$/;"	s	namespace:OpenXcom	file:
compareItemQuantity	Basescape/StoresState.cpp	/^	compareItemQuantity(bool reverse) : _reverse(reverse) {}$/;"	f	struct:OpenXcom::compareItemQuantity
compareItemQuantity	Basescape/StoresState.cpp	/^struct compareItemQuantity$/;"	s	namespace:OpenXcom	file:
compareItemSize	Basescape/StoresState.cpp	/^	compareItemSize(bool reverse) : _reverse(reverse) {}$/;"	f	struct:OpenXcom::compareItemSize
compareItemSize	Basescape/StoresState.cpp	/^struct compareItemSize$/;"	s	namespace:OpenXcom	file:
compareItemSpaceUsed	Basescape/StoresState.cpp	/^	compareItemSpaceUsed(bool reverse) : _reverse(reverse) {}$/;"	f	struct:OpenXcom::compareItemSpaceUsed
compareItemSpaceUsed	Basescape/StoresState.cpp	/^struct compareItemSpaceUsed$/;"	s	namespace:OpenXcom	file:
compareRule	Mod/Mod.cpp	/^	compareRule(Mod *mod) : _mod(mod)$/;"	f	struct:OpenXcom::compareRule
compareRule	Mod/Mod.cpp	/^	compareRule(Mod *mod) : _mod(mod), _sections(mod->getUfopaediaSections())$/;"	f	struct:OpenXcom::compareRule
compareRule	Mod/Mod.cpp	/^	compareRule(Mod *mod, RuleLookup lookup) : _mod(mod), _lookup(lookup)$/;"	f	struct:OpenXcom::compareRule
compareRule	Mod/Mod.cpp	/^struct compareRule$/;"	s	namespace:OpenXcom	file:
compareRule	Mod/Mod.cpp	/^struct compareRule<Armor>$/;"	s	namespace:OpenXcom	file:
compareRule	Mod/Mod.cpp	/^struct compareRule<ArticleDefinition>$/;"	s	namespace:OpenXcom	file:
compareRule	Mod/Mod.cpp	/^struct compareRule<RuleCraftWeapon>$/;"	s	namespace:OpenXcom	file:
compareSaveName	Menu/ListGamesState.cpp	/^	compareSaveName(bool reverse) : _reverse(reverse) {}$/;"	f	struct:OpenXcom::compareSaveName
compareSaveName	Menu/ListGamesState.cpp	/^struct compareSaveName$/;"	s	namespace:OpenXcom	file:
compareSaveTimestamp	Menu/ListGamesState.cpp	/^	compareSaveTimestamp(bool reverse) : _reverse(reverse) {}$/;"	f	struct:OpenXcom::compareSaveTimestamp
compareSaveTimestamp	Menu/ListGamesState.cpp	/^struct compareSaveTimestamp$/;"	s	namespace:OpenXcom	file:
compareSection	Mod/Mod.cpp	/^	compareSection(Mod *mod) : _mod(mod), _sections(mod->getUfopaediaSections())$/;"	f	struct:OpenXcom::compareSection
compareSection	Mod/Mod.cpp	/^struct compareSection$/;"	s	namespace:OpenXcom	file:
compareVersions	Engine/ModInfo.cpp	/^bool compareVersions(const ModInfoVersion& provided, const ModInfoVersion& required)$/;"	f	namespace:OpenXcom::__anon3
completeTransfer	Basescape/TransferItemsState.cpp	/^void TransferItemsState::completeTransfer()$/;"	f	class:OpenXcom::TransferItemsState
compress	lodepng.cpp	/^unsigned compress(std::vector<unsigned char>& out, const std::vector<unsigned char>& in,$/;"	f	namespace:lodepng
compress	lodepng.cpp	/^unsigned compress(std::vector<unsigned char>& out, const unsigned char* in, size_t insize,$/;"	f	namespace:lodepng
compression_method	lodepng.h	/^  unsigned compression_method;\/*compression method of the original file. Always 0.*\/$/;"	m	struct:LodePNGInfo
concatOptionalPaths	Engine/FileMap.cpp	/^static inline std::string concatOptionalPaths(const std::string& basePath, const std::string& relativePath)$/;"	f	namespace:OpenXcom::FileMap
concatPaths	Engine/FileMap.cpp	/^static inline std::string concatPaths(const std::string& basePath, const std::string& relativePath)$/;"	f	namespace:OpenXcom::FileMap
connect	Battlescape/PathfindingNode.cpp	/^void PathfindingNode::connect(PathfindingCost cost, PathfindingNode* prevNode, int prevDir)$/;"	f	class:OpenXcom::PathfindingNode
connect	Battlescape/PathfindingNode.cpp	/^void PathfindingNode::connect(PathfindingCost cost, PathfindingNode* prevNode, int prevDir, Position target)$/;"	f	class:OpenXcom::PathfindingNode
connect	Battlescape/PathfindingNode.h	124;"	d
connect1	Engine/Adlib/fmopl.h	/^	INT32 *connect1;	\/* slot1 output pointer                *\/$/;"	m	struct:fm_opl_channel
connect2	Engine/Adlib/fmopl.h	/^	INT32 *connect2;	\/* slot2 output pointer                *\/$/;"	m	struct:fm_opl_channel
connectorsDisabled	Mod/RuleBaseFacility.h	/^	bool connectorsDisabled() const { return _connectorsDisabled; }$/;"	f	class:OpenXcom::RuleBaseFacility
consumeFuel	Savegame/Craft.cpp	/^void Craft::consumeFuel(int escortSpeed)$/;"	f	class:OpenXcom::Craft
container	Engine/ScriptBind.h	/^	ScriptContainerBase& container;$/;"	m	struct:OpenXcom::ParserWriter
containsNotesState	Engine/Game.cpp	/^bool Game::containsNotesState() const$/;"	f	class:OpenXcom::Game
containsUfopaediaStartState	Engine/Game.cpp	/^bool Game::containsUfopaediaStartState() const$/;"	f	class:OpenXcom::Game
controler	Engine/ShaderDrawHelper.h	/^	controler(const ShaderBase<Pixel>& f) : base_type(f.ptr(), f.getDomain(), f.getImage(), std::make_pair(sizeof(Pixel), f.pitch()))$/;"	f	struct:OpenXcom::helper::controler
controler	Engine/ShaderDrawHelper.h	/^	inline controler(const Scalar<T>& s) : ref(s.ref)$/;"	f	struct:OpenXcom::helper::controler
controler	Engine/ShaderDrawHelper.h	/^struct controler$/;"	s	namespace:OpenXcom::helper
controler	Engine/ShaderDrawHelper.h	/^struct controler<Scalar<T> >$/;"	s	namespace:OpenXcom::helper
controler	Engine/ShaderDrawHelper.h	/^struct controler<ShaderBase<Pixel> > : public controler_base<typename ShaderBase<Pixel>::PixelPtr, typename ShaderBase<Pixel>::PixelRef>$/;"	s	namespace:OpenXcom::helper
controler	Engine/ShaderMove.h	/^	controler(const ShaderMove<Pixel>& f) : base_type(f.ptr(), f.getDomain(), f.getImage(), std::make_pair(sizeof(Pixel), f.pitch()))$/;"	f	struct:OpenXcom::helper::controler
controler	Engine/ShaderMove.h	/^struct controler<ShaderMove<Pixel> > : public controler_base<typename ShaderMove<Pixel>::PixelPtr, typename ShaderMove<Pixel>::PixelRef>$/;"	s	namespace:OpenXcom::helper
controler	Engine/ShaderRepeat.h	/^	controler(const ShaderRepeat<Pixel>& f) :$/;"	f	struct:OpenXcom::helper::controler
controler	Engine/ShaderRepeat.h	/^struct controler<ShaderRepeat<Pixel> >$/;"	s	namespace:OpenXcom::helper
controler_base	Engine/ShaderDrawHelper.h	/^	controler_base(PixelPtr base, const GraphSubset& d, const GraphSubset& r, const std::pair<int, int>& s) :$/;"	f	struct:OpenXcom::helper::controler_base
controler_base	Engine/ShaderDrawHelper.h	/^struct controler_base$/;"	s	namespace:OpenXcom::helper
convMbToWc	Engine/Unicode.cpp	/^std::wstring convMbToWc(const std::string &src, unsigned int cp)$/;"	f	namespace:OpenXcom::Unicode
convUtf32ToUtf8	Engine/Unicode.cpp	/^std::string convUtf32ToUtf8(const UString &src)$/;"	f	namespace:OpenXcom::Unicode
convUtf8ToUtf32	Engine/Unicode.cpp	/^UString convUtf8ToUtf32(const std::string &src)$/;"	f	namespace:OpenXcom::Unicode
convWcToMb	Engine/Unicode.cpp	/^std::string convWcToMb(const std::wstring &src, unsigned int cp)$/;"	f	namespace:OpenXcom::Unicode
convert	Battlescape/Position.h	/^	struct convert<OpenXcom::Position>$/;"	s	namespace:YAML
convert	Mod/AlienDeployment.cpp	/^	struct convert<OpenXcom::BriefingData>$/;"	s	namespace:YAML	file:
convert	Mod/AlienDeployment.cpp	/^	struct convert<OpenXcom::DeploymentData>$/;"	s	namespace:YAML	file:
convert	Mod/AlienDeployment.cpp	/^	struct convert<OpenXcom::ItemSet>$/;"	s	namespace:YAML	file:
convert	Mod/AlienDeployment.cpp	/^	struct convert<OpenXcom::ReinforcementsData>$/;"	s	namespace:YAML	file:
convert	Mod/ArticleDefinition.cpp	/^	struct convert<OpenXcom::ArticleDefinitionRect>$/;"	s	namespace:YAML	file:
convert	Mod/MapBlock.cpp	/^	struct convert<OpenXcom::RandomizedItems>$/;"	s	namespace:YAML	file:
convert	Mod/RuleAlienMission.cpp	/^	struct convert<OpenXcom::MissionWave>$/;"	s	namespace:YAML	file:
convert	Mod/RuleEnviroEffects.cpp	/^	struct convert<OpenXcom::EnvironmentalCondition>$/;"	s	namespace:YAML	file:
convert	Mod/RuleInventory.cpp	/^	struct convert<OpenXcom::RuleSlot>$/;"	s	namespace:YAML	file:
convert	Mod/RuleRegion.h	/^	struct convert<OpenXcom::MissionArea>$/;"	s	namespace:YAML
convert	Mod/RuleRegion.h	/^	struct convert<OpenXcom::MissionZone>$/;"	s	namespace:YAML
convert	Mod/Texture.h	/^	struct convert < OpenXcom::TerrainCriteria >$/;"	s	namespace:YAML
convert	Mod/UfoTrajectory.cpp	/^	struct convert<OpenXcom::TrajectoryWaypoint>$/;"	s	namespace:YAML	file:
convert	Mod/Unit.h	/^	struct convert<OpenXcom::UnitStats>$/;"	s	namespace:YAML
convert	Savegame/Craft.cpp	/^	struct convert<OpenXcom::VehicleDeploymentData>$/;"	s	namespace:YAML	file:
convertInfected	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::convertInfected()$/;"	f	class:OpenXcom::BattlescapeGame
convertMapToScreen	Battlescape/Camera.cpp	/^void Camera::convertMapToScreen(Position mapPos, Position *screenPos) const$/;"	f	class:OpenXcom::Camera
convertPath	Engine/CrossPlatform.cpp	/^std::string convertPath(const std::string &path)$/;"	f	namespace:OpenXcom::CrossPlatform
convertSampleRate	Engine/SoundSet.cpp	/^int SoundSet::convertSampleRate(Uint8 *oldsound, size_t oldsize, Uint8 *newsound) const$/;"	f	class:OpenXcom::SoundSet
convertScreenToMap	Battlescape/Camera.cpp	/^void Camera::convertScreenToMap(int screenX, int screenY, int *mapX, int *mapY) const$/;"	f	class:OpenXcom::Camera
convertToCorpse	Savegame/BattleItem.cpp	/^void BattleItem::convertToCorpse(const RuleItem *rules)$/;"	f	class:OpenXcom::BattleItem
convertToFaction	Savegame/BattleUnit.cpp	/^void BattleUnit::convertToFaction(UnitFaction f)$/;"	f	class:OpenXcom::BattleUnit
convertUnit	Battlescape/BattlescapeGame.cpp	/^BattleUnit *BattlescapeGame::convertUnit(BattleUnit *unit)$/;"	f	class:OpenXcom::BattlescapeGame
convertUnit	Savegame/SavedBattleGame.cpp	/^BattleUnit *SavedBattleGame::convertUnit(BattleUnit *unit)$/;"	f	class:OpenXcom::SavedBattleGame
convertUnitToCorpse	Battlescape/UnitDieBState.cpp	/^void UnitDieBState::convertUnitToCorpse()$/;"	f	class:OpenXcom::UnitDieBState
convertVoxelToScreen	Battlescape/Camera.cpp	/^void Camera::convertVoxelToScreen(Position voxelPos, Position *screenPos) const$/;"	f	class:OpenXcom::Camera
copy	Engine/Surface.cpp	/^void Surface::copy(Surface *surface)$/;"	f	class:OpenXcom::Surface
copyColor	Engine/Palette.cpp	/^void Palette::copyColor(int index, int r, int g, int b)$/;"	f	class:OpenXcom::Palette
copyFile	Engine/CrossPlatform.cpp	/^bool copyFile(const std::string& src, const std::string& dest)$/;"	f	namespace:OpenXcom::CrossPlatform
copyFrom	Engine/Palette.cpp	/^void Palette::copyFrom(Palette *srcPal)$/;"	f	class:OpenXcom::Palette
copyPath	Battlescape/Pathfinding.cpp	/^std::vector<int> Pathfinding::copyPath() const$/;"	f	class:OpenXcom::Pathfinding
correctVIPStats	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::correctVIPStats(bool success, bool retreated)$/;"	f	class:OpenXcom::SavedBattleGame
cost	Battlescape/PathfindingNode.h	/^	PathfindingCost cost;$/;"	m	struct:OpenXcom::PathfindingStep
cost	Mod/RuleItem.h	/^	RuleItemUseCost cost;$/;"	m	struct:OpenXcom::RuleItemAction
cost	Savegame/Transfer.h	/^	int cost;$/;"	m	struct:OpenXcom::TransferRow
count	Battlescape/TileEngine.h	/^		int count;$/;"	m	struct:OpenXcom::TileEngine::ReactionScore
count	md5.h	/^  uint4 count[2];   \/\/ 64bit counter for number of bits (lo, hi)$/;"	m	class:MD5
countKnownTargets	Battlescape/AIModule.cpp	/^int AIModule::countKnownTargets() const$/;"	f	class:OpenXcom::AIModule
countZeros	lodepng.cpp	/^static unsigned countZeros(const unsigned char* data, size_t size, size_t pos)$/;"	f	file:
countdown	Menu/OptionsConfirmState.cpp	/^void OptionsConfirmState::countdown()$/;"	f	class:OpenXcom::OptionsConfirmState
country	Savegame/MissionStatistics.h	/^	std::string region, country, type, ufo;$/;"	m	struct:OpenXcom::MissionStatistics
countryList	Geoscape/MonthlyReportState.cpp	/^std::string MonthlyReportState::countryList(const std::vector<std::string> &countries, const std::string &singular, const std::string &plural)$/;"	f	class:OpenXcom::MonthlyReportState
craft	Battlescape/DebriefingState.h	/^struct ReequipStat { std::string item; int qty; std::string craft; int listOrder; };$/;"	m	struct:OpenXcom::ReequipStat
craftCustomDeploy	Mod/RuleUfo.h	/^	std::string craftCustomDeploy, missionCustomDeploy;$/;"	m	struct:OpenXcom::RuleUfoStats
craftLaunchAlways	Engine/Options.inc.h	/^OPT bool includePrimeStateInSavedLayout, anytimePsiTraining, weaponSelfDestruction, retainCorpses, craftLaunchAlways, globeSeasons, globeDetail, globeRadarLines, globeFlightPaths, globeAllRadarsOnBaseBuild,$/;"	v
craftScripts	Mod/ModScript.h	/^	CraftScripts craftScripts = { _shared, _mod, "craft" };$/;"	m	class:OpenXcom::ModScript
crashDump	Engine/CrossPlatform.cpp	/^void crashDump(void *ex, const std::string &err)$/;"	f	namespace:OpenXcom::CrossPlatform
crashLogger	main.cpp	/^LONG WINAPI crashLogger(PEXCEPTION_POINTERS exception)$/;"	f
create	Engine/LanguagePlurality.cpp	/^	static LanguagePlurality *create() { return new CroatianPlurality; }$/;"	f	class:OpenXcom::CroatianPlurality
create	Engine/LanguagePlurality.cpp	/^	static LanguagePlurality *create() { return new CyrillicPlurality; }$/;"	f	class:OpenXcom::CyrillicPlurality
create	Engine/LanguagePlurality.cpp	/^	static LanguagePlurality *create() { return new CzechPlurality; }$/;"	f	class:OpenXcom::CzechPlurality
create	Engine/LanguagePlurality.cpp	/^	static LanguagePlurality *create() { return new NoSingular; }$/;"	f	class:OpenXcom::NoSingular
create	Engine/LanguagePlurality.cpp	/^	static LanguagePlurality *create() { return new OneSingular; }$/;"	f	class:OpenXcom::OneSingular
create	Engine/LanguagePlurality.cpp	/^	static LanguagePlurality *create() { return new PolishPlurality; }$/;"	f	class:OpenXcom::PolishPlurality
create	Engine/LanguagePlurality.cpp	/^	static LanguagePlurality *create() { return new RomanianPlurality; }$/;"	f	class:OpenXcom::RomanianPlurality
create	Engine/LanguagePlurality.cpp	/^	static LanguagePlurality *create() { return new ZeroOneSingular; }$/;"	f	class:OpenXcom::ZeroOneSingular
create	Engine/LanguagePlurality.cpp	/^LanguagePlurality *LanguagePlurality::create(const std::string &language)$/;"	f	class:OpenXcom::LanguagePlurality
create	Engine/Options.cpp	/^void create()$/;"	f	namespace:OpenXcom::Options
create	Menu/ErrorMessageState.cpp	/^void ErrorMessageState::create(const std::string &str, SDL_Color *palette, Uint8 color, const std::string &bg, int bgColor)$/;"	f	class:OpenXcom::ErrorMessageState
create	Mod/RuleStatBonus.cpp	/^BonusStatDataFunc create()$/;"	f	namespace:OpenXcom::__anon24
create0	Mod/RuleStatBonus.cpp	/^BonusStatDataFunc create0()$/;"	f	namespace:OpenXcom::__anon24
create1	Mod/RuleStatBonus.cpp	/^BonusStatDataFunc create1()$/;"	f	namespace:OpenXcom::__anon24
create2	Mod/RuleStatBonus.cpp	/^BonusStatDataFunc create2()$/;"	f	namespace:OpenXcom::__anon24
createArticleState	Ufopaedia/Ufopaedia.cpp	/^	ArticleState *Ufopaedia::createArticleState(std::shared_ptr<ArticleCommonState> state)$/;"	f	class:OpenXcom::Ufopaedia
createCommonArticleState	Ufopaedia/Ufopaedia.cpp	/^	std::shared_ptr<ArticleCommonState> Ufopaedia::createCommonArticleState(SavedGame *save, Mod *mod)$/;"	f	class:OpenXcom::Ufopaedia
createFolder	Engine/CrossPlatform.cpp	/^bool createFolder(const std::string &path)$/;"	f	namespace:OpenXcom::CrossPlatform
createItemForTile	Savegame/SavedBattleGame.cpp	/^BattleItem *SavedBattleGame::createItemForTile(const RuleItem *rule, Tile *tile)$/;"	f	class:OpenXcom::SavedBattleGame
createItemForTile	Savegame/SavedBattleGame.cpp	/^BattleItem *SavedBattleGame::createItemForTile(const std::string& type, Tile *tile)$/;"	f	class:OpenXcom::SavedBattleGame
createItemForUnit	Savegame/SavedBattleGame.cpp	/^BattleItem *SavedBattleGame::createItemForUnit(const RuleItem *rule, BattleUnit *unit, bool fixedWeapon)$/;"	f	class:OpenXcom::SavedBattleGame
createItemForUnitSpecialBuiltin	Savegame/SavedBattleGame.cpp	/^BattleItem *SavedBattleGame::createItemForUnitSpecialBuiltin(const RuleItem *rule, BattleUnit *unit)$/;"	f	class:OpenXcom::SavedBattleGame
createNewProjectile	Battlescape/ProjectileFlyBState.cpp	/^bool ProjectileFlyBState::createNewProjectile()$/;"	f	class:OpenXcom::ProjectileFlyBState
createShader	Engine/OpenGL.cpp	/^static GLuint createShader(GLenum type, const char *source)$/;"	f	namespace:OpenXcom
createTempUnit	Savegame/SavedBattleGame.cpp	/^BattleUnit *SavedBattleGame::createTempUnit(const Unit *rules, UnitFaction faction, int nextUnitId)$/;"	f	class:OpenXcom::SavedBattleGame
createTransparencyLUT	Mod/Mod.cpp	/^void Mod::createTransparencyLUT(Palette *pal)$/;"	f	class:OpenXcom::Mod
cur_address	Engine/Adlib/adlplayer.cpp	/^	unsigned char*	cur_address;$/;"	m	struct:struc_instruments	file:
cur_chip	Engine/Adlib/fmopl.cpp	/^static void *cur_chip = NULL;	\/* current chip point *\/$/;"	v	file:
cur_delay	Engine/Adlib/adlplayer.cpp	/^	int				cur_delay;$/;"	m	struct:struc_instruments	file:
cur_freq	Engine/Adlib/adlplayer.cpp	/^	unsigned char	cur_freq;$/;"	m	struct:struc_adlib_channels	file:
cur_instrument	Engine/Adlib/adlplayer.cpp	/^	unsigned char	cur_instrument;$/;"	m	struct:struc_adlib_channels	file:
cur_note	Engine/Adlib/adlplayer.cpp	/^	unsigned char	cur_note;$/;"	m	struct:struc_adlib_channels	file:
cur_pitchbend	Engine/Adlib/adlplayer.cpp	/^	signed short	cur_pitchbend;$/;"	m	struct:struc_instruments	file:
cur_sample	Engine/Adlib/adlplayer.cpp	/^	unsigned char	cur_sample;$/;"	m	struct:struc_adlib_channels	file:
cur_volume	Engine/Adlib/adlplayer.cpp	/^	unsigned char	cur_volume;$/;"	m	struct:struc_adlib_channels	file:
currSamplePos	Engine/FlcPlayer.h	/^		int currSamplePos;$/;"	m	struct:OpenXcom::FlcPlayer::AudioBuffer
currentEnergy	Mod/RuleStatBonus.cpp	/^float currentEnergy(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
currentFatalWounds	Mod/RuleStatBonus.cpp	/^float currentFatalWounds(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
currentFrame	Savegame/Tile.h	/^		Uint8 currentFrame:4;$/;"	m	struct:OpenXcom::Tile::TileObjectCache
currentHealth	Mod/RuleStatBonus.cpp	/^float currentHealth(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
currentMana	Mod/RuleStatBonus.cpp	/^float currentMana(const BattleUnit* unit)$/;"	f	namespace:OpenXcom::__anon24
currentMorale	Mod/RuleStatBonus.cpp	/^float currentMorale(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
currentRank	Mod/RuleStatBonus.cpp	/^float currentRank(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
currentSound	Engine/Options.inc.h	/^OPT SoundFormat currentSound;$/;"	v
currentStun	Mod/RuleStatBonus.cpp	/^float currentStun(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
currentTimeUnits	Mod/RuleStatBonus.cpp	/^float currentTimeUnits(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
current_index	Ufopaedia/ArticleState.h	/^		size_t current_index = invalid;$/;"	m	struct:OpenXcom::ArticleCommonState
current_page	Ufopaedia/ArticleState.h	/^		size_t current_page = 0;$/;"	m	struct:OpenXcom::ArticleCommonState
cursorInBlackBandsInBorderlessWindow	Engine/Options.inc.h	/^	cursorInBlackBandsInFullscreen, cursorInBlackBandsInWindow, cursorInBlackBandsInBorderlessWindow, maximizeInfoScreens, musicAlwaysLoop, StereoSound, verboseLogging, soldierDiaries, touchEnabled,$/;"	v
cursorInBlackBandsInFullscreen	Engine/Options.inc.h	/^	cursorInBlackBandsInFullscreen, cursorInBlackBandsInWindow, cursorInBlackBandsInBorderlessWindow, maximizeInfoScreens, musicAlwaysLoop, StereoSound, verboseLogging, soldierDiaries, touchEnabled,$/;"	v
cursorInBlackBandsInWindow	Engine/Options.inc.h	/^	cursorInBlackBandsInFullscreen, cursorInBlackBandsInWindow, cursorInBlackBandsInBorderlessWindow, maximizeInfoScreens, musicAlwaysLoop, StereoSound, verboseLogging, soldierDiaries, touchEnabled,$/;"	v
custom	Mod/RuleInterface.h	/^	int x, y, w, h, color, color2, border, custom;$/;"	m	struct:OpenXcom::Element
customInitialBase	Engine/Options.inc.h	/^	storageLimitsEnforced, canSellLiveAliens, canTransferCraftsWhileAirborne, customInitialBase, aggressiveRetaliation, geoDragScrollInvert,$/;"	v
customPalette	Mod/ArticleDefinition.h	/^		bool customPalette;$/;"	m	class:OpenXcom::ArticleDefinition
customUnitType	Mod/AlienDeployment.h	/^	std::string customUnitType;$/;"	m	struct:OpenXcom::DeploymentData
custom_context	lodepng.h	/^  const void* custom_context; \/*optional custom settings for custom functions*\/$/;"	m	struct:LodePNGCompressSettings
custom_context	lodepng.h	/^  const void* custom_context; \/*optional custom settings for custom functions*\/$/;"	m	struct:LodePNGDecompressSettings
custom_deflate	lodepng.h	/^  unsigned (*custom_deflate)(unsigned char**, size_t*,$/;"	m	struct:LodePNGCompressSettings
custom_inflate	lodepng.h	/^  unsigned (*custom_inflate)(unsigned char**, size_t*,$/;"	m	struct:LodePNGDecompressSettings
custom_zlib	lodepng.h	/^  unsigned (*custom_zlib)(unsigned char**, size_t*,$/;"	m	struct:LodePNGCompressSettings
custom_zlib	lodepng.h	/^  unsigned (*custom_zlib)(unsigned char**, size_t*,$/;"	m	struct:LodePNGDecompressSettings
cutscene	Mod/AlienDeployment.h	/^	std::string title, desc, music, background, cutscene;$/;"	m	struct:OpenXcom::BriefingData
d	Engine/Scalers/xbrz.cpp	/^    \/**\/a, b, c, d,$/;"	m	struct:__anon10::Kernel_4x4	file:
d	Engine/Scalers/xbrz.cpp	/^    \/**\/d,  e,  f,$/;"	m	struct:__anon10::Kernel_3x3	file:
d	Engine/Scalers/xbrz.cpp	413;"	d	file:
d	Engine/Scalers/xbrz.cpp	474;"	d	file:
dQty	Mod/AlienDeployment.h	/^	int lowQty, medQty, highQty, dQty, extraQty;$/;"	m	struct:OpenXcom::DeploymentData
damage	Savegame/BattleUnit.cpp	/^int BattleUnit::damage(Position relative, int damage, const RuleDamageType *type, SavedBattleGame *save, BattleActionAttack attack, UnitSide sideOverride, UnitBodyPart bodypartOverride)$/;"	f	class:OpenXcom::BattleUnit
damage	Savegame/Tile.cpp	/^bool Tile::damage(TilePart part, int power, SpecialTileType type)$/;"	f	class:OpenXcom::Tile
damageFacilities	Savegame/Base.cpp	/^void Base::damageFacilities(Ufo *ufo)$/;"	f	class:OpenXcom::Base
damageFacility	Savegame/Base.cpp	/^int Base::damageFacility(BaseFacility *toBeDamaged)$/;"	f	class:OpenXcom::Base
damageMax	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
damage_item	Mod/RuleItem.h	/^	BattleItem *damage_item = nullptr;$/;"	m	struct:OpenXcom::BattleActionAttack
damage_item	Mod/RuleItem.h	/^	const BattleItem *damage_item = nullptr;$/;"	m	struct:OpenXcom::helper::BattleActionAttackReadOnlyImpl
danger	Savegame/Tile.h	/^		Uint8 danger:1;$/;"	m	struct:OpenXcom::Tile::TileCache
data	Engine/GMCat.cpp	/^	const unsigned char *data;$/;"	m	struct:OpenXcom::seq	file:
data	Engine/ShaderDrawHelper.h	/^	const PixelPtr data;$/;"	m	struct:OpenXcom::helper::controler_base
data	Mod/AlienDeployment.h	/^	std::vector<DeploymentData> data;$/;"	m	struct:OpenXcom::ReinforcementsData
data	lodepng.cpp	/^  unsigned char* data;$/;"	m	struct:ucvector	file:
data	lodepng.cpp	/^  unsigned* data;$/;"	m	struct:uivector	file:
date	Savegame/SaveConverter.h	/^	std::string name, date, time;$/;"	m	struct:OpenXcom::SaveOriginal
day	lodepng.h	/^  unsigned day;     \/*1-31*\/$/;"	m	struct:LodePNGTime
daylight	Savegame/MissionStatistics.h	/^	int daylight;$/;"	m	struct:OpenXcom::MissionStatistics
daysWounded	Savegame/BattleUnitStatistics.h	/^	int daysWounded;                     \/\/\/< Tracks how many days the unit was wounded for$/;"	m	struct:OpenXcom::BattleUnitStatistics
deInit	Engine/FlcPlayer.cpp	/^void FlcPlayer::deInit()$/;"	f	class:OpenXcom::FlcPlayer
deInitAudio	Engine/FlcPlayer.cpp	/^void FlcPlayer::deInitAudio()$/;"	f	class:OpenXcom::FlcPlayer
dealWithSelectedAliens	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::dealWithSelectedAliens(bool sell)$/;"	f	class:OpenXcom::ManageAlienContainmentState
debug	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::debug(const std::string &message)$/;"	f	class:OpenXcom::BattlescapeState
debug	Engine/Options.inc.h	/^	autosave, allowResize, borderless, debug, debugUi, fpsCounter, newSeedOnLoad, keepAspectRatio, nonSquarePixelRatio,$/;"	v
debugArea	Savegame/SavedGame.h	/^	size_t debugArea = 0;$/;"	m	class:OpenXcom::SavedGame
debugCountry	Savegame/SavedGame.h	/^	Country *debugCountry = nullptr;$/;"	m	class:OpenXcom::SavedGame
debugDisplayScript	Mod/Armor.cpp	/^std::string debugDisplayScript(const Armor* ar)$/;"	f	namespace:OpenXcom::__anon17
debugDisplayScript	Mod/RuleCraft.cpp	/^std::string debugDisplayScript(const RuleCraft* rc)$/;"	f	namespace:OpenXcom::__anon27
debugDisplayScript	Mod/RuleInventory.cpp	/^std::string debugDisplayScript(const RuleInventory* bu)$/;"	f	namespace:OpenXcom::__anon25
debugDisplayScript	Mod/RuleItem.cpp	/^std::string debugDisplayScript(const RuleDamageType* rdt)$/;"	f	namespace:OpenXcom::__anon21
debugDisplayScript	Mod/RuleItem.cpp	/^std::string debugDisplayScript(const RuleItem* ri)$/;"	f	namespace:OpenXcom::__anon21
debugDisplayScript	Mod/RuleResearch.cpp	/^	std::string debugDisplayScript(const RuleResearch* ru)$/;"	f	namespace:OpenXcom::__anon26
debugDisplayScript	Mod/RuleSkill.cpp	/^std::string debugDisplayScript(const RuleSkill* rs)$/;"	f	namespace:OpenXcom::__anon22
debugDisplayScript	Mod/RuleSoldier.cpp	/^std::string debugDisplayScript(const RuleSoldier* rs)$/;"	f	namespace:OpenXcom::__anon19
debugDisplayScript	Mod/RuleSoldierBonus.cpp	/^std::string debugDisplayScript(const RuleSoldierBonus* ri)$/;"	f	namespace:OpenXcom::__anon18
debugDisplayScript	Mod/RuleUfo.cpp	/^std::string debugDisplayScript(const RuleUfo* ru)$/;"	f	namespace:OpenXcom::__anon23
debugDisplayScript	Mod/Unit.cpp	/^std::string debugDisplayScript(const Unit* unit)$/;"	f	namespace:OpenXcom::__anon14
debugDisplayScript	Savegame/BattleItem.cpp	/^std::string debugDisplayScript(const BattleItem* bt)$/;"	f	namespace:OpenXcom::__anon39
debugDisplayScript	Savegame/BattleUnit.cpp	/^std::string debugDisplayScript(const BattleUnit* bu)$/;"	f	namespace:OpenXcom::__anon36
debugDisplayScript	Savegame/Craft.cpp	/^std::string debugDisplayScript(const Craft* c)$/;"	f	namespace:OpenXcom::__anon38
debugDisplayScript	Savegame/SavedBattleGame.cpp	/^std::string debugDisplayScript(const SavedBattleGame* p)$/;"	f	namespace:OpenXcom::__anon33
debugDisplayScript	Savegame/SavedGame.cpp	/^std::string debugDisplayScript(const GameTime* p)$/;"	f	namespace:OpenXcom::__anon42
debugDisplayScript	Savegame/SavedGame.cpp	/^std::string debugDisplayScript(const RNG::RandomState* p)$/;"	f	namespace:OpenXcom::__anon42
debugDisplayScript	Savegame/SavedGame.cpp	/^std::string debugDisplayScript(const SavedGame* p)$/;"	f	namespace:OpenXcom::__anon42
debugDisplayScript	Savegame/Soldier.cpp	/^std::string debugDisplayScript(const Soldier* so)$/;"	f	namespace:OpenXcom::__anon35
debugDisplayScript	Savegame/Tile.cpp	/^std::string debugDisplayScript(const Tile* t)$/;"	f	namespace:OpenXcom::__anon43
debugDisplayScript	Savegame/Ufo.cpp	/^std::string debugDisplayScript(const Ufo* u)$/;"	f	namespace:OpenXcom::__anon32
debugDisplayScript	Ufopaedia/StatsForNerdsState.cpp	/^std::string debugDisplayScript(const StatsForNerdsState* sfn)$/;"	f	namespace:OpenXcom::__anon13
debugRegion	Savegame/SavedGame.h	/^	Region *debugRegion = nullptr;$/;"	m	class:OpenXcom::SavedGame
debugType	Savegame/SavedGame.h	/^	int debugType = 0;$/;"	m	class:OpenXcom::SavedGame
debugUi	Engine/Options.inc.h	/^	autosave, allowResize, borderless, debug, debugUi, fpsCounter, newSeedOnLoad, keepAspectRatio, nonSquarePixelRatio,$/;"	v
debugZone	Savegame/SavedGame.h	/^	size_t debugZone = 0;$/;"	m	class:OpenXcom::SavedGame
decltype	Engine/Collections.h	/^		auto operator*() -> decltype(std::make_pair(*first, *second))$/;"	f	struct:OpenXcom::Collections::ZipIterator
decltype	Engine/ScriptBind.h	/^	static auto f(T&& a, TRest&&... b) -> decltype(auto)$/;"	f	struct:OpenXcom::helper::BindMemberInvokeImpl
decode	Battlescape/Position.h	/^		static bool decode(const Node& node, OpenXcom::Position& rhs)$/;"	f	struct:YAML::convert
decode	Mod/AlienDeployment.cpp	/^		static bool decode(const Node& node, OpenXcom::BriefingData& rhs)$/;"	f	struct:YAML::convert
decode	Mod/AlienDeployment.cpp	/^		static bool decode(const Node& node, OpenXcom::DeploymentData& rhs)$/;"	f	struct:YAML::convert
decode	Mod/AlienDeployment.cpp	/^		static bool decode(const Node& node, OpenXcom::ItemSet& rhs)$/;"	f	struct:YAML::convert
decode	Mod/AlienDeployment.cpp	/^		static bool decode(const Node& node, OpenXcom::ReinforcementsData& rhs)$/;"	f	struct:YAML::convert
decode	Mod/ArticleDefinition.cpp	/^		static bool decode(const Node& node, OpenXcom::ArticleDefinitionRect& rhs)$/;"	f	struct:YAML::convert
decode	Mod/MapBlock.cpp	/^		static bool decode(const Node& node, OpenXcom::RandomizedItems& rhs)$/;"	f	struct:YAML::convert
decode	Mod/RuleAlienMission.cpp	/^		static bool decode(const Node& node, OpenXcom::MissionWave& rhs)$/;"	f	struct:YAML::convert
decode	Mod/RuleEnviroEffects.cpp	/^		static bool decode(const Node& node, OpenXcom::EnvironmentalCondition& rhs)$/;"	f	struct:YAML::convert
decode	Mod/RuleInventory.cpp	/^		static bool decode(const Node& node, OpenXcom::RuleSlot& rhs)$/;"	f	struct:YAML::convert
decode	Mod/RuleRegion.h	/^		static bool decode(const Node& node, OpenXcom::MissionArea& rhs)$/;"	f	struct:YAML::convert
decode	Mod/RuleRegion.h	/^		static bool decode(const Node& node, OpenXcom::MissionZone& rhs)$/;"	f	struct:YAML::convert
decode	Mod/Texture.h	/^		static bool decode(const Node& node, OpenXcom::TerrainCriteria& rhs)$/;"	f	struct:YAML::convert
decode	Mod/UfoTrajectory.cpp	/^		static bool decode(const Node& node, OpenXcom::TrajectoryWaypoint& rhs)$/;"	f	struct:YAML::convert
decode	Mod/Unit.h	/^		static bool decode(const Node& node, OpenXcom::UnitStats& rhs)$/;"	f	struct:YAML::convert
decode	Savegame/Craft.cpp	/^		static bool decode(const Node& node, OpenXcom::VehicleDeploymentData& rhs)$/;"	f	struct:YAML::convert
decode	lodepng.cpp	/^unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h, const std::string& filename,$/;"	f	namespace:lodepng
decode	lodepng.cpp	/^unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h, const unsigned char* in,$/;"	f	namespace:lodepng
decode	lodepng.cpp	/^unsigned decode(std::vector<unsigned char>& out, unsigned& w, unsigned& h,$/;"	f	namespace:lodepng
decode	md5.cpp	/^void MD5::decode(uint4 output[], const uint1 input[], size_type len)$/;"	f	class:MD5
decodeAudio	Engine/FlcPlayer.cpp	/^void FlcPlayer::decodeAudio(int frames)$/;"	f	class:OpenXcom::FlcPlayer
decodeGeneric	lodepng.cpp	/^static void decodeGeneric(unsigned char** out, unsigned* w, unsigned* h,$/;"	f	file:
decodeVideo	Engine/FlcPlayer.cpp	/^void FlcPlayer::decodeVideo(bool skipLastFrame)$/;"	f	class:OpenXcom::FlcPlayer
decode_op	Engine/Adlib/adlplayer.cpp	/^int decode_op(int instrument, bool* another_loop)$/;"	f
decoder	lodepng.h	/^  LodePNGDecoderSettings decoder; \/*the decoding settings*\/$/;"	m	struct:LodePNGState
decompress	lodepng.cpp	/^unsigned decompress(std::vector<unsigned char>& out, const std::vector<unsigned char>& in,$/;"	f	namespace:lodepng
decompress	lodepng.cpp	/^unsigned decompress(std::vector<unsigned char>& out, const unsigned char* in, size_t insize,$/;"	f	namespace:lodepng
decrease	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::decrease()$/;"	f	class:OpenXcom::ManageAlienContainmentState
decrease	Basescape/PurchaseState.cpp	/^void PurchaseState::decrease()$/;"	f	class:OpenXcom::PurchaseState
decrease	Basescape/SellState.cpp	/^void SellState::decrease()$/;"	f	class:OpenXcom::SellState
decrease	Basescape/TransferItemsState.cpp	/^void TransferItemsState::decrease()$/;"	f	class:OpenXcom::TransferItemsState
decreaseByValue	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::decreaseByValue(int change)$/;"	f	class:OpenXcom::ManageAlienContainmentState
decreaseByValue	Basescape/PurchaseState.cpp	/^void PurchaseState::decreaseByValue(int change)$/;"	f	class:OpenXcom::PurchaseState
decreaseByValue	Basescape/TransferItemsState.cpp	/^void TransferItemsState::decreaseByValue(int change)$/;"	f	class:OpenXcom::TransferItemsState
decreaseCurrentAmbienceDelay	Savegame/SavedBattleGame.h	/^	void decreaseCurrentAmbienceDelay() { _currentAmbienceDelay--; }$/;"	f	class:OpenXcom::SavedBattleGame
decreaseCustomCounter	Savegame/SavedGame.cpp	/^void SavedGame::decreaseCustomCounter(const std::string& name)$/;"	f	class:OpenXcom::SavedGame
decreaseLiveUfos	Savegame/AlienMission.h	/^	void decreaseLiveUfos() { --_liveUfos; }$/;"	f	class:OpenXcom::AlienMission
decreaseMissingItemCount	Battlescape/CannotReequipState.cpp	/^void CannotReequipState::decreaseMissingItemCount(const RuleItem* rule, int amount)$/;"	f	class:OpenXcom::CannotReequipState
decreaseRecoveredItemCount	Battlescape/DebriefingState.cpp	/^void DebriefingState::decreaseRecoveredItemCount(const RuleItem *rule, int amount)$/;"	f	class:OpenXcom::DebriefingState
defTriBool	Mod/Armor.cpp	/^const Sint8 defTriBool = -1;$/;"	m	namespace:OpenXcom::__anon15	file:
defaultBehavior	Mod/RuleItem.h	/^	bool defaultBehavior = true;$/;"	m	struct:OpenXcom::RuleItemFuseTrigger
defaultModVersion	Engine/ModInfo.cpp	/^const ModInfoVersion defaultModVersion = normalizeModVersion("def", "1.0");$/;"	m	namespace:OpenXcom::__anon3	file:
deferredPalette	Engine/Screen.h	/^	SDL_Color deferredPalette[256];$/;"	m	class:OpenXcom::Screen
deflate	lodepng.cpp	/^static unsigned deflate(unsigned char** out, size_t* outsize,$/;"	f	file:
deflateDynamic	lodepng.cpp	/^static unsigned deflateDynamic(ucvector* out, size_t* bp, Hash* hash,$/;"	f	file:
deflateFixed	lodepng.cpp	/^static unsigned deflateFixed(ucvector* out, size_t* bp, Hash* hash,$/;"	f	file:
deflateNoCompression	lodepng.cpp	/^static unsigned deflateNoCompression(ucvector* out, const unsigned char* data, size_t datasize)$/;"	f	file:
deinit	Battlescape/BattleState.cpp	/^void BattleState::deinit()$/;"	f	class:OpenXcom::BattleState
deinit	Battlescape/UnitWalkBState.cpp	/^void UnitWalkBState::deinit()$/;"	f	class:OpenXcom::UnitWalkBState
delay	Engine/AdlibMusic.cpp	/^int AdlibMusic::delay = 0;$/;"	m	class:OpenXcom::AdlibMusic	file:
delay	Engine/AdlibMusic.h	/^	static int delay, rate;$/;"	m	class:OpenXcom::AdlibMusic
delay	Engine/FlcPlayer.cpp	/^void FlcPlayer::delay(Uint32 milliseconds)$/;"	f	class:OpenXcom::FlcPlayer
delayRates	Engine/AdlibMusic.cpp	/^std::map<int, int> AdlibMusic::delayRates;$/;"	m	class:OpenXcom::AdlibMusic	file:
delayRates	Engine/AdlibMusic.h	/^	static std::map<int, int> delayRates;$/;"	m	class:OpenXcom::AdlibMusic
delayedInit	Basescape/SellState.cpp	/^void SellState::delayedInit()$/;"	f	class:OpenXcom::SellState
deleteAll	Engine/Collections.h	/^	static void deleteAll(C& colection)$/;"	f	class:OpenXcom::Collections
deleteAll	Engine/Collections.h	/^	static void deleteAll(T* p)$/;"	f	class:OpenXcom::Collections
deleteAll	Engine/Collections.h	/^	static void deleteAll(const T& p)$/;"	f	class:OpenXcom::Collections
deleteAll	Engine/Collections.h	/^	static void deleteAll(std::pair<const K, V>& p)$/;"	f	class:OpenXcom::Collections
deleteFile	Engine/CrossPlatform.cpp	/^bool deleteFile(const std::string &path)$/;"	f	namespace:OpenXcom::CrossPlatform
deleteIf	Engine/Collections.h	/^	static int deleteIf(C& colection, F&& func)$/;"	f	class:OpenXcom::Collections
deleteIf	Engine/Collections.h	/^	static int deleteIf(C& colection, int numberToRemove, F&& func)$/;"	f	class:OpenXcom::Collections
deleteList	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::deleteList(BattleItem* item)$/;"	f	class:OpenXcom::SavedBattleGame
deleteRetaliationMission	Savegame/SavedGame.cpp	/^void SavedGame::deleteRetaliationMission(AlienMission* am, Base* base)$/;"	f	class:OpenXcom::SavedGame
delta	Engine/GMCat.cpp	/^	unsigned int delta;$/;"	m	struct:OpenXcom::output_status	file:
delta	Savegame/BattleUnitStatistics.h	/^	UnitStats delta;                     \/\/\/< Tracks the increase in unit stats (is not saved, only used during debriefing)$/;"	m	struct:OpenXcom::BattleUnitStatistics
deltat	Engine/Adlib/fmopl.h	/^	YM_DELTAT *deltat;			\/* DELTA-T ADPCM       *\/$/;"	m	struct:fm_opl_f
deployAliens	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::deployAliens(const AlienDeployment *deployment)$/;"	f	class:OpenXcom::BattlescapeGenerator
deployCivilians	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::deployCivilians(bool markAsVIP, int nodeRank, int max, bool roundUp, const std::string &civilianType)$/;"	f	class:OpenXcom::BattlescapeGenerator
deployReinforcements	Battlescape/NextTurnState.cpp	/^bool NextTurnState::deployReinforcements(const ReinforcementsData &wave)$/;"	f	class:OpenXcom::NextTurnState
deployXCOM	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::deployXCOM(const RuleStartingCondition* startingCondition, const RuleEnviroEffects* enviro)$/;"	f	class:OpenXcom::BattlescapeGenerator
dequeuePath	Battlescape/Pathfinding.cpp	/^int Pathfinding::dequeuePath()$/;"	f	class:OpenXcom::Pathfinding
deriveRank	Savegame/BattleUnit.cpp	/^void BattleUnit::deriveRank()$/;"	f	class:OpenXcom::BattleUnit
desc	Mod/AlienDeployment.h	/^	std::string title, desc, music, background, cutscene;$/;"	m	struct:OpenXcom::BriefingData
description	Engine/OptionInfo.cpp	/^std::string OptionInfo::description() const$/;"	f	class:OpenXcom::OptionInfo
despawnEvenIfTargeted	Mod/RuleAlienMission.h	/^	bool despawnEvenIfTargeted() const { return _despawnEvenIfTargeted; }$/;"	f	class:OpenXcom::RuleAlienMission
desperate	Battlescape/BattlescapeGame.h	/^	bool desperate; \/\/ ignoring newly-spotted units$/;"	m	struct:OpenXcom::BattleAction
destroy	Savegame/Tile.cpp	/^bool Tile::destroy(TilePart part, SpecialTileType type)$/;"	f	class:OpenXcom::Tile
destroyDisconnectedFacilities	Savegame/Base.cpp	/^void Base::destroyDisconnectedFacilities()$/;"	f	class:OpenXcom::Base
destroyFacility	Savegame/Base.cpp	/^void Base::destroyFacility(std::vector<BaseFacility*>::iterator facility)$/;"	f	class:OpenXcom::Base
destroyItem	Mod/RuleResearch.cpp	/^bool RuleResearch::destroyItem() const$/;"	f	class:OpenXcom::RuleResearch
destroyRequiredItems	Savegame/Craft.cpp	/^void Craft::destroyRequiredItems(const std::map<std::string, int>& requiredItems)$/;"	f	class:OpenXcom::Craft
details	Savegame/SavedGame.h	/^	std::string details;$/;"	m	struct:OpenXcom::SaveInfo
detect	Savegame/Base.cpp	/^UfoDetection Base::detect(const Ufo *target, const SavedGame *save, bool alreadyTracked) const$/;"	f	class:OpenXcom::Base
detect	Savegame/Craft.cpp	/^UfoDetection Craft::detect(const Ufo *target, const SavedGame *save, bool alreadyTracked) const$/;"	f	class:OpenXcom::Craft
determineAlienMissions	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::determineAlienMissions()$/;"	f	class:OpenXcom::GeoscapeState
determineReactionType	Battlescape/TileEngine.cpp	/^TileEngine::ReactionScore TileEngine::determineReactionType(BattleUnit *unit, BattleUnit *target)$/;"	f	class:OpenXcom::TileEngine
determineReinforcements	Battlescape/NextTurnState.cpp	/^bool NextTurnState::determineReinforcements()$/;"	f	class:OpenXcom::NextTurnState
detonate	Battlescape/TileEngine.cpp	/^bool TileEngine::detonate(Tile* tile, int explosive)$/;"	f	class:OpenXcom::TileEngine
die	Savegame/Soldier.cpp	/^void Soldier::die(SoldierDeath *death)$/;"	f	class:OpenXcom::Soldier
diff	Battlescape/BattlescapeGame.h	/^	int diff;$/;"	m	struct:OpenXcom::BattleAction
difficultyLevelScript	Savegame/SavedBattleGame.cpp	/^void difficultyLevelScript(const SavedBattleGame* sbg, int& val)$/;"	f	namespace:OpenXcom::__anon33
digest	md5.h	/^  uint1 digest[16]; \/\/ the result$/;"	m	class:MD5
dir	Savegame/Craft.h	/^	int dir;$/;"	m	struct:OpenXcom::VehicleDeploymentData
dir_max	Battlescape/Pathfinding.h	/^	constexpr static int dir_max = 10;$/;"	m	class:OpenXcom::Pathfinding
dir_x	Battlescape/Pathfinding.cpp	/^constexpr int Pathfinding::dir_x[Pathfinding::dir_max];$/;"	m	class:OpenXcom::Pathfinding	file:
dir_x	Battlescape/Pathfinding.h	/^	constexpr static int dir_x[dir_max] = {  0, +1, +1, +1,  0, -1, -1, -1,  0,  0};$/;"	m	class:OpenXcom::Pathfinding
dir_y	Battlescape/Pathfinding.cpp	/^constexpr int Pathfinding::dir_y[Pathfinding::dir_max];$/;"	m	class:OpenXcom::Pathfinding	file:
dir_y	Battlescape/Pathfinding.h	/^	constexpr static int dir_y[dir_max] = { -1, -1,  0, +1, +1, +1,  0, -1,  0,  0};$/;"	m	class:OpenXcom::Pathfinding
dir_z	Battlescape/Pathfinding.cpp	/^constexpr int Pathfinding::dir_z[Pathfinding::dir_max];$/;"	m	class:OpenXcom::Pathfinding	file:
dir_z	Battlescape/Pathfinding.h	/^	constexpr static int dir_z[dir_max] = {  0,  0,  0,  0,  0,  0,  0,  0, +1, -1};$/;"	m	class:OpenXcom::Pathfinding
directionTo	Savegame/BattleUnit.cpp	/^int BattleUnit::directionTo(Position point) const$/;"	f	class:OpenXcom::BattleUnit
directionToVector	Battlescape/Pathfinding.h	/^	constexpr static void directionToVector(int direction, Position *vector)$/;"	f	class:OpenXcom::Pathfinding
dirlist_t	Engine/FileMap.cpp	/^typedef std::vector<std::pair<std::string, std::string>> dirlist_t; \/\/ <dirname, basename>$/;"	t	namespace:OpenXcom::FileMap	file:
disableAutoEquip	Engine/Options.inc.h	/^	strafe, forceFire, showMoreStatsInInventoryView, allowPsionicCapture, skipNextTurnScreen, disableAutoEquip, battleDragScrollInvert,$/;"	v
disableIndicators	Savegame/BattleUnit.cpp	/^void BattleUnit::disableIndicators()$/;"	f	class:OpenXcom::BattleUnit
disableObstacles	Battlescape/Map.cpp	/^void Map::disableObstacles(void)$/;"	f	class:OpenXcom::Map
disableSort	Menu/ListGamesState.cpp	/^void ListGamesState::disableSort()$/;"	f	class:OpenXcom::ListGamesState
discovered	Savegame/Tile.h	/^		Uint8 discovered:1;$/;"	m	struct:OpenXcom::Tile::TileObjectCache
displayArgs	Engine/Script.cpp	/^std::string displayArgs(const ScriptParserBase* spb, const ScriptRange<T>& range, F getType)$/;"	f	namespace:OpenXcom::__anon8
displayHeight	Engine/Options.inc.h	/^OPT int displayWidth, displayHeight, maxFrameSkip, baseXResolution, baseYResolution, baseXGeoscape, baseYGeoscape, baseXBattlescape, baseYBattlescape,$/;"	v
displayName	Savegame/SavedGame.h	/^	std::string displayName;$/;"	m	struct:OpenXcom::SaveInfo
displayOverloadProc	Engine/Script.cpp	/^std::string displayOverloadProc(const ScriptParserBase* spb, const ScriptRange<ScriptRange<ArgEnum>>& overload)$/;"	f	namespace:OpenXcom::__anon8
displayType	Engine/Script.cpp	/^std::string displayType(const ScriptParserBase* spb, ArgEnum type)$/;"	f	namespace:OpenXcom::__anon8
displayWidth	Engine/Options.inc.h	/^OPT int displayWidth, displayHeight, maxFrameSkip, baseXResolution, baseYResolution, baseXGeoscape, baseYGeoscape, baseXBattlescape, baseYBattlescape,$/;"	v
dist	Engine/Scalers/xbrz.cpp	/^    static double dist(uint32_t pix1, uint32_t pix2)$/;"	f	struct:__anon10::DistYCbCrBuffer
dist	Engine/Scalers/xbrz.cpp	/^    static double dist(uint32_t pix1, uint32_t pix2, double \/*luminanceWeight*\/)$/;"	f	struct:__anon10::ColorDistanceARGB
dist	Engine/Scalers/xbrz.cpp	/^    static double dist(uint32_t pix1, uint32_t pix2, double \/*luminanceWeight*\/)$/;"	f	struct:__anon10::ColorDistanceRGB
distImpl	Engine/Scalers/xbrz.cpp	/^    double distImpl(uint32_t pix1, uint32_t pix2) const$/;"	f	struct:__anon10::DistYCbCrBuffer	file:
distance	Battlescape/Position.h	/^	static float distance(Position pos1, Position pos2)$/;"	f	class:OpenXcom::Position
distance2d	Battlescape/Position.h	/^	static int distance2d(Position pos1, Position pos2)$/;"	f	class:OpenXcom::Position
distance2dSq	Battlescape/Position.h	/^	constexpr static int distance2dSq(Position pos1, Position pos2)$/;"	f	class:OpenXcom::Position
distance3dToPositionSq	Savegame/BattleUnit.cpp	/^int BattleUnit::distance3dToPositionSq(const Position& pos) const$/;"	f	class:OpenXcom::BattleUnit
distance3dToUnitSq	Savegame/BattleUnit.cpp	/^int BattleUnit::distance3dToUnitSq(BattleUnit* otherUnit) const$/;"	f	class:OpenXcom::BattleUnit
distanceSq	Battlescape/Position.h	/^	constexpr static int distanceSq(Position pos1, Position pos2)$/;"	f	class:OpenXcom::Position
dogfightEnded	Geoscape/DogfightState.cpp	/^bool DogfightState::dogfightEnded() const$/;"	f	class:OpenXcom::DogfightState
dogfightSpeed	Engine/Options.inc.h	/^OPT int geoClockSpeed, dogfightSpeed, geoScrollSpeed, geoDragScrollButton, geoscapeScale;$/;"	v
dominantDirectionThreshold	Engine/Scalers/config.h	/^    double dominantDirectionThreshold;$/;"	m	struct:xbrz::ScalerCfg
dontReselect	Savegame/BattleUnit.cpp	/^void BattleUnit::dontReselect()$/;"	f	class:OpenXcom::BattleUnit
dont_think	Battlescape/AIModule.cpp	/^void AIModule::dont_think(BattleAction *action)$/;"	f	class:OpenXcom::AIModule
dosFont	Engine/DosFont.h	/^unsigned char dosFont[DOSFONT_SIZE] = {$/;"	v
down	Battlescape/Camera.cpp	/^void Camera::down()$/;"	f	class:OpenXcom::Camera
down	Battlescape/MiniMapView.cpp	/^int MiniMapView::down()$/;"	f	class:OpenXcom::MiniMapView
downloadFile	Engine/CrossPlatform.cpp	/^bool downloadFile(const std::string& url, const std::string& filename)$/;"	f	namespace:OpenXcom::CrossPlatform
dragScrollPixelTolerance	Engine/Options.inc.h	/^	changeValueByMouseWheel, dragScrollTimeTolerance, dragScrollPixelTolerance, mousewheelSpeed, autosaveFrequency;$/;"	v
dragScrollTimeTolerance	Engine/Options.inc.h	/^	changeValueByMouseWheel, dragScrollTimeTolerance, dragScrollPixelTolerance, mousewheelSpeed, autosaveFrequency;$/;"	v
draw	Basescape/BaseView.cpp	/^void BaseView::draw()$/;"	f	class:OpenXcom::BaseView
draw	Basescape/MiniBaseView.cpp	/^void MiniBaseView::draw()$/;"	f	class:OpenXcom::MiniBaseView
draw	Battlescape/ActionMenuItem.cpp	/^void ActionMenuItem::draw()$/;"	f	class:OpenXcom::ActionMenuItem
draw	Battlescape/AlienInventory.cpp	/^void AlienInventory::draw()$/;"	f	class:OpenXcom::AlienInventory
draw	Battlescape/Inventory.cpp	/^void Inventory::draw()$/;"	f	class:OpenXcom::Inventory
draw	Battlescape/ItemSprite.cpp	/^void ItemSprite::draw(const BattleItem* item, int x, int y, int shade)$/;"	f	class:OpenXcom::ItemSprite
draw	Battlescape/Map.cpp	/^void Map::draw()$/;"	f	class:OpenXcom::Map
draw	Battlescape/MedikitView.cpp	/^void MedikitView::draw()$/;"	f	class:OpenXcom::MedikitView
draw	Battlescape/MiniMapView.cpp	/^void MiniMapView::draw()$/;"	f	class:OpenXcom::MiniMapView
draw	Battlescape/ScannerView.cpp	/^void ScannerView::draw()$/;"	f	class:OpenXcom::ScannerView
draw	Battlescape/UnitSprite.cpp	/^void UnitSprite::draw(const BattleUnit* unit, int part, int x, int y, int shade, GraphSubset mask, bool isAltPressed)$/;"	f	class:OpenXcom::UnitSprite
draw	Battlescape/WarningMessage.cpp	/^void WarningMessage::draw()$/;"	f	class:OpenXcom::WarningMessage
draw	Engine/Surface.cpp	/^void Surface::draw()$/;"	f	class:OpenXcom::Surface
draw	Geoscape/Globe.cpp	/^void Globe::draw()$/;"	f	class:OpenXcom::Globe
draw	Interface/ArrowButton.cpp	/^void ArrowButton::draw()$/;"	f	class:OpenXcom::ArrowButton
draw	Interface/Bar.cpp	/^void Bar::draw()$/;"	f	class:OpenXcom::Bar
draw	Interface/Cursor.cpp	/^void Cursor::draw()$/;"	f	class:OpenXcom::Cursor
draw	Interface/FpsCounter.cpp	/^void FpsCounter::draw()$/;"	f	class:OpenXcom::FpsCounter
draw	Interface/Frame.cpp	/^void Frame::draw()$/;"	f	class:OpenXcom::Frame
draw	Interface/NumberText.cpp	/^void NumberText::draw()$/;"	f	class:OpenXcom::NumberText
draw	Interface/ScrollBar.cpp	/^void ScrollBar::draw()$/;"	f	class:OpenXcom::ScrollBar
draw	Interface/Text.cpp	/^void Text::draw()$/;"	f	class:OpenXcom::Text
draw	Interface/TextButton.cpp	/^void TextButton::draw()$/;"	f	class:OpenXcom::TextButton
draw	Interface/TextEdit.cpp	/^void TextEdit::draw()$/;"	f	class:OpenXcom::TextEdit
draw	Interface/TextList.cpp	/^void TextList::draw()$/;"	f	class:OpenXcom::TextList
draw	Interface/ToggleTextButton.cpp	/^void ToggleTextButton::draw()$/;"	f	class:OpenXcom::ToggleTextButton
draw	Interface/Window.cpp	/^void Window::draw()$/;"	f	class:OpenXcom::Window
drawArrow	Interface/ComboBox.cpp	/^void ComboBox::drawArrow()$/;"	f	class:OpenXcom::ComboBox
drawBubbles	Mod/Armor.cpp	/^bool Armor::drawBubbles() const$/;"	f	class:OpenXcom::Armor
drawCircle	Engine/Surface.cpp	/^void Surface::drawCircle(Sint16 x, Sint16 y, Sint16 r, Uint8 color)$/;"	f	class:OpenXcom::Surface
drawCountryLines	Geoscape/GraphsState.cpp	/^void GraphsState::drawCountryLines()$/;"	f	class:OpenXcom::GraphsState
drawCraftDamage	Geoscape/DogfightState.cpp	/^void DogfightState::drawCraftDamage()$/;"	f	class:OpenXcom::DogfightState
drawCraftShield	Geoscape/DogfightState.cpp	/^void DogfightState::drawCraftShield()$/;"	f	class:OpenXcom::DogfightState
drawDetail	Geoscape/Globe.cpp	/^void Globe::drawDetail()$/;"	f	class:OpenXcom::Globe
drawFinanceLines	Geoscape/GraphsState.cpp	/^void GraphsState::drawFinanceLines()$/;"	f	class:OpenXcom::GraphsState
drawFlights	Geoscape/Globe.cpp	/^void Globe::drawFlights()$/;"	f	class:OpenXcom::Globe
drawGlobeCircle	Geoscape/Globe.cpp	/^void Globe::drawGlobeCircle(double lat, double lon, double radius, int segments, int frac)$/;"	f	class:OpenXcom::Globe
drawGrid	Battlescape/AlienInventory.cpp	/^void AlienInventory::drawGrid()$/;"	f	class:OpenXcom::AlienInventory
drawGrid	Battlescape/Inventory.cpp	/^void Inventory::drawGrid()$/;"	f	class:OpenXcom::Inventory
drawGridLabels	Battlescape/Inventory.cpp	/^void Inventory::drawGridLabels(bool showTuCost)$/;"	f	class:OpenXcom::Inventory
drawHandSprite	Mod/RuleItem.cpp	/^void RuleItem::drawHandSprite(const SurfaceSet *texture, Surface *surface, const BattleItem *item, const SavedBattleGame *save, int animFrame) const$/;"	f	class:OpenXcom::RuleItem
drawHandsItems	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::drawHandsItems()$/;"	f	class:OpenXcom::BattlescapeState
drawItem	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::drawItem(BattleItem* item, Surface* hand, std::vector<NumberText*> &ammoText, std::vector<NumberText*> &medikitText, NumberText *twoHandedText, bool drawReactionIndicator)$/;"	f	class:OpenXcom::BattlescapeState
drawItems	Battlescape/AlienInventory.cpp	/^void AlienInventory::drawItems()$/;"	f	class:OpenXcom::AlienInventory
drawItems	Battlescape/Inventory.cpp	/^void Inventory::drawItems()$/;"	f	class:OpenXcom::Inventory
drawLand	Geoscape/Globe.cpp	/^void Globe::drawLand()$/;"	f	class:OpenXcom::Globe
drawLine	Engine/Surface.cpp	/^void Surface::drawLine(Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 color)$/;"	f	class:OpenXcom::Surface
drawLines	Geoscape/GraphsState.cpp	/^void GraphsState::drawLines()$/;"	f	class:OpenXcom::GraphsState
drawMarkers	Geoscape/Globe.cpp	/^void Globe::drawMarkers()$/;"	f	class:OpenXcom::Globe
drawOcean	Geoscape/Globe.cpp	/^void Globe::drawOcean()$/;"	f	class:OpenXcom::Globe
drawPath	Geoscape/Globe.cpp	/^void Globe::drawPath(Surface *surface, double lon1, double lat1, double lon2, double lat2)$/;"	f	class:OpenXcom::Globe
drawPolygon	Engine/Surface.cpp	/^void Surface::drawPolygon(Sint16 *x, Sint16 *y, int n, Uint8 color)$/;"	f	class:OpenXcom::Surface
drawProjectile	Geoscape/DogfightState.cpp	/^void DogfightState::drawProjectile(const CraftWeaponProjectile* p)$/;"	f	class:OpenXcom::DogfightState
drawRadars	Geoscape/Globe.cpp	/^void Globe::drawRadars()$/;"	f	class:OpenXcom::Globe
drawRect	Engine/Surface.cpp	/^void Surface::drawRect(SDL_Rect *rect, Uint8 color)$/;"	f	class:OpenXcom::Surface
drawRect	Engine/Surface.cpp	/^void Surface::drawRect(Sint16 x, Sint16 y, Sint16 w, Sint16 h, Uint8 color)$/;"	f	class:OpenXcom::Surface
drawRegionLines	Geoscape/GraphsState.cpp	/^void GraphsState::drawRegionLines()$/;"	f	class:OpenXcom::GraphsState
drawRoutine0	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine0()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine1	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine1()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine11	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine11()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine12	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine12()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine16	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine16()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine19	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine19()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine2	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine2()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine20	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine20()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine21	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine21()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine3	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine3()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine4	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine4()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine5	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine5()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine6	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine6()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine7	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine7()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine8	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine8()$/;"	f	class:OpenXcom::UnitSprite
drawRoutine9	Battlescape/UnitSprite.cpp	/^void UnitSprite::drawRoutine9()$/;"	f	class:OpenXcom::UnitSprite
drawSelectedItem	Battlescape/Inventory.cpp	/^void Inventory::drawSelectedItem()$/;"	f	class:OpenXcom::Inventory
drawShadow	Battlescape/ItemSprite.cpp	/^void ItemSprite::drawShadow(const BattleItem* item, int x, int y)$/;"	f	class:OpenXcom::ItemSprite
drawShadow	Geoscape/Globe.cpp	/^void Globe::drawShadow()$/;"	f	class:OpenXcom::Globe
drawSprites	Basescape/SoldierDiaryPerformanceState.cpp	/^void SoldierDiaryPerformanceState::drawSprites()$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
drawString	Engine/Surface.cpp	/^void Surface::drawString(Sint16 x, Sint16 y, const char *s, Uint8 color)$/;"	f	class:OpenXcom::Surface
drawTarget	Geoscape/Globe.cpp	/^void Globe::drawTarget(Target *target, Surface *surface)$/;"	f	class:OpenXcom::Globe
drawTerrain	Battlescape/Map.cpp	/^void Map::drawTerrain(Surface *surface)$/;"	f	class:OpenXcom::Map
drawTexturedPolygon	Engine/Surface.cpp	/^void Surface::drawTexturedPolygon(Sint16 *x, Sint16 *y, int n, Surface *texture, int dx, int dy)$/;"	f	class:OpenXcom::Surface
drawThumb	Interface/ScrollBar.cpp	/^void ScrollBar::drawThumb()$/;"	f	class:OpenXcom::ScrollBar
drawTrack	Interface/ScrollBar.cpp	/^void ScrollBar::drawTrack()$/;"	f	class:OpenXcom::ScrollBar
drawUfo	Geoscape/DogfightState.cpp	/^void DogfightState::drawUfo()$/;"	f	class:OpenXcom::DogfightState
drawUnit	Battlescape/Map.cpp	/^void Map::drawUnit(UnitSprite &unitSprite, Tile *unitTile, Tile *currTile, Position currTileScreenPosition, bool topLayer, BattleUnit* movingUnit)$/;"	f	class:OpenXcom::Map
drawVHLine	Geoscape/Globe.cpp	/^void Globe::drawVHLine(Surface *surface, double lon1, double lat1, double lon2, double lat2, Uint8 color)$/;"	f	class:OpenXcom::Globe
drillModules	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::drillModules(TunnelData* data, const std::vector<SDL_Rect *> *rects, MapDirection dir, RuleTerrain *terrain)$/;"	f	class:OpenXcom::BattlescapeGenerator
dropItem	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::dropItem(Position position, BattleItem *item, bool removeItem, bool updateLight)$/;"	f	class:OpenXcom::BattlescapeGame
drop_mods	Engine/FileMap.cpp	/^static void drop_mods(const std::string& log_ctx, std::unordered_set<std::string>& drop_list) {$/;"	f	namespace:OpenXcom::FileMap
dummy	Engine/CrossPlatform.cpp	/^static auto dummy = ([]$/;"	m	namespace:OpenXcom::CrossPlatform	file:
dummy	Engine/ModInfo.cpp	/^static auto dummy = ([]$/;"	m	namespace:OpenXcom	file:
dummy	Engine/Unicode.cpp	/^static auto dummy = ([]$/;"	m	namespace:OpenXcom::Unicode	file:
dummy	main.cpp	/^static auto dummy = ([]$/;"	v	file:
dump	Engine/FileMap.cpp	/^	void dump(std::ostream &out, const std::string &prefix, bool verbose) {$/;"	f	struct:OpenXcom::FileMap::VFSLayer
dump	Engine/FileMap.cpp	/^	void dump(std::ostream& out, const std::string& prefix, bool verbose) {$/;"	f	struct:OpenXcom::FileMap::ModRecord
dump	Engine/FileMap.cpp	/^	void dump(std::ostream& out, const std::string& prefix, bool verbose) {$/;"	f	struct:OpenXcom::FileMap::VFS
dump	Engine/FileMap.cpp	/^	void dump(std::ostream& out, const std::string& prefix, bool verbose) {$/;"	f	struct:OpenXcom::FileMap::VFSLayerStack
dump_mods_layers	Engine/FileMap.cpp	/^static void dump_mods_layers(std::ostream &out, const std::string& prefix, bool verbose) {$/;"	f	namespace:OpenXcom::FileMap
duplicateEntry	Savegame/BattleUnitStatistics.h	/^	bool duplicateEntry(UnitStatus status, int id) const$/;"	f	struct:OpenXcom::BattleUnitStatistics
duration	Engine/Adlib/adlplayer.cpp	/^	int				duration;$/;"	m	struct:struc_adlib_channels	file:
e	Engine/ModInfo.cpp	/^bool findCompatibleEngine(const EngineData (&l)[I], const std::string& e, const std::array<int, 4>& version)$/;"	m	namespace:OpenXcom::__anon4	file:
e	Engine/Scalers/xbrz.cpp	/^    \/**\/d,  e,  f,$/;"	m	struct:__anon10::Kernel_3x3	file:
e	Engine/Scalers/xbrz.cpp	/^    \/**\/e, f, g, h,$/;"	m	struct:__anon10::Kernel_4x4	file:
e	Engine/Scalers/xbrz.cpp	414;"	d	file:
e	Engine/Scalers/xbrz.cpp	475;"	d	file:
edtBaseChange	Basescape/BaseInfoState.cpp	/^void BaseInfoState::edtBaseChange(Action *)$/;"	f	class:OpenXcom::BaseInfoState
edtBaseChange	Basescape/BasescapeState.cpp	/^void BasescapeState::edtBaseChange(Action *)$/;"	f	class:OpenXcom::BasescapeState
edtCraftChange	Basescape/CraftInfoState.cpp	/^void CraftInfoState::edtCraftChange(Action *action)$/;"	f	class:OpenXcom::CraftInfoState
edtNameChange	Geoscape/BaseNameState.cpp	/^void BaseNameState::edtNameChange(Action *action)$/;"	f	class:OpenXcom::BaseNameState
edtNoteKeyPress	Menu/NotesState.cpp	/^void NotesState::edtNoteKeyPress(Action* action)$/;"	f	class:OpenXcom::NotesState
edtSaveKeyPress	Basescape/CraftEquipmentSaveState.cpp	/^void CraftEquipmentSaveState::edtSaveKeyPress(Action *action)$/;"	f	class:OpenXcom::CraftEquipmentSaveState
edtSaveKeyPress	Battlescape/InventorySaveState.cpp	/^void InventorySaveState::edtSaveKeyPress(Action *action)$/;"	f	class:OpenXcom::InventorySaveState
edtSaveKeyPress	Menu/ListSaveState.cpp	/^void ListSaveState::edtSaveKeyPress(Action *action)$/;"	f	class:OpenXcom::ListSaveState
edtSoldierChange	Basescape/SoldierInfoState.cpp	/^void SoldierInfoState::edtSoldierChange(Action *)$/;"	f	class:OpenXcom::SoldierInfoState
edtSoldierChange	Battlescape/InventoryState.cpp	/^void InventoryState::edtSoldierChange(Action *)$/;"	f	class:OpenXcom::InventoryState
edtSoldierPress	Basescape/SoldierInfoState.cpp	/^void SoldierInfoState::edtSoldierPress(Action *)$/;"	f	class:OpenXcom::SoldierInfoState
edtSoldierPress	Battlescape/InventoryState.cpp	/^void InventoryState::edtSoldierPress(Action *action)$/;"	f	class:OpenXcom::InventoryState
edtTitleChange	Geoscape/TargetInfoState.cpp	/^void TargetInfoState::edtTitleChange(Action *action)$/;"	f	class:OpenXcom::TargetInfoState
eg_typ	Engine/Adlib/fmopl.h	/^	UINT8 eg_typ;	\/* envelope type flag                  *\/$/;"	m	struct:fm_opl_slot
empty	Battlescape/PathfindingOpenSet.h	/^	bool empty() const { return _queue.empty(); }$/;"	f	class:OpenXcom::PathfindingOpenSet
empty	Engine/Script.h	/^	const static ScriptText empty;$/;"	m	struct:OpenXcom::ScriptText
empty	Engine/Script.h	/^const inline ScriptText ScriptText::empty = { "" };$/;"	m	class:OpenXcom::ScriptText
empty	Savegame/WeightedOptions.h	/^	bool empty() const { return 0 == _totalWeight; }$/;"	f	class:OpenXcom::WeightedOptions
emptySet	Engine/FileMap.cpp	/^static const NameSet emptySet;$/;"	m	namespace:OpenXcom::FileMap	file:
enableNightVision	Battlescape/Map.cpp	/^void Map::enableNightVision()$/;"	f	class:OpenXcom::Map
enableObstacles	Battlescape/Map.cpp	/^void Map::enableObstacles(void)$/;"	f	class:OpenXcom::Map
encode	Battlescape/Position.h	/^		static Node encode(const OpenXcom::Position& rhs)$/;"	f	struct:YAML::convert
encode	Mod/AlienDeployment.cpp	/^		static Node encode(const OpenXcom::BriefingData& rhs)$/;"	f	struct:YAML::convert
encode	Mod/AlienDeployment.cpp	/^		static Node encode(const OpenXcom::DeploymentData& rhs)$/;"	f	struct:YAML::convert
encode	Mod/AlienDeployment.cpp	/^		static Node encode(const OpenXcom::ItemSet& rhs)$/;"	f	struct:YAML::convert
encode	Mod/AlienDeployment.cpp	/^		static Node encode(const OpenXcom::ReinforcementsData& rhs)$/;"	f	struct:YAML::convert
encode	Mod/ArticleDefinition.cpp	/^		static Node encode(const OpenXcom::ArticleDefinitionRect& rhs)$/;"	f	struct:YAML::convert
encode	Mod/MapBlock.cpp	/^		static Node encode(const OpenXcom::RandomizedItems& rhs)$/;"	f	struct:YAML::convert
encode	Mod/RuleAlienMission.cpp	/^		static Node encode(const OpenXcom::MissionWave& rhs)$/;"	f	struct:YAML::convert
encode	Mod/RuleEnviroEffects.cpp	/^		static Node encode(const OpenXcom::EnvironmentalCondition& rhs)$/;"	f	struct:YAML::convert
encode	Mod/RuleInventory.cpp	/^		static Node encode(const OpenXcom::RuleSlot& rhs)$/;"	f	struct:YAML::convert
encode	Mod/RuleRegion.h	/^		static Node encode(const OpenXcom::MissionArea& rhs)$/;"	f	struct:YAML::convert
encode	Mod/RuleRegion.h	/^		static Node encode(const OpenXcom::MissionZone& rhs)$/;"	f	struct:YAML::convert
encode	Mod/Texture.h	/^		static Node encode(const OpenXcom::TerrainCriteria& rhs)$/;"	f	struct:YAML::convert
encode	Mod/UfoTrajectory.cpp	/^		static Node encode(const OpenXcom::TrajectoryWaypoint& rhs)$/;"	f	struct:YAML::convert
encode	Mod/Unit.h	/^		static Node encode(const OpenXcom::UnitStats& rhs)$/;"	f	struct:YAML::convert
encode	Savegame/Craft.cpp	/^		static Node encode(const OpenXcom::VehicleDeploymentData& rhs)$/;"	f	struct:YAML::convert
encode	lodepng.cpp	/^unsigned encode(const std::string& filename,$/;"	f	namespace:lodepng
encode	lodepng.cpp	/^unsigned encode(std::vector<unsigned char>& out, const unsigned char* in, unsigned w, unsigned h,$/;"	f	namespace:lodepng
encode	lodepng.cpp	/^unsigned encode(std::vector<unsigned char>& out,$/;"	f	namespace:lodepng
encode	md5.cpp	/^void MD5::encode(uint1 output[], const uint4 input[], size_type len)$/;"	f	class:MD5
encodeLZ77	lodepng.cpp	/^static unsigned encodeLZ77(uivector* out, Hash* hash,$/;"	f	file:
encoder	lodepng.h	/^  LodePNGEncoderSettings encoder; \/*the encoding settings*\/$/;"	m	struct:LodePNGState
end	Engine/Collections.h	/^		It end()$/;"	f	class:OpenXcom::Collections::Range
endDogfight	Geoscape/DogfightState.cpp	/^void DogfightState::endDogfight()$/;"	f	class:OpenXcom::DogfightState
endHeading	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::endHeading()$/;"	f	class:OpenXcom::StatsForNerdsState
endLoad	Engine/Script.cpp	/^void ScriptGlobal::endLoad()$/;"	f	class:OpenXcom::ScriptGlobal
endTurn	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::endTurn()$/;"	f	class:OpenXcom::BattlescapeGame
endTurn	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::endTurn()$/;"	f	class:OpenXcom::SavedBattleGame
end_x	Engine/GraphSubset.h	/^	DataType beg_x, end_x;$/;"	m	struct:OpenXcom::AreaSubset
end_y	Engine/GraphSubset.h	/^	DataType beg_y, end_y;$/;"	m	struct:OpenXcom::AreaSubset
energy	Battlescape/PathfindingNode.h	/^	Sint16 energy = 0;$/;"	m	struct:OpenXcom::PathfindingCost
entry	Mod/MapScript.h	/^struct MCDReplacement {	int set, entry;};$/;"	m	struct:OpenXcom::MCDReplacement
equalColorTest	Engine/Scalers/xbrz.cpp	/^bool xbrz::equalColorTest(uint32_t col1, uint32_t col2, ColorFormat colFmt, double luminanceWeight, double equalColorTolerance)$/;"	f	class:xbrz
equalColorTolerance	Engine/Scalers/config.h	/^    double equalColorTolerance;$/;"	m	struct:xbrz::ScalerCfg
equalProduction	Savegame/SavedGame.cpp	/^equalProduction::equalProduction(RuleManufacture * item) : _item(item)$/;"	f	class:OpenXcom::__anon41::equalProduction
equalProduction	Savegame/SavedGame.cpp	/^struct equalProduction$/;"	s	namespace:OpenXcom::__anon41	file:
error	Menu/LoadGameState.cpp	/^void LoadGameState::error(const std::string &msg, SavedGame *save)$/;"	f	class:OpenXcom::LoadGameState
error	Menu/SaveGameState.cpp	/^void SaveGameState::error(const std::string &msg)$/;"	f	class:OpenXcom::SaveGameState
error	Menu/StartState.cpp	/^std::string StartState::error;$/;"	m	class:OpenXcom::StartState	file:
error	Menu/StartState.h	/^	static std::string error;$/;"	m	class:OpenXcom::StartState
error	lodepng.h	/^  unsigned error;$/;"	m	struct:LodePNGState
errorDlg	Engine/CrossPlatform.cpp	/^	std::string errorDlg;$/;"	m	namespace:OpenXcom::CrossPlatform	file:
escort	Mod/RuleAlienMission.h	/^	bool escort;$/;"	m	struct:OpenXcom::MissionWave
evacuateCrew	Savegame/Craft.cpp	/^void Craft::evacuateCrew(const Mod *mod)$/;"	f	class:OpenXcom::Craft
evaluateAIMode	Battlescape/AIModule.cpp	/^void AIModule::evaluateAIMode()$/;"	f	class:OpenXcom::AIModule
evc	Engine/Adlib/fmopl.h	/^	INT32 evc;		\/* envelope counter                    *\/$/;"	m	struct:fm_opl_slot
eve	Engine/Adlib/fmopl.h	/^	INT32 eve;		\/* envelope counter end point          *\/$/;"	m	struct:fm_opl_slot
eventLogic	Geoscape/GeoscapeEventState.cpp	/^void GeoscapeEventState::eventLogic()$/;"	f	class:OpenXcom::GeoscapeEventState
evm	Engine/Adlib/fmopl.h	/^	UINT8 evm;		\/* envelope phase                      *\/$/;"	m	struct:fm_opl_slot
evs	Engine/Adlib/fmopl.h	/^	INT32 evs;		\/* envelope counter step               *\/$/;"	m	struct:fm_opl_slot
evsa	Engine/Adlib/fmopl.h	/^	INT32 evsa;	\/* envelope step for AR :AR[ksr]           *\/$/;"	m	struct:fm_opl_slot
evsd	Engine/Adlib/fmopl.h	/^	INT32 evsd;	\/* envelope step for DR :DR[ksr]           *\/$/;"	m	struct:fm_opl_slot
evsr	Engine/Adlib/fmopl.h	/^	INT32 evsr;	\/* envelope step for RR :RR[ksr]           *\/$/;"	m	struct:fm_opl_slot
exceedsMaxWidth	Interface/TextEdit.cpp	/^bool TextEdit::exceedsMaxWidth(UCode c) const$/;"	f	class:OpenXcom::TextEdit
exceptionLogger	main.cpp	/^void exceptionLogger()$/;"	f
executeBase	Engine/Script.cpp	/^void ScriptWorkerBase::executeBase(const Uint8* proc)$/;"	f	class:OpenXcom::ScriptWorkerBase
executeBlit	Engine/Script.cpp	/^void ScriptWorkerBlit::executeBlit(const Surface* src, Surface* dest, int x, int y, int shade)$/;"	f	class:OpenXcom::ScriptWorkerBlit
executeBlit	Engine/Script.cpp	/^void ScriptWorkerBlit::executeBlit(const Surface* src, Surface* dest, int x, int y, int shade, GraphSubset mask)$/;"	f	class:OpenXcom::ScriptWorkerBlit
executionOdds	Mod/AlienDeployment.h	/^	int executionOdds = 100;$/;"	m	struct:OpenXcom::ReinforcementsData
exitClick	Battlescape/ScannerState.cpp	/^void ScannerState::exitClick(Action *)$/;"	f	class:OpenXcom::ScannerState
exitClick	Battlescape/UnitInfoState.cpp	/^void UnitInfoState::exitClick(Action *)$/;"	f	class:OpenXcom::UnitInfoState
exitState	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::exitState()$/;"	f	class:OpenXcom::ManufactureInfoState
expendLoadLastSave	Engine/Options.cpp	/^void expendLoadLastSave()$/;"	f	namespace:OpenXcom::Options
explode	Battlescape/ExplosionBState.cpp	/^void ExplosionBState::explode()$/;"	f	class:OpenXcom::ExplosionBState
explode	Battlescape/TileEngine.cpp	/^void TileEngine::explode(BattleActionAttack attack, Position center, int power, const RuleDamageType *type, int maxRadius, bool rangeAtack)$/;"	f	class:OpenXcom::TileEngine
explodePowerSources	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::explodePowerSources()$/;"	f	class:OpenXcom::BattlescapeGenerator
explosiveEfficacy	Battlescape/AIModule.cpp	/^int AIModule::explosiveEfficacy(Position targetPos, BattleUnit *attackingUnit, int radius, int diff, bool grenade) const$/;"	f	class:OpenXcom::AIModule
extendedFireModeChoice	Battlescape/AIModule.cpp	/^void AIModule::extendedFireModeChoice(BattleActionCost& costAuto, BattleActionCost& costSnap, BattleActionCost& costAimed, BattleActionCost& costThrow, bool checkLOF)$/;"	f	class:OpenXcom::AIModule
extraQty	Mod/AlienDeployment.h	/^	int lowQty, medQty, highQty, dQty, extraQty;$/;"	m	struct:OpenXcom::DeploymentData
extraRandomItems	Mod/AlienDeployment.h	/^	std::vector<ItemSet> itemSets, extraRandomItems;$/;"	m	struct:OpenXcom::DeploymentData
eyesOnTarget	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::eyesOnTarget(UnitFaction faction, BattleUnit* unit)$/;"	f	class:OpenXcom::SavedBattleGame
f	Engine/Functions.h	/^	FuncRef(FuncRef&& f) = default;$/;"	m	class:OpenXcom::FuncRef
f	Engine/Functions.h	/^	FuncRef(const FuncRef& f) = default;$/;"	m	class:OpenXcom::FuncRef
f	Engine/Scalers/xbrz.cpp	/^    \/**\/d,  e,  f,$/;"	m	struct:__anon10::Kernel_3x3	file:
f	Engine/Scalers/xbrz.cpp	/^    \/**\/e, f, g, h,$/;"	m	struct:__anon10::Kernel_4x4	file:
f	Engine/Scalers/xbrz.cpp	415;"	d	file:
f	Engine/Scalers/xbrz.cpp	476;"	d	file:
faceWindow	Battlescape/TileEngine.cpp	/^int TileEngine::faceWindow(Position position)$/;"	f	class:OpenXcom::TileEngine
facilityBuilt	Basescape/SelectStartFacilityState.cpp	/^void SelectStartFacilityState::facilityBuilt()$/;"	f	class:OpenXcom::SelectStartFacilityState
faction	Savegame/BattleUnitStatistics.h	/^	UnitFaction faction;$/;"	m	struct:OpenXcom::BattleUnitKills
fade	Battlescape/WarningMessage.cpp	/^void WarningMessage::fade()$/;"	f	class:OpenXcom::WarningMessage
fadeShade	Battlescape/Map.cpp	/^void Map::fadeShade()$/;"	f	class:OpenXcom::Map
fade_volume_if_need	Engine/Adlib/adlplayer.cpp	/^void fade_volume_if_need()$/;"	f
fc	Engine/Adlib/fmopl.h	/^	UINT32  fc;			\/* Freq. Increment base                *\/$/;"	m	struct:fm_opl_channel
feedback2	Engine/Adlib/fmopl.cpp	/^static INT32 feedback2;		\/* connect for SLOT 2 *\/$/;"	v	file:
fieldLoop	Mod/Unit.h	/^	static void fieldLoop(Func f)$/;"	f	struct:OpenXcom::UnitStats
fieldPromotions	Engine/Options.inc.h	/^	allowBuildingQueue, showFundsOnGeoscape, psiStrengthEval, allowPsiStrengthImprovement, fieldPromotions, meetingPoint;$/;"	v
fileExists	Engine/CrossPlatform.cpp	/^bool fileExists(const std::string &path)$/;"	f	namespace:OpenXcom::CrossPlatform
fileExists	Engine/FileMap.cpp	/^bool fileExists(const std::string &relativeFilePath) {$/;"	f	namespace:OpenXcom::FileMap
fileName	Engine/CatFile.h	/^	const std::string& fileName() const { return _filename; }$/;"	f	class:OpenXcom::CatFile
fileName	Savegame/SavedGame.h	/^	std::string fileName;$/;"	m	struct:OpenXcom::SaveInfo
fileNameToId	Engine/Language.cpp	/^static std::string fileNameToId(const std::string& fileName) {$/;"	f	namespace:OpenXcom
fillBlock	Engine/Scalers/xbrz.cpp	/^void fillBlock(uint32_t* trg, int pitch, uint32_t col, int blockWidth, int blockHeight)$/;"	f	namespace:__anon10
fillBlock	Engine/Scalers/xbrz.cpp	/^void fillBlock(uint32_t* trg, int pitch, uint32_t col, int n) { fillBlock(trg, pitch, col, n, n); }$/;"	f	namespace:__anon10
fillList	Menu/NewBattleState.cpp	/^void NewBattleState::fillList(NewBattleSelectType selectType, bool isRightClick)$/;"	f	class:OpenXcom::NewBattleState
fillMemorialList	Basescape/SoldierMemorialState.cpp	/^void SoldierMemorialState::fillMemorialList()$/;"	f	class:OpenXcom::SoldierMemorialState
fillProductionList	Basescape/GlobalManufactureState.cpp	/^void GlobalManufactureState::fillProductionList()$/;"	f	class:OpenXcom::GlobalManufactureState
fillProductionList	Basescape/ManufactureState.cpp	/^void ManufactureState::fillProductionList(size_t scrl)$/;"	f	class:OpenXcom::ManufactureState
fillProductionList	Basescape/NewManufactureListState.cpp	/^void NewManufactureListState::fillProductionList(bool refreshCategories)$/;"	f	class:OpenXcom::NewManufactureListState
fillProjectList	Basescape/GlobalResearchState.cpp	/^void GlobalResearchState::fillProjectList()$/;"	f	class:OpenXcom::GlobalResearchState
fillProjectList	Basescape/NewResearchListState.cpp	/^void NewResearchListState::fillProjectList(bool markAllAsSeen)$/;"	f	class:OpenXcom::NewResearchListState
fillProjectList	Basescape/ResearchState.cpp	/^void ResearchState::fillProjectList(size_t scrl)$/;"	f	class:OpenXcom::ResearchState
filter	Engine/Collections.h	/^	static Range<FilterIterator<It, Filter>> filter(Range<It> a, Filter f)$/;"	f	class:OpenXcom::Collections
filter	lodepng.cpp	/^static unsigned filter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h,$/;"	f	file:
filterFiles	Engine/FileMap.cpp	/^NameSet filterFiles(const NameSet                  &files, const std::string &ext) { return _filterFiles(files, ext); }$/;"	f	namespace:OpenXcom::FileMap
filterFiles	Engine/FileMap.cpp	/^NameSet filterFiles(const std::set<std::string>    &files, const std::string &ext) { return _filterFiles(files, ext); }$/;"	f	namespace:OpenXcom::FileMap
filterFiles	Engine/FileMap.cpp	/^NameSet filterFiles(const std::vector<std::string> &files, const std::string &ext) { return _filterFiles(files, ext); }$/;"	f	namespace:OpenXcom::FileMap
filterScanline	lodepng.cpp	/^static void filterScanline(unsigned char* out, const unsigned char* scanline, const unsigned char* prevline,$/;"	f	file:
filter_method	lodepng.h	/^  unsigned filter_method;     \/*filter method of the original file*\/$/;"	m	struct:LodePNGInfo
filter_palette_zero	lodepng.h	/^  unsigned filter_palette_zero;$/;"	m	struct:LodePNGEncoderSettings
filter_strategy	lodepng.h	/^  LodePNGFilterStrategy filter_strategy;$/;"	m	struct:LodePNGEncoderSettings
finalAction	Battlescape/BattlescapeGame.h	/^	bool finalAction;$/;"	m	struct:OpenXcom::BattleAction
finalFacing	Battlescape/BattlescapeGame.h	/^	int finalFacing;$/;"	m	struct:OpenXcom::BattleAction
finalLabel	Engine/ScriptBind.h	/^		ScriptRefData finalLabel = { };$/;"	m	struct:OpenXcom::ParserWriter::Block
finalize	md5.cpp	/^MD5& MD5::finalize()$/;"	f	class:MD5
finalized	md5.h	/^  bool finalized;$/;"	m	class:MD5
findAlienMission	Savegame/SavedGame.cpp	/^AlienMission *SavedGame::findAlienMission(const std::string &region, MissionObjective objective, AlienRace* race) const$/;"	f	class:OpenXcom::SavedGame
findConfigFolder	Engine/CrossPlatform.cpp	/^std::string findConfigFolder()$/;"	f	namespace:OpenXcom::CrossPlatform
findDataFolders	Engine/CrossPlatform.cpp	/^std::vector<std::string> findDataFolders()$/;"	f	namespace:OpenXcom::CrossPlatform
findFirePoint	Battlescape/AIModule.cpp	/^bool AIModule::findFirePoint()$/;"	f	class:OpenXcom::AIModule
findItem	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::findItem(BattleAction *action, bool pickUpWeaponsMoreActively, bool& walkToItem)$/;"	f	class:OpenXcom::BattlescapeGame
findReachable	Battlescape/Pathfinding.cpp	/^std::vector<int> Pathfinding::findReachable(const BattleUnit *unit, const BattleActionCost &cost)$/;"	f	class:OpenXcom::Pathfinding
findRuleResearch	Savegame/SavedGame.cpp	/^findRuleResearch::findRuleResearch(RuleResearch * toFind) : _toFind(toFind)$/;"	f	class:OpenXcom::__anon41::findRuleResearch
findRuleResearch	Savegame/SavedGame.cpp	/^struct findRuleResearch$/;"	s	namespace:OpenXcom::__anon41	file:
findSortHelper	Engine/Script.cpp	/^R* findSortHelper(R* begin, R* end, ScriptRef prefix, ScriptRef postfix = {})$/;"	f	namespace:OpenXcom::__anon8
findSortHelper	Engine/Script.cpp	/^R* findSortHelper(std::vector<R>& vec, ScriptRef prefix, ScriptRef postfix = {})$/;"	f	namespace:OpenXcom::__anon8
findSortHelper	Engine/Script.cpp	/^const R* findSortHelper(const std::vector<R>& vec, ScriptRef prefix, ScriptRef postfix = {})$/;"	f	namespace:OpenXcom::__anon8
findUserFolders	Engine/CrossPlatform.cpp	/^std::vector<std::string> findUserFolders()$/;"	f	namespace:OpenXcom::CrossPlatform
findWithFallback	Mod/Armor.cpp	/^int findWithFallback(const std::vector<int> &vec, size_t pos)$/;"	f	namespace:OpenXcom::__anon16
findex	Engine/FileMap.h	/^		size_t findex;       	\/\/ file index in the zipfile.$/;"	m	struct:OpenXcom::FileMap::FileRecord
finishBattle	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::finishBattle(bool abort, int inExitArea)$/;"	f	class:OpenXcom::BattlescapeState
finishLoading	Savegame/Base.cpp	/^void Base::finishLoading(const YAML::Node &node, SavedGame *save)$/;"	f	class:OpenXcom::Base
finishLoading	Savegame/Craft.cpp	/^void Craft::finishLoading(const YAML::Node &node, SavedGame *save)$/;"	f	class:OpenXcom::Craft
finishLoading	Savegame/Ufo.cpp	/^void Ufo::finishLoading(const YAML::Node &node, SavedGame &save)$/;"	f	class:OpenXcom::Ufo
fire	Savegame/CraftWeapon.cpp	/^CraftWeaponProjectile* CraftWeapon::fire() const$/;"	f	class:OpenXcom::CraftWeapon
fireLightPower	Battlescape/TileEngine.cpp	/^const int fireLightPower = 15;$/;"	m	namespace:OpenXcom	file:
fireWeapon	Geoscape/DogfightState.cpp	/^void DogfightState::fireWeapon(int i)$/;"	f	class:OpenXcom::DogfightState
firing	Mod/Unit.h	/^	Type tu, stamina, health, bravery, reactions, firing, throwing, strength, psiStrength, psiSkill, melee, mana;$/;"	m	struct:OpenXcom::UnitStats
first	Engine/Collections.h	/^		ItA first;$/;"	m	struct:OpenXcom::Collections::ZipIterator
firstIndexToCheck	Menu/TestState.h	/^	int firstIndexToCheck;$/;"	m	struct:OpenXcom::PaletteTestMetadata
firstTurn	Mod/RuleEnviroEffects.h	/^	int firstTurn, lastTurn;$/;"	m	struct:OpenXcom::EnvironmentalCondition
first_argument_type	Basescape/SoldierArmorState.cpp	/^	typedef ArmorItem& first_argument_type;$/;"	t	struct:OpenXcom::compareArmorName	file:
first_argument_type	Basescape/SoldierSortUtil.h	/^	typedef Soldier* first_argument_type;$/;"	t	struct:OpenXcom::SortFunctor
first_argument_type	Basescape/StoresState.cpp	/^	typedef StoredItem& first_argument_type;$/;"	t	struct:OpenXcom::compareItemName	file:
first_argument_type	Basescape/StoresState.cpp	/^	typedef StoredItem& first_argument_type;$/;"	t	struct:OpenXcom::compareItemQuantity	file:
first_argument_type	Basescape/StoresState.cpp	/^	typedef StoredItem& first_argument_type;$/;"	t	struct:OpenXcom::compareItemSize	file:
first_argument_type	Basescape/StoresState.cpp	/^	typedef StoredItem& first_argument_type;$/;"	t	struct:OpenXcom::compareItemSpaceUsed	file:
first_argument_type	Menu/ListGamesState.cpp	/^	typedef SaveInfo& first_argument_type;$/;"	t	struct:OpenXcom::compareSaveName	file:
first_argument_type	Menu/ListGamesState.cpp	/^	typedef SaveInfo& first_argument_type;$/;"	t	struct:OpenXcom::compareSaveTimestamp	file:
first_argument_type	Mod/Mod.cpp	/^	typedef const std::string& first_argument_type;$/;"	t	struct:OpenXcom::compareRule	file:
first_argument_type	Mod/Mod.cpp	/^	typedef const std::string& first_argument_type;$/;"	t	struct:OpenXcom::compareSection	file:
fitItem	Battlescape/Inventory.cpp	/^bool Inventory::fitItem(RuleInventory *newSlot, BattleItem *item, std::string &warning)$/;"	f	class:OpenXcom::Inventory
fitItemInSlot	Mod/RuleInventory.cpp	/^bool RuleInventory::fitItemInSlot(const RuleItem *item, int x, int y) const$/;"	f	class:OpenXcom::RuleInventory
fitItemToInventory	Savegame/BattleUnit.cpp	/^bool BattleUnit::fitItemToInventory(RuleInventory *slot, BattleItem *item)$/;"	f	class:OpenXcom::BattleUnit
flashLongMessageVariadicScriptImpl	Savegame/SavedBattleGame.cpp	/^void flashLongMessageVariadicScriptImpl(SavedBattleGame* sbg, ScriptText message, Args... args)$/;"	f	namespace:OpenXcom::__anon33
flashMessageVariadicScriptImpl	Savegame/SavedBattleGame.cpp	/^void flashMessageVariadicScriptImpl(SavedBattleGame* sbg, ScriptText message, Args... args)$/;"	f	namespace:OpenXcom::__anon33
flashWindow	Engine/CrossPlatform.cpp	/^void flashWindow()$/;"	f	namespace:OpenXcom::CrossPlatform
flat	Mod/RuleItem.h	/^	RuleItemUseCost flat;$/;"	m	struct:OpenXcom::RuleItemAction
fliBRun	Engine/FlcPlayer.cpp	/^void FlcPlayer::fliBRun()$/;"	f	class:OpenXcom::FlcPlayer
fliCopy	Engine/FlcPlayer.cpp	/^void FlcPlayer::fliCopy()$/;"	f	class:OpenXcom::FlcPlayer
fliLC	Engine/FlcPlayer.cpp	/^void FlcPlayer::fliLC()$/;"	f	class:OpenXcom::FlcPlayer
fliSS2	Engine/FlcPlayer.cpp	/^void FlcPlayer::fliSS2()$/;"	f	class:OpenXcom::FlcPlayer
flip	Engine/Screen.cpp	/^void Screen::flip()$/;"	f	class:OpenXcom::Screen
flipWithZoom	Engine/Zoom.cpp	/^void Zoom::flipWithZoom(SDL_Surface *src, SDL_Surface *dst, int topBlackBand, int bottomBlackBand, int leftBlackBand, int rightBlackBand, OpenGL *glOut)$/;"	f	class:OpenXcom::Zoom
flog2	lodepng.cpp	/^static float flog2(float f)$/;"	f	file:
fm_opl_channel	Engine/Adlib/fmopl.h	/^typedef struct fm_opl_channel {$/;"	s
fm_opl_f	Engine/Adlib/fmopl.h	/^typedef struct fm_opl_f {$/;"	s
fm_opl_slot	Engine/Adlib/fmopl.h	/^typedef struct fm_opl_slot {$/;"	s
folderExists	Engine/CrossPlatform.cpp	/^bool folderExists(const std::string &path)$/;"	f	namespace:OpenXcom::CrossPlatform
followProjectiles	Mod/RuleItem.h	/^	bool followProjectiles = true;$/;"	m	struct:OpenXcom::RuleItemAction
forEachPosition	Engine/ScriptBind.h	/^		void forEachPosition(Func&& f)$/;"	f	class:OpenXcom::ParserWriter::ReservedCrossRefrenece
forceFire	Engine/Options.inc.h	/^	strafe, forceFire, showMoreStatsInInventoryView, allowPsionicCapture, skipNextTurnScreen, disableAutoEquip, battleDragScrollInvert,$/;"	v
forceShowInMonthlyCosts	Mod/RuleCraft.cpp	/^bool RuleCraft::forceShowInMonthlyCosts() const$/;"	f	class:OpenXcom::RuleCraft
forceSpawnNearFriend	Mod/AlienDeployment.h	/^	bool forceSpawnNearFriend = true;$/;"	m	struct:OpenXcom::ReinforcementsData
force_palette	lodepng.h	/^  unsigned force_palette;$/;"	m	struct:LodePNGEncoderSettings
formatFunding	Engine/Unicode.cpp	/^std::string formatFunding(int64_t funds)$/;"	f	namespace:OpenXcom::Unicode
formatNumber	Engine/Unicode.cpp	/^std::string formatNumber(int64_t value, const std::string &currency)$/;"	f	namespace:OpenXcom::Unicode
formatPercentage	Engine/Unicode.cpp	/^std::string formatPercentage(int value)$/;"	f	namespace:OpenXcom::Unicode
formatStat	Basescape/SoldierTransformationState.cpp	/^std::string SoldierTransformationState::formatStat(int stat, bool plus, bool hide)$/;"	f	class:OpenXcom::SoldierTransformationState
formatTime	Basescape/CraftInfoState.cpp	/^std::string CraftInfoState::formatTime(int total)$/;"	f	class:OpenXcom::CraftInfoState
fpsCounter	Engine/Options.inc.h	/^	autosave, allowResize, borderless, debug, debugUi, fpsCounter, newSeedOnLoad, keepAspectRatio, nonSquarePixelRatio,$/;"	v
frameNumber	Menu/VideoState.cpp	/^	int frameNumber;$/;"	m	struct:OpenXcom::__anon12	file:
freeNode	Savegame/Node.cpp	/^void Node::freeNode()$/;"	f	class:OpenXcom::Node
freePatrolTarget	Battlescape/AIModule.cpp	/^void AIModule::freePatrolTarget()$/;"	f	class:OpenXcom::AIModule
freePatrolTarget	Savegame/BattleUnit.cpp	/^void BattleUnit::freePatrolTarget()$/;"	f	class:OpenXcom::BattleUnit
free_channel_available	Engine/Adlib/adlplayer.cpp	/^bool free_channel_available()$/;"	f
freelist	lodepng.cpp	/^  BPMNode** freelist;$/;"	m	struct:BPMLists	file:
freqbase	Engine/Adlib/fmopl.h	/^	double freqbase;	\/* frequency base                    *\/$/;"	m	struct:fm_opl_f
fuelMax	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
fuelPowerSources	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::fuelPowerSources()$/;"	f	class:OpenXcom::BattlescapeGenerator
fullpath	Engine/FileMap.cpp	/^	std::string fullpath;				\/\/ the origin$/;"	m	struct:OpenXcom::FileMap::VFSLayer	file:
fullpath	Engine/FileMap.h	/^		std::string fullpath; 	\/\/ includes zip file name if any$/;"	m	struct:OpenXcom::FileMap::FileRecord
fullscreen	Engine/Options.inc.h	/^OPT bool fullscreen, asyncBlit, playIntro, useScaleFilter, useHQXFilter, useXBRZFilter, useOpenGL, checkOpenGLErrors, vSyncForOpenGL, useOpenGLSmoothing,$/;"	v
func	Engine/Script.cpp	/^	static RetEnum func (ProgPos& Prog, std::nullptr_t, std::nullptr_t, ProgPos LabelTrue, ProgPos)$/;"	f	struct:OpenXcom::__anon7::Func_test_eq_null
func	Engine/Script.cpp	/^	static RetEnum func (ProgPos& prog, ScriptText a, ScriptText b, ProgPos labelTrue, ProgPos labelFalse)$/;"	f	struct:OpenXcom::__anon7::Func_test_eq_text
func	Engine/Script.cpp	/^	static RetEnum func (ScriptWorkerBase& c, ProgPos& p)$/;"	f	struct:OpenXcom::__anon7::Func_debug_flush
func	Engine/Script.cpp	/^	static RetEnum func (ScriptWorkerBase& c, ScriptText p)$/;"	f	struct:OpenXcom::__anon7::Func_debug_impl_text
func	Engine/Script.cpp	/^	static RetEnum func (ScriptWorkerBase& c, ScriptText& a)$/;"	f	struct:OpenXcom::__anon7::Func_clear_text
func	Engine/Script.cpp	/^	static RetEnum func (ScriptWorkerBase& c, ScriptText& a, ScriptText b)$/;"	f	struct:OpenXcom::__anon7::Func_set_text
func	Engine/Script.cpp	/^	static RetEnum func (ScriptWorkerBase& c, int i)$/;"	f	struct:OpenXcom::__anon7::Func_debug_impl_int
func	Engine/ScriptBind.h	/^		static RetEnum func(ScriptWorkerBase &, const Uint8 *, ProgPos &)$/;"	f	struct:OpenXcom::helper::SumListIndexImpl::End
func	Engine/ScriptBind.h	/^	static RetEnum func(Args... a)$/;"	f	struct:OpenXcom::helper::BindFuncImpl
func	Engine/ScriptBind.h	/^	static RetEnum func(ProgPos& Prog, T t1, T t2, ProgPos LabelTrue, ProgPos LabelFalse)$/;"	f	struct:OpenXcom::helper::BindEq
func	Engine/ScriptBind.h	/^	static RetEnum func(ScriptWorkerBase& sw, const Uint8* procArgs, ProgPos& curr)$/;"	f	struct:OpenXcom::helper::FuncVer
func	Engine/ScriptBind.h	/^	static RetEnum func(ScriptWorkerBase& swb, const T* t)$/;"	f	struct:OpenXcom::helper::BindDebugDisplay
func	Engine/ScriptBind.h	/^	static RetEnum func(T& t)$/;"	f	struct:OpenXcom::helper::BindClear
func	Engine/ScriptBind.h	/^	static RetEnum func(T& t, T r)$/;"	f	struct:OpenXcom::helper::BindSet
func	Engine/ScriptBind.h	/^	static RetEnum func(T& t, T& r)$/;"	f	struct:OpenXcom::helper::BindSwap
func	Engine/ScriptBind.h	/^	static RetEnum func(T* t, Args... a)$/;"	f	struct:OpenXcom::helper::BindFuncImpl
func	Engine/ScriptBind.h	/^	static RetEnum func(T* t, BindMemberFinalType<T, X...> p)$/;"	f	struct:OpenXcom::helper::BindPropSet
func	Engine/ScriptBind.h	/^	static RetEnum func(T* t, P& p)$/;"	f	struct:OpenXcom::helper::BindValue
func	Engine/ScriptBind.h	/^	static RetEnum func(T* t, P*& r, Args... a)$/;"	f	struct:OpenXcom::helper::BindFuncImpl
func	Engine/ScriptBind.h	/^	static RetEnum func(T* t, R& r, Args... a)$/;"	f	struct:OpenXcom::helper::BindFuncImpl
func	Engine/ScriptBind.h	/^	static RetEnum func(T* t, int& r, Args... a)$/;"	f	struct:OpenXcom::helper::BindFuncImpl
func	Engine/ScriptBind.h	/^	static RetEnum func(T* t, typename BindMemberFinalType<T, X...>::Tag st, int p)$/;"	f	struct:OpenXcom::helper::BindPropCustomSet
func	Engine/ScriptBind.h	/^	static RetEnum func(const T* t, BindMemberFinalType<T, X...>& p)$/;"	f	struct:OpenXcom::helper::BindPropGet
func	Engine/ScriptBind.h	/^	static RetEnum func(const T* t, R& r, Args... a)$/;"	f	struct:OpenXcom::helper::BindFuncImpl
func	Engine/ScriptBind.h	/^	static RetEnum func(const T* t, const P*& r, Args... a)$/;"	f	struct:OpenXcom::helper::BindFuncImpl
func	Engine/ScriptBind.h	/^	static RetEnum func(const T* t, int& p, typename BindMemberFinalType<T, X...>::Tag st)$/;"	f	struct:OpenXcom::helper::BindPropCustomGet
func	Engine/ScriptBind.h	/^	static RetEnum func(const T* t, int& r, Args... a)$/;"	f	struct:OpenXcom::helper::BindFuncImpl
func	Engine/ShaderDraw.h	/^	static inline void func(Uint8& dest, const Uint8& src, const int& burn, const int& shade)$/;"	f	struct:OpenXcom::helper::BurnShade
func	Engine/ShaderDraw.h	/^	static inline void func(Uint8& dest, const Uint8& src, const int& shade)$/;"	f	struct:OpenXcom::helper::StandardShade
func	Engine/ShaderDraw.h	/^	static inline void func(Uint8& dest, const Uint8& src, const int& shade, const int& newColor)$/;"	f	struct:OpenXcom::helper::ColorReplace
func	Geoscape/Globe.cpp	/^	static inline void func(Uint8& dest, const Cord& earth, const Cord& sun, const Sint16& noise)$/;"	f	struct:OpenXcom::__anon49::CreateShadow
func	Geoscape/Globe.cpp	/^	static inline void func(Uint8& dest, const int&, const int&, const int&, const int&)$/;"	f	struct:OpenXcom::__anon49::Ocean
func	Interface/Text.cpp	/^	static inline void func(Uint8& dest, const Uint8& src, int off, int mul, int mid)$/;"	f	struct:OpenXcom::__anon47::PaletteShift
func	Mod/Mod.cpp	/^		static inline void func(Uint8& src)$/;"	f	struct:OpenXcom::__anon29::BodyXCOM2
func	Mod/Mod.cpp	/^		static inline void func(Uint8& src)$/;"	f	struct:OpenXcom::__anon29::FaceXCOM2
func	Mod/Mod.cpp	/^		static inline void func(Uint8& src)$/;"	f	struct:OpenXcom::__anon29::FallXCOM2
func	Mod/Mod.cpp	/^		static inline void func(Uint8& src)$/;"	f	struct:OpenXcom::__anon29::HairXCOM2
func	Mod/Mod.cpp	/^		static inline void func(Uint8& src, const Uint8& cutoff)$/;"	f	struct:OpenXcom::__anon29::HairXCOM1
func	Mod/RuleStatBonus.cpp	/^	BonusStatDataFunc func;$/;"	m	struct:OpenXcom::__anon24::BonusStatData	file:
func	Mod/RuleStatBonus.cpp	/^	static RetEnum func(const BattleUnit *bu, int &ret, int pow1, int pow2, int pow3, int pow4)$/;"	f	struct:OpenXcom::__anon24::getBonusStatsScript
func	Savegame/BattleItem.cpp	/^	static RetEnum func(BattleItem *weapon, BattleItem *&ammo)$/;"	f	struct:OpenXcom::__anon39::getAmmoItemScript
func	Savegame/BattleItem.cpp	/^	static RetEnum func(BattleItem *weapon, BattleItem *&ammo, int action)$/;"	f	struct:OpenXcom::__anon39::getAmmoForActionScript
func	Savegame/BattleItem.cpp	/^	static RetEnum func(BattleItem *weapon, BattleItem *&ammo, int slot)$/;"	f	struct:OpenXcom::__anon39::getAmmoForSlotScript
func	Savegame/BattleItem.cpp	/^	static RetEnum func(const BattleItem *weapon, const BattleItem *&ammo)$/;"	f	struct:OpenXcom::__anon39::getAmmoItemConstScript
func	Savegame/BattleItem.cpp	/^	static RetEnum func(const BattleItem *weapon, const BattleItem *&ammo, int action)$/;"	f	struct:OpenXcom::__anon39::getAmmoForActionConstScript
func	Savegame/BattleItem.cpp	/^	static RetEnum func(const BattleItem *weapon, const BattleItem *&ammo, int slot)$/;"	f	struct:OpenXcom::__anon39::getAmmoForSlotConstScript
func	Savegame/BattleItem.cpp	/^	static RetEnum func(const BattleItem *weapon, const RuleInventory *&inv)$/;"	f	struct:OpenXcom::__anon39::getRuleInventorySlotScript
func	Savegame/BattleItem.cpp	/^	static RetEnum func(const BattleItem *weapon, int& cost, const RuleInventory *inv)$/;"	f	struct:OpenXcom::__anon39::getRuleInventoryMoveToCostScript
func	Savegame/BattleUnit.cpp	/^	static RetEnum func(BattleUnit *bu, BattleItem *&bi)$/;"	f	struct:OpenXcom::__anon36::getLeftHandWeaponScript
func	Savegame/BattleUnit.cpp	/^	static RetEnum func(BattleUnit *bu, BattleItem *&bi)$/;"	f	struct:OpenXcom::__anon36::getRightHandWeaponScript
func	Savegame/BattleUnit.cpp	/^	static RetEnum func(BattleUnit *bu, Soldier* &ret)$/;"	f	struct:OpenXcom::__anon36::getGeoscapeSoldierScript
func	Savegame/BattleUnit.cpp	/^	static RetEnum func(const BattleUnit *bu, const BattleItem *&bi)$/;"	f	struct:OpenXcom::__anon36::getLeftHandWeaponConstScript
func	Savegame/BattleUnit.cpp	/^	static RetEnum func(const BattleUnit *bu, const BattleItem *&bi)$/;"	f	struct:OpenXcom::__anon36::getRightHandWeaponConstScript
func	Savegame/BattleUnit.cpp	/^	static RetEnum func(const BattleUnit *bu, const RuleSoldier* &ret)$/;"	f	struct:OpenXcom::__anon36::getRuleSoldierScript
func	Savegame/BattleUnit.cpp	/^	static RetEnum func(const BattleUnit *bu, const Soldier* &ret)$/;"	f	struct:OpenXcom::__anon36::getGeoscapeSoldierConstScript
func	Savegame/BattleUnit.cpp	/^	static RetEnum func(const BattleUnit *bu, int &ret)$/;"	f	struct:OpenXcom::__anon36::reduceByBraveryScript
func	Savegame/BattleUnit.cpp	/^	static RetEnum func(const BattleUnit *bu, int &ret, int resistType)$/;"	f	struct:OpenXcom::__anon36::reduceByResistanceScript
func	Savegame/BattleUnit.cpp	/^	static RetEnum func(int &curr, int burn, int shade)$/;"	f	struct:OpenXcom::__anon36::burnShadeScript
func	Savegame/Soldier.cpp	/^	static RetEnum func(const Soldier *so, const RuleSoldier* &ret)$/;"	f	struct:OpenXcom::__anon35::getRuleSoldierScript
func_fade	Engine/Adlib/adlplayer.cpp	/^void func_fade()$/;"	f
func_get_polyphony	Engine/Adlib/adlplayer.cpp	/^int func_get_polyphony()$/;"	f
func_is_music_playing	Engine/Adlib/adlplayer.cpp	/^bool func_is_music_playing()$/;"	f
func_load_music_state	Engine/Adlib/adlplayer.cpp	/^void func_load_music_state(int i)$/;"	f
func_mute	Engine/Adlib/adlplayer.cpp	/^void func_mute()$/;"	f
func_play_tick	Engine/Adlib/adlplayer.cpp	/^void func_play_tick()$/;"	f
func_save_music_state	Engine/Adlib/adlplayer.cpp	/^void func_save_music_state(int i)$/;"	f
func_set_music_tempo	Engine/Adlib/adlplayer.cpp	/^void func_set_music_tempo(int value)$/;"	f
func_set_music_volume	Engine/Adlib/adlplayer.cpp	/^void func_set_music_volume(int value)$/;"	f
func_setup_music	Engine/Adlib/adlplayer.cpp	/^void func_setup_music(unsigned char* music_ptr, int length)$/;"	f
functionInvisible	Engine/ScriptBind.h	/^	constexpr static const char* functionInvisible = "";$/;"	m	struct:OpenXcom::BindBase
functionWithoutDescription	Engine/ScriptBind.h	/^	constexpr static const char* functionWithoutDescription = "-";$/;"	m	struct:OpenXcom::BindBase
fuseEndTurnUpdate	Savegame/BattleItem.cpp	/^void BattleItem::fuseEndTurnUpdate()$/;"	f	class:OpenXcom::BattleItem
fuseProximityEvent	Savegame/BattleItem.cpp	/^bool BattleItem::fuseProximityEvent()$/;"	f	class:OpenXcom::BattleItem
fuseThrowEvent	Savegame/BattleItem.cpp	/^bool BattleItem::fuseThrowEvent()$/;"	f	class:OpenXcom::BattleItem
fuseTimeEvent	Savegame/BattleItem.cpp	/^bool BattleItem::fuseTimeEvent()$/;"	f	class:OpenXcom::BattleItem
g	Engine/Scalers/xbrz.cpp	/^    \/**\/e, f, g, h,$/;"	m	struct:__anon10::Kernel_4x4	file:
g	Engine/Scalers/xbrz.cpp	/^    \/**\/g,  h,  i;$/;"	m	struct:__anon10::Kernel_3x3	file:
g	Engine/Scalers/xbrz.cpp	416;"	d	file:
g	Engine/Scalers/xbrz.cpp	477;"	d	file:
g	Engine/ShaderDrawHelper.h	/^	inline void mod_range(GraphSubset& g) = delete;$/;"	m	struct:OpenXcom::helper::controler
g	Engine/ShaderDrawHelper.h	/^	inline void set_range(const GraphSubset& g) = delete;$/;"	m	struct:OpenXcom::helper::controler
game	main.cpp	/^Game *game = 0;$/;"	v
gameSlowSpeed	Engine/Timer.h	/^	static Uint32 gameSlowSpeed;$/;"	m	class:OpenXcom::Timer
genCallsign	Mod/SoldierNamePool.cpp	/^std::string SoldierNamePool::genCallsign(const SoldierGender gender) const$/;"	f	class:OpenXcom::SoldierNamePool
genLook	Mod/SoldierNamePool.cpp	/^size_t SoldierNamePool::genLook(size_t numLooks)$/;"	f	class:OpenXcom::SoldierNamePool
genName	Mod/SoldierNamePool.cpp	/^std::string SoldierNamePool::genName(SoldierGender *gender, int femaleFrequency) const$/;"	f	class:OpenXcom::SoldierNamePool
genName	Savegame/Soldier.cpp	/^void Soldier::genName()$/;"	f	class:OpenXcom::Soldier
genSoldier	Mod/Mod.cpp	/^Soldier *Mod::genSoldier(SavedGame *save, RuleSoldier* ruleSoldier, int nationality) const$/;"	f	class:OpenXcom::Mod
generate	Engine/RNG.cpp	/^double generate(double min, double max)$/;"	f	namespace:OpenXcom::RNG
generate	Engine/RNG.cpp	/^int RandomState::generate(int min, int max)$/;"	f	class:OpenXcom::RNG::RandomState
generate	Engine/RNG.cpp	/^int generate(int min, int max)$/;"	f	namespace:OpenXcom::RNG
generate	Mod/RuleEventScript.cpp	/^std::string RuleEventScript::generate(const size_t monthsPassed) const$/;"	f	class:OpenXcom::RuleEventScript
generate	Mod/RuleMissionScript.cpp	/^std::string RuleMissionScript::generate(const size_t monthsPassed, const GenerationType type) const$/;"	f	class:OpenXcom::RuleMissionScript
generateAlienBaseUpgrade	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::generateAlienBaseUpgrade(const size_t baseAgeInMonths) const$/;"	f	class:OpenXcom::AlienDeployment
generateBaseMap	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::generateBaseMap()$/;"	f	class:OpenXcom::BattlescapeGenerator
generateCallsign	Savegame/Soldier.cpp	/^std::string Soldier::generateCallsign(const std::vector<SoldierNamePool*> &names)$/;"	f	class:OpenXcom::Soldier
generateFixedDistanceTree	lodepng.cpp	/^static unsigned generateFixedDistanceTree(HuffmanTree* tree)$/;"	f	file:
generateFixedLitLenTree	lodepng.cpp	/^static unsigned generateFixedLitLenTree(HuffmanTree* tree)$/;"	f	file:
generateFunding	Mod/RuleCountry.cpp	/^int RuleCountry::generateFunding() const$/;"	f	class:OpenXcom::RuleCountry
generateHuntMission	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::generateHuntMission(const size_t monthsPassed) const$/;"	f	class:OpenXcom::AlienDeployment
generateMap	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::generateMap(const std::vector<MapScript*> *script, const std::string &customUfoName, const RuleStartingCondition* startingCondition)$/;"	f	class:OpenXcom::BattlescapeGenerator
generateRace	Mod/RuleAlienMission.cpp	/^std::string RuleAlienMission::generateRace(const size_t monthsPassed) const$/;"	f	class:OpenXcom::RuleAlienMission
generateRegion	Mod/RuleAlienMission.cpp	/^std::string RuleAlienMission::generateRegion(const size_t monthsPassed) const$/;"	f	class:OpenXcom::RuleAlienMission
geoClockSpeed	Engine/Options.inc.h	/^OPT int geoClockSpeed, dogfightSpeed, geoScrollSpeed, geoDragScrollButton, geoscapeScale;$/;"	v
geoDragScrollButton	Engine/Options.inc.h	/^OPT int geoClockSpeed, dogfightSpeed, geoScrollSpeed, geoDragScrollButton, geoscapeScale;$/;"	v
geoDragScrollInvert	Engine/Options.inc.h	/^	storageLimitsEnforced, canSellLiveAliens, canTransferCraftsWhileAirborne, customInitialBase, aggressiveRetaliation, geoDragScrollInvert,$/;"	v
geoScrollSpeed	Engine/Options.inc.h	/^OPT int geoClockSpeed, dogfightSpeed, geoScrollSpeed, geoDragScrollButton, geoscapeScale;$/;"	v
geoscapeScale	Engine/Options.inc.h	/^OPT int geoClockSpeed, dogfightSpeed, geoScrollSpeed, geoDragScrollButton, geoscapeScale;$/;"	v
get	Engine/Logger.h	/^	std::ostringstream& get(SeverityLevel level = LOG_INFO) { _level = level; return os; };$/;"	f	class:OpenXcom::Logger
get	Engine/ScriptBind.h	/^	static ReturnType get(ScriptWorkerBase& sw, const Uint8* arg, ProgPos& curr)$/;"	f	struct:OpenXcom::helper::ArgContextDef
get	Engine/ScriptBind.h	/^	static ReturnType get(ScriptWorkerBase& sw, const Uint8* arg, ProgPos& curr)$/;"	f	struct:OpenXcom::helper::ArgFuncDef
get	Engine/ScriptBind.h	/^	static ReturnType get(ScriptWorkerBase& sw, const Uint8* arg, ProgPos& curr)$/;"	f	struct:OpenXcom::helper::ArgLabelDef
get	Engine/ScriptBind.h	/^	static ReturnType get(ScriptWorkerBase& sw, const Uint8* arg, ProgPos& curr)$/;"	f	struct:OpenXcom::helper::ArgNullDef
get	Engine/ScriptBind.h	/^	static ReturnType get(ScriptWorkerBase& sw, const Uint8* arg, ProgPos& curr)$/;"	f	struct:OpenXcom::helper::ArgProgDef
get	Engine/ScriptBind.h	/^	static ReturnType get(ScriptWorkerBase& sw, const Uint8* arg, ProgPos& curr)$/;"	f	struct:OpenXcom::helper::ArgRawDef
get	Engine/ScriptBind.h	/^	static ReturnType get(ScriptWorkerBase& sw, const Uint8* arg, ProgPos& curr)$/;"	f	struct:OpenXcom::helper::ArgRegDef
get	Engine/ScriptBind.h	/^	static ReturnType get(ScriptWorkerBase& sw, const Uint8* arg, ProgPos& curr)$/;"	f	struct:OpenXcom::helper::ArgTextDef
get	Engine/ScriptBind.h	/^	static ReturnType get(ScriptWorkerBase& sw, const Uint8* arg, ProgPos& curr)$/;"	f	struct:OpenXcom::helper::ArgValueDef
get	Engine/ScriptBind.h	/^	static typename GetTypeAt<CurrPos>::ReturnType get(ScriptWorkerBase& sw, const Uint8* procArgs, ProgPos& curr)$/;"	f	struct:OpenXcom::helper::FuncVer
getAIDestroyBaseFacilities	Mod/Mod.h	/^	bool getAIDestroyBaseFacilities() const { return _aiDestroyBaseFacilities; }$/;"	f	class:OpenXcom::Mod
getAIExtendedFireModeChoice	Mod/Mod.h	/^	bool getAIExtendedFireModeChoice() const {return _aiExtendedFireModeChoice;}$/;"	f	class:OpenXcom::Mod
getAIFireChoiceAggroCoeff	Mod/Mod.h	/^	int getAIFireChoiceAggroCoeff() const {return _aiFireChoiceAggroCoeff;}$/;"	f	class:OpenXcom::Mod
getAIFireChoiceIntelCoeff	Mod/Mod.h	/^	int getAIFireChoiceIntelCoeff() const {return _aiFireChoiceIntelCoeff;}$/;"	f	class:OpenXcom::Mod
getAIMeleeHitCount	Mod/RuleItem.cpp	/^int RuleItem::getAIMeleeHitCount() const$/;"	f	class:OpenXcom::RuleItem
getAIModule	Savegame/BattleUnit.cpp	/^AIModule *BattleUnit::getAIModule() const$/;"	f	class:OpenXcom::BattleUnit
getAIPickUpWeaponsMoreActively	Mod/Mod.h	/^	bool getAIPickUpWeaponsMoreActively() const { return _aiPickUpWeaponsMoreActively; }$/;"	f	class:OpenXcom::Mod
getAIPickUpWeaponsMoreActivelyCiv	Mod/Mod.h	/^	bool getAIPickUpWeaponsMoreActivelyCiv() const { return _aiPickUpWeaponsMoreActivelyCiv; }$/;"	f	class:OpenXcom::Mod
getAIRespectMaxRange	Mod/Mod.h	/^	bool getAIRespectMaxRange() const {return _aiRespectMaxRange;}$/;"	f	class:OpenXcom::Mod
getAIUseDelay	Mod/RuleItem.cpp	/^int RuleItem::getAIUseDelay(const Mod *mod) const$/;"	f	class:OpenXcom::RuleItem
getAIUseDelayBlaster	Mod/Mod.h	/^	int getAIUseDelayBlaster() const  {return _aiUseDelayBlaster;}$/;"	f	class:OpenXcom::Mod
getAIUseDelayFirearm	Mod/Mod.h	/^	int getAIUseDelayFirearm() const  {return _aiUseDelayFirearm;}$/;"	f	class:OpenXcom::Mod
getAIUseDelayGrenade	Mod/Mod.h	/^	int getAIUseDelayGrenade() const  {return _aiUseDelayGrenade;}$/;"	f	class:OpenXcom::Mod
getAIUseDelayMelee	Mod/Mod.h	/^	int getAIUseDelayMelee() const {return _aiUseDelayMelee;}$/;"	f	class:OpenXcom::Mod
getAIUseDelayPsionic	Mod/Mod.h	/^	int getAIUseDelayPsionic() const  {return _aiUseDelayPsionic;}$/;"	f	class:OpenXcom::Mod
getAbortCutscene	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::getAbortCutscene() const$/;"	f	class:OpenXcom::AlienDeployment
getAbortPenalty	Mod/AlienDeployment.h	/^	int getAbortPenalty() const { return _abortPenalty; }$/;"	f	class:OpenXcom::AlienDeployment
getAboveTile	Savegame/SavedBattleGame.h	/^	inline Tile *getAboveTile(Tile* tile)$/;"	f	class:OpenXcom::SavedBattleGame
getAboveTile	Savegame/SavedBattleGame.h	/^	inline const Tile *getAboveTile(const Tile* tile) const$/;"	f	class:OpenXcom::SavedBattleGame
getAbsoluteXMouse	Engine/Action.cpp	/^double Action::getAbsoluteXMouse() const$/;"	f	class:OpenXcom::Action
getAbsoluteYMouse	Engine/Action.cpp	/^double Action::getAbsoluteYMouse() const$/;"	f	class:OpenXcom::Action
getAcceleration	Mod/RuleCraft.cpp	/^int RuleCraft::getAcceleration() const$/;"	f	class:OpenXcom::RuleCraft
getAccuracy	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getAccuracy() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getAccuracy	Savegame/CraftWeaponProjectile.cpp	/^int CraftWeaponProjectile::getAccuracy() const$/;"	f	class:OpenXcom::CraftWeaponProjectile
getAccuracy	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getAccuracy() const$/;"	f	class:OpenXcom::SoldierDiary
getAccuracyAimed	Mod/RuleItem.cpp	/^int RuleItem::getAccuracyAimed() const$/;"	f	class:OpenXcom::RuleItem
getAccuracyAuto	Mod/RuleItem.cpp	/^int RuleItem::getAccuracyAuto() const$/;"	f	class:OpenXcom::RuleItem
getAccuracyCloseQuarters	Mod/RuleItem.cpp	/^int RuleItem::getAccuracyCloseQuarters(Mod *mod) const$/;"	f	class:OpenXcom::RuleItem
getAccuracyMelee	Mod/RuleItem.cpp	/^int RuleItem::getAccuracyMelee() const$/;"	f	class:OpenXcom::RuleItem
getAccuracyMind	Mod/RuleItem.cpp	/^int RuleItem::getAccuracyMind() const$/;"	f	class:OpenXcom::RuleItem
getAccuracyModifier	Savegame/BattleUnit.cpp	/^int BattleUnit::getAccuracyModifier(const BattleItem *item) const$/;"	f	class:OpenXcom::BattleUnit
getAccuracyMultiplier	Mod/RuleItem.cpp	/^int RuleItem::getAccuracyMultiplier(BattleActionAttack::ReadOnly attack) const$/;"	f	class:OpenXcom::RuleItem
getAccuracyMultiplierRaw	Mod/RuleItem.h	/^	const RuleStatBonus *getAccuracyMultiplierRaw() const { return &_accuracyMulti; }$/;"	f	class:OpenXcom::RuleItem
getAccuracyPanic	Mod/RuleItem.cpp	/^int RuleItem::getAccuracyPanic() const$/;"	f	class:OpenXcom::RuleItem
getAccuracySnap	Mod/RuleItem.cpp	/^int RuleItem::getAccuracySnap() const$/;"	f	class:OpenXcom::RuleItem
getAccuracyThrow	Mod/RuleItem.cpp	/^int RuleItem::getAccuracyThrow() const$/;"	f	class:OpenXcom::RuleItem
getAccuracyUse	Mod/RuleItem.cpp	/^int RuleItem::getAccuracyUse() const$/;"	f	class:OpenXcom::RuleItem
getAction	Battlescape/ActionMenuItem.cpp	/^BattleActionType ActionMenuItem::getAction() const$/;"	f	class:OpenXcom::ActionMenuItem
getAction	Battlescape/BattleState.cpp	/^const BattleAction& BattleState::getAction() const$/;"	f	class:OpenXcom::BattleState
getActionConf	Savegame/BattleItem.cpp	/^const RuleItemAction *BattleItem::getActionConf(BattleActionType action) const$/;"	f	class:OpenXcom::BattleItem
getActionTUs	Savegame/BattleUnit.cpp	/^RuleItemUseCost BattleUnit::getActionTUs(BattleActionType actionType, const BattleItem *item) const$/;"	f	class:OpenXcom::BattleUnit
getActionTUs	Savegame/BattleUnit.cpp	/^RuleItemUseCost BattleUnit::getActionTUs(BattleActionType actionType, const RuleItem *item) const$/;"	f	class:OpenXcom::BattleUnit
getActionTUs	Savegame/BattleUnit.cpp	/^RuleItemUseCost BattleUnit::getActionTUs(BattleActionType actionType, const RuleSkill *skillRules) const$/;"	f	class:OpenXcom::BattleUnit
getActionTUsScript	Savegame/BattleItem.cpp	/^void getActionTUsScript(const BattleItem* bt, int& i, const BattleUnit* bu, const int battle_action)$/;"	f	namespace:OpenXcom::__anon39
getActiveHand	Savegame/BattleUnit.cpp	/^const BattleItem *BattleUnit::getActiveHand(const BattleItem *left, const BattleItem *right) const$/;"	f	class:OpenXcom::BattleUnit
getActiveMaster	Engine/Options.cpp	/^std::string getActiveMaster()$/;"	f	namespace:OpenXcom::Options
getActiveMasterInfo	Engine/Options.cpp	/^const ModInfo* getActiveMasterInfo()$/;"	f	namespace:OpenXcom::Options
getActiveMods	Engine/Options.cpp	/^std::vector<const ModInfo *> getActiveMods()$/;"	f	namespace:OpenXcom::Options
getActivityAlien	Savegame/Country.cpp	/^std::vector<int> &Country::getActivityAlien()$/;"	f	class:OpenXcom::Country
getActivityAlien	Savegame/Region.cpp	/^std::vector<int> &Region::getActivityAlien()$/;"	f	class:OpenXcom::Region
getActivityXcom	Savegame/Country.cpp	/^std::vector<int> &Country::getActivityXcom()$/;"	f	class:OpenXcom::Country
getActivityXcom	Savegame/Region.cpp	/^std::vector<int> &Region::getActivityXcom()$/;"	f	class:OpenXcom::Region
getAdjustedBuildTime	Savegame/BaseFacility.cpp	/^int BaseFacility::getAdjustedBuildTime() const$/;"	f	class:OpenXcom::BaseFacility
getAffectsGameProgression	Mod/RuleEventScript.h	/^	bool getAffectsGameProgression() const { return _affectsGameProgression; }$/;"	f	class:OpenXcom::RuleEventScript
getAggression	Mod/Unit.cpp	/^int Unit::getAggression() const$/;"	f	class:OpenXcom::Unit
getAggression	Savegame/BattleUnit.cpp	/^int BattleUnit::getAggression() const$/;"	f	class:OpenXcom::BattleUnit
getAggressiveReload	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getAggressiveReload() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getAggroSounds	Mod/Unit.cpp	/^const std::vector<int> &Unit::getAggroSounds() const$/;"	f	class:OpenXcom::Unit
getAimRange	Mod/RuleItem.cpp	/^int RuleItem::getAimRange() const$/;"	f	class:OpenXcom::RuleItem
getAlertBackground	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::getAlertBackground() const$/;"	f	class:OpenXcom::AlienDeployment
getAlertDescription	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::getAlertDescription() const$/;"	f	class:OpenXcom::AlienDeployment
getAlertMessage	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::getAlertMessage() const$/;"	f	class:OpenXcom::AlienDeployment
getAlertSound	Mod/AlienDeployment.cpp	/^int AlienDeployment::getAlertSound() const$/;"	f	class:OpenXcom::AlienDeployment
getAlertSound	Mod/RuleUfo.cpp	/^int RuleUfo::getAlertSound() const$/;"	f	class:OpenXcom::RuleUfo
getAlienBase	Savegame/AlienMission.cpp	/^const AlienBase *AlienMission::getAlienBase() const$/;"	f	class:OpenXcom::AlienMission
getAlienBaseAssaultTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getAlienBaseAssaultTotal(std::vector<MissionStatistics*> *missionStatistics) const$/;"	f	class:OpenXcom::SoldierDiary
getAlienBases	Savegame/SavedGame.cpp	/^std::vector<AlienBase*> *SavedGame::getAlienBases()$/;"	f	class:OpenXcom::SavedGame
getAlienContainmentChecked	Savegame/SavedGame.h	/^	bool getAlienContainmentChecked() const { return _alienContainmentChecked; }$/;"	f	class:OpenXcom::SavedGame
getAlienCustomDeploy	Savegame/SavedBattleGame.cpp	/^const std::string &SavedBattleGame::getAlienCustomDeploy() const$/;"	f	class:OpenXcom::SavedBattleGame
getAlienCustomMission	Savegame/SavedBattleGame.cpp	/^const std::string &SavedBattleGame::getAlienCustomMission() const$/;"	f	class:OpenXcom::SavedBattleGame
getAlienFuelName	Mod/Mod.cpp	/^std::string Mod::getAlienFuelName() const$/;"	f	class:OpenXcom::Mod
getAlienFuelQuantity	Mod/Mod.cpp	/^int Mod::getAlienFuelQuantity() const$/;"	f	class:OpenXcom::Mod
getAlienInventoryOffsetBigUnit	Mod/Mod.h	/^	int getAlienInventoryOffsetBigUnit() const { return _alienInventoryOffsetBigUnit; }$/;"	f	class:OpenXcom::Mod
getAlienInventoryOffsetX	Mod/Mod.h	/^	int getAlienInventoryOffsetX() const { return _alienInventoryOffsetX; }$/;"	f	class:OpenXcom::Mod
getAlienItemLevels	Mod/Mod.cpp	/^const std::vector<std::vector<int> > &Mod::getAlienItemLevels() const$/;"	f	class:OpenXcom::Mod
getAlienMission	Mod/Mod.cpp	/^const RuleAlienMission *Mod::getAlienMission(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getAlienMissionList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getAlienMissionList() const$/;"	f	class:OpenXcom::Mod
getAlienMissions	Savegame/SavedGame.h	/^	const std::vector<AlienMission*> &getAlienMissions() const { return _activeMissions; }$/;"	f	class:OpenXcom::SavedGame
getAlienMissions	Savegame/SavedGame.h	/^	std::vector<AlienMission*> &getAlienMissions() { return _activeMissions; }$/;"	f	class:OpenXcom::SavedGame
getAlienRace	Mod/Mod.cpp	/^AlienRace *Mod::getAlienRace(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getAlienRace	Savegame/AlienBase.cpp	/^std::string AlienBase::getAlienRace() const$/;"	f	class:OpenXcom::AlienBase
getAlienRace	Savegame/MissionSite.cpp	/^std::string MissionSite::getAlienRace() const$/;"	f	class:OpenXcom::MissionSite
getAlienRace	Savegame/Ufo.cpp	/^const std::string &Ufo::getAlienRace() const$/;"	f	class:OpenXcom::Ufo
getAlienRaceTotal	Savegame/SoldierDiary.cpp	/^std::map<std::string, int> SoldierDiary::getAlienRaceTotal()$/;"	f	class:OpenXcom::SoldierDiary
getAlienRaces	Mod/RuleConverter.h	/^	const std::vector<std::string> &getAlienRaces() const { return _alienRaces; }$/;"	f	class:OpenXcom::RuleConverter
getAlienRacesList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getAlienRacesList() const$/;"	f	class:OpenXcom::Mod
getAlienRankTotal	Savegame/SoldierDiary.cpp	/^std::map<std::string, int> SoldierDiary::getAlienRankTotal()$/;"	f	class:OpenXcom::SoldierDiary
getAlienRanks	Mod/RuleConverter.h	/^	const std::vector<std::string> &getAlienRanks() const { return _alienRanks; }$/;"	f	class:OpenXcom::RuleConverter
getAlienStrategy	Savegame/SavedGame.h	/^	AlienStrategy &getAlienStrategy() { return *_alienStrategy; }$/;"	f	class:OpenXcom::SavedGame
getAlienStrategy	Savegame/SavedGame.h	/^	const AlienStrategy &getAlienStrategy() const { return *_alienStrategy; }$/;"	f	class:OpenXcom::SavedGame
getAliens	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getAliens() const$/;"	f	class:OpenXcom::RuleBaseFacility
getAliensFacingCraftOdds	Mod/Mod.h	/^	const std::vector<int>& getAliensFacingCraftOdds() { return _aliensFacingCraftOdds; }$/;"	f	class:OpenXcom::Mod
getAlign	Interface/Text.cpp	/^TextHAlign Text::getAlign() const$/;"	f	class:OpenXcom::Text
getAllIds	Savegame/SavedGame.cpp	/^const std::map<std::string, int> &SavedGame::getAllIds() const$/;"	f	class:OpenXcom::SavedGame
getAllMissionTypes	Mod/RuleMissionScript.cpp	/^std::set<std::string> RuleMissionScript::getAllMissionTypes() const$/;"	f	class:OpenXcom::RuleMissionScript
getAllYAML	Engine/FileMap.cpp	/^std::vector<YAML::Node> FileRecord::getAllYAML() const$/;"	f	class:OpenXcom::FileMap::FileRecord
getAllYAML	Engine/FileMap.cpp	/^std::vector<YAML::Node> getAllYAML(const std::string &relativeFilePath) {$/;"	f	namespace:OpenXcom::FileMap
getAllocatedEngineers	Savegame/Base.cpp	/^int Base::getAllocatedEngineers() const$/;"	f	class:OpenXcom::Base
getAllocatedScientists	Savegame/Base.cpp	/^int Base::getAllocatedScientists() const$/;"	f	class:OpenXcom::Base
getAllowAlienBasesOnWrongTextures	Mod/Mod.h	/^	bool getAllowAlienBasesOnWrongTextures() const { return _allowAlienBasesOnWrongTextures; }$/;"	f	class:OpenXcom::Mod
getAllowCountriesToCancelAlienPact	Mod/Mod.h	/^	bool getAllowCountriesToCancelAlienPact() const { return _allowCountriesToCancelAlienPact; }$/;"	f	class:OpenXcom::Mod
getAllowLanding	Mod/RuleCraft.cpp	/^bool RuleCraft::getAllowLanding() const$/;"	f	class:OpenXcom::RuleCraft
getAllowPiloting	Mod/RuleSoldier.cpp	/^bool RuleSoldier::getAllowPiloting() const$/;"	f	class:OpenXcom::RuleSoldier
getAllowPromotion	Mod/RuleSoldier.cpp	/^bool RuleSoldier::getAllowPromotion() const$/;"	f	class:OpenXcom::RuleSoldier
getAllowTargetFriendGround	Mod/RuleItem.h	/^	bool getAllowTargetFriendGround() const { return _medikitTargetMatrix & 1; }$/;"	f	class:OpenXcom::RuleItem
getAllowTargetFriendStanding	Mod/RuleItem.h	/^	bool getAllowTargetFriendStanding() const { return _medikitTargetMatrix & 2; }$/;"	f	class:OpenXcom::RuleItem
getAllowTargetGround	Mod/RuleItem.h	/^	bool getAllowTargetGround() const { return _medikitTargetMatrix & 21; } \/\/ 1 + 4 + 16$/;"	f	class:OpenXcom::RuleItem
getAllowTargetHostileGround	Mod/RuleItem.h	/^	bool getAllowTargetHostileGround() const { return _medikitTargetMatrix & 16; }$/;"	f	class:OpenXcom::RuleItem
getAllowTargetHostileStanding	Mod/RuleItem.h	/^	bool getAllowTargetHostileStanding() const { return _medikitTargetMatrix & 32; }$/;"	f	class:OpenXcom::RuleItem
getAllowTargetImmune	Mod/RuleItem.h	/^	bool getAllowTargetImmune() const { return _medikitTargetImmune; }$/;"	f	class:OpenXcom::RuleItem
getAllowTargetNeutralGround	Mod/RuleItem.h	/^	bool getAllowTargetNeutralGround() const { return _medikitTargetMatrix & 4; }$/;"	f	class:OpenXcom::RuleItem
getAllowTargetNeutralStanding	Mod/RuleItem.h	/^	bool getAllowTargetNeutralStanding() const { return _medikitTargetMatrix & 8; }$/;"	f	class:OpenXcom::RuleItem
getAllowTargetSelf	Mod/RuleItem.h	/^	bool getAllowTargetSelf() const { return _medikitTargetSelf; }$/;"	f	class:OpenXcom::RuleItem
getAllowTargetStanding	Mod/RuleItem.h	/^	bool getAllowTargetStanding() const { return _medikitTargetMatrix & 42; } \/\/ 2 + 8 + 32$/;"	f	class:OpenXcom::RuleItem
getAllowTwoMainWeapons	Mod/Armor.h	/^	bool getAllowTwoMainWeapons() const { return _allowTwoMainWeapons; }$/;"	f	class:OpenXcom::Armor
getAllowedArmors	Mod/RuleStartingCondition.h	/^	const std::vector<std::string>& getAllowedArmors() const { return _allowedArmors; }$/;"	f	class:OpenXcom::RuleStartingCondition
getAllowedCraft	Mod/RuleStartingCondition.h	/^	const std::vector<std::string>& getAllowedCraft() const { return _allowedCraft; }$/;"	f	class:OpenXcom::RuleStartingCondition
getAllowedSoldierTypes	Mod/RuleSoldierTransformation.cpp	/^const std::vector<std::string > &RuleSoldierTransformation::getAllowedSoldierTypes() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getAllowedSoldierTypes	Mod/RuleStartingCondition.h	/^	const std::vector<std::string>& getAllowedSoldierTypes() const { return _allowedSoldierTypes; }$/;"	f	class:OpenXcom::RuleStartingCondition
getAlpha	Engine/Scalers/xbrz.cpp	/^inline unsigned char getAlpha(uint32_t pix) { return getByte<3>(pix); }$/;"	f	namespace:__anon10
getAlreadyRespawned	Savegame/BattleUnit.cpp	/^bool BattleUnit::getAlreadyRespawned() const$/;"	f	class:OpenXcom::BattleUnit
getAltBackgroundImage	Mod/RuleInterface.cpp	/^const std::string &RuleInterface::getAltBackgroundImage() const$/;"	f	class:OpenXcom::RuleInterface
getAltMCD	Mod/MapData.cpp	/^int MapData::getAltMCD() const$/;"	f	class:OpenXcom::MapData
getAltPressedFlag	Engine/Game.h	/^	bool getAltPressedFlag() const { return _alt; }$/;"	f	class:OpenXcom::Game
getAltResearchColor	Basescape/TechTreeViewerState.cpp	/^Uint8 TechTreeViewerState::getAltResearchColor(const std::string &topic) const$/;"	f	class:OpenXcom::TechTreeViewerState
getAltitude	Mod/UfoTrajectory.cpp	/^std::string UfoTrajectory::getAltitude(size_t wp) const$/;"	f	class:OpenXcom::UfoTrajectory
getAltitude	Savegame/Craft.cpp	/^std::string Craft::getAltitude() const$/;"	f	class:OpenXcom::Craft
getAltitude	Savegame/Ufo.cpp	/^std::string Ufo::getAltitude() const$/;"	f	class:OpenXcom::Ufo
getAltitudeInt	Savegame/Ufo.cpp	/^int Ufo::getAltitudeInt() const$/;"	f	class:OpenXcom::Ufo
getAmbience	Mod/RuleTerrain.cpp	/^int RuleTerrain::getAmbience() const$/;"	f	class:OpenXcom::RuleTerrain
getAmbienceRandom	Mod/RuleTerrain.h	/^	const std::vector<int> &getAmbienceRandom() const { return _ambienceRandom; }$/;"	f	class:OpenXcom::RuleTerrain
getAmbienceRandom	Savegame/SavedBattleGame.h	/^	const std::vector<int> &getAmbienceRandom() const { return _ambienceRandom; };$/;"	f	class:OpenXcom::SavedBattleGame
getAmbientSound	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getAmbientSound() const$/;"	f	class:OpenXcom::SavedBattleGame
getAmbientVolume	Mod/RuleTerrain.cpp	/^double RuleTerrain::getAmbientVolume() const$/;"	f	class:OpenXcom::RuleTerrain
getAmbientVolume	Savegame/SavedBattleGame.cpp	/^double SavedBattleGame::getAmbientVolume() const$/;"	f	class:OpenXcom::SavedBattleGame
getAmmo	Savegame/CraftWeapon.cpp	/^int CraftWeapon::getAmmo() const$/;"	f	class:OpenXcom::CraftWeapon
getAmmo	Savegame/Vehicle.cpp	/^int Vehicle::getAmmo() const$/;"	f	class:OpenXcom::Vehicle
getAmmoForAction	Savegame/BattleItem.cpp	/^BattleItem *BattleItem::getAmmoForAction(BattleActionType action, std::string* message, int* spendPerShot)$/;"	f	class:OpenXcom::BattleItem
getAmmoForAction	Savegame/BattleItem.cpp	/^const BattleItem *BattleItem::getAmmoForAction(BattleActionType action) const$/;"	f	class:OpenXcom::BattleItem
getAmmoForActionConstScript	Savegame/BattleItem.cpp	/^struct getAmmoForActionConstScript$/;"	s	namespace:OpenXcom::__anon39	file:
getAmmoForActionScript	Savegame/BattleItem.cpp	/^struct getAmmoForActionScript$/;"	s	namespace:OpenXcom::__anon39	file:
getAmmoForSlot	Savegame/BattleItem.cpp	/^BattleItem *BattleItem::getAmmoForSlot(int slot)$/;"	f	class:OpenXcom::BattleItem
getAmmoForSlot	Savegame/BattleItem.cpp	/^const BattleItem *BattleItem::getAmmoForSlot(int slot) const$/;"	f	class:OpenXcom::BattleItem
getAmmoForSlotConstScript	Savegame/BattleItem.cpp	/^struct getAmmoForSlotConstScript$/;"	s	namespace:OpenXcom::__anon39	file:
getAmmoForSlotScript	Savegame/BattleItem.cpp	/^struct getAmmoForSlotScript$/;"	s	namespace:OpenXcom::__anon39	file:
getAmmoItem	Mod/RuleBaseFacility.h	/^	const RuleItem* getAmmoItem() const { return _ammoItem; }$/;"	f	class:OpenXcom::RuleBaseFacility
getAmmoItemConstScript	Savegame/BattleItem.cpp	/^struct getAmmoItemConstScript$/;"	s	namespace:OpenXcom::__anon39	file:
getAmmoItemForSlot	Savegame/EquipmentLayoutItem.cpp	/^const std::string& EquipmentLayoutItem::getAmmoItemForSlot(int slot) const$/;"	f	class:OpenXcom::EquipmentLayoutItem
getAmmoItemScript	Savegame/BattleItem.cpp	/^struct getAmmoItemScript$/;"	s	namespace:OpenXcom::__anon39	file:
getAmmoMax	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getAmmoMax() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getAmmoNeeded	Mod/RuleBaseFacility.h	/^	int getAmmoNeeded() const { return _ammoNeeded; }$/;"	f	class:OpenXcom::RuleBaseFacility
getAmmoQuantity	Savegame/BattleItem.cpp	/^int BattleItem::getAmmoQuantity() const$/;"	f	class:OpenXcom::BattleItem
getAmmoSlotForPage	Mod/ArticleDefinition.h	/^		int getAmmoSlotForPage(size_t page) const$/;"	f	class:OpenXcom::ArticleDefinition
getAmmoSlotPrevUsageForPage	Mod/ArticleDefinition.h	/^		int getAmmoSlotPrevUsageForPage(size_t page) const$/;"	f	class:OpenXcom::ArticleDefinition
getAmountProduced	Savegame/Production.cpp	/^int Production::getAmountProduced() const$/;"	f	class:OpenXcom::Production
getAmountTotal	Savegame/Production.cpp	/^int Production::getAmountTotal() const$/;"	f	class:OpenXcom::Production
getAnimFrame	Battlescape/Inventory.h	/^	int getAnimFrame() const { return _animFrame; }$/;"	f	class:OpenXcom::Inventory
getAnimFrame	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getAnimFrame() const$/;"	f	class:OpenXcom::SavedBattleGame
getAnimationOffset	Savegame/Tile.cpp	/^int Tile::getAnimationOffset() const$/;"	f	class:OpenXcom::Tile
getAnnoyedSounds	Mod/Mod.h	/^	const std::map<std::string, std::vector<int> > &getAnnoyedSounds() const { return _annoyedSound; }$/;"	f	class:OpenXcom::Mod
getAnnoyedSounds	Mod/Unit.h	/^	const std::vector<int> &getAnnoyedSounds() const { return _annoyedSound; }$/;"	f	class:OpenXcom::Unit
getAnnoyedSounds	Savegame/BattleUnit.h	/^	const std::vector<int> &getAnnoyedSounds() const { return _annoyedSound; }$/;"	f	class:OpenXcom::BattleUnit
getAntiCamouflageAtDark	Mod/Armor.cpp	/^int Armor::getAntiCamouflageAtDark() const$/;"	f	class:OpenXcom::Armor
getAntiCamouflageAtDay	Mod/Armor.cpp	/^int Armor::getAntiCamouflageAtDay() const$/;"	f	class:OpenXcom::Armor
getAoeScript	Mod/RuleItem.cpp	/^void getAoeScript(const RuleDamageType* rdt, int &ret)$/;"	f	namespace:OpenXcom::__anon21
getArcDirection	Battlescape/TileEngine.cpp	/^int TileEngine::getArcDirection(int directionA, int directionB) const$/;"	f	class:OpenXcom::TileEngine
getArcScript	Mod/Mod.cpp	/^RuleArcScript* Mod::getArcScript(const std::string& name, bool error) const$/;"	f	class:OpenXcom::Mod
getArcScriptList	Mod/Mod.cpp	/^const std::vector<std::string>* Mod::getArcScriptList() const$/;"	f	class:OpenXcom::Mod
getArcingShot	Mod/RuleItem.cpp	/^bool RuleItem::getArcingShot() const$/;"	f	class:OpenXcom::RuleItem
getArcingShot	Savegame/BattleItem.cpp	/^bool BattleItem::getArcingShot(BattleActionType action) const$/;"	f	class:OpenXcom::BattleItem
getArgs	Engine/CrossPlatform.cpp	/^const std::vector<std::string>& getArgs() { return args; }$/;"	f	namespace:OpenXcom::CrossPlatform
getArmor	Mod/Armor.cpp	/^int Armor::getArmor(UnitSide side) const$/;"	f	class:OpenXcom::Armor
getArmor	Mod/MapData.cpp	/^int MapData::getArmor() const$/;"	f	class:OpenXcom::MapData
getArmor	Mod/Mod.cpp	/^Armor *Mod::getArmor(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getArmor	Mod/RuleConverter.h	/^	const std::vector<std::string> &getArmor() const { return _armor; }$/;"	f	class:OpenXcom::RuleConverter
getArmor	Mod/RuleItem.cpp	/^int RuleItem::getArmor() const$/;"	f	class:OpenXcom::RuleItem
getArmor	Mod/Unit.cpp	/^Armor* Unit::getArmor() const$/;"	f	class:OpenXcom::Unit
getArmor	Savegame/BattleUnit.cpp	/^const Armor *BattleUnit::getArmor() const$/;"	f	class:OpenXcom::BattleUnit
getArmor	Savegame/BattleUnit.cpp	/^int BattleUnit::getArmor(UnitSide side) const$/;"	f	class:OpenXcom::BattleUnit
getArmor	Savegame/Soldier.cpp	/^Armor *Soldier::getArmor() const$/;"	f	class:OpenXcom::Soldier
getArmorEffectivenessScript	Mod/RuleItem.cpp	/^void getArmorEffectivenessScript(const RuleDamageType* rdt, int& ret)$/;"	f	namespace:OpenXcom::__anon21
getArmorFinalDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getArmorFinalDamage(int damage) const$/;"	f	class:OpenXcom::RuleDamageType
getArmorForAvatar	Mod/RuleSoldier.cpp	/^const std::string& RuleSoldier::getArmorForAvatar() const$/;"	f	class:OpenXcom::RuleSoldier
getArmorLayers	Savegame/Soldier.cpp	/^const std::vector<std::string>& Soldier::getArmorLayers(Armor *customArmor) const$/;"	f	class:OpenXcom::Soldier
getArmorPreFinalDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getArmorPreFinalDamage(int damage) const$/;"	f	class:OpenXcom::RuleDamageType
getArmorReplacement	Mod/RuleStartingCondition.cpp	/^std::string RuleStartingCondition::getArmorReplacement(const std::string& soldierType, const std::string& armorType) const$/;"	f	class:OpenXcom::RuleStartingCondition
getArmorScript	Mod/Mod.cpp	/^void getArmorScript(const Mod* mod, const Armor* &armor, const std::string &name)$/;"	f	namespace:OpenXcom::__anon30
getArmorTransformation	Mod/RuleEnviroEffects.cpp	/^Armor* RuleEnviroEffects::getArmorTransformation(const Armor* sourceArmor) const$/;"	f	class:OpenXcom::RuleEnviroEffects
getArmorValueMaxScript	Savegame/BattleUnit.cpp	/^void getArmorValueMaxScript(const BattleUnit *bu, int &ret, int side)$/;"	f	namespace:OpenXcom::__anon36
getArmorValueScript	Mod/Armor.cpp	/^void getArmorValueScript(const Armor *ar, int &ret, int side)$/;"	f	namespace:OpenXcom::__anon17
getArmorValueScript	Savegame/BattleUnit.cpp	/^void getArmorValueScript(const BattleUnit *bu, int &ret, int side)$/;"	f	namespace:OpenXcom::__anon36
getArmorsForSoldiers	Mod/Mod.cpp	/^const std::vector<const Armor*> &Mod::getArmorsForSoldiers() const$/;"	f	class:OpenXcom::Mod
getArmorsList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getArmorsList() const$/;"	f	class:OpenXcom::Mod
getArrowBobForFrame	Battlescape/Map.cpp	/^int getArrowBobForFrame(int frame)$/;"	f	namespace:OpenXcom::__anon46
getArrowsLeftEdge	Interface/TextList.cpp	/^int TextList::getArrowsLeftEdge()$/;"	f	class:OpenXcom::TextList
getArrowsRightEdge	Interface/TextList.cpp	/^int TextList::getArrowsRightEdge()$/;"	f	class:OpenXcom::TextList
getArticleIndex	Ufopaedia/Ufopaedia.cpp	/^	size_t Ufopaedia::getArticleIndex(const ArticleDefinitionList& articles, const std::string &article_id)$/;"	f	class:OpenXcom::Ufopaedia
getAssigned	Savegame/ResearchProject.cpp	/^int ResearchProject::getAssigned() const$/;"	f	class:OpenXcom::ResearchProject
getAssignedEngineers	Savegame/Production.cpp	/^int Production::getAssignedEngineers() const$/;"	f	class:OpenXcom::Production
getAttraction	Mod/RuleItem.cpp	/^int RuleItem::getAttraction() const$/;"	f	class:OpenXcom::RuleItem
getAudioTracks	Mod/RuleVideo.cpp	/^const std::vector<std::string> * RuleVideo::getAudioTracks() const$/;"	f	class:OpenXcom::RuleVideo
getAuthor	Engine/ModInfo.cpp	/^const std::string &ModInfo::getAuthor()                  const { return _author;                  }$/;"	f	class:OpenXcom::ModInfo
getAutoRange	Mod/RuleItem.cpp	/^int RuleItem::getAutoRange() const$/;"	f	class:OpenXcom::RuleItem
getAutosell	Savegame/SavedGame.cpp	/^bool SavedGame::getAutosell(const RuleItem *itype) const$/;"	f	class:OpenXcom::SavedGame
getAvailableContainment	Savegame/Base.cpp	/^int Base::getAvailableContainment(int prisonType) const$/;"	f	class:OpenXcom::Base
getAvailableEngineers	Savegame/Base.cpp	/^int Base::getAvailableEngineers() const$/;"	f	class:OpenXcom::Base
getAvailableHangars	Savegame/Base.cpp	/^int Base::getAvailableHangars() const$/;"	f	class:OpenXcom::Base
getAvailableLaboratories	Savegame/Base.cpp	/^int Base::getAvailableLaboratories() const$/;"	f	class:OpenXcom::Base
getAvailableMissions	Mod/RuleRegion.h	/^	const WeightedOptions &getAvailableMissions() const { return _missionWeights; }$/;"	f	class:OpenXcom::RuleRegion
getAvailableProductions	Savegame/SavedGame.cpp	/^void SavedGame::getAvailableProductions (std::vector<RuleManufacture *> & productions, const Mod * mod, Base * base, ManufacturingFilterType filter) const$/;"	f	class:OpenXcom::SavedGame
getAvailablePsiLabs	Savegame/Base.cpp	/^int Base::getAvailablePsiLabs() const$/;"	f	class:OpenXcom::Base
getAvailableQuarters	Savegame/Base.cpp	/^int Base::getAvailableQuarters() const$/;"	f	class:OpenXcom::Base
getAvailableResearchProjects	Savegame/SavedGame.cpp	/^void SavedGame::getAvailableResearchProjects(std::vector<RuleResearch *> &projects, const Mod *mod, Base *base, bool considerDebugMode) const$/;"	f	class:OpenXcom::SavedGame
getAvailableScientists	Savegame/Base.cpp	/^int Base::getAvailableScientists() const$/;"	f	class:OpenXcom::Base
getAvailableSoldiers	Savegame/Base.cpp	/^int Base::getAvailableSoldiers(bool checkCombatReadiness, bool includeWounded) const$/;"	f	class:OpenXcom::Base
getAvailableStores	Savegame/Base.cpp	/^int Base::getAvailableStores() const$/;"	f	class:OpenXcom::Base
getAvailableTraining	Savegame/Base.cpp	/^int Base::getAvailableTraining() const$/;"	f	class:OpenXcom::Base
getAvailableTransformations	Savegame/SavedGame.cpp	/^void SavedGame::getAvailableTransformations (std::vector<RuleSoldierTransformation *> & transformations, const Mod * mod, Base * base) const$/;"	f	class:OpenXcom::SavedGame
getAvailableWorkshops	Savegame/Base.cpp	/^int Base::getAvailableWorkshops() const$/;"	f	class:OpenXcom::Base
getAvatarName	Savegame/SoldierAvatar.cpp	/^std::string SoldierAvatar::getAvatarName() const$/;"	f	class:OpenXcom::SoldierAvatar
getAvatarOffsetX	Mod/RuleSoldier.cpp	/^int RuleSoldier::getAvatarOffsetX() const$/;"	f	class:OpenXcom::RuleSoldier
getAvatarOffsetY	Mod/RuleSoldier.cpp	/^int RuleSoldier::getAvatarOffsetY() const$/;"	f	class:OpenXcom::RuleSoldier
getBackground	Mod/RuleEvent.h	/^	const std::string &getBackground() const { return _background; }$/;"	f	class:OpenXcom::RuleEvent
getBackgroundImage	Mod/RuleInterface.cpp	/^const std::string &RuleInterface::getBackgroundImage() const$/;"	f	class:OpenXcom::RuleInterface
getBase	Engine/Script.cpp	/^int ScriptValuesBase::getBase(size_t t) const$/;"	f	class:OpenXcom::ScriptValuesBase
getBase	Mod/RuleUfo.h	/^	const RuleCraftStats& getBase() const { return *this; }$/;"	f	struct:OpenXcom::RuleUfoStats
getBase	Savegame/Craft.cpp	/^Base *Craft::getBase() const$/;"	f	class:OpenXcom::Craft
getBaseCost	Mod/RuleRegion.cpp	/^int RuleRegion::getBaseCost() const$/;"	f	class:OpenXcom::RuleRegion
getBaseCustomDeploy	Mod/AlienRace.cpp	/^const std::string &AlienRace::getBaseCustomDeploy() const$/;"	f	class:OpenXcom::AlienRace
getBaseCustomMission	Mod/AlienRace.cpp	/^const std::string &AlienRace::getBaseCustomMission() const$/;"	f	class:OpenXcom::AlienRace
getBaseDefenseMapFromLocation	Mod/Mod.h	/^	int getBaseDefenseMapFromLocation() const { return _baseDefenseMapFromLocation; }$/;"	f	class:OpenXcom::Mod
getBaseDefenseMissionTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getBaseDefenseMissionTotal(std::vector<MissionStatistics*> *missionStatistics) const$/;"	f	class:OpenXcom::SoldierDiary
getBaseDetectionChance	Mod/AlienDeployment.cpp	/^int AlienDeployment::getBaseDetectionChance() const$/;"	f	class:OpenXcom::AlienDeployment
getBaseDetectionRange	Mod/AlienDeployment.cpp	/^double AlienDeployment::getBaseDetectionRange() const$/;"	f	class:OpenXcom::AlienDeployment
getBaseDomain	Engine/ShaderDrawHelper.h	/^	inline const GraphSubset& getBaseDomain() const$/;"	f	class:OpenXcom::helper::ShaderBase
getBaseFacilitiesList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getBaseFacilitiesList() const$/;"	f	class:OpenXcom::Mod
getBaseFacility	Mod/Mod.cpp	/^RuleBaseFacility *Mod::getBaseFacility(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getBaseFunctionNames	Mod/Mod.cpp	/^std::vector<std::string> Mod::getBaseFunctionNames(RuleBaseFacilityFunctions f) const$/;"	f	class:OpenXcom::Mod
getBaseMaintenance	Savegame/SavedGame.cpp	/^int SavedGame::getBaseMaintenance() const$/;"	f	class:OpenXcom::SavedGame
getBaseNamesFirst	Mod/Mod.h	/^	const std::vector<std::string> &getBaseNamesFirst() const { return _baseNamesFirst; }$/;"	f	class:OpenXcom::Mod
getBaseNamesLast	Mod/Mod.h	/^	const std::vector<std::string> &getBaseNamesLast() const { return _baseNamesLast; }$/;"	f	class:OpenXcom::Mod
getBaseNamesMiddle	Mod/Mod.h	/^	const std::vector<std::string> &getBaseNamesMiddle() const { return _baseNamesMiddle; }$/;"	f	class:OpenXcom::Mod
getBaseRange	Savegame/Craft.cpp	/^double Craft::getBaseRange() const$/;"	f	class:OpenXcom::Craft
getBaseSelfDestructCode	Mod/AlienDeployment.cpp	/^const std::string& AlienDeployment::getBaseSelfDestructCode() const$/;"	f	class:OpenXcom::AlienDeployment
getBaseStats	Savegame/BattleUnit.cpp	/^UnitStats *BattleUnit::getBaseStats()$/;"	f	class:OpenXcom::BattleUnit
getBaseStats	Savegame/BattleUnit.cpp	/^const UnitStats *BattleUnit::getBaseStats() const$/;"	f	class:OpenXcom::BattleUnit
getBaseStorageItems	Savegame/SavedBattleGame.cpp	/^ItemContainer *SavedBattleGame::getBaseStorageItems()$/;"	f	class:OpenXcom::SavedBattleGame
getBaseTerrain	Mod/Texture.cpp	/^std::vector<TerrainCriteria> *Texture::getBaseTerrain()$/;"	f	class:OpenXcom::Texture
getBases	Savegame/SavedGame.cpp	/^const std::vector<Base*> *SavedGame::getBases() const$/;"	f	class:OpenXcom::SavedGame
getBases	Savegame/SavedGame.cpp	/^std::vector<Base*> *SavedGame::getBases()$/;"	f	class:OpenXcom::SavedGame
getBattleGame	Battlescape/BattlescapeState.cpp	/^BattlescapeGame *BattlescapeState::getBattleGame()$/;"	f	class:OpenXcom::BattlescapeState
getBattleGame	Savegame/SavedBattleGame.cpp	/^BattlescapeGame *SavedBattleGame::getBattleGame()$/;"	f	class:OpenXcom::SavedBattleGame
getBattleGame	Savegame/SavedBattleGame.cpp	/^const BattlescapeGame *SavedBattleGame::getBattleGame() const$/;"	f	class:OpenXcom::SavedBattleGame
getBattleState	Savegame/SavedBattleGame.cpp	/^BattlescapeState *SavedBattleGame::getBattleState()$/;"	f	class:OpenXcom::SavedBattleGame
getBattleState	Savegame/SavedBattleGame.cpp	/^const BattlescapeState *SavedBattleGame::getBattleState() const$/;"	f	class:OpenXcom::SavedBattleGame
getBattleType	Mod/RuleItem.cpp	/^BattleType RuleItem::getBattleType() const$/;"	f	class:OpenXcom::RuleItem
getBattleTypeScript	Mod/RuleItem.cpp	/^void getBattleTypeScript(const RuleItem *ri, int &ret)$/;"	f	namespace:OpenXcom::__anon21
getBattlescapeTerrainData	Mod/RuleCraft.cpp	/^RuleTerrain *RuleCraft::getBattlescapeTerrainData() const$/;"	f	class:OpenXcom::RuleCraft
getBattlescapeTerrainData	Mod/RuleUfo.cpp	/^RuleTerrain *RuleUfo::getBattlescapeTerrainData() const$/;"	f	class:OpenXcom::RuleUfo
getBelowTile	Savegame/SavedBattleGame.h	/^	inline Tile *getBelowTile(Tile* tile)$/;"	f	class:OpenXcom::SavedBattleGame
getBelowTile	Savegame/SavedBattleGame.h	/^	inline const Tile *getBelowTile(const Tile* tile) const$/;"	f	class:OpenXcom::SavedBattleGame
getBerserkChance	Mod/Unit.h	/^	int getBerserkChance() const { return _berserkChance; }$/;"	f	class:OpenXcom::Unit
getBerserkSounds	Mod/Unit.cpp	/^const std::vector<int> &Unit::getBerserkSounds() const$/;"	f	class:OpenXcom::Unit
getBigSprite	Mod/RuleItem.cpp	/^int RuleItem::getBigSprite() const$/;"	f	class:OpenXcom::RuleItem
getBigSprite	Savegame/BattleItem.cpp	/^const Surface *BattleItem::getBigSprite(const SurfaceSet *set, const SavedBattleGame *save, int animFrame) const$/;"	f	class:OpenXcom::BattleItem
getBigWall	Mod/MapData.cpp	/^int MapData::getBigWall() const$/;"	f	class:OpenXcom::MapData
getBigWallDir	Battlescape/TileEngine.cpp	/^bool getBigWallDir(const T& td, int dir)$/;"	f	namespace:OpenXcom::__anon45
getBlankFloorTile	Mod/MapDataSet.cpp	/^MapData *MapDataSet::getBlankFloorTile()$/;"	f	class:OpenXcom::MapDataSet
getBlastFlash	Battlescape/Map.cpp	/^bool Map::getBlastFlash() const$/;"	f	class:OpenXcom::Map
getBleedImmune	Mod/Armor.cpp	/^bool Armor::getBleedImmune(bool def) const$/;"	f	class:OpenXcom::Armor
getBlock	Mod/MapData.cpp	/^int MapData::getBlock(ItemDamageType type) const$/;"	f	class:OpenXcom::MapData
getBlockDir	Battlescape/TileEngine.cpp	/^bool getBlockDir(const T& td, int dir, int z)$/;"	f	namespace:OpenXcom::__anon45
getBlockDown	Battlescape/TileEngine.cpp	/^bool getBlockDown(const T& td)$/;"	f	namespace:OpenXcom::__anon45
getBlockNumber	Mod/MapScript.cpp	/^int MapScript::getBlockNumber()$/;"	f	class:OpenXcom::MapScript
getBlockUp	Battlescape/TileEngine.cpp	/^bool getBlockUp(const T& td)$/;"	f	namespace:OpenXcom::__anon45
getBlocks	Mod/MapScript.h	/^	const std::vector<int> *getBlocks() const {return &_blocks;};$/;"	f	class:OpenXcom::MapScript
getBlue	Engine/Scalers/xbrz.cpp	/^inline unsigned char getBlue (uint32_t pix) { return getByte<0>(pix); }$/;"	f	namespace:__anon10
getBonus	Mod/RuleStatBonus.cpp	/^int RuleStatBonus::getBonus(BattleActionAttack::ReadOnly attack, int externalBonuses) const$/;"	f	class:OpenXcom::RuleStatBonus
getBonus	Mod/RuleStatBonus.cpp	/^int RuleStatBonus::getBonus(const BattleUnit* unit, int externalBonuses) const$/;"	f	class:OpenXcom::RuleStatBonus
getBonusRaw	Mod/RuleStatBonus.h	/^	const std::vector<RuleStatBonusDataOrig> *getBonusRaw() const { return &_bonusOrig; }$/;"	f	class:OpenXcom::RuleStatBonus
getBonusStats	Mod/RuleCraftWeapon.cpp	/^const RuleCraftStats& RuleCraftWeapon::getBonusStats() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getBonusStatsScript	Mod/RuleStatBonus.cpp	/^struct getBonusStatsScript$/;"	s	namespace:OpenXcom::__anon24	file:
getBonuses	Savegame/Soldier.cpp	/^const std::vector<const RuleSoldierBonus*> *Soldier::getBonuses(const Mod *mod)$/;"	f	class:OpenXcom::Soldier
getBottomL	Engine/Scalers/xbrz.cpp	/^inline BlendType getBottomL(unsigned char b) { return static_cast<BlendType>(0x3 & (b >> 6)); }$/;"	f	namespace:__anon10
getBottomR	Engine/Scalers/xbrz.cpp	/^inline BlendType getBottomR(unsigned char b) { return static_cast<BlendType>(0x3 & (b >> 4)); }$/;"	f	namespace:__anon10
getBreakDownItems	Mod/RuleManufactureShortcut.h	/^	const std::vector<std::string>& getBreakDownItems() const { return _breakDownItems; }$/;"	f	class:OpenXcom::RuleManufactureShortcut
getBreakDownRequires	Mod/RuleManufactureShortcut.h	/^	bool getBreakDownRequires() const { return _breakDownRequires; }$/;"	f	class:OpenXcom::RuleManufactureShortcut
getBreakDownRequiresBaseFunc	Mod/RuleManufactureShortcut.h	/^	bool getBreakDownRequiresBaseFunc() const { return _breakDownRequiresBaseFunc; }$/;"	f	class:OpenXcom::RuleManufactureShortcut
getBreakOffTime	Mod/RuleUfo.cpp	/^int RuleUfo::getBreakOffTime() const$/;"	f	class:OpenXcom::RuleUfo
getBreathExhaleFrame	Savegame/BattleUnit.cpp	/^int BattleUnit::getBreathExhaleFrame() const$/;"	f	class:OpenXcom::BattleUnit
getBreathInhaleFrame	Savegame/BattleUnit.cpp	/^int BattleUnit::getBreathInhaleFrame() const$/;"	f	class:OpenXcom::BattleUnit
getBriefingData	Mod/AlienDeployment.cpp	/^BriefingData AlienDeployment::getBriefingData() const$/;"	f	class:OpenXcom::AlienDeployment
getBuffer	Engine/Surface.h	/^	Pixel* getBuffer() const$/;"	f	class:OpenXcom::SurfaceRaw
getBuffer	Engine/Surface.h	/^	Uint8* getBuffer()$/;"	f	class:OpenXcom::Surface
getBuffer	Engine/Surface.h	/^	const Uint8* getBuffer() const$/;"	f	class:OpenXcom::Surface
getBughuntLowMorale	Mod/Mod.h	/^	int getBughuntLowMorale() const { return _bughuntLowMorale; }$/;"	f	class:OpenXcom::Mod
getBughuntMaxEnemies	Mod/Mod.h	/^	int getBughuntMaxEnemies() const { return _bughuntMaxEnemies; }$/;"	f	class:OpenXcom::Mod
getBughuntMinTurn	Mod/AlienDeployment.cpp	/^int AlienDeployment::getBughuntMinTurn() const$/;"	f	class:OpenXcom::AlienDeployment
getBughuntMinTurn	Mod/Mod.h	/^	int getBughuntMinTurn() const { return _bughuntMinTurn; }$/;"	f	class:OpenXcom::Mod
getBughuntMinTurn	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getBughuntMinTurn() const$/;"	f	class:OpenXcom::SavedBattleGame
getBughuntMode	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::getBughuntMode() const$/;"	f	class:OpenXcom::SavedBattleGame
getBughuntRank	Mod/Mod.h	/^	int getBughuntRank() const { return _bughuntRank; }$/;"	f	class:OpenXcom::Mod
getBughuntTimeUnitsLeft	Mod/Mod.h	/^	int getBughuntTimeUnitsLeft() const { return _bughuntTimeUnitsLeft; }$/;"	f	class:OpenXcom::Mod
getBuildCost	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getBuildCost() const$/;"	f	class:OpenXcom::RuleBaseFacility
getBuildCostItems	Mod/RuleBaseFacility.cpp	/^const std::map<std::string, std::pair<int, int> >& RuleBaseFacility::getBuildCostItems() const$/;"	f	class:OpenXcom::RuleBaseFacility
getBuildInfiltrationBaseCloseToTheCountry	Mod/Mod.h	/^	bool getBuildInfiltrationBaseCloseToTheCountry() const { return _buildInfiltrationBaseCloseToTheCountry; }$/;"	f	class:OpenXcom::Mod
getBuildOverFacilities	Mod/RuleBaseFacility.h	/^	const std::vector<const RuleBaseFacility*> &getBuildOverFacilities() const { return _buildOverFacilities; }$/;"	f	class:OpenXcom::RuleBaseFacility
getBuildTime	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getBuildTime() const$/;"	f	class:OpenXcom::RuleBaseFacility
getBuildTime	Savegame/BaseFacility.cpp	/^int BaseFacility::getBuildTime() const$/;"	f	class:OpenXcom::BaseFacility
getBuildTimeReductionScaling	Mod/Mod.h	/^	int getBuildTimeReductionScaling() const { return _buildTimeReductionScaling; }$/;"	f	class:OpenXcom::Mod
getBuiltInWeapons	Mod/Armor.cpp	/^const std::vector<const RuleItem*> &Armor::getBuiltInWeapons() const$/;"	f	class:OpenXcom::Armor
getBuiltInWeapons	Mod/Unit.cpp	/^const std::vector<std::vector<const RuleItem*> > &Unit::getBuiltInWeapons() const$/;"	f	class:OpenXcom::Unit
getBulletSpeed	Mod/RuleItem.cpp	/^int RuleItem::getBulletSpeed() const$/;"	f	class:OpenXcom::RuleItem
getBulletSprite	Mod/RuleItem.cpp	/^int RuleItem::getBulletSprite() const$/;"	f	class:OpenXcom::RuleItem
getBuyCost	Mod/RuleCraft.cpp	/^int RuleCraft::getBuyCost() const$/;"	f	class:OpenXcom::RuleCraft
getBuyCost	Mod/RuleItem.cpp	/^int RuleItem::getBuyCost() const$/;"	f	class:OpenXcom::RuleItem
getBuyCost	Mod/RuleSoldier.cpp	/^int RuleSoldier::getBuyCost() const$/;"	f	class:OpenXcom::RuleSoldier
getBuyRequirements	Mod/RuleItem.cpp	/^const std::vector<const RuleResearch *> &RuleItem::getBuyRequirements() const$/;"	f	class:OpenXcom::RuleItem
getByte	Engine/Scalers/xbrz.cpp	/^unsigned char getByte(uint32_t val) { return static_cast<unsigned char>((val >> (8 * N)) & 0xff); }$/;"	f	namespace:__anon10
getCATFile	Mod/SoundDefinition.cpp	/^std::string SoundDefinition::getCATFile() const$/;"	f	class:OpenXcom::SoundDefinition
getCallsign	Savegame/Soldier.cpp	/^std::string Soldier::getCallsign(unsigned int maxLength) const$/;"	f	class:OpenXcom::Soldier
getCamera	Battlescape/Map.cpp	/^Camera *Map::getCamera()$/;"	f	class:OpenXcom::Map
getCamouflageAtDark	Mod/Armor.cpp	/^int Armor::getCamouflageAtDark() const$/;"	f	class:OpenXcom::Armor
getCamouflageAtDay	Mod/Armor.cpp	/^int Armor::getCamouflageAtDay() const$/;"	f	class:OpenXcom::Armor
getCanBeBuiltOver	Mod/RuleBaseFacility.cpp	/^bool RuleBaseFacility::getCanBeBuiltOver() const$/;"	f	class:OpenXcom::RuleBaseFacility
getCanBeUsedBy	Mod/Armor.cpp	/^bool Armor::getCanBeUsedBy(const RuleSoldier* soldier) const$/;"	f	class:OpenXcom::Armor
getCanBuildOverOtherFacility	Mod/RuleBaseFacility.cpp	/^BasePlacementErrors RuleBaseFacility::getCanBuildOverOtherFacility(const RuleBaseFacility* fac) const$/;"	f	class:OpenXcom::RuleBaseFacility
getCancelPact	Savegame/Country.cpp	/^bool Country::getCancelPact() const$/;"	f	class:OpenXcom::Country
getCapturable	Mod/Unit.cpp	/^bool Unit::getCapturable() const$/;"	f	class:OpenXcom::Unit
getCapturable	Savegame/BattleUnit.cpp	/^bool BattleUnit::getCapturable() const$/;"	f	class:OpenXcom::BattleUnit
getCarriedWeight	Savegame/BattleUnit.cpp	/^int BattleUnit::getCarriedWeight(BattleItem *draggingItem) const$/;"	f	class:OpenXcom::BattleUnit
getCatPos	Mod/RuleMusic.cpp	/^int RuleMusic::getCatPos() const$/;"	f	class:OpenXcom::RuleMusic
getCategories	Mod/RuleItem.cpp	/^const std::vector<std::string> &RuleItem::getCategories() const$/;"	f	class:OpenXcom::RuleItem
getCategory	Basescape/PurchaseState.cpp	/^std::string PurchaseState::getCategory(int sel) const$/;"	f	class:OpenXcom::PurchaseState
getCategory	Basescape/SellState.cpp	/^std::string SellState::getCategory(int sel) const$/;"	f	class:OpenXcom::SellState
getCategory	Basescape/TransferItemsState.cpp	/^std::string TransferItemsState::getCategory(int sel) const$/;"	f	class:OpenXcom::TransferItemsState
getCategory	Mod/RuleManufacture.cpp	/^const std::string &RuleManufacture::getCategory() const$/;"	f	class:OpenXcom::RuleManufacture
getCause	Savegame/SoldierDeath.cpp	/^const BattleUnitKills *SoldierDeath::getCause() const$/;"	f	class:OpenXcom::SoldierDeath
getCautiousReload	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getCautiousReload() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getCellText	Interface/TextList.cpp	/^std::string TextList::getCellText(size_t row, size_t column) const$/;"	f	class:OpenXcom::TextList
getCenterPosition	Battlescape/Camera.cpp	/^Position Camera::getCenterPosition()$/;"	f	class:OpenXcom::Camera
getChanceToStopRetaliation	Mod/Mod.h	/^	int getChanceToStopRetaliation() const { return _chanceToStopRetaliation; }$/;"	f	class:OpenXcom::Mod
getChancesOfExecution	Mod/MapScript.h	/^	int getChancesOfExecution() const {return _executionChances;};$/;"	f	class:OpenXcom::MapScript
getChar	Engine/Font.cpp	/^SurfaceCrop Font::getChar(UCode c) const$/;"	f	class:OpenXcom::Font
getCharClassOf	Engine/Script.cpp	/^CharClasses getCharClassOf(char c)$/;"	f	namespace:OpenXcom::__anon8
getCharSize	Engine/Font.cpp	/^SDL_Rect Font::getCharSize(UCode c) const$/;"	f	class:OpenXcom::Font
getCharging	Savegame/BattleUnit.cpp	/^BattleUnit *BattleUnit::getCharging()$/;"	f	class:OpenXcom::BattleUnit
getCheatTurn	Mod/AlienDeployment.cpp	/^int AlienDeployment::getCheatTurn() const$/;"	f	class:OpenXcom::AlienDeployment
getChronoTrigger	Mod/AlienDeployment.cpp	/^ChronoTrigger AlienDeployment::getChronoTrigger() const$/;"	f	class:OpenXcom::AlienDeployment
getChronoTrigger	Savegame/SavedBattleGame.cpp	/^ChronoTrigger SavedBattleGame::getChronoTrigger() const$/;"	f	class:OpenXcom::SavedBattleGame
getCities	Mod/RuleRegion.cpp	/^std::vector<City*> *RuleRegion::getCities()$/;"	f	class:OpenXcom::RuleRegion
getCity	Savegame/MissionSite.cpp	/^std::string MissionSite::getCity() const$/;"	f	class:OpenXcom::MissionSite
getCivilianRecoveryType	Mod/Unit.h	/^	const std::string &getCivilianRecoveryType() const { return _civilianRecoveryType; }$/;"	f	class:OpenXcom::Unit
getCivilianSpawnNodeRank	Mod/AlienDeployment.h	/^	int getCivilianSpawnNodeRank() const { return _civilianSpawnNodeRank; }$/;"	f	class:OpenXcom::AlienDeployment
getCivilianTypes	Mod/RuleTerrain.cpp	/^std::vector<std::string> RuleTerrain::getCivilianTypes() const$/;"	f	class:OpenXcom::RuleTerrain
getCivilians	Mod/AlienDeployment.cpp	/^int AlienDeployment::getCivilians() const$/;"	f	class:OpenXcom::AlienDeployment
getCiviliansByType	Mod/AlienDeployment.cpp	/^const std::map<std::string, int> &AlienDeployment::getCiviliansByType() const$/;"	f	class:OpenXcom::AlienDeployment
getClipItem	Mod/RuleCraftWeapon.cpp	/^const RuleItem* RuleCraftWeapon::getClipItem() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getClipSize	Mod/RuleItem.cpp	/^int RuleItem::getClipSize() const$/;"	f	class:OpenXcom::RuleItem
getClipsLoaded	Savegame/CraftWeapon.cpp	/^int CraftWeapon::getClipsLoaded() const$/;"	f	class:OpenXcom::CraftWeapon
getCloseQuartersAccuracyGlobal	Mod/Mod.h	/^	int getCloseQuartersAccuracyGlobal() const { return _closeQuartersAccuracyGlobal; }$/;"	f	class:OpenXcom::Mod
getCloseQuartersEnergyCostGlobal	Mod/Mod.h	/^	int getCloseQuartersEnergyCostGlobal() const { return _closeQuartersEnergyCostGlobal; }$/;"	f	class:OpenXcom::Mod
getCloseQuartersMultiplier	Mod/RuleItem.cpp	/^int RuleItem::getCloseQuartersMultiplier(BattleActionAttack::ReadOnly attack) const$/;"	f	class:OpenXcom::RuleItem
getCloseQuartersMultiplierRaw	Mod/RuleItem.h	/^	const RuleStatBonus *getCloseQuartersMultiplierRaw() const { return &_closeQuartersMulti; }$/;"	f	class:OpenXcom::RuleItem
getCloseQuartersSneakUpGlobal	Mod/Mod.h	/^	int getCloseQuartersSneakUpGlobal() const { return _closeQuartersSneakUpGlobal; }$/;"	f	class:OpenXcom::Mod
getCloseQuartersTuCostGlobal	Mod/Mod.h	/^	int getCloseQuartersTuCostGlobal() const { return _closeQuartersTuCostGlobal; }$/;"	f	class:OpenXcom::Mod
getColor	Battlescape/Particle.h	/^	Uint8 getColor() const { return _color; }$/;"	f	class:OpenXcom::Particle
getColor	Interface/Bar.cpp	/^Uint8 Bar::getColor() const$/;"	f	class:OpenXcom::Bar
getColor	Interface/BattlescapeButton.cpp	/^Uint8 BattlescapeButton::getColor() const$/;"	f	class:OpenXcom::BattlescapeButton
getColor	Interface/ComboBox.cpp	/^Uint8 ComboBox::getColor() const$/;"	f	class:OpenXcom::ComboBox
getColor	Interface/Cursor.cpp	/^Uint8 Cursor::getColor() const$/;"	f	class:OpenXcom::Cursor
getColor	Interface/Frame.cpp	/^Uint8 Frame::getColor() const$/;"	f	class:OpenXcom::Frame
getColor	Interface/ImageButton.cpp	/^Uint8 ImageButton::getColor() const$/;"	f	class:OpenXcom::ImageButton
getColor	Interface/NumberText.cpp	/^Uint8 NumberText::getColor() const$/;"	f	class:OpenXcom::NumberText
getColor	Interface/ScrollBar.cpp	/^Uint8 ScrollBar::getColor() const$/;"	f	class:OpenXcom::ScrollBar
getColor	Interface/Slider.cpp	/^Uint8 Slider::getColor() const$/;"	f	class:OpenXcom::Slider
getColor	Interface/Text.cpp	/^Uint8 Text::getColor() const$/;"	f	class:OpenXcom::Text
getColor	Interface/TextButton.cpp	/^Uint8 TextButton::getColor() const$/;"	f	class:OpenXcom::TextButton
getColor	Interface/TextEdit.cpp	/^Uint8 TextEdit::getColor() const$/;"	f	class:OpenXcom::TextEdit
getColor	Interface/TextList.cpp	/^Uint8 TextList::getColor() const$/;"	f	class:OpenXcom::TextList
getColor	Interface/Window.cpp	/^Uint8 Window::getColor() const$/;"	f	class:OpenXcom::Window
getColorCount	Engine/Palette.h	/^	int getColorCount() const { return _count; }$/;"	f	class:OpenXcom::Palette
getColors	Engine/Palette.cpp	/^SDL_Color *Palette::getColors(int offset) const$/;"	f	class:OpenXcom::Palette
getColumnX	Interface/TextList.cpp	/^int TextList::getColumnX(size_t column) const$/;"	f	class:OpenXcom::TextList
getComboBox	Interface/TextList.cpp	/^ComboBox *TextList::getComboBox() const$/;"	f	class:OpenXcom::TextList
getCommendation	Mod/Mod.cpp	/^RuleCommendations *Mod::getCommendation(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getCommendationsList	Mod/Mod.cpp	/^const std::map<std::string, RuleCommendations *> &Mod::getCommendationsList() const$/;"	f	class:OpenXcom::Mod
getCompatibleAmmoForSlot	Mod/RuleItem.cpp	/^const std::vector<const RuleItem*> *RuleItem::getCompatibleAmmoForSlot(int slot) const$/;"	f	class:OpenXcom::RuleItem
getCompatibleBattleType	Mod/RuleSkill.h	/^	BattleType getCompatibleBattleType() const { return _compatibleBattleType; }$/;"	f	class:OpenXcom::RuleSkill
getCompatibleWeapons	Mod/RuleSkill.h	/^	const std::vector<const RuleItem*>& getCompatibleWeapons() const { return _compatibleWeapons; }$/;"	f	class:OpenXcom::RuleSkill
getCondition	Mod/StatString.cpp	/^StatStringCondition *StatString::getCondition(const std::string &conditionName, const YAML::Node &node)$/;"	f	class:OpenXcom::StatString
getConditionName	Mod/StatStringCondition.cpp	/^std::string StatStringCondition::getConditionName() const$/;"	f	class:OpenXcom::StatStringCondition
getConditionalRecoveredItems	Savegame/SavedBattleGame.cpp	/^std::vector<BattleItem*> *SavedBattleGame::getConditionalRecoveredItems()$/;"	f	class:OpenXcom::SavedBattleGame
getConditionals	Mod/MapScript.h	/^	const std::vector<int> *getConditionals() const {return &_conditionals;};$/;"	f	class:OpenXcom::MapScript
getConditionals	Mod/RuleMissionScript.cpp	/^const std::vector<int> &RuleMissionScript::getConditionals() const$/;"	f	class:OpenXcom::RuleMissionScript
getConditions	Mod/StatString.cpp	/^const std::vector<StatStringCondition*> &StatString::getConditions() const$/;"	f	class:OpenXcom::StatString
getConfigAimed	Mod/RuleItem.cpp	/^const RuleItemAction *RuleItem::getConfigAimed() const$/;"	f	class:OpenXcom::RuleItem
getConfigAuto	Mod/RuleItem.cpp	/^const RuleItemAction *RuleItem::getConfigAuto() const$/;"	f	class:OpenXcom::RuleItem
getConfigFolder	Engine/Options.cpp	/^std::string getConfigFolder()$/;"	f	namespace:OpenXcom::Options
getConfigMelee	Mod/RuleItem.cpp	/^const RuleItemAction *RuleItem::getConfigMelee() const$/;"	f	class:OpenXcom::RuleItem
getConfigSnap	Mod/RuleItem.cpp	/^const RuleItemAction *RuleItem::getConfigSnap() const$/;"	f	class:OpenXcom::RuleItem
getConstantAnimation	Mod/Armor.cpp	/^bool Armor::getConstantAnimation() const$/;"	f	class:OpenXcom::Armor
getContents	Savegame/ItemContainer.cpp	/^std::map<std::string, int> *ItemContainer::getContents()$/;"	f	class:OpenXcom::ItemContainer
getControl	Menu/OptionsControlsState.cpp	/^OptionInfo *OptionsControlsState::getControl(size_t sel)$/;"	f	class:OpenXcom::OptionsControlsState
getControlTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getControlTotal() const$/;"	f	class:OpenXcom::SoldierDiary
getConverter	Mod/Mod.cpp	/^RuleConverter *Mod::getConverter() const$/;"	f	class:OpenXcom::Mod
getCorpseBattlescape	Mod/Armor.cpp	/^const std::vector<const RuleItem*> &Armor::getCorpseBattlescape() const$/;"	f	class:OpenXcom::Armor
getCorpseGeoscape	Mod/Armor.cpp	/^const RuleItem* Armor::getCorpseGeoscape() const$/;"	f	class:OpenXcom::Armor
getCost	Mod/RuleInventory.cpp	/^int RuleInventory::getCost(const RuleInventory* slot) const$/;"	f	class:OpenXcom::RuleInventory
getCost	Mod/RuleResearch.cpp	/^int RuleResearch::getCost() const$/;"	f	class:OpenXcom::RuleResearch
getCost	Mod/RuleSkill.h	/^	const RuleItemUseCost& getCost() const { return _cost; }$/;"	f	class:OpenXcom::RuleSkill
getCost	Mod/RuleSoldierTransformation.cpp	/^int RuleSoldierTransformation::getCost() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getCost	Savegame/ResearchProject.cpp	/^int ResearchProject::getCost() const$/;"	f	class:OpenXcom::ResearchProject
getCostAimed	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getCostAimed() const$/;"	f	class:OpenXcom::RuleItem
getCostAuto	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getCostAuto() const$/;"	f	class:OpenXcom::RuleItem
getCostMelee	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getCostMelee() const$/;"	f	class:OpenXcom::RuleItem
getCostMind	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getCostMind() const$/;"	f	class:OpenXcom::RuleItem
getCostPanic	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getCostPanic() const$/;"	f	class:OpenXcom::RuleItem
getCostPrime	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getCostPrime() const$/;"	f	class:OpenXcom::RuleItem
getCostSnap	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getCostSnap() const$/;"	f	class:OpenXcom::RuleItem
getCostThrow	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getCostThrow() const$/;"	f	class:OpenXcom::RuleItem
getCostUnprime	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getCostUnprime() const$/;"	f	class:OpenXcom::RuleItem
getCostUse	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getCostUse() const$/;"	f	class:OpenXcom::RuleItem
getCounterAll	Mod/AlienDeployment.h	/^	const std::string& getCounterAll() const { return _counterAll; }$/;"	f	class:OpenXcom::AlienDeployment
getCounterDespawn	Mod/AlienDeployment.h	/^	const std::string& getCounterDespawn() const { return _counterDespawn; }$/;"	f	class:OpenXcom::AlienDeployment
getCounterFailure	Mod/AlienDeployment.h	/^	const std::string& getCounterFailure() const { return _counterFailure; }$/;"	f	class:OpenXcom::AlienDeployment
getCounterMax	Mod/RuleArcScript.h	/^	int getCounterMax() const { return _counterMax; }$/;"	f	class:OpenXcom::RuleArcScript
getCounterMax	Mod/RuleEventScript.h	/^	int getCounterMax() const { return _counterMax; }$/;"	f	class:OpenXcom::RuleEventScript
getCounterMax	Mod/RuleMissionScript.h	/^	int getCounterMax() const { return _counterMax; }$/;"	f	class:OpenXcom::RuleMissionScript
getCounterMin	Mod/RuleArcScript.h	/^	int getCounterMin() const { return _counterMin; }$/;"	f	class:OpenXcom::RuleArcScript
getCounterMin	Mod/RuleEventScript.h	/^	int getCounterMin() const { return _counterMin; }$/;"	f	class:OpenXcom::RuleEventScript
getCounterMin	Mod/RuleMissionScript.h	/^	int getCounterMin() const { return _counterMin; }$/;"	f	class:OpenXcom::RuleMissionScript
getCounterSuccess	Mod/AlienDeployment.h	/^	const std::string& getCounterSuccess() const { return _counterSuccess; }$/;"	f	class:OpenXcom::AlienDeployment
getCountries	Mod/RuleConverter.h	/^	const std::vector<std::string> &getCountries() const { return _countries; }$/;"	f	class:OpenXcom::RuleConverter
getCountries	Savegame/SavedGame.cpp	/^std::vector<Country*> *SavedGame::getCountries()$/;"	f	class:OpenXcom::SavedGame
getCountriesList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getCountriesList() const$/;"	f	class:OpenXcom::Mod
getCountry	Mod/Mod.cpp	/^RuleCountry *Mod::getCountry(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getCountry	Mod/SoldierNamePool.h	/^	const std::string& getCountry() const { return _country; }$/;"	f	class:OpenXcom::SoldierNamePool
getCountryFunding	Savegame/SavedGame.cpp	/^int SavedGame::getCountryFunding() const$/;"	f	class:OpenXcom::SavedGame
getCountryTotal	Savegame/SoldierDiary.cpp	/^std::map<std::string, int> SoldierDiary::getCountryTotal(std::vector<MissionStatistics*> *missionStatistics) const$/;"	f	class:OpenXcom::SoldierDiary
getCraft	Geoscape/DogfightState.cpp	/^Craft *DogfightState::getCraft() const$/;"	f	class:OpenXcom::DogfightState
getCraft	Mod/Mod.cpp	/^RuleCraft *Mod::getCraft(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getCraft	Savegame/Soldier.cpp	/^Craft *Soldier::getCraft() const$/;"	f	class:OpenXcom::Soldier
getCraft	Savegame/Transfer.cpp	/^Craft *Transfer::getCraft()$/;"	f	class:OpenXcom::Transfer
getCraftCount	Savegame/Base.cpp	/^int Base::getCraftCount(const RuleCraft *craft) const$/;"	f	class:OpenXcom::Base
getCraftCountForProduction	Savegame/Base.cpp	/^int Base::getCraftCountForProduction(const RuleCraft *craft) const$/;"	f	class:OpenXcom::Base
getCraftFollowers	Savegame/Target.cpp	/^std::vector<Craft*> Target::getCraftFollowers() const$/;"	f	class:OpenXcom::Target
getCraftForDrawing	Savegame/BaseFacility.cpp	/^Craft *BaseFacility::getCraftForDrawing() const$/;"	f	class:OpenXcom::BaseFacility
getCraftForPreview	Savegame/SavedBattleGame.h	/^	const Craft* getCraftForPreview() const { return _craftForPreview; }$/;"	f	class:OpenXcom::SavedBattleGame
getCraftInventoryTile	Mod/RuleCraft.cpp	/^const std::vector<int> &RuleCraft::getCraftInventoryTile() const$/;"	f	class:OpenXcom::RuleCraft
getCraftMaintenance	Savegame/Base.cpp	/^int Base::getCraftMaintenance() const$/;"	f	class:OpenXcom::Base
getCraftName	Mod/MapScript.cpp	/^std::string MapScript::getCraftName()$/;"	f	class:OpenXcom::MapScript
getCraftPos	Battlescape/BattlescapeGenerator.h	/^	SDL_Rect getCraftPos() const { return _craftPos; }$/;"	f	class:OpenXcom::BattlescapeGenerator
getCraftReplacement	Mod/RuleStartingCondition.cpp	/^const RuleCraft* RuleStartingCondition::getCraftReplacement(const RuleCraft* sourceCraft, const RuleCraft* mapScriptCraft) const$/;"	f	class:OpenXcom::RuleStartingCondition
getCraftStats	Savegame/Craft.cpp	/^const RuleCraftStats& Craft::getCraftStats() const$/;"	f	class:OpenXcom::Craft
getCraftStats	Savegame/Ufo.cpp	/^const RuleUfoStats& Ufo::getCraftStats() const$/;"	f	class:OpenXcom::Ufo
getCraftString	Savegame/Soldier.cpp	/^std::string Soldier::getCraftString(Language *lang, const BaseSumDailyRecovery& recovery) const$/;"	f	class:OpenXcom::Soldier
getCraftTiles	Savegame/SavedBattleGame.h	/^	const std::vector<Position>& getCraftTiles() const { return _craftTiles; }$/;"	f	class:OpenXcom::SavedBattleGame
getCraftWeapon	Mod/Mod.cpp	/^RuleCraftWeapon *Mod::getCraftWeapon(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getCraftWeapons	Mod/RuleConverter.h	/^	const std::vector<std::string> &getCraftWeapons() const { return _craftWeapons; }$/;"	f	class:OpenXcom::RuleConverter
getCraftWeaponsList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getCraftWeaponsList() const$/;"	f	class:OpenXcom::Mod
getCraftZ	Battlescape/BattlescapeGenerator.h	/^	int getCraftZ() const { return _craftZ; }$/;"	f	class:OpenXcom::BattlescapeGenerator
getCrafts	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getCrafts() const$/;"	f	class:OpenXcom::RuleBaseFacility
getCrafts	Mod/RuleConverter.h	/^	const std::vector<std::string> &getCrafts() const { return _crafts; }$/;"	f	class:OpenXcom::RuleConverter
getCrafts	Savegame/Base.h	/^	const std::vector<Craft*> *getCrafts() const { return &_crafts; }$/;"	f	class:OpenXcom::Base
getCrafts	Savegame/Base.h	/^	std::vector<Craft*> *getCrafts() {	return &_crafts; }$/;"	f	class:OpenXcom::Base
getCraftsList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getCraftsList() const$/;"	f	class:OpenXcom::Mod
getCrashId	Savegame/Ufo.cpp	/^int Ufo::getCrashId() const$/;"	f	class:OpenXcom::Ufo
getCrashMarker	Mod/RuleUfo.cpp	/^int RuleUfo::getCrashMarker() const$/;"	f	class:OpenXcom::RuleUfo
getCreatesMeleeThreat	Mod/Armor.cpp	/^bool Armor::getCreatesMeleeThreat(bool def) const$/;"	f	class:OpenXcom::Armor
getCrewEmergencyEvacuationSurvivalChance	Mod/Mod.h	/^	int getCrewEmergencyEvacuationSurvivalChance() const { return _crewEmergencyEvacuationSurvivalChance; }$/;"	f	class:OpenXcom::Mod
getCrews	Mod/RuleConverter.h	/^	const std::vector<std::string> &getCrews() const { return _crews; }$/;"	f	class:OpenXcom::RuleConverter
getCriteria	Mod/RuleCommendations.cpp	/^const std::map<std::string, std::vector<int> > *RuleCommendations::getCriteria() const$/;"	f	class:OpenXcom::RuleCommendations
getCrop	Engine/Surface.cpp	/^SurfaceCrop Surface::getCrop() const$/;"	f	class:OpenXcom::Surface
getCrop	Engine/Surface.h	/^	SDL_Rect* getCrop()$/;"	f	class:OpenXcom::SurfaceCrop
getCrossingGroup	Mod/MapScript.h	/^	int getCrossingGroup() const { return _crossingGroup; };$/;"	f	class:OpenXcom::MapScript
getCtrlPressedFlag	Engine/Game.h	/^	bool getCtrlPressedFlag() const { return _ctrl; }$/;"	f	class:OpenXcom::Game
getCurrPos	Engine/Script.cpp	/^ProgPos ParserWriter::getCurrPos() const$/;"	f	class:OpenXcom::ParserWriter
getCurrentAction	Battlescape/BattlescapeGame.cpp	/^BattleAction *BattlescapeGame::getCurrentAction()$/;"	f	class:OpenXcom::BattlescapeGame
getCurrentAmbienceDelay	Savegame/SavedBattleGame.h	/^	int getCurrentAmbienceDelay() const { return _currentAmbienceDelay; }$/;"	f	class:OpenXcom::SavedBattleGame
getCurrentArticle	Ufopaedia/ArticleState.h	/^		ArticleDefinition* getCurrentArticle() const$/;"	f	struct:OpenXcom::ArticleCommonState
getCurrentFrame	Battlescape/Explosion.cpp	/^int Explosion::getCurrentFrame() const$/;"	f	class:OpenXcom::Explosion
getCurrentItemId	Savegame/SavedBattleGame.cpp	/^int *SavedBattleGame::getCurrentItemId()$/;"	f	class:OpenXcom::SavedBattleGame
getCurrentMusicTrack	Mod/Mod.h	/^	const std::string& getCurrentMusicTrack() const { return _currentMusicTrack; }$/;"	f	class:OpenXcom::Mod
getCurrentScore	Savegame/SavedGame.cpp	/^int SavedGame::getCurrentScore(int monthsPassed) const$/;"	f	class:OpenXcom::SavedGame
getCurrentStats	Mod/StatString.cpp	/^std::map<std::string, int> StatString::getCurrentStats(UnitStats &currentStats)$/;"	f	class:OpenXcom::StatString
getCurrentStats	Savegame/Soldier.cpp	/^UnitStats *Soldier::getCurrentStats()$/;"	f	class:OpenXcom::Soldier
getCurrentWaypoints	Savegame/BattleItem.cpp	/^int BattleItem::getCurrentWaypoints() const$/;"	f	class:OpenXcom::BattleItem
getCursor	Engine/Game.h	/^	Cursor *getCursor() const { return _cursor; }$/;"	f	class:OpenXcom::Game
getCursorLeftBlackBand	Engine/Screen.cpp	/^int Screen::getCursorLeftBlackBand() const$/;"	f	class:OpenXcom::Screen
getCursorTopBlackBand	Engine/Screen.cpp	/^int Screen::getCursorTopBlackBand() const$/;"	f	class:OpenXcom::Screen
getCursorType	Battlescape/Map.cpp	/^CursorType Map::getCursorType() const$/;"	f	class:OpenXcom::Map
getCustomArmorPreviewIndex	Mod/Armor.cpp	/^const std::vector<int> &Armor::getCustomArmorPreviewIndex() const$/;"	f	class:OpenXcom::Armor
getCustomBaseFacilities	Mod/Mod.cpp	/^std::vector<RuleBaseFacility*> Mod::getCustomBaseFacilities(GameDifficulty diff) const$/;"	f	class:OpenXcom::Mod
getCustomDeployment	Savegame/SavedBattleGame.cpp	/^const RuleCraftDeployment& SavedBattleGame::getCustomDeployment(const RuleCraft* rule) const$/;"	f	class:OpenXcom::SavedBattleGame
getCustomItemPreviewIndex	Mod/RuleItem.cpp	/^const std::vector<int> &RuleItem::getCustomItemPreviewIndex() const$/;"	f	class:OpenXcom::RuleItem
getCustomPalettes	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getCustomPalettes() const$/;"	f	class:OpenXcom::Mod
getCustomPreviewType	Mod/RuleCraft.cpp	/^const std::string& RuleCraft::getCustomPreviewType() const$/;"	f	class:OpenXcom::RuleCraft
getCustomPreviewTypeRaw	Mod/RuleCraft.cpp	/^const std::string& RuleCraft::getCustomPreviewTypeRaw() const$/;"	f	class:OpenXcom::RuleCraft
getCustomRuleCraftDeployments	Savegame/SavedGame.h	/^	std::map<std::string, RuleCraftDeployment>& getCustomRuleCraftDeployments() { return _customRuleCraftDeployments; }$/;"	f	class:OpenXcom::SavedGame
getCustomSoldierDeployment	Savegame/Craft.h	/^	std::map<int, SoldierDeploymentData>& getCustomSoldierDeployment() { return _customSoldierDeployment; };$/;"	f	class:OpenXcom::Craft
getCustomTrainingFactor	Mod/Mod.h	/^	int getCustomTrainingFactor() const { return _customTrainingFactor; }$/;"	f	class:OpenXcom::Mod
getCustomUfoName	Mod/AlienDeployment.h	/^	const std::string& getCustomUfoName() const { return _customUfo; }$/;"	f	class:OpenXcom::AlienDeployment
getCustomVehicleDeployment	Savegame/Craft.h	/^	std::vector<VehicleDeploymentData>& getCustomVehicleDeployment() { return _customVehicleDeployment; };$/;"	f	class:OpenXcom::Craft
getCutscene	Mod/RuleResearch.cpp	/^const std::string & RuleResearch::getCutscene() const$/;"	f	class:OpenXcom::RuleResearch
getDX	Engine/Screen.cpp	/^int Screen::getDX() const$/;"	f	class:OpenXcom::Screen
getDY	Engine/Screen.cpp	/^int Screen::getDY() const$/;"	f	class:OpenXcom::Screen
getDailyDogfightExperienceCache	Savegame/Soldier.cpp	/^UnitStats* Soldier::getDailyDogfightExperienceCache()$/;"	f	class:OpenXcom::Soldier
getDamage	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getDamage() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getDamage	Savegame/Craft.cpp	/^int Craft::getDamage() const$/;"	f	class:OpenXcom::Craft
getDamage	Savegame/CraftWeaponProjectile.cpp	/^int CraftWeaponProjectile::getDamage() const$/;"	f	class:OpenXcom::CraftWeaponProjectile
getDamage	Savegame/Ufo.cpp	/^int Ufo::getDamage() const$/;"	f	class:OpenXcom::Ufo
getDamageBonusRaw	Mod/RuleItem.h	/^	const RuleStatBonus *getDamageBonusRaw() const { return &_damageBonus; }$/;"	f	class:OpenXcom::RuleItem
getDamageHelper	Mod/RuleDamageType.cpp	/^int getDamageHelper(bool random, float multipler, int damage)$/;"	f	namespace:OpenXcom::__anon31
getDamageMax	Savegame/Craft.cpp	/^int Craft::getDamageMax() const$/;"	f	class:OpenXcom::Craft
getDamageMaxScript	Savegame/Ufo.cpp	/^void getDamageMaxScript(const Ufo *u, int &ret)$/;"	f	namespace:OpenXcom::__anon32
getDamageModifier	Mod/Armor.cpp	/^float Armor::getDamageModifier(ItemDamageType dt) const$/;"	f	class:OpenXcom::Armor
getDamageModifiersRaw	Mod/Armor.cpp	/^const std::vector<float> Armor::getDamageModifiersRaw() const$/;"	f	class:OpenXcom::Armor
getDamagePercentage	Savegame/Craft.cpp	/^int Craft::getDamagePercentage() const$/;"	f	class:OpenXcom::Craft
getDamagePercentage	Savegame/Ufo.cpp	/^int Ufo::getDamagePercentage() const$/;"	f	class:OpenXcom::Ufo
getDamageToScript	Mod/RuleItem.cpp	/^void getDamageToScript(const RuleDamageType* rdt, int &ret, int value)$/;"	f	namespace:OpenXcom::__anon21
getDamageType	Mod/Mod.cpp	/^const RuleDamageType *Mod::getDamageType(ItemDamageType type) const$/;"	f	class:OpenXcom::Mod
getDamageType	Mod/RuleItem.cpp	/^const RuleDamageType *RuleItem::getDamageType() const$/;"	f	class:OpenXcom::RuleItem
getDamageTypeText	Ufopaedia/ArticleState.cpp	/^	std::string ArticleState::getDamageTypeText(ItemDamageType dt) const$/;"	f	class:OpenXcom::ArticleState
getDamageTypeTextColor	Ufopaedia/ArticleStateItem.cpp	/^	int ArticleStateItem::getDamageTypeTextColor(ItemDamageType dt)$/;"	f	class:OpenXcom::ArticleStateItem
getDangerous	Savegame/Tile.cpp	/^bool Tile::getDangerous() const$/;"	f	class:OpenXcom::Tile
getDataFolder	Engine/Options.cpp	/^std::string getDataFolder()$/;"	f	namespace:OpenXcom::Options
getDataList	Engine/Options.cpp	/^const std::vector<std::string> &getDataList()$/;"	f	namespace:OpenXcom::Options
getDataset	Mod/MapData.cpp	/^MapDataSet *MapData::getDataset() const$/;"	f	class:OpenXcom::MapData
getDateModified	Engine/CrossPlatform.cpp	/^time_t getDateModified(const std::string &path)$/;"	f	namespace:OpenXcom::CrossPlatform
getDay	Savegame/GameTime.cpp	/^int GameTime::getDay() const$/;"	f	class:OpenXcom::GameTime
getDayString	Savegame/GameTime.cpp	/^std::string GameTime::getDayString(Language *lang) const$/;"	f	class:OpenXcom::GameTime
getDaylight	Savegame/GameTime.cpp	/^double GameTime::getDaylight() const$/;"	f	class:OpenXcom::GameTime
getDaylightString	Savegame/MissionStatistics.h	/^	std::string getDaylightString(const Mod* mod) const$/;"	f	struct:OpenXcom::MissionStatistics
getDaysPastEpochScript	Savegame/SavedGame.cpp	/^void getDaysPastEpochScript(const GameTime* p, int& val)$/;"	f	namespace:OpenXcom::__anon42
getDaysWoundedTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getDaysWoundedTotal() const$/;"	f	class:OpenXcom::SoldierDiary
getDeadSoldiers	Savegame/SavedGame.cpp	/^std::vector<Soldier*> *SavedGame::getDeadSoldiers()$/;"	f	class:OpenXcom::SavedGame
getDeath	Savegame/Soldier.cpp	/^SoldierDeath *Soldier::getDeath() const$/;"	f	class:OpenXcom::Soldier
getDeathFrames	Mod/Armor.cpp	/^int Armor::getDeathFrames() const$/;"	f	class:OpenXcom::Armor
getDeathSounds	Mod/Unit.cpp	/^const std::vector<int> &Unit::getDeathSounds() const$/;"	f	class:OpenXcom::Unit
getDeathSounds	Savegame/BattleUnit.cpp	/^const std::vector<int> &BattleUnit::getDeathSounds() const$/;"	f	class:OpenXcom::BattleUnit
getDebugMode	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::getDebugMode() const$/;"	f	class:OpenXcom::SavedBattleGame
getDebugMode	Savegame/SavedGame.cpp	/^bool SavedGame::getDebugMode() const$/;"	f	class:OpenXcom::SavedGame
getDecorationDescription	Savegame/SoldierDiary.cpp	/^std::string SoldierCommendations::getDecorationDescription() const$/;"	f	class:OpenXcom::SoldierCommendations
getDecorationLevelInt	Savegame/SoldierDiary.cpp	/^int SoldierCommendations::getDecorationLevelInt() const$/;"	f	class:OpenXcom::SoldierCommendations
getDecorationLevelName	Savegame/SoldierDiary.cpp	/^std::string SoldierCommendations::getDecorationLevelName(int skipCounter) const$/;"	f	class:OpenXcom::SoldierCommendations
getDecreaseCounter	Mod/RuleResearch.h	/^	const std::vector<std::string>& getDecreaseCounter() const { return _decreaseCounter; }$/;"	f	class:OpenXcom::RuleResearch
getDecreaseCounterAll	Mod/AlienDeployment.h	/^	const std::string& getDecreaseCounterAll() const { return _decreaseCounterAll; }$/;"	f	class:OpenXcom::AlienDeployment
getDecreaseCounterDespawn	Mod/AlienDeployment.h	/^	const std::string& getDecreaseCounterDespawn() const { return _decreaseCounterDespawn; }$/;"	f	class:OpenXcom::AlienDeployment
getDecreaseCounterFailure	Mod/AlienDeployment.h	/^	const std::string& getDecreaseCounterFailure() const { return _decreaseCounterFailure; }$/;"	f	class:OpenXcom::AlienDeployment
getDecreaseCounterSuccess	Mod/AlienDeployment.h	/^	const std::string& getDecreaseCounterSuccess() const { return _decreaseCounterSuccess; }$/;"	f	class:OpenXcom::AlienDeployment
getDefault	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getDefault(const RuleItemUseCost& a, const RuleItemUseCost& b) const$/;"	f	class:OpenXcom::RuleItem
getDefaultArmor	Mod/RuleSoldier.cpp	/^Armor* RuleSoldier::getDefaultArmor() const$/;"	f	class:OpenXcom::RuleSoldier
getDefaultInventorySlot	Mod/RuleItem.h	/^	const RuleInventory* getDefaultInventorySlot() const { return _defaultInventorySlot; }$/;"	f	class:OpenXcom::RuleItem
getDefaultInventorySlotX	Mod/RuleItem.h	/^	int getDefaultInventorySlotX() const { return _defaultInvSlotX; }$/;"	f	class:OpenXcom::RuleItem
getDefaultInventorySlotY	Mod/RuleItem.h	/^	int getDefaultInventorySlotY() const { return _defaultInvSlotY; }$/;"	f	class:OpenXcom::RuleItem
getDefaultName	Savegame/Craft.cpp	/^std::string Craft::getDefaultName(Language *lang) const$/;"	f	class:OpenXcom::Craft
getDefaultName	Savegame/Target.cpp	/^std::string Target::getDefaultName(Language *lang) const$/;"	f	class:OpenXcom::Target
getDefaultName	Savegame/Ufo.cpp	/^std::string Ufo::getDefaultName(Language *lang) const$/;"	f	class:OpenXcom::Ufo
getDefaultStartingBase	Mod/Mod.cpp	/^const YAML::Node &Mod::getDefaultStartingBase() const$/;"	f	class:OpenXcom::Mod
getDefeatFunds	Mod/Mod.cpp	/^int Mod::getDefeatFunds() const$/;"	f	class:OpenXcom::Mod
getDefeatScore	Mod/Mod.cpp	/^int Mod::getDefeatScore() const$/;"	f	class:OpenXcom::Mod
getDefenseValue	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getDefenseValue() const$/;"	f	class:OpenXcom::RuleBaseFacility
getDefenseValue	Savegame/Base.cpp	/^int Base::getDefenseValue() const$/;"	f	class:OpenXcom::Base
getDefenses	Savegame/Base.cpp	/^std::vector<BaseFacility*> *Base::getDefenses()$/;"	f	class:OpenXcom::Base
getDelay	Mod/RuleMissionScript.cpp	/^int RuleMissionScript::getDelay() const$/;"	f	class:OpenXcom::RuleMissionScript
getDependableCraft	Savegame/SavedGame.cpp	/^void SavedGame::getDependableCraft(std::vector<RuleCraft *> & dependables, const RuleResearch *research, const Mod * mod) const$/;"	f	class:OpenXcom::SavedGame
getDependableFacilities	Savegame/SavedGame.cpp	/^void SavedGame::getDependableFacilities(std::vector<RuleBaseFacility *> & dependables, const RuleResearch *research, const Mod * mod) const$/;"	f	class:OpenXcom::SavedGame
getDependableManufacture	Savegame/SavedGame.cpp	/^void SavedGame::getDependableManufacture (std::vector<RuleManufacture *> & dependables, const RuleResearch *research, const Mod * mod, Base *) const$/;"	f	class:OpenXcom::SavedGame
getDependablePurchase	Savegame/SavedGame.cpp	/^void SavedGame::getDependablePurchase(std::vector<RuleItem *> & dependables, const RuleResearch *research, const Mod * mod) const$/;"	f	class:OpenXcom::SavedGame
getDependencies	Mod/RuleResearch.cpp	/^const std::vector<const RuleResearch*> &RuleResearch::getDependencies() const$/;"	f	class:OpenXcom::RuleResearch
getDeployment	Mod/Mod.cpp	/^AlienDeployment *Mod::getDeployment(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getDeployment	Mod/RuleCraft.cpp	/^const RuleCraftDeployment &RuleCraft::getDeployment() const$/;"	f	class:OpenXcom::RuleCraft
getDeployment	Savegame/AlienBase.cpp	/^AlienDeployment *AlienBase::getDeployment() const$/;"	f	class:OpenXcom::AlienBase
getDeployment	Savegame/MissionSite.cpp	/^const AlienDeployment *MissionSite::getDeployment() const$/;"	f	class:OpenXcom::MissionSite
getDeploymentData	Mod/AlienDeployment.cpp	/^const std::vector<DeploymentData>* AlienDeployment::getDeploymentData() const$/;"	f	class:OpenXcom::AlienDeployment
getDeployments	Mod/Texture.cpp	/^const std::map<std::string, int> &Texture::getDeployments() const$/;"	f	class:OpenXcom::Texture
getDeploymentsList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getDeploymentsList() const$/;"	f	class:OpenXcom::Mod
getDepth	Battlescape/BattlescapeGame.cpp	/^int BattlescapeGame::getDepth() const$/;"	f	class:OpenXcom::BattlescapeGame
getDepth	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getDepth() const$/;"	f	class:OpenXcom::SavedBattleGame
getDescription	Engine/ModInfo.cpp	/^const std::string &ModInfo::getDescription()             const { return _desc;                    }$/;"	f	class:OpenXcom::ModInfo
getDescription	Mod/RuleCommendations.cpp	/^const std::string& RuleCommendations::getDescription() const$/;"	f	class:OpenXcom::RuleCommendations
getDescription	Mod/RuleEvent.h	/^	const std::string &getDescription() const { return _description; }$/;"	f	class:OpenXcom::RuleEvent
getDespawnPenalty	Mod/AlienDeployment.cpp	/^int AlienDeployment::getDespawnPenalty() const$/;"	f	class:OpenXcom::AlienDeployment
getDestination	Savegame/BattleUnit.cpp	/^Position BattleUnit::getDestination() const$/;"	f	class:OpenXcom::BattleUnit
getDestination	Savegame/MovingTarget.cpp	/^Target *MovingTarget::getDestination() const$/;"	f	class:OpenXcom::MovingTarget
getDestroyRequiredItems	Mod/RuleStartingCondition.h	/^	bool getDestroyRequiredItems() const { return _destroyRequiredItems; }$/;"	f	class:OpenXcom::RuleStartingCondition
getDestroyedFacilitiesCache	Savegame/Base.h	/^	std::map<const RuleBaseFacility*, int> *getDestroyedFacilitiesCache() { return &_destroyedFacilitiesCache; }$/;"	f	class:OpenXcom::Base
getDestroyedFacility	Mod/Mod.cpp	/^RuleBaseFacility *Mod::getDestroyedFacility() const$/;"	f	class:OpenXcom::Mod
getDestroyedFacility	Mod/RuleBaseFacility.cpp	/^const RuleBaseFacility* RuleBaseFacility::getDestroyedFacility() const$/;"	f	class:OpenXcom::RuleBaseFacility
getDetails	Engine/Action.cpp	/^SDL_Event *Action::getDetails() const$/;"	f	class:OpenXcom::Action
getDetected	Savegame/MissionSite.cpp	/^bool MissionSite::getDetected() const$/;"	f	class:OpenXcom::MissionSite
getDetected	Savegame/Ufo.cpp	/^bool Ufo::getDetected() const$/;"	f	class:OpenXcom::Ufo
getDetectionChance	Savegame/Base.cpp	/^size_t Base::getDetectionChance() const$/;"	f	class:OpenXcom::Base
getDiagonalWalkingPhase	Savegame/BattleUnit.cpp	/^int BattleUnit::getDiagonalWalkingPhase() const$/;"	f	class:OpenXcom::BattleUnit
getDiary	Savegame/Soldier.cpp	/^SoldierDiary *Soldier::getDiary()$/;"	f	class:OpenXcom::Soldier
getDieMCD	Mod/MapData.cpp	/^int MapData::getDieMCD() const$/;"	f	class:OpenXcom::MapData
getDiffPos	Engine/Script.cpp	/^size_t ParserWriter::getDiffPos(ProgPos begin, ProgPos end) const$/;"	f	class:OpenXcom::ParserWriter
getDifficulty	Savegame/SavedGame.cpp	/^GameDifficulty SavedGame::getDifficulty() const$/;"	f	class:OpenXcom::SavedGame
getDifficultyCoefficient	Savegame/SavedGame.cpp	/^int SavedGame::getDifficultyCoefficient() const$/;"	f	class:OpenXcom::SavedGame
getDimensions	Mod/AlienDeployment.cpp	/^void AlienDeployment::getDimensions(int *width, int *length, int *height) const$/;"	f	class:OpenXcom::AlienDeployment
getDirection	Mod/MapScript.h	/^	MapDirection getDirection() const {return _direction;};$/;"	f	class:OpenXcom::MapScript
getDirection	Savegame/BattleUnit.cpp	/^int BattleUnit::getDirection() const$/;"	f	class:OpenXcom::BattleUnit
getDirection	Savegame/CraftWeaponProjectile.cpp	/^int CraftWeaponProjectile::getDirection() const$/;"	f	class:OpenXcom::CraftWeaponProjectile
getDirection	Savegame/Ufo.cpp	/^std::string Ufo::getDirection() const$/;"	f	class:OpenXcom::Ufo
getDirectionTo	Battlescape/TileEngine.cpp	/^int TileEngine::getDirectionTo(Position origin, Position target) const$/;"	f	class:OpenXcom::TileEngine
getDisableSoldierEquipment	Savegame/SavedGame.cpp	/^bool SavedGame::getDisableSoldierEquipment() const$/;"	f	class:OpenXcom::SavedGame
getDisabled	Mod/RuleResearch.cpp	/^const std::vector<const RuleResearch*> &RuleResearch::getDisabled() const$/;"	f	class:OpenXcom::RuleResearch
getDisabled	Savegame/BaseFacility.cpp	/^bool BaseFacility::getDisabled() const$/;"	f	class:OpenXcom::BaseFacility
getDisconnectedFacilities	Savegame/Base.cpp	/^std::list<std::vector<BaseFacility*>::iterator> Base::getDisconnectedFacilities(BaseFacility *remove)$/;"	f	class:OpenXcom::Base
getDiscoveredResearch	Savegame/SavedGame.cpp	/^const std::vector<const RuleResearch *> & SavedGame::getDiscoveredResearch() const$/;"	f	class:OpenXcom::SavedGame
getDisplayCustomCategories	Mod/Mod.h	/^	int getDisplayCustomCategories() const { return _displayCustomCategories; }$/;"	f	class:OpenXcom::Mod
getDistance	Basescape/TransferItemsState.cpp	/^double TransferItemsState::getDistance() const$/;"	f	class:OpenXcom::TransferItemsState
getDistance	Battlescape/Projectile.cpp	/^float Projectile::getDistance() const$/;"	f	class:OpenXcom::Projectile
getDistance	Savegame/Target.cpp	/^double Target::getDistance(double lon, double lat) const$/;"	f	class:OpenXcom::Target
getDistance	Savegame/Target.h	/^	double getDistance(const Target *target) const { return getDistance(target->getLongitude(), target->getLatitude()); }$/;"	f	class:OpenXcom::Target
getDistanceFromBase	Savegame/Craft.cpp	/^double Craft::getDistanceFromBase() const$/;"	f	class:OpenXcom::Craft
getDistanceNoise	Geoscape/Globe.cpp	/^	int getDistanceNoise(Sint16 n)$/;"	f	struct:OpenXcom::__anon49::GlobeStaticData
getDistanceTileScript	Savegame/Tile.cpp	/^void getDistanceTileScript(const Tile *t, int &ret, const Tile *other)$/;"	f	namespace:OpenXcom::__anon43
getDistanceVoxelScript	Savegame/Tile.cpp	/^void getDistanceVoxelScript(const Tile *t, int &ret, const Tile *other)$/;"	f	namespace:OpenXcom::__anon43
getDogfightExperience	Mod/RuleSoldier.cpp	/^UnitStats RuleSoldier::getDogfightExperience() const$/;"	f	class:OpenXcom::RuleSoldier
getDomain	Engine/ShaderDrawHelper.h	/^	inline const GraphSubset& getDomain() const$/;"	f	class:OpenXcom::helper::ShaderBase
getDosPath	Engine/CrossPlatform.cpp	/^std::string getDosPath()$/;"	f	namespace:OpenXcom::CrossPlatform
getDrawEnemyRadarCircles	Mod/Mod.h	/^	int getDrawEnemyRadarCircles() const { return _drawEnemyRadarCircles; }$/;"	f	class:OpenXcom::Mod
getDrawingRoutine	Mod/Armor.cpp	/^int Armor::getDrawingRoutine() const$/;"	f	class:OpenXcom::Armor
getDropoff	Mod/RuleItem.cpp	/^int RuleItem::getDropoff() const$/;"	f	class:OpenXcom::RuleItem
getDurationMax	Mod/AlienDeployment.cpp	/^int AlienDeployment::getDurationMax() const$/;"	f	class:OpenXcom::AlienDeployment
getDurationMin	Mod/AlienDeployment.cpp	/^int AlienDeployment::getDurationMin() const$/;"	f	class:OpenXcom::AlienDeployment
getDynamic	Engine/ScriptBind.h	/^	static constexpr ScriptFunc getDynamic(int i) { return FuncList::getDynamic(i); }$/;"	f	struct:OpenXcom::helper::FuncGroup
getDynamic	Engine/ScriptBind.h	/^	static constexpr ScriptFunc getDynamic(int i)$/;"	f	struct:OpenXcom::helper::SumListIndexImpl
getElement	Mod/RuleInterface.cpp	/^Element *RuleInterface::getElement(const std::string &id)$/;"	f	class:OpenXcom::RuleInterface
getEmbeddedAsset	Engine/CrossPlatform.cpp	/^SDL_RWops *getEmbeddedAsset(const std::string& assetName) {$/;"	f	namespace:OpenXcom::CrossPlatform
getEnableCloseQuartersCombat	Mod/Mod.h	/^	int getEnableCloseQuartersCombat() const { return _enableCloseQuartersCombat; }$/;"	f	class:OpenXcom::Mod
getEnableNewResearchSorting	Mod/Mod.h	/^	bool getEnableNewResearchSorting() const { return _enableNewResearchSorting; }$/;"	f	class:OpenXcom::Mod
getEnableUnitResponseSounds	Mod/Mod.h	/^	bool getEnableUnitResponseSounds() const { return _enableUnitResponseSounds; }$/;"	f	class:OpenXcom::Mod
getEnding	Savegame/SavedGame.cpp	/^GameEnding SavedGame::getEnding() const$/;"	f	class:OpenXcom::SavedGame
getEnergy	Savegame/BattleUnit.cpp	/^int BattleUnit::getEnergy() const$/;"	f	class:OpenXcom::BattleUnit
getEnergyFinalDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getEnergyFinalDamage(int damage) const$/;"	f	class:OpenXcom::RuleDamageType
getEnergyMarker	Savegame/Tile.cpp	/^int Tile::getEnergyMarker() const$/;"	f	class:OpenXcom::Tile
getEnergyRecovery	Mod/Armor.cpp	/^int Armor::getEnergyRecovery(const BattleUnit* unit, int externalBonuses) const$/;"	f	class:OpenXcom::Armor
getEnergyRecovery	Mod/RuleItem.cpp	/^int RuleItem::getEnergyRecovery() const$/;"	f	class:OpenXcom::RuleItem
getEnergyRecovery	Mod/RuleSoldierBonus.cpp	/^int RuleSoldierBonus::getEnergyRecovery(const BattleUnit *unit) const$/;"	f	class:OpenXcom::RuleSoldierBonus
getEnergyRecovery	Mod/Unit.cpp	/^int Unit::getEnergyRecovery() const$/;"	f	class:OpenXcom::Unit
getEnergyRecoveryRaw	Mod/Armor.h	/^	const RuleStatBonus *getEnergyRecoveryRaw() const { return &_energyRecovery; }$/;"	f	class:OpenXcom::Armor
getEnergyRecoveryRaw	Mod/RuleSoldierBonus.h	/^	const RuleStatBonus *getEnergyRecoveryRaw() const { return &_energyRecovery; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getEngineerCost	Mod/Mod.cpp	/^int Mod::getEngineerCost() const$/;"	f	class:OpenXcom::Mod
getEngineers	Savegame/Base.cpp	/^int Base::getEngineers() const$/;"	f	class:OpenXcom::Base
getEnhancedLighting	Battlescape/TileEngine.h	/^	int getEnhancedLighting() const { return _enhancedLighting; }$/;"	f	class:OpenXcom::TileEngine
getEnhancedLighting	Mod/Mod.h	/^	int getEnhancedLighting() const { return _enhancedLighting; }$/;"	f	class:OpenXcom::Mod
getEnviroEffects	Mod/AlienDeployment.cpp	/^const std::string& AlienDeployment::getEnviroEffects() const$/;"	f	class:OpenXcom::AlienDeployment
getEnviroEffects	Mod/Mod.cpp	/^RuleEnviroEffects* Mod::getEnviroEffects(const std::string& name) const$/;"	f	class:OpenXcom::Mod
getEnviroEffects	Mod/RuleTerrain.cpp	/^const std::string& RuleTerrain::getEnviroEffects() const$/;"	f	class:OpenXcom::RuleTerrain
getEnviroEffects	Savegame/SavedBattleGame.cpp	/^const RuleEnviroEffects* SavedBattleGame::getEnviroEffects() const$/;"	f	class:OpenXcom::SavedBattleGame
getEnviroEffectsList	Mod/Mod.cpp	/^const std::vector<std::string>& Mod::getEnviroEffectsList() const$/;"	f	class:OpenXcom::Mod
getEnvironmentalConditionsEnabled	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::getEnvironmentalConditionsEnabled(UnitFaction faction) const$/;"	f	class:OpenXcom::SavedBattleGame
getEnvironmetalCondition	Mod/RuleEnviroEffects.cpp	/^EnvironmentalCondition RuleEnviroEffects::getEnvironmetalCondition(const std::string& faction) const$/;"	f	class:OpenXcom::RuleEnviroEffects
getEquipmentLayout	Savegame/Soldier.cpp	/^std::vector<EquipmentLayoutItem*> *Soldier::getEquipmentLayout()$/;"	f	class:OpenXcom::Soldier
getErrorDialog	Engine/CrossPlatform.cpp	/^void getErrorDialog()$/;"	f	namespace:OpenXcom::CrossPlatform
getEscapeCountdown	Savegame/Ufo.cpp	/^int Ufo::getEscapeCountdown() const$/;"	f	class:OpenXcom::Ufo
getEscapeType	Mod/AlienDeployment.cpp	/^EscapeType AlienDeployment::getEscapeType() const$/;"	f	class:OpenXcom::AlienDeployment
getEscortRange	Mod/Mod.cpp	/^double Mod::getEscortRange() const$/;"	f	class:OpenXcom::Mod
getEscortsJoinFightAgainstHK	Mod/Mod.h	/^	bool getEscortsJoinFightAgainstHK() const { return _escortsJoinFightAgainstHK; }$/;"	f	class:OpenXcom::Mod
getEvent	Mod/Mod.cpp	/^RuleEvent* Mod::getEvent(const std::string& name, bool error) const$/;"	f	class:OpenXcom::Mod
getEventList	Mod/Mod.cpp	/^const std::vector<std::string>* Mod::getEventList() const$/;"	f	class:OpenXcom::Mod
getEventScript	Mod/Mod.cpp	/^RuleEventScript* Mod::getEventScript(const std::string& name, bool error) const$/;"	f	class:OpenXcom::Mod
getEventScriptList	Mod/Mod.cpp	/^const std::vector<std::string>* Mod::getEventScriptList() const$/;"	f	class:OpenXcom::Mod
getEvents	Engine/Script.cpp	/^const ScriptContainerBase* ScriptParserEventsBase::getEvents() const$/;"	f	class:OpenXcom::ScriptParserEventsBase
getEveryItemList	Mod/RuleEvent.h	/^	const std::vector<std::string> &getEveryItemList() const { return _everyItemList; }$/;"	f	class:OpenXcom::RuleEvent
getEveryMultiItemList	Mod/RuleEvent.h	/^	const std::map<std::string, int> &getEveryMultiItemList() const { return _everyMultiItemList; }$/;"	f	class:OpenXcom::RuleEvent
getExeFilename	Engine/CrossPlatform.cpp	/^std::string getExeFilename(bool includingPath)$/;"	f	namespace:OpenXcom::CrossPlatform
getExeFolder	Engine/CrossPlatform.cpp	/^std::string getExeFolder()$/;"	f	namespace:OpenXcom::CrossPlatform
getExecutionOdds	Mod/RuleArcScript.h	/^	int getExecutionOdds() const { return _executionOdds; }$/;"	f	class:OpenXcom::RuleArcScript
getExecutionOdds	Mod/RuleEventScript.h	/^	int getExecutionOdds() const { return _executionOdds; }$/;"	f	class:OpenXcom::RuleEventScript
getExecutionOdds	Mod/RuleMissionScript.cpp	/^int RuleMissionScript::getExecutionOdds() const$/;"	f	class:OpenXcom::RuleMissionScript
getExecutions	Mod/MapScript.h	/^	int getExecutions() const {return _executions;};$/;"	f	class:OpenXcom::MapScript
getExpenditures	Savegame/SavedGame.cpp	/^std::vector<int64_t> &SavedGame::getExpenditures()$/;"	f	class:OpenXcom::SavedGame
getExperienceTrainingMode	Mod/RuleItem.cpp	/^ExperienceTrainingMode RuleItem::getExperienceTrainingMode() const$/;"	f	class:OpenXcom::RuleItem
getExplosionHitSound	Mod/RuleItem.cpp	/^int RuleItem::getExplosionHitSound() const$/;"	f	class:OpenXcom::RuleItem
getExplosionHitSoundRaw	Mod/RuleItem.h	/^	const std::vector<int> &getExplosionHitSoundRaw() const { return _explosionHitSound; }$/;"	f	class:OpenXcom::RuleItem
getExplosionRadius	Mod/RuleItem.cpp	/^int RuleItem::getExplosionRadius(BattleActionAttack::ReadOnly attack) const$/;"	f	class:OpenXcom::RuleItem
getExplosionSpeed	Mod/RuleItem.cpp	/^int RuleItem::getExplosionSpeed() const$/;"	f	class:OpenXcom::RuleItem
getExplosions	Battlescape/Map.cpp	/^std::list<Explosion*> *Map::getExplosions()$/;"	f	class:OpenXcom::Map
getExplosive	Mod/MapData.cpp	/^int MapData::getExplosive() const$/;"	f	class:OpenXcom::MapData
getExplosive	Savegame/Tile.cpp	/^int Tile::getExplosive() const$/;"	f	class:OpenXcom::Tile
getExplosiveType	Mod/MapData.cpp	/^int MapData::getExplosiveType() const$/;"	f	class:OpenXcom::MapData
getExplosiveType	Savegame/Tile.cpp	/^int Tile::getExplosiveType() const$/;"	f	class:OpenXcom::Tile
getExt	Engine/CrossPlatform.cpp	/^std::string getExt(const std::string &filename)$/;"	f	namespace:OpenXcom::CrossPlatform
getExternalResourceDirs	Engine/ModInfo.cpp	/^const std::vector<std::string> &ModInfo::getExternalResourceDirs() const { return _externalResourceDirs; }$/;"	f	class:OpenXcom::ModInfo
getExtraGlobeLabel	Mod/Mod.cpp	/^RuleCountry *Mod::getExtraGlobeLabel(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getExtraGlobeLabelsList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getExtraGlobeLabelsList() const$/;"	f	class:OpenXcom::Mod
getExtraNerdyPediaInfoType	Mod/Mod.h	/^	int getExtraNerdyPediaInfoType() const { return _extraNerdyPediaInfoType; }$/;"	f	class:OpenXcom::Mod
getExtraSounds	Mod/Mod.cpp	/^const std::vector<std::pair<std::string, ExtraSounds *> > &Mod::getExtraSounds() const$/;"	f	class:OpenXcom::Mod
getExtraSprites	Mod/Mod.cpp	/^const std::map<std::string, std::vector<ExtraSprites *> > &Mod::getExtraSprites() const$/;"	f	class:OpenXcom::Mod
getExtraStrings	Mod/Mod.cpp	/^const std::map<std::string, ExtraStrings *> &Mod::getExtraStrings() const$/;"	f	class:OpenXcom::Mod
getFaceColor	Mod/Armor.cpp	/^int Armor::getFaceColor(int i) const$/;"	f	class:OpenXcom::Armor
getFaceColorGroup	Mod/Armor.cpp	/^int Armor::getFaceColorGroup() const$/;"	f	class:OpenXcom::Armor
getFaceColorRaw	Mod/Armor.h	/^	const std::vector<int> &getFaceColorRaw() const { return _faceColor; }$/;"	f	class:OpenXcom::Armor
getFaceDirection	Savegame/BattleUnit.cpp	/^int BattleUnit::getFaceDirection() const$/;"	f	class:OpenXcom::BattleUnit
getFacilities	Mod/RuleConverter.h	/^	const std::vector<std::string> &getFacilities() const { return _facilities; }$/;"	f	class:OpenXcom::RuleConverter
getFacilities	Savegame/Base.cpp	/^std::vector<BaseFacility*> *Base::getFacilities()$/;"	f	class:OpenXcom::Base
getFacilityMaintenance	Savegame/Base.cpp	/^int Base::getFacilityMaintenance() const$/;"	f	class:OpenXcom::Base
getFacilityTriggers	Mod/RuleArcScript.h	/^	const std::map<std::string, bool> &getFacilityTriggers() const { return _facilityTriggers; }$/;"	f	class:OpenXcom::RuleArcScript
getFacilityTriggers	Mod/RuleEventScript.h	/^	const std::map<std::string, bool> &getFacilityTriggers() const { return _facilityTriggers; }$/;"	f	class:OpenXcom::RuleEventScript
getFacilityTriggers	Mod/RuleMissionScript.cpp	/^const std::map<std::string, bool> &RuleMissionScript::getFacilityTriggers() const$/;"	f	class:OpenXcom::RuleMissionScript
getFaction	Savegame/BattleUnit.cpp	/^UnitFaction BattleUnit::getFaction() const$/;"	f	class:OpenXcom::BattleUnit
getFactionMoraleModifier	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getFactionMoraleModifier(bool player)$/;"	f	class:OpenXcom::SavedBattleGame
getFactionScript	Savegame/BattleUnit.cpp	/^void getFactionScript(const BattleUnit *bu, int &faction)$/;"	f	namespace:OpenXcom::__anon36
getFakeUnderwaterBaseUnlockResearch	Mod/Mod.h	/^	const std::string &getFakeUnderwaterBaseUnlockResearch() const { return _fakeUnderwaterBaseUnlockResearch; }$/;"	f	class:OpenXcom::Mod
getFakeUnderwaterRaw	Mod/RuleBaseFacility.h	/^	int getFakeUnderwaterRaw() const { return _fakeUnderwater; }$/;"	f	class:OpenXcom::RuleBaseFacility
getFakeUnderwaterSpawnChance	Mod/AlienDeployment.h	/^	int getFakeUnderwaterSpawnChance() const { return _fakeUnderwaterSpawnChance; }$/;"	f	class:OpenXcom::AlienDeployment
getFakeWaterLandingChance	Mod/RuleUfo.h	/^	int getFakeWaterLandingChance() const { return _fakeWaterLandingChance; }$/;"	f	class:OpenXcom::RuleUfo
getFallingPhase	Savegame/BattleUnit.cpp	/^int BattleUnit::getFallingPhase() const$/;"	f	class:OpenXcom::BattleUnit
getFallingUnits	Savegame/SavedBattleGame.cpp	/^std::list<BattleUnit*> *SavedBattleGame::getFallingUnits()$/;"	f	class:OpenXcom::SavedBattleGame
getFatalShotBodyPart	Savegame/BattleUnit.cpp	/^UnitBodyPart BattleUnit::getFatalShotBodyPart() const$/;"	f	class:OpenXcom::BattleUnit
getFatalShotSide	Savegame/BattleUnit.cpp	/^UnitSide BattleUnit::getFatalShotSide() const$/;"	f	class:OpenXcom::BattleUnit
getFatalWound	Savegame/BattleUnit.cpp	/^int BattleUnit::getFatalWound(UnitBodyPart part) const$/;"	f	class:OpenXcom::BattleUnit
getFatalWoundMaxScript	Savegame/BattleUnit.cpp	/^void getFatalWoundMaxScript(const BattleUnit *bu, int &ret, int part)$/;"	f	namespace:OpenXcom::__anon36
getFatalWoundScript	Savegame/BattleUnit.cpp	/^void getFatalWoundScript(const BattleUnit *bu, int &ret, int part)$/;"	f	namespace:OpenXcom::__anon36
getFatalWounds	Savegame/BattleUnit.cpp	/^int BattleUnit::getFatalWounds() const$/;"	f	class:OpenXcom::BattleUnit
getFearImmune	Mod/Armor.cpp	/^bool Armor::getFearImmune(bool def) const$/;"	f	class:OpenXcom::Armor
getFemaleAnnoyedSounds	Mod/Armor.h	/^	const std::vector<int> &getFemaleAnnoyedSounds() const { return _annoyedSoundFemale; }$/;"	f	class:OpenXcom::Armor
getFemaleAnnoyedSounds	Mod/RuleSoldier.h	/^	const std::vector<int> &getFemaleAnnoyedSounds() const { return _annoyedSoundFemale; }$/;"	f	class:OpenXcom::RuleSoldier
getFemaleBerserkSounds	Mod/RuleSoldier.cpp	/^const std::vector<int> &RuleSoldier::getFemaleBerserkSounds() const$/;"	f	class:OpenXcom::RuleSoldier
getFemaleDeathSounds	Mod/Armor.h	/^	const std::vector<int> &getFemaleDeathSounds() const { return _deathSoundFemale; }$/;"	f	class:OpenXcom::Armor
getFemaleDeathSounds	Mod/RuleSoldier.cpp	/^const std::vector<int> &RuleSoldier::getFemaleDeathSounds() const$/;"	f	class:OpenXcom::RuleSoldier
getFemaleFrequency	Mod/RuleSoldier.cpp	/^int RuleSoldier::getFemaleFrequency() const$/;"	f	class:OpenXcom::RuleSoldier
getFemalePanicSounds	Mod/RuleSoldier.cpp	/^const std::vector<int> &RuleSoldier::getFemalePanicSounds() const$/;"	f	class:OpenXcom::RuleSoldier
getFemaleSelectUnitSounds	Mod/Armor.h	/^	const std::vector<int> &getFemaleSelectUnitSounds() const { return _selectUnitSoundFemale; }$/;"	f	class:OpenXcom::Armor
getFemaleSelectUnitSounds	Mod/RuleSoldier.h	/^	const std::vector<int> &getFemaleSelectUnitSounds() const { return _selectUnitSoundFemale; }$/;"	f	class:OpenXcom::RuleSoldier
getFemaleSelectWeaponSounds	Mod/Armor.h	/^	const std::vector<int> &getFemaleSelectWeaponSounds() const { return _selectWeaponSoundFemale; }$/;"	f	class:OpenXcom::Armor
getFemaleSelectWeaponSounds	Mod/RuleSoldier.h	/^	const std::vector<int> &getFemaleSelectWeaponSounds() const { return _selectWeaponSoundFemale; }$/;"	f	class:OpenXcom::RuleSoldier
getFemaleStartMovingSounds	Mod/Armor.h	/^	const std::vector<int> &getFemaleStartMovingSounds() const { return _startMovingSoundFemale; }$/;"	f	class:OpenXcom::Armor
getFemaleStartMovingSounds	Mod/RuleSoldier.h	/^	const std::vector<int> &getFemaleStartMovingSounds() const { return _startMovingSoundFemale; }$/;"	f	class:OpenXcom::RuleSoldier
getFile	Mod/CustomPalettes.cpp	/^const std::string &CustomPalettes::getFile() const$/;"	f	class:OpenXcom::CustomPalettes
getFinalResearch	Mod/Mod.cpp	/^RuleResearch *Mod::getFinalResearch() const$/;"	f	class:OpenXcom::Mod
getFire	Battlescape/TileEngine.cpp	/^bool getFire(const T& td)$/;"	f	namespace:OpenXcom::__anon45
getFire	Savegame/BattleUnit.cpp	/^int BattleUnit::getFire() const$/;"	f	class:OpenXcom::BattleUnit
getFire	Savegame/Tile.cpp	/^int Tile::getFire() const$/;"	f	class:OpenXcom::Tile
getFireCountdown	Savegame/Ufo.cpp	/^int Ufo::getFireCountdown() const$/;"	f	class:OpenXcom::Ufo
getFireSound	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getFireSound() const$/;"	f	class:OpenXcom::RuleBaseFacility
getFireSound	Mod/RuleItem.cpp	/^int RuleItem::getFireSound() const$/;"	f	class:OpenXcom::RuleItem
getFireSound	Mod/RuleUfo.cpp	/^int RuleUfo::getFireSound() const$/;"	f	class:OpenXcom::RuleUfo
getFireSoundRaw	Mod/RuleItem.h	/^	const std::vector<int> &getFireSoundRaw() const { return _fireSound; }$/;"	f	class:OpenXcom::RuleItem
getFiringAccuracy	Savegame/BattleUnit.cpp	/^int BattleUnit::getFiringAccuracy(BattleActionAttack::ReadOnly attack, Mod *mod)$/;"	f	class:OpenXcom::BattleUnit
getFirstFreeDogfightSlot	Geoscape/GeoscapeState.cpp	/^int GeoscapeState::getFirstFreeDogfightSlot()$/;"	f	class:OpenXcom::GeoscapeState
getFirstMonth	Mod/RuleArcScript.h	/^	int getFirstMonth() const { return _firstMonth; }$/;"	f	class:OpenXcom::RuleArcScript
getFirstMonth	Mod/RuleEventScript.h	/^	int getFirstMonth() const { return _firstMonth; }$/;"	f	class:OpenXcom::RuleEventScript
getFirstMonth	Mod/RuleMissionScript.cpp	/^int RuleMissionScript::getFirstMonth() const$/;"	f	class:OpenXcom::RuleMissionScript
getFixedShow	Mod/RuleItem.cpp	/^bool RuleItem::getFixedShow() const$/;"	f	class:OpenXcom::RuleItem
getFixedUserOptions	Mod/Mod.h	/^	const std::map<std::string, std::string> &getFixedUserOptions() const { return _fixedUserOptions; }$/;"	f	class:OpenXcom::Mod
getFixedWeaponInSlot	Mod/RuleCraft.cpp	/^const std::string &RuleCraft::getFixedWeaponInSlot(int slot) const$/;"	f	class:OpenXcom::RuleCraft
getFlagByKills	Mod/Mod.cpp	/^const std::vector<int> &Mod::getFlagByKills() const$/;"	f	class:OpenXcom::Mod
getFlagOffset	Mod/RuleSoldier.cpp	/^int RuleSoldier::getFlagOffset() const$/;"	f	class:OpenXcom::RuleSoldier
getFlags	Savegame/Node.h	/^	int getFlags() const { return _flags; }$/;"	f	class:OpenXcom::Node
getFlammability	Savegame/Tile.cpp	/^int Tile::getFlammability() const$/;"	f	class:OpenXcom::Tile
getFlammability	Savegame/Tile.cpp	/^int Tile::getFlammability(TilePart part) const$/;"	f	class:OpenXcom::Tile
getFlammable	Mod/MapData.cpp	/^int MapData::getFlammable() const$/;"	f	class:OpenXcom::MapData
getFlat	Mod/RuleSkill.h	/^	const RuleItemUseCost& getFlat() const { return _flat; }$/;"	f	class:OpenXcom::RuleSkill
getFlatAimed	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getFlatAimed() const$/;"	f	class:OpenXcom::RuleItem
getFlatAuto	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getFlatAuto() const$/;"	f	class:OpenXcom::RuleItem
getFlatMax	Mod/RuleSoldierTransformation.h	/^	const UnitStats &getFlatMax() const { return _flatMax; }$/;"	f	class:OpenXcom::RuleSoldierTransformation
getFlatMelee	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getFlatMelee() const$/;"	f	class:OpenXcom::RuleItem
getFlatMin	Mod/RuleSoldierTransformation.h	/^	const UnitStats &getFlatMin() const { return _flatMin; }$/;"	f	class:OpenXcom::RuleSoldierTransformation
getFlatOverallStatChange	Mod/RuleSoldierTransformation.cpp	/^const UnitStats &RuleSoldierTransformation::getFlatOverallStatChange() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getFlatPrime	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getFlatPrime() const$/;"	f	class:OpenXcom::RuleItem
getFlatSnap	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getFlatSnap() const$/;"	f	class:OpenXcom::RuleItem
getFlatThrow	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getFlatThrow() const$/;"	f	class:OpenXcom::RuleItem
getFlatUnprime	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getFlatUnprime() const$/;"	f	class:OpenXcom::RuleItem
getFlatUse	Mod/RuleItem.cpp	/^RuleItemUseCost RuleItem::getFlatUse() const$/;"	f	class:OpenXcom::RuleItem
getFlattenedMapBlockNames	Savegame/SavedBattleGame.h	/^	std::vector< std::vector<std::string> > &getFlattenedMapBlockNames() { return _flattenedMapBlockNames; }$/;"	f	class:OpenXcom::SavedBattleGame
getFlattenedMapTerrainNames	Savegame/SavedBattleGame.h	/^	std::vector< std::vector<std::string> > &getFlattenedMapTerrainNames() { return _flattenedMapTerrainNames; }$/;"	f	class:OpenXcom::SavedBattleGame
getFloatHeight	Mod/Armor.cpp	/^int Armor::getFloatHeight() const$/;"	f	class:OpenXcom::Armor
getFloatHeight	Mod/RuleSoldier.cpp	/^int RuleSoldier::getFloatHeight() const$/;"	f	class:OpenXcom::RuleSoldier
getFloatHeight	Mod/Unit.cpp	/^int Unit::getFloatHeight() const$/;"	f	class:OpenXcom::Unit
getFloatHeight	Savegame/BattleUnit.cpp	/^int BattleUnit::getFloatHeight() const$/;"	f	class:OpenXcom::BattleUnit
getFloorAbove	Savegame/BattleUnit.cpp	/^bool BattleUnit::getFloorAbove() const$/;"	f	class:OpenXcom::BattleUnit
getFloorSpecialTileType	Savegame/Tile.h	/^	SpecialTileType getFloorSpecialTileType() const$/;"	f	class:OpenXcom::Tile
getFloorSpecialTileTypeScript	Savegame/Tile.cpp	/^void getFloorSpecialTileTypeScript(const Tile *t, int &ret)$/;"	f	namespace:OpenXcom::__anon43
getFloorSprite	Mod/RuleItem.cpp	/^int RuleItem::getFloorSprite() const$/;"	f	class:OpenXcom::RuleItem
getFloorSprite	Savegame/BattleItem.cpp	/^const Surface *BattleItem::getFloorSprite(const SurfaceSet *set, const SavedBattleGame *save, int animFrame, int shade) const$/;"	f	class:OpenXcom::BattleItem
getFolderContents	Engine/CrossPlatform.cpp	/^std::vector<std::tuple<std::string, bool, time_t>> getFolderContents(const std::string &path, const std::string &ext)$/;"	f	namespace:OpenXcom::CrossPlatform
getFollowProjectile	Battlescape/Map.h	/^	bool getFollowProjectile() const { return _followProjectile; }$/;"	f	class:OpenXcom::Map
getFollowers	Savegame/Target.cpp	/^std::vector<MovingTarget*> *Target::getFollowers()$/;"	f	class:OpenXcom::Target
getFont	Interface/Text.cpp	/^Font *Text::getFont() const$/;"	f	class:OpenXcom::Text
getFont	Interface/TextButton.cpp	/^Font *TextButton::getFont() const$/;"	f	class:OpenXcom::TextButton
getFont	Mod/Mod.cpp	/^Font *Mod::getFont(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getFontName	Mod/Mod.cpp	/^std::string Mod::getFontName() const$/;"	f	class:OpenXcom::Mod
getFootstepSound	Mod/MapData.cpp	/^int MapData::getFootstepSound() const$/;"	f	class:OpenXcom::MapData
getFootstepSound	Savegame/Tile.cpp	/^int Tile::getFootstepSound(Tile *tileBelow) const$/;"	f	class:OpenXcom::Tile
getForbiddenArmors	Mod/RuleStartingCondition.h	/^	const std::vector<std::string>& getForbiddenArmors() const { return _forbiddenArmors; }$/;"	f	class:OpenXcom::RuleStartingCondition
getForbiddenArmorsInNextStage	Mod/RuleStartingCondition.h	/^	const std::vector<const Armor*>& getForbiddenArmorsInNextStage() const { return _forbiddenArmorsInNextStage; }$/;"	f	class:OpenXcom::RuleStartingCondition
getForbiddenBaseFunc	Mod/RuleBaseFacility.h	/^	RuleBaseFacilityFunctions getForbiddenBaseFunc() const { return _forbiddenBaseFunc; }$/;"	f	class:OpenXcom::RuleBaseFacility
getForbiddenBaseFunc	Savegame/Base.cpp	/^RuleBaseFacilityFunctions Base::getForbiddenBaseFunc(BaseAreaSubset skip) const$/;"	f	class:OpenXcom::Base
getForbiddenCraft	Mod/RuleStartingCondition.h	/^	const std::vector<std::string>& getForbiddenCraft() const { return _forbiddenCraft; }$/;"	f	class:OpenXcom::RuleStartingCondition
getForbiddenPreviousTransformations	Mod/RuleSoldierTransformation.cpp	/^const std::vector<std::string > &RuleSoldierTransformation::getForbiddenPreviousTransformations() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getForbiddenSoldierTypes	Mod/RuleStartingCondition.h	/^	const std::vector<std::string>& getForbiddenSoldierTypes() const { return _forbiddenSoldierTypes; }$/;"	f	class:OpenXcom::RuleStartingCondition
getForcedTorso	Mod/Armor.cpp	/^ForcedTorso Armor::getForcedTorso() const$/;"	f	class:OpenXcom::Armor
getFpsCounter	Engine/Game.h	/^	FpsCounter *getFpsCounter() const { return _fpsCounter; }$/;"	f	class:OpenXcom::Game
getFrame	Engine/SurfaceSet.cpp	/^Surface *SurfaceSet::getFrame(int i)$/;"	f	class:OpenXcom::SurfaceSet
getFrame	Engine/SurfaceSet.cpp	/^const Surface *SurfaceSet::getFrame(int i) const$/;"	f	class:OpenXcom::SurfaceSet
getFrame	Mod/ExtraSprites.cpp	/^Surface *ExtraSprites::getFrame(SurfaceSet *set, int index) const$/;"	f	class:OpenXcom::ExtraSprites
getFrameCount	Engine/FlcPlayer.cpp	/^int FlcPlayer::getFrameCount()$/;"	f	class:OpenXcom::FlcPlayer
getFreeContainment	Savegame/Base.cpp	/^int Base::getFreeContainment(int prisonType) const$/;"	f	class:OpenXcom::Base
getFreeLaboratories	Savegame/Base.cpp	/^int Base::getFreeLaboratories() const$/;"	f	class:OpenXcom::Base
getFreePsiLabs	Savegame/Base.cpp	/^int Base::getFreePsiLabs() const$/;"	f	class:OpenXcom::Base
getFreeTrainingSpace	Savegame/Base.cpp	/^int Base::getFreeTrainingSpace() const$/;"	f	class:OpenXcom::Base
getFreeWorkshops	Savegame/Base.cpp	/^int Base::getFreeWorkshops() const$/;"	f	class:OpenXcom::Base
getFrontArmor	Mod/Armor.cpp	/^int Armor::getFrontArmor() const$/;"	f	class:OpenXcom::Armor
getFrontArmor	Mod/RuleSoldierBonus.h	/^	int getFrontArmor() const { return _frontArmor; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getFuel	Mod/MapData.cpp	/^int MapData::getFuel() const$/;"	f	class:OpenXcom::MapData
getFuel	Savegame/Craft.cpp	/^int Craft::getFuel() const$/;"	f	class:OpenXcom::Craft
getFuel	Savegame/Tile.cpp	/^int Tile::getFuel() const$/;"	f	class:OpenXcom::Tile
getFuel	Savegame/Tile.cpp	/^int Tile::getFuel(TilePart part) const$/;"	f	class:OpenXcom::Tile
getFuelConsumption	Savegame/Craft.cpp	/^int Craft::getFuelConsumption(int speed, int escortSpeed) const$/;"	f	class:OpenXcom::Craft
getFuelLimit	Savegame/Craft.cpp	/^int Craft::getFuelLimit() const$/;"	f	class:OpenXcom::Craft
getFuelLimit	Savegame/Craft.cpp	/^int Craft::getFuelLimit(Base *base) const$/;"	f	class:OpenXcom::Craft
getFuelMax	Savegame/Craft.cpp	/^int Craft::getFuelMax() const$/;"	f	class:OpenXcom::Craft
getFuelPercentage	Savegame/Craft.cpp	/^int Craft::getFuelPercentage() const$/;"	f	class:OpenXcom::Craft
getFunding	Savegame/Country.cpp	/^std::vector<int> &Country::getFunding()$/;"	f	class:OpenXcom::Country
getFundingCap	Mod/RuleCountry.cpp	/^int RuleCountry::getFundingCap() const$/;"	f	class:OpenXcom::RuleCountry
getFunds	Mod/RuleEvent.h	/^	int getFunds() const { return _funds; }$/;"	f	class:OpenXcom::RuleEvent
getFunds	Savegame/SavedGame.cpp	/^int64_t SavedGame::getFunds() const$/;"	f	class:OpenXcom::SavedGame
getFundsList	Savegame/SavedGame.cpp	/^std::vector<int64_t> &SavedGame::getFundsList()$/;"	f	class:OpenXcom::SavedGame
getFuseTimer	Savegame/BattleItem.cpp	/^int BattleItem::getFuseTimer() const$/;"	f	class:OpenXcom::BattleItem
getFuseTimer	Savegame/EquipmentLayoutItem.cpp	/^int EquipmentLayoutItem::getFuseTimer() const$/;"	f	class:OpenXcom::EquipmentLayoutItem
getFuseTimerDefault	Mod/RuleItem.cpp	/^int RuleItem::getFuseTimerDefault() const$/;"	f	class:OpenXcom::RuleItem
getFuseTimerDefaultScript	Savegame/BattleItem.cpp	/^void getFuseTimerDefaultScript(const BattleItem* bt, int& i)$/;"	f	namespace:OpenXcom::__anon39
getFuseTimerType	Mod/RuleItem.cpp	/^BattleFuseType RuleItem::getFuseTimerType() const$/;"	f	class:OpenXcom::RuleItem
getFuseTriggerEvent	Mod/RuleItem.cpp	/^const RuleItemFuseTrigger *RuleItem::getFuseTriggerEvent() const$/;"	f	class:OpenXcom::RuleItem
getFutureBaseFunc	Savegame/Base.cpp	/^RuleBaseFacilityFunctions Base::getFutureBaseFunc(BaseAreaSubset skip) const$/;"	f	class:OpenXcom::Base
getGame	Battlescape/BattlescapeState.cpp	/^Game *BattlescapeState::getGame() const$/;"	f	class:OpenXcom::BattlescapeState
getGenMissionCount	Savegame/AlienBase.cpp	/^int AlienBase::getGenMissionCount() const$/;"	f	class:OpenXcom::AlienBase
getGenMissionFrequency	Mod/AlienDeployment.cpp	/^int AlienDeployment::getGenMissionFrequency() const$/;"	f	class:OpenXcom::AlienDeployment
getGenMissionLimit	Mod/AlienDeployment.cpp	/^int AlienDeployment::getGenMissionLimit() const$/;"	f	class:OpenXcom::AlienDeployment
getGender	Savegame/BattleUnit.cpp	/^SoldierGender BattleUnit::getGender() const$/;"	f	class:OpenXcom::BattleUnit
getGender	Savegame/Soldier.cpp	/^SoldierGender Soldier::getGender() const$/;"	f	class:OpenXcom::Soldier
getGender	Savegame/SoldierAvatar.cpp	/^SoldierGender SoldierAvatar::getGender() const$/;"	f	class:OpenXcom::SoldierAvatar
getGenderScript	Savegame/BattleUnit.cpp	/^void getGenderScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
getGenderScript	Savegame/Soldier.cpp	/^void getGenderScript(const Soldier *so, int &ret)$/;"	f	namespace:OpenXcom::__anon35
getGeoscapeEvents	Savegame/SavedGame.h	/^	const std::vector<GeoscapeEvent*> &getGeoscapeEvents() const { return _geoscapeEvents; }$/;"	f	class:OpenXcom::SavedGame
getGeoscapeEvents	Savegame/SavedGame.h	/^	std::vector<GeoscapeEvent*> &getGeoscapeEvents() { return _geoscapeEvents; }$/;"	f	class:OpenXcom::SavedGame
getGeoscapeSave	Savegame/SavedBattleGame.cpp	/^SavedGame *SavedBattleGame::getGeoscapeSave() const$/;"	f	class:OpenXcom::SavedBattleGame
getGeoscapeSaveScript	Savegame/SavedBattleGame.cpp	/^void getGeoscapeSaveScript(SavedBattleGame* sbg, SavedGame*& val)$/;"	f	namespace:OpenXcom::__anon33
getGeoscapeSaveScript	Savegame/SavedBattleGame.cpp	/^void getGeoscapeSaveScript(const SavedBattleGame* sbg, const SavedGame*& val)$/;"	f	namespace:OpenXcom::__anon33
getGeoscapeSoldier	Savegame/BattleUnit.cpp	/^Soldier *BattleUnit::getGeoscapeSoldier() const$/;"	f	class:OpenXcom::BattleUnit
getGeoscapeSoldierConstScript	Savegame/BattleUnit.cpp	/^struct getGeoscapeSoldierConstScript$/;"	s	namespace:OpenXcom::__anon36	file:
getGeoscapeSoldierScript	Savegame/BattleUnit.cpp	/^struct getGeoscapeSoldierScript$/;"	s	namespace:OpenXcom::__anon36	file:
getGetOneFree	Mod/RuleResearch.cpp	/^const std::vector<const RuleResearch*> &RuleResearch::getGetOneFree() const$/;"	f	class:OpenXcom::RuleResearch
getGetOneFreeProtected	Mod/RuleResearch.cpp	/^const std::vector<std::pair<const RuleResearch*, std::vector<const RuleResearch*> > > &RuleResearch::getGetOneFreeProtected() const$/;"	f	class:OpenXcom::RuleResearch
getGetter	Basescape/SoldierSortUtil.h	/^	getStatFn_t getGetter()$/;"	f	struct:OpenXcom::SortFunctor
getGiveScoreAlsoForResearchedArtifacts	Mod/Mod.h	/^	bool getGiveScoreAlsoForResearchedArtifacts() const { return _giveScoreAlsoForResearchedArtifacts; }$/;"	f	class:OpenXcom::Mod
getGlobalCraftLoadout	Savegame/SavedGame.cpp	/^ItemContainer *SavedGame::getGlobalCraftLoadout(int index)$/;"	f	class:OpenXcom::SavedGame
getGlobalCraftLoadoutName	Savegame/SavedGame.cpp	/^const std::string &SavedGame::getGlobalCraftLoadoutName(int index) const$/;"	f	class:OpenXcom::SavedGame
getGlobalEquipmentLayout	Savegame/SavedGame.cpp	/^std::vector<EquipmentLayoutItem*> *SavedGame::getGlobalEquipmentLayout(int index)$/;"	f	class:OpenXcom::SavedGame
getGlobalEquipmentLayoutArmor	Savegame/SavedGame.cpp	/^const std::string& SavedGame::getGlobalEquipmentLayoutArmor(int index) const$/;"	f	class:OpenXcom::SavedGame
getGlobalEquipmentLayoutName	Savegame/SavedGame.cpp	/^const std::string &SavedGame::getGlobalEquipmentLayoutName(int index) const$/;"	f	class:OpenXcom::SavedGame
getGlobalShade	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getGlobalShade() const$/;"	f	class:OpenXcom::SavedBattleGame
getGlobalType	Savegame/CraftWeaponProjectile.cpp	/^CraftWeaponProjectileGlobalType CraftWeaponProjectile::getGlobalType() const$/;"	f	class:OpenXcom::CraftWeaponProjectile
getGlobalWeight	Mod/SoldierNamePool.h	/^	int getGlobalWeight() const { return _globalWeight; }$/;"	f	class:OpenXcom::SoldierNamePool
getGlobe	Geoscape/GeoscapeState.cpp	/^Globe *GeoscapeState::getGlobe() const$/;"	f	class:OpenXcom::GeoscapeState
getGlobe	Mod/Mod.cpp	/^RuleGlobe *Mod::getGlobe() const$/;"	f	class:OpenXcom::Mod
getGlobeLatitude	Savegame/SavedGame.cpp	/^double SavedGame::getGlobeLatitude() const$/;"	f	class:OpenXcom::SavedGame
getGlobeLongitude	Savegame/SavedGame.cpp	/^double SavedGame::getGlobeLongitude() const$/;"	f	class:OpenXcom::SavedGame
getGlobeZoom	Savegame/SavedGame.cpp	/^int SavedGame::getGlobeZoom() const$/;"	f	class:OpenXcom::SavedGame
getGlow	Savegame/BattleItem.cpp	/^bool BattleItem::getGlow() const$/;"	f	class:OpenXcom::BattleItem
getGlowRange	Savegame/BattleItem.cpp	/^int BattleItem::getGlowRange() const$/;"	f	class:OpenXcom::BattleItem
getGraphCountryToggles	Savegame/SavedGame.cpp	/^const std::string &SavedGame::getGraphCountryToggles() const$/;"	f	class:OpenXcom::SavedGame
getGraphFinanceToggles	Savegame/SavedGame.cpp	/^const std::string &SavedGame::getGraphFinanceToggles() const$/;"	f	class:OpenXcom::SavedGame
getGraphRegionToggles	Savegame/SavedGame.cpp	/^const std::string &SavedGame::getGraphRegionToggles() const$/;"	f	class:OpenXcom::SavedGame
getGravShields	Savegame/Base.cpp	/^int Base::getGravShields() const$/;"	f	class:OpenXcom::Base
getGreen	Engine/Scalers/xbrz.cpp	/^inline unsigned char getGreen(uint32_t pix) { return getByte<1>(pix); }$/;"	f	namespace:__anon10
getGrenadeFromBelt	Savegame/BattleUnit.cpp	/^BattleItem *BattleUnit::getGrenadeFromBelt() const$/;"	f	class:OpenXcom::BattleUnit
getGridX	Basescape/BaseView.cpp	/^int BaseView::getGridX() const$/;"	f	class:OpenXcom::BaseView
getGridY	Basescape/BaseView.cpp	/^int BaseView::getGridY() const$/;"	f	class:OpenXcom::BaseView
getGroupNumber	Mod/MapScript.cpp	/^int MapScript::getGroupNumber()$/;"	f	class:OpenXcom::MapScript
getGroups	Mod/MapScript.h	/^	const std::vector<int> *getGroups() const {return &_groups;};$/;"	f	class:OpenXcom::MapScript
getGuaranteedRecoveredItems	Savegame/SavedBattleGame.cpp	/^std::vector<BattleItem*> *SavedBattleGame::getGuaranteedRecoveredItems()$/;"	f	class:OpenXcom::SavedBattleGame
getHairColor	Mod/Armor.cpp	/^int Armor::getHairColor(int i) const$/;"	f	class:OpenXcom::Armor
getHairColorGroup	Mod/Armor.cpp	/^int Armor::getHairColorGroup() const$/;"	f	class:OpenXcom::Armor
getHairColorRaw	Mod/Armor.h	/^	const std::vector<int> &getHairColorRaw() const { return _hairColor; }$/;"	f	class:OpenXcom::Armor
getHandSprite	Mod/RuleItem.cpp	/^int RuleItem::getHandSprite() const$/;"	f	class:OpenXcom::RuleItem
getHandSpriteOffX	Mod/RuleItem.cpp	/^int RuleItem::getHandSpriteOffX() const$/;"	f	class:OpenXcom::RuleItem
getHandSpriteOffY	Mod/RuleItem.cpp	/^int RuleItem::getHandSpriteOffY() const$/;"	f	class:OpenXcom::RuleItem
getHash	lodepng.cpp	/^static unsigned getHash(const unsigned char* data, size_t size, size_t pos)$/;"	f	file:
getHealQuantity	Mod/RuleItem.cpp	/^int RuleItem::getHealQuantity() const$/;"	f	class:OpenXcom::RuleItem
getHealQuantity	Savegame/BattleItem.cpp	/^int BattleItem::getHealQuantity() const$/;"	f	class:OpenXcom::BattleItem
getHealth	Savegame/BattleUnit.cpp	/^int BattleUnit::getHealth() const$/;"	f	class:OpenXcom::BattleUnit
getHealthFinalDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getHealthFinalDamage(int damage) const$/;"	f	class:OpenXcom::RuleDamageType
getHealthMissing	Savegame/Soldier.cpp	/^int Soldier::getHealthMissing() const$/;"	f	class:OpenXcom::Soldier
getHealthRecovery	Mod/Armor.cpp	/^int Armor::getHealthRecovery(const BattleUnit* unit, int externalBonuses) const$/;"	f	class:OpenXcom::Armor
getHealthRecovery	Mod/RuleItem.cpp	/^int RuleItem::getHealthRecovery() const$/;"	f	class:OpenXcom::RuleItem
getHealthRecovery	Mod/RuleSoldierBonus.cpp	/^int RuleSoldierBonus::getHealthRecovery(const BattleUnit *unit) const$/;"	f	class:OpenXcom::RuleSoldierBonus
getHealthRecovery	Savegame/Soldier.cpp	/^int Soldier::getHealthRecovery(int healthRecoveryPerDay) const$/;"	f	class:OpenXcom::Soldier
getHealthRecoveryPerDay	Mod/RuleBaseFacility.h	/^	int getHealthRecoveryPerDay() const { return _healthRecoveryPerDay; }$/;"	f	class:OpenXcom::RuleBaseFacility
getHealthRecoveryRaw	Mod/Armor.h	/^	const RuleStatBonus *getHealthRecoveryRaw() const { return &_healthRecovery; }$/;"	f	class:OpenXcom::Armor
getHealthRecoveryRaw	Mod/RuleSoldierBonus.h	/^	const RuleStatBonus *getHealthRecoveryRaw() const { return &_healthRecovery; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getHealthWoundThreshold	Mod/Mod.h	/^	int getHealthWoundThreshold() const { return _healthMissingWoundThreshold; }$/;"	f	class:OpenXcom::Mod
getHealthWoundThreshold	Mod/RuleSoldier.h	/^	int getHealthWoundThreshold() const { return _healthMissingWoundThreshold; }$/;"	f	class:OpenXcom::RuleSoldier
getHeatVision	Mod/Armor.cpp	/^int Armor::getHeatVision() const$/;"	f	class:OpenXcom::Armor
getHeight	Engine/Font.cpp	/^int Font::getHeight() const$/;"	f	class:OpenXcom::Font
getHeight	Engine/Screen.cpp	/^int Screen::getHeight() const$/;"	f	class:OpenXcom::Screen
getHeight	Engine/Surface.h	/^	int getHeight() const$/;"	f	class:OpenXcom::Surface
getHeight	Engine/Surface.h	/^	int getHeight() const$/;"	f	class:OpenXcom::SurfaceRaw
getHeight	Engine/SurfaceSet.cpp	/^int SurfaceSet::getHeight() const$/;"	f	class:OpenXcom::SurfaceSet
getHeight	Mod/ExtraSprites.cpp	/^int ExtraSprites::getHeight() const$/;"	f	class:OpenXcom::ExtraSprites
getHeight	Savegame/BattleUnit.cpp	/^int BattleUnit::getHeight() const$/;"	f	class:OpenXcom::BattleUnit
getHiddenMovementBackground	Savegame/SavedBattleGame.cpp	/^std::string SavedBattleGame::getHiddenMovementBackground() const$/;"	f	class:OpenXcom::SavedBattleGame
getHiddenMovementBackgrounds	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getHiddenMovementBackgrounds() const$/;"	f	class:OpenXcom::Mod
getHiddenPurchaseItems	Savegame/SavedGame.cpp	/^const std::map<std::string, bool> &SavedGame::getHiddenPurchaseItems()$/;"	f	class:OpenXcom::SavedGame
getHidePediaInfo	Mod/RuleCraftWeapon.h	/^	bool getHidePediaInfo() const { return _hidePediaInfo; }$/;"	f	class:OpenXcom::RuleCraftWeapon
getHidePower	Mod/RuleItem.h	/^	bool getHidePower() const { return _hidePower; }$/;"	f	class:OpenXcom::RuleItem
getHighestRankedXCom	Savegame/SavedBattleGame.cpp	/^BattleUnit* SavedBattleGame::getHighestRankedXCom()$/;"	f	class:OpenXcom::SavedBattleGame
getHireByCountryOdds	Mod/Mod.h	/^	int getHireByCountryOdds() const { return _hireByCountryOdds; }$/;"	f	class:OpenXcom::Mod
getHireByRegionOdds	Mod/Mod.h	/^	int getHireByRegionOdds() const { return _hireByRegionOdds; }$/;"	f	class:OpenXcom::Mod
getHireEngineerCost	Mod/Mod.cpp	/^int Mod::getHireEngineerCost() const$/;"	f	class:OpenXcom::Mod
getHireEngineersRequiresBaseFunc	Mod/Mod.h	/^	RuleBaseFacilityFunctions getHireEngineersRequiresBaseFunc() const { return _hireEngineersRequiresBaseFunc; }$/;"	f	class:OpenXcom::Mod
getHireEngineersUnlockResearch	Mod/Mod.h	/^	const std::string &getHireEngineersUnlockResearch() const { return _hireEngineersUnlockResearch; }$/;"	f	class:OpenXcom::Mod
getHireScientistCost	Mod/Mod.cpp	/^int Mod::getHireScientistCost() const$/;"	f	class:OpenXcom::Mod
getHireScientistsRequiresBaseFunc	Mod/Mod.h	/^	RuleBaseFacilityFunctions getHireScientistsRequiresBaseFunc() const { return _hireScientistsRequiresBaseFunc; }$/;"	f	class:OpenXcom::Mod
getHireScientistsUnlockResearch	Mod/Mod.h	/^	const std::string &getHireScientistsUnlockResearch() const { return _hireScientistsUnlockResearch; }$/;"	f	class:OpenXcom::Mod
getHitAnimation	Mod/RuleItem.cpp	/^int RuleItem::getHitAnimation() const$/;"	f	class:OpenXcom::RuleItem
getHitAnimationFrames	Mod/RuleItem.h	/^	int getHitAnimationFrames() const { return _hitAnimFrames; }$/;"	f	class:OpenXcom::RuleItem
getHitFrame	Savegame/Ufo.cpp	/^int Ufo::getHitFrame() const$/;"	f	class:OpenXcom::Ufo
getHitLog	Savegame/SavedBattleGame.cpp	/^const HitLog *SavedBattleGame::getHitLog() const$/;"	f	class:OpenXcom::SavedBattleGame
getHitLogText	Savegame/HitLog.cpp	/^std::string HitLog::getHitLogText(bool convert) const$/;"	f	class:OpenXcom::HitLog
getHitMissAnimation	Mod/RuleItem.cpp	/^int RuleItem::getHitMissAnimation() const$/;"	f	class:OpenXcom::RuleItem
getHitMissAnimationFrames	Mod/RuleItem.h	/^	int getHitMissAnimationFrames() const { return _hitMissAnimFrames; }$/;"	f	class:OpenXcom::RuleItem
getHitMissSound	Mod/RuleItem.cpp	/^int RuleItem::getHitMissSound() const$/;"	f	class:OpenXcom::RuleItem
getHitMissSoundRaw	Mod/RuleItem.h	/^	const std::vector<int> &getHitMissSoundRaw() const { return _hitMissSound; }$/;"	f	class:OpenXcom::RuleItem
getHitRatio	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getHitRatio() const$/;"	f	class:OpenXcom::RuleBaseFacility
getHitSound	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getHitSound() const$/;"	f	class:OpenXcom::RuleBaseFacility
getHitSound	Mod/RuleItem.cpp	/^int RuleItem::getHitSound() const$/;"	f	class:OpenXcom::RuleItem
getHitSoundRaw	Mod/RuleItem.h	/^	const std::vector<int> &getHitSoundRaw() const { return _hitSound; }$/;"	f	class:OpenXcom::RuleItem
getHitState	Savegame/BattleUnit.cpp	/^bool BattleUnit::getHitState()$/;"	f	class:OpenXcom::BattleUnit
getHome	Engine/CrossPlatform.cpp	/^static char const *getHome()$/;"	f	namespace:OpenXcom::CrossPlatform
getHorizontalGroup	Mod/MapScript.h	/^	int getHorizontalGroup() const { return _horizontalGroup; };$/;"	f	class:OpenXcom::MapScript
getHorizontalPosition	Savegame/CraftWeaponProjectile.cpp	/^int CraftWeaponProjectile::getHorizontalPosition() const$/;"	f	class:OpenXcom::CraftWeaponProjectile
getHour	Savegame/GameTime.cpp	/^int GameTime::getHour() const$/;"	f	class:OpenXcom::GameTime
getHours	Savegame/Transfer.cpp	/^int Transfer::getHours() const$/;"	f	class:OpenXcom::Transfer
getHoveredBase	Basescape/MiniBaseView.cpp	/^size_t MiniBaseView::getHoveredBase() const$/;"	f	class:OpenXcom::MiniBaseView
getHoveredListIdx	Interface/ComboBox.cpp	/^size_t ComboBox::getHoveredListIdx() const$/;"	f	class:OpenXcom::ComboBox
getHuntAlertSound	Mod/RuleUfo.cpp	/^int RuleUfo::getHuntAlertSound() const$/;"	f	class:OpenXcom::RuleUfo
getHuntBehavior	Mod/RuleUfo.cpp	/^int RuleUfo::getHuntBehavior() const$/;"	f	class:OpenXcom::RuleUfo
getHuntBehavior	Savegame/Ufo.cpp	/^int Ufo::getHuntBehavior() const$/;"	f	class:OpenXcom::Ufo
getHuntMissionMaxFrequency	Mod/AlienDeployment.cpp	/^int AlienDeployment::getHuntMissionMaxFrequency() const$/;"	f	class:OpenXcom::AlienDeployment
getHuntMode	Mod/RuleUfo.cpp	/^int RuleUfo::getHuntMode() const$/;"	f	class:OpenXcom::RuleUfo
getHuntMode	Savegame/Ufo.cpp	/^int Ufo::getHuntMode() const$/;"	f	class:OpenXcom::Ufo
getHuntSpeed	Mod/RuleUfo.cpp	/^int RuleUfo::getHuntSpeed() const$/;"	f	class:OpenXcom::RuleUfo
getHunterKillerAttraction	Savegame/Craft.cpp	/^int Craft::getHunterKillerAttraction(int huntMode) const$/;"	f	class:OpenXcom::Craft
getHunterKillerFastRetarget	Mod/Mod.h	/^	bool getHunterKillerFastRetarget() const { return _hunterKillerFastRetarget; }$/;"	f	class:OpenXcom::Mod
getHunterKillerPercentage	Mod/RuleUfo.cpp	/^int RuleUfo::getHunterKillerPercentage() const$/;"	f	class:OpenXcom::RuleUfo
getHyperDetected	Savegame/Ufo.cpp	/^bool Ufo::getHyperDetected() const$/;"	f	class:OpenXcom::Ufo
getID	Mod/UfoTrajectory.h	/^	const std::string &getID() const { return _id; }$/;"	f	class:OpenXcom::UfoTrajectory
getID	Savegame/Node.cpp	/^int Node::getID() const$/;"	f	class:OpenXcom::Node
getIStream	Engine/FileMap.cpp	/^std::unique_ptr<std::istream> FileRecord::getIStream() const$/;"	f	class:OpenXcom::FileMap::FileRecord
getIStream	Engine/FileMap.cpp	/^std::unique_ptr<std::istream> getIStream(const std::string &relativeFilePath) {$/;"	f	namespace:OpenXcom::FileMap
getIconHeight	Battlescape/Map.cpp	/^int Map::getIconHeight() const$/;"	f	class:OpenXcom::Map
getIconWidth	Battlescape/Map.cpp	/^int Map::getIconWidth() const$/;"	f	class:OpenXcom::Map
getId	Engine/ModInfo.cpp	/^const std::string &ModInfo::getId()                      const { return _id;                      }$/;"	f	class:OpenXcom::ModInfo
getId	Mod/AlienRace.cpp	/^const std::string &AlienRace::getId() const$/;"	f	class:OpenXcom::AlienRace
getId	Mod/RuleInventory.cpp	/^const std::string& RuleInventory::getId() const$/;"	f	class:OpenXcom::RuleInventory
getId	Savegame/AlienMission.cpp	/^int AlienMission::getId() const$/;"	f	class:OpenXcom::AlienMission
getId	Savegame/BattleItem.cpp	/^int BattleItem::getId() const$/;"	f	class:OpenXcom::BattleItem
getId	Savegame/BattleUnit.cpp	/^int BattleUnit::getId() const$/;"	f	class:OpenXcom::BattleUnit
getId	Savegame/SavedGame.cpp	/^int SavedGame::getId(const std::string &name)$/;"	f	class:OpenXcom::SavedGame
getId	Savegame/Soldier.cpp	/^int Soldier::getId() const$/;"	f	class:OpenXcom::Soldier
getId	Savegame/Target.cpp	/^int Target::getId() const$/;"	f	class:OpenXcom::Target
getId	Ufopaedia/ArticleState.h	/^		std::string getId() const { return _id; }$/;"	f	class:OpenXcom::ArticleState
getIdScript	Mod/RuleInventory.cpp	/^void getIdScript(const RuleInventory* bu, ScriptText& txt)$/;"	f	namespace:OpenXcom::__anon25
getIfHadPreviousFacility	Savegame/BaseFacility.cpp	/^bool BaseFacility::getIfHadPreviousFacility() const$/;"	f	class:OpenXcom::BaseFacility
getIfVisible	Battlescape/UnitSprite.cpp	/^const BattleItem *getIfVisible(const BattleItem *item)$/;"	f	namespace:OpenXcom::__anon44
getIgnoresMeleeThreat	Mod/Armor.cpp	/^bool Armor::getIgnoresMeleeThreat(bool def) const$/;"	f	class:OpenXcom::Armor
getImage	Engine/ShaderDrawHelper.h	/^	inline const GraphSubset& getImage() const$/;"	f	class:OpenXcom::helper::ShaderBase
getImage	Engine/ShaderMove.h	/^	inline GraphSubset getImage() const$/;"	f	class:OpenXcom::ShaderMove
getImportantMissionTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getImportantMissionTotal(std::vector<MissionStatistics*> *missionStatistics) const$/;"	f	class:OpenXcom::SoldierDiary
getImprovement	Savegame/Soldier.cpp	/^int Soldier::getImprovement() const$/;"	f	class:OpenXcom::Soldier
getIncludeBonusesForMinStats	Mod/RuleSoldierTransformation.h	/^	bool getIncludeBonusesForMinStats() const { return _includeBonusesForMinStats; }$/;"	f	class:OpenXcom::RuleSoldierTransformation
getIncomes	Savegame/SavedGame.cpp	/^std::vector<int64_t> &SavedGame::getIncomes()$/;"	f	class:OpenXcom::SavedGame
getIncreaseCounter	Mod/RuleResearch.h	/^	const std::vector<std::string>& getIncreaseCounter() const { return _increaseCounter; }$/;"	f	class:OpenXcom::RuleResearch
getInfiniteAmount	Savegame/Production.cpp	/^bool Production::getInfiniteAmount() const$/;"	f	class:OpenXcom::Production
getInitStats	Savegame/Soldier.cpp	/^UnitStats *Soldier::getInitStats()$/;"	f	class:OpenXcom::Soldier
getInstantWoundRecovery	Mod/Armor.cpp	/^bool Armor::getInstantWoundRecovery() const$/;"	f	class:OpenXcom::Armor
getIntelligence	Mod/Unit.cpp	/^int Unit::getIntelligence() const$/;"	f	class:OpenXcom::Unit
getIntelligence	Savegame/BattleUnit.cpp	/^int BattleUnit::getIntelligence() const$/;"	f	class:OpenXcom::BattleUnit
getInterceptionNumber	Geoscape/DogfightState.cpp	/^int DogfightState::getInterceptionNumber() const$/;"	f	class:OpenXcom::DogfightState
getInterceptionOrder	Savegame/Craft.cpp	/^int Craft::getInterceptionOrder() const$/;"	f	class:OpenXcom::Craft
getInterceptionProcessed	Savegame/Ufo.cpp	/^bool Ufo::getInterceptionProcessed() const$/;"	f	class:OpenXcom::Ufo
getInterface	Mod/Mod.cpp	/^RuleInterface *Mod::getInterface(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getInterruptResearch	Mod/RuleAlienMission.h	/^	const std::string &getInterruptResearch() const { return _interruptResearch; }$/;"	f	class:OpenXcom::RuleAlienMission
getInterruptResearch	Mod/RuleEvent.h	/^	const std::string &getInterruptResearch() const { return _interruptResearch; }$/;"	f	class:OpenXcom::RuleEvent
getInventories	Mod/Mod.cpp	/^std::map<std::string, RuleInventory*> *Mod::getInventories()$/;"	f	class:OpenXcom::Mod
getInventory	Mod/Mod.cpp	/^RuleInventory *Mod::getInventory(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getInventory	Savegame/BattleUnit.cpp	/^std::vector<BattleItem*> *BattleUnit::getInventory()$/;"	f	class:OpenXcom::BattleUnit
getInventory	Savegame/Tile.cpp	/^std::vector<BattleItem *> *Tile::getInventory()$/;"	f	class:OpenXcom::Tile
getInventoryBackpack	Mod/Mod.h	/^	RuleInventory *getInventoryBackpack() const { return getInventory("STR_BACK_PACK", true); }$/;"	f	class:OpenXcom::Mod
getInventoryBelt	Mod/Mod.h	/^	RuleInventory *getInventoryBelt() const { return getInventory("STR_BELT", true); }$/;"	f	class:OpenXcom::Mod
getInventoryGround	Mod/Mod.h	/^	RuleInventory *getInventoryGround() const { return getInventory("STR_GROUND", true); }$/;"	f	class:OpenXcom::Mod
getInventoryHeight	Mod/RuleItem.cpp	/^int RuleItem::getInventoryHeight() const$/;"	f	class:OpenXcom::RuleItem
getInventoryItemScript	Savegame/BattleUnit.cpp	/^void getInventoryItemScript(BattleUnit* bu, BattleItem *&foundItem, const RuleItem *itemRules)$/;"	f	namespace:OpenXcom::__anon36
getInventoryItemScript1	Savegame/BattleUnit.cpp	/^void getInventoryItemScript1(BattleUnit* bu, BattleItem *&foundItem, const RuleInventory *inv, const RuleItem *itemRules)$/;"	f	namespace:OpenXcom::__anon36
getInventoryItemScript2	Savegame/BattleUnit.cpp	/^void getInventoryItemScript2(BattleUnit* bu, BattleItem *&foundItem, const RuleInventory *inv)$/;"	f	namespace:OpenXcom::__anon36
getInventoryLeftHand	Mod/Mod.h	/^	RuleInventory *getInventoryLeftHand() const { return getInventory("STR_LEFT_HAND", true); }$/;"	f	class:OpenXcom::Mod
getInventoryMoveCostPercent	Mod/RuleItem.h	/^	int getInventoryMoveCostPercent() const { return _inventoryMoveCostPercent; }$/;"	f	class:OpenXcom::RuleItem
getInventoryOverlapsPaperdoll	Mod/Mod.h	/^	bool getInventoryOverlapsPaperdoll() const { return _inventoryOverlapsPaperdoll; }$/;"	f	class:OpenXcom::Mod
getInventoryRightHand	Mod/Mod.h	/^	RuleInventory *getInventoryRightHand() const { return getInventory("STR_RIGHT_HAND", true); }$/;"	f	class:OpenXcom::Mod
getInventoryScript	Mod/Mod.cpp	/^void getInventoryScript(const Mod* mod, const RuleInventory* &inv, const std::string &name)$/;"	f	namespace:OpenXcom::__anon30
getInventoryShockIndicator	Mod/RuleEnviroEffects.h	/^	const std::string& getInventoryShockIndicator() const { return _inventoryShockIndicator; }$/;"	f	class:OpenXcom::RuleEnviroEffects
getInventoryWidth	Mod/RuleItem.cpp	/^int RuleItem::getInventoryWidth() const$/;"	f	class:OpenXcom::RuleItem
getInvsList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getInvsList() const$/;"	f	class:OpenXcom::Mod
getIsAutoPatrolling	Savegame/Craft.cpp	/^bool Craft::getIsAutoPatrolling() const$/;"	f	class:OpenXcom::Craft
getItem	Battlescape/Projectile.cpp	/^BattleItem *Projectile::getItem() const$/;"	f	class:OpenXcom::Projectile
getItem	Mod/Mod.cpp	/^RuleItem *Mod::getItem(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getItem	Savegame/BattleUnit.cpp	/^BattleItem *BattleUnit::getItem(RuleInventory *slot, int x, int y) const$/;"	f	class:OpenXcom::BattleUnit
getItem	Savegame/ItemContainer.cpp	/^int ItemContainer::getItem(const RuleItem* item) const$/;"	f	class:OpenXcom::ItemContainer
getItem	Savegame/ItemContainer.cpp	/^int ItemContainer::getItem(const std::string &id) const$/;"	f	class:OpenXcom::ItemContainer
getItemCategoriesList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getItemCategoriesList() const$/;"	f	class:OpenXcom::Mod
getItemCategory	Mod/Mod.cpp	/^RuleItemCategory *Mod::getItemCategory(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getItemFinalDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getItemFinalDamage(int damage) const$/;"	f	class:OpenXcom::RuleDamageType
getItemScript	Mod/Mod.cpp	/^void getItemScript(const Mod* mod, const RuleItem* &item, const std::string &name)$/;"	f	namespace:OpenXcom::__anon30
getItemTriggers	Mod/RuleArcScript.h	/^	const std::map<std::string, bool> &getItemTriggers() const { return _itemTriggers; }$/;"	f	class:OpenXcom::RuleArcScript
getItemTriggers	Mod/RuleEventScript.h	/^	const std::map<std::string, bool> &getItemTriggers() const { return _itemTriggers; }$/;"	f	class:OpenXcom::RuleEventScript
getItemTriggers	Mod/RuleMissionScript.cpp	/^const std::map<std::string, bool> &RuleMissionScript::getItemTriggers() const$/;"	f	class:OpenXcom::RuleMissionScript
getItemType	Savegame/EquipmentLayoutItem.cpp	/^const std::string& EquipmentLayoutItem::getItemType() const$/;"	f	class:OpenXcom::EquipmentLayoutItem
getItems	Mod/MapBlock.cpp	/^const std::map<std::string, std::vector<Position> > *MapBlock::getItems() const$/;"	f	class:OpenXcom::MapBlock
getItems	Mod/RuleConverter.h	/^	const std::vector<std::string> &getItems() const { return _items; }$/;"	f	class:OpenXcom::RuleConverter
getItems	Savegame/Craft.cpp	/^ItemContainer *Craft::getItems()$/;"	f	class:OpenXcom::Craft
getItems	Savegame/SavedBattleGame.cpp	/^std::vector<BattleItem*> *SavedBattleGame::getItems()$/;"	f	class:OpenXcom::SavedBattleGame
getItems	Savegame/Transfer.cpp	/^std::string Transfer::getItems() const$/;"	f	class:OpenXcom::Transfer
getItemsFuseTimers	Mod/MapBlock.cpp	/^const std::map<std::string, std::pair<int, int> > *MapBlock::getItemsFuseTimers() const$/;"	f	class:OpenXcom::MapBlock
getItemsList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getItemsList() const$/;"	f	class:OpenXcom::Mod
getKillCriteria	Mod/RuleCommendations.cpp	/^const std::vector<std::vector<std::pair<int, std::vector<std::string> > > > *RuleCommendations::getKillCriteria() const$/;"	f	class:OpenXcom::RuleCommendations
getKillStatusString	Savegame/BattleUnitStatistics.h	/^	std::string getKillStatusString() const$/;"	f	struct:OpenXcom::BattleUnitKills
getKillTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getKillTotal() const$/;"	f	class:OpenXcom::SoldierDiary
getKills	Savegame/Soldier.cpp	/^int Soldier::getKills() const$/;"	f	class:OpenXcom::Soldier
getKills	Savegame/SoldierDiary.cpp	/^std::vector<BattleUnitKills*> &SoldierDiary::getKills()$/;"	f	class:OpenXcom::SoldierDiary
getKneelBonus	Mod/RuleItem.cpp	/^int RuleItem::getKneelBonus(Mod *mod) const$/;"	f	class:OpenXcom::RuleItem
getKneelBonusGlobal	Mod/Mod.h	/^	int getKneelBonusGlobal() const { return _kneelBonusGlobal; }$/;"	f	class:OpenXcom::Mod
getKneelChangeCost	Savegame/BattleUnit.h	/^	int getKneelChangeCost() const { return isKneeled() ? getKneelUpCost() : getKneelDownCost(); }$/;"	f	class:OpenXcom::BattleUnit
getKneelDownCost	Savegame/BattleUnit.h	/^	int getKneelDownCost() const { return 4; }$/;"	f	class:OpenXcom::BattleUnit
getKneelHeight	Mod/Armor.cpp	/^int Armor::getKneelHeight() const$/;"	f	class:OpenXcom::Armor
getKneelHeight	Mod/RuleSoldier.cpp	/^int RuleSoldier::getKneelHeight() const$/;"	f	class:OpenXcom::RuleSoldier
getKneelHeight	Mod/Unit.cpp	/^int Unit::getKneelHeight() const$/;"	f	class:OpenXcom::Unit
getKneelHeight	Savegame/BattleUnit.cpp	/^int BattleUnit::getKneelHeight() const$/;"	f	class:OpenXcom::BattleUnit
getKneelReserved	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::getKneelReserved() const$/;"	f	class:OpenXcom::BattlescapeGame
getKneelReserved	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::getKneelReserved() const$/;"	f	class:OpenXcom::SavedBattleGame
getKneelUpCost	Savegame/BattleUnit.h	/^	int getKneelUpCost() const { return 8; }$/;"	f	class:OpenXcom::BattleUnit
getLUTs	Mod/Mod.cpp	/^const std::vector<std::vector<Uint8> > *Mod::getLUTs() const$/;"	f	class:OpenXcom::Mod
getLabel	Mod/MapScript.h	/^	int getLabel() const {return _label;};$/;"	f	class:OpenXcom::MapScript
getLabel	Mod/RuleMissionScript.cpp	/^int RuleMissionScript::getLabel() const$/;"	f	class:OpenXcom::RuleMissionScript
getLabelColor	Mod/RuleCountry.cpp	/^int RuleCountry::getLabelColor() const$/;"	f	class:OpenXcom::RuleCountry
getLabelLatitude	Mod/RuleCountry.cpp	/^double RuleCountry::getLabelLatitude() const$/;"	f	class:OpenXcom::RuleCountry
getLabelLongitude	Mod/RuleCountry.cpp	/^double RuleCountry::getLabelLongitude() const$/;"	f	class:OpenXcom::RuleCountry
getLaboratories	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getLaboratories() const$/;"	f	class:OpenXcom::RuleBaseFacility
getLandId	Savegame/Ufo.cpp	/^int Ufo::getLandId() const$/;"	f	class:OpenXcom::Ufo
getLandMarker	Mod/RuleUfo.cpp	/^int RuleUfo::getLandMarker() const$/;"	f	class:OpenXcom::RuleUfo
getLandPoint	Savegame/AlienMission.cpp	/^std::pair<double, double> AlienMission::getLandPoint(const Globe &globe, const RuleRegion &region, size_t zone, const Ufo &ufo)$/;"	f	class:OpenXcom::AlienMission
getLandPointForMissionSite	Savegame/AlienMission.cpp	/^std::pair<double, double> AlienMission::getLandPointForMissionSite(const Globe& globe, const RuleRegion& region, size_t zone, int area, const Ufo& ufo)$/;"	f	class:OpenXcom::AlienMission
getLandShadow	Geoscape/Globe.cpp	/^	static inline Uint8 getLandShadow(const Uint8& dest, const Uint8& shadow)$/;"	f	struct:OpenXcom::__anon49::CreateShadow
getLanguage	Engine/Game.h	/^	Language *getLanguage() const { return _lang; }$/;"	f	class:OpenXcom::Game
getLastId	Savegame/SavedGame.cpp	/^int SavedGame::getLastId(const std::string& name)$/;"	f	class:OpenXcom::SavedGame
getLastMonth	Mod/RuleArcScript.h	/^	int getLastMonth() const { return _lastMonth; }$/;"	f	class:OpenXcom::RuleArcScript
getLastMonth	Mod/RuleEventScript.h	/^	int getLastMonth() const { return _lastMonth; }$/;"	f	class:OpenXcom::RuleEventScript
getLastMonth	Mod/RuleMissionScript.cpp	/^int RuleMissionScript::getLastMonth() const$/;"	f	class:OpenXcom::RuleMissionScript
getLastPosition	Savegame/BattleUnit.cpp	/^Position BattleUnit::getLastPosition() const$/;"	f	class:OpenXcom::BattleUnit
getLastRowIndex	Interface/TextList.cpp	/^int TextList::getLastRowIndex() const$/;"	f	class:OpenXcom::TextList
getLastSelectedArmor	Savegame/SavedGame.cpp	/^std::string SavedGame::getLastSelectedArmor() const$/;"	f	class:OpenXcom::SavedGame
getLastUsedMapScript	Savegame/SavedBattleGame.h	/^	const std::string& getLastUsedMapScript() const { return _lastUsedMapScript; }$/;"	f	class:OpenXcom::SavedBattleGame
getLatMax	Mod/RuleCountry.h	/^	const std::vector<double> &getLatMax() const { return _latMax; }$/;"	f	class:OpenXcom::RuleCountry
getLatMax	Mod/RuleRegion.h	/^	const std::vector<double> &getLatMax() const { return _latMax; }$/;"	f	class:OpenXcom::RuleRegion
getLatMin	Mod/RuleCountry.h	/^	const std::vector<double> &getLatMin() const { return _latMin; }$/;"	f	class:OpenXcom::RuleCountry
getLatMin	Mod/RuleRegion.h	/^	const std::vector<double> &getLatMin() const { return _latMin; }$/;"	f	class:OpenXcom::RuleRegion
getLatitude	Mod/Polygon.cpp	/^double Polygon::getLatitude(int i) const$/;"	f	class:OpenXcom::Polygon
getLatitude	Mod/Polyline.cpp	/^double Polyline::getLatitude(int i) const$/;"	f	class:OpenXcom::Polyline
getLatitude	Savegame/Target.cpp	/^double Target::getLatitude() const$/;"	f	class:OpenXcom::Target
getLatitudeAuto	Savegame/Craft.cpp	/^double Craft::getLatitudeAuto() const$/;"	f	class:OpenXcom::Craft
getLauncherItem	Mod/RuleCraftWeapon.cpp	/^const RuleItem* RuleCraftWeapon::getLauncherItem() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getLayersDefaultPrefix	Mod/Armor.h	/^	const std::string &getLayersDefaultPrefix() const { return _layersDefaultPrefix; }$/;"	f	class:OpenXcom::Armor
getLayersDefinition	Mod/Armor.h	/^	const std::map<std::string, std::vector<std::string> > &getLayersDefinition() const { return _layersDefinition; }$/;"	f	class:OpenXcom::Armor
getLayersSpecificPrefix	Mod/Armor.h	/^	const std::map<int, std::string> &getLayersSpecificPrefix() const { return _layersSpecificPrefix; }$/;"	f	class:OpenXcom::Armor
getLeavesBehindOnSell	Mod/RuleBaseFacility.h	/^	const std::vector<const RuleBaseFacility*> &getLeavesBehindOnSell() const { return _leavesBehindOnSell; }$/;"	f	class:OpenXcom::RuleBaseFacility
getLeftBlackBand	Engine/Action.cpp	/^int Action::getLeftBlackBand() const$/;"	f	class:OpenXcom::Action
getLeftHandWeapon	Savegame/BattleUnit.cpp	/^BattleItem *BattleUnit::getLeftHandWeapon() const$/;"	f	class:OpenXcom::BattleUnit
getLeftHandWeaponConstScript	Savegame/BattleUnit.cpp	/^struct getLeftHandWeaponConstScript$/;"	s	namespace:OpenXcom::__anon36	file:
getLeftHandWeaponScript	Savegame/BattleUnit.cpp	/^struct getLeftHandWeaponScript$/;"	s	namespace:OpenXcom::__anon36	file:
getLeftSideArmor	Mod/Armor.cpp	/^int Armor::getLeftSideArmor() const$/;"	f	class:OpenXcom::Armor
getLeftSideArmor	Mod/RuleSoldierBonus.h	/^	int getLeftSideArmor() const { return _sideArmor + _leftArmorDiff; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getLessAliensDuringBaseDefense	Mod/Mod.h	/^	bool getLessAliensDuringBaseDefense() const { return _lessAliensDuringBaseDefense; }$/;"	f	class:OpenXcom::Mod
getLight	Savegame/Tile.cpp	/^int Tile::getLight(LightLayers layer) const$/;"	f	class:OpenXcom::Tile
getLightMulti	Savegame/Tile.cpp	/^int Tile::getLightMulti(LightLayers layer) const$/;"	f	class:OpenXcom::Tile
getLightSource	Mod/MapData.cpp	/^int MapData::getLightSource() const$/;"	f	class:OpenXcom::MapData
getLineX	Interface/Text.cpp	/^int Text::getLineX(int line) const$/;"	f	class:OpenXcom::Text
getList	Engine/Language.cpp	/^void Language::getList(std::vector<std::string> &ids, std::vector<std::string> &names)$/;"	f	class:OpenXcom::Language
getList	Savegame/SaveConverter.cpp	/^void SaveConverter::getList(Language *lang, SaveOriginal info[NUM_SAVES])$/;"	f	class:OpenXcom::SaveConverter
getList	Savegame/SavedGame.cpp	/^std::vector<SaveInfo> SavedGame::getList(Language *lang, bool autoquick)$/;"	f	class:OpenXcom::SavedGame
getListOrder	Mod/ArticleDefinition.cpp	/^	int ArticleDefinition::getListOrder() const$/;"	f	class:OpenXcom::ArticleDefinition
getListOrder	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getListOrder() const$/;"	f	class:OpenXcom::RuleBaseFacility
getListOrder	Mod/RuleCraft.cpp	/^int RuleCraft::getListOrder() const$/;"	f	class:OpenXcom::RuleCraft
getListOrder	Mod/RuleInventory.cpp	/^int RuleInventory::getListOrder() const$/;"	f	class:OpenXcom::RuleInventory
getListOrder	Mod/RuleItem.cpp	/^int RuleItem::getListOrder() const$/;"	f	class:OpenXcom::RuleItem
getListOrder	Mod/RuleItemCategory.cpp	/^int RuleItemCategory::getListOrder() const$/;"	f	class:OpenXcom::RuleItemCategory
getListOrder	Mod/RuleManufacture.cpp	/^int RuleManufacture::getListOrder() const$/;"	f	class:OpenXcom::RuleManufacture
getListOrder	Mod/RuleResearch.cpp	/^int RuleResearch::getListOrder() const$/;"	f	class:OpenXcom::RuleResearch
getListOrder	Mod/RuleSoldier.cpp	/^int RuleSoldier::getListOrder() const$/;"	f	class:OpenXcom::RuleSoldier
getListOrder	Mod/RuleSoldierBonus.h	/^	int getListOrder() const { return _listOrder; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getListOrder	Mod/RuleSoldierTransformation.cpp	/^int RuleSoldierTransformation::getListOrder() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getListScript	Savegame/BattleUnit.cpp	/^void getListScript(BattleUnit* bu, BattleItem *&foundItem, int i)$/;"	f	namespace:OpenXcom::__anon36
getListSizeHackScript	Savegame/BattleUnit.cpp	/^void getListSizeHackScript(BattleUnit* bu, int& i)$/;"	f	namespace:OpenXcom::__anon36
getListSizeScript	Savegame/BattleUnit.cpp	/^void getListSizeScript(BattleUnit* bu, int& i)$/;"	f	namespace:OpenXcom::__anon36
getLiveAlienGeoscape	Mod/Unit.h	/^	const RuleItem* getLiveAlienGeoscape() const { return _liveAlien; }$/;"	f	class:OpenXcom::Unit
getLoadLastSave	Engine/Options.cpp	/^bool getLoadLastSave()$/;"	f	namespace:OpenXcom::Options
getLocale	Engine/CrossPlatform.cpp	/^std::string getLocale()$/;"	f	namespace:OpenXcom::CrossPlatform
getLocationString	Savegame/MissionStatistics.h	/^	std::string getLocationString() const$/;"	f	struct:OpenXcom::MissionStatistics
getLoftID	Mod/MapData.cpp	/^int MapData::getLoftID(int layer) const$/;"	f	class:OpenXcom::MapData
getLoftemps	Savegame/BattleUnit.cpp	/^int BattleUnit::getLoftemps(int entry) const$/;"	f	class:OpenXcom::BattleUnit
getLoftempsSet	Mod/Armor.cpp	/^const std::vector<int>& Armor::getLoftempsSet() const$/;"	f	class:OpenXcom::Armor
getLogFileName	Engine/CrossPlatform.cpp	/^const std::string& getLogFileName() { return logFileName; }$/;"	f	namespace:OpenXcom::CrossPlatform
getLonMax	Mod/RuleCountry.h	/^	const std::vector<double> &getLonMax() const { return _lonMax; }$/;"	f	class:OpenXcom::RuleCountry
getLonMax	Mod/RuleRegion.h	/^	const std::vector<double> &getLonMax() const { return _lonMax; }$/;"	f	class:OpenXcom::RuleRegion
getLonMin	Mod/RuleCountry.h	/^	const std::vector<double> &getLonMin() const { return _lonMin; }$/;"	f	class:OpenXcom::RuleCountry
getLonMin	Mod/RuleRegion.h	/^	const std::vector<double> &getLonMin() const { return _lonMin; }$/;"	f	class:OpenXcom::RuleRegion
getLongRangeDetection	Savegame/Base.cpp	/^int Base::getLongRangeDetection() const$/;"	f	class:OpenXcom::Base
getLongitude	Mod/Polygon.cpp	/^double Polygon::getLongitude(int i) const$/;"	f	class:OpenXcom::Polygon
getLongitude	Mod/Polyline.cpp	/^double Polyline::getLongitude(int i) const$/;"	f	class:OpenXcom::Polyline
getLongitude	Savegame/Target.cpp	/^double Target::getLongitude() const$/;"	f	class:OpenXcom::Target
getLongitudeAuto	Savegame/Craft.cpp	/^double Craft::getLongitudeAuto() const$/;"	f	class:OpenXcom::Craft
getLook	Savegame/Soldier.cpp	/^SoldierLook Soldier::getLook() const$/;"	f	class:OpenXcom::Soldier
getLook	Savegame/SoldierAvatar.cpp	/^SoldierLook SoldierAvatar::getLook() const$/;"	f	class:OpenXcom::SoldierAvatar
getLookScript	Savegame/BattleUnit.cpp	/^void getLookScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
getLookScript	Savegame/Soldier.cpp	/^void getLookScript(const Soldier *so, int &ret)$/;"	f	namespace:OpenXcom::__anon35
getLookVariant	Savegame/Soldier.cpp	/^int Soldier::getLookVariant() const$/;"	f	class:OpenXcom::Soldier
getLookVariant	Savegame/SoldierAvatar.cpp	/^int SoldierAvatar::getLookVariant() const$/;"	f	class:OpenXcom::SoldierAvatar
getLookVariantScript	Savegame/BattleUnit.cpp	/^void getLookVariantScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
getLookVariantScript	Savegame/Soldier.cpp	/^void getLookVariantScript(const Soldier *so, int &ret)$/;"	f	namespace:OpenXcom::__anon35
getLookup	Mod/RuleResearch.cpp	/^const std::string &RuleResearch::getLookup() const$/;"	f	class:OpenXcom::RuleResearch
getLootValueTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getLootValueTotal(std::vector<MissionStatistics*> *missionStatistics) const$/;"	f	class:OpenXcom::SoldierDiary
getLoseCutscene	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::getLoseCutscene() const$/;"	f	class:OpenXcom::AlienDeployment
getLoseDefeatCutscene	Mod/Mod.h	/^	const std::string &getLoseDefeatCutscene() const { return _loseDefeat; }$/;"	f	class:OpenXcom::Mod
getLoseGame	Mod/RuleVideo.h	/^	bool getLoseGame() const { return _loseGame; }$/;"	f	class:OpenXcom::RuleVideo
getLoseMoneyCutscene	Mod/Mod.h	/^	const std::string &getLoseMoneyCutscene() const { return _loseMoney; }$/;"	f	class:OpenXcom::Mod
getLoseRatingCutscene	Mod/Mod.h	/^	const std::string &getLoseRatingCutscene() const { return _loseRating; }$/;"	f	class:OpenXcom::Mod
getLostVIPs	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getLostVIPs() const$/;"	f	class:OpenXcom::SavedBattleGame
getLostVIPsScore	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getLostVIPsScore() const$/;"	f	class:OpenXcom::SavedBattleGame
getLowFuel	Savegame/Craft.cpp	/^bool Craft::getLowFuel() const$/;"	f	class:OpenXcom::Craft
getMCDPatch	Mod/Mod.cpp	/^MCDPatch *Mod::getMCDPatch(const std::string &id) const$/;"	f	class:OpenXcom::Mod
getMCDReplacement	Mod/MapScript.h	/^	MCDReplacement *getMCDReplacement(const std::string& type)$/;"	f	struct:OpenXcom::TunnelData
getMMBFlag	Engine/Game.h	/^	bool getMMBFlag() const { return _mmb; }$/;"	f	class:OpenXcom::Game
getMainHandWeapon	Savegame/BattleUnit.cpp	/^BattleItem *BattleUnit::getMainHandWeapon(bool quickest) const$/;"	f	class:OpenXcom::BattleUnit
getMainTitle	Mod/ArticleDefinition.h	/^		const std::string& getMainTitle()$/;"	f	class:OpenXcom::ArticleDefinition
getMaintenances	Savegame/SavedGame.cpp	/^std::vector<int64_t> &SavedGame::getMaintenances()$/;"	f	class:OpenXcom::SavedGame
getMaleAnnoyedSounds	Mod/Armor.h	/^	const std::vector<int> &getMaleAnnoyedSounds() const { return _annoyedSoundMale; }$/;"	f	class:OpenXcom::Armor
getMaleAnnoyedSounds	Mod/RuleSoldier.h	/^	const std::vector<int> &getMaleAnnoyedSounds() const { return _annoyedSoundMale; }$/;"	f	class:OpenXcom::RuleSoldier
getMaleBerserkSounds	Mod/RuleSoldier.cpp	/^const std::vector<int> &RuleSoldier::getMaleBerserkSounds() const$/;"	f	class:OpenXcom::RuleSoldier
getMaleDeathSounds	Mod/Armor.h	/^	const std::vector<int> &getMaleDeathSounds() const { return _deathSoundMale; }$/;"	f	class:OpenXcom::Armor
getMaleDeathSounds	Mod/RuleSoldier.cpp	/^const std::vector<int> &RuleSoldier::getMaleDeathSounds() const$/;"	f	class:OpenXcom::RuleSoldier
getMalePanicSounds	Mod/RuleSoldier.cpp	/^const std::vector<int> &RuleSoldier::getMalePanicSounds() const$/;"	f	class:OpenXcom::RuleSoldier
getMaleSelectUnitSounds	Mod/Armor.h	/^	const std::vector<int> &getMaleSelectUnitSounds() const { return _selectUnitSoundMale; }$/;"	f	class:OpenXcom::Armor
getMaleSelectUnitSounds	Mod/RuleSoldier.h	/^	const std::vector<int> &getMaleSelectUnitSounds() const { return _selectUnitSoundMale; }$/;"	f	class:OpenXcom::RuleSoldier
getMaleSelectWeaponSounds	Mod/Armor.h	/^	const std::vector<int> &getMaleSelectWeaponSounds() const { return _selectWeaponSoundMale; }$/;"	f	class:OpenXcom::Armor
getMaleSelectWeaponSounds	Mod/RuleSoldier.h	/^	const std::vector<int> &getMaleSelectWeaponSounds() const { return _selectWeaponSoundMale; }$/;"	f	class:OpenXcom::RuleSoldier
getMaleStartMovingSounds	Mod/Armor.h	/^	const std::vector<int> &getMaleStartMovingSounds() const { return _startMovingSoundMale; }$/;"	f	class:OpenXcom::Armor
getMaleStartMovingSounds	Mod/RuleSoldier.h	/^	const std::vector<int> &getMaleStartMovingSounds() const { return _startMovingSoundMale; }$/;"	f	class:OpenXcom::RuleSoldier
getMana	Savegame/BattleUnit.cpp	/^int BattleUnit::getMana() const$/;"	f	class:OpenXcom::BattleUnit
getManaExperience	Mod/RuleItem.h	/^	int getManaExperience() const { return _manaExperience; }$/;"	f	class:OpenXcom::RuleItem
getManaFinalDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getManaFinalDamage(int damage) const$/;"	f	class:OpenXcom::RuleDamageType
getManaMissing	Savegame/Soldier.cpp	/^int Soldier::getManaMissing() const$/;"	f	class:OpenXcom::Soldier
getManaRecovery	Mod/Armor.cpp	/^int Armor::getManaRecovery(const BattleUnit* unit, int externalBonuses) const$/;"	f	class:OpenXcom::Armor
getManaRecovery	Mod/RuleItem.h	/^	int getManaRecovery() const { return _manaRecovery; }$/;"	f	class:OpenXcom::RuleItem
getManaRecovery	Mod/RuleSoldierBonus.cpp	/^int RuleSoldierBonus::getManaRecovery(const BattleUnit *unit) const$/;"	f	class:OpenXcom::RuleSoldierBonus
getManaRecovery	Savegame/Soldier.cpp	/^int Soldier::getManaRecovery(int manaRecoveryPerDay) const$/;"	f	class:OpenXcom::Soldier
getManaRecoveryPerDay	Mod/RuleBaseFacility.h	/^	int getManaRecoveryPerDay() const { return _manaRecoveryPerDay; }$/;"	f	class:OpenXcom::RuleBaseFacility
getManaRecoveryRaw	Mod/Armor.h	/^	const RuleStatBonus* getManaRecoveryRaw() const { return &_manaRecovery; }$/;"	f	class:OpenXcom::Armor
getManaRecoveryRaw	Mod/RuleSoldierBonus.h	/^	const RuleStatBonus *getManaRecoveryRaw() const { return &_manaRecovery; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getManaUnlockResearch	Mod/Mod.h	/^	const std::string &getManaUnlockResearch() const { return _manaUnlockResearch; }$/;"	f	class:OpenXcom::Mod
getManaWoundThreshold	Mod/Mod.h	/^	int getManaWoundThreshold() const { return _manaMissingWoundThreshold; }$/;"	f	class:OpenXcom::Mod
getManaWoundThreshold	Mod/RuleSoldier.h	/^	int getManaWoundThreshold() const { return _manaMissingWoundThreshold; }$/;"	f	class:OpenXcom::RuleSoldier
getManufacture	Mod/Mod.cpp	/^RuleManufacture *Mod::getManufacture (const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getManufacture	Mod/RuleConverter.h	/^	const std::vector<std::string> &getManufacture() const { return _manufacture; }$/;"	f	class:OpenXcom::RuleConverter
getManufactureCost	Mod/RuleManufacture.cpp	/^int RuleManufacture::getManufactureCost() const$/;"	f	class:OpenXcom::RuleManufacture
getManufactureList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getManufactureList() const$/;"	f	class:OpenXcom::Mod
getManufactureRuleStatus	Savegame/SavedGame.cpp	/^int SavedGame::getManufactureRuleStatus(const std::string &manufactureRule)$/;"	f	class:OpenXcom::SavedGame
getManufactureTime	Mod/RuleManufacture.cpp	/^int RuleManufacture::getManufactureTime() const$/;"	f	class:OpenXcom::RuleManufacture
getMap	Battlescape/BattlescapeGame.cpp	/^Map *BattlescapeGame::getMap()$/;"	f	class:OpenXcom::BattlescapeGame
getMap	Battlescape/BattlescapeState.cpp	/^Map *BattlescapeState::getMap() const$/;"	f	class:OpenXcom::BattlescapeState
getMapBackgroundColor	Mod/RuleEnviroEffects.h	/^	int getMapBackgroundColor() const { return _mapBackgroundColor; }$/;"	f	class:OpenXcom::RuleEnviroEffects
getMapBlock	Mod/RuleTerrain.cpp	/^MapBlock* RuleTerrain::getMapBlock(const std::string &name)$/;"	f	class:OpenXcom::RuleTerrain
getMapBlocks	Mod/RuleTerrain.cpp	/^std::vector<MapBlock*> *RuleTerrain::getMapBlocks()$/;"	f	class:OpenXcom::RuleTerrain
getMapData	Mod/RuleTerrain.cpp	/^MapData *RuleTerrain::getMapData(unsigned int *id, int *mapDataSetID) const$/;"	f	class:OpenXcom::RuleTerrain
getMapData	Savegame/Tile.cpp	/^void Tile::getMapData(int *mapDataID, int *mapDataSetID, TilePart part) const$/;"	f	class:OpenXcom::Tile
getMapData	Savegame/Tile.h	/^	MapData *getMapData(TilePart part) const$/;"	f	class:OpenXcom::Tile
getMapDataSet	Mod/Mod.cpp	/^MapDataSet *Mod::getMapDataSet(const std::string &name)$/;"	f	class:OpenXcom::Mod
getMapDataSets	Mod/RuleTerrain.cpp	/^std::vector<MapDataSet*> *RuleTerrain::getMapDataSets()$/;"	f	class:OpenXcom::RuleTerrain
getMapDataSets	Savegame/SavedBattleGame.cpp	/^std::vector<MapDataSet*> *SavedBattleGame::getMapDataSets()$/;"	f	class:OpenXcom::SavedBattleGame
getMapName	Mod/RuleBaseFacility.cpp	/^std::string RuleBaseFacility::getMapName() const$/;"	f	class:OpenXcom::RuleBaseFacility
getMapOffset	Battlescape/Camera.cpp	/^Position Camera::getMapOffset() const$/;"	f	class:OpenXcom::Camera
getMapScript	Mod/Mod.cpp	/^const std::vector<MapScript*> *Mod::getMapScript(const std::string& id) const$/;"	f	class:OpenXcom::Mod
getMapScriptsRaw	Mod/Mod.h	/^	const std::map<std::string, std::vector<MapScript*> > &getMapScriptsRaw() const { return _mapScripts; }$/;"	f	class:OpenXcom::Mod
getMapShockIndicator	Mod/RuleEnviroEffects.h	/^	const std::string& getMapShockIndicator() const { return _mapShockIndicator; }$/;"	f	class:OpenXcom::RuleEnviroEffects
getMapSizeX	Battlescape/Camera.cpp	/^int Camera::getMapSizeX() const$/;"	f	class:OpenXcom::Camera
getMapSizeX	Savegame/SavedBattleGame.h	/^	int getMapSizeX() const { return _mapsize_x; }$/;"	f	class:OpenXcom::SavedBattleGame
getMapSizeXYZ	Savegame/SavedBattleGame.h	/^	int getMapSizeXYZ() const { return _mapsize_x * _mapsize_y * _mapsize_z; }$/;"	f	class:OpenXcom::SavedBattleGame
getMapSizeY	Battlescape/Camera.cpp	/^int Camera::getMapSizeY() const$/;"	f	class:OpenXcom::Camera
getMapSizeY	Savegame/SavedBattleGame.h	/^	int getMapSizeY() const { return _mapsize_y; }$/;"	f	class:OpenXcom::SavedBattleGame
getMapSizeZ	Savegame/SavedBattleGame.h	/^	int getMapSizeZ() const { return _mapsize_z; }$/;"	f	class:OpenXcom::SavedBattleGame
getMargin	Interface/TextList.cpp	/^int TextList::getMargin() const$/;"	f	class:OpenXcom::TextList
getMarkCiviliansAsVIP	Mod/AlienDeployment.h	/^	bool getMarkCiviliansAsVIP() const { return _markCiviliansAsVIP; }$/;"	f	class:OpenXcom::AlienDeployment
getMarker	Mod/City.cpp	/^int City::getMarker() const$/;"	f	class:OpenXcom::City
getMarker	Mod/RuleCraft.cpp	/^int RuleCraft::getMarker() const$/;"	f	class:OpenXcom::RuleCraft
getMarker	Mod/RuleUfo.cpp	/^int RuleUfo::getMarker() const$/;"	f	class:OpenXcom::RuleUfo
getMarker	Savegame/AlienBase.cpp	/^int AlienBase::getMarker() const$/;"	f	class:OpenXcom::AlienBase
getMarker	Savegame/Base.cpp	/^int Base::getMarker() const$/;"	f	class:OpenXcom::Base
getMarker	Savegame/Craft.cpp	/^int Craft::getMarker() const$/;"	f	class:OpenXcom::Craft
getMarker	Savegame/MissionSite.cpp	/^int MissionSite::getMarker() const$/;"	f	class:OpenXcom::MissionSite
getMarker	Savegame/Ufo.cpp	/^int Ufo::getMarker() const$/;"	f	class:OpenXcom::Ufo
getMarker	Savegame/Waypoint.cpp	/^int Waypoint::getMarker() const$/;"	f	class:OpenXcom::Waypoint
getMarkerColor	Savegame/Tile.cpp	/^int Tile::getMarkerColor() const$/;"	f	class:OpenXcom::Tile
getMarkerIcon	Mod/AlienDeployment.cpp	/^int AlienDeployment::getMarkerIcon() const$/;"	f	class:OpenXcom::AlienDeployment
getMarkerId	Savegame/Target.cpp	/^int Target::getMarkerId() const$/;"	f	class:OpenXcom::Target
getMarkerId	Savegame/Ufo.cpp	/^int Ufo::getMarkerId() const$/;"	f	class:OpenXcom::Ufo
getMarkerName	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::getMarkerName() const$/;"	f	class:OpenXcom::AlienDeployment
getMarkerName	Savegame/MissionSite.cpp	/^std::string MissionSite::getMarkerName() const$/;"	f	class:OpenXcom::MissionSite
getMarkerName	Savegame/Target.cpp	/^std::string Target::getMarkerName() const$/;"	f	class:OpenXcom::Target
getMarkerName	Savegame/Ufo.cpp	/^std::string Ufo::getMarkerName() const$/;"	f	class:OpenXcom::Ufo
getMarkers	Mod/RuleConverter.h	/^	const std::vector<std::string> &getMarkers() const { return _markers; }$/;"	f	class:OpenXcom::RuleConverter
getMaster	Engine/ModInfo.cpp	/^const std::string &ModInfo::getMaster()                  const { return _master;                  }$/;"	f	class:OpenXcom::ModInfo
getMasterUserFolder	Engine/Options.cpp	/^std::string getMasterUserFolder()$/;"	f	namespace:OpenXcom::Options
getMax	Interface/Bar.cpp	/^double Bar::getMax() const$/;"	f	class:OpenXcom::Bar
getMaxAlienRank	Mod/AlienDeployment.cpp	/^int AlienDeployment::getMaxAlienRank() const$/;"	f	class:OpenXcom::AlienDeployment
getMaxAllowedPerBase	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getMaxAllowedPerBase() const$/;"	f	class:OpenXcom::RuleBaseFacility
getMaxAltitude	Mod/RuleCraft.cpp	/^int RuleCraft::getMaxAltitude() const$/;"	f	class:OpenXcom::RuleCraft
getMaxAmbienceRandomDelay	Mod/RuleTerrain.h	/^	int getMaxAmbienceRandomDelay() const { return _maxAmbienceRandomDelay; }$/;"	f	class:OpenXcom::RuleTerrain
getMaxAmbienceRandomDelay	Savegame/SavedBattleGame.h	/^	int getMaxAmbienceRandomDelay() const { return _maxAmbienceRandomDelay; }$/;"	f	class:OpenXcom::SavedBattleGame
getMaxArcs	Mod/RuleArcScript.h	/^	int getMaxArcs() const { return _maxArcs; }$/;"	f	class:OpenXcom::RuleArcScript
getMaxArmor	Savegame/BattleUnit.cpp	/^int BattleUnit::getMaxArmor(UnitSide side) const$/;"	f	class:OpenXcom::BattleUnit
getMaxDamage	Mod/RuleCraft.cpp	/^int RuleCraft::getMaxDamage() const$/;"	f	class:OpenXcom::RuleCraft
getMaxDarknessToSeeUnits	Battlescape/TileEngine.h	/^	int getMaxDarknessToSeeUnits() const { return _maxDarknessToSeeUnits; }$/;"	f	class:OpenXcom::TileEngine
getMaxDarknessToSeeUnits	Mod/Mod.h	/^	int getMaxDarknessToSeeUnits() const { return _maxDarknessToSeeUnits; }$/;"	f	class:OpenXcom::Mod
getMaxDepth	Mod/AlienDeployment.cpp	/^int AlienDeployment::getMaxDepth() const$/;"	f	class:OpenXcom::AlienDeployment
getMaxDepth	Mod/RuleTerrain.cpp	/^int RuleTerrain::getMaxDepth() const$/;"	f	class:OpenXcom::RuleTerrain
getMaxDifficulty	Mod/RuleArcScript.h	/^	int getMaxDifficulty() const { return _maxDifficulty; }$/;"	f	class:OpenXcom::RuleArcScript
getMaxDifficulty	Mod/RuleEventScript.h	/^	int getMaxDifficulty() const { return _maxDifficulty; }$/;"	f	class:OpenXcom::RuleEventScript
getMaxDynamicLightDistance	Battlescape/TileEngine.h	/^	int getMaxDynamicLightDistance() const { return _maxDynamicLightDistance; }$/;"	f	class:OpenXcom::TileEngine
getMaxDynamicLightDistance	Mod/Mod.h	/^	int getMaxDynamicLightDistance() const { return _maxDynamicLightDistance; }$/;"	f	class:OpenXcom::Mod
getMaxFuel	Mod/RuleCraft.cpp	/^int RuleCraft::getMaxFuel() const$/;"	f	class:OpenXcom::RuleCraft
getMaxFunds	Mod/RuleArcScript.h	/^	int64_t getMaxFunds() const { return _maxFunds; }$/;"	f	class:OpenXcom::RuleArcScript
getMaxFunds	Mod/RuleEventScript.h	/^	int64_t getMaxFunds() const { return _maxFunds; }$/;"	f	class:OpenXcom::RuleEventScript
getMaxFunds	Mod/RuleMissionScript.h	/^	int64_t getMaxFunds() const { return _maxFunds; }$/;"	f	class:OpenXcom::RuleMissionScript
getMaxItems	Mod/RuleCraft.cpp	/^int RuleCraft::getMaxItems() const$/;"	f	class:OpenXcom::RuleCraft
getMaxLargeSoldiers	Mod/RuleCraft.h	/^	int getMaxLargeSoldiers() const { return _maxLargeSoldiers; }$/;"	f	class:OpenXcom::RuleCraft
getMaxLargeUnits	Mod/RuleCraft.h	/^	int getMaxLargeUnits() const { return _maxLargeUnits; }$/;"	f	class:OpenXcom::RuleCraft
getMaxLargeVehicles	Mod/RuleCraft.h	/^	int getMaxLargeVehicles() const { return _maxLargeVehicles; }$/;"	f	class:OpenXcom::RuleCraft
getMaxLookVariant	Mod/Mod.h	/^	int getMaxLookVariant() const  {return abs(_maxLookVariant) % 16;}$/;"	f	class:OpenXcom::Mod
getMaxRange	Mod/RuleItem.cpp	/^int RuleItem::getMaxRange() const$/;"	f	class:OpenXcom::RuleItem
getMaxRuns	Mod/RuleMissionScript.cpp	/^int RuleMissionScript::getMaxRuns() const$/;"	f	class:OpenXcom::RuleMissionScript
getMaxScore	Mod/RuleArcScript.h	/^	int getMaxScore() const { return _maxScore; }$/;"	f	class:OpenXcom::RuleArcScript
getMaxScore	Mod/RuleEventScript.h	/^	int getMaxScore() const { return _maxScore; }$/;"	f	class:OpenXcom::RuleEventScript
getMaxScore	Mod/RuleMissionScript.h	/^	int getMaxScore() const { return _maxScore; }$/;"	f	class:OpenXcom::RuleMissionScript
getMaxShade	Mod/AlienDeployment.cpp	/^int AlienDeployment::getMaxShade() const$/;"	f	class:OpenXcom::AlienDeployment
getMaxSharedFrames	Engine/SurfaceSet.cpp	/^int SurfaceSet::getMaxSharedFrames() const$/;"	f	class:OpenXcom::SurfaceSet
getMaxSharedSounds	Engine/SoundSet.cpp	/^int SoundSet::getMaxSharedSounds() const$/;"	f	class:OpenXcom::SoundSet
getMaxSkinIndex	Mod/RuleCraft.h	/^	int getMaxSkinIndex() const { return _maxSkinIndex; }$/;"	f	class:OpenXcom::RuleCraft
getMaxSmallSoldiers	Mod/RuleCraft.h	/^	int getMaxSmallSoldiers() const { return _maxSmallSoldiers; }$/;"	f	class:OpenXcom::RuleCraft
getMaxSmallUnits	Mod/RuleCraft.h	/^	int getMaxSmallUnits() const { return _maxSmallUnits; }$/;"	f	class:OpenXcom::RuleCraft
getMaxSmallVehicles	Mod/RuleCraft.h	/^	int getMaxSmallVehicles() const { return _maxSmallVehicles; }$/;"	f	class:OpenXcom::RuleCraft
getMaxSoldiers	Mod/RuleCraft.h	/^	int getMaxSoldiers() const { return _maxSoldiers; }$/;"	f	class:OpenXcom::RuleCraft
getMaxSpeed	Mod/RuleCraft.cpp	/^int RuleCraft::getMaxSpeed() const$/;"	f	class:OpenXcom::RuleCraft
getMaxStatScript	Mod/Unit.h	/^	static void getMaxStatScript(const T *t, int& val)$/;"	f	struct:OpenXcom::UnitStats
getMaxStaticLightDistance	Battlescape/TileEngine.h	/^	int getMaxStaticLightDistance() const { return _maxStaticLightDistance; }$/;"	f	class:OpenXcom::TileEngine
getMaxStaticLightDistance	Mod/Mod.h	/^	int getMaxStaticLightDistance() const { return _maxStaticLightDistance; }$/;"	f	class:OpenXcom::Mod
getMaxStats	Mod/RuleSoldier.cpp	/^UnitStats RuleSoldier::getMaxStats() const$/;"	f	class:OpenXcom::RuleSoldier
getMaxStorageSpace	Mod/RuleCraft.cpp	/^double RuleCraft::getMaxStorageSpace() const$/;"	f	class:OpenXcom::RuleCraft
getMaxThrowDistance	Battlescape/ProjectileFlyBState.cpp	/^int ProjectileFlyBState::getMaxThrowDistance(int weight, int strength, int level)$/;"	f	class:OpenXcom::ProjectileFlyBState
getMaxUnits	Mod/RuleCraft.cpp	/^int RuleCraft::getMaxUnits() const$/;"	f	class:OpenXcom::RuleCraft
getMaxVal	Mod/StatStringCondition.cpp	/^int StatStringCondition::getMaxVal() const$/;"	f	class:OpenXcom::StatStringCondition
getMaxVehicles	Mod/RuleCraft.h	/^	int getMaxVehicles() const { return _maxVehicles; }$/;"	f	class:OpenXcom::RuleCraft
getMaxVehiclesAndLargeSoldiers	Mod/RuleCraft.cpp	/^int RuleCraft::getMaxVehiclesAndLargeSoldiers() const$/;"	f	class:OpenXcom::RuleCraft
getMaxViewDistance	Battlescape/TileEngine.h	/^	int getMaxViewDistance() const { return _maxViewDistance; }$/;"	f	class:OpenXcom::TileEngine
getMaxViewDistance	Mod/Mod.h	/^	int getMaxViewDistance() const { return _maxViewDistance; }$/;"	f	class:OpenXcom::Mod
getMaxViewDistance	Savegame/BattleUnit.cpp	/^int BattleUnit::getMaxViewDistance(int baseVisibility, int nerf, int buff) const$/;"	f	class:OpenXcom::BattleUnit
getMaxViewDistanceAtDark	Savegame/BattleUnit.cpp	/^int BattleUnit::getMaxViewDistanceAtDark(const Armor *otherUnitArmor) const$/;"	f	class:OpenXcom::BattleUnit
getMaxViewDistanceAtDarkSquared	Savegame/BattleUnit.cpp	/^int BattleUnit::getMaxViewDistanceAtDarkSquared() const$/;"	f	class:OpenXcom::BattleUnit
getMaxViewDistanceAtDay	Savegame/BattleUnit.cpp	/^int BattleUnit::getMaxViewDistanceAtDay(const Armor *otherUnitArmor) const$/;"	f	class:OpenXcom::BattleUnit
getMaxViewDistanceSq	Battlescape/TileEngine.h	/^	int getMaxViewDistanceSq() const { return _maxViewDistanceSq; }$/;"	f	class:OpenXcom::TileEngine
getMaxVoxelViewDistance	Battlescape/TileEngine.h	/^	int getMaxVoxelViewDistance() const { return _maxVoxelViewDistance; }$/;"	f	class:OpenXcom::TileEngine
getMediKitCustomBackground	Mod/RuleItem.cpp	/^const std::string &RuleItem::getMediKitCustomBackground() const$/;"	f	class:OpenXcom::RuleItem
getMediKitType	Mod/RuleItem.cpp	/^BattleMediKitType RuleItem::getMediKitType() const$/;"	f	class:OpenXcom::RuleItem
getMedikitActionName	Mod/RuleItem.h	/^	const std::string &getMedikitActionName() const { return _medikitActionName; }$/;"	f	class:OpenXcom::RuleItem
getMedikitTargetMatrixRaw	Mod/RuleItem.h	/^	int getMedikitTargetMatrixRaw() const { return _medikitTargetMatrix; }$/;"	f	class:OpenXcom::RuleItem
getMeetLatitude	Savegame/MovingTarget.cpp	/^double MovingTarget::getMeetLatitude() const$/;"	f	class:OpenXcom::MovingTarget
getMeetLongitude	Savegame/MovingTarget.cpp	/^double MovingTarget::getMeetLongitude() const$/;"	f	class:OpenXcom::MovingTarget
getMeleeAnimation	Mod/RuleItem.cpp	/^int RuleItem::getMeleeAnimation() const$/;"	f	class:OpenXcom::RuleItem
getMeleeAnimationFrames	Mod/RuleItem.h	/^	int getMeleeAnimationFrames() const { return _meleeAnimFrames; }$/;"	f	class:OpenXcom::RuleItem
getMeleeBonus	Mod/RuleItem.cpp	/^int RuleItem::getMeleeBonus(BattleActionAttack::ReadOnly attack) const$/;"	f	class:OpenXcom::RuleItem
getMeleeBonusRaw	Mod/RuleItem.h	/^	const RuleStatBonus *getMeleeBonusRaw() const { return &_meleeBonus; }$/;"	f	class:OpenXcom::RuleItem
getMeleeDamagePreview	Battlescape/BattlescapeState.cpp	/^std::string BattlescapeState::getMeleeDamagePreview(BattleUnit *actor, BattleItem *weapon) const$/;"	f	class:OpenXcom::BattlescapeState
getMeleeDodge	Mod/Armor.cpp	/^int Armor::getMeleeDodge(const BattleUnit* unit) const$/;"	f	class:OpenXcom::Armor
getMeleeDodgeBackPenalty	Mod/Armor.cpp	/^float Armor::getMeleeDodgeBackPenalty() const$/;"	f	class:OpenXcom::Armor
getMeleeDodgeRaw	Mod/Armor.h	/^	const RuleStatBonus *getMeleeDodgeRaw() const { return &_meleeDodge; }$/;"	f	class:OpenXcom::Armor
getMeleeHitSound	Mod/RuleItem.cpp	/^int RuleItem::getMeleeHitSound() const$/;"	f	class:OpenXcom::RuleItem
getMeleeHitSoundRaw	Mod/RuleItem.h	/^	const std::vector<int> &getMeleeHitSoundRaw() const { return _meleeHitSound; }$/;"	f	class:OpenXcom::RuleItem
getMeleeMissAnimation	Mod/RuleItem.cpp	/^int RuleItem::getMeleeMissAnimation() const$/;"	f	class:OpenXcom::RuleItem
getMeleeMissAnimationFrames	Mod/RuleItem.h	/^	int getMeleeMissAnimationFrames() const { return _meleeMissAnimFrames; }$/;"	f	class:OpenXcom::RuleItem
getMeleeMissSound	Mod/RuleItem.cpp	/^int RuleItem::getMeleeMissSound() const$/;"	f	class:OpenXcom::RuleItem
getMeleeMissSoundRaw	Mod/RuleItem.h	/^	const std::vector<int> &getMeleeMissSoundRaw() const { return _meleeMissSound; }$/;"	f	class:OpenXcom::RuleItem
getMeleeMultiplier	Mod/RuleItem.cpp	/^int RuleItem::getMeleeMultiplier(BattleActionAttack::ReadOnly attack) const$/;"	f	class:OpenXcom::RuleItem
getMeleeMultiplierRaw	Mod/RuleItem.h	/^	const RuleStatBonus *getMeleeMultiplierRaw() const { return &_meleeMulti; }$/;"	f	class:OpenXcom::RuleItem
getMeleePower	Mod/RuleItem.cpp	/^int RuleItem::getMeleePower() const$/;"	f	class:OpenXcom::RuleItem
getMeleeSound	Mod/RuleItem.cpp	/^int RuleItem::getMeleeSound() const$/;"	f	class:OpenXcom::RuleItem
getMeleeSoundRaw	Mod/RuleItem.h	/^	const std::vector<int> &getMeleeSoundRaw() const { return _meleeSound; }$/;"	f	class:OpenXcom::RuleItem
getMeleeType	Mod/RuleItem.cpp	/^const RuleDamageType *RuleItem::getMeleeType() const$/;"	f	class:OpenXcom::RuleItem
getMeleeWeapon	Mod/Unit.cpp	/^const std::string &Unit::getMeleeWeapon() const$/;"	f	class:OpenXcom::Unit
getMember	Mod/AlienRace.cpp	/^const std::string &AlienRace::getMember(int id) const$/;"	f	class:OpenXcom::AlienRace
getMembers	Mod/AlienRace.cpp	/^int AlienRace::getMembers() const$/;"	f	class:OpenXcom::AlienRace
getMessageY	Battlescape/Map.cpp	/^int Map::getMessageY() const$/;"	f	class:OpenXcom::Map
getMinAmbienceRandomDelay	Mod/RuleTerrain.h	/^	int getMinAmbienceRandomDelay() const { return _minAmbienceRandomDelay; }$/;"	f	class:OpenXcom::RuleTerrain
getMinAmbienceRandomDelay	Savegame/SavedBattleGame.h	/^	int getMinAmbienceRandomDelay() const { return _minAmbienceRandomDelay; }$/;"	f	class:OpenXcom::SavedBattleGame
getMinDepth	Mod/AlienDeployment.cpp	/^int AlienDeployment::getMinDepth() const$/;"	f	class:OpenXcom::AlienDeployment
getMinDepth	Mod/RuleTerrain.cpp	/^int RuleTerrain::getMinDepth() const$/;"	f	class:OpenXcom::RuleTerrain
getMinDifficulty	Mod/RuleArcScript.h	/^	int getMinDifficulty() const { return _minDifficulty; }$/;"	f	class:OpenXcom::RuleArcScript
getMinDifficulty	Mod/RuleEventScript.h	/^	int getMinDifficulty() const { return _minDifficulty; }$/;"	f	class:OpenXcom::RuleEventScript
getMinDifficulty	Mod/RuleMissionScript.cpp	/^int RuleMissionScript::getMinDifficulty() const$/;"	f	class:OpenXcom::RuleMissionScript
getMinFunds	Mod/RuleArcScript.h	/^	int64_t getMinFunds() const { return _minFunds; }$/;"	f	class:OpenXcom::RuleArcScript
getMinFunds	Mod/RuleEventScript.h	/^	int64_t getMinFunds() const { return _minFunds; }$/;"	f	class:OpenXcom::RuleEventScript
getMinFunds	Mod/RuleMissionScript.h	/^	int64_t getMinFunds() const { return _minFunds; }$/;"	f	class:OpenXcom::RuleMissionScript
getMinRange	Mod/RuleItem.cpp	/^int RuleItem::getMinRange() const$/;"	f	class:OpenXcom::RuleItem
getMinRank	Mod/RuleSoldierTransformation.cpp	/^int RuleSoldierTransformation::getMinRank() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getMinReactionAccuracy	Mod/Mod.h	/^	int getMinReactionAccuracy() const { return _minReactionAccuracy; }$/;"	f	class:OpenXcom::Mod
getMinScore	Mod/RuleArcScript.h	/^	int getMinScore() const { return _minScore; }$/;"	f	class:OpenXcom::RuleArcScript
getMinScore	Mod/RuleEventScript.h	/^	int getMinScore() const { return _minScore; }$/;"	f	class:OpenXcom::RuleEventScript
getMinScore	Mod/RuleMissionScript.h	/^	int getMinScore() const { return _minScore; }$/;"	f	class:OpenXcom::RuleMissionScript
getMinShade	Mod/AlienDeployment.cpp	/^int AlienDeployment::getMinShade() const$/;"	f	class:OpenXcom::AlienDeployment
getMinStats	Mod/RuleSoldier.cpp	/^UnitStats RuleSoldier::getMinStats() const$/;"	f	class:OpenXcom::RuleSoldier
getMinVal	Mod/StatStringCondition.cpp	/^int StatStringCondition::getMinVal() const$/;"	f	class:OpenXcom::StatStringCondition
getMindControllerId	Savegame/BattleUnit.cpp	/^int BattleUnit::getMindControllerId() const$/;"	f	class:OpenXcom::BattleUnit
getMindShieldPower	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getMindShieldPower() const$/;"	f	class:OpenXcom::RuleBaseFacility
getMiniMapIndex	Mod/MapData.cpp	/^unsigned short MapData::getMiniMapIndex() const$/;"	f	class:OpenXcom::MapData
getMiniMapSpriteIndex	Savegame/BattleUnit.cpp	/^int BattleUnit::getMiniMapSpriteIndex() const$/;"	f	class:OpenXcom::BattleUnit
getMinute	Savegame/GameTime.cpp	/^int GameTime::getMinute() const$/;"	f	class:OpenXcom::GameTime
getMinutesSinceLastHuntMissionGeneration	Savegame/AlienBase.cpp	/^int AlienBase::getMinutesSinceLastHuntMissionGeneration() const$/;"	f	class:OpenXcom::AlienBase
getMissed	Savegame/CraftWeaponProjectile.cpp	/^bool CraftWeaponProjectile::getMissed() const$/;"	f	class:OpenXcom::CraftWeaponProjectile
getMissileAttraction	Mod/RuleBaseFacility.h	/^	int getMissileAttraction() const { return _missileAttraction; }$/;"	f	class:OpenXcom::RuleBaseFacility
getMissilePower	Mod/RuleUfo.h	/^	int getMissilePower() const { return _missilePower; }$/;"	f	class:OpenXcom::RuleUfo
getMissingItems	Battlescape/CannotReequipState.cpp	/^const std::vector<ReequipStat>& CannotReequipState::getMissingItems() const$/;"	f	class:OpenXcom::CannotReequipState
getMissingQty	Basescape/PurchaseState.cpp	/^int PurchaseState::getMissingQty(int sel) const$/;"	f	class:OpenXcom::PurchaseState
getMission	Savegame/Ufo.h	/^	AlienMission *getMission() const { return _mission; }$/;"	f	class:OpenXcom::Ufo
getMissionBountyItem	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::getMissionBountyItem() const$/;"	f	class:OpenXcom::AlienDeployment
getMissionBountyItemCount	Mod/AlienDeployment.h	/^	int getMissionBountyItemCount() const { return _missionBountyItemCount; }$/;"	f	class:OpenXcom::AlienDeployment
getMissionComplete	Savegame/Craft.cpp	/^bool Craft::getMissionComplete() const$/;"	f	class:OpenXcom::Craft
getMissionCraftOrBase	Savegame/SavedBattleGame.h	/^	const std::string& getMissionCraftOrBase() const { return _strCraftOrBase; }$/;"	f	class:OpenXcom::SavedBattleGame
getMissionCustomDeploy	Savegame/MissionSite.cpp	/^const AlienDeployment *MissionSite::getMissionCustomDeploy() const$/;"	f	class:OpenXcom::MissionSite
getMissionIdList	Savegame/SoldierDiary.cpp	/^std::vector<int> &SoldierDiary::getMissionIdList()$/;"	f	class:OpenXcom::SoldierDiary
getMissionMarkerName	Mod/RuleArcScript.h	/^	const std::string& getMissionMarkerName() const { return _missionMarkerName; }$/;"	f	class:OpenXcom::RuleArcScript
getMissionMarkerName	Mod/RuleEventScript.h	/^	const std::string& getMissionMarkerName() const { return _missionMarkerName; }$/;"	f	class:OpenXcom::RuleEventScript
getMissionMarkerName	Mod/RuleMissionScript.h	/^	const std::string& getMissionMarkerName() const { return _missionMarkerName; }$/;"	f	class:OpenXcom::RuleMissionScript
getMissionMarkerNames	Mod/RuleCommendations.cpp	/^const std::vector<std::string>& RuleCommendations::getMissionMarkerNames() const$/;"	f	class:OpenXcom::RuleCommendations
getMissionName	Savegame/MissionStatistics.h	/^	std::string getMissionName(Language *lang) const$/;"	f	struct:OpenXcom::MissionStatistics
getMissionRatings	Mod/Mod.cpp	/^const std::map<int, std::string> *Mod::getMissionRatings() const$/;"	f	class:OpenXcom::Mod
getMissionRegion	Mod/RuleRegion.h	/^	const std::string &getMissionRegion() const { return _missionRegion; }$/;"	f	class:OpenXcom::RuleRegion
getMissionScore	Mod/RuleUfo.cpp	/^int RuleUfo::getMissionScore() const$/;"	f	class:OpenXcom::RuleUfo
getMissionScript	Mod/Mod.cpp	/^RuleMissionScript *Mod::getMissionScript(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getMissionScriptList	Mod/Mod.cpp	/^const std::vector<std::string> *Mod::getMissionScriptList() const$/;"	f	class:OpenXcom::Mod
getMissionSites	Savegame/SavedGame.cpp	/^std::vector<MissionSite*> *SavedGame::getMissionSites()$/;"	f	class:OpenXcom::SavedGame
getMissionStatistics	Savegame/SavedGame.cpp	/^std::vector<MissionStatistics*> *SavedGame::getMissionStatistics()$/;"	f	class:OpenXcom::SavedGame
getMissionTarget	Savegame/SavedBattleGame.h	/^	const std::string& getMissionTarget() const { return _strTarget; }$/;"	f	class:OpenXcom::SavedBattleGame
getMissionTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getMissionTotal() const$/;"	f	class:OpenXcom::SoldierDiary
getMissionTotalFiltered	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getMissionTotalFiltered(std::vector<MissionStatistics*>* missionStatistics, const RuleCommendations* rule) const$/;"	f	class:OpenXcom::SoldierDiary
getMissionType	Savegame/SavedBattleGame.cpp	/^const std::string &SavedBattleGame::getMissionType() const$/;"	f	class:OpenXcom::SavedBattleGame
getMissionType	Savegame/Ufo.cpp	/^const std::string &Ufo::getMissionType() const$/;"	f	class:OpenXcom::Ufo
getMissionTypeNames	Mod/RuleCommendations.cpp	/^const std::vector<std::string>& RuleCommendations::getMissionTypeNames() const$/;"	f	class:OpenXcom::RuleCommendations
getMissionTypes	Mod/RuleMissionScript.cpp	/^std::vector<std::string> RuleMissionScript::getMissionTypes(const int month) const$/;"	f	class:OpenXcom::RuleMissionScript
getMissionVarName	Mod/RuleArcScript.h	/^	const std::string& getMissionVarName() const { return _missionVarName; }$/;"	f	class:OpenXcom::RuleArcScript
getMissionVarName	Mod/RuleEventScript.h	/^	const std::string& getMissionVarName() const { return _missionVarName; }$/;"	f	class:OpenXcom::RuleEventScript
getMissionVarName	Mod/RuleMissionScript.h	/^	const std::string& getMissionVarName() const { return _missionVarName; }$/;"	f	class:OpenXcom::RuleMissionScript
getMissionWaveNumber	Savegame/Ufo.h	/^	int getMissionWaveNumber() const { return _missionWaveNumber; }$/;"	f	class:OpenXcom::Ufo
getMissionZones	Mod/RuleRegion.cpp	/^const std::vector<MissionZone> &RuleRegion::getMissionZones() const$/;"	f	class:OpenXcom::RuleRegion
getMissions	Mod/RuleConverter.h	/^	const std::vector<std::string> &getMissions() const { return _missions; }$/;"	f	class:OpenXcom::RuleConverter
getMissions	Savegame/Soldier.cpp	/^int Soldier::getMissions() const$/;"	f	class:OpenXcom::Soldier
getMissionsRun	Savegame/AlienStrategy.cpp	/^int AlienStrategy::getMissionsRun(const std::string &varName)$/;"	f	class:OpenXcom::AlienStrategy
getMod	Battlescape/BattlescapeGame.cpp	/^Mod *BattlescapeGame::getMod()$/;"	f	class:OpenXcom::BattlescapeGame
getMod	Engine/Game.h	/^	Mod *getMod() const { return _mod; }$/;"	f	class:OpenXcom::Game
getMod	Savegame/SavedBattleGame.cpp	/^const Mod *SavedBattleGame::getMod() const$/;"	f	class:OpenXcom::SavedBattleGame
getModInfos	Engine/FileMap.cpp	/^std::map<std::string, ModInfo> getModInfos() {$/;"	f	namespace:OpenXcom::FileMap
getModInfos	Engine/Options.cpp	/^const std::map<std::string, ModInfo> &getModInfos() { return _modInfos; }$/;"	f	namespace:OpenXcom::Options
getModOffset	Mod/Mod.cpp	/^int Mod::getModOffset() const$/;"	f	class:OpenXcom::Mod
getModOwner	Mod/ExtraSounds.h	/^	const ModData* getModOwner() { return _current; }$/;"	f	class:OpenXcom::ExtraSounds
getModOwner	Mod/ExtraSprites.h	/^	const ModData* getModOwner() { return _current; }$/;"	f	class:OpenXcom::ExtraSprites
getModRuleFile	Engine/FileMap.cpp	/^const FileRecord* getModRuleFile(const ModInfo* modInfo, const std::string& relpath)$/;"	f	namespace:OpenXcom::FileMap
getModSprite	Mod/RuleUfo.cpp	/^const std::string &RuleUfo::getModSprite() const$/;"	f	class:OpenXcom::RuleUfo
getModuleMap	Savegame/SavedBattleGame.cpp	/^std::vector< std::vector<std::pair<int, int> > > &SavedBattleGame::getModuleMap()$/;"	f	class:OpenXcom::SavedBattleGame
getMonth	Savegame/GameTime.cpp	/^int GameTime::getMonth() const$/;"	f	class:OpenXcom::GameTime
getMonthString	Savegame/GameTime.cpp	/^std::string GameTime::getMonthString() const$/;"	f	class:OpenXcom::GameTime
getMonthlyBuyLimit	Mod/RuleCraft.h	/^	int getMonthlyBuyLimit() const { return _monthlyBuyLimit; }$/;"	f	class:OpenXcom::RuleCraft
getMonthlyBuyLimit	Mod/RuleItem.h	/^	int getMonthlyBuyLimit() const { return _monthlyBuyLimit; }$/;"	f	class:OpenXcom::RuleItem
getMonthlyBuyLimit	Mod/RuleSoldier.h	/^	int getMonthlyBuyLimit() const { return _monthlyBuyLimit; }$/;"	f	class:OpenXcom::RuleSoldier
getMonthlyCost	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getMonthlyCost() const$/;"	f	class:OpenXcom::RuleBaseFacility
getMonthlyMaintenace	Savegame/Base.cpp	/^int Base::getMonthlyMaintenace() const$/;"	f	class:OpenXcom::Base
getMonthlyMaintenance	Mod/RuleItem.cpp	/^int RuleItem::getMonthlyMaintenance() const$/;"	f	class:OpenXcom::RuleItem
getMonthlyNetFunds	Basescape/ManufactureInfoState.cpp	/^int ManufactureInfoState::getMonthlyNetFunds () const$/;"	f	class:OpenXcom::ManufactureInfoState
getMonthlyPurchaseLimitLog	Savegame/SavedGame.h	/^	std::map<std::string, int>& getMonthlyPurchaseLimitLog() { return _monthlyPurchaseLimitLog; }$/;"	f	class:OpenXcom::SavedGame
getMonthlyRatingThresholds	Mod/Mod.h	/^	const std::vector<int>& getMonthlyRatingThresholds() { return _monthlyRatingThresholds; }$/;"	f	class:OpenXcom::Mod
getMonthlyRatings	Mod/Mod.cpp	/^const std::map<int, std::string> *Mod::getMonthlyRatings() const$/;"	f	class:OpenXcom::Mod
getMonthlySalary	Mod/RuleItem.cpp	/^int RuleItem::getMonthlySalary() const$/;"	f	class:OpenXcom::RuleItem
getMonthsPassed	Savegame/SavedGame.cpp	/^int SavedGame::getMonthsPassed() const$/;"	f	class:OpenXcom::SavedGame
getMonthsService	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getMonthsService() const$/;"	f	class:OpenXcom::SoldierDiary
getMorale	Savegame/BattleUnit.cpp	/^int BattleUnit::getMorale() const$/;"	f	class:OpenXcom::BattleUnit
getMoraleFinalDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getMoraleFinalDamage(int damage) const$/;"	f	class:OpenXcom::RuleDamageType
getMoraleLossModifierWhenKilled	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getMoraleLossModifierWhenKilled(BattleUnit* unit)$/;"	f	class:OpenXcom::SavedBattleGame
getMoraleLossWhenKilled	Mod/RuleSoldier.h	/^	int getMoraleLossWhenKilled() { return _moraleLossWhenKilled; };$/;"	f	class:OpenXcom::RuleSoldier
getMoraleLossWhenKilled	Mod/Unit.h	/^	int getMoraleLossWhenKilled() { return _moraleLossWhenKilled; };$/;"	f	class:OpenXcom::Unit
getMoraleRecovery	Mod/Armor.cpp	/^int Armor::getMoraleRecovery(const BattleUnit* unit, int externalBonuses) const$/;"	f	class:OpenXcom::Armor
getMoraleRecovery	Mod/RuleItem.cpp	/^int RuleItem::getMoraleRecovery() const$/;"	f	class:OpenXcom::RuleItem
getMoraleRecovery	Mod/RuleSoldierBonus.cpp	/^int RuleSoldierBonus::getMoraleRecovery(const BattleUnit *unit) const$/;"	f	class:OpenXcom::RuleSoldierBonus
getMoraleRecoveryRaw	Mod/Armor.h	/^	const RuleStatBonus *getMoraleRecoveryRaw() const { return &_moraleRecovery; }$/;"	f	class:OpenXcom::Armor
getMoraleRecoveryRaw	Mod/RuleSoldierBonus.h	/^	const RuleStatBonus *getMoraleRecoveryRaw() const { return &_moraleRecovery; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getMotionPoints	Savegame/BattleUnit.cpp	/^int BattleUnit::getMotionPoints() const$/;"	f	class:OpenXcom::BattleUnit
getMouseOverIcons	Battlescape/BattlescapeState.cpp	/^bool BattlescapeState::getMouseOverIcons() const$/;"	f	class:OpenXcom::BattlescapeState
getMouseOverItem	Battlescape/Inventory.cpp	/^BattleItem *Inventory::getMouseOverItem() const$/;"	f	class:OpenXcom::Inventory
getMoveCostBase	Mod/Armor.h	/^	ArmorMoveCost getMoveCostBase() const { return _moveCostBase; }$/;"	f	class:OpenXcom::Armor
getMoveCostBase	Savegame/BattleUnit.h	/^	ArmorMoveCost getMoveCostBase() const { return _moveCostBase; }$/;"	f	class:OpenXcom::BattleUnit
getMoveCostBaseFly	Mod/Armor.h	/^	ArmorMoveCost getMoveCostBaseFly() const { return _moveCostBaseFly; }$/;"	f	class:OpenXcom::Armor
getMoveCostBaseFly	Savegame/BattleUnit.h	/^	ArmorMoveCost getMoveCostBaseFly() const { return _moveCostBaseFly; }$/;"	f	class:OpenXcom::BattleUnit
getMoveCostBaseNormal	Mod/Armor.h	/^	ArmorMoveCost getMoveCostBaseNormal() const { return _moveCostBaseNormal; }$/;"	f	class:OpenXcom::Armor
getMoveCostBaseNormal	Savegame/BattleUnit.h	/^	ArmorMoveCost getMoveCostBaseNormal() const { return _moveCostBaseNormal; }$/;"	f	class:OpenXcom::BattleUnit
getMoveCostFlyDown	Mod/Armor.h	/^	ArmorMoveCost getMoveCostFlyDown() const { return _moveCostFlyDown; }$/;"	f	class:OpenXcom::Armor
getMoveCostFlyRun	Mod/Armor.h	/^	ArmorMoveCost getMoveCostFlyRun() const { return _moveCostFlyRun; }$/;"	f	class:OpenXcom::Armor
getMoveCostFlyStrafe	Mod/Armor.h	/^	ArmorMoveCost getMoveCostFlyStrafe() const { return _moveCostFlyStrafe; }$/;"	f	class:OpenXcom::Armor
getMoveCostFlyUp	Mod/Armor.h	/^	ArmorMoveCost getMoveCostFlyUp() const { return _moveCostFlyUp; }$/;"	f	class:OpenXcom::Armor
getMoveCostFlyWalk	Mod/Armor.h	/^	ArmorMoveCost getMoveCostFlyWalk() const { return _moveCostFlyWalk; }$/;"	f	class:OpenXcom::Armor
getMoveCostGravLift	Mod/Armor.h	/^	ArmorMoveCost getMoveCostGravLift() const { return _moveCostGravLift; }$/;"	f	class:OpenXcom::Armor
getMoveCostRun	Mod/Armor.h	/^	ArmorMoveCost getMoveCostRun() const { return _moveCostRun; }$/;"	f	class:OpenXcom::Armor
getMoveCostSneak	Mod/Armor.h	/^	ArmorMoveCost getMoveCostSneak() const { return _moveCostSneak; }$/;"	f	class:OpenXcom::Armor
getMoveCostStrafe	Mod/Armor.h	/^	ArmorMoveCost getMoveCostStrafe() const { return _moveCostStrafe; }$/;"	f	class:OpenXcom::Armor
getMoveCostWalk	Mod/Armor.h	/^	ArmorMoveCost getMoveCostWalk() const { return _moveCostWalk; }$/;"	f	class:OpenXcom::Armor
getMoveSound	Mod/Armor.cpp	/^int Armor::getMoveSound() const$/;"	f	class:OpenXcom::Armor
getMoveSound	Mod/Unit.cpp	/^int Unit::getMoveSound() const$/;"	f	class:OpenXcom::Unit
getMoveSound	Savegame/BattleUnit.cpp	/^int BattleUnit::getMoveSound() const$/;"	f	class:OpenXcom::BattleUnit
getMoveToCost	Savegame/BattleItem.cpp	/^int BattleItem::getMoveToCost(const RuleInventory *slot) const$/;"	f	class:OpenXcom::BattleItem
getMoveType	Battlescape/BattlescapeGame.h	/^	BattleActionMove getMoveType() const$/;"	f	struct:OpenXcom::BattleAction
getMovementType	Battlescape/Pathfinding.cpp	/^MovementType Pathfinding::getMovementType(const BattleUnit *unit, const BattleUnit *missileTarget, BattleActionMove bam) const$/;"	f	class:OpenXcom::Pathfinding
getMovementType	Mod/Armor.cpp	/^MovementType Armor::getMovementType() const$/;"	f	class:OpenXcom::Armor
getMovementType	Savegame/BattleUnit.h	/^	MovementType getMovementType() const { return _movementType; }$/;"	f	class:OpenXcom::BattleUnit
getMovementTypeByDepth	Mod/Armor.cpp	/^MovementType Armor::getMovementTypeByDepth(int depth) const$/;"	f	class:OpenXcom::Armor
getMovingUnit	Battlescape/TileEngine.cpp	/^BattleUnit* TileEngine::getMovingUnit()$/;"	f	class:OpenXcom::TileEngine
getMovmentTypeScript	Savegame/BattleUnit.cpp	/^void getMovmentTypeScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
getMultiplierNoise	Geoscape/Globe.cpp	/^	int getMultiplierNoise(Sint16 n)$/;"	f	struct:OpenXcom::__anon49::GlobeStaticData
getMurdererId	Savegame/BattleUnit.cpp	/^int BattleUnit::getMurdererId() const$/;"	f	class:OpenXcom::BattleUnit
getMurdererWeapon	Savegame/BattleUnit.cpp	/^std::string BattleUnit::getMurdererWeapon() const$/;"	f	class:OpenXcom::BattleUnit
getMurdererWeaponAmmo	Savegame/BattleUnit.cpp	/^std::string BattleUnit::getMurdererWeaponAmmo() const$/;"	f	class:OpenXcom::BattleUnit
getMusic	Mod/AlienDeployment.cpp	/^const std::vector<std::string> &AlienDeployment::getMusic() const$/;"	f	class:OpenXcom::AlienDeployment
getMusic	Mod/Mod.cpp	/^Music *Mod::getMusic(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getMusic	Mod/Mod.cpp	/^const std::map<std::string, RuleMusic *> *Mod::getMusic() const$/;"	f	class:OpenXcom::Mod
getMusic	Mod/RuleEvent.h	/^	const std::string &getMusic() const { return _music; }$/;"	f	class:OpenXcom::RuleEvent
getMusic	Mod/RuleInterface.cpp	/^const std::string &RuleInterface::getMusic() const$/;"	f	class:OpenXcom::RuleInterface
getMusic	Mod/RuleTerrain.cpp	/^const std::vector<std::string> &RuleTerrain::getMusic() const$/;"	f	class:OpenXcom::RuleTerrain
getMusic	Savegame/SavedBattleGame.cpp	/^const std::string &SavedBattleGame::getMusic() const$/;"	f	class:OpenXcom::SavedBattleGame
getMusicTrackList	Mod/Mod.cpp	/^const std::map<std::string, Music*> &Mod::getMusicTrackList() const$/;"	f	class:OpenXcom::Mod
getName	Engine/Collections.h	/^		const std::string& getName(size_t i) const$/;"	f	class:OpenXcom::Collections::NamesToIndex
getName	Engine/ModInfo.cpp	/^const std::string &ModInfo::getName()                    const { return _name;                    }$/;"	f	class:OpenXcom::ModInfo
getName	Engine/ScriptBind.h	/^	std::string getName(const std::string& s)$/;"	f	struct:OpenXcom::Bind
getName	Mod/City.cpp	/^std::string City::getName(Language *lang) const$/;"	f	class:OpenXcom::City
getName	Mod/MapBlock.cpp	/^std::string MapBlock::getName() const$/;"	f	class:OpenXcom::MapBlock
getName	Mod/MapDataSet.cpp	/^std::string MapDataSet::getName() const$/;"	f	class:OpenXcom::MapDataSet
getName	Mod/RuleEvent.h	/^	const std::string &getName() const { return _name; }$/;"	f	class:OpenXcom::RuleEvent
getName	Mod/RuleItem.cpp	/^const std::string &RuleItem::getName() const$/;"	f	class:OpenXcom::RuleItem
getName	Mod/RuleManufacture.cpp	/^const std::string &RuleManufacture::getName() const$/;"	f	class:OpenXcom::RuleManufacture
getName	Mod/RuleManufactureShortcut.h	/^	const std::string& getName() const { return _name; }$/;"	f	class:OpenXcom::RuleManufactureShortcut
getName	Mod/RuleMusic.cpp	/^const std::string& RuleMusic::getName() const$/;"	f	class:OpenXcom::RuleMusic
getName	Mod/RuleResearch.cpp	/^const std::string &RuleResearch::getName() const$/;"	f	class:OpenXcom::RuleResearch
getName	Mod/RuleSoldierBonus.h	/^	const std::string &getName() const { return _name; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getName	Mod/RuleSoldierTransformation.cpp	/^const std::string &RuleSoldierTransformation::getName() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getName	Mod/RuleTerrain.cpp	/^std::string RuleTerrain::getName() const$/;"	f	class:OpenXcom::RuleTerrain
getName	Savegame/Base.cpp	/^std::string Base::getName(Language *) const$/;"	f	class:OpenXcom::Base
getName	Savegame/BattleUnit.cpp	/^std::string BattleUnit::getName(Language *lang, bool debugAppendId) const$/;"	f	class:OpenXcom::BattleUnit
getName	Savegame/SavedGame.cpp	/^std::string SavedGame::getName() const$/;"	f	class:OpenXcom::SavedGame
getName	Savegame/Soldier.cpp	/^std::string Soldier::getName(bool statstring, unsigned int maxLength) const$/;"	f	class:OpenXcom::Soldier
getName	Savegame/Target.cpp	/^std::string Target::getName(Language *lang) const$/;"	f	class:OpenXcom::Target
getName	Savegame/Transfer.cpp	/^std::string Transfer::getName(Language *lang) const$/;"	f	class:OpenXcom::Transfer
getNameAsAmmo	Mod/RuleItem.cpp	/^const std::string &RuleItem::getNameAsAmmo() const$/;"	f	class:OpenXcom::RuleItem
getNames	Mod/RuleSoldier.cpp	/^const std::vector<SoldierNamePool*> &RuleSoldier::getNames() const$/;"	f	class:OpenXcom::RuleSoldier
getNames	Savegame/WeightedOptions.cpp	/^std::vector<std::string> WeightedOptions::getNames()$/;"	f	class:OpenXcom::WeightedOptions
getNationality	Savegame/Soldier.cpp	/^int Soldier::getNationality() const$/;"	f	class:OpenXcom::Soldier
getNeededRecoveryTime	Savegame/Soldier.cpp	/^int Soldier::getNeededRecoveryTime(const BaseSumDailyRecovery& recovery) const$/;"	f	class:OpenXcom::Soldier
getNewBaseUnlockResearch	Mod/Mod.h	/^	const std::string &getNewBaseUnlockResearch() const { return _newBaseUnlockResearch; }$/;"	f	class:OpenXcom::Mod
getNewPact	Savegame/Country.cpp	/^bool Country::getNewPact() const$/;"	f	class:OpenXcom::Country
getNewlyAvailableResearchProjects	Savegame/SavedGame.cpp	/^void SavedGame::getNewlyAvailableResearchProjects(std::vector<RuleResearch *> & before, std::vector<RuleResearch *> & after, std::vector<RuleResearch *> & diff) const$/;"	f	class:OpenXcom::SavedGame
getNextBlock	Mod/MapScript.cpp	/^MapBlock *MapScript::getNextBlock(RuleTerrain *terrain)$/;"	f	class:OpenXcom::MapScript
getNextStage	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::getNextStage() const$/;"	f	class:OpenXcom::AlienDeployment
getNextToken	Engine/Script.cpp	/^SelectedToken ScriptRefTokens::getNextToken(TokenEnum excepted)$/;"	f	class:OpenXcom::ScriptRefTokens
getNightMissionTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getNightMissionTotal(std::vector<MissionStatistics*> *missionStatistics, const Mod* mod) const$/;"	f	class:OpenXcom::SoldierDiary
getNightTerrorMissionTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getNightTerrorMissionTotal(std::vector<MissionStatistics*> *missionStatistics, const Mod* mod) const$/;"	f	class:OpenXcom::SoldierDiary
getNoLOSAccuracyPenalty	Mod/RuleItem.cpp	/^int RuleItem::getNoLOSAccuracyPenalty(Mod *mod) const$/;"	f	class:OpenXcom::RuleItem
getNoLOSAccuracyPenaltyGlobal	Mod/Mod.h	/^	int getNoLOSAccuracyPenaltyGlobal() const { return _noLOSAccuracyPenaltyGlobal; }$/;"	f	class:OpenXcom::Mod
getNode	Battlescape/Pathfinding.cpp	/^PathfindingNode *Pathfinding::getNode(Position pos)$/;"	f	class:OpenXcom::Pathfinding
getNodeLinks	Savegame/Node.cpp	/^std::vector<int> *Node::getNodeLinks()$/;"	f	class:OpenXcom::Node
getNodeOfBestEfficacy	Battlescape/AIModule.cpp	/^bool AIModule::getNodeOfBestEfficacy(BattleAction *action, int radius)$/;"	f	class:OpenXcom::AIModule
getNodes	Savegame/SavedBattleGame.cpp	/^std::vector<Node*> *SavedBattleGame::getNodes()$/;"	f	class:OpenXcom::SavedBattleGame
getNormalization	Mod/RuleMusic.cpp	/^float RuleMusic::getNormalization() const$/;"	f	class:OpenXcom::RuleMusic
getNoun	Savegame/SoldierDiary.cpp	/^const std::string& SoldierCommendations::getNoun() const$/;"	f	class:OpenXcom::SoldierCommendations
getNumColorChannels	lodepng.cpp	/^static unsigned getNumColorChannels(LodePNGColorType colortype)$/;"	f	file:
getNumEquipment	Savegame/Craft.cpp	/^int Craft::getNumEquipment() const$/;"	f	class:OpenXcom::Craft
getNumLargeSoldiers	Savegame/Craft.cpp	/^int Craft::getNumLargeSoldiers() const$/;"	f	class:OpenXcom::Craft
getNumLargeUnits	Savegame/Craft.cpp	/^int Craft::getNumLargeUnits() const$/;"	f	class:OpenXcom::Craft
getNumLargeVehicles	Savegame/Craft.cpp	/^int Craft::getNumLargeVehicles() const$/;"	f	class:OpenXcom::Craft
getNumLines	Interface/Text.cpp	/^int Text::getNumLines() const$/;"	f	class:OpenXcom::Text
getNumSmallSoldiers	Savegame/Craft.cpp	/^int Craft::getNumSmallSoldiers() const$/;"	f	class:OpenXcom::Craft
getNumSmallUnits	Savegame/Craft.cpp	/^int Craft::getNumSmallUnits() const$/;"	f	class:OpenXcom::Craft
getNumSmallVehicles	Savegame/Craft.cpp	/^int Craft::getNumSmallVehicles() const$/;"	f	class:OpenXcom::Craft
getNumTextLines	Interface/TextList.cpp	/^int TextList::getNumTextLines(size_t row) const$/;"	f	class:OpenXcom::TextList
getNumTotalSoldiers	Savegame/Craft.cpp	/^int Craft::getNumTotalSoldiers() const$/;"	f	class:OpenXcom::Craft
getNumTotalUnits	Savegame/Craft.cpp	/^int Craft::getNumTotalUnits() const$/;"	f	class:OpenXcom::Craft
getNumTotalVehicles	Savegame/Craft.cpp	/^int Craft::getNumTotalVehicles() const$/;"	f	class:OpenXcom::Craft
getNumVehiclesAndLargeSoldiers	Savegame/Craft.cpp	/^int Craft::getNumVehiclesAndLargeSoldiers() const$/;"	f	class:OpenXcom::Craft
getNumWeapons	Savegame/Craft.cpp	/^int Craft::getNumWeapons(bool onlyLoaded) const$/;"	f	class:OpenXcom::Craft
getNumberOfPages	Mod/ArticleDefinition.h	/^		size_t getNumberOfPages()$/;"	f	class:OpenXcom::ArticleDefinition
getObject	Mod/MapDataSet.cpp	/^MapData *MapDataSet::getObject(size_t i)$/;"	f	class:OpenXcom::MapDataSet
getObjectSpecialTileType	Savegame/Tile.h	/^	SpecialTileType getObjectSpecialTileType() const$/;"	f	class:OpenXcom::Tile
getObjectSpecialTileTypeScript	Savegame/Tile.cpp	/^void getObjectSpecialTileTypeScript(const Tile *t, int &ret)$/;"	f	namespace:OpenXcom::__anon43
getObjectType	Mod/MapData.cpp	/^TilePart MapData::getObjectType() const$/;"	f	class:OpenXcom::MapData
getObjective	Mod/RuleAlienMission.h	/^	MissionObjective getObjective() const { return _objective; }$/;"	f	class:OpenXcom::RuleAlienMission
getObjectiveCompleteInfo	Mod/AlienDeployment.cpp	/^bool AlienDeployment::getObjectiveCompleteInfo(std::string &text, int &score, std::string &missionText) const$/;"	f	class:OpenXcom::AlienDeployment
getObjectiveFailedInfo	Mod/AlienDeployment.cpp	/^bool AlienDeployment::getObjectiveFailedInfo(std::string &text, int &score, std::string &missionText) const$/;"	f	class:OpenXcom::AlienDeployment
getObjectivePopup	Mod/AlienDeployment.cpp	/^const std::string &AlienDeployment::getObjectivePopup() const$/;"	f	class:OpenXcom::AlienDeployment
getObjectiveType	Mod/AlienDeployment.cpp	/^int AlienDeployment::getObjectiveType() const$/;"	f	class:OpenXcom::AlienDeployment
getObjectiveType	Savegame/SavedBattleGame.cpp	/^SpecialTileType SavedBattleGame::getObjectiveType() const$/;"	f	class:OpenXcom::SavedBattleGame
getObjectivesRequired	Mod/AlienDeployment.cpp	/^int AlienDeployment::getObjectivesRequired() const$/;"	f	class:OpenXcom::AlienDeployment
getObjectsRaw	Mod/MapDataSet.cpp	/^std::vector<MapData*> *MapDataSet::getObjectsRaw()$/;"	f	class:OpenXcom::MapDataSet
getObstacle	Savegame/Tile.h	/^	bool getObstacle(int part) const$/;"	f	class:OpenXcom::Tile
getOceanShadow	Geoscape/Globe.cpp	/^	static inline Uint8 getOceanShadow(const Uint8& shadow)$/;"	f	struct:OpenXcom::__anon49::CreateShadow
getOffset	Mod/Mod.cpp	/^int Mod::getOffset(int id, int max) const$/;"	f	class:OpenXcom::Mod
getOffset	Mod/RuleConverter.h	/^	int getOffset(const std::string &id) { return _offsets[id]; }$/;"	f	class:OpenXcom::RuleConverter
getOneHandedPenalty	Mod/RuleItem.cpp	/^int RuleItem::getOneHandedPenalty(Mod *mod) const$/;"	f	class:OpenXcom::RuleItem
getOneHandedPenaltyGlobal	Mod/Mod.h	/^	int getOneHandedPenaltyGlobal() const { return _oneHandedPenaltyGlobal; }$/;"	f	class:OpenXcom::Mod
getOneTimeRandomEvents	Mod/RuleEventScript.h	/^	const WeightedOptions &getOneTimeRandomEvents() const { return _oneTimeRandomEvents; }$/;"	f	class:OpenXcom::RuleEventScript
getOneTimeSequentialEvents	Mod/RuleEventScript.h	/^	const std::vector<std::string> &getOneTimeSequentialEvents() const { return _oneTimeSequentialEvents; }$/;"	f	class:OpenXcom::RuleEventScript
getOpacity	Battlescape/Particle.h	/^	Uint8 getOpacity() const { return std::min((_opacity + 7) \/ 10, 3); }$/;"	f	class:OpenXcom::Particle
getOperationBaseType	Mod/RuleAlienMission.h	/^	const std::string &getOperationBaseType() const { return _operationBaseType; }$/;"	f	class:OpenXcom::RuleAlienMission
getOperationNamesFirst	Mod/Mod.h	/^	const std::vector<std::string> &getOperationNamesFirst() const { return _operationNamesFirst; }$/;"	f	class:OpenXcom::Mod
getOperationNamesLast	Mod/Mod.h	/^	const std::vector<std::string> &getOperationNamesLast() const { return _operationNamesLast; }$/;"	f	class:OpenXcom::Mod
getOperationSpawnZone	Mod/RuleAlienMission.h	/^	int getOperationSpawnZone() const { return _operationSpawnZone; }$/;"	f	class:OpenXcom::RuleAlienMission
getOperationType	Mod/RuleAlienMission.h	/^	AlienMissionOperationType getOperationType() const { return _operationType; }$/;"	f	class:OpenXcom::RuleAlienMission
getOptionInfo	Engine/Options.cpp	/^const std::vector<OptionInfo> &getOptionInfo()$/;"	f	namespace:OpenXcom::Options
getOrigin	Battlescape/Projectile.cpp	/^Position Projectile::getOrigin() const$/;"	f	class:OpenXcom::Projectile
getOriginVoxel	Battlescape/TileEngine.cpp	/^Position TileEngine::getOriginVoxel(BattleAction &action, Tile *tile)$/;"	f	class:OpenXcom::TileEngine
getOriginalFaction	Savegame/BattleUnit.cpp	/^UnitFaction BattleUnit::getOriginalFaction() const$/;"	f	class:OpenXcom::BattleUnit
getOriginalFactionScript	Savegame/BattleUnit.cpp	/^void getOriginalFactionScript(const BattleUnit *bu, int &faction)$/;"	f	namespace:OpenXcom::__anon36
getOriginalMovementType	Savegame/BattleUnit.h	/^	MovementType getOriginalMovementType() const { return _originalMovementType; }$/;"	f	class:OpenXcom::BattleUnit
getOriginalMovmentTypeScript	Savegame/BattleUnit.cpp	/^void getOriginalMovmentTypeScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
getOverKill	Mod/Armor.cpp	/^float Armor::getOverKill() const$/;"	f	class:OpenXcom::Armor
getOverKillDamage	Savegame/BattleUnit.cpp	/^int BattleUnit::getOverKillDamage() const$/;"	f	class:OpenXcom::BattleUnit
getOverlappingUnit	Savegame/Tile.cpp	/^BattleUnit *Tile::getOverlappingUnit(const SavedBattleGame *saveBattleGame, TileUnitOverlapping range) const$/;"	f	class:OpenXcom::Tile
getOverlaps	Savegame/Tile.cpp	/^int Tile::getOverlaps() const$/;"	f	class:OpenXcom::Tile
getOwner	Savegame/BattleItem.cpp	/^BattleUnit *BattleItem::getOwner()$/;"	f	class:OpenXcom::BattleItem
getOwner	Savegame/BattleItem.cpp	/^const BattleUnit *BattleItem::getOwner() const$/;"	f	class:OpenXcom::BattleItem
getPact	Savegame/Country.cpp	/^bool Country::getPact() const$/;"	f	class:OpenXcom::Country
getPactCountry	Savegame/AlienBase.cpp	/^const std::string &AlienBase::getPactCountry() const$/;"	f	class:OpenXcom::AlienBase
getPainImmune	Mod/Armor.cpp	/^bool Armor::getPainImmune(bool def) const$/;"	f	class:OpenXcom::Armor
getPainKillerQuantity	Mod/RuleItem.cpp	/^int RuleItem::getPainKillerQuantity() const$/;"	f	class:OpenXcom::RuleItem
getPainKillerQuantity	Savegame/BattleItem.cpp	/^int BattleItem::getPainKillerQuantity() const$/;"	f	class:OpenXcom::BattleItem
getPainKillerRecovery	Mod/RuleItem.cpp	/^float RuleItem::getPainKillerRecovery() const$/;"	f	class:OpenXcom::RuleItem
getPalette	Engine/Screen.cpp	/^SDL_Color *Screen::getPalette() const$/;"	f	class:OpenXcom::Screen
getPalette	Engine/State.cpp	/^SDL_Color *State::getPalette()$/;"	f	class:OpenXcom::State
getPalette	Engine/Surface.h	/^	SDL_Color *getPalette() const$/;"	f	class:OpenXcom::Surface
getPalette	Mod/CustomPalettes.cpp	/^std::map<int, Position> *CustomPalettes::getPalette()$/;"	f	class:OpenXcom::CustomPalettes
getPalette	Mod/Mod.cpp	/^Palette *Mod::getPalette(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getPalette	Mod/RuleInterface.cpp	/^const std::string &RuleInterface::getPalette() const$/;"	f	class:OpenXcom::RuleInterface
getPaletteTransformations	Mod/RuleEnviroEffects.h	/^	const std::map<std::string, std::string>& getPaletteTransformations() const { return _paletteTransformations; }$/;"	f	class:OpenXcom::RuleEnviroEffects
getPaletteTranslucency	lodepng.cpp	/^static unsigned getPaletteTranslucency(const unsigned char* palette, size_t palettesize)$/;"	f	file:
getPalettes	Mod/Mod.h	/^	const std::map<std::string, Palette*> &getPalettes() const { return _palettes; }$/;"	f	class:OpenXcom::Mod
getPanicHandled	Battlescape/BattlescapeGame.h	/^	bool getPanicHandled() const { return _playerPanicHandled; }$/;"	f	class:OpenXcom::BattlescapeGame
getPanicSounds	Mod/Unit.cpp	/^const std::vector<int> &Unit::getPanicSounds() const$/;"	f	class:OpenXcom::Unit
getPanickTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getPanickTotal() const$/;"	f	class:OpenXcom::SoldierDiary
getParent	Mod/RuleInterface.cpp	/^const std::string &RuleInterface::getParent() const$/;"	f	class:OpenXcom::RuleInterface
getParticle	Battlescape/Projectile.cpp	/^int Projectile::getParticle(int i) const$/;"	f	class:OpenXcom::Projectile
getPath	Battlescape/Pathfinding.cpp	/^const std::vector<int> &Pathfinding::getPath() const$/;"	f	class:OpenXcom::Pathfinding
getPath	Engine/ModInfo.cpp	/^const std::string &ModInfo::getPath()                    const { return _path;                    }$/;"	f	class:OpenXcom::ModInfo
getPathfinding	Battlescape/BattlescapeGame.cpp	/^Pathfinding *BattlescapeGame::getPathfinding()$/;"	f	class:OpenXcom::BattlescapeGame
getPathfinding	Savegame/SavedBattleGame.cpp	/^Pathfinding *SavedBattleGame::getPathfinding() const$/;"	f	class:OpenXcom::SavedBattleGame
getPatrolNode	Savegame/SavedBattleGame.cpp	/^Node *SavedBattleGame::getPatrolNode(bool scout, BattleUnit *unit, Node *fromNode)$/;"	f	class:OpenXcom::SavedBattleGame
getPediaReplaceCraftFuelWithRangeType	Mod/Mod.cpp	/^int Mod::getPediaReplaceCraftFuelWithRangeType() const$/;"	f	class:OpenXcom::Mod
getPercentGainedMax	Mod/RuleSoldierTransformation.h	/^	const UnitStats &getPercentGainedMax() const { return _percentGainedMax; }$/;"	f	class:OpenXcom::RuleSoldierTransformation
getPercentGainedMin	Mod/RuleSoldierTransformation.h	/^	const UnitStats &getPercentGainedMin() const { return _percentGainedMin; }$/;"	f	class:OpenXcom::RuleSoldierTransformation
getPercentGainedStatChange	Mod/RuleSoldierTransformation.cpp	/^const UnitStats &RuleSoldierTransformation::getPercentGainedStatChange() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getPercentMax	Mod/RuleSoldierTransformation.h	/^	const UnitStats &getPercentMax() const { return _percentMax; }$/;"	f	class:OpenXcom::RuleSoldierTransformation
getPercentMin	Mod/RuleSoldierTransformation.h	/^	const UnitStats &getPercentMin() const { return _percentMin; }$/;"	f	class:OpenXcom::RuleSoldierTransformation
getPercentOverallStatChange	Mod/RuleSoldierTransformation.cpp	/^const UnitStats &RuleSoldierTransformation::getPercentOverallStatChange() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getPerformanceBonusFactor	Mod/Mod.h	/^	int getPerformanceBonusFactor() const { return _performanceBonusFactor; }$/;"	f	class:OpenXcom::Mod
getPersonalEquipmentArmor	Savegame/Soldier.h	/^	const Armor* getPersonalEquipmentArmor() const { return _personalEquipmentArmor; }$/;"	f	class:OpenXcom::Soldier
getPersonalEquipmentLayout	Savegame/Soldier.h	/^	std::vector<EquipmentLayoutItem*> *getPersonalEquipmentLayout() { return &_personalEquipmentLayout; }$/;"	f	class:OpenXcom::Soldier
getPersonalLight	Mod/Armor.cpp	/^int Armor::getPersonalLight() const$/;"	f	class:OpenXcom::Armor
getPersonnel	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getPersonnel() const$/;"	f	class:OpenXcom::RuleBaseFacility
getPersonnelMaintenance	Savegame/Base.cpp	/^int Base::getPersonnelMaintenance() const$/;"	f	class:OpenXcom::Base
getPersonnelTime	Mod/Mod.cpp	/^int Mod::getPersonnelTime() const$/;"	f	class:OpenXcom::Mod
getPickUpWeaponsMoreActively	Mod/Unit.h	/^	int getPickUpWeaponsMoreActively() const { return _pickUpWeaponsMoreActively; }$/;"	f	class:OpenXcom::Unit
getPickUpWeaponsMoreActively	Savegame/BattleUnit.h	/^	bool getPickUpWeaponsMoreActively() const { return _pickUpWeaponsMoreActively; }$/;"	f	class:OpenXcom::BattleUnit
getPilotAccuracyBonus	Savegame/Craft.cpp	/^int Craft::getPilotAccuracyBonus(const std::vector<Soldier*> &pilots, const Mod *mod) const$/;"	f	class:OpenXcom::Craft
getPilotAccuracyRange	Mod/Mod.h	/^	int getPilotAccuracyRange() const { return _pilotAccuracyRange; }$/;"	f	class:OpenXcom::Mod
getPilotAccuracyZeroPoint	Mod/Mod.h	/^	int getPilotAccuracyZeroPoint() const { return _pilotAccuracyZeroPoint; }$/;"	f	class:OpenXcom::Mod
getPilotApproachSpeedModifier	Savegame/Craft.cpp	/^int Craft::getPilotApproachSpeedModifier(const std::vector<Soldier*> &pilots, const Mod *mod) const$/;"	f	class:OpenXcom::Craft
getPilotBraveryThresholdBold	Mod/Mod.h	/^	int getPilotBraveryThresholdBold() const { return _pilotBraveryThresholds[1]; }$/;"	f	class:OpenXcom::Mod
getPilotBraveryThresholdNormal	Mod/Mod.h	/^	int getPilotBraveryThresholdNormal() const { return _pilotBraveryThresholds[2]; }$/;"	f	class:OpenXcom::Mod
getPilotBraveryThresholdVeryBold	Mod/Mod.h	/^	int getPilotBraveryThresholdVeryBold() const { return _pilotBraveryThresholds[0]; }$/;"	f	class:OpenXcom::Mod
getPilotDodgeBonus	Savegame/Craft.cpp	/^int Craft::getPilotDodgeBonus(const std::vector<Soldier*> &pilots, const Mod *mod) const$/;"	f	class:OpenXcom::Craft
getPilotList	Savegame/Craft.cpp	/^const std::vector<Soldier*> Craft::getPilotList(bool autoAdd)$/;"	f	class:OpenXcom::Craft
getPilotReactionsRange	Mod/Mod.h	/^	int getPilotReactionsRange() const { return _pilotReactionsRange; }$/;"	f	class:OpenXcom::Mod
getPilotReactionsZeroPoint	Mod/Mod.h	/^	int getPilotReactionsZeroPoint() const { return _pilotReactionsZeroPoint; }$/;"	f	class:OpenXcom::Mod
getPilots	Mod/RuleCraft.cpp	/^int RuleCraft::getPilots() const$/;"	f	class:OpenXcom::RuleCraft
getPilotsEmergencyEvacuationSurvivalChance	Mod/Mod.h	/^	int getPilotsEmergencyEvacuationSurvivalChance() const { return _pilotsEmergencyEvacuationSurvivalChance; }$/;"	f	class:OpenXcom::Mod
getPitch	Engine/Surface.h	/^	int getPitch() const$/;"	f	class:OpenXcom::Surface
getPitch	Engine/Surface.h	/^	int getPitch() const$/;"	f	class:OpenXcom::SurfaceRaw
getPixel	Engine/Surface.h	/^	Uint8 getPixel(int x, int y) const$/;"	f	class:OpenXcom::Surface
getPixelColorRGBA16	lodepng.cpp	/^static void getPixelColorRGBA16(unsigned short* r, unsigned short* g, unsigned short* b, unsigned short* a,$/;"	f	file:
getPixelColorRGBA8	lodepng.cpp	/^static void getPixelColorRGBA8(unsigned char* r, unsigned char* g,$/;"	f	file:
getPixelColorsRGBA8	lodepng.cpp	/^static void getPixelColorsRGBA8(unsigned char* buffer, size_t numpixels,$/;"	f	file:
getPlaceSound	Mod/RuleBaseFacility.h	/^	int getPlaceSound() const { return _placeSound; }$/;"	f	class:OpenXcom::RuleBaseFacility
getPlacement	Savegame/BaseFacility.cpp	/^BaseAreaSubset BaseFacility::getPlacement() const$/;"	f	class:OpenXcom::BaseFacility
getPlacementError	Basescape/BaseView.cpp	/^BasePlacementErrors BaseView::getPlacementError(const RuleBaseFacility *rule, BaseFacility *facilityBeingMoved, bool isStartFacility) const$/;"	f	class:OpenXcom::BaseView
getPoints	Mod/AlienDeployment.cpp	/^int AlienDeployment::getPoints() const$/;"	f	class:OpenXcom::AlienDeployment
getPoints	Mod/Polygon.cpp	/^int Polygon::getPoints() const$/;"	f	class:OpenXcom::Polygon
getPoints	Mod/Polyline.cpp	/^int Polyline::getPoints() const$/;"	f	class:OpenXcom::Polyline
getPoints	Mod/RuleAlienMission.cpp	/^int RuleAlienMission::getPoints() const$/;"	f	class:OpenXcom::RuleAlienMission
getPoints	Mod/RuleEvent.h	/^	int getPoints() const { return _points; }$/;"	f	class:OpenXcom::RuleEvent
getPoints	Mod/RuleResearch.cpp	/^int RuleResearch::getPoints() const$/;"	f	class:OpenXcom::RuleResearch
getPolygonFromLonLat	Geoscape/Globe.cpp	/^Polygon* Globe::getPolygonFromLonLat(double lon, double lat) const$/;"	f	class:OpenXcom::Globe
getPolygonTextureAndShade	Geoscape/Globe.cpp	/^void Globe::getPolygonTextureAndShade(double lon, double lat, int *texture, int *shade) const$/;"	f	class:OpenXcom::Globe
getPolygons	Mod/RuleGlobe.cpp	/^std::list<Polygon*> *RuleGlobe::getPolygons()$/;"	f	class:OpenXcom::RuleGlobe
getPolylines	Mod/RuleGlobe.cpp	/^std::list<Polyline*> *RuleGlobe::getPolylines()$/;"	f	class:OpenXcom::RuleGlobe
getPopupWindowY	Interface/ComboBox.cpp	/^static int getPopupWindowY(int buttonHeight, int buttonY, int popupHeight, bool popupAboveButton)$/;"	f	namespace:OpenXcom
getPos	Engine/ScriptBind.h	/^		ProgPos getPos()$/;"	f	class:OpenXcom::ParserWriter::ReservedPos
getPosition	Battlescape/Explosion.cpp	/^Position Explosion::getPosition() const$/;"	f	class:OpenXcom::Explosion
getPosition	Battlescape/PathfindingNode.cpp	/^Position PathfindingNode::getPosition() const$/;"	f	class:OpenXcom::PathfindingNode
getPosition	Battlescape/Projectile.cpp	/^Position Projectile::getPosition(int offset) const$/;"	f	class:OpenXcom::Projectile
getPosition	Savegame/BattleUnit.cpp	/^Position BattleUnit::getPosition() const$/;"	f	class:OpenXcom::BattleUnit
getPosition	Savegame/CraftWeaponProjectile.cpp	/^int CraftWeaponProjectile::getPosition() const$/;"	f	class:OpenXcom::CraftWeaponProjectile
getPosition	Savegame/Node.cpp	/^Position Node::getPosition() const$/;"	f	class:OpenXcom::Node
getPosition	Savegame/Tile.h	/^	Position getPosition() const$/;"	f	class:OpenXcom::Tile
getPositionFromEnd	Battlescape/Projectile.cpp	/^Position Projectile::getPositionFromEnd(const std::vector<Position>& trajectory, int pos)$/;"	f	class:OpenXcom::Projectile
getPositionFromStart	Battlescape/Projectile.cpp	/^Position Projectile::getPositionFromStart(const std::vector<Position>& trajectory, int pos)$/;"	f	class:OpenXcom::Projectile
getPositionVexels	Savegame/BattleUnit.cpp	/^Position BattleUnit::getPositionVexels() const$/;"	f	class:OpenXcom::BattleUnit
getPositionXScript	Savegame/BattleUnit.cpp	/^void getPositionXScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
getPositionXScript	Savegame/Tile.cpp	/^void getPositionXScript(const Tile *t, int &ret)$/;"	f	namespace:OpenXcom::__anon43
getPositionYScript	Savegame/BattleUnit.cpp	/^void getPositionYScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
getPositionYScript	Savegame/Tile.cpp	/^void getPositionYScript(const Tile *t, int &ret)$/;"	f	namespace:OpenXcom::__anon43
getPositionZScript	Savegame/BattleUnit.cpp	/^void getPositionZScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
getPositionZScript	Savegame/Tile.cpp	/^void getPositionZScript(const Tile *t, int &ret)$/;"	f	namespace:OpenXcom::__anon43
getPower	Mod/RuleItem.cpp	/^int RuleItem::getPower() const$/;"	f	class:OpenXcom::RuleItem
getPowerBonus	Mod/RuleItem.cpp	/^int RuleItem::getPowerBonus(BattleActionAttack::ReadOnly attack) const$/;"	f	class:OpenXcom::RuleItem
getPowerForAnimation	Mod/RuleItem.h	/^	int getPowerForAnimation() const { return _powerForAnimation; }$/;"	f	class:OpenXcom::RuleItem
getPowerRangeReduction	Mod/RuleItem.cpp	/^float RuleItem::getPowerRangeReduction(float range) const$/;"	f	class:OpenXcom::RuleItem
getPowerRangeReductionRaw	Mod/RuleItem.h	/^	float getPowerRangeReductionRaw() const { return _powerRangeReduction; }$/;"	f	class:OpenXcom::RuleItem
getPowerRangeThresholdRaw	Mod/RuleItem.h	/^	float getPowerRangeThresholdRaw() const { return _powerRangeThreshold; }$/;"	f	class:OpenXcom::RuleItem
getPressed	Interface/ToggleTextButton.h	/^	bool getPressed() const { return _isPressed; }$/;"	f	class:OpenXcom::ToggleTextButton
getPrevDir	Battlescape/PathfindingNode.cpp	/^int PathfindingNode::getPrevDir() const$/;"	f	class:OpenXcom::PathfindingNode
getPrevNode	Battlescape/PathfindingNode.cpp	/^PathfindingNode* PathfindingNode::getPrevNode() const$/;"	f	class:OpenXcom::PathfindingNode
getPreview	Savegame/Tile.cpp	/^int Tile::getPreview() const$/;"	f	class:OpenXcom::Tile
getPreviewBase	Savegame/SavedGame.h	/^	Base* getPreviewBase() { return _previewBase; }$/;"	f	class:OpenXcom::SavedGame
getPreviousOwner	Savegame/BattleItem.cpp	/^BattleUnit *BattleItem::getPreviousOwner()$/;"	f	class:OpenXcom::BattleItem
getPreviousOwner	Savegame/BattleItem.cpp	/^const BattleUnit *BattleItem::getPreviousOwner() const$/;"	f	class:OpenXcom::BattleItem
getPreviousTransformations	Savegame/Soldier.cpp	/^std::map<std::string, int> &Soldier::getPreviousTransformations()$/;"	f	class:OpenXcom::Soldier
getPrimaryCompatibleAmmo	Mod/RuleItem.cpp	/^const std::vector<const RuleItem*> *RuleItem::getPrimaryCompatibleAmmo() const$/;"	f	class:OpenXcom::RuleItem
getPrimeActionMessage	Mod/RuleItem.h	/^	const std::string &getPrimeActionMessage() const { return _primeActionMessage; }$/;"	f	class:OpenXcom::RuleItem
getPrimeActionName	Mod/RuleItem.h	/^	const std::string &getPrimeActionName() const { return _primeActionName; }$/;"	f	class:OpenXcom::RuleItem
getPrimeSound	Mod/RuleItem.cpp	/^int RuleItem::getPrimeSound() const$/;"	f	class:OpenXcom::RuleItem
getPrimeSoundRaw	Mod/RuleItem.h	/^	const std::vector<int>& getPrimeSoundRaw() const { return _primeSound; }$/;"	f	class:OpenXcom::RuleItem
getPriority	Savegame/Node.cpp	/^int Node::getPriority() const$/;"	f	class:OpenXcom::Node
getPrisonType	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getPrisonType() const$/;"	f	class:OpenXcom::RuleBaseFacility
getPrisonType	Mod/RuleItem.cpp	/^int RuleItem::getPrisonType() const$/;"	f	class:OpenXcom::RuleItem
getProc	Engine/Script.cpp	/^ScriptRange<ScriptProcData> ScriptParserBase::getProc(ScriptRef prefix, ScriptRef postfix) const$/;"	f	class:OpenXcom::ScriptParserBase
getProducedCraft	Mod/RuleManufacture.cpp	/^const RuleCraft* RuleManufacture::getProducedCraft() const$/;"	f	class:OpenXcom::RuleManufacture
getProducedItem	Mod/RuleSoldierTransformation.h	/^	const std::string &getProducedItem() const { return _producedItem; }$/;"	f	class:OpenXcom::RuleSoldierTransformation
getProducedItems	Mod/RuleManufacture.cpp	/^const std::map<const RuleItem*, int> &RuleManufacture::getProducedItems() const$/;"	f	class:OpenXcom::RuleManufacture
getProducedSoldierArmor	Mod/RuleSoldierTransformation.cpp	/^const std::string &RuleSoldierTransformation::getProducedSoldierArmor() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getProducedSoldierType	Mod/RuleSoldierTransformation.cpp	/^const std::string &RuleSoldierTransformation::getProducedSoldierType() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getProductions	Savegame/Base.cpp	/^const std::vector<Production *> & Base::getProductions() const$/;"	f	class:OpenXcom::Base
getProjectile	Battlescape/Map.cpp	/^Projectile *Map::getProjectile() const$/;"	f	class:OpenXcom::Map
getProjectileSpeed	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getProjectileSpeed() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getProjectileType	Mod/RuleCraftWeapon.cpp	/^CraftWeaponProjectileType RuleCraftWeapon::getProjectileType() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getPropertyNodeName	Mod/ModScript.h	/^		const std::string& getPropertyNodeName() const { return _propertyNodeName; }$/;"	f	struct:OpenXcom::ModScript::BonusStatsBaseParser
getProvidedBaseFunc	Mod/RuleBaseFacility.h	/^	RuleBaseFacilityFunctions getProvidedBaseFunc() const { return _provideBaseFunc; }$/;"	f	class:OpenXcom::RuleBaseFacility
getProvidedBaseFunc	Savegame/Base.cpp	/^RuleBaseFacilityFunctions Base::getProvidedBaseFunc(BaseAreaSubset skip) const$/;"	f	class:OpenXcom::Base
getPsiAccuracy	Savegame/BattleUnit.cpp	/^int BattleUnit::getPsiAccuracy(BattleActionAttack::ReadOnly attack)$/;"	f	class:OpenXcom::BattleUnit
getPsiAccuracyRangeReduction	Mod/RuleItem.cpp	/^float RuleItem::getPsiAccuracyRangeReduction(float range) const$/;"	f	class:OpenXcom::RuleItem
getPsiAnimation	Mod/RuleItem.cpp	/^int RuleItem::getPsiAnimation() const$/;"	f	class:OpenXcom::RuleItem
getPsiAnimationFrames	Mod/RuleItem.h	/^	int getPsiAnimationFrames() const { return _psiAnimFrames; }$/;"	f	class:OpenXcom::RuleItem
getPsiAttackName	Mod/RuleItem.h	/^	const std::string &getPsiAttackName() const { return _psiAttackName; }$/;"	f	class:OpenXcom::RuleItem
getPsiCamouflage	Mod/Armor.cpp	/^int Armor::getPsiCamouflage() const$/;"	f	class:OpenXcom::Armor
getPsiDefence	Mod/Armor.cpp	/^int Armor::getPsiDefence(const BattleUnit* unit) const$/;"	f	class:OpenXcom::Armor
getPsiDefenceRaw	Mod/Armor.h	/^	const RuleStatBonus *getPsiDefenceRaw() const { return &_psiDefence; }$/;"	f	class:OpenXcom::Armor
getPsiLaboratories	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getPsiLaboratories() const$/;"	f	class:OpenXcom::RuleBaseFacility
getPsiMissAnimation	Mod/RuleItem.cpp	/^int RuleItem::getPsiMissAnimation() const$/;"	f	class:OpenXcom::RuleItem
getPsiMissAnimationFrames	Mod/RuleItem.h	/^	int getPsiMissAnimationFrames() const { return _psiMissAnimFrames; }$/;"	f	class:OpenXcom::RuleItem
getPsiMissSound	Mod/RuleItem.cpp	/^int RuleItem::getPsiMissSound() const$/;"	f	class:OpenXcom::RuleItem
getPsiMissSoundRaw	Mod/RuleItem.h	/^	const std::vector<int> &getPsiMissSoundRaw() const { return _psiMissSound; }$/;"	f	class:OpenXcom::RuleItem
getPsiRequirements	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getPsiRequirements() const$/;"	f	class:OpenXcom::Mod
getPsiSound	Mod/RuleItem.cpp	/^int RuleItem::getPsiSound() const$/;"	f	class:OpenXcom::RuleItem
getPsiSoundRaw	Mod/RuleItem.h	/^	const std::vector<int> &getPsiSoundRaw() const { return _psiSound; }$/;"	f	class:OpenXcom::RuleItem
getPsiStrImprovement	Savegame/Soldier.cpp	/^int Soldier::getPsiStrImprovement() const$/;"	f	class:OpenXcom::Soldier
getPsiVision	Mod/Armor.cpp	/^int Armor::getPsiVision() const$/;"	f	class:OpenXcom::Armor
getPsiWeapon	Mod/Unit.cpp	/^const std::string &Unit::getPsiWeapon() const$/;"	f	class:OpenXcom::Unit
getQuantity	Basescape/ManageAlienContainmentState.cpp	/^int ManageAlienContainmentState::getQuantity()$/;"	f	class:OpenXcom::ManageAlienContainmentState
getQuantity	Savegame/Transfer.cpp	/^int Transfer::getQuantity() const$/;"	f	class:OpenXcom::Transfer
getRGBA	Engine/Palette.cpp	/^Uint32 Palette::getRGBA(SDL_Color* pal, Uint8 color)$/;"	f	class:OpenXcom::Palette
getRMBFlag	Engine/Game.h	/^	bool getRMBFlag() const { return _rmb; }$/;"	f	class:OpenXcom::Game
getRWops	Engine/CatFile.cpp	/^SDL_RWops *CatFile::getRWops(Uint32 i) {$/;"	f	class:OpenXcom::CatFile
getRWops	Engine/FileMap.cpp	/^SDL_RWops *FileRecord::getRWops() const$/;"	f	class:OpenXcom::FileMap::FileRecord
getRWops	Engine/FileMap.cpp	/^SDL_RWops *getRWops(const std::string &relativeFilePath)$/;"	f	namespace:OpenXcom::FileMap
getRWopsReadAll	Engine/FileMap.cpp	/^SDL_RWops *FileRecord::getRWopsReadAll() const$/;"	f	class:OpenXcom::FileMap::FileRecord
getRWopsReadAll	Engine/FileMap.cpp	/^SDL_RWops *getRWopsReadAll(const std::string &relativeFilePath)$/;"	f	namespace:OpenXcom::FileMap
getRace	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::getRace() const$/;"	f	class:OpenXcom::AlienDeployment
getRace	Mod/Unit.cpp	/^std::string Unit::getRace() const$/;"	f	class:OpenXcom::Unit
getRace	Savegame/AlienMission.h	/^	const std::string &getRace() const { return _race; }$/;"	f	class:OpenXcom::AlienMission
getRaceBonus	Mod/RuleUfo.cpp	/^const RuleUfoStats& RuleUfo::getRaceBonus(const std::string& s) const$/;"	f	class:OpenXcom::RuleUfo
getRaceBonusRaw	Mod/RuleUfo.cpp	/^const std::map<std::string, RuleUfoStats> &RuleUfo::getRaceBonusRaw() const$/;"	f	class:OpenXcom::RuleUfo
getRadarChance	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getRadarChance() const$/;"	f	class:OpenXcom::RuleBaseFacility
getRadarChance	Mod/RuleCraft.cpp	/^int RuleCraft::getRadarChance() const$/;"	f	class:OpenXcom::RuleCraft
getRadarRange	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getRadarRange() const$/;"	f	class:OpenXcom::RuleBaseFacility
getRadarRange	Mod/RuleCraft.cpp	/^int RuleCraft::getRadarRange() const$/;"	f	class:OpenXcom::RuleCraft
getRadius	Mod/RuleUfo.cpp	/^int RuleUfo::getRadius() const$/;"	f	class:OpenXcom::RuleUfo
getRandomAggroSound	Savegame/BattleUnit.cpp	/^int BattleUnit::getRandomAggroSound() const$/;"	f	class:OpenXcom::BattleUnit
getRandomAlternateTerrain	Mod/MapScript.cpp	/^const std::vector<std::string> &MapScript::getRandomAlternateTerrain() const$/;"	f	class:OpenXcom::MapScript
getRandomArcs	Mod/RuleArcScript.h	/^	const WeightedOptions &getRandomArcs() const { return _randomArcs; }$/;"	f	class:OpenXcom::RuleArcScript
getRandomBaseTerrain	Mod/Texture.cpp	/^std::string Texture::getRandomBaseTerrain(Target *target) const$/;"	f	class:OpenXcom::Texture
getRandomDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getRandomDamage(int power) const$/;"	f	class:OpenXcom::RuleDamageType
getRandomDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getRandomDamage(int power, FuncRef<int(int, int)> randFunc) const$/;"	f	class:OpenXcom::RuleDamageType
getRandomDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getRandomDamage(int power, int mode) const$/;"	f	class:OpenXcom::RuleDamageType
getRandomDamageForTile	Mod/RuleDamageType.cpp	/^int RuleDamageType::getRandomDamageForTile(int power, int damage) const$/;"	f	class:OpenXcom::RuleDamageType
getRandomDamageScript	Mod/RuleItem.cpp	/^void getRandomDamageScript(const RuleDamageType* rdt, int &ret, int value, RNG::RandomState* rng)$/;"	f	namespace:OpenXcom::__anon21
getRandomDeployment	Mod/Texture.cpp	/^std::string Texture::getRandomDeployment() const$/;"	f	class:OpenXcom::Texture
getRandomItemList	Mod/RuleEvent.h	/^	const std::vector<std::string> &getRandomItemList() const { return _randomItemList; }$/;"	f	class:OpenXcom::RuleEvent
getRandomMapBlock	Mod/RuleTerrain.cpp	/^MapBlock* RuleTerrain::getRandomMapBlock(int maxSizeX, int maxSizeY, int group, bool force)$/;"	f	class:OpenXcom::RuleTerrain
getRandomMapScript	Mod/AlienDeployment.cpp	/^const std::string& AlienDeployment::getRandomMapScript() const$/;"	f	class:OpenXcom::AlienDeployment
getRandomMapScript	Mod/RuleTerrain.cpp	/^const std::string& RuleTerrain::getRandomMapScript() const$/;"	f	class:OpenXcom::RuleTerrain
getRandomMission	Mod/Mod.cpp	/^const RuleAlienMission *Mod::getRandomMission(MissionObjective objective, size_t monthsPassed) const$/;"	f	class:OpenXcom::Mod
getRandomMultiItemList	Mod/RuleEvent.h	/^	const std::vector<std::map<std::string, int> > &getRandomMultiItemList() const { return _randomMultiItemList; }$/;"	f	class:OpenXcom::RuleEvent
getRandomMusic	Mod/Mod.cpp	/^Music *Mod::getRandomMusic(const std::string &name) const$/;"	f	class:OpenXcom::Mod
getRandomPoint	Mod/RuleRegion.cpp	/^std::pair<double, double> RuleRegion::getRandomPoint(size_t zone, int area) const$/;"	f	class:OpenXcom::RuleRegion
getRandomProducedItems	Mod/RuleManufacture.cpp	/^const std::vector<std::pair<int, std::map<const RuleItem*, int> > > &RuleManufacture::getRandomProducedItems() const$/;"	f	class:OpenXcom::RuleManufacture
getRandomProductionInfo	Savegame/Production.h	/^	const std::map<std::string, int> &getRandomProductionInfo() const { return _randomProductionInfo; }$/;"	f	class:OpenXcom::Production
getRandomScript	Savegame/SavedGame.cpp	/^void getRandomScript(SavedGame* sg, RNG::RandomState*& r)$/;"	f	namespace:OpenXcom::__anon42
getRandomSound	Mod/RuleCraft.cpp	/^int RuleCraft::getRandomSound(const std::vector<int>& vector, int defaultValue) const$/;"	f	class:OpenXcom::RuleCraft
getRandomSound	Mod/RuleItem.cpp	/^int RuleItem::getRandomSound(const std::vector<int> &vector, int defaultValue) const$/;"	f	class:OpenXcom::RuleItem
getRandomTerrain	Mod/Texture.cpp	/^std::string Texture::getRandomTerrain(Target *target) const$/;"	f	class:OpenXcom::Texture
getRandomTypeScript	Mod/RuleItem.cpp	/^void getRandomTypeScript(const RuleDamageType* rdt, int &ret)$/;"	f	namespace:OpenXcom::__anon21
getRandomizedItems	Mod/MapBlock.cpp	/^const std::vector<RandomizedItems> *MapBlock::getRandomizedItems() const$/;"	f	class:OpenXcom::MapBlock
getRange	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getRange() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getRange	Savegame/CraftWeaponProjectile.cpp	/^int CraftWeaponProjectile::getRange() const$/;"	f	class:OpenXcom::CraftWeaponProjectile
getRank	Mod/Unit.cpp	/^std::string Unit::getRank() const$/;"	f	class:OpenXcom::Unit
getRank	Savegame/Node.cpp	/^NodeRank Node::getRank() const$/;"	f	class:OpenXcom::Node
getRank	Savegame/Soldier.cpp	/^SoldierRank Soldier::getRank() const$/;"	f	class:OpenXcom::Soldier
getRankColor	Mod/Armor.cpp	/^int Armor::getRankColor(int i) const$/;"	f	class:OpenXcom::Armor
getRankColorGroup	Mod/Armor.cpp	/^int Armor::getRankColorGroup() const$/;"	f	class:OpenXcom::Armor
getRankColorRaw	Mod/Armor.h	/^	const std::vector<int> &getRankColorRaw() const { return _rankColor; }$/;"	f	class:OpenXcom::Armor
getRankInt	Savegame/BattleUnit.cpp	/^int BattleUnit::getRankInt() const$/;"	f	class:OpenXcom::BattleUnit
getRankScript	Savegame/Soldier.cpp	/^void getRankScript(const Soldier *so, int &ret)$/;"	f	namespace:OpenXcom::__anon35
getRankSprite	Mod/RuleSoldier.cpp	/^int RuleSoldier::getRankSprite() const$/;"	f	class:OpenXcom::RuleSoldier
getRankSprite	Savegame/Soldier.cpp	/^int Soldier::getRankSprite() const$/;"	f	class:OpenXcom::Soldier
getRankSpriteBattlescape	Mod/RuleSoldier.cpp	/^int RuleSoldier::getRankSpriteBattlescape() const$/;"	f	class:OpenXcom::RuleSoldier
getRankSpriteBattlescape	Savegame/Soldier.cpp	/^int Soldier::getRankSpriteBattlescape() const$/;"	f	class:OpenXcom::Soldier
getRankSpriteTiny	Mod/RuleSoldier.cpp	/^int RuleSoldier::getRankSpriteTiny() const$/;"	f	class:OpenXcom::RuleSoldier
getRankSpriteTiny	Savegame/Soldier.cpp	/^int Soldier::getRankSpriteTiny() const$/;"	f	class:OpenXcom::Soldier
getRankString	Savegame/BattleUnit.cpp	/^const std::string& BattleUnit::getRankString() const$/;"	f	class:OpenXcom::BattleUnit
getRankString	Savegame/Soldier.cpp	/^std::string Soldier::getRankString() const$/;"	f	class:OpenXcom::Soldier
getRankStrings	Mod/RuleSoldier.cpp	/^const std::vector<std::string> &RuleSoldier::getRankStrings() const$/;"	f	class:OpenXcom::RuleSoldier
getRatingString	Savegame/MissionStatistics.h	/^	std::string getRatingString(Language *lang) const$/;"	f	struct:OpenXcom::MissionStatistics
getRaw	Engine/Surface.h	/^	Uint8 *getRaw(int x, int y)$/;"	f	class:OpenXcom::Surface
getRaw	Engine/Surface.h	/^	const Uint8 *getRaw(int x, int y) const$/;"	f	class:OpenXcom::Surface
getReactionFireKillTotal	Savegame/SoldierDiary.cpp	/^ int SoldierDiary::getReactionFireKillTotal(Mod *mod) const$/;"	f	class:OpenXcom::SoldierDiary
getReactionScore	Savegame/BattleUnit.cpp	/^double BattleUnit::getReactionScore() const$/;"	f	class:OpenXcom::BattleUnit
getReactionScoreScript	Savegame/BattleUnit.cpp	/^void getReactionScoreScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
getReactor	Battlescape/TileEngine.cpp	/^TileEngine::ReactionScore *TileEngine::getReactor(std::vector<TileEngine::ReactionScore> &spotters, BattleUnit *unit)$/;"	f	class:OpenXcom::TileEngine
getRearArmor	Mod/Armor.cpp	/^int Armor::getRearArmor() const$/;"	f	class:OpenXcom::Armor
getRearArmor	Mod/RuleSoldierBonus.h	/^	int getRearArmor() const { return _rearArmor; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getRearmRate	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getRearmRate() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getRecolor	Savegame/BattleUnit.cpp	/^const std::vector<std::pair<Uint8, Uint8> > &BattleUnit::getRecolor() const$/;"	f	class:OpenXcom::BattleUnit
getRecolorScript	Savegame/BattleUnit.cpp	/^void getRecolorScript(const BattleUnit *bu, int &pixel)$/;"	f	namespace:OpenXcom::__anon36
getRecommendedUserOptions	Mod/Mod.h	/^	const std::map<std::string, std::string> &getRecommendedUserOptions() const { return _recommendedUserOptions; }$/;"	f	class:OpenXcom::Mod
getRecoveredItemCount	Battlescape/DebriefingState.cpp	/^int DebriefingState::getRecoveredItemCount(const RuleItem *rule)$/;"	f	class:OpenXcom::DebriefingState
getRecoveryDividers	Mod/RuleItem.cpp	/^const std::map<std::string, int> &RuleItem::getRecoveryDividers() const$/;"	f	class:OpenXcom::RuleItem
getRecoveryPoints	Mod/RuleItem.cpp	/^int RuleItem::getRecoveryPoints() const$/;"	f	class:OpenXcom::RuleItem
getRecoveryTime	Mod/RuleSoldierTransformation.cpp	/^int RuleSoldierTransformation::getRecoveryTime() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getRecoveryTransformations	Mod/RuleItem.cpp	/^const std::map<const RuleItem*, std::vector<int> > &RuleItem::getRecoveryTransformations() const$/;"	f	class:OpenXcom::RuleItem
getRects	Mod/MapScript.h	/^	const std::vector<SDL_Rect*> *getRects() const {return &_rects;};$/;"	f	class:OpenXcom::MapScript
getRed	Engine/Scalers/xbrz.cpp	/^inline unsigned char getRed  (uint32_t pix) { return getByte<2>(pix); }$/;"	f	namespace:__anon10
getReenabled	Mod/RuleResearch.cpp	/^const std::vector<const RuleResearch*> &RuleResearch::getReenabled() const$/;"	f	class:OpenXcom::RuleResearch
getRef	Engine/Script.cpp	/^const ScriptRefData* ScriptGlobal::getRef(ScriptRef name, ScriptRef postfix) const$/;"	f	class:OpenXcom::ScriptGlobal
getRef	Engine/Script.cpp	/^const ScriptRefData* ScriptParserBase::getRef(ScriptRef prefix, ScriptRef postfix) const$/;"	f	class:OpenXcom::ScriptParserBase
getReferece	Engine/Script.cpp	/^ScriptRefData ParserWriter::getReferece(const ScriptRef& s) const$/;"	f	class:OpenXcom::ParserWriter
getRefuelItem	Mod/RuleCraft.cpp	/^const std::string &RuleCraft::getRefuelItem() const$/;"	f	class:OpenXcom::RuleCraft
getRefuelRate	Mod/RuleCraft.cpp	/^int RuleCraft::getRefuelRate() const$/;"	f	class:OpenXcom::RuleCraft
getRefund	Mod/RuleManufacture.cpp	/^bool RuleManufacture::getRefund() const$/;"	f	class:OpenXcom::RuleManufacture
getRefundValue	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getRefundValue() const$/;"	f	class:OpenXcom::RuleBaseFacility
getRegMeta	Engine/Script.cpp	/^TypeInfo getRegMeta(const ScriptParserBase& parser, ArgEnum type)$/;"	f	namespace:OpenXcom::__anon8
getRegion	Mod/Mod.cpp	/^RuleRegion *Mod::getRegion(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getRegion	Mod/SoldierNamePool.h	/^	const std::string& getRegion() const { return _region; }$/;"	f	class:OpenXcom::SoldierNamePool
getRegion	Savegame/AlienMission.h	/^	const std::string &getRegion() const { return _region; }$/;"	f	class:OpenXcom::AlienMission
getRegionList	Mod/RuleEvent.h	/^	const std::vector<std::string> &getRegionList() const { return _regionList; }$/;"	f	class:OpenXcom::RuleEvent
getRegionTotal	Savegame/SoldierDiary.cpp	/^std::map<std::string, int> SoldierDiary::getRegionTotal(std::vector<MissionStatistics*> *missionStatistics) const$/;"	f	class:OpenXcom::SoldierDiary
getRegions	Mod/RuleConverter.h	/^	const std::vector<std::string> &getRegions() const { return _regions; }$/;"	f	class:OpenXcom::RuleConverter
getRegions	Mod/RuleMissionScript.cpp	/^std::vector<std::string> RuleMissionScript::getRegions(const int month) const$/;"	f	class:OpenXcom::RuleMissionScript
getRegions	Savegame/SavedGame.cpp	/^std::vector<Region*> *SavedGame::getRegions()$/;"	f	class:OpenXcom::SavedGame
getRegionsList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getRegionsList() const$/;"	f	class:OpenXcom::Mod
getReinforcementsBlocks	Savegame/SavedBattleGame.h	/^	std::vector< std::vector<int> > &getReinforcementsBlocks() { return _reinforcementsBlocks; }$/;"	f	class:OpenXcom::SavedBattleGame
getReinforcementsData	Mod/AlienDeployment.cpp	/^const std::vector<ReinforcementsData>* AlienDeployment::getReinforcementsData() const$/;"	f	class:OpenXcom::AlienDeployment
getReinforcementsDeployment	Savegame/SavedBattleGame.h	/^	const std::string &getReinforcementsDeployment() const { return _reinforcementsDeployment; }$/;"	f	class:OpenXcom::SavedBattleGame
getReinforcementsItemLevel	Savegame/SavedBattleGame.h	/^	int getReinforcementsItemLevel() const { return _reinforcementsItemLevel; }$/;"	f	class:OpenXcom::SavedBattleGame
getReinforcementsMemory	Savegame/SavedBattleGame.h	/^	std::map<std::string, int> &getReinforcementsMemory() { return _reinforcementsMemory; }$/;"	f	class:OpenXcom::SavedBattleGame
getReinforcementsRace	Savegame/SavedBattleGame.h	/^	const std::string &getReinforcementsRace() const { return _reinforcementsRace; }$/;"	f	class:OpenXcom::SavedBattleGame
getRejoinedXcomEvent	Mod/RuleCountry.h	/^	const RuleEvent* getRejoinedXcomEvent() const { return _rejoinedXcomEvent; }$/;"	f	class:OpenXcom::RuleCountry
getRelativeXMouse	Engine/Action.cpp	/^double Action::getRelativeXMouse() const$/;"	f	class:OpenXcom::Action
getRelativeYMouse	Engine/Action.cpp	/^double Action::getRelativeYMouse() const$/;"	f	class:OpenXcom::Action
getReloadSound	Mod/RuleItem.cpp	/^int RuleItem::getReloadSound() const$/;"	f	class:OpenXcom::RuleItem
getReloadSound	Savegame/BattleUnit.h	/^	int getReloadSound() const { return _lastReloadSound; }$/;"	f	class:OpenXcom::BattleUnit
getReloadSoundRaw	Mod/RuleItem.h	/^	const std::vector<int> &getReloadSoundRaw() const { return _reloadSound; }$/;"	f	class:OpenXcom::RuleItem
getRemovalTime	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getRemovalTime() const$/;"	f	class:OpenXcom::RuleBaseFacility
getRentCost	Mod/RuleCraft.cpp	/^int RuleCraft::getRentCost() const$/;"	f	class:OpenXcom::RuleCraft
getRepairRate	Mod/RuleCraft.cpp	/^int RuleCraft::getRepairRate() const$/;"	f	class:OpenXcom::RuleCraft
getRepeatAvoidance	Mod/RuleMissionScript.cpp	/^int RuleMissionScript::getRepeatAvoidance() const$/;"	f	class:OpenXcom::RuleMissionScript
getReplaceBy	Mod/RuleItemCategory.cpp	/^const std::string &RuleItemCategory::getReplaceBy() const$/;"	f	class:OpenXcom::RuleItemCategory
getReplacedArmor	Savegame/Soldier.cpp	/^Armor *Soldier::getReplacedArmor() const$/;"	f	class:OpenXcom::Soldier
getReplenishHealthAfterMission	Mod/Mod.h	/^	bool getReplenishHealthAfterMission() const { return _healthReplenishAfterMission; }$/;"	f	class:OpenXcom::Mod
getReplenishManaAfterMission	Mod/Mod.h	/^	bool getReplenishManaAfterMission() const { return _manaReplenishAfterMission; }$/;"	f	class:OpenXcom::Mod
getRequireBaseFunc	Mod/RuleBaseFacility.h	/^	RuleBaseFacilityFunctions getRequireBaseFunc() const { return _requiresBaseFunc; }$/;"	f	class:OpenXcom::RuleBaseFacility
getRequireBaseFunc	Mod/RuleManufacture.h	/^	RuleBaseFacilityFunctions getRequireBaseFunc() const { return _requiresBaseFunc; }$/;"	f	class:OpenXcom::RuleManufacture
getRequireBaseFunc	Mod/RuleResearch.h	/^	RuleBaseFacilityFunctions getRequireBaseFunc() const { return _requiresBaseFunc; }$/;"	f	class:OpenXcom::RuleResearch
getRequireBaseFunc	Savegame/Base.cpp	/^RuleBaseFacilityFunctions Base::getRequireBaseFunc(BaseAreaSubset skip) const$/;"	f	class:OpenXcom::Base
getRequiredBaseFuncs	Mod/RuleSoldierTransformation.h	/^	RuleBaseFacilityFunctions getRequiredBaseFuncs() const { return _requiresBaseFunc; }$/;"	f	class:OpenXcom::RuleSoldierTransformation
getRequiredBonuses	Mod/RuleSkill.h	/^	const std::vector<const RuleSoldierBonus*>& getRequiredBonuses() const { return _requiredBonuses; }$/;"	f	class:OpenXcom::RuleSkill
getRequiredCommendations	Mod/RuleSoldierTransformation.cpp	/^const std::map<std::string, int> &RuleSoldierTransformation::getRequiredCommendations() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getRequiredCrafts	Mod/RuleManufacture.cpp	/^const std::map<const RuleCraft*, int> &RuleManufacture::getRequiredCrafts() const$/;"	f	class:OpenXcom::RuleManufacture
getRequiredExtendedEngine	Engine/ModInfo.cpp	/^const std::string &ModInfo::getRequiredExtendedEngine()  const { return _requiredExtendedEngine;  }$/;"	f	class:OpenXcom::ModInfo
getRequiredExtendedVersion	Engine/ModInfo.cpp	/^const std::string &ModInfo::getRequiredExtendedVersion() const { return _requiredExtendedVersion; }$/;"	f	class:OpenXcom::ModInfo
getRequiredItems	Mod/RuleManufacture.cpp	/^const std::map<const RuleItem*, int> &RuleManufacture::getRequiredItems() const$/;"	f	class:OpenXcom::RuleManufacture
getRequiredItems	Mod/RuleSoldierTransformation.cpp	/^const std::map<std::string, int> &RuleSoldierTransformation::getRequiredItems() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getRequiredItems	Mod/RuleStartingCondition.h	/^	const std::map<std::string, int>& getRequiredItems() const { return _requiredItems; }$/;"	f	class:OpenXcom::RuleStartingCondition
getRequiredMasterVersion	Engine/ModInfo.cpp	/^const std::string &ModInfo::getRequiredMasterVersion()   const { return _requiredMasterModVersion.first; }$/;"	f	class:OpenXcom::ModInfo
getRequiredMinStats	Mod/RuleSoldierTransformation.cpp	/^const UnitStats &RuleSoldierTransformation::getRequiredMinStats() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getRequiredPreviousTransformations	Mod/RuleSoldierTransformation.cpp	/^const std::vector<std::string > &RuleSoldierTransformation::getRequiredPreviousTransformations() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getRequiredResearch	Mod/Armor.cpp	/^const RuleResearch* Armor::getRequiredResearch() const$/;"	f	class:OpenXcom::Armor
getRequiredResearch	Mod/RuleSoldierTransformation.cpp	/^const std::vector<std::string > &RuleSoldierTransformation::getRequiredResearch() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getRequiredSpace	Mod/RuleManufacture.cpp	/^int RuleManufacture::getRequiredSpace() const$/;"	f	class:OpenXcom::RuleManufacture
getRequirements	Mod/RuleBaseFacility.cpp	/^const std::vector<std::string> &RuleBaseFacility::getRequirements() const$/;"	f	class:OpenXcom::RuleBaseFacility
getRequirements	Mod/RuleCraft.cpp	/^const std::vector<std::string> &RuleCraft::getRequirements() const$/;"	f	class:OpenXcom::RuleCraft
getRequirements	Mod/RuleItem.cpp	/^const std::vector<const RuleResearch *> &RuleItem::getRequirements() const$/;"	f	class:OpenXcom::RuleItem
getRequirements	Mod/RuleManufacture.cpp	/^const std::vector<const RuleResearch*> &RuleManufacture::getRequirements() const$/;"	f	class:OpenXcom::RuleManufacture
getRequirements	Mod/RuleResearch.cpp	/^const std::vector<const RuleResearch*> &RuleResearch::getRequirements() const$/;"	f	class:OpenXcom::RuleResearch
getRequirements	Mod/RuleSoldier.cpp	/^const std::vector<std::string> &RuleSoldier::getRequirements() const$/;"	f	class:OpenXcom::RuleSoldier
getRequiresBuyBaseFunc	Mod/RuleCraft.h	/^	RuleBaseFacilityFunctions getRequiresBuyBaseFunc() const { return _requiresBuyBaseFunc; }$/;"	f	class:OpenXcom::RuleCraft
getRequiresBuyBaseFunc	Mod/RuleItem.h	/^	RuleBaseFacilityFunctions getRequiresBuyBaseFunc() const { return _requiresBuyBaseFunc; }$/;"	f	class:OpenXcom::RuleItem
getRequiresBuyBaseFunc	Mod/RuleSoldier.h	/^	RuleBaseFacilityFunctions getRequiresBuyBaseFunc() const { return _requiresBuyBaseFunc; }$/;"	f	class:OpenXcom::RuleSoldier
getRequiresBuyCountry	Mod/RuleItem.h	/^	const std::string& getRequiresBuyCountry() const { return _requiresBuyCountry; }$/;"	f	class:OpenXcom::RuleItem
getRerollStats	Mod/RuleSoldierTransformation.h	/^	const UnitStats &getRerollStats() const { return _rerollStats; }$/;"	f	class:OpenXcom::RuleSoldierTransformation
getResearch	Mod/Mod.cpp	/^RuleResearch *Mod::getResearch(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getResearch	Mod/Mod.cpp	/^std::vector<const RuleResearch*> Mod::getResearch(const std::vector<std::string> &id) const$/;"	f	class:OpenXcom::Mod
getResearch	Mod/RuleConverter.h	/^	const std::vector<std::string> &getResearch() const { return _research; }$/;"	f	class:OpenXcom::RuleConverter
getResearch	Savegame/Base.cpp	/^const std::vector<ResearchProject *> & Base::getResearch() const$/;"	f	class:OpenXcom::Base
getResearchColor	Basescape/TechTreeViewerState.cpp	/^Uint8 TechTreeViewerState::getResearchColor(const std::string &topic) const$/;"	f	class:OpenXcom::TechTreeViewerState
getResearchList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getResearchList() const$/;"	f	class:OpenXcom::Mod
getResearchList	Mod/RuleEvent.h	/^	const std::vector<std::string> &getResearchList() const { return _researchList; }$/;"	f	class:OpenXcom::RuleEvent
getResearchMap	Mod/Mod.cpp	/^const std::map<std::string, RuleResearch *> &Mod::getResearchMap() const$/;"	f	class:OpenXcom::Mod
getResearchProgress	Savegame/ResearchProject.cpp	/^std::string ResearchProject::getResearchProgress() const$/;"	f	class:OpenXcom::ResearchProject
getResearchRuleStatusRaw	Savegame/SavedGame.h	/^	const std::map<std::string, int> &getResearchRuleStatusRaw() const { return _researchRuleStatus; }$/;"	f	class:OpenXcom::SavedGame
getResearchScores	Savegame/SavedGame.cpp	/^std::vector<int> &SavedGame::getResearchScores()$/;"	f	class:OpenXcom::SavedGame
getResearchTriggers	Mod/RuleArcScript.h	/^	const std::map<std::string, bool> &getResearchTriggers() const { return _researchTriggers; }$/;"	f	class:OpenXcom::RuleArcScript
getResearchTriggers	Mod/RuleEventScript.h	/^	const std::map<std::string, bool> &getResearchTriggers() const { return _researchTriggers; }$/;"	f	class:OpenXcom::RuleEventScript
getResearchTriggers	Mod/RuleMissionScript.cpp	/^const std::map<std::string, bool> &RuleMissionScript::getResearchTriggers() const$/;"	f	class:OpenXcom::RuleMissionScript
getReserveMode	Battlescape/AIModule.cpp	/^BattleActionType AIModule::getReserveMode()$/;"	f	class:OpenXcom::AIModule
getReservedAction	Battlescape/BattlescapeGame.cpp	/^BattleActionType BattlescapeGame::getReservedAction()$/;"	f	class:OpenXcom::BattlescapeGame
getReservedSpace	Engine/ModInfo.cpp	/^int                ModInfo::getReservedSpace()           const { return _reservedSpace;           }$/;"	f	class:OpenXcom::ModInfo
getReset	Mod/RuleSoldierTransformation.cpp	/^bool RuleSoldierTransformation::getReset() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getResistTypeScript	Mod/RuleItem.cpp	/^void getResistTypeScript(const RuleDamageType* rdt, int &ret)$/;"	f	namespace:OpenXcom::__anon21
getResourceConfigFile	Engine/ModInfo.cpp	/^const std::string &ModInfo::getResourceConfigFile()      const { return _resourceConfigFile;      }$/;"	f	class:OpenXcom::ModInfo
getRespawn	Savegame/BattleUnit.cpp	/^bool BattleUnit::getRespawn() const$/;"	f	class:OpenXcom::BattleUnit
getRetaliationAggression	Mod/AlienRace.cpp	/^int AlienRace::getRetaliationAggression() const$/;"	f	class:OpenXcom::AlienRace
getRetaliationBaseRegionOdds	Mod/Mod.h	/^	const std::vector<int>& getRetaliationBaseRegionOdds() { return _retaliationBaseRegionOdds; }$/;"	f	class:OpenXcom::Mod
getRetaliationMission	Savegame/Base.h	/^	AlienMission* getRetaliationMission() const { return _retaliationMission; }$/;"	f	class:OpenXcom::Base
getRetaliationOdds	Mod/RuleAlienMission.cpp	/^int RuleAlienMission::getRetaliationOdds() const$/;"	f	class:OpenXcom::RuleAlienMission
getRetaliationTarget	Savegame/Base.cpp	/^bool Base::getRetaliationTarget() const$/;"	f	class:OpenXcom::Base
getRetaliationTriggerOdds	Mod/Mod.h	/^	const std::vector<int>& getRetaliationTriggerOdds() { return _retaliationTriggerOdds; }$/;"	f	class:OpenXcom::Mod
getReturnToTrainingWhenHealed	Savegame/Soldier.cpp	/^bool Soldier::getReturnToTrainingWhenHealed() const$/;"	f	class:OpenXcom::Soldier
getRightClickActionType	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getRightClickActionType() const$/;"	f	class:OpenXcom::RuleBaseFacility
getRightHandWeapon	Savegame/BattleUnit.cpp	/^BattleItem *BattleUnit::getRightHandWeapon() const$/;"	f	class:OpenXcom::BattleUnit
getRightHandWeaponConstScript	Savegame/BattleUnit.cpp	/^struct getRightHandWeaponConstScript$/;"	s	namespace:OpenXcom::__anon36	file:
getRightHandWeaponScript	Savegame/BattleUnit.cpp	/^struct getRightHandWeaponScript$/;"	s	namespace:OpenXcom::__anon36	file:
getRightSideArmor	Mod/Armor.cpp	/^int Armor::getRightSideArmor() const$/;"	f	class:OpenXcom::Armor
getRightSideArmor	Mod/RuleSoldierBonus.h	/^	int getRightSideArmor() const { return _sideArmor; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getRow	Basescape/PurchaseState.h	/^	TransferRow &getRow() { return _items[_rows[_sel]]; }$/;"	f	class:OpenXcom::PurchaseState
getRow	Basescape/SellState.h	/^	TransferRow &getRow() { return _items[_rows[_sel]]; }$/;"	f	class:OpenXcom::SellState
getRow	Basescape/TransferItemsState.h	/^	TransferRow &getRow() { return _items[_rows[_sel]]; }$/;"	f	class:OpenXcom::TransferItemsState
getRowY	Interface/TextList.cpp	/^int TextList::getRowY(size_t row) const$/;"	f	class:OpenXcom::TextList
getRowsDoNotUse	Interface/TextList.cpp	/^size_t TextList::getRowsDoNotUse() const$/;"	f	class:OpenXcom::TextList
getRule	Mod/Mod.cpp	/^T *Mod::getRule(const std::string &id, const std::string &name, const std::map<std::string, T*> &map, bool error) const$/;"	f	class:OpenXcom::Mod
getRule	Savegame/SoldierDiary.h	/^	RuleCommendations* getRule() { return _rule; }$/;"	f	class:OpenXcom::SoldierCommendations
getRuleInventoryMoveToCostScript	Savegame/BattleItem.cpp	/^struct getRuleInventoryMoveToCostScript$/;"	s	namespace:OpenXcom::__anon39	file:
getRuleInventorySlotScript	Savegame/BattleItem.cpp	/^struct getRuleInventorySlotScript$/;"	s	namespace:OpenXcom::__anon39	file:
getRuleResearch	Mod/Mod.cpp	/^void getRuleResearch(const Mod* mod, const RuleResearch*& rule, const std::string& name)$/;"	f	namespace:OpenXcom::__anon30
getRuleSoldierScript	Savegame/BattleUnit.cpp	/^struct getRuleSoldierScript$/;"	s	namespace:OpenXcom::__anon36	file:
getRuleSoldierScript	Savegame/Soldier.cpp	/^struct getRuleSoldierScript$/;"	s	namespace:OpenXcom::__anon35	file:
getRules	Savegame/AlienMission.h	/^	const RuleAlienMission &getRules() const { return _rule; }$/;"	f	class:OpenXcom::AlienMission
getRules	Savegame/BaseFacility.cpp	/^const RuleBaseFacility *BaseFacility::getRules() const$/;"	f	class:OpenXcom::BaseFacility
getRules	Savegame/BattleItem.cpp	/^const RuleItem *BattleItem::getRules() const$/;"	f	class:OpenXcom::BattleItem
getRules	Savegame/Country.cpp	/^RuleCountry *Country::getRules() const$/;"	f	class:OpenXcom::Country
getRules	Savegame/Craft.cpp	/^const RuleCraft *Craft::getRules() const$/;"	f	class:OpenXcom::Craft
getRules	Savegame/CraftWeapon.cpp	/^RuleCraftWeapon *CraftWeapon::getRules() const$/;"	f	class:OpenXcom::CraftWeapon
getRules	Savegame/GeoscapeEvent.h	/^	const RuleEvent &getRules() const { return _rule; };$/;"	f	class:OpenXcom::GeoscapeEvent
getRules	Savegame/MissionSite.cpp	/^const RuleAlienMission *MissionSite::getRules() const$/;"	f	class:OpenXcom::MissionSite
getRules	Savegame/Production.cpp	/^const RuleManufacture * Production::getRules() const$/;"	f	class:OpenXcom::Production
getRules	Savegame/Region.cpp	/^RuleRegion *Region::getRules() const$/;"	f	class:OpenXcom::Region
getRules	Savegame/ResearchProject.cpp	/^const RuleResearch * ResearchProject::getRules() const$/;"	f	class:OpenXcom::ResearchProject
getRules	Savegame/Soldier.cpp	/^RuleSoldier *Soldier::getRules() const$/;"	f	class:OpenXcom::Soldier
getRules	Savegame/Ufo.cpp	/^const RuleUfo *Ufo::getRules() const$/;"	f	class:OpenXcom::Ufo
getRules	Savegame/Vehicle.cpp	/^RuleItem *Vehicle::getRules() const$/;"	f	class:OpenXcom::Vehicle
getRulesets	Engine/FileMap.cpp	/^	const std::vector<FileRecord> &getRulesets() { return rulesets; }$/;"	f	struct:OpenXcom::FileMap::VFSLayerStack
getRulesets	Engine/FileMap.cpp	/^	const std::vector<FileRecord> &getRulesets() { return stack.getRulesets(); }$/;"	f	struct:OpenXcom::FileMap::ModRecord
getRulesets	Engine/FileMap.cpp	/^const RSOrder &getRulesets() { return TheVFS.get_rulesets(); }$/;"	f	namespace:OpenXcom::FileMap
getSalaryCost	Mod/RuleSoldier.cpp	/^int RuleSoldier::getSalaryCost(int rank) const$/;"	f	class:OpenXcom::RuleSoldier
getSatisfaction	Savegame/Country.cpp	/^int Country::getSatisfaction() const$/;"	f	class:OpenXcom::Country
getSave	Battlescape/BattlescapeGame.cpp	/^SavedBattleGame *BattlescapeGame::getSave()$/;"	f	class:OpenXcom::BattlescapeGame
getSaveInfo	Savegame/SavedGame.cpp	/^SaveInfo SavedGame::getSaveInfo(const std::string &file, Language *lang)$/;"	f	class:OpenXcom::SavedGame
getSavedBattle	Savegame/SavedGame.cpp	/^SavedBattleGame *SavedGame::getSavedBattle()$/;"	f	class:OpenXcom::SavedGame
getSavedGame	Engine/Game.h	/^	SavedGame *getSavedGame() const { return _save; }$/;"	f	class:OpenXcom::Game
getSavedGame	Savegame/Tile.h	/^	SavedBattleGame* getSavedGame() { return _save; }$/;"	f	class:OpenXcom::Tile
getSavedGame	Savegame/Tile.h	/^	const SavedBattleGame* getSavedGame() const { return _save; }$/;"	f	class:OpenXcom::Tile
getSavedVIPs	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getSavedVIPs() const$/;"	f	class:OpenXcom::SavedBattleGame
getSavedVIPsScore	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getSavedVIPsScore() const$/;"	f	class:OpenXcom::SavedBattleGame
getScale	Interface/Bar.cpp	/^double Bar::getScale() const$/;"	f	class:OpenXcom::Bar
getScannedTurn	Savegame/BattleUnit.h	/^	int getScannedTurn() const { return _scannedTurn; }$/;"	f	class:OpenXcom::BattleUnit
getScientistCost	Mod/Mod.cpp	/^int Mod::getScientistCost() const$/;"	f	class:OpenXcom::Mod
getScientists	Savegame/Base.cpp	/^int Base::getScientists() const$/;"	f	class:OpenXcom::Base
getScorchedEarthTile	Mod/MapDataSet.cpp	/^MapData *MapDataSet::getScorchedEarthTile()$/;"	f	class:OpenXcom::MapDataSet
getScore	Mod/RuleCraft.cpp	/^int RuleCraft::getScore() const$/;"	f	class:OpenXcom::RuleCraft
getScore	Mod/RuleUfo.cpp	/^int RuleUfo::getScore() const$/;"	f	class:OpenXcom::RuleUfo
getScoreTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getScoreTotal(std::vector<MissionStatistics*> *missionStatistics) const$/;"	f	class:OpenXcom::SoldierDiary
getScreen	Engine/Game.h	/^	Screen *getScreen() const { return _screen; }$/;"	f	class:OpenXcom::Game
getScript	Mod/Armor.h	/^	const typename Script::Container &getScript() const { return _battleUnitScripts.get<Script>(); }$/;"	f	class:OpenXcom::Armor
getScript	Mod/RuleCraft.h	/^	const typename Script::Container &getScript() const { return _craftScripts.get<Script>(); }$/;"	f	class:OpenXcom::RuleCraft
getScript	Mod/RuleItem.h	/^	const typename Script::Container &getScript() const { return _battleItemScripts.get<Script>(); }$/;"	f	class:OpenXcom::RuleItem
getScript	Mod/RuleSkill.h	/^	const typename Script::Container& getScript() const { return _skillScripts.get<Script>(); }$/;"	f	class:OpenXcom::RuleSkill
getScript	Mod/RuleSoldierBonus.h	/^	const typename Script::Container &getScript() const { return _soldierBonusScripts.get<Script>(); }$/;"	f	class:OpenXcom::RuleSoldierBonus
getScript	Mod/RuleUfo.h	/^	const typename Script::Container &getScript() const { return _ufoScripts.get<Script>(); }$/;"	f	class:OpenXcom::RuleUfo
getScriptGlobal	Mod/Mod.cpp	/^ScriptGlobal *Mod::getScriptGlobal() const$/;"	f	class:OpenXcom::Mod
getScriptValues	Mod/Mod.cpp	/^	ScriptValues<Mod>& getScriptValues() { return _scriptValues; }$/;"	f	class:OpenXcom::ModScriptGlobal
getScriptValuesRaw	Mod/Armor.h	/^	const ScriptValues<Armor> &getScriptValuesRaw() const { return _scriptValues; }$/;"	f	class:OpenXcom::Armor
getScriptValuesRaw	Mod/RuleCraft.h	/^	const ScriptValues<RuleCraft>& getScriptValuesRaw() const { return _scriptValues; }$/;"	f	class:OpenXcom::RuleCraft
getScriptValuesRaw	Mod/RuleItem.h	/^	const ScriptValues<RuleItem> &getScriptValuesRaw() const { return _scriptValues; }$/;"	f	class:OpenXcom::RuleItem
getScriptValuesRaw	Mod/RuleSkill.h	/^	const ScriptValues<RuleSkill>& getScriptValuesRaw() const { return _scriptValues; }$/;"	f	class:OpenXcom::RuleSkill
getScriptValuesRaw	Mod/RuleSoldier.h	/^	const ScriptValues<RuleSoldier> &getScriptValuesRaw() const { return _scriptValues; }$/;"	f	class:OpenXcom::RuleSoldier
getScriptValuesRaw	Mod/RuleSoldierBonus.h	/^	const ScriptValues<RuleSoldierBonus> &getScriptValuesRaw() const { return _scriptValues; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getScriptValuesRaw	Mod/RuleUfo.h	/^	const ScriptValues<RuleUfo> &getScriptValuesRaw() const { return _scriptValues; }$/;"	f	class:OpenXcom::RuleUfo
getScroll	Interface/TextList.cpp	/^size_t TextList::getScroll()$/;"	f	class:OpenXcom::TextList
getScrollbarColor	Interface/TextList.cpp	/^int TextList::getScrollbarColor()$/;"	f	class:OpenXcom::TextList
getSecond	Savegame/GameTime.cpp	/^int GameTime::getSecond() const$/;"	f	class:OpenXcom::GameTime
getSecondaryColor	Interface/Bar.cpp	/^Uint8 Bar::getSecondaryColor() const$/;"	f	class:OpenXcom::Bar
getSecondaryColor	Interface/Frame.cpp	/^Uint8 Frame::getSecondaryColor() const$/;"	f	class:OpenXcom::Frame
getSecondaryColor	Interface/Text.cpp	/^Uint8 Text::getSecondaryColor() const$/;"	f	class:OpenXcom::Text
getSecondaryColor	Interface/TextEdit.cpp	/^Uint8 TextEdit::getSecondaryColor() const$/;"	f	class:OpenXcom::TextEdit
getSecondaryColor	Interface/TextList.cpp	/^Uint8 TextList::getSecondaryColor() const$/;"	f	class:OpenXcom::TextList
getSecondsPastMidnightScript	Savegame/SavedGame.cpp	/^void getSecondsPastMidnightScript(const GameTime* p, int& val)$/;"	f	namespace:OpenXcom::__anon42
getSecondsRemaining	Savegame/MissionSite.cpp	/^size_t MissionSite::getSecondsRemaining() const$/;"	f	class:OpenXcom::MissionSite
getSecondsRemaining	Savegame/Ufo.cpp	/^size_t Ufo::getSecondsRemaining() const$/;"	f	class:OpenXcom::Ufo
getSeed	Engine/RNG.cpp	/^uint64_t RandomState::getSeed() const$/;"	f	class:OpenXcom::RNG::RandomState
getSeed	Engine/RNG.cpp	/^uint64_t getSeed()$/;"	f	namespace:OpenXcom::RNG
getSegment	Savegame/Node.cpp	/^int Node::getSegment() const$/;"	f	class:OpenXcom::Node
getSelectBaseSounds	Mod/Mod.h	/^	const std::vector<int> &getSelectBaseSounds() const { return _selectBaseSound; }$/;"	f	class:OpenXcom::Mod
getSelectSound	Mod/RuleCraft.cpp	/^int RuleCraft::getSelectSound() const$/;"	f	class:OpenXcom::RuleCraft
getSelectSoundRaw	Mod/RuleCraft.h	/^	const std::vector<int>& getSelectSoundRaw() const { return _selectSound; }$/;"	f	class:OpenXcom::RuleCraft
getSelectUnitSounds	Mod/Mod.h	/^	const std::map<std::string, std::vector<int> > &getSelectUnitSounds() const { return _selectUnitSound; }$/;"	f	class:OpenXcom::Mod
getSelectUnitSounds	Mod/Unit.h	/^	const std::vector<int> &getSelectUnitSounds() const { return _selectUnitSound; }$/;"	f	class:OpenXcom::Unit
getSelectUnitSounds	Savegame/BattleUnit.h	/^	const std::vector<int> &getSelectUnitSounds() const { return _selectUnitSound; }$/;"	f	class:OpenXcom::BattleUnit
getSelectWeaponSounds	Mod/Mod.h	/^	const std::map<std::string, std::vector<int> > &getSelectWeaponSounds() const { return _selectWeaponSound; }$/;"	f	class:OpenXcom::Mod
getSelectWeaponSounds	Mod/Unit.h	/^	const std::vector<int> &getSelectWeaponSounds() const { return _selectWeaponSound; }$/;"	f	class:OpenXcom::Unit
getSelectWeaponSounds	Savegame/BattleUnit.h	/^	const std::vector<int> &getSelectWeaponSounds() const { return _selectWeaponSound; }$/;"	f	class:OpenXcom::BattleUnit
getSelected	Interface/ComboBox.cpp	/^size_t ComboBox::getSelected() const$/;"	f	class:OpenXcom::ComboBox
getSelectedBase	Savegame/SavedGame.cpp	/^Base *SavedGame::getSelectedBase()$/;"	f	class:OpenXcom::SavedGame
getSelectedFacility	Basescape/BaseView.cpp	/^BaseFacility *BaseView::getSelectedFacility() const$/;"	f	class:OpenXcom::BaseView
getSelectedItem	Battlescape/Inventory.cpp	/^BattleItem *Inventory::getSelectedItem() const$/;"	f	class:OpenXcom::Inventory
getSelectedPart	Battlescape/MedikitView.cpp	/^int MedikitView::getSelectedPart() const$/;"	f	class:OpenXcom::MedikitView
getSelectedRow	Interface/TextList.cpp	/^unsigned int TextList::getSelectedRow() const$/;"	f	class:OpenXcom::TextList
getSelectedUnit	Battlescape/AlienInventory.cpp	/^BattleUnit *AlienInventory::getSelectedUnit() const$/;"	f	class:OpenXcom::AlienInventory
getSelectedUnit	Battlescape/Inventory.cpp	/^BattleUnit *Inventory::getSelectedUnit() const$/;"	f	class:OpenXcom::Inventory
getSelectedUnit	Savegame/SavedBattleGame.cpp	/^BattleUnit *SavedBattleGame::getSelectedUnit() const$/;"	f	class:OpenXcom::SavedBattleGame
getSelectorPosition	Battlescape/Map.cpp	/^void Map::getSelectorPosition(Position *pos) const$/;"	f	class:OpenXcom::Map
getSellCost	Mod/RuleCraft.cpp	/^int RuleCraft::getSellCost() const$/;"	f	class:OpenXcom::RuleCraft
getSellCost	Mod/RuleItem.cpp	/^int RuleItem::getSellCost() const$/;"	f	class:OpenXcom::RuleItem
getSellItems	Savegame/Production.cpp	/^bool Production::getSellItems() const$/;"	f	class:OpenXcom::Production
getSellPriceCoefficient	Savegame/SavedGame.cpp	/^int SavedGame::getSellPriceCoefficient() const$/;"	f	class:OpenXcom::SavedGame
getSender	Engine/Action.cpp	/^InteractiveSurface *Action::getSender() const$/;"	f	class:OpenXcom::Action
getSequentialArcs	Mod/RuleArcScript.h	/^	const std::vector<std::string> &getSequentialArcs() const { return _sequentialArcs; }$/;"	f	class:OpenXcom::RuleArcScript
getSetting	Menu/OptionsAdvancedState.cpp	/^OptionInfo *OptionsAdvancedState::getSetting(size_t sel)$/;"	f	class:OpenXcom::OptionsAdvancedState
getShade	Mod/AlienDeployment.cpp	/^int AlienDeployment::getShade() const$/;"	f	class:OpenXcom::AlienDeployment
getShade	Savegame/Tile.cpp	/^int Tile::getShade() const$/;"	f	class:OpenXcom::Tile
getShadePulseForFrame	Battlescape/Map.cpp	/^int getShadePulseForFrame(int shade, int frame)$/;"	f	namespace:OpenXcom::__anon46
getShadowValue	Geoscape/Globe.cpp	/^	static inline Uint8 getShadowValue(const Cord& earth, const Cord& sun, const Sint16& noise)$/;"	f	struct:OpenXcom::__anon49::CreateShadow
getShareAmmoCategories	Mod/Mod.h	/^	bool getShareAmmoCategories() const { return _shareAmmoCategories; }$/;"	f	class:OpenXcom::Mod
getShared	Mod/ModScript.h	/^	const ScriptGlobal* getShared() const$/;"	f	class:OpenXcom::ModScript
getShield	Savegame/Craft.cpp	/^int Craft::getShield() const$/;"	f	class:OpenXcom::Craft
getShield	Savegame/Ufo.cpp	/^int Ufo::getShield() const$/;"	f	class:OpenXcom::Ufo
getShieldCapacity	Savegame/Craft.cpp	/^int Craft::getShieldCapacity() const$/;"	f	class:OpenXcom::Craft
getShieldDamageModifier	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getShieldDamageModifier() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getShieldDamageModifier	Savegame/CraftWeaponProjectile.cpp	/^int CraftWeaponProjectile::getShieldDamageModifier() const$/;"	f	class:OpenXcom::CraftWeaponProjectile
getShieldPercentage	Savegame/Craft.cpp	/^int Craft::getShieldPercentage() const$/;"	f	class:OpenXcom::Craft
getShieldPercentage	Savegame/Ufo.cpp	/^int Ufo::getShieldPercentage() const$/;"	f	class:OpenXcom::Ufo
getShieldRechargeAtBase	Mod/RuleCraft.cpp	/^int RuleCraft::getShieldRechargeAtBase() const$/;"	f	class:OpenXcom::RuleCraft
getShieldRechargeHandle	Savegame/Ufo.cpp	/^int Ufo::getShieldRechargeHandle() const$/;"	f	class:OpenXcom::Ufo
getShiftPressedFlag	Engine/Game.h	/^	bool getShiftPressedFlag() const { return _shift; }$/;"	f	class:OpenXcom::Game
getShootingAt	Savegame/Ufo.cpp	/^int Ufo::getShootingAt() const$/;"	f	class:OpenXcom::Ufo
getShortRadarRange	Mod/Mod.cpp	/^ int Mod::getShortRadarRange() const$/;"	f	class:OpenXcom::Mod
getShortRangeDetection	Savegame/Base.cpp	/^int Base::getShortRangeDetection() const$/;"	f	class:OpenXcom::Base
getShotDownByCraftId	Savegame/Ufo.cpp	/^CraftId Ufo::getShotDownByCraftId() const$/;"	f	class:OpenXcom::Ufo
getShotgunBehaviorType	Mod/RuleItem.cpp	/^int RuleItem::getShotgunBehaviorType() const$/;"	f	class:OpenXcom::RuleItem
getShotgunChoke	Mod/RuleItem.cpp	/^int RuleItem::getShotgunChoke() const$/;"	f	class:OpenXcom::RuleItem
getShotgunPellets	Mod/RuleItem.cpp	/^int RuleItem::getShotgunPellets() const$/;"	f	class:OpenXcom::RuleItem
getShotgunSpread	Mod/RuleItem.cpp	/^int RuleItem::getShotgunSpread() const$/;"	f	class:OpenXcom::RuleItem
getShotsFiredTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getShotsFiredTotal() const$/;"	f	class:OpenXcom::SoldierDiary
getShotsLandedTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getShotsLandedTotal() const$/;"	f	class:OpenXcom::SoldierDiary
getShowAllLayers	Battlescape/Camera.cpp	/^bool Camera::getShowAllLayers() const$/;"	f	class:OpenXcom::Camera
getShowDogfightDistanceInKm	Mod/Mod.h	/^	bool getShowDogfightDistanceInKm() const { return _showDogfightDistanceInKm; }$/;"	f	class:OpenXcom::Mod
getShowFullNameInAlienInventory	Mod/Mod.h	/^	bool getShowFullNameInAlienInventory() const { return _showFullNameInAlienInventory; }$/;"	f	class:OpenXcom::Mod
getShowFullNameInAlienInventory	Mod/Unit.cpp	/^bool Unit::getShowFullNameInAlienInventory(Mod *mod) const$/;"	f	class:OpenXcom::Unit
getShowMinMax	Mod/RuleSoldierTransformation.h	/^	bool getShowMinMax() const { return _showMinMax; }$/;"	f	class:OpenXcom::RuleSoldierTransformation
getShowPediaInfoButton	Mod/Mod.h	/^	bool getShowPediaInfoButton() const { return !_hidePediaInfoButton; }$/;"	f	class:OpenXcom::Mod
getShowTypeInInventory	Mod/RuleSoldier.h	/^	bool getShowTypeInInventory() const { return _showTypeInInventory; }$/;"	f	class:OpenXcom::RuleSoldier
getSickBayAbsoluteBonus	Mod/RuleBaseFacility.h	/^	float getSickBayAbsoluteBonus() const { return _sickBayAbsoluteBonus; }$/;"	f	class:OpenXcom::RuleBaseFacility
getSickBayRelativeBonus	Mod/RuleBaseFacility.h	/^	float getSickBayRelativeBonus() const { return _sickBayRelativeBonus; }$/;"	f	class:OpenXcom::RuleBaseFacility
getSide	Savegame/SavedBattleGame.cpp	/^UnitFaction SavedBattleGame::getSide() const$/;"	f	class:OpenXcom::SavedBattleGame
getSightChance	Mod/RuleBaseFacility.h	/^	int getSightChance() const { return _sightChance; }$/;"	f	class:OpenXcom::RuleBaseFacility
getSightOriginVoxel	Battlescape/TileEngine.cpp	/^Position TileEngine::getSightOriginVoxel(BattleUnit *currentUnit)$/;"	f	class:OpenXcom::TileEngine
getSightRange	Mod/RuleBaseFacility.h	/^	int getSightRange() const { return _sightRange; }$/;"	f	class:OpenXcom::RuleBaseFacility
getSightRange	Mod/RuleCraft.cpp	/^int RuleCraft::getSightRange() const$/;"	f	class:OpenXcom::RuleCraft
getSignedPactEvent	Mod/RuleCountry.h	/^	const RuleEvent* getSignedPactEvent() const { return _signedPactEvent; }$/;"	f	class:OpenXcom::RuleCountry
getSingleImage	Mod/ExtraSprites.cpp	/^bool ExtraSprites::getSingleImage() const$/;"	f	class:OpenXcom::ExtraSprites
getSiteType	Mod/RuleAlienMission.h	/^	std::string getSiteType() const { return _siteType; }$/;"	f	class:OpenXcom::RuleAlienMission
getSiteType	Mod/RuleMissionScript.cpp	/^bool RuleMissionScript::getSiteType() const$/;"	f	class:OpenXcom::RuleMissionScript
getSize	Battlescape/Particle.h	/^	int getSize() const { return _size; }$/;"	f	class:OpenXcom::Particle
getSize	Mod/Armor.cpp	/^int Armor::getSize() const$/;"	f	class:OpenXcom::Armor
getSize	Mod/MapDataSet.cpp	/^size_t MapDataSet::getSize() const$/;"	f	class:OpenXcom::MapDataSet
getSize	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getSize() const$/;"	f	class:OpenXcom::RuleBaseFacility
getSize	Mod/RuleItem.cpp	/^double RuleItem::getSize() const$/;"	f	class:OpenXcom::RuleItem
getSize	Mod/RuleUfo.cpp	/^const std::string &RuleUfo::getSize() const$/;"	f	class:OpenXcom::RuleUfo
getSizeX	Mod/MapBlock.cpp	/^int MapBlock::getSizeX() const$/;"	f	class:OpenXcom::MapBlock
getSizeX	Mod/MapScript.h	/^	int getSizeX() const {return _sizeX;};$/;"	f	class:OpenXcom::MapScript
getSizeY	Mod/MapBlock.cpp	/^int MapBlock::getSizeY() const$/;"	f	class:OpenXcom::MapBlock
getSizeY	Mod/MapScript.h	/^	int getSizeY() const {return _sizeY;};$/;"	f	class:OpenXcom::MapScript
getSizeZ	Mod/MapBlock.cpp	/^int MapBlock::getSizeZ() const$/;"	f	class:OpenXcom::MapBlock
getSizeZ	Mod/MapScript.h	/^	int getSizeZ() const {return _sizeZ;};$/;"	f	class:OpenXcom::MapScript
getSkill	Battlescape/ActionMenuItem.cpp	/^const RuleSkill* ActionMenuItem::getSkill() const$/;"	f	class:OpenXcom::ActionMenuItem
getSkill	Mod/Mod.cpp	/^RuleSkill *Mod::getSkill(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getSkillIconSprite	Mod/RuleSoldier.cpp	/^int RuleSoldier::getSkillIconSprite() const$/;"	f	class:OpenXcom::RuleSoldier
getSkillScript	Mod/Mod.cpp	/^void getSkillScript(const Mod* mod, const RuleSkill* &skill, const std::string &name)$/;"	f	namespace:OpenXcom::__anon30
getSkills	Mod/RuleSoldier.cpp	/^const std::vector<const RuleSkill*> &RuleSoldier::getSkills() const$/;"	f	class:OpenXcom::RuleSoldier
getSkinIndex	Savegame/Craft.h	/^	int getSkinIndex() const { return _skinIndex; }$/;"	f	class:OpenXcom::Craft
getSkinSprite	Savegame/Craft.cpp	/^int Craft::getSkinSprite() const$/;"	f	class:OpenXcom::Craft
getSkinSpritesRaw	Mod/RuleCraft.h	/^	const std::vector<int> &getSkinSpritesRaw() const { return _skinSprites; }$/;"	f	class:OpenXcom::RuleCraft
getSlice	Engine/FileMap.cpp	/^const std::vector<const FileRecord *> getSlice(const std::string &relativeFilePath) {$/;"	f	namespace:OpenXcom::FileMap
getSlides	Mod/RuleVideo.cpp	/^const std::vector<SlideshowSlide> * RuleVideo::getSlides() const$/;"	f	class:OpenXcom::RuleVideo
getSlideshowHeader	Mod/RuleVideo.cpp	/^const SlideshowHeader & RuleVideo::getSlideshowHeader() const$/;"	f	class:OpenXcom::RuleVideo
getSlot	Savegame/BattleItem.cpp	/^const RuleInventory *BattleItem::getSlot() const$/;"	f	class:OpenXcom::BattleItem
getSlot	Savegame/EquipmentLayoutItem.cpp	/^const std::string& EquipmentLayoutItem::getSlot() const$/;"	f	class:OpenXcom::EquipmentLayoutItem
getSlotForAmmo	Mod/RuleItem.cpp	/^int RuleItem::getSlotForAmmo(const RuleItem* type) const$/;"	f	class:OpenXcom::RuleItem
getSlotInPosition	Battlescape/AlienInventory.cpp	/^RuleInventory *AlienInventory::getSlotInPosition(int *x, int *y) const$/;"	f	class:OpenXcom::AlienInventory
getSlotInPosition	Battlescape/Inventory.cpp	/^RuleInventory *Inventory::getSlotInPosition(int *x, int *y) const$/;"	f	class:OpenXcom::Inventory
getSlotX	Savegame/BattleItem.cpp	/^int BattleItem::getSlotX() const$/;"	f	class:OpenXcom::BattleItem
getSlotX	Savegame/EquipmentLayoutItem.cpp	/^int EquipmentLayoutItem::getSlotX() const$/;"	f	class:OpenXcom::EquipmentLayoutItem
getSlotY	Savegame/BattleItem.cpp	/^int BattleItem::getSlotY() const$/;"	f	class:OpenXcom::BattleItem
getSlotY	Savegame/EquipmentLayoutItem.cpp	/^int EquipmentLayoutItem::getSlotY() const$/;"	f	class:OpenXcom::EquipmentLayoutItem
getSlots	Mod/RuleInventory.cpp	/^std::vector<struct RuleSlot> *RuleInventory::getSlots()$/;"	f	class:OpenXcom::RuleInventory
getSmoke	Battlescape/TileEngine.cpp	/^bool getSmoke(const T& td)$/;"	f	namespace:OpenXcom::__anon45
getSmoke	Savegame/Tile.cpp	/^int Tile::getSmoke() const$/;"	f	class:OpenXcom::Tile
getSmokeReduction	Mod/Mod.cpp	/^void getSmokeReduction(const Mod *m, int &smoke)$/;"	f	namespace:OpenXcom::__anon30
getSnapRange	Mod/RuleItem.cpp	/^int RuleItem::getSnapRange() const$/;"	f	class:OpenXcom::RuleItem
getSniperPercentage	Mod/Unit.cpp	/^int Unit::getSniperPercentage() const$/;"	f	class:OpenXcom::Unit
getSoftlockShotCounter	Savegame/Ufo.h	/^	int getSoftlockShotCounter() const { return _softlockShotCounter; }$/;"	f	class:OpenXcom::Ufo
getSoftlockThreshold	Mod/RuleUfo.h	/^	int getSoftlockThreshold() const { return _softlockThreshold; }$/;"	f	class:OpenXcom::RuleUfo
getSoldier	Mod/Mod.cpp	/^RuleSoldier *Mod::getSoldier(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getSoldier	Savegame/SavedGame.cpp	/^Soldier *SavedGame::getSoldier(int id) const$/;"	f	class:OpenXcom::SavedGame
getSoldier	Savegame/Transfer.cpp	/^Soldier *Transfer::getSoldier()$/;"	f	class:OpenXcom::Transfer
getSoldierBonus	Mod/Mod.cpp	/^RuleSoldierBonus *Mod::getSoldierBonus(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getSoldierBonus	Mod/RuleCommendations.cpp	/^const RuleSoldierBonus *RuleCommendations::getSoldierBonus(int decorationLevel) const$/;"	f	class:OpenXcom::RuleCommendations
getSoldierBonusList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getSoldierBonusList() const$/;"	f	class:OpenXcom::Mod
getSoldierBonusType	Mod/RuleSoldierTransformation.cpp	/^const std::string &RuleSoldierTransformation::getSoldierBonusType() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getSoldierCommendations	Savegame/SoldierDiary.cpp	/^std::vector<SoldierCommendations*> *SoldierDiary::getSoldierCommendations()$/;"	f	class:OpenXcom::SoldierDiary
getSoldierCountAndSalary	Savegame/Base.cpp	/^std::pair<int, int> Base::getSoldierCountAndSalary(const std::string &soldier) const$/;"	f	class:OpenXcom::Base
getSoldierIdleDays	Savegame/SavedGame.cpp	/^int SavedGame::getSoldierIdleDays(Soldier *soldier)$/;"	f	class:OpenXcom::SavedGame
getSoldierItems	Savegame/Craft.cpp	/^ItemContainer* Craft::getSoldierItems()$/;"	f	class:OpenXcom::Craft
getSoldierScore	Savegame/SavedGame.cpp	/^int SavedGame::getSoldierScore(Soldier *soldier)$/;"	f	class:OpenXcom::SavedGame
getSoldierScript	Mod/Mod.cpp	/^void getSoldierScript(const Mod* mod, const RuleSoldier* &soldier, const std::string &name)$/;"	f	namespace:OpenXcom::__anon30
getSoldierTransformation	Mod/Mod.cpp	/^RuleSoldierTransformation *Mod::getSoldierTransformation (const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getSoldierTransformationList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getSoldierTransformationList() const$/;"	f	class:OpenXcom::Mod
getSoldierTypeTriggers	Mod/RuleEventScript.h	/^	const std::map<std::string, bool> &getSoldierTypeTriggers() const { return _soldierTypeTriggers; }$/;"	f	class:OpenXcom::RuleEventScript
getSoldiers	Savegame/Base.cpp	/^std::vector<Soldier*> *Base::getSoldiers()$/;"	f	class:OpenXcom::Base
getSoldiersList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getSoldiersList() const$/;"	f	class:OpenXcom::Mod
getSoldiersPerCaptain	Mod/Mod.h	/^	int getSoldiersPerCaptain() const { return _soldiersPerCaptain; }$/;"	f	class:OpenXcom::Mod
getSoldiersPerColonel	Mod/Mod.h	/^	int getSoldiersPerColonel() const { return _soldiersPerColonel; }$/;"	f	class:OpenXcom::Mod
getSoldiersPerCommander	Mod/Mod.h	/^	int getSoldiersPerCommander() const { return _soldiersPerCommander; }$/;"	f	class:OpenXcom::Mod
getSoldiersPerSergeant	Mod/Mod.h	/^	int getSoldiersPerSergeant() const { return _soldiersPerSergeant; }$/;"	f	class:OpenXcom::Mod
getSound	Engine/SoundSet.cpp	/^Sound *SoundSet::getSound(int i)$/;"	f	class:OpenXcom::SoundSet
getSound	Mod/Mod.cpp	/^Sound *Mod::getSound(const std::string &set, int sound) const$/;"	f	class:OpenXcom::Mod
getSound	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getSound() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getSound	Mod/RuleInterface.cpp	/^int RuleInterface::getSound() const$/;"	f	class:OpenXcom::RuleInterface
getSoundAngle	Battlescape/Map.cpp	/^int Map::getSoundAngle(const Position& pos) const$/;"	f	class:OpenXcom::Map
getSoundByDepth	Mod/Mod.cpp	/^Sound *Mod::getSoundByDepth(unsigned int depth, unsigned int sound) const$/;"	f	class:OpenXcom::Mod
getSoundDefinitions	Mod/Mod.cpp	/^const std::map<std::string, SoundDefinition *> *Mod::getSoundDefinitions() const$/;"	f	class:OpenXcom::Mod
getSoundList	Mod/SoundDefinition.cpp	/^const std::vector<int> &SoundDefinition::getSoundList() const$/;"	f	class:OpenXcom::SoundDefinition
getSoundSet	Mod/Mod.cpp	/^SoundSet *Mod::getSoundSet(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getSounds	Mod/ExtraSounds.cpp	/^std::map<int, std::string> *ExtraSounds::getSounds()$/;"	f	class:OpenXcom::ExtraSounds
getSpaceAvailable	Savegame/Craft.cpp	/^int Craft::getSpaceAvailable() const$/;"	f	class:OpenXcom::Craft
getSpaceUsed	Savegame/Craft.cpp	/^int Craft::getSpaceUsed() const$/;"	f	class:OpenXcom::Craft
getSpacecraft	Mod/RuleCraft.cpp	/^bool RuleCraft::getSpacecraft() const$/;"	f	class:OpenXcom::RuleCraft
getSpacing	Engine/Font.cpp	/^int Font::getSpacing() const$/;"	f	class:OpenXcom::Font
getSpawnCountdown	Savegame/GeoscapeEvent.h	/^	size_t getSpawnCountdown() const { return _spawnCountdown; }$/;"	f	class:OpenXcom::GeoscapeEvent
getSpawnNode	Savegame/SavedBattleGame.cpp	/^Node *SavedBattleGame::getSpawnNode(int nodeRank, BattleUnit *unit)$/;"	f	class:OpenXcom::SavedBattleGame
getSpawnUfo	Mod/RuleAlienMission.h	/^	const std::string &getSpawnUfo() const { return _spawnUfo; }$/;"	f	class:OpenXcom::RuleAlienMission
getSpawnUnit	Mod/RuleItem.cpp	/^const std::string &RuleItem::getSpawnUnit() const$/;"	f	class:OpenXcom::RuleItem
getSpawnUnit	Mod/Unit.cpp	/^const Unit *Unit::getSpawnUnit() const$/;"	f	class:OpenXcom::Unit
getSpawnUnit	Savegame/BattleUnit.cpp	/^const Unit *BattleUnit::getSpawnUnit() const$/;"	f	class:OpenXcom::BattleUnit
getSpawnUnitFaction	Mod/RuleItem.cpp	/^int RuleItem::getSpawnUnitFaction() const$/;"	f	class:OpenXcom::RuleItem
getSpawnUnitFaction	Savegame/BattleUnit.h	/^	UnitFaction getSpawnUnitFaction() const { return _spawnUnitFaction; }$/;"	f	class:OpenXcom::BattleUnit
getSpawnUnitFactionScript	Savegame/BattleUnit.cpp	/^void getSpawnUnitFactionScript(BattleUnit *bu, int& faction)$/;"	f	namespace:OpenXcom::__anon36
getSpawnUnitInstantRespawnScript	Savegame/BattleUnit.cpp	/^void getSpawnUnitInstantRespawnScript(BattleUnit *bu, int& respawn)$/;"	f	namespace:OpenXcom::__anon36
getSpawnUnitScript	Savegame/BattleUnit.cpp	/^void getSpawnUnitScript(BattleUnit *bu, const Unit*& unitType)$/;"	f	namespace:OpenXcom::__anon36
getSpawnZone	Mod/RuleAlienMission.h	/^	int getSpawnZone() const { return _spawnZone; }$/;"	f	class:OpenXcom::RuleAlienMission
getSpawnedEvent	Mod/RuleResearch.h	/^	const std::string& getSpawnedEvent() const { return _spawnedEvent; }$/;"	f	class:OpenXcom::RuleResearch
getSpawnedItem	Mod/RuleResearch.cpp	/^const std::string & RuleResearch::getSpawnedItem() const$/;"	f	class:OpenXcom::RuleResearch
getSpawnedItemCount	Mod/RuleResearch.h	/^	int getSpawnedItemCount() const { return _spawnedItemCount; }$/;"	f	class:OpenXcom::RuleResearch
getSpawnedItemList	Mod/RuleResearch.h	/^	const std::vector<std::string>& getSpawnedItemList() const { return _spawnedItemList; }$/;"	f	class:OpenXcom::RuleResearch
getSpawnedPersonName	Mod/RuleEvent.h	/^	const std::string& getSpawnedPersonName() const { return _spawnedPersonName; }$/;"	f	class:OpenXcom::RuleEvent
getSpawnedPersonName	Mod/RuleManufacture.cpp	/^const std::string &RuleManufacture::getSpawnedPersonName() const$/;"	f	class:OpenXcom::RuleManufacture
getSpawnedPersonName	Mod/Unit.h	/^	const std::string &getSpawnedPersonName() const { return _spawnedPersonName; }$/;"	f	class:OpenXcom::Unit
getSpawnedPersonType	Mod/RuleEvent.h	/^	const std::string& getSpawnedPersonType() const { return _spawnedPersonType; }$/;"	f	class:OpenXcom::RuleEvent
getSpawnedPersonType	Mod/RuleManufacture.cpp	/^const std::string &RuleManufacture::getSpawnedPersonType() const$/;"	f	class:OpenXcom::RuleManufacture
getSpawnedPersons	Mod/RuleEvent.h	/^	int getSpawnedPersons() const { return _spawnedPersons; }$/;"	f	class:OpenXcom::RuleEvent
getSpawnedSoldierTemplate	Mod/RuleEvent.h	/^	const YAML::Node& getSpawnedSoldierTemplate() const { return _spawnedSoldier; }$/;"	f	class:OpenXcom::RuleEvent
getSpawnedSoldierTemplate	Mod/RuleManufacture.h	/^	const YAML::Node& getSpawnedSoldierTemplate() const { return _spawnedSoldier; }$/;"	f	class:OpenXcom::RuleManufacture
getSpawnedSoldierTemplate	Mod/Unit.h	/^	const YAML::Node &getSpawnedSoldierTemplate() const { return _spawnedSoldier; }$/;"	f	class:OpenXcom::Unit
getSpecialAbility	Mod/Armor.cpp	/^int Armor::getSpecialAbility() const$/;"	f	class:OpenXcom::Armor
getSpecialAbility	Mod/Unit.cpp	/^int Unit::getSpecialAbility() const$/;"	f	class:OpenXcom::Unit
getSpecialAbility	Savegame/BattleUnit.cpp	/^int BattleUnit::getSpecialAbility() const$/;"	f	class:OpenXcom::BattleUnit
getSpecialChance	Mod/RuleItem.cpp	/^int RuleItem::getSpecialChance() const$/;"	f	class:OpenXcom::RuleItem
getSpecialIconSprite	Mod/RuleItem.cpp	/^int RuleItem::getSpecialIconSprite() const$/;"	f	class:OpenXcom::RuleItem
getSpecialIconWeapon	Savegame/BattleUnit.cpp	/^BattleItem *BattleUnit::getSpecialIconWeapon(BattleType &type) const$/;"	f	class:OpenXcom::BattleUnit
getSpecialType	Mod/MapData.cpp	/^SpecialTileType MapData::getSpecialType() const$/;"	f	class:OpenXcom::MapData
getSpecialType	Mod/RuleItem.cpp	/^int RuleItem::getSpecialType() const$/;"	f	class:OpenXcom::RuleItem
getSpecialWeapon	Mod/Armor.cpp	/^const RuleItem* Armor::getSpecialWeapon() const$/;"	f	class:OpenXcom::Armor
getSpecialWeapon	Mod/RuleSoldier.h	/^	const RuleItem* getSpecialWeapon() const { return _specWeapon; }$/;"	f	class:OpenXcom::RuleSoldier
getSpecialWeapon	Savegame/BattleUnit.cpp	/^BattleItem *BattleUnit::getSpecialWeapon(BattleType type) const$/;"	f	class:OpenXcom::BattleUnit
getSpecialWeapon	Savegame/BattleUnit.cpp	/^BattleItem *BattleUnit::getSpecialWeapon(const RuleItem *weaponRule) const$/;"	f	class:OpenXcom::BattleUnit
getSpeed	Savegame/MovingTarget.cpp	/^int MovingTarget::getSpeed() const$/;"	f	class:OpenXcom::MovingTarget
getSpeedPercentage	Mod/UfoTrajectory.h	/^	float getSpeedPercentage(size_t wp) const { return _waypoints[wp].speed \/ 100.0f; }$/;"	f	class:OpenXcom::UfoTrajectory
getSpeedRadian	Savegame/MovingTarget.cpp	/^double MovingTarget::getSpeedRadian() const$/;"	f	class:OpenXcom::MovingTarget
getSpent	Savegame/ResearchProject.cpp	/^int ResearchProject::getSpent() const$/;"	f	class:OpenXcom::ResearchProject
getSplashdownSurvivalChance	Mod/RuleUfo.h	/^	int getSplashdownSurvivalChance() const { return _splashdownSurvivalChance; }$/;"	f	class:OpenXcom::RuleUfo
getSpotterDuration	Mod/Unit.cpp	/^int Unit::getSpotterDuration() const$/;"	f	class:OpenXcom::Unit
getSpotterDuration	Savegame/BattleUnit.cpp	/^int BattleUnit::getSpotterDuration() const$/;"	f	class:OpenXcom::BattleUnit
getSpottingUnits	Battlescape/AIModule.cpp	/^int AIModule::getSpottingUnits(const Position& pos) const$/;"	f	class:OpenXcom::AIModule
getSpottingUnits	Battlescape/TileEngine.cpp	/^std::vector<TileEngine::ReactionScore> TileEngine::getSpottingUnits(BattleUnit* unit)$/;"	f	class:OpenXcom::TileEngine
getSprayWaypoints	Mod/RuleItem.cpp	/^int RuleItem::getSprayWaypoints() const$/;"	f	class:OpenXcom::RuleItem
getSprite	Mod/MapData.cpp	/^int MapData::getSprite(int frameID) const$/;"	f	class:OpenXcom::MapData
getSprite	Mod/RuleCommendations.cpp	/^int RuleCommendations::getSprite() const$/;"	f	class:OpenXcom::RuleCommendations
getSprite	Mod/RuleCraft.cpp	/^int RuleCraft::getSprite(int skinIndex) const$/;"	f	class:OpenXcom::RuleCraft
getSprite	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getSprite() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getSprite	Mod/RuleUfo.cpp	/^int RuleUfo::getSprite() const$/;"	f	class:OpenXcom::RuleUfo
getSprite	Savegame/Tile.h	/^	SurfaceRaw<const Uint8> getSprite(TilePart part) const$/;"	f	class:OpenXcom::Tile
getSpriteFacility	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getSpriteFacility() const$/;"	f	class:OpenXcom::RuleBaseFacility
getSpriteInventory	Mod/Armor.cpp	/^std::string Armor::getSpriteInventory() const$/;"	f	class:OpenXcom::Armor
getSpriteShape	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getSpriteShape() const$/;"	f	class:OpenXcom::RuleBaseFacility
getSpriteSheet	Mod/Armor.cpp	/^std::string Armor::getSpriteSheet() const$/;"	f	class:OpenXcom::Armor
getSprites	Mod/ExtraSprites.cpp	/^std::map<int, std::string> *ExtraSprites::getSprites()$/;"	f	class:OpenXcom::ExtraSprites
getStandHeight	Mod/Armor.cpp	/^int Armor::getStandHeight() const$/;"	f	class:OpenXcom::Armor
getStandHeight	Mod/RuleSoldier.cpp	/^int RuleSoldier::getStandHeight() const$/;"	f	class:OpenXcom::RuleSoldier
getStandHeight	Mod/Unit.cpp	/^int Unit::getStandHeight() const$/;"	f	class:OpenXcom::Unit
getStandHeight	Savegame/BattleUnit.cpp	/^int BattleUnit::getStandHeight() const$/;"	f	class:OpenXcom::BattleUnit
getStandardReload	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getStandardReload() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getStartDirection	Battlescape/Pathfinding.cpp	/^int Pathfinding::getStartDirection() const$/;"	f	class:OpenXcom::Pathfinding
getStartDogfightSounds	Mod/Mod.h	/^	const std::vector<int> &getStartDogfightSounds() const { return _startDogfightSound; }$/;"	f	class:OpenXcom::Mod
getStartFrom	Mod/RuleManufactureShortcut.h	/^	const std::string& getStartFrom() const { return _startFrom; }$/;"	f	class:OpenXcom::RuleManufactureShortcut
getStartMonth	Savegame/AlienBase.h	/^	int getStartMonth() const { return _startMonth; }$/;"	f	class:OpenXcom::AlienBase
getStartMovingSounds	Mod/Mod.h	/^	const std::map<std::string, std::vector<int> > &getStartMovingSounds() const { return _startMovingSound; }$/;"	f	class:OpenXcom::Mod
getStartMovingSounds	Mod/Unit.h	/^	const std::vector<int> &getStartMovingSounds() const { return _startMovingSound; }$/;"	f	class:OpenXcom::Unit
getStartMovingSounds	Savegame/BattleUnit.h	/^	const std::vector<int> &getStartMovingSounds() const { return _startMovingSound; }$/;"	f	class:OpenXcom::BattleUnit
getStartingBase	Mod/Mod.cpp	/^const YAML::Node &Mod::getStartingBase(GameDifficulty diff) const$/;"	f	class:OpenXcom::Mod
getStartingCondition	Mod/AlienDeployment.cpp	/^const std::string& AlienDeployment::getStartingCondition() const$/;"	f	class:OpenXcom::AlienDeployment
getStartingCondition	Mod/Mod.cpp	/^RuleStartingCondition* Mod::getStartingCondition(const std::string& name) const$/;"	f	class:OpenXcom::Mod
getStartingCondition	Mod/Texture.h	/^	const std::string &getStartingCondition() const { return _startingCondition; }$/;"	f	class:OpenXcom::Texture
getStartingCondition	Savegame/SavedBattleGame.h	/^	const RuleStartingCondition* getStartingCondition() const { return _startingCondition; }$/;"	f	class:OpenXcom::SavedBattleGame
getStartingConditionsList	Mod/Mod.cpp	/^const std::vector<std::string>& Mod::getStartingConditionsList() const$/;"	f	class:OpenXcom::Mod
getStartingDifficulty	Mod/Mod.h	/^	int getStartingDifficulty() const { return _startingDifficulty; }$/;"	f	class:OpenXcom::Mod
getStartingTime	Mod/Mod.cpp	/^const GameTime &Mod::getStartingTime() const$/;"	f	class:OpenXcom::Mod
getStatAdjustment	Mod/Mod.cpp	/^StatAdjustment *Mod::getStatAdjustment(int difficulty)$/;"	f	class:OpenXcom::Mod
getStatCaps	Mod/RuleSoldier.cpp	/^UnitStats RuleSoldier::getStatCaps() const$/;"	f	class:OpenXcom::RuleSoldier
getStatFn_t	Basescape/SoldierSortUtil.h	/^typedef int (*getStatFn_t)(Game *, Soldier *);$/;"	t	namespace:OpenXcom
getStatStrings	Mod/Mod.cpp	/^const std::vector<StatString *> &Mod::getStatStrings() const$/;"	f	class:OpenXcom::Mod
getStatStrings	Mod/RuleSoldier.cpp	/^const std::vector<StatString *> &RuleSoldier::getStatStrings() const$/;"	f	class:OpenXcom::RuleSoldier
getState	Savegame/CraftWeaponProjectile.cpp	/^int CraftWeaponProjectile::getState() const$/;"	f	class:OpenXcom::CraftWeaponProjectile
getStates	Battlescape/BattlescapeGame.cpp	/^std::list<BattleState*> BattlescapeGame::getStates()$/;"	f	class:OpenXcom::BattlescapeGame
getStatisticalBulletConservation	Mod/Mod.h	/^	bool getStatisticalBulletConservation() const { return _statisticalBulletConservation; }$/;"	f	class:OpenXcom::Mod
getStatistics	Savegame/BattleUnit.cpp	/^BattleUnitStatistics* BattleUnit::getStatistics()$/;"	f	class:OpenXcom::BattleUnit
getStats	Mod/Armor.cpp	/^const UnitStats *Armor::getStats() const$/;"	f	class:OpenXcom::Armor
getStats	Mod/RuleCraft.cpp	/^const RuleCraftStats& RuleCraft::getStats() const$/;"	f	class:OpenXcom::RuleCraft
getStats	Mod/RuleSoldierBonus.h	/^	const UnitStats *getStats() const { return &_stats; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getStats	Mod/RuleUfo.cpp	/^const RuleUfoStats& RuleUfo::getStats() const$/;"	f	class:OpenXcom::RuleUfo
getStats	Mod/Unit.cpp	/^UnitStats *Unit::getStats()$/;"	f	class:OpenXcom::Unit
getStatsWithAllBonuses	Savegame/Soldier.cpp	/^UnitStats *Soldier::getStatsWithAllBonuses()$/;"	f	class:OpenXcom::Soldier
getStatsWithSoldierBonusesOnly	Savegame/Soldier.cpp	/^UnitStats *Soldier::getStatsWithSoldierBonusesOnly()$/;"	f	class:OpenXcom::Soldier
getStatus	Savegame/BattleUnit.cpp	/^UnitStatus BattleUnit::getStatus() const$/;"	f	class:OpenXcom::BattleUnit
getStatus	Savegame/Craft.cpp	/^std::string Craft::getStatus() const$/;"	f	class:OpenXcom::Craft
getStatus	Savegame/Ufo.h	/^	enum UfoStatus getStatus() const { return _status; }$/;"	f	class:OpenXcom::Ufo
getStatusScript	Savegame/Ufo.cpp	/^void getStatusScript(const Ufo *u, int &ret)$/;"	f	namespace:OpenXcom::__anon32
getStimulantQuantity	Mod/RuleItem.cpp	/^int RuleItem::getStimulantQuantity() const$/;"	f	class:OpenXcom::RuleItem
getStimulantQuantity	Savegame/BattleItem.cpp	/^int BattleItem::getStimulantQuantity() const$/;"	f	class:OpenXcom::BattleItem
getStorage	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getStorage() const$/;"	f	class:OpenXcom::RuleBaseFacility
getStorageItems	Savegame/Base.h	/^	ItemContainer *getStorageItems() { return _items; }$/;"	f	class:OpenXcom::Base
getStorageItems	Savegame/Base.h	/^	const ItemContainer *getStorageItems() const { return _items; }$/;"	f	class:OpenXcom::Base
getStorageSpace	Savegame/SavedBattleGame.cpp	/^std::vector<Position> &SavedBattleGame::getStorageSpace()$/;"	f	class:OpenXcom::SavedBattleGame
getStorageTiles	Mod/RuleBaseFacility.cpp	/^const std::vector<Position> &RuleBaseFacility::getStorageTiles() const$/;"	f	class:OpenXcom::RuleBaseFacility
getStoreItem	Mod/Armor.cpp	/^const RuleItem* Armor::getStoreItem() const$/;"	f	class:OpenXcom::Armor
getStrafeMove	Battlescape/Pathfinding.cpp	/^bool Pathfinding::getStrafeMove() const$/;"	f	class:OpenXcom::Pathfinding
getString	Engine/Language.cpp	/^LocalizedText Language::getString(const std::string &id) const$/;"	f	class:OpenXcom::Language
getString	Engine/Language.cpp	/^LocalizedText Language::getString(const std::string &id, SoldierGender gender) const$/;"	f	class:OpenXcom::Language
getString	Engine/Language.cpp	/^LocalizedText Language::getString(const std::string &id, unsigned n) const$/;"	f	class:OpenXcom::Language
getString	Mod/StatString.cpp	/^std::string StatString::getString() const$/;"	f	class:OpenXcom::StatString
getStrings	Mod/ExtraStrings.cpp	/^std::map<std::string, std::string> *ExtraStrings::getStrings()$/;"	f	class:OpenXcom::ExtraStrings
getStunFinalDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getStunFinalDamage(int damage) const$/;"	f	class:OpenXcom::RuleDamageType
getStunMaxScript	Savegame/BattleUnit.cpp	/^void getStunMaxScript(const BattleUnit *bu, int &maxStun)$/;"	f	namespace:OpenXcom::__anon36
getStunRecovery	Mod/RuleItem.cpp	/^int RuleItem::getStunRecovery() const$/;"	f	class:OpenXcom::RuleItem
getStunRegeneration	Mod/Armor.cpp	/^int Armor::getStunRegeneration(const BattleUnit* unit, int externalBonuses) const$/;"	f	class:OpenXcom::Armor
getStunRegeneration	Mod/RuleSoldierBonus.cpp	/^int RuleSoldierBonus::getStunRegeneration(const BattleUnit *unit) const$/;"	f	class:OpenXcom::RuleSoldierBonus
getStunRegenerationRaw	Mod/Armor.h	/^	const RuleStatBonus *getStunRegenerationRaw() const { return &_stunRecovery; }$/;"	f	class:OpenXcom::Armor
getStunRegenerationRaw	Mod/RuleSoldierBonus.h	/^	const RuleStatBonus *getStunRegenerationRaw() const { return &_stunRecovery; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getStunTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getStunTotal() const$/;"	f	class:OpenXcom::SoldierDiary
getStunlevel	Savegame/BattleUnit.cpp	/^int BattleUnit::getStunlevel() const$/;"	f	class:OpenXcom::BattleUnit
getStunningImprovesMorale	Mod/Mod.h	/^	bool getStunningImprovesMorale() const { return _stunningImprovesMorale; }$/;"	f	class:OpenXcom::Mod
getStuns	Savegame/Soldier.cpp	/^int Soldier::getStuns() const$/;"	f	class:OpenXcom::Soldier
getSubX	Mod/ExtraSprites.cpp	/^int ExtraSprites::getSubX() const$/;"	f	class:OpenXcom::ExtraSprites
getSubY	Mod/ExtraSprites.cpp	/^int ExtraSprites::getSubY() const$/;"	f	class:OpenXcom::ExtraSprites
getSuffix	Engine/LanguagePlurality.cpp	/^const char *CroatianPlurality::getSuffix(unsigned n) const$/;"	f	class:OpenXcom::CroatianPlurality
getSuffix	Engine/LanguagePlurality.cpp	/^const char *CyrillicPlurality::getSuffix(unsigned n) const$/;"	f	class:OpenXcom::CyrillicPlurality
getSuffix	Engine/LanguagePlurality.cpp	/^const char *CzechPlurality::getSuffix(unsigned n) const$/;"	f	class:OpenXcom::CzechPlurality
getSuffix	Engine/LanguagePlurality.cpp	/^const char *NoSingular::getSuffix(unsigned) const$/;"	f	class:OpenXcom::NoSingular
getSuffix	Engine/LanguagePlurality.cpp	/^const char *OneSingular::getSuffix(unsigned n) const$/;"	f	class:OpenXcom::OneSingular
getSuffix	Engine/LanguagePlurality.cpp	/^const char *PolishPlurality::getSuffix(unsigned n) const$/;"	f	class:OpenXcom::PolishPlurality
getSuffix	Engine/LanguagePlurality.cpp	/^const char *RomanianPlurality::getSuffix(unsigned n) const$/;"	f	class:OpenXcom::RomanianPlurality
getSuffix	Engine/LanguagePlurality.cpp	/^const char *ZeroOneSingular::getSuffix(unsigned n) const$/;"	f	class:OpenXcom::ZeroOneSingular
getSumRecoveryPerDay	Savegame/Base.cpp	/^BaseSumDailyRecovery Base::getSumRecoveryPerDay() const$/;"	f	class:OpenXcom::Base
getSunDirection	Geoscape/Globe.cpp	/^Cord Globe::getSunDirection(double lon, double lat) const$/;"	f	class:OpenXcom::Globe
getSupportedInventorySections	Mod/RuleItem.h	/^	const std::vector<const RuleInventory*> &getSupportedInventorySections() const { return _supportedInventorySections; }$/;"	f	class:OpenXcom::RuleItem
getSurface	Engine/Screen.cpp	/^SDL_Surface *Screen::getSurface()$/;"	f	class:OpenXcom::Screen
getSurface	Engine/Surface.h	/^	SDL_Surface *getSurface()$/;"	f	class:OpenXcom::Surface
getSurface	Engine/Surface.h	/^	const Surface* getSurface()$/;"	f	class:OpenXcom::SurfaceCrop
getSurface	Mod/Mod.cpp	/^Surface *Mod::getSurface(const std::string &name, bool error)$/;"	f	class:OpenXcom::Mod
getSurfaceSet	Mod/Mod.cpp	/^SurfaceSet *Mod::getSurfaceSet(const std::string &name, bool error)$/;"	f	class:OpenXcom::Mod
getSurfaceset	Mod/MapDataSet.cpp	/^SurfaceSet *MapDataSet::getSurfaceset() const$/;"	f	class:OpenXcom::MapDataSet
getSurrenderMode	Mod/Mod.h	/^	int getSurrenderMode() const { return _surrenderMode; }$/;"	f	class:OpenXcom::Mod
getTUCost	Battlescape/Pathfinding.cpp	/^PathfindingStep Pathfinding::getTUCost(Position startPosition, int direction, const BattleUnit *unit, const BattleUnit *missileTarget, BattleActionMove bam) const$/;"	f	class:OpenXcom::Pathfinding
getTUCost	Battlescape/PathfindingNode.h	/^	PathfindingCost getTUCost(bool missile) const { return missile ? PathfindingCost{} : _tuCost; }$/;"	f	class:OpenXcom::PathfindingNode
getTUCost	Mod/MapData.cpp	/^int MapData::getTUCost(MovementType movementType) const$/;"	f	class:OpenXcom::MapData
getTUCost	Savegame/Tile.cpp	/^int Tile::getTUCost(int part, MovementType movementType) const$/;"	f	class:OpenXcom::Tile
getTUGuess	Battlescape/PathfindingNode.h	/^	int getTUGuess() const { return _tuGuess; }$/;"	f	class:OpenXcom::PathfindingNode
getTULoad	Mod/RuleItem.cpp	/^int RuleItem::getTULoad(int slot) const$/;"	f	class:OpenXcom::RuleItem
getTUMarker	Savegame/Tile.cpp	/^int Tile::getTUMarker() const$/;"	f	class:OpenXcom::Tile
getTURecoveryWakeUpNewTurn	Mod/Mod.h	/^	int getTURecoveryWakeUpNewTurn() const { return _tuRecoveryWakeUpNewTurn; }$/;"	f	class:OpenXcom::Mod
getTUReserved	Savegame/SavedBattleGame.cpp	/^BattleActionType SavedBattleGame::getTUReserved() const$/;"	f	class:OpenXcom::SavedBattleGame
getTUUnload	Mod/RuleItem.cpp	/^int RuleItem::getTUUnload(int slot) const$/;"	f	class:OpenXcom::RuleItem
getTUs	Battlescape/ActionMenuItem.cpp	/^int ActionMenuItem::getTUs() const$/;"	f	class:OpenXcom::ActionMenuItem
getTag	Engine/Script.cpp	/^size_t ScriptGlobal::getTag(ArgEnum type, ScriptRef s) const$/;"	f	class:OpenXcom::ScriptGlobal
getTagValueData	Engine/Script.cpp	/^ScriptGlobal::TagValueData ScriptGlobal::getTagValueData(ArgEnum type, size_t i) const$/;"	f	class:OpenXcom::ScriptGlobal
getTagValueTypeData	Engine/Script.cpp	/^ScriptGlobal::TagValueType ScriptGlobal::getTagValueTypeData(size_t valueType) const$/;"	f	class:OpenXcom::ScriptGlobal
getTagValueTypeId	Engine/Script.cpp	/^size_t ScriptGlobal::getTagValueTypeId(ScriptRef s) const$/;"	f	class:OpenXcom::ScriptGlobal
getTakeoffSound	Mod/RuleCraft.cpp	/^int RuleCraft::getTakeoffSound() const$/;"	f	class:OpenXcom::RuleCraft
getTakeoffSoundRaw	Mod/RuleCraft.h	/^	const std::vector<int>& getTakeoffSoundRaw() const { return _takeoffSound; }$/;"	f	class:OpenXcom::RuleCraft
getTarget	Battlescape/AIModule.cpp	/^BattleUnit* AIModule::getTarget()$/;"	f	class:OpenXcom::AIModule
getTarget	Battlescape/Projectile.cpp	/^Position Projectile::getTarget() const$/;"	f	class:OpenXcom::Projectile
getTarget	Mod/CustomPalettes.cpp	/^const std::string &CustomPalettes::getTarget() const$/;"	f	class:OpenXcom::CustomPalettes
getTargetBaseOdds	Mod/RuleAlienMission.h	/^	int getTargetBaseOdds() const { return _targetBaseOdds; }$/;"	f	class:OpenXcom::RuleAlienMission
getTargetBaseOdds	Mod/RuleMissionScript.cpp	/^int RuleMissionScript::getTargetBaseOdds() const$/;"	f	class:OpenXcom::RuleMissionScript
getTargetMatrixRaw	Mod/RuleItem.h	/^	int getTargetMatrixRaw() const { return _targetMatrix; }$/;"	f	class:OpenXcom::RuleItem
getTargetMode	Mod/RuleSkill.h	/^	BattleActionType getTargetMode() const { return _targetMode; }$/;"	f	class:OpenXcom::RuleSkill
getTargetedXcomCraft	Savegame/Ufo.cpp	/^Craft *Ufo::getTargetedXcomCraft() const$/;"	f	class:OpenXcom::Ufo
getTargets	Geoscape/Globe.cpp	/^std::vector<Target*> Globe::getTargets(int x, int y, bool craft, Craft *currentCraft) const$/;"	f	class:OpenXcom::Globe
getTerrain	Mod/Mod.cpp	/^RuleTerrain *Mod::getTerrain(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getTerrain	Mod/Texture.cpp	/^std::vector<TerrainCriteria> *Texture::getTerrain()$/;"	f	class:OpenXcom::Texture
getTerrainLevel	Battlescape/Map.cpp	/^int Map::getTerrainLevel(const Position& pos, int size) const$/;"	f	class:OpenXcom::Map
getTerrainLevel	Mod/MapData.cpp	/^int MapData::getTerrainLevel() const$/;"	f	class:OpenXcom::MapData
getTerrainLevel	Savegame/Tile.h	/^	int getTerrainLevel() const$/;"	f	class:OpenXcom::Tile
getTerrainList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getTerrainList() const$/;"	f	class:OpenXcom::Mod
getTerrains	Mod/AlienDeployment.cpp	/^std::vector<std::string> AlienDeployment::getTerrains() const$/;"	f	class:OpenXcom::AlienDeployment
getTerrains	Mod/RuleGlobe.cpp	/^std::vector<std::string> RuleGlobe::getTerrains(const std::string &deployment) const$/;"	f	class:OpenXcom::RuleGlobe
getTerrorMissionTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getTerrorMissionTotal(std::vector<MissionStatistics*> *missionStatistics) const$/;"	f	class:OpenXcom::SoldierDiary
getText	Interface/Text.cpp	/^std::string Text::getText() const$/;"	f	class:OpenXcom::Text
getText	Interface/TextButton.cpp	/^std::string TextButton::getText() const$/;"	f	class:OpenXcom::TextButton
getText	Interface/TextEdit.cpp	/^std::string TextEdit::getText() const$/;"	f	class:OpenXcom::TextEdit
getTextDirection	Engine/Language.cpp	/^TextDirection Language::getTextDirection() const$/;"	f	class:OpenXcom::Language
getTextForPage	Mod/ArticleDefinition.h	/^		const std::string& getTextForPage(size_t page) const$/;"	f	class:OpenXcom::ArticleDefinition
getTextHeight	Interface/Text.cpp	/^int Text::getTextHeight(int line) const$/;"	f	class:OpenXcom::Text
getTextHeight	Interface/TextList.cpp	/^int TextList::getTextHeight(size_t row) const$/;"	f	class:OpenXcom::TextList
getTextWidth	Interface/Text.cpp	/^int Text::getTextWidth(int line) const$/;"	f	class:OpenXcom::Text
getTextWrapping	Engine/Language.cpp	/^TextWrapping Language::getTextWrapping() const$/;"	f	class:OpenXcom::Language
getTexts	Interface/TextList.cpp	/^size_t TextList::getTexts() const$/;"	f	class:OpenXcom::TextList
getTexture	Mod/Polygon.cpp	/^int Polygon::getTexture() const$/;"	f	class:OpenXcom::Polygon
getTexture	Mod/RuleGlobe.cpp	/^Texture *RuleGlobe::getTexture(int id) const$/;"	f	class:OpenXcom::RuleGlobe
getTexture	Savegame/MissionSite.cpp	/^int MissionSite::getTexture() const$/;"	f	class:OpenXcom::MissionSite
getTexturesRaw	Mod/RuleGlobe.h	/^	const std::map<int, Texture*> &getTexturesRaw() const { return _textures; }$/;"	f	class:OpenXcom::RuleGlobe
getThrowMultiplier	Mod/RuleItem.cpp	/^int RuleItem::getThrowMultiplier(BattleActionAttack::ReadOnly attack) const$/;"	f	class:OpenXcom::RuleItem
getThrowMultiplierRaw	Mod/RuleItem.h	/^	const RuleStatBonus *getThrowMultiplierRaw() const { return &_throwMulti; }$/;"	f	class:OpenXcom::RuleItem
getThrowRange	Mod/RuleItem.h	/^	int getThrowRange() const { return _throwRange; }$/;"	f	class:OpenXcom::RuleItem
getThrowRangeSq	Mod/RuleItem.h	/^	int getThrowRangeSq() const { return _throwRange * _throwRange; }$/;"	f	class:OpenXcom::RuleItem
getTile	Savegame/BattleItem.cpp	/^Tile *BattleItem::getTile() const$/;"	f	class:OpenXcom::BattleItem
getTile	Savegame/BattleUnit.cpp	/^Tile *BattleUnit::getTile() const$/;"	f	class:OpenXcom::BattleUnit
getTile	Savegame/SavedBattleGame.h	/^	Tile* getTile(int i)$/;"	f	class:OpenXcom::SavedBattleGame
getTile	Savegame/SavedBattleGame.h	/^	inline Tile *getTile(Position pos)$/;"	f	class:OpenXcom::SavedBattleGame
getTile	Savegame/SavedBattleGame.h	/^	inline const Tile *getTile(Position pos) const$/;"	f	class:OpenXcom::SavedBattleGame
getTileCoords	Savegame/SavedBattleGame.cpp	/^Position SavedBattleGame::getTileCoords(int index) const$/;"	f	class:OpenXcom::SavedBattleGame
getTileEngine	Battlescape/BattlescapeGame.cpp	/^TileEngine *BattlescapeGame::getTileEngine()$/;"	f	class:OpenXcom::BattlescapeGame
getTileEngine	Savegame/SavedBattleGame.cpp	/^TileEngine *SavedBattleGame::getTileEngine() const$/;"	f	class:OpenXcom::SavedBattleGame
getTileFinalDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getTileFinalDamage(int damage) const$/;"	f	class:OpenXcom::RuleDamageType
getTileIndex	Savegame/SavedBattleGame.h	/^	inline int getTileIndex(Position pos) const$/;"	f	class:OpenXcom::SavedBattleGame
getTileScript	Savegame/SavedBattleGame.cpp	/^void getTileScript(const SavedBattleGame* sbg, const Tile*& t, int x, int y, int z)$/;"	f	namespace:OpenXcom::__anon33
getTileSearch	Savegame/SavedBattleGame.cpp	/^const std::vector<Position> &SavedBattleGame::getTileSearch() const$/;"	f	class:OpenXcom::SavedBattleGame
getTileShade	Savegame/BattleUnit.cpp	/^void getTileShade(const BattleUnit *bu, int &shade)$/;"	f	namespace:OpenXcom::__anon36
getTime	Engine/Timer.cpp	/^Uint32 Timer::getTime() const$/;"	f	class:OpenXcom::Timer
getTime	Savegame/SavedGame.cpp	/^GameTime *SavedGame::getTime() const$/;"	f	class:OpenXcom::SavedGame
getTime	Savegame/SoldierDeath.cpp	/^const GameTime *SoldierDeath::getTime() const$/;"	f	class:OpenXcom::SoldierDeath
getTimeFinalDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getTimeFinalDamage(int damage) const$/;"	f	class:OpenXcom::RuleDamageType
getTimeRecovery	Mod/Armor.cpp	/^int Armor::getTimeRecovery(const BattleUnit* unit, int externalBonuses) const$/;"	f	class:OpenXcom::Armor
getTimeRecovery	Mod/RuleSoldierBonus.cpp	/^int RuleSoldierBonus::getTimeRecovery(const BattleUnit *unit) const$/;"	f	class:OpenXcom::RuleSoldierBonus
getTimeRecoveryRaw	Mod/Armor.h	/^	const RuleStatBonus *getTimeRecoveryRaw() const { return &_timeRecovery; }$/;"	f	class:OpenXcom::Armor
getTimeRecoveryRaw	Mod/RuleSoldierBonus.h	/^	const RuleStatBonus *getTimeRecoveryRaw() const { return &_timeRecovery; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getTimeScript	Savegame/SavedGame.cpp	/^void getTimeScript(const SavedGame* sg, const GameTime*& r)$/;"	f	namespace:OpenXcom::__anon42
getTimeSpent	Savegame/Production.cpp	/^int Production::getTimeSpent() const$/;"	f	class:OpenXcom::Production
getTimeUnits	Savegame/BattleUnit.cpp	/^int BattleUnit::getTimeUnits() const$/;"	f	class:OpenXcom::BattleUnit
getTimer	Mod/RuleEvent.h	/^	int getTimer() const { return _timer; }$/;"	f	class:OpenXcom::RuleEvent
getTimerRandom	Mod/RuleEvent.h	/^	int getTimerRandom() const { return _timerRandom; }$/;"	f	class:OpenXcom::RuleEvent
getTitleForPage	Mod/ArticleDefinition.h	/^		const std::string& getTitleForPage(size_t page) const$/;"	f	class:OpenXcom::ArticleDefinition
getToggleBrightness	Savegame/SavedBattleGame.h	/^	int getToggleBrightness() const { return _toggleBrightness; }$/;"	f	class:OpenXcom::SavedBattleGame
getToggleBrightness	Savegame/SavedGame.h	/^	int getToggleBrightness() const { return _toggleBrightness; }$/;"	f	class:OpenXcom::SavedGame
getToggleNightVision	Savegame/SavedBattleGame.h	/^	bool getToggleNightVision() const { return _toggleNightVision; }$/;"	f	class:OpenXcom::SavedBattleGame
getToggleNightVision	Savegame/SavedGame.h	/^	bool getToggleNightVision() const { return _toggleNightVision; }$/;"	f	class:OpenXcom::SavedGame
getTogglePersonalLight	Savegame/SavedBattleGame.h	/^	bool getTogglePersonalLight() const { return _togglePersonalLight; }$/;"	f	class:OpenXcom::SavedBattleGame
getTogglePersonalLight	Savegame/SavedGame.h	/^	bool getTogglePersonalLight() const { return _togglePersonalLight; }$/;"	f	class:OpenXcom::SavedGame
getTooMuchSmokeThreshold	Mod/Mod.h	/^	int getTooMuchSmokeThreshold() const  {return _tooMuchSmokeThreshold;}$/;"	f	class:OpenXcom::Mod
getTooltip	Engine/InteractiveSurface.cpp	/^std::string InteractiveSurface::getTooltip() const$/;"	f	class:OpenXcom::InteractiveSurface
getTopBlackBand	Engine/Action.cpp	/^int Action::getTopBlackBand() const$/;"	f	class:OpenXcom::Action
getTopBlockOfType	Engine/Script.cpp	/^ParserWriter::Block* getTopBlockOfType(ParserWriter& ph, BlockEnum type)$/;"	f	namespace:OpenXcom::__anon8
getTopItem	Savegame/Tile.cpp	/^BattleItem* Tile::getTopItem()$/;"	f	class:OpenXcom::Tile
getTopL	Engine/Scalers/xbrz.cpp	/^inline BlendType getTopL   (unsigned char b) { return static_cast<BlendType>(0x3 & b); }$/;"	f	namespace:__anon10
getTopR	Engine/Scalers/xbrz.cpp	/^inline BlendType getTopR   (unsigned char b) { return static_cast<BlendType>(0x3 & (b >> 2)); }$/;"	f	namespace:__anon10
getTopicId	Ufopaedia/StatsForNerdsState.h	/^	const std::string& getTopicId() const { return _topicId; }$/;"	f	class:OpenXcom::StatsForNerdsState
getTotal	Basescape/TransferItemsState.cpp	/^int TransferItemsState::getTotal() const$/;"	f	class:OpenXcom::TransferItemsState
getTotalEngineers	Savegame/Base.cpp	/^int Base::getTotalEngineers() const$/;"	f	class:OpenXcom::Base
getTotalFrames	Engine/SurfaceSet.cpp	/^size_t SurfaceSet::getTotalFrames() const$/;"	f	class:OpenXcom::SurfaceSet
getTotalItemCount	Savegame/Craft.cpp	/^int Craft::getTotalItemCount(const RuleItem* item) const$/;"	f	class:OpenXcom::Craft
getTotalItemStorageSize	Savegame/Craft.cpp	/^double Craft::getTotalItemStorageSize(const Mod* mod) const$/;"	f	class:OpenXcom::Craft
getTotalOtherStaffAndInventoryCost	Savegame/Base.cpp	/^int Base::getTotalOtherStaffAndInventoryCost(int& staffCount, int& inventoryCount) const$/;"	f	class:OpenXcom::Base
getTotalQuantity	Savegame/ItemContainer.cpp	/^int ItemContainer::getTotalQuantity() const$/;"	f	class:OpenXcom::ItemContainer
getTotalRecoveredItemCount	Battlescape/DebriefingState.cpp	/^int DebriefingState::getTotalRecoveredItemCount()$/;"	f	class:OpenXcom::DebriefingState
getTotalScientists	Savegame/Base.cpp	/^int Base::getTotalScientists() const$/;"	f	class:OpenXcom::Base
getTotalSize	Mod/Armor.cpp	/^int Armor::getTotalSize() const$/;"	f	class:OpenXcom::Armor
getTotalSize	Savegame/ItemContainer.cpp	/^double ItemContainer::getTotalSize(const Mod *mod) const$/;"	f	class:OpenXcom::ItemContainer
getTotalSize	Savegame/Vehicle.cpp	/^int Vehicle::getTotalSize() const$/;"	f	class:OpenXcom::Vehicle
getTotalSoldierNamePoolWeight	Mod/RuleSoldier.h	/^	int getTotalSoldierNamePoolWeight() const { return _totalSoldierNamePoolWeight; }$/;"	f	class:OpenXcom::RuleSoldier
getTotalSoldiers	Savegame/Base.cpp	/^int Base::getTotalSoldiers() const$/;"	f	class:OpenXcom::Base
getTotalSounds	Engine/SoundSet.cpp	/^size_t SoundSet::getTotalSounds() const$/;"	f	class:OpenXcom::SoundSet
getTotalTUCost	Battlescape/Pathfinding.h	/^	int getTotalTUCost() const { return _totalTUCost.time; }$/;"	f	class:OpenXcom::Pathfinding
getTotalWeight	Savegame/BattleItem.cpp	/^int BattleItem::getTotalWeight() const$/;"	f	class:OpenXcom::BattleItem
getTractorBeamPower	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getTractorBeamPower() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getTractorBeamSlowdown	Savegame/Ufo.cpp	/^int Ufo::getTractorBeamSlowdown() const$/;"	f	class:OpenXcom::Ufo
getTrainingFacilities	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getTrainingFacilities() const$/;"	f	class:OpenXcom::RuleBaseFacility
getTrainingStatCaps	Mod/RuleSoldier.cpp	/^UnitStats RuleSoldier::getTrainingStatCaps() const$/;"	f	class:OpenXcom::RuleSoldier
getTrajectory	Savegame/Ufo.h	/^	const UfoTrajectory &getTrajectory() const { return *_trajectory; }$/;"	f	class:OpenXcom::Ufo
getTrajectoryPoint	Savegame/Ufo.h	/^	size_t getTrajectoryPoint() const { return _trajectoryPoint; }$/;"	f	class:OpenXcom::Ufo
getTransferTime	Mod/RuleCraft.cpp	/^int RuleCraft::getTransferTime() const$/;"	f	class:OpenXcom::RuleCraft
getTransferTime	Mod/RuleItem.cpp	/^int RuleItem::getTransferTime() const$/;"	f	class:OpenXcom::RuleItem
getTransferTime	Mod/RuleSoldier.cpp	/^int RuleSoldier::getTransferTime() const$/;"	f	class:OpenXcom::RuleSoldier
getTransferTime	Mod/RuleSoldierTransformation.cpp	/^int RuleSoldierTransformation::getTransferTime() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
getTransfers	Savegame/Base.h	/^	const std::vector<Transfer*> *getTransfers() const { return &_transfers; }$/;"	f	class:OpenXcom::Base
getTransfers	Savegame/Base.h	/^	std::vector<Transfer*> *getTransfers() { return &_transfers; }$/;"	f	class:OpenXcom::Base
getTransformedArmor	Savegame/Soldier.cpp	/^Armor *Soldier::getTransformedArmor() const$/;"	f	class:OpenXcom::Soldier
getTransparencies	Mod/Mod.cpp	/^const std::vector<SDL_Color> *Mod::getTransparencies() const$/;"	f	class:OpenXcom::Mod
getTrapKillTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getTrapKillTotal(Mod *mod) const$/;"	f	class:OpenXcom::SoldierDiary
getTreeInflateDynamic	lodepng.cpp	/^static unsigned getTreeInflateDynamic(HuffmanTree* tree_ll, HuffmanTree* tree_d,$/;"	f	file:
getTreeInflateFixed	lodepng.cpp	/^static void getTreeInflateFixed(HuffmanTree* tree_ll, HuffmanTree* tree_d)$/;"	f	file:
getTunnelData	Mod/MapScript.h	/^	TunnelData *getTunnelData() {return _tunnelData;};$/;"	f	class:OpenXcom::MapScript
getTurn	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getTurn() const$/;"	f	class:OpenXcom::SavedBattleGame
getTurnBeforeFirstStep	Mod/Armor.h	/^	bool getTurnBeforeFirstStep() const { return _turnBeforeFirstStep; }$/;"	f	class:OpenXcom::Armor
getTurnCost	Mod/Armor.h	/^	int getTurnCost() const { return _turnCost; }$/;"	f	class:OpenXcom::Armor
getTurnCost	Savegame/BattleUnit.cpp	/^int BattleUnit::getTurnCost() const$/;"	f	class:OpenXcom::BattleUnit
getTurnDiary	Savegame/HitLog.h	/^	const std::vector<std::string> &getTurnDiary() const { return _turnDiary; }$/;"	f	class:OpenXcom::HitLog
getTurnFlag	Savegame/BattleItem.cpp	/^bool BattleItem::getTurnFlag() const$/;"	f	class:OpenXcom::BattleItem
getTurnLimit	Mod/AlienDeployment.cpp	/^int AlienDeployment::getTurnLimit() const$/;"	f	class:OpenXcom::AlienDeployment
getTurnLimit	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getTurnLimit() const$/;"	f	class:OpenXcom::SavedBattleGame
getTurnsLeftSpottedForSnipers	Savegame/BattleUnit.cpp	/^int BattleUnit::getTurnsLeftSpottedForSnipers() const$/;"	f	class:OpenXcom::BattleUnit
getTurnsSinceSpotted	Savegame/BattleUnit.cpp	/^int BattleUnit::getTurnsSinceSpotted() const$/;"	f	class:OpenXcom::BattleUnit
getTurnsSinceStunned	Savegame/BattleUnit.h	/^	int getTurnsSinceStunned() const { return _turnsSinceStunned; }$/;"	f	class:OpenXcom::BattleUnit
getTurretDirection	Savegame/BattleUnit.cpp	/^int BattleUnit::getTurretDirection() const$/;"	f	class:OpenXcom::BattleUnit
getTurretToDirection	Savegame/BattleUnit.cpp	/^int BattleUnit::getTurretToDirection() const$/;"	f	class:OpenXcom::BattleUnit
getTurretType	Mod/RuleItem.cpp	/^int RuleItem::getTurretType() const$/;"	f	class:OpenXcom::RuleItem
getTurretType	Savegame/BattleUnit.cpp	/^int BattleUnit::getTurretType() const$/;"	f	class:OpenXcom::BattleUnit
getType	Engine/Script.cpp	/^	TokenEnum getType() const$/;"	f	class:OpenXcom::SelectedToken
getType	Engine/Script.cpp	/^const ScriptTypeData* ScriptParserBase::getType(ArgEnum type) const$/;"	f	class:OpenXcom::ScriptParserBase
getType	Engine/Script.cpp	/^const ScriptTypeData* ScriptParserBase::getType(ScriptRef prefix, ScriptRef postfix) const$/;"	f	class:OpenXcom::ScriptParserBase
getType	Mod/AlienDeployment.cpp	/^const std::string& AlienDeployment::getType() const$/;"	f	class:OpenXcom::AlienDeployment
getType	Mod/Armor.cpp	/^const std::string& Armor::getType() const$/;"	f	class:OpenXcom::Armor
getType	Mod/ArticleDefinition.cpp	/^	UfopaediaTypeId ArticleDefinition::getType() const$/;"	f	class:OpenXcom::ArticleDefinition
getType	Mod/CustomPalettes.cpp	/^const std::string &CustomPalettes::getType() const$/;"	f	class:OpenXcom::CustomPalettes
getType	Mod/ExtraSounds.cpp	/^const std::string& ExtraSounds::getType() const$/;"	f	class:OpenXcom::ExtraSounds
getType	Mod/ExtraSprites.cpp	/^const std::string& ExtraSprites::getType() const$/;"	f	class:OpenXcom::ExtraSprites
getType	Mod/MapScript.h	/^	MapScriptCommand getType() const {return _type;};$/;"	f	class:OpenXcom::MapScript
getType	Mod/RuleAlienMission.h	/^	const std::string &getType() const { return _type; }$/;"	f	class:OpenXcom::RuleAlienMission
getType	Mod/RuleArcScript.h	/^	const std::string &getType() const { return _type; }$/;"	f	class:OpenXcom::RuleArcScript
getType	Mod/RuleBaseFacility.cpp	/^const std::string& RuleBaseFacility::getType() const$/;"	f	class:OpenXcom::RuleBaseFacility
getType	Mod/RuleCountry.cpp	/^const std::string& RuleCountry::getType() const$/;"	f	class:OpenXcom::RuleCountry
getType	Mod/RuleCraft.cpp	/^const std::string &RuleCraft::getType() const$/;"	f	class:OpenXcom::RuleCraft
getType	Mod/RuleCraftWeapon.cpp	/^const std::string& RuleCraftWeapon::getType() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getType	Mod/RuleEnviroEffects.h	/^	const std::string& getType() const { return _type; }$/;"	f	class:OpenXcom::RuleEnviroEffects
getType	Mod/RuleEventScript.h	/^	const std::string &getType() const { return _type; }$/;"	f	class:OpenXcom::RuleEventScript
getType	Mod/RuleInventory.cpp	/^InventoryType RuleInventory::getType() const$/;"	f	class:OpenXcom::RuleInventory
getType	Mod/RuleItem.cpp	/^const std::string &RuleItem::getType() const$/;"	f	class:OpenXcom::RuleItem
getType	Mod/RuleItemCategory.cpp	/^const std::string &RuleItemCategory::getType() const$/;"	f	class:OpenXcom::RuleItemCategory
getType	Mod/RuleMissionScript.cpp	/^const std::string& RuleMissionScript::getType() const$/;"	f	class:OpenXcom::RuleMissionScript
getType	Mod/RuleRegion.cpp	/^const std::string& RuleRegion::getType() const$/;"	f	class:OpenXcom::RuleRegion
getType	Mod/RuleSkill.h	/^	const std::string& getType() const { return _type; }$/;"	f	class:OpenXcom::RuleSkill
getType	Mod/RuleSoldier.cpp	/^const std::string& RuleSoldier::getType() const$/;"	f	class:OpenXcom::RuleSoldier
getType	Mod/RuleStartingCondition.h	/^	const std::string& getType() const { return _type; }$/;"	f	class:OpenXcom::RuleStartingCondition
getType	Mod/RuleUfo.cpp	/^const std::string &RuleUfo::getType() const$/;"	f	class:OpenXcom::RuleUfo
getType	Mod/Unit.cpp	/^const std::string& Unit::getType() const$/;"	f	class:OpenXcom::Unit
getType	Savegame/AlienBase.cpp	/^std::string AlienBase::getType() const$/;"	f	class:OpenXcom::AlienBase
getType	Savegame/Base.cpp	/^std::string Base::getType() const$/;"	f	class:OpenXcom::Base
getType	Savegame/BattleUnit.cpp	/^const std::string& BattleUnit::getType() const$/;"	f	class:OpenXcom::BattleUnit
getType	Savegame/Craft.cpp	/^std::string Craft::getType() const$/;"	f	class:OpenXcom::Craft
getType	Savegame/CraftWeaponProjectile.cpp	/^CraftWeaponProjectileType CraftWeaponProjectile::getType() const$/;"	f	class:OpenXcom::CraftWeaponProjectile
getType	Savegame/MissionSite.cpp	/^std::string MissionSite::getType() const$/;"	f	class:OpenXcom::MissionSite
getType	Savegame/Node.cpp	/^int Node::getType() const$/;"	f	class:OpenXcom::Node
getType	Savegame/SoldierDiary.cpp	/^const std::string& SoldierCommendations::getType() const$/;"	f	class:OpenXcom::SoldierCommendations
getType	Savegame/Transfer.cpp	/^TransferType Transfer::getType() const$/;"	f	class:OpenXcom::Transfer
getType	Savegame/Ufo.cpp	/^std::string Ufo::getType() const$/;"	f	class:OpenXcom::Ufo
getType	Savegame/Waypoint.cpp	/^std::string Waypoint::getType() const$/;"	f	class:OpenXcom::Waypoint
getTypeId	Ufopaedia/StatsForNerdsState.h	/^	UfopaediaTypeId getTypeId() const { return _typeId; }$/;"	f	class:OpenXcom::StatsForNerdsState
getTypeName	Engine/Script.cpp	/^ScriptRef ScriptParserBase::getTypeName(ArgEnum type) const$/;"	f	class:OpenXcom::ScriptParserBase
getTypePrefix	Engine/Script.cpp	/^std::string ScriptParserBase::getTypePrefix(ArgEnum type) const$/;"	f	class:OpenXcom::ScriptParserBase
getTypeScript	Mod/Armor.cpp	/^void getTypeScript(const Armor* r, ScriptText& txt)$/;"	f	namespace:OpenXcom::__anon17
getTypeScript	Mod/RuleCraft.cpp	/^void getTypeScript(const RuleCraft* r, ScriptText& txt)$/;"	f	namespace:OpenXcom::__anon27
getTypeScript	Mod/RuleInventory.cpp	/^void getTypeScript(const RuleInventory* bu, int& type)$/;"	f	namespace:OpenXcom::__anon25
getTypeScript	Mod/RuleItem.cpp	/^void getTypeScript(const RuleItem* r, ScriptText& txt)$/;"	f	namespace:OpenXcom::__anon21
getTypeScript	Mod/RuleSkill.cpp	/^void getTypeScript(const RuleSkill* r, ScriptText& txt)$/;"	f	namespace:OpenXcom::__anon22
getTypeScript	Mod/RuleSoldier.cpp	/^void getTypeScript(const RuleSkill* r, ScriptText& txt)$/;"	f	namespace:OpenXcom::__anon19
getTypeScript	Mod/Unit.cpp	/^void getTypeScript(const Unit* r, ScriptText& txt)$/;"	f	namespace:OpenXcom::__anon14
getTypeTotal	Savegame/SoldierDiary.cpp	/^std::map<std::string, int> SoldierDiary::getTypeTotal(std::vector<MissionStatistics*> *missionStatistics) const$/;"	f	class:OpenXcom::SoldierDiary
getUFOName	Mod/MapScript.cpp	/^std::string MapScript::getUFOName() const$/;"	f	class:OpenXcom::MapScript
getUFOTotal	Savegame/SoldierDiary.cpp	/^std::map<std::string, int> SoldierDiary::getUFOTotal(std::vector<MissionStatistics*> *missionStatistics) const$/;"	f	class:OpenXcom::SoldierDiary
getUfo	Geoscape/DogfightState.cpp	/^Ufo *DogfightState::getUfo() const$/;"	f	class:OpenXcom::DogfightState
getUfo	Mod/Mod.cpp	/^RuleUfo *Mod::getUfo(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getUfoBeamWidthParameter	Mod/Mod.h	/^	int getUfoBeamWidthParameter() const { return _ufoBeamWidthParameter; }$/;"	f	class:OpenXcom::Mod
getUfoEscapeCountdownCoefficients	Mod/Mod.h	/^	const std::vector<int>& getUfoEscapeCountdownCoefficients() { return _ufoEscapeCountdownCoefficients; }$/;"	f	class:OpenXcom::Mod
getUfoFiringRateCoefficients	Mod/Mod.h	/^	const std::vector<int>& getUfoFiringRateCoefficients() { return _ufoFiringRateCoefficients; }$/;"	f	class:OpenXcom::Mod
getUfoFollowers	Savegame/Target.cpp	/^std::vector<Ufo*> Target::getUfoFollowers() const$/;"	f	class:OpenXcom::Target
getUfoGlancingHitThreshold	Mod/Mod.h	/^	int getUfoGlancingHitThreshold() const { return _ufoGlancingHitThreshold; }$/;"	f	class:OpenXcom::Mod
getUfoTractorBeamSizeModifier	Mod/Mod.h	/^	int getUfoTractorBeamSizeModifier(int ufoSize) const { return _ufoTractorBeamSizeModifiers[ufoSize]; }$/;"	f	class:OpenXcom::Mod
getUfoTrajectory	Mod/Mod.cpp	/^const UfoTrajectory *Mod::getUfoTrajectory(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getUfopaedia	Mod/RuleConverter.h	/^	const std::vector<std::string> &getUfopaedia() const { return _ufopaedia; }$/;"	f	class:OpenXcom::RuleConverter
getUfopaediaArticle	Mod/Mod.cpp	/^ArticleDefinition *Mod::getUfopaediaArticle(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getUfopaediaCategoryList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getUfopaediaCategoryList() const$/;"	f	class:OpenXcom::Mod
getUfopaediaList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getUfopaediaList() const$/;"	f	class:OpenXcom::Mod
getUfopaediaSections	Mod/Mod.h	/^	const std::map<std::string, int> &getUfopaediaSections() const { return _ufopaediaSections; }$/;"	f	class:OpenXcom::Mod
getUfopediaRuleStatus	Savegame/SavedGame.cpp	/^int SavedGame::getUfopediaRuleStatus(const std::string &ufopediaRule)$/;"	f	class:OpenXcom::SavedGame
getUfopediaType	Mod/Armor.cpp	/^const std::string& Armor::getUfopediaType() const$/;"	f	class:OpenXcom::Armor
getUfos	Mod/RuleConverter.h	/^	const std::vector<std::string> &getUfos() const { return _ufos; }$/;"	f	class:OpenXcom::RuleConverter
getUfos	Savegame/SavedGame.cpp	/^const std::vector<Ufo*> *SavedGame::getUfos() const$/;"	f	class:OpenXcom::SavedGame
getUfos	Savegame/SavedGame.cpp	/^std::vector<Ufo*> *SavedGame::getUfos()$/;"	f	class:OpenXcom::SavedGame
getUfosList	Mod/Mod.cpp	/^const std::vector<std::string> &Mod::getUfosList() const$/;"	f	class:OpenXcom::Mod
getUnderArmor	Mod/Armor.cpp	/^int Armor::getUnderArmor() const$/;"	f	class:OpenXcom::Armor
getUnderArmor	Mod/RuleSoldierBonus.h	/^	int getUnderArmor() const { return _underArmor; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getUnderwaterThrowRange	Mod/RuleItem.h	/^	int getUnderwaterThrowRange() const { return _underwaterThrowRange; }$/;"	f	class:OpenXcom::RuleItem
getUnderwaterThrowRangeSq	Mod/RuleItem.h	/^	int getUnderwaterThrowRangeSq() const { return _underwaterThrowRange * _underwaterThrowRange; }$/;"	f	class:OpenXcom::RuleItem
getUniqueId	Savegame/Craft.cpp	/^CraftId Craft::getUniqueId() const$/;"	f	class:OpenXcom::Craft
getUniqueId	Savegame/Ufo.cpp	/^int Ufo::getUniqueId() const$/;"	f	class:OpenXcom::Ufo
getUnit	Mod/Mod.cpp	/^Unit *Mod::getUnit(const std::string &name, bool error) const$/;"	f	class:OpenXcom::Mod
getUnit	Savegame/BattleItem.cpp	/^BattleUnit *BattleItem::getUnit()$/;"	f	class:OpenXcom::BattleItem
getUnit	Savegame/BattleItem.cpp	/^const BattleUnit *BattleItem::getUnit() const$/;"	f	class:OpenXcom::BattleItem
getUnit	Savegame/Tile.h	/^	BattleUnit *getUnit() const$/;"	f	class:OpenXcom::Tile
getUnitBodyPartString	Savegame/BattleUnitStatistics.h	/^	std::string getUnitBodyPartString() const$/;"	f	struct:OpenXcom::BattleUnitKills
getUnitFactionString	Savegame/BattleUnitStatistics.h	/^	std::string getUnitFactionString() const$/;"	f	struct:OpenXcom::BattleUnitKills
getUnitMoraleModifier	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getUnitMoraleModifier(BattleUnit* unit)$/;"	f	class:OpenXcom::SavedBattleGame
getUnitName	Savegame/BattleUnitStatistics.h	/^	std::string getUnitName(Language *lang) const$/;"	f	struct:OpenXcom::BattleUnitKills
getUnitRules	Savegame/BattleUnit.h	/^	Unit *getUnitRules() const { return _unitRules; }$/;"	f	class:OpenXcom::BattleUnit
getUnitScript	Mod/Mod.cpp	/^void getUnitScript(const Mod* mod, const Unit* &unit, const std::string &name)$/;"	f	namespace:OpenXcom::__anon30
getUnitScript	Savegame/Tile.cpp	/^void getUnitScript(const Tile *t, const BattleUnit*& ret)$/;"	f	namespace:OpenXcom::__anon43
getUnitSideString	Savegame/BattleUnitStatistics.h	/^	std::string getUnitSideString() const$/;"	f	struct:OpenXcom::BattleUnitKills
getUnitStatusString	Savegame/BattleUnitStatistics.h	/^	std::string getUnitStatusString() const$/;"	f	struct:OpenXcom::BattleUnitKills
getUnits	Mod/Armor.cpp	/^const std::vector<const RuleSoldier*> &Armor::getUnits() const$/;"	f	class:OpenXcom::Armor
getUnits	Savegame/SavedBattleGame.cpp	/^std::vector<BattleUnit*> *SavedBattleGame::getUnits()$/;"	f	class:OpenXcom::SavedBattleGame
getUnitsFalling	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::getUnitsFalling() const$/;"	f	class:OpenXcom::SavedBattleGame
getUnitsSpottedThisTurn	Savegame/BattleUnit.cpp	/^const std::vector<BattleUnit *> &BattleUnit::getUnitsSpottedThisTurn() const$/;"	f	class:OpenXcom::BattleUnit
getUnitsSpottedThisTurn	Savegame/BattleUnit.cpp	/^std::vector<BattleUnit *> &BattleUnit::getUnitsSpottedThisTurn()$/;"	f	class:OpenXcom::BattleUnit
getUnlocked	Mod/RuleResearch.cpp	/^const std::vector<const RuleResearch*> &RuleResearch::getUnlocked() const$/;"	f	class:OpenXcom::RuleResearch
getUnlockedResearchOnDespawn	Mod/AlienDeployment.h	/^	const std::string& getUnlockedResearchOnDespawn() const { return _unlockedResearchOnDespawn; }$/;"	f	class:OpenXcom::AlienDeployment
getUnlockedResearchOnFailure	Mod/AlienDeployment.h	/^	const std::string& getUnlockedResearchOnFailure() const { return _unlockedResearchOnFailure; }$/;"	f	class:OpenXcom::AlienDeployment
getUnlockedResearchOnSuccess	Mod/AlienDeployment.h	/^	const std::string& getUnlockedResearchOnSuccess() const { return _unlockedResearchOnSuccess; }$/;"	f	class:OpenXcom::AlienDeployment
getUnprimeActionMessage	Mod/RuleItem.h	/^	const std::string &getUnprimeActionMessage() const { return _unprimeActionMessage; }$/;"	f	class:OpenXcom::RuleItem
getUnprimeActionName	Mod/RuleItem.h	/^	const std::string &getUnprimeActionName() const { return _unprimeActionName; }$/;"	f	class:OpenXcom::RuleItem
getUnprimeSound	Mod/RuleItem.cpp	/^int RuleItem::getUnprimeSound() const$/;"	f	class:OpenXcom::RuleItem
getUnprimeSoundRaw	Mod/RuleItem.h	/^	const std::vector<int>& getUnprimeSoundRaw() const { return _unprimeSound; }$/;"	f	class:OpenXcom::RuleItem
getUpdateFlag	Engine/Game.h	/^	bool getUpdateFlag() const { return _update; }$/;"	f	class:OpenXcom::Game
getUpgradeRace	Mod/AlienDeployment.h	/^	const std::string& getUpgradeRace() const { return _upgradeRace; }$/;"	f	class:OpenXcom::AlienDeployment
getUseTable	Mod/RuleMissionScript.cpp	/^bool RuleMissionScript::getUseTable() const$/;"	f	class:OpenXcom::RuleMissionScript
getUsedContainment	Savegame/Base.cpp	/^int Base::getUsedContainment(int prisonType, bool onlyExternal) const$/;"	f	class:OpenXcom::Base
getUsedHangars	Savegame/Base.cpp	/^int Base::getUsedHangars() const$/;"	f	class:OpenXcom::Base
getUsedLaboratories	Savegame/Base.cpp	/^int Base::getUsedLaboratories() const$/;"	f	class:OpenXcom::Base
getUsedPsiLabs	Savegame/Base.cpp	/^int Base::getUsedPsiLabs() const$/;"	f	class:OpenXcom::Base
getUsedQuarters	Savegame/Base.cpp	/^int Base::getUsedQuarters() const$/;"	f	class:OpenXcom::Base
getUsedStores	Savegame/Base.cpp	/^double Base::getUsedStores(bool excludeNormalItems) const$/;"	f	class:OpenXcom::Base
getUsedTraining	Savegame/Base.cpp	/^int Base::getUsedTraining() const$/;"	f	class:OpenXcom::Base
getUsedWorkshops	Savegame/Base.cpp	/^int Base::getUsedWorkshops() const$/;"	f	class:OpenXcom::Base
getUserFolder	Engine/Options.cpp	/^std::string getUserFolder()$/;"	f	namespace:OpenXcom::Options
getUserNotes	Savegame/SavedGame.h	/^	std::vector<std::string>& getUserNotes() { return _userNotes; }$/;"	f	class:OpenXcom::SavedGame
getUtf8Locale	Engine/Unicode.cpp	/^void getUtf8Locale()$/;"	f	namespace:OpenXcom::Unicode
getUtileColor	Mod/Armor.cpp	/^int Armor::getUtileColor(int i) const$/;"	f	class:OpenXcom::Armor
getUtileColorGroup	Mod/Armor.cpp	/^int Armor::getUtileColorGroup() const$/;"	f	class:OpenXcom::Armor
getUtileColorRaw	Mod/Armor.h	/^	const std::vector<int> &getUtileColorRaw() const { return _utileColor; }$/;"	f	class:OpenXcom::Armor
getUtilityWeapon	Savegame/BattleUnit.cpp	/^BattleItem *BattleUnit::getUtilityWeapon(BattleType type)$/;"	f	class:OpenXcom::BattleUnit
getVFolderContents	Engine/FileMap.cpp	/^const NameSet &getVFolderContents(const std::string &relativePath) {$/;"	f	namespace:OpenXcom::FileMap
getVFolderContents	Engine/FileMap.cpp	/^const NameSet &getVFolderContents(const std::string &relativePath, size_t level) {$/;"	f	namespace:OpenXcom::FileMap
getVIPEscapeType	Savegame/SavedBattleGame.cpp	/^EscapeType SavedBattleGame::getVIPEscapeType() const$/;"	f	class:OpenXcom::SavedBattleGame
getVIPSurvivalPercentage	Mod/AlienDeployment.h	/^	int getVIPSurvivalPercentage() const { return _vipSurvivalPercentage; }$/;"	f	class:OpenXcom::AlienDeployment
getVIPSurvivalPercentage	Savegame/SavedBattleGame.cpp	/^int SavedBattleGame::getVIPSurvivalPercentage() const$/;"	f	class:OpenXcom::SavedBattleGame
getValiantCruxTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getValiantCruxTotal(std::vector<MissionStatistics*> *missionStatistics) const$/;"	f	class:OpenXcom::SoldierDiary
getValue	Engine/ScriptBind.h	/^		CompType getValue(ScriptValueData data)$/;"	f	class:OpenXcom::ParserWriter::ReservedCrossRefrenece
getValue	Interface/Bar.cpp	/^double Bar::getValue() const$/;"	f	class:OpenXcom::Bar
getValue	Interface/NumberText.cpp	/^unsigned int NumberText::getValue() const$/;"	f	class:OpenXcom::NumberText
getValue	Interface/Slider.cpp	/^int Slider::getValue() const$/;"	f	class:OpenXcom::Slider
getValue	Mod/RuleSoldier.cpp	/^int RuleSoldier::getValue() const$/;"	f	class:OpenXcom::RuleSoldier
getValue	Mod/Unit.cpp	/^int Unit::getValue() const$/;"	f	class:OpenXcom::Unit
getValue	Savegame/BattleUnit.cpp	/^int BattleUnit::getValue() const$/;"	f	class:OpenXcom::BattleUnit
getValue2	Interface/Bar.cpp	/^double Bar::getValue2() const$/;"	f	class:OpenXcom::Bar
getValueNoise	Geoscape/Globe.cpp	/^	int getValueNoise(Sint16 n)$/;"	f	struct:OpenXcom::__anon49::GlobeStaticData
getValueRequiredBits	lodepng.cpp	/^static unsigned getValueRequiredBits(unsigned char value)$/;"	f	file:
getVaporColor	Mod/RuleItem.cpp	/^int RuleItem::getVaporColor(int depth) const$/;"	f	class:OpenXcom::RuleItem
getVaporDensity	Mod/RuleItem.cpp	/^int RuleItem::getVaporDensity(int depth) const$/;"	f	class:OpenXcom::RuleItem
getVaporParticle	Battlescape/Map.cpp	/^Collections::Range<const Particle*> Map::getVaporParticle(const Tile* tile, bool topLayer) const$/;"	f	class:OpenXcom::Map
getVaporProbability	Mod/RuleItem.cpp	/^int RuleItem::getVaporProbability(int depth) const$/;"	f	class:OpenXcom::RuleItem
getVarName	Mod/RuleMissionScript.cpp	/^std::string RuleMissionScript::getVarName() const$/;"	f	class:OpenXcom::RuleMissionScript
getVehicleClipAmmo	Mod/RuleItem.cpp	/^const RuleItem* RuleItem::getVehicleClipAmmo() const$/;"	f	class:OpenXcom::RuleItem
getVehicleClipSize	Mod/RuleItem.cpp	/^int RuleItem::getVehicleClipSize() const$/;"	f	class:OpenXcom::RuleItem
getVehicleClipsLoaded	Mod/RuleItem.cpp	/^int RuleItem::getVehicleClipsLoaded() const$/;"	f	class:OpenXcom::RuleItem
getVehicleCount	Savegame/Craft.cpp	/^int Craft::getVehicleCount(const std::string &vehicle) const$/;"	f	class:OpenXcom::Craft
getVehicleUnit	Mod/RuleItem.cpp	/^Unit* RuleItem::getVehicleUnit() const$/;"	f	class:OpenXcom::RuleItem
getVehicles	Savegame/Base.cpp	/^std::vector<Vehicle*> *Base::getVehicles()$/;"	f	class:OpenXcom::Base
getVehicles	Savegame/Craft.cpp	/^std::vector<Vehicle*> *Craft::getVehicles()$/;"	f	class:OpenXcom::Craft
getVersion	Engine/ModInfo.cpp	/^const std::string &ModInfo::getVersion()                 const { return _version.first;           }$/;"	f	class:OpenXcom::ModInfo
getVersionDisplay	Engine/ModInfo.cpp	/^const std::string &ModInfo::getVersionDisplay()          const { return _versionDisplay;          }$/;"	f	class:OpenXcom::ModInfo
getVerticalAlign	Interface/Text.cpp	/^TextVAlign Text::getVerticalAlign() const$/;"	f	class:OpenXcom::Text
getVerticalDirection	Savegame/BattleUnit.cpp	/^int BattleUnit::getVerticalDirection() const$/;"	f	class:OpenXcom::BattleUnit
getVerticalGroup	Mod/MapScript.h	/^	int getVerticalGroup() const { return _verticalGroup; };$/;"	f	class:OpenXcom::MapScript
getVerticalLevels	Mod/MapScript.cpp	/^const std::vector<VerticalLevel> &MapScript::getVerticalLevels() const$/;"	f	class:OpenXcom::MapScript
getVerticalLevels	Mod/RuleBaseFacility.cpp	/^const std::vector<VerticalLevel> &RuleBaseFacility::getVerticalLevels() const$/;"	f	class:OpenXcom::RuleBaseFacility
getVideo	Mod/Mod.cpp	/^RuleVideo *Mod::getVideo(const std::string &id, bool error) const$/;"	f	class:OpenXcom::Mod
getVideos	Mod/RuleVideo.cpp	/^const std::vector<std::string> * RuleVideo::getVideos() const$/;"	f	class:OpenXcom::RuleVideo
getViewLevel	Battlescape/Camera.cpp	/^int Camera::getViewLevel() const$/;"	f	class:OpenXcom::Camera
getVisibility	Savegame/Ufo.cpp	/^int Ufo::getVisibility() const$/;"	f	class:OpenXcom::Ufo
getVisibilityAtDark	Mod/Armor.cpp	/^int Armor::getVisibilityAtDark() const$/;"	f	class:OpenXcom::Armor
getVisibilityAtDark	Mod/RuleSoldierBonus.h	/^	int getVisibilityAtDark() const { return _visibilityAtDark; }$/;"	f	class:OpenXcom::RuleSoldierBonus
getVisibilityAtDay	Mod/Armor.cpp	/^int Armor::getVisibilityAtDay() const$/;"	f	class:OpenXcom::Armor
getVisibilityUpdateRange	Savegame/BattleItem.cpp	/^int BattleItem::getVisibilityUpdateRange() const$/;"	f	class:OpenXcom::BattleItem
getVisible	Engine/Surface.cpp	/^bool Surface::getVisible() const$/;"	f	class:OpenXcom::Surface
getVisible	Savegame/BattleUnit.cpp	/^bool BattleUnit::getVisible() const$/;"	f	class:OpenXcom::BattleUnit
getVisible	Savegame/Tile.cpp	/^int Tile::getVisible() const$/;"	f	class:OpenXcom::Tile
getVisibleRows	Interface/TextList.cpp	/^size_t TextList::getVisibleRows() const$/;"	f	class:OpenXcom::TextList
getVisibleTiles	Savegame/BattleUnit.cpp	/^const std::vector<Tile*> *BattleUnit::getVisibleTiles()$/;"	f	class:OpenXcom::BattleUnit
getVisibleUnits	Savegame/BattleUnit.cpp	/^std::vector<BattleUnit*> *BattleUnit::getVisibleUnits()$/;"	f	class:OpenXcom::BattleUnit
getVisibleUnitsCountScript	Savegame/BattleUnit.cpp	/^void getVisibleUnitsCountScript(BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
getVoxelData	Mod/Mod.cpp	/^const std::vector<Uint16> *Mod::getVoxelData() const$/;"	f	class:OpenXcom::Mod
getVoxelZ	Battlescape/Particle.h	/^	int getVoxelZ() const { return _voxelZ; }$/;"	f	class:OpenXcom::Particle
getWaitForAltitude	Geoscape/DogfightState.cpp	/^bool DogfightState::getWaitForAltitude() const$/;"	f	class:OpenXcom::DogfightState
getWaitForPoly	Geoscape/DogfightState.cpp	/^bool DogfightState::getWaitForPoly() const$/;"	f	class:OpenXcom::DogfightState
getWalkingPhase	Savegame/BattleUnit.cpp	/^int BattleUnit::getWalkingPhase() const$/;"	f	class:OpenXcom::BattleUnit
getWallShade	Battlescape/Map.cpp	/^int Map::getWallShade(TilePart part, Tile* tileFrot)$/;"	f	class:OpenXcom::Map
getWarned	Savegame/SavedGame.cpp	/^bool SavedGame::getWarned() const$/;"	f	class:OpenXcom::SavedGame
getWasHitBy	Battlescape/AIModule.cpp	/^bool AIModule::getWasHitBy(int attacker) const$/;"	f	class:OpenXcom::AIModule
getWave	Mod/RuleAlienMission.h	/^	const MissionWave &getWave(size_t index) const { return _waves[index]; }$/;"	f	class:OpenXcom::RuleAlienMission
getWaveCount	Mod/RuleAlienMission.h	/^	size_t getWaveCount() const { return _waves.size(); }$/;"	f	class:OpenXcom::RuleAlienMission
getWaveCountdown	Savegame/AlienMission.h	/^	size_t getWaveCountdown() const { return _spawnCountdown; }$/;"	f	class:OpenXcom::AlienMission
getWaypoint	Savegame/AlienMission.cpp	/^std::pair<double, double> AlienMission::getWaypoint(const MissionWave &wave, const UfoTrajectory &trajectory, const size_t nextWaypoint, const Globe &globe, const RuleRegion &region, const Ufo &ufo)$/;"	f	class:OpenXcom::AlienMission
getWaypointCount	Mod/UfoTrajectory.h	/^	size_t getWaypointCount() const { return _waypoints.size(); }$/;"	f	class:OpenXcom::UfoTrajectory
getWaypoints	Battlescape/Map.cpp	/^std::vector<Position> *Map::getWaypoints()$/;"	f	class:OpenXcom::Map
getWaypoints	Mod/RuleItem.cpp	/^int RuleItem::getWaypoints() const$/;"	f	class:OpenXcom::RuleItem
getWaypoints	Savegame/SavedGame.cpp	/^std::vector<Waypoint*> *SavedGame::getWaypoints()$/;"	f	class:OpenXcom::SavedGame
getWeaponAmmoTotal	Savegame/SoldierDiary.cpp	/^std::map<std::string, int> SoldierDiary::getWeaponAmmoTotal()$/;"	f	class:OpenXcom::SoldierDiary
getWeaponForReactions	Savegame/BattleUnit.cpp	/^BattleItem *BattleUnit::getWeaponForReactions(bool meleeOnly) const$/;"	f	class:OpenXcom::BattleUnit
getWeaponPower	Mod/RuleUfo.cpp	/^int RuleUfo::getWeaponPower() const$/;"	f	class:OpenXcom::RuleUfo
getWeaponRange	Mod/RuleUfo.cpp	/^int RuleUfo::getWeaponRange() const$/;"	f	class:OpenXcom::RuleUfo
getWeaponReload	Mod/RuleUfo.cpp	/^int RuleUfo::getWeaponReload() const$/;"	f	class:OpenXcom::RuleUfo
getWeaponSlotString	Mod/RuleCraft.cpp	/^const std::string &RuleCraft::getWeaponSlotString(int slot) const$/;"	f	class:OpenXcom::RuleCraft
getWeaponTotal	Savegame/SoldierDiary.cpp	/^std::map<std::string, int> SoldierDiary::getWeaponTotal()$/;"	f	class:OpenXcom::SoldierDiary
getWeaponType	Mod/RuleCraftWeapon.cpp	/^int RuleCraftWeapon::getWeaponType() const$/;"	f	class:OpenXcom::RuleCraftWeapon
getWeaponTypesRaw	Mod/RuleCraft.cpp	/^int RuleCraft::getWeaponTypesRaw(int slot, int subslot) const$/;"	f	class:OpenXcom::RuleCraft
getWeapons	Mod/RuleCraft.cpp	/^int RuleCraft::getWeapons() const$/;"	f	class:OpenXcom::RuleCraft
getWeapons	Savegame/Craft.cpp	/^std::vector<CraftWeapon*> *Craft::getWeapons()$/;"	f	class:OpenXcom::Craft
getWeekday	Savegame/GameTime.cpp	/^int GameTime::getWeekday() const$/;"	f	class:OpenXcom::GameTime
getWeekdayString	Savegame/GameTime.cpp	/^std::string GameTime::getWeekdayString() const$/;"	f	class:OpenXcom::GameTime
getWeight	Mod/Armor.cpp	/^int Armor::getWeight() const$/;"	f	class:OpenXcom::Armor
getWeight	Mod/RuleAlienMission.cpp	/^int RuleAlienMission::getWeight(const size_t monthsPassed) const$/;"	f	class:OpenXcom::RuleAlienMission
getWeight	Mod/RuleItem.cpp	/^int RuleItem::getWeight() const$/;"	f	class:OpenXcom::RuleItem
getWeight	Mod/RuleRegion.cpp	/^size_t RuleRegion::getWeight() const$/;"	f	class:OpenXcom::RuleRegion
getWeightedItemList	Mod/RuleEvent.h	/^	const WeightedOptions &getWeightedItemList() const { return _weightedItemList; }$/;"	f	class:OpenXcom::RuleEvent
getWidth	Engine/Font.cpp	/^int Font::getWidth() const$/;"	f	class:OpenXcom::Font
getWidth	Engine/Screen.cpp	/^int Screen::getWidth() const$/;"	f	class:OpenXcom::Screen
getWidth	Engine/Surface.h	/^	int getWidth() const$/;"	f	class:OpenXcom::Surface
getWidth	Engine/Surface.h	/^	int getWidth() const$/;"	f	class:OpenXcom::SurfaceRaw
getWidth	Engine/SurfaceSet.cpp	/^int SurfaceSet::getWidth() const$/;"	f	class:OpenXcom::SurfaceSet
getWidth	Mod/ExtraSprites.cpp	/^int ExtraSprites::getWidth() const$/;"	f	class:OpenXcom::ExtraSprites
getWinCutscene	Mod/AlienDeployment.cpp	/^std::string AlienDeployment::getWinCutscene() const$/;"	f	class:OpenXcom::AlienDeployment
getWinGame	Mod/RuleVideo.h	/^	bool getWinGame() const { return _winGame; }$/;"	f	class:OpenXcom::RuleVideo
getWinTotal	Savegame/SoldierDiary.cpp	/^int SoldierDiary::getWinTotal(std::vector<MissionStatistics*> *missionStatistics) const$/;"	f	class:OpenXcom::SoldierDiary
getWindowsResource	Engine/CrossPlatform.cpp	/^static void *getWindowsResource(int res_id, size_t *size) {$/;"	f	namespace:OpenXcom::CrossPlatform
getWorkshops	Mod/RuleBaseFacility.cpp	/^int RuleBaseFacility::getWorkshops() const$/;"	f	class:OpenXcom::RuleBaseFacility
getWoundFinalDamage	Mod/RuleDamageType.cpp	/^int RuleDamageType::getWoundFinalDamage(int damage) const$/;"	f	class:OpenXcom::RuleDamageType
getWoundRecovery	Mod/RuleItem.cpp	/^int RuleItem::getWoundRecovery() const$/;"	f	class:OpenXcom::RuleItem
getWoundRecovery	Savegame/Soldier.cpp	/^int Soldier::getWoundRecovery(float absBonus, float relBonus) const$/;"	f	class:OpenXcom::Soldier
getWoundRecoveryInt	Savegame/Soldier.cpp	/^int Soldier::getWoundRecoveryInt() const$/;"	f	class:OpenXcom::Soldier
getX	Battlescape/Particle.h	/^	float getX() const { return _xOffset; }$/;"	f	class:OpenXcom::Particle
getX	Engine/Surface.h	/^	int getX() const$/;"	f	class:OpenXcom::Surface
getX	Engine/Surface.h	/^	int getX() const$/;"	f	class:OpenXcom::SurfaceCrop
getX	Mod/Polygon.cpp	/^Sint16 Polygon::getX(int i) const$/;"	f	class:OpenXcom::Polygon
getX	Mod/RuleInventory.cpp	/^int RuleInventory::getX() const$/;"	f	class:OpenXcom::RuleInventory
getX	Savegame/BaseFacility.cpp	/^int BaseFacility::getX() const$/;"	f	class:OpenXcom::BaseFacility
getXCOMProperty	Savegame/BattleItem.cpp	/^bool BattleItem::getXCOMProperty() const$/;"	f	class:OpenXcom::BattleItem
getXMouse	Engine/Action.cpp	/^int Action::getXMouse() const$/;"	f	class:OpenXcom::Action
getXScale	Engine/Action.cpp	/^double Action::getXScale() const$/;"	f	class:OpenXcom::Action
getXScale	Engine/Screen.cpp	/^double Screen::getXScale() const$/;"	f	class:OpenXcom::Screen
getXcomBaseInCountryTriggers	Mod/RuleArcScript.h	/^	const std::map<std::string, bool> &getXcomBaseInCountryTriggers() const { return _xcomBaseInCountryTriggers; }$/;"	f	class:OpenXcom::RuleArcScript
getXcomBaseInCountryTriggers	Mod/RuleEventScript.h	/^	const std::map<std::string, bool> &getXcomBaseInCountryTriggers() const { return _xcomBaseInCountryTriggers; }$/;"	f	class:OpenXcom::RuleEventScript
getXcomBaseInCountryTriggers	Mod/RuleMissionScript.cpp	/^const std::map<std::string, bool> &RuleMissionScript::getXcomBaseInCountryTriggers() const$/;"	f	class:OpenXcom::RuleMissionScript
getXcomBaseInRegionTriggers	Mod/RuleArcScript.h	/^	const std::map<std::string, bool> &getXcomBaseInRegionTriggers() const { return _xcomBaseInRegionTriggers; }$/;"	f	class:OpenXcom::RuleArcScript
getXcomBaseInRegionTriggers	Mod/RuleEventScript.h	/^	const std::map<std::string, bool> &getXcomBaseInRegionTriggers() const { return _xcomBaseInRegionTriggers; }$/;"	f	class:OpenXcom::RuleEventScript
getXcomBaseInRegionTriggers	Mod/RuleMissionScript.cpp	/^const std::map<std::string, bool> &RuleMissionScript::getXcomBaseInRegionTriggers() const$/;"	f	class:OpenXcom::RuleMissionScript
getY	Battlescape/Particle.h	/^	float getY() const { return _yOffset; }$/;"	f	class:OpenXcom::Particle
getY	Engine/Surface.h	/^	int getY() const$/;"	f	class:OpenXcom::Surface
getY	Engine/Surface.h	/^	int getY() const$/;"	f	class:OpenXcom::SurfaceCrop
getY	Mod/Polygon.cpp	/^Sint16 Polygon::getY(int i) const$/;"	f	class:OpenXcom::Polygon
getY	Mod/RuleInventory.cpp	/^int RuleInventory::getY() const$/;"	f	class:OpenXcom::RuleInventory
getY	Savegame/BaseFacility.cpp	/^int BaseFacility::getY() const$/;"	f	class:OpenXcom::BaseFacility
getYAML	Engine/FileMap.cpp	/^YAML::Node FileRecord::getYAML() const$/;"	f	class:OpenXcom::FileMap::FileRecord
getYAML	Engine/FileMap.cpp	/^YAML::Node getYAML(const std::string &relativeFilePath) {$/;"	f	namespace:OpenXcom::FileMap
getYMouse	Engine/Action.cpp	/^int Action::getYMouse() const$/;"	f	class:OpenXcom::Action
getYOffset	Mod/MapData.cpp	/^int MapData::getYOffset() const$/;"	f	class:OpenXcom::MapData
getYOffset	Savegame/Tile.h	/^	int getYOffset(TilePart tp) const$/;"	f	class:OpenXcom::Tile
getYScale	Engine/Action.cpp	/^double Action::getYScale() const$/;"	f	class:OpenXcom::Action
getYScale	Engine/Screen.cpp	/^double Screen::getYScale() const$/;"	f	class:OpenXcom::Screen
getYamlSaveHeader	Engine/CrossPlatform.cpp	/^std::unique_ptr<std::istream> getYamlSaveHeader(const std::string& filename) {$/;"	f	namespace:OpenXcom::CrossPlatform
getYear	Savegame/GameTime.cpp	/^int GameTime::getYear() const$/;"	f	class:OpenXcom::GameTime
getZombiImmune	Mod/Armor.cpp	/^bool Armor::getZombiImmune(bool def) const$/;"	f	class:OpenXcom::Armor
getZombieUnit	Mod/RuleItem.cpp	/^const std::string &RuleItem::getZombieUnit(const BattleUnit* victim) const$/;"	f	class:OpenXcom::RuleItem
getZombieUnitByArmorFemaleRaw	Mod/RuleItem.h	/^	const std::map<std::string, std::string> &getZombieUnitByArmorFemaleRaw() const { return _zombieUnitByArmorFemale; }$/;"	f	class:OpenXcom::RuleItem
getZombieUnitByArmorMaleRaw	Mod/RuleItem.h	/^	const std::map<std::string, std::string> &getZombieUnitByArmorMaleRaw() const { return _zombieUnitByArmorMale; }$/;"	f	class:OpenXcom::RuleItem
getZombieUnitByTypeRaw	Mod/RuleItem.h	/^	const std::map<std::string, std::string> &getZombieUnitByTypeRaw() const { return _zombieUnitByType; }$/;"	f	class:OpenXcom::RuleItem
getZone	Mod/UfoTrajectory.h	/^	size_t getZone(size_t wp) const { return _waypoints[wp].zone; }$/;"	f	class:OpenXcom::UfoTrajectory
getZoom	Geoscape/Globe.cpp	/^size_t Globe::getZoom() const$/;"	f	class:OpenXcom::Globe
getZoomLevel	Mod/RuleCountry.cpp	/^int RuleCountry::getZoomLevel() const$/;"	f	class:OpenXcom::RuleCountry
get_numseq	Engine/Adlib/adlplayer.cpp	/^int get_numseq(unsigned char** mus_ptr)$/;"	f
get_pitched_freq_instr	Engine/Adlib/adlplayer.cpp	/^int get_pitched_freq_instr(int note, int instrument)$/;"	f
get_range	Engine/ShaderDrawHelper.h	/^	inline const GraphSubset& get_range()$/;"	f	struct:OpenXcom::helper::controler_base
get_ref	Engine/ShaderDrawHelper.h	/^	inline PixelRef get_ref()$/;"	f	struct:OpenXcom::helper::controler_base
get_ref	Engine/ShaderDrawHelper.h	/^	inline T& get_ref()$/;"	f	struct:OpenXcom::helper::controler
get_ref	Engine/ShaderRepeat.h	/^	inline PixelRef get_ref()$/;"	f	struct:OpenXcom::helper::controler
get_rulesets	Engine/FileMap.cpp	/^	const RSOrder &get_rulesets() { return rsorder; }$/;"	f	struct:OpenXcom::FileMap::VFS
get_rulesets	Engine/FileMap.cpp	/^	const std::vector<FileRecord>& get_rulesets() { return rulesets; }$/;"	f	struct:OpenXcom::FileMap::VFSLayer
get_slice	Engine/FileMap.cpp	/^	const std::vector<const FileRecord *> get_slice(const std::string& relpath) { return stack.get_slice(relpath); }$/;"	f	struct:OpenXcom::FileMap::VFS
get_slice	Engine/FileMap.cpp	/^	const std::vector<const FileRecord *> get_slice(const std::string& relpath) {$/;"	f	struct:OpenXcom::FileMap::VFSLayerStack
glAttachShader	Engine/OpenGL.cpp	/^PFNGLATTACHSHADERPROC glAttachShader = 0;$/;"	m	namespace:OpenXcom	file:
glCompileShader	Engine/OpenGL.cpp	/^PFNGLCOMPILESHADERPROC glCompileShader = 0;$/;"	m	namespace:OpenXcom	file:
glCreateProgram	Engine/OpenGL.cpp	/^PFNGLCREATEPROGRAMPROC glCreateProgram = 0;$/;"	m	namespace:OpenXcom	file:
glCreateShader	Engine/OpenGL.cpp	/^PFNGLCREATESHADERPROC glCreateShader = 0;$/;"	m	namespace:OpenXcom	file:
glDeleteProgram	Engine/OpenGL.cpp	/^PFNGLDELETEPROGRAMPROC glDeleteProgram = 0;$/;"	m	namespace:OpenXcom	file:
glDeleteShader	Engine/OpenGL.cpp	/^PFNGLDELETESHADERPROC glDeleteShader = 0;$/;"	m	namespace:OpenXcom	file:
glDetachShader	Engine/OpenGL.cpp	/^PFNGLDETACHSHADERPROC glDetachShader = 0;$/;"	m	namespace:OpenXcom	file:
glErrorCheck	Engine/OpenGL.h	30;"	d
glGetAttachedShaders	Engine/OpenGL.cpp	/^PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders = 0;$/;"	m	namespace:OpenXcom	file:
glGetProcAddress	Engine/OpenGL.cpp	/^inline static GenericFunctionPointer glGetProcAddress(const char *name)$/;"	f	namespace:OpenXcom
glGetProgramInfoLog	Engine/OpenGL.cpp	/^PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog = 0;$/;"	m	namespace:OpenXcom	file:
glGetProgramiv	Engine/OpenGL.cpp	/^PFNGLGETPROGRAMIVPROC glGetProgramiv = 0;$/;"	m	namespace:OpenXcom	file:
glGetShaderInfoLog	Engine/OpenGL.cpp	/^PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog = 0;$/;"	m	namespace:OpenXcom	file:
glGetShaderiv	Engine/OpenGL.cpp	/^PFNGLGETSHADERIVPROC glGetShaderiv = 0;$/;"	m	namespace:OpenXcom	file:
glGetUniformLocation	Engine/OpenGL.cpp	/^PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation = 0;$/;"	m	namespace:OpenXcom	file:
glIsProgram	Engine/OpenGL.cpp	/^PFNGLISPROGRAMPROC glIsProgram = 0;$/;"	m	namespace:OpenXcom	file:
glIsShader	Engine/OpenGL.cpp	/^PFNGLISSHADERPROC glIsShader = 0;$/;"	m	namespace:OpenXcom	file:
glLinkProgram	Engine/OpenGL.cpp	/^PFNGLLINKPROGRAMPROC glLinkProgram = 0;$/;"	m	namespace:OpenXcom	file:
glOutput	Engine/Screen.h	/^	OpenGL glOutput;$/;"	m	class:OpenXcom::Screen
glShaderSource	Engine/OpenGL.cpp	/^PFNGLSHADERSOURCEPROC glShaderSource = 0;$/;"	m	namespace:OpenXcom	file:
glUniform1i	Engine/OpenGL.cpp	/^PFNGLUNIFORM1IPROC glUniform1i = 0;$/;"	m	namespace:OpenXcom	file:
glUniform2fv	Engine/OpenGL.cpp	/^PFNGLUNIFORM2FVPROC glUniform2fv = 0;$/;"	m	namespace:OpenXcom	file:
glUniform4fv	Engine/OpenGL.cpp	/^PFNGLUNIFORM4FVPROC glUniform4fv = 0;$/;"	m	namespace:OpenXcom	file:
glUseProgram	Engine/OpenGL.cpp	/^PFNGLUSEPROGRAMPROC glUseProgram = 0;$/;"	m	namespace:OpenXcom	file:
globalChance	Mod/RuleEnviroEffects.h	/^	int globalChance;$/;"	m	struct:OpenXcom::EnvironmentalCondition
globalRandomState	Engine/RNG.cpp	/^RandomState& globalRandomState()$/;"	f	namespace:OpenXcom::RNG
globeAllRadarsOnBaseBuild	Engine/Options.inc.h	/^OPT bool includePrimeStateInSavedLayout, anytimePsiTraining, weaponSelfDestruction, retainCorpses, craftLaunchAlways, globeSeasons, globeDetail, globeRadarLines, globeFlightPaths, globeAllRadarsOnBaseBuild,$/;"	v
globeClick	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::globeClick(Action *action)$/;"	f	class:OpenXcom::BuildNewBaseState
globeClick	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::globeClick(Action *action)$/;"	f	class:OpenXcom::GeoscapeState
globeClick	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::globeClick(Action *action)$/;"	f	class:OpenXcom::SelectDestinationState
globeDetail	Engine/Options.inc.h	/^OPT bool includePrimeStateInSavedLayout, anytimePsiTraining, weaponSelfDestruction, retainCorpses, craftLaunchAlways, globeSeasons, globeDetail, globeRadarLines, globeFlightPaths, globeAllRadarsOnBaseBuild,$/;"	v
globeFlightPaths	Engine/Options.inc.h	/^OPT bool includePrimeStateInSavedLayout, anytimePsiTraining, weaponSelfDestruction, retainCorpses, craftLaunchAlways, globeSeasons, globeDetail, globeRadarLines, globeFlightPaths, globeAllRadarsOnBaseBuild,$/;"	v
globeHover	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::globeHover(Action *action)$/;"	f	class:OpenXcom::BuildNewBaseState
globeRadarLines	Engine/Options.inc.h	/^OPT bool includePrimeStateInSavedLayout, anytimePsiTraining, weaponSelfDestruction, retainCorpses, craftLaunchAlways, globeSeasons, globeDetail, globeRadarLines, globeFlightPaths, globeAllRadarsOnBaseBuild,$/;"	v
globeSeasons	Engine/Options.inc.h	/^OPT bool includePrimeStateInSavedLayout, anytimePsiTraining, weaponSelfDestruction, retainCorpses, craftLaunchAlways, globeSeasons, globeDetail, globeRadarLines, globeFlightPaths, globeAllRadarsOnBaseBuild,$/;"	v
glprogram	Engine/OpenGL.h	/^  GLuint glprogram;$/;"	m	class:OpenXcom::OpenGL
gltexture	Engine/OpenGL.h	/^  GLuint gltexture;$/;"	m	class:OpenXcom::OpenGL
gmext_read_stream	Engine/GMCat.cpp	/^static int gmext_read_stream (struct gmstream *p,$/;"	f	namespace:OpenXcom
gmext_write_delta	Engine/GMCat.cpp	/^static inline void gmext_write_delta (std::vector<unsigned char> &midi,$/;"	f	namespace:OpenXcom
gmext_write_end_ev	Engine/GMCat.cpp	/^static inline void gmext_write_end_ev (std::vector<unsigned char> &midi)$/;"	f	namespace:OpenXcom
gmext_write_int16	Engine/GMCat.cpp	/^static inline void gmext_write_int16 (std::vector<unsigned char> &midi,$/;"	f	namespace:OpenXcom
gmext_write_midi	Engine/GMCat.cpp	/^static int gmext_write_midi (const struct gmstream *stream,$/;"	f	namespace:OpenXcom
gmext_write_sequence	Engine/GMCat.cpp	/^static int gmext_write_sequence (std::vector<unsigned char> &midi,$/;"	f	namespace:OpenXcom
gmext_write_tempo_ev	Engine/GMCat.cpp	/^static inline void gmext_write_tempo_ev (std::vector<unsigned char> &midi,$/;"	f	namespace:OpenXcom
gmstream	Engine/GMCat.cpp	/^struct gmstream {$/;"	s	namespace:OpenXcom	file:
goToTimeOut	Savegame/BattleUnit.cpp	/^void BattleUnit::goToTimeOut()$/;"	f	class:OpenXcom::BattleUnit
gradientARGB	Engine/Scalers/xbrz.cpp	/^uint32_t gradientARGB(uint32_t pixFront, uint32_t pixBack) \/\/find intermediate color between two colors with alpha channels (=> NO alpha blending!!!)$/;"	f	namespace:__anon10
gradientRGB	Engine/Scalers/xbrz.cpp	/^uint32_t gradientRGB(uint32_t pixFront, uint32_t pixBack) \/\/blend front color with opacity M \/ N over opaque background: http:\/\/en.wikipedia.org\/wiki\/Alpha_compositing#Alpha_blending$/;"	f	namespace:__anon10
graphVector	Savegame/SaveConverter.cpp	/^void SaveConverter::graphVector(std::vector<T> &vector, int month, bool year)$/;"	f	class:OpenXcom::SaveConverter
green	Battlescape/Pathfinding.cpp	/^int Pathfinding::green = 4;$/;"	m	class:OpenXcom::Pathfinding	file:
green	Battlescape/Pathfinding.h	/^	static int green;$/;"	m	class:OpenXcom::Pathfinding
grenadeAction	Battlescape/AIModule.cpp	/^void AIModule::grenadeAction()$/;"	f	class:OpenXcom::AIModule
groundTimer	Mod/UfoTrajectory.h	/^	size_t groundTimer() const { return _groundTimer; }$/;"	f	class:OpenXcom::UfoTrajectory
growthMultiplier	Mod/Unit.h	/^	int growthMultiplier;$/;"	m	struct:OpenXcom::StatAdjustment
h	Engine/Scalers/xbrz.cpp	/^    \/**\/e, f, g, h,$/;"	m	struct:__anon10::Kernel_4x4	file:
h	Engine/Scalers/xbrz.cpp	/^    \/**\/g,  h,  i;$/;"	m	struct:__anon10::Kernel_3x3	file:
h	Engine/Scalers/xbrz.cpp	417;"	d	file:
h	Engine/Scalers/xbrz.cpp	478;"	d	file:
h	Mod/RuleInterface.h	/^	int x, y, w, h, color, color2, border, custom;$/;"	m	struct:OpenXcom::Element
h	Mod/RuleVideo.h	/^	int w, h, x, y, color; \/\/ caption rect and color info$/;"	m	struct:OpenXcom::SlideshowSlide
handle	Battlescape/ActionMenuState.cpp	/^void ActionMenuState::handle(Action *action)$/;"	f	class:OpenXcom::ActionMenuState
handle	Battlescape/BattlescapeState.cpp	/^inline void BattlescapeState::handle(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
handle	Battlescape/InfoboxState.cpp	/^void InfoboxState::handle(Action *action)$/;"	f	class:OpenXcom::InfoboxState
handle	Battlescape/InventoryState.cpp	/^void InventoryState::handle(Action *action)$/;"	f	class:OpenXcom::InventoryState
handle	Battlescape/MedikitState.cpp	/^void MedikitState::handle(Action *action)$/;"	f	class:OpenXcom::MedikitState
handle	Battlescape/MiniMapState.cpp	/^void MiniMapState::handle(Action *action)$/;"	f	class:OpenXcom::MiniMapState
handle	Battlescape/NextTurnState.cpp	/^void NextTurnState::handle(Action *action)$/;"	f	class:OpenXcom::NextTurnState
handle	Battlescape/PrimeGrenadeState.cpp	/^void PrimeGrenadeState::handle(Action *action)$/;"	f	class:OpenXcom::PrimeGrenadeState
handle	Battlescape/ScannerState.cpp	/^void ScannerState::handle(Action *action)$/;"	f	class:OpenXcom::ScannerState
handle	Battlescape/UnitInfoState.cpp	/^void UnitInfoState::handle(Action *action)$/;"	f	class:OpenXcom::UnitInfoState
handle	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::handle(Action *action, State *state)$/;"	f	class:OpenXcom::InteractiveSurface
handle	Engine/Screen.cpp	/^void Screen::handle(Action *action)$/;"	f	class:OpenXcom::Screen
handle	Engine/State.cpp	/^void State::handle(Action *action)$/;"	f	class:OpenXcom::State
handle	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::handle(Action *action)$/;"	f	class:OpenXcom::BuildNewBaseState
handle	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::handle(Action *action)$/;"	f	class:OpenXcom::GeoscapeState
handle	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::handle(Action *action)$/;"	f	class:OpenXcom::SelectDestinationState
handle	Interface/ComboBox.cpp	/^void ComboBox::handle(Action *action, State *state)$/;"	f	class:OpenXcom::ComboBox
handle	Interface/Cursor.cpp	/^void Cursor::handle(Action *action)$/;"	f	class:OpenXcom::Cursor
handle	Interface/FpsCounter.cpp	/^void FpsCounter::handle(Action *action)$/;"	f	class:OpenXcom::FpsCounter
handle	Interface/ScrollBar.cpp	/^void ScrollBar::handle(Action *action, State *state)$/;"	f	class:OpenXcom::ScrollBar
handle	Interface/Slider.cpp	/^void Slider::handle(Action *action, State *state)$/;"	f	class:OpenXcom::Slider
handle	Interface/TextEdit.cpp	/^void TextEdit::handle(Action *action, State *state)$/;"	f	class:OpenXcom::TextEdit
handle	Interface/TextList.cpp	/^void TextList::handle(Action *action, State *state)$/;"	f	class:OpenXcom::TextList
handle	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::handle(Action *action)$/;"	f	class:OpenXcom::OptionsVideoState
handle	Menu/StartState.cpp	/^void StartState::handle(Action *action)$/;"	f	class:OpenXcom::StartState
handleAI	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::handleAI(BattleUnit *unit)$/;"	f	class:OpenXcom::BattlescapeGame
handleAction	Battlescape/ActionMenuState.cpp	/^void ActionMenuState::handleAction()$/;"	f	class:OpenXcom::ActionMenuState
handleBaseDefense	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::handleBaseDefense(Base *base, Ufo *ufo)$/;"	f	class:OpenXcom::GeoscapeState
handleDogfightExperience	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::handleDogfightExperience()$/;"	f	class:OpenXcom::GeoscapeState
handleDogfightMultiAction	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::handleDogfightMultiAction(int button)$/;"	f	class:OpenXcom::GeoscapeState
handleDogfights	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::handleDogfights()$/;"	f	class:OpenXcom::GeoscapeState
handleItemClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::handleItemClick(BattleItem *item, bool middleClick)$/;"	f	class:OpenXcom::BattlescapeState
handleKeyPress	Basescape/BaseInfoState.cpp	/^void BaseInfoState::handleKeyPress(Action *action)$/;"	f	class:OpenXcom::BaseInfoState
handleKeyPress	Basescape/BasescapeState.cpp	/^void BasescapeState::handleKeyPress(Action *action)$/;"	f	class:OpenXcom::BasescapeState
handleNonTargetAction	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::handleNonTargetAction()$/;"	f	class:OpenXcom::BattlescapeGame
handlePanickingPlayer	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::handlePanickingPlayer()$/;"	f	class:OpenXcom::BattlescapeGame
handlePanickingUnit	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::handlePanickingUnit(BattleUnit *unit)$/;"	f	class:OpenXcom::BattlescapeGame
handlePrimaryResearchSideEffects	Savegame/SavedGame.cpp	/^void SavedGame::handlePrimaryResearchSideEffects(const std::vector<const RuleResearch*> &topicsToCheck, const Mod* mod, Base* base)$/;"	f	class:OpenXcom::SavedGame
handlePromotions	Savegame/SavedGame.cpp	/^bool SavedGame::handlePromotions(std::vector<Soldier*> &participants, const Mod *mod)$/;"	f	class:OpenXcom::SavedGame
handleResearchUnlockedByMissions	Savegame/SavedGame.cpp	/^bool SavedGame::handleResearchUnlockedByMissions(const RuleResearch* research, const Mod* mod)$/;"	f	class:OpenXcom::SavedGame
handleState	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::handleState()$/;"	f	class:OpenXcom::BattlescapeGame
handleState	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::handleState()$/;"	f	class:OpenXcom::BattlescapeState
handleWheel	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::handleWheel(Action *action)$/;"	f	class:OpenXcom::ResearchInfoState
handleWheelEngineer	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::handleWheelEngineer(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
handleWheelUnit	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::handleWheelUnit(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
hasAggroSound	Savegame/BattleUnit.cpp	/^bool BattleUnit::hasAggroSound() const$/;"	f	class:OpenXcom::BattleUnit
hasAlreadyExploded	Savegame/BattleUnit.h	/^	bool hasAlreadyExploded() const { return _alreadyExploded; }$/;"	f	class:OpenXcom::BattleUnit
hasCallsign	Savegame/Soldier.cpp	/^bool Soldier::hasCallsign() const$/;"	f	class:OpenXcom::Soldier
hasCategoryScript	Mod/RuleItem.cpp	/^void hasCategoryScript(const RuleItem* ri, int& val, const std::string& cat)$/;"	f	namespace:OpenXcom::__anon21
hasCustomDeployment	Savegame/Craft.cpp	/^bool Craft::hasCustomDeployment() const$/;"	f	class:OpenXcom::Craft
hasCustomDeployment	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::hasCustomDeployment(const RuleCraft* rule) const$/;"	f	class:OpenXcom::SavedBattleGame
hasFriendlyFired	Savegame/BattleUnitStatistics.h	/^	bool hasFriendlyFired() const$/;"	f	struct:OpenXcom::BattleUnitStatistics
hasFullHealth	Savegame/Soldier.cpp	/^bool Soldier::hasFullHealth() const$/;"	f	class:OpenXcom::Soldier
hasGainedAnyExperience	Savegame/BattleUnit.cpp	/^bool BattleUnit::hasGainedAnyExperience()$/;"	f	class:OpenXcom::BattleUnit
hasInfiniteSupply	Mod/Armor.h	/^	bool hasInfiniteSupply() const { return _infiniteSupply; }$/;"	f	class:OpenXcom::Armor
hasInventory	Mod/Armor.cpp	/^bool Armor::hasInventory() const$/;"	f	class:OpenXcom::Armor
hasInventory	Savegame/BattleUnit.cpp	/^bool BattleUnit::hasInventory() const$/;"	f	class:OpenXcom::BattleUnit
hasLayersDefinition	Mod/Armor.h	/^	bool hasLayersDefinition() const { return !_layersDefaultPrefix.empty(); }$/;"	f	class:OpenXcom::Armor
hasLowerBoundAtMinStats	Mod/RuleSoldierTransformation.cpp	/^bool RuleSoldierTransformation::hasLowerBoundAtMinStats() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
hasMissionWeights	Mod/RuleMissionScript.cpp	/^bool RuleMissionScript::hasMissionWeights() const$/;"	f	class:OpenXcom::RuleMissionScript
hasNegativeHealthRegen	Savegame/BattleUnit.cpp	/^bool BattleUnit::hasNegativeHealthRegen() const$/;"	f	class:OpenXcom::BattleUnit
hasNextArticlePage	Ufopaedia/ArticleState.cpp	/^	bool ArticleCommonState::hasNextArticlePage()$/;"	f	class:OpenXcom::ArticleCommonState
hasNoFloor	Savegame/Tile.cpp	/^bool Tile::hasNoFloor(const SavedBattleGame *savedBattleGame) const$/;"	f	class:OpenXcom::Tile
hasPrevArticlePage	Ufopaedia/ArticleState.cpp	/^	bool ArticleCommonState::hasPrevArticlePage()$/;"	f	class:OpenXcom::ArticleCommonState
hasRaceWeights	Mod/RuleAlienMission.cpp	/^bool RuleAlienMission::hasRaceWeights() const$/;"	f	class:OpenXcom::RuleAlienMission
hasRaceWeights	Mod/RuleMissionScript.cpp	/^bool RuleMissionScript::hasRaceWeights() const$/;"	f	class:OpenXcom::RuleMissionScript
hasRegionWeights	Mod/RuleAlienMission.cpp	/^bool RuleAlienMission::hasRegionWeights() const$/;"	f	class:OpenXcom::RuleAlienMission
hasRegionWeights	Mod/RuleMissionScript.cpp	/^bool RuleMissionScript::hasRegionWeights() const$/;"	f	class:OpenXcom::RuleMissionScript
hasUndiscoveredGetOneFree	Savegame/SavedGame.cpp	/^bool SavedGame::hasUndiscoveredGetOneFree(const RuleResearch * r, bool checkOnlyAvailableTopics) const$/;"	f	class:OpenXcom::SavedGame
hasUndiscoveredProtectedUnlock	Savegame/SavedGame.cpp	/^bool SavedGame::hasUndiscoveredProtectedUnlock(const RuleResearch * r, const Mod * mod) const$/;"	f	class:OpenXcom::SavedGame
hasUpperBoundAtMaxStats	Mod/RuleSoldierTransformation.cpp	/^bool RuleSoldierTransformation::hasUpperBoundAtMaxStats() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
hasUpperBoundAtStatCaps	Mod/RuleSoldierTransformation.cpp	/^bool RuleSoldierTransformation::hasUpperBoundAtStatCaps() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
hasVisibleTile	Savegame/BattleUnit.h	/^	bool hasVisibleTile(Tile *tile) const$/;"	f	class:OpenXcom::BattleUnit
hasVisibleUnit	Savegame/BattleUnit.cpp	/^bool BattleUnit::hasVisibleUnit(BattleUnit *unit)$/;"	f	class:OpenXcom::BattleUnit
hash_cleanup	lodepng.cpp	/^static void hash_cleanup(Hash* hash)$/;"	f	file:
hash_init	lodepng.cpp	/^static unsigned hash_init(Hash* hash, unsigned windowsize)$/;"	f	file:
haveAllAmmo	Savegame/BattleItem.cpp	/^bool BattleItem::haveAllAmmo() const$/;"	f	class:OpenXcom::BattleItem
haveAnyAmmo	Savegame/BattleItem.cpp	/^bool BattleItem::haveAnyAmmo() const$/;"	f	class:OpenXcom::BattleItem
haveEnoughLivingSpaceForOneMoreUnit	Savegame/Production.cpp	/^bool Production::haveEnoughLivingSpaceForOneMoreUnit(Base * b)$/;"	f	class:OpenXcom::Production
haveEnoughMaterialsForOneMoreUnit	Savegame/Production.cpp	/^bool Production::haveEnoughMaterialsForOneMoreUnit(Base * b, const Mod *m) const$/;"	f	class:OpenXcom::Production
haveEnoughMoneyForOneMoreUnit	Mod/RuleManufacture.cpp	/^bool RuleManufacture::haveEnoughMoneyForOneMoreUnit(int64_t funds) const$/;"	f	class:OpenXcom::RuleManufacture
haveEnoughMoneyForOneMoreUnit	Savegame/Production.cpp	/^bool Production::haveEnoughMoneyForOneMoreUnit(SavedGame * g) const$/;"	f	class:OpenXcom::Production
haveNameRef	Engine/Script.cpp	/^bool ScriptParserBase::haveNameRef(const std::string& s) const$/;"	f	class:OpenXcom::ScriptParserBase
haveNextShotsForAction	Savegame/BattleItem.cpp	/^bool BattleItem::haveNextShotsForAction(BattleActionType action, int shotCount) const$/;"	f	class:OpenXcom::BattleItem
haveNoFloorBelow	Savegame/BattleUnit.h	/^	bool haveNoFloorBelow() const { return _haveNoFloorBelow; }$/;"	f	class:OpenXcom::BattleUnit
haveReserchVector	Savegame/SavedGame.cpp	/^bool haveReserchVector(const std::vector<const RuleResearch*> &vec,  const std::string &res)$/;"	f	namespace:OpenXcom::__anon41
haveReserchVector	Savegame/SavedGame.cpp	/^bool haveReserchVector(const std::vector<const RuleResearch*> &vec, const RuleResearch *res)$/;"	f	namespace:OpenXcom::__anon41
haveSSE2	Engine/Zoom.cpp	/^bool Zoom::haveSSE2()$/;"	f	class:OpenXcom::Zoom
haveTU	Battlescape/BattlescapeGame.cpp	/^bool BattleActionCost::haveTU(std::string *message)$/;"	f	class:OpenXcom::BattleActionCost
haveTypeBase	Engine/Script.cpp	/^bool ScriptParserBase::haveTypeBase(ArgEnum type)$/;"	f	class:OpenXcom::ScriptParserBase
head	lodepng.cpp	/^  int* head; \/*hash value to head circular pos - can be outdated if went around window*\/$/;"	m	struct:Hash	file:
header	Engine/SoundSet.cpp	/^static const Uint8 header[] = {  'R',  'I',  'F',  'F', 0x00, 0x00, 0x00, 0x00,  'W',  'A',  'V',  'E',$/;"	m	namespace:OpenXcom	file:
headz	lodepng.cpp	/^  int* headz; \/*similar to head, but for chainz*\/$/;"	m	struct:Hash	file:
heal	Savegame/BattleUnit.cpp	/^void BattleUnit::heal(UnitBodyPart part, int woundAmount, int healthAmount)$/;"	f	class:OpenXcom::BattleUnit
healStun	Savegame/BattleUnit.cpp	/^void BattleUnit::healStun(int power)$/;"	f	class:OpenXcom::BattleUnit
healWound	Savegame/Soldier.cpp	/^void Soldier::healWound(float absBonus, float relBonus)$/;"	f	class:OpenXcom::Soldier
health	Mod/Unit.h	/^	Type tu, stamina, health, bravery, reactions, firing, throwing, strength, psiStrength, psiSkill, melee, mana;$/;"	m	struct:OpenXcom::UnitStats
height	Battlescape/TileEngine.h	/^		Uint8 height;$/;"	m	struct:OpenXcom::TileEngine::VisibilityBlockCache
height	Engine/Font.h	/^	int width, height, spacing;$/;"	m	struct:OpenXcom::FontImage
height	Mod/ArticleDefinition.h	/^		int height;$/;"	m	class:OpenXcom::ArticleDefinitionRect
heightFromCenter	Battlescape/TileEngine.cpp	/^constexpr int TileEngine::heightFromCenter[11];$/;"	m	class:OpenXcom::TileEngine	file:
heightFromCenter	Battlescape/TileEngine.h	/^	constexpr static int heightFromCenter[11] = {0,-2,+2,-4,+4,-6,+6,-8,+8,-12,+12};$/;"	m	class:OpenXcom::TileEngine
helper	Engine/HelperMeta.h	/^namespace helper$/;"	n	namespace:OpenXcom
helper	Engine/ScriptBind.h	/^namespace helper$/;"	n	namespace:OpenXcom
helper	Engine/ShaderDraw.h	/^namespace helper$/;"	n	namespace:OpenXcom
helper	Engine/ShaderDrawHelper.h	/^namespace helper$/;"	n	namespace:OpenXcom
helper	Engine/ShaderMove.h	/^namespace helper$/;"	n	namespace:OpenXcom
helper	Engine/ShaderRepeat.h	/^namespace helper$/;"	n	namespace:OpenXcom
helper	Mod/RuleItem.h	/^namespace helper$/;"	n	namespace:OpenXcom
helper	Mod/RuleStatBonus.h	/^namespace helper { struct BattleActionAttackReadOnlyImpl; }$/;"	n	namespace:OpenXcom
hexDumpBogusData	Engine/FileMap.cpp	/^static std::string hexDumpBogusData(const std::string& bogus) {$/;"	f	namespace:OpenXcom::FileMap
hexdigest	md5.cpp	/^std::string MD5::hexdigest() const$/;"	f	class:MD5
hiddenCommendation	Mod/ArticleDefinition.h	/^		bool hiddenCommendation;$/;"	m	class:OpenXcom::ArticleDefinition
hideAll	Engine/State.cpp	/^void State::hideAll()$/;"	f	class:OpenXcom::State
hideSellTransferButtons	Battlescape/DebriefingState.cpp	/^void DebriefingState::hideSellTransferButtons()$/;"	f	class:OpenXcom::DebriefingState
hifreq	Engine/Adlib/adlplayer.cpp	/^	unsigned char	hifreq;$/;"	m	struct:struc_adlib_channels	file:
highQty	Mod/AlienDeployment.h	/^	int lowQty, medQty, highQty, dQty, extraQty;$/;"	m	struct:OpenXcom::DeploymentData
hit	Battlescape/TileEngine.cpp	/^void TileEngine::hit(BattleActionAttack attack, Position center, int power, const RuleDamageType *type, bool rangeAtack, int terrainMeleeTilePart)$/;"	f	class:OpenXcom::TileEngine
hitBonus	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
hitCounter	Savegame/BattleUnitStatistics.h	/^	int hitCounter;                      \/\/\/< Tracks how many times the unit was hit$/;"	m	struct:OpenXcom::BattleUnitStatistics
hitTile	Battlescape/TileEngine.cpp	/^int TileEngine::hitTile(Tile* tile, int damage, const RuleDamageType* type)$/;"	f	class:OpenXcom::TileEngine
hitUnit	Battlescape/TileEngine.cpp	/^bool TileEngine::hitUnit(BattleActionAttack attack, BattleUnit *target, const Position &relative, int damage, const RuleDamageType *type, bool rangeAtack)$/;"	f	class:OpenXcom::TileEngine
horizontalBlockage	Battlescape/TileEngine.cpp	/^int TileEngine::horizontalBlockage(Tile *startTile, Tile *endTile, ItemDamageType type, bool skipObject)$/;"	f	class:OpenXcom::TileEngine
hostileTurn	Savegame/BattleUnitStatistics.h	/^	bool hostileTurn() const$/;"	f	struct:OpenXcom::BattleUnitKills
hour	lodepng.h	/^  unsigned hour;    \/*0-23*\/$/;"	m	struct:LodePNGTime
hoverRedraw	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::hoverRedraw(void)$/;"	f	class:OpenXcom::BuildNewBaseState
hq2x_32	Engine/Scalers/hq2x.cpp	/^HQX_API void HQX_CALLCONV hq2x_32(const uint32_t* sp, uint32_t* dp, int Xres, int Yres )$/;"	f
hq2x_32_rb	Engine/Scalers/hq2x.cpp	/^HQX_API void HQX_CALLCONV hq2x_32_rb(const uint32_t* sp, uint32_t srb, uint32_t* dp, uint32_t drb, int Xres, int Yres )$/;"	f
hq3x_32	Engine/Scalers/hq3x.cpp	/^HQX_API void HQX_CALLCONV hq3x_32(const uint32_t* sp, uint32_t* dp, int Xres, int Yres )$/;"	f
hq3x_32_rb	Engine/Scalers/hq3x.cpp	/^HQX_API void HQX_CALLCONV hq3x_32_rb(const uint32_t* sp, uint32_t srb, uint32_t* dp, uint32_t drb, int Xres, int Yres )$/;"	f
hq4x_32	Engine/Scalers/hq4x.cpp	/^HQX_API void HQX_CALLCONV hq4x_32(const uint32_t* sp, uint32_t* dp, int Xres, int Yres )$/;"	f
hq4x_32_rb	Engine/Scalers/hq4x.cpp	/^HQX_API void HQX_CALLCONV hq4x_32_rb(const uint32_t* sp, uint32_t srb, uint32_t* dp, uint32_t drb, int Xres, int Yres )$/;"	f
hqxInit	Engine/Scalers/init.cpp	/^HQX_API void HQX_CALLCONV hqxInit(void)$/;"	f
huffmanDecodeSymbol	lodepng.cpp	/^static unsigned huffmanDecodeSymbol(const unsigned char* in, size_t* bp,$/;"	f	file:
huntBehavior	Mod/RuleAlienMission.h	/^	int huntBehavior;$/;"	m	struct:OpenXcom::MissionWave
huntMode	Mod/RuleAlienMission.h	/^	int huntMode;$/;"	m	struct:OpenXcom::MissionWave
hunterKillerPercentage	Mod/RuleAlienMission.h	/^	int hunterKillerPercentage;$/;"	m	struct:OpenXcom::MissionWave
hybridIntroSounds	Menu/VideoState.cpp	/^static soundInFile hybridIntroSounds[]=$/;"	m	namespace:OpenXcom	file:
i	Engine/OptionInfo.h	/^	union { bool *b; int *i; std::string *s; SDLKey *k; } _ref;$/;"	m	union:OpenXcom::OptionInfo::__anon1
i	Engine/OptionInfo.h	/^	union { bool b; int i; const char *s; SDLKey k; } _def; \/\/ can't put strings in unions$/;"	m	union:OpenXcom::OptionInfo::__anon2
i	Engine/Scalers/xbrz.cpp	/^    \/**\/g,  h,  i;$/;"	m	struct:__anon10::Kernel_3x3	file:
i	Engine/Scalers/xbrz.cpp	/^    \/**\/i, j, k, l,$/;"	m	struct:__anon10::Kernel_4x4	file:
i	Engine/Scalers/xbrz.cpp	418;"	d	file:
i	Engine/Scalers/xbrz.cpp	479;"	d	file:
i	main.cpp	/^	int i;$/;"	m	struct:BadMove	file:
iCurrentFNum	Engine/Adlib/adlplayer.cpp	/^UINT8 iCurrentFNum[12];$/;"	v
iCurrentTweakedBlock	Engine/Adlib/adlplayer.cpp	/^UINT8 iCurrentTweakedBlock[12];$/;"	v
iFMReg	Engine/Adlib/adlplayer.cpp	/^UINT8 iFMReg[256];$/;"	v
iTweakedFMReg	Engine/Adlib/adlplayer.cpp	/^UINT8 iTweakedFMReg[256];$/;"	v
ibpp	Engine/OpenGL.h	/^  unsigned iwidth, iheight, iformat, ibpp;$/;"	m	class:OpenXcom::OpenGL
id	Engine/OptionInfo.cpp	/^std::string OptionInfo::id() const$/;"	f	class:OpenXcom::OptionInfo
id	Mod/ArticleDefinition.h	/^		std::string id;$/;"	m	class:OpenXcom::ArticleDefinition
id	Savegame/BattleUnitStatistics.h	/^	int mission, turn, id;$/;"	m	struct:OpenXcom::BattleUnitKills
id	Savegame/MissionStatistics.h	/^	int id;$/;"	m	struct:OpenXcom::MissionStatistics
id	Savegame/SaveConverter.h	/^	int id;$/;"	m	struct:OpenXcom::SaveOriginal
idleDaysStat	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::idleDaysStat(Game *game, Soldier *s)$/;"	f	class:OpenXcom
iformat	Engine/OpenGL.h	/^  unsigned iwidth, iheight, iformat, ibpp;$/;"	m	class:OpenXcom::OpenGL
ignite	Savegame/Tile.cpp	/^void Tile::ignite(int power)$/;"	f	class:OpenXcom::Tile
ignoreAutoNightVisionUserSetting	Mod/RuleEnviroEffects.h	/^	bool ignoreAutoNightVisionUserSetting() const { return _ignoreAutoNightVisionUserSetting; }$/;"	f	class:OpenXcom::RuleEnviroEffects
ignoreBaseDefenses	Mod/RuleAlienMission.h	/^	bool ignoreBaseDefenses() const { return _ignoreBaseDefenses; }$/;"	f	class:OpenXcom::RuleAlienMission
ignoreSpottedEnemies	Battlescape/BattlescapeGame.h	/^	bool ignoreSpottedEnemies = false;$/;"	m	struct:OpenXcom::BattleAction
ignore_adler32	lodepng.h	/^  unsigned ignore_adler32; \/*if 1, continue and don't give an error message if the Adler32 checksum is corrupted*\/$/;"	m	struct:LodePNGDecompressSettings
ignore_crc	lodepng.h	/^  unsigned ignore_crc; \/*ignore CRC checksums*\/$/;"	m	struct:LodePNGDecoderSettings
ignore_critical	lodepng.h	/^  unsigned ignore_critical; \/*ignore unknown critical chunks*\/$/;"	m	struct:LodePNGDecoderSettings
ignore_end	lodepng.h	/^  unsigned ignore_end; \/*ignore issues at end of file if possible (missing IEND chunk, too large chunk, ...)*\/$/;"	m	struct:LodePNGDecoderSettings
iheight	Engine/OpenGL.h	/^  unsigned iwidth, iheight, iformat, ibpp;$/;"	m	class:OpenXcom::OpenGL
imagePath	Mod/RuleVideo.h	/^	std::string imagePath; \/\/ relative path to slide image$/;"	m	struct:OpenXcom::SlideshowSlide
image_id	Mod/ArticleDefinition.h	/^		std::string image_id;$/;"	m	class:OpenXcom::ArticleDefinitionArmor
image_id	Mod/ArticleDefinition.h	/^		std::string image_id;$/;"	m	class:OpenXcom::ArticleDefinitionCraft
image_id	Mod/ArticleDefinition.h	/^		std::string image_id;$/;"	m	class:OpenXcom::ArticleDefinitionCraftWeapon
image_id	Mod/ArticleDefinition.h	/^		std::string image_id;$/;"	m	class:OpenXcom::ArticleDefinitionTFTD
image_id	Mod/ArticleDefinition.h	/^		std::string image_id;$/;"	m	class:OpenXcom::ArticleDefinitionTextImage
image_id	Mod/ArticleDefinition.h	/^		std::string image_id;$/;"	m	class:OpenXcom::ArticleDefinitionVehicle
improveStat	Savegame/BattleUnit.cpp	/^int BattleUnit::improveStat(int exp) const$/;"	f	class:OpenXcom::BattleUnit
inEntrance	Battlescape/BattlescapeGame.h	/^	int inEntrance = 0;$/;"	m	struct:OpenXcom::BattlescapeTally
inEventVisibilitySector	Battlescape/TileEngine.cpp	/^inline bool TileEngine::inEventVisibilitySector(const Position &toCheck) const$/;"	f	class:OpenXcom::TileEngine
inExit	Battlescape/BattlescapeGame.h	/^	int inExit = 0;$/;"	m	struct:OpenXcom::BattlescapeTally
inField	Battlescape/BattlescapeGame.h	/^	int inField = 0;$/;"	m	struct:OpenXcom::BattlescapeTally
inOpenSet	Battlescape/PathfindingNode.h	/^	bool inOpenSet() const { return (_openentry != 0); }$/;"	f	class:OpenXcom::PathfindingNode
inUse	Savegame/BaseFacility.cpp	/^bool BaseFacility::inUse() const$/;"	f	class:OpenXcom::BaseFacility
in_use	lodepng.cpp	/^  int in_use;$/;"	m	struct:BPMNode	file:
incTurnsSinceStunned	Savegame/BattleUnit.h	/^	void incTurnsSinceStunned() { _turnsSinceStunned = std::min(255, _turnsSinceStunned + 1); }$/;"	f	class:OpenXcom::BattleUnit
inc_x	Engine/ShaderDrawHelper.h	/^	inline void inc_x()$/;"	f	struct:OpenXcom::helper::controler
inc_x	Engine/ShaderDrawHelper.h	/^	inline void inc_x()$/;"	f	struct:OpenXcom::helper::controler_base
inc_x	Engine/ShaderRepeat.h	/^	inline void inc_x()$/;"	f	struct:OpenXcom::helper::controler
inc_y	Engine/ShaderDrawHelper.h	/^	inline void inc_y()$/;"	f	struct:OpenXcom::helper::controler
inc_y	Engine/ShaderDrawHelper.h	/^	inline void inc_y()$/;"	f	struct:OpenXcom::helper::controler_base
inc_y	Engine/ShaderRepeat.h	/^	inline void inc_y()$/;"	f	struct:OpenXcom::helper::controler
includePrimeStateInSavedLayout	Engine/Options.inc.h	/^OPT bool includePrimeStateInSavedLayout, anytimePsiTraining, weaponSelfDestruction, retainCorpses, craftLaunchAlways, globeSeasons, globeDetail, globeRadarLines, globeFlightPaths, globeAllRadarsOnBaseBuild,$/;"	v
increase	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::increase()$/;"	f	class:OpenXcom::ManageAlienContainmentState
increase	Basescape/PurchaseState.cpp	/^void PurchaseState::increase()$/;"	f	class:OpenXcom::PurchaseState
increase	Basescape/SellState.cpp	/^void SellState::increase()$/;"	f	class:OpenXcom::SellState
increase	Basescape/TransferItemsState.cpp	/^void TransferItemsState::increase()$/;"	f	class:OpenXcom::TransferItemsState
increaseByValue	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::increaseByValue(int change)$/;"	f	class:OpenXcom::ManageAlienContainmentState
increaseByValue	Basescape/PurchaseState.cpp	/^void PurchaseState::increaseByValue(int change)$/;"	f	class:OpenXcom::PurchaseState
increaseByValue	Basescape/TransferItemsState.cpp	/^void TransferItemsState::increaseByValue(int change)$/;"	f	class:OpenXcom::TransferItemsState
increaseCustomCounter	Savegame/SavedGame.cpp	/^void SavedGame::increaseCustomCounter(const std::string& name)$/;"	f	class:OpenXcom::SavedGame
increaseLiveUfos	Savegame/AlienMission.h	/^	void increaseLiveUfos() { ++_liveUfos; }$/;"	f	class:OpenXcom::AlienMission
increaseSoftlockShotCounter	Savegame/Ufo.h	/^	void increaseSoftlockShotCounter() { _softlockShotCounter++; }$/;"	f	class:OpenXcom::Ufo
index	Savegame/Tile.h	/^		Uint8 index; \/\/ for indexing the actual tile array$/;"	m	struct:OpenXcom::Tile::SerializationKey
index	lodepng.cpp	/^  int index; \/*the payload. Only has a meaningful value if this is in the last level*\/$/;"	m	struct:ColorTree	file:
index	lodepng.cpp	/^  unsigned index; \/*index of this leaf node (called "count" in the paper)*\/$/;"	m	struct:BPMNode	file:
indicatorsAreEnabled	Savegame/BattleUnit.h	/^	bool indicatorsAreEnabled() const { return !_disableIndicators; }$/;"	f	class:OpenXcom::BattleUnit
inflate	lodepng.cpp	/^static unsigned inflate(unsigned char** out, size_t* outsize,$/;"	f	file:
inflateHuffmanBlock	lodepng.cpp	/^static unsigned inflateHuffmanBlock(ucvector* out, const unsigned char* in, size_t* bp,$/;"	f	file:
inflateNoCompression	lodepng.cpp	/^static unsigned inflateNoCompression(ucvector* out, const unsigned char* in, size_t* bp, size_t* pos, size_t inlength)$/;"	f	file:
info	Mod/Mod.h	/^	const ModInfo* info;$/;"	m	struct:OpenXcom::ModData
info_png	lodepng.h	/^  LodePNGInfo info_png; \/*info of the PNG image obtained after decoding*\/$/;"	m	struct:LodePNGState
info_raw	lodepng.h	/^  LodePNGColorMode info_raw; \/*specifies the format in which you would like to get the raw pixel buffer*\/$/;"	m	struct:LodePNGState
init	Basescape/BaseInfoState.cpp	/^void BaseInfoState::init()$/;"	f	class:OpenXcom::BaseInfoState
init	Basescape/BasescapeState.cpp	/^void BasescapeState::init()$/;"	f	class:OpenXcom::BasescapeState
init	Basescape/BuildFacilitiesState.cpp	/^void BuildFacilitiesState::init()$/;"	f	class:OpenXcom::BuildFacilitiesState
init	Basescape/CraftArmorState.cpp	/^void CraftArmorState::init()$/;"	f	class:OpenXcom::CraftArmorState
init	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::init()$/;"	f	class:OpenXcom::CraftEquipmentState
init	Basescape/CraftInfoState.cpp	/^void CraftInfoState::init()$/;"	f	class:OpenXcom::CraftInfoState
init	Basescape/CraftPilotsState.cpp	/^void CraftPilotsState::init()$/;"	f	class:OpenXcom::CraftPilotsState
init	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::init()$/;"	f	class:OpenXcom::CraftSoldiersState
init	Basescape/CraftsState.cpp	/^void CraftsState::init()$/;"	f	class:OpenXcom::CraftsState
init	Basescape/GlobalManufactureState.cpp	/^void GlobalManufactureState::init()$/;"	f	class:OpenXcom::GlobalManufactureState
init	Basescape/GlobalResearchState.cpp	/^void GlobalResearchState::init()$/;"	f	class:OpenXcom::GlobalResearchState
init	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::init()$/;"	f	class:OpenXcom::ManageAlienContainmentState
init	Basescape/ManufactureDependenciesTreeState.cpp	/^void ManufactureDependenciesTreeState::init()$/;"	f	class:OpenXcom::ManufactureDependenciesTreeState
init	Basescape/ManufactureState.cpp	/^void ManufactureState::init()$/;"	f	class:OpenXcom::ManufactureState
init	Basescape/NewManufactureListState.cpp	/^void NewManufactureListState::init()$/;"	f	class:OpenXcom::NewManufactureListState
init	Basescape/NewResearchListState.cpp	/^void NewResearchListState::init()$/;"	f	class:OpenXcom::NewResearchListState
init	Basescape/ResearchState.cpp	/^void ResearchState::init()$/;"	f	class:OpenXcom::ResearchState
init	Basescape/SellState.cpp	/^void SellState::init()$/;"	f	class:OpenXcom::SellState
init	Basescape/SoldierDiaryMissionState.cpp	/^void SoldierDiaryMissionState::init()$/;"	f	class:OpenXcom::SoldierDiaryMissionState
init	Basescape/SoldierDiaryOverviewState.cpp	/^void SoldierDiaryOverviewState::init()$/;"	f	class:OpenXcom::SoldierDiaryOverviewState
init	Basescape/SoldierDiaryPerformanceState.cpp	/^void SoldierDiaryPerformanceState::init()$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
init	Basescape/SoldierInfoState.cpp	/^void SoldierInfoState::init()$/;"	f	class:OpenXcom::SoldierInfoState
init	Basescape/SoldierMemorialState.cpp	/^void SoldierMemorialState::init()$/;"	f	class:OpenXcom::SoldierMemorialState
init	Basescape/SoldiersState.cpp	/^void SoldiersState::init()$/;"	f	class:OpenXcom::SoldiersState
init	Basescape/StoresState.cpp	/^void StoresState::init()$/;"	f	class:OpenXcom::StoresState
init	Basescape/TechTreeSelectState.cpp	/^void TechTreeSelectState::init()$/;"	f	class:OpenXcom::TechTreeSelectState
init	Basescape/TechTreeViewerState.cpp	/^void TechTreeViewerState::init()$/;"	f	class:OpenXcom::TechTreeViewerState
init	Battlescape/ActionMenuState.cpp	/^void ActionMenuState::init()$/;"	f	class:OpenXcom::ActionMenuState
init	Battlescape/BattleState.cpp	/^void BattleState::init()$/;"	f	class:OpenXcom::BattleState
init	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::init()$/;"	f	class:OpenXcom::BattlescapeGame
init	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::init(bool resetTerrain)$/;"	f	class:OpenXcom::BattlescapeGenerator
init	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::init()$/;"	f	class:OpenXcom::BattlescapeState
init	Battlescape/BriefingState.cpp	/^void BriefingState::init()$/;"	f	class:OpenXcom::BriefingState
init	Battlescape/CannotReequipState.cpp	/^void CannotReequipState::init()$/;"	f	class:OpenXcom::CannotReequipState
init	Battlescape/DebriefingState.cpp	/^void DebriefingState::init()$/;"	f	class:OpenXcom::DebriefingState
init	Battlescape/ExplosionBState.cpp	/^void ExplosionBState::init()$/;"	f	class:OpenXcom::ExplosionBState
init	Battlescape/InventoryState.cpp	/^void InventoryState::init()$/;"	f	class:OpenXcom::InventoryState
init	Battlescape/Map.cpp	/^void Map::init()$/;"	f	class:OpenXcom::Map
init	Battlescape/MeleeAttackBState.cpp	/^void MeleeAttackBState::init()$/;"	f	class:OpenXcom::MeleeAttackBState
init	Battlescape/NextTurnState.cpp	/^void NextTurnState::init()$/;"	f	class:OpenXcom::NextTurnState
init	Battlescape/ProjectileFlyBState.cpp	/^void ProjectileFlyBState::init()$/;"	f	class:OpenXcom::ProjectileFlyBState
init	Battlescape/PsiAttackBState.cpp	/^void PsiAttackBState::init()$/;"	f	class:OpenXcom::PsiAttackBState
init	Battlescape/UnitDieBState.cpp	/^void UnitDieBState::init()$/;"	f	class:OpenXcom::UnitDieBState
init	Battlescape/UnitFallBState.cpp	/^void UnitFallBState::init()$/;"	f	class:OpenXcom::UnitFallBState
init	Battlescape/UnitInfoState.cpp	/^void UnitInfoState::init()$/;"	f	class:OpenXcom::UnitInfoState
init	Battlescape/UnitPanicBState.cpp	/^void UnitPanicBState::init()$/;"	f	class:OpenXcom::UnitPanicBState
init	Battlescape/UnitTurnBState.cpp	/^void UnitTurnBState::init()$/;"	f	class:OpenXcom::UnitTurnBState
init	Battlescape/UnitWalkBState.cpp	/^void UnitWalkBState::init()$/;"	f	class:OpenXcom::UnitWalkBState
init	Engine/FlcPlayer.cpp	/^bool FlcPlayer::init(const char *filename, void(*frameCallBack)(), Game *game, bool useInternalAudio, int dx, int dy)$/;"	f	class:OpenXcom::FlcPlayer
init	Engine/Font.cpp	/^void Font::init(size_t index, const UString &str)$/;"	f	class:OpenXcom::Font
init	Engine/OpenGL.cpp	/^void OpenGL::init(int w, int h)$/;"	f	class:OpenXcom::OpenGL
init	Engine/Options.cpp	/^bool init()$/;"	f	namespace:OpenXcom::Options
init	Engine/State.cpp	/^void State::init()$/;"	f	class:OpenXcom::State
init	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::init()$/;"	f	class:OpenXcom::AllocatePsiTrainingState
init	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::init()$/;"	f	class:OpenXcom::AllocateTrainingState
init	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::init()$/;"	f	class:OpenXcom::BuildNewBaseState
init	Geoscape/ConfirmLandingState.cpp	/^void ConfirmLandingState::init()$/;"	f	class:OpenXcom::ConfirmLandingState
init	Geoscape/GeoscapeEventState.cpp	/^void GeoscapeEventState::init()$/;"	f	class:OpenXcom::GeoscapeEventState
init	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::init()$/;"	f	class:OpenXcom::GeoscapeState
init	Geoscape/MultipleTargetsState.cpp	/^void MultipleTargetsState::init()$/;"	f	class:OpenXcom::MultipleTargetsState
init	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::init()$/;"	f	class:OpenXcom::SelectDestinationState
init	Menu/CutsceneState.cpp	/^void CutsceneState::init()$/;"	f	class:OpenXcom::CutsceneState
init	Menu/ListGamesState.cpp	/^void ListGamesState::init()$/;"	f	class:OpenXcom::ListGamesState
init	Menu/ListLoadOriginalState.cpp	/^void ListLoadOriginalState::init()$/;"	f	class:OpenXcom::ListLoadOriginalState
init	Menu/ListLoadState.cpp	/^void ListLoadState::init()$/;"	f	class:OpenXcom::ListLoadState
init	Menu/LoadGameState.cpp	/^void LoadGameState::init()$/;"	f	class:OpenXcom::LoadGameState
init	Menu/MainMenuState.cpp	/^void GoToMainMenuState::init()$/;"	f	class:OpenXcom::GoToMainMenuState
init	Menu/MainMenuState.cpp	/^void MainMenuState::init()$/;"	f	class:OpenXcom::MainMenuState
init	Menu/NewBattleState.cpp	/^void NewBattleState::init()$/;"	f	class:OpenXcom::NewBattleState
init	Menu/NotesState.cpp	/^void NotesState::init()$/;"	f	class:OpenXcom::NotesState
init	Menu/OptionsAdvancedState.cpp	/^void OptionsAdvancedState::init()$/;"	f	class:OpenXcom::OptionsAdvancedState
init	Menu/OptionsBaseState.cpp	/^void OptionsBaseState::init()$/;"	f	class:OpenXcom::OptionsBaseState
init	Menu/OptionsControlsState.cpp	/^void OptionsControlsState::init()$/;"	f	class:OpenXcom::OptionsControlsState
init	Menu/StartState.cpp	/^void StartState::init()$/;"	f	class:OpenXcom::StartState
init	Menu/VideoState.cpp	/^void VideoState::init()$/;"	f	class:OpenXcom::VideoState
init	Mod/MapScript.cpp	/^void MapScript::init()$/;"	f	class:OpenXcom::MapScript
init	Savegame/AlienStrategy.cpp	/^void AlienStrategy::init(const Mod *mod)$/;"	f	class:OpenXcom::AlienStrategy
init	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::init()$/;"	f	class:OpenXcom::StatsForNerdsState
init	Ufopaedia/UfopaediaSelectState.cpp	/^	void UfopaediaSelectState::init()$/;"	f	class:OpenXcom::UfopaediaSelectState
init	md5.cpp	/^void MD5::init()$/;"	f	class:MD5
initArmorList	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::initArmorList()$/;"	f	class:OpenXcom::StatsForNerdsState
initAudio	Engine/FlcPlayer.cpp	/^void FlcPlayer::initAudio(Uint16 format, Uint8 channels)$/;"	f	class:OpenXcom::FlcPlayer
initAudio	Engine/Game.cpp	/^void Game::initAudio()$/;"	f	class:OpenXcom::Game
initBlack	Engine/Palette.cpp	/^void Palette::initBlack()$/;"	f	class:OpenXcom::Palette
initCraftList	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::initCraftList()$/;"	f	class:OpenXcom::StatsForNerdsState
initCraftWeaponList	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::initCraftWeaponList()$/;"	f	class:OpenXcom::StatsForNerdsState
initDisplay	Menu/CutsceneState.cpp	/^bool CutsceneState::initDisplay()$/;"	f	class:OpenXcom::CutsceneState
initFacilityList	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::initFacilityList()$/;"	f	class:OpenXcom::StatsForNerdsState
initFixedWeapons	Savegame/Craft.cpp	/^void Craft::initFixedWeapons(const Mod* mod)$/;"	f	class:OpenXcom::Craft
initItem	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::initItem(BattleItem *item, BattleUnit *unit)$/;"	f	class:OpenXcom::SavedBattleGame
initItemList	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::initItemList()$/;"	f	class:OpenXcom::StatsForNerdsState
initLayout	Ufopaedia/ArticleState.cpp	/^	void ArticleState::initLayout()$/;"	f	class:OpenXcom::ArticleState
initList	Basescape/CraftArmorState.cpp	/^void CraftArmorState::initList(size_t scrl)$/;"	f	class:OpenXcom::CraftArmorState
initList	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::initList()$/;"	f	class:OpenXcom::CraftEquipmentState
initList	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::initList(size_t scrl)$/;"	f	class:OpenXcom::CraftSoldiersState
initList	Basescape/ManufactureDependenciesTreeState.cpp	/^void ManufactureDependenciesTreeState::initList()$/;"	f	class:OpenXcom::ManufactureDependenciesTreeState
initList	Basescape/SoldierTransformationListState.cpp	/^void SoldierTransformationListState::initList()$/;"	f	class:OpenXcom::SoldierTransformationListState
initList	Basescape/SoldiersState.cpp	/^void SoldiersState::initList(size_t scrl)$/;"	f	class:OpenXcom::SoldiersState
initList	Basescape/StoresState.cpp	/^void StoresState::initList(bool grandTotal)$/;"	f	class:OpenXcom::StoresState
initList	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::initList(size_t scrl)$/;"	f	class:OpenXcom::AllocatePsiTrainingState
initList	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::initList(size_t scrl)$/;"	f	class:OpenXcom::AllocateTrainingState
initLists	Basescape/TechTreeSelectState.cpp	/^void TechTreeSelectState::initLists()$/;"	f	class:OpenXcom::TechTreeSelectState
initLists	Basescape/TechTreeViewerState.cpp	/^void TechTreeViewerState::initLists()$/;"	f	class:OpenXcom::TechTreeViewerState
initLists	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::initLists()$/;"	f	class:OpenXcom::StatsForNerdsState
initMap	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::initMap(int mapsize_x, int mapsize_y, int mapsize_z, bool resetTerrain)$/;"	f	class:OpenXcom::SavedBattleGame
initPreview	Basescape/SoldierAvatarState.cpp	/^void SoldierAvatarState::initPreview(Soldier *s)$/;"	f	class:OpenXcom::SoldierAvatarState
initProfitInfo	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::initProfitInfo ()$/;"	f	class:OpenXcom::ManufactureInfoState
initSave	Menu/NewBattleState.cpp	/^void NewBattleState::initSave()$/;"	f	class:OpenXcom::NewBattleState
initSoldierBonusList	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::initSoldierBonusList()$/;"	f	class:OpenXcom::StatsForNerdsState
initSurfaces	Interface/BattlescapeButton.cpp	/^void BattlescapeButton::initSurfaces(Surface* custom)$/;"	f	class:OpenXcom::BattlescapeButton
initText	Basescape/BaseView.cpp	/^void BaseView::initText(Font *big, Font *small, Language *lang)$/;"	f	class:OpenXcom::BaseView
initText	Battlescape/BattlescapeMessage.cpp	/^void BattlescapeMessage::initText(Font *big, Font *small, Language *lang)$/;"	f	class:OpenXcom::BattlescapeMessage
initText	Battlescape/WarningMessage.cpp	/^void WarningMessage::initText(Font *big, Font *small, Language *lang)$/;"	f	class:OpenXcom::WarningMessage
initText	Engine/Surface.h	/^	virtual void initText(Font *, Font *, Language *) {};$/;"	f	class:OpenXcom::Surface
initText	Interface/ComboBox.cpp	/^void ComboBox::initText(Font *big, Font *small, Language *lang)$/;"	f	class:OpenXcom::ComboBox
initText	Interface/Slider.cpp	/^void Slider::initText(Font *big, Font *small, Language *lang)$/;"	f	class:OpenXcom::Slider
initText	Interface/Text.cpp	/^void Text::initText(Font *big, Font *small, Language *lang)$/;"	f	class:OpenXcom::Text
initText	Interface/TextButton.cpp	/^void TextButton::initText(Font *big, Font *small, Language *lang)$/;"	f	class:OpenXcom::TextButton
initText	Interface/TextEdit.cpp	/^void TextEdit::initText(Font *big, Font *small, Language *lang)$/;"	f	class:OpenXcom::TextEdit
initText	Interface/TextList.cpp	/^void TextList::initText(Font *big, Font *small, Language *lang)$/;"	f	class:OpenXcom::TextList
initTransformationData	Basescape/SoldierTransformationState.cpp	/^void SoldierTransformationState::initTransformationData()$/;"	f	class:OpenXcom::SoldierTransformationState
initUfoList	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::initUfoList()$/;"	f	class:OpenXcom::StatsForNerdsState
initUnit	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::initUnit(BattleUnit *unit, size_t itemLevel)$/;"	f	class:OpenXcom::SavedBattleGame
initUtilities	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::initUtilities(Mod *mod, bool craftInventory)$/;"	f	class:OpenXcom::SavedBattleGame
initVerticalLevel	Mod/MapScript.cpp	/^void MapScript::initVerticalLevel(VerticalLevel level)$/;"	f	class:OpenXcom::MapScript
init_music	Engine/Adlib/adlplayer.cpp	/^void init_music()$/;"	f
init_music_data	Engine/Adlib/adlplayer.cpp	/^void init_music_data(unsigned char* music_ptr,int length)$/;"	f
init_timetables	Engine/Adlib/fmopl.cpp	/^static void init_timetables( FM_OPL *OPL , int ARRATE , int DRRATE )$/;"	f	file:
injuryList	Savegame/MissionStatistics.h	/^	std::map<int, int> injuryList;$/;"	m	struct:OpenXcom::MissionStatistics
insert	Engine/FileMap.cpp	/^	void insert(const std::string& relpath, FileRecord frec) {$/;"	f	struct:OpenXcom::FileMap::VFSLayer
insideCountry	Mod/RuleCountry.cpp	/^bool RuleCountry::insideCountry(double lon, double lat) const$/;"	f	class:OpenXcom::RuleCountry
insideFakeUnderwaterTexture	Geoscape/Globe.cpp	/^bool Globe::insideFakeUnderwaterTexture(double lon, double lat) const$/;"	f	class:OpenXcom::Globe
insideLand	Geoscape/Globe.cpp	/^bool Globe::insideLand(double lon, double lat) const$/;"	f	class:OpenXcom::Globe
insideRadarRange	Savegame/Ufo.cpp	/^bool Ufo::insideRadarRange(Target *target) const$/;"	f	class:OpenXcom::Ufo
insideRegion	Mod/RuleRegion.cpp	/^bool RuleRegion::insideRegion(double lon, double lat, bool ignoreTechnicalRegion) const$/;"	f	class:OpenXcom::RuleRegion
inspectSoldiers	Savegame/SavedGame.cpp	/^Soldier *SavedGame::inspectSoldiers(std::vector<Soldier*> &soldiers, std::vector<Soldier*> &participants, int rank)$/;"	f	class:OpenXcom::SavedGame
instaFalling	Savegame/BattleUnit.cpp	/^void BattleUnit::instaFalling()$/;"	f	class:OpenXcom::BattleUnit
instaKill	Savegame/BattleUnit.cpp	/^void BattleUnit::instaKill()$/;"	f	class:OpenXcom::BattleUnit
instruments	Engine/Adlib/adlplayer.cpp	/^} instruments[16];$/;"	v	typeref:struct:struc_instruments
interlace_method	lodepng.h	/^  unsigned interlace_method;  \/*interlace method of the original file*\/$/;"	m	struct:LodePNGInfo
interruptPercentage	Mod/RuleAlienMission.h	/^	int interruptPercentage;$/;"	m	struct:OpenXcom::MissionWave
intersection	Engine/GraphSubset.h	/^	static inline AreaSubset intersection(const AreaSubset& a, const AreaSubset& b)$/;"	f	struct:OpenXcom::AreaSubset
intersection	Engine/GraphSubset.h	/^	static inline AreaSubset intersection(const AreaSubset& a, const AreaSubset& b,  const AreaSubset& c)$/;"	f	struct:OpenXcom::AreaSubset
intersection	Engine/GraphSubset.h	/^	static inline AreaSubset intersection(const AreaSubset& a, const AreaSubset& b,  const AreaSubset& c, const AreaSubset& d)$/;"	f	struct:OpenXcom::AreaSubset
intersection_range	Engine/GraphSubset.h	/^	static inline void intersection_range(DataType& begin_a, DataType& end_a, const DataType& begin_b, const DataType& end_b)$/;"	f	struct:OpenXcom::AreaSubset
introCatOnlySounds	Menu/VideoState.cpp	/^static soundInFile introCatOnlySounds[]=$/;"	m	namespace:OpenXcom	file:
introSoundEffect	Menu/VideoState.cpp	/^} introSoundEffect;$/;"	t	namespace:OpenXcom	typeref:struct:OpenXcom::__anon12	file:
introSoundTrack	Menu/VideoState.cpp	/^static introSoundEffect introSoundTrack[] =$/;"	m	namespace:OpenXcom	file:
introSounds	Menu/VideoState.cpp	/^static soundInFile *introSounds[] =$/;"	m	namespace:OpenXcom	file:
invClick	Battlescape/InventoryState.cpp	/^void InventoryState::invClick(Action *act)$/;"	f	class:OpenXcom::InventoryState
invMouseOut	Battlescape/InventoryState.cpp	/^void InventoryState::invMouseOut(Action *)$/;"	f	class:OpenXcom::InventoryState
invMouseOver	Battlescape/InventoryState.cpp	/^void InventoryState::invMouseOver(Action *)$/;"	f	class:OpenXcom::InventoryState
invalid	Battlescape/TileEngine.cpp	/^constexpr Position TileEngine::invalid;$/;"	m	class:OpenXcom::TileEngine	file:
invalid	Battlescape/TileEngine.h	/^	static constexpr Position invalid = { -1, -1, -1 };$/;"	m	class:OpenXcom::TileEngine
invalid	Ufopaedia/ArticleState.h	/^		static constexpr size_t invalid = -1;$/;"	m	struct:OpenXcom::ArticleCommonState
invalidate	Engine/Surface.cpp	/^void Surface::invalidate(bool valid)$/;"	f	class:OpenXcom::Surface
invert	Engine/Surface.cpp	/^void Surface::invert(Uint8 mid)$/;"	f	class:OpenXcom::Surface
ironMan	Savegame/BattleUnitStatistics.h	/^	bool ironMan;                        \/\/\/< Tracks if the soldier was the only soldier on the mission$/;"	m	struct:OpenXcom::BattleUnitStatistics
isAborted	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::isAborted() const$/;"	f	class:OpenXcom::SavedBattleGame
isAimingScript	Savegame/BattleUnit.cpp	/^void isAimingScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
isAlien	Mod/RuleItem.cpp	/^bool RuleItem::isAlien() const$/;"	f	class:OpenXcom::RuleItem
isAlienBase	Mod/AlienDeployment.cpp	/^bool AlienDeployment::isAlienBase() const$/;"	f	class:OpenXcom::AlienDeployment
isAlienBase	Savegame/MissionStatistics.h	/^	bool isAlienBase() const$/;"	f	struct:OpenXcom::MissionStatistics
isAllocated	Savegame/Node.cpp	/^bool Node::isAllocated() const$/;"	f	class:OpenXcom::Node
isAllowedForBaseType	Mod/RuleBaseFacility.cpp	/^bool RuleBaseFacility::isAllowedForBaseType(bool fakeUnderwaterBase) const$/;"	f	class:OpenXcom::RuleBaseFacility
isAllowingAliveSoldiers	Mod/RuleSoldierTransformation.cpp	/^bool RuleSoldierTransformation::isAllowingAliveSoldiers() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
isAllowingDeadSoldiers	Mod/RuleSoldierTransformation.cpp	/^bool RuleSoldierTransformation::isAllowingDeadSoldiers() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
isAllowingWoundedSoldiers	Mod/RuleSoldierTransformation.cpp	/^bool RuleSoldierTransformation::isAllowingWoundedSoldiers() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
isAltPressed	Battlescape/Map.h	/^	bool isAltPressed() const { return _isAltPressed; }$/;"	f	class:OpenXcom::Map
isAltPressed	Engine/Game.cpp	/^bool Game::isAltPressed(bool considerTouchButtons) const$/;"	f	class:OpenXcom::Game
isAltPressed	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::isAltPressed(bool considerTouchButtons) const$/;"	f	class:OpenXcom::SavedBattleGame
isAlwaysVisible	Mod/Armor.h	/^	bool isAlwaysVisible() const { return _isAlwaysVisible; }$/;"	f	class:OpenXcom::Armor
isAmmo	Savegame/BattleItem.cpp	/^bool BattleItem::isAmmo() const$/;"	f	class:OpenXcom::BattleItem
isAmmoVisibleForSlot	Savegame/BattleItem.cpp	/^bool BattleItem::isAmmoVisibleForSlot(int slot) const$/;"	f	class:OpenXcom::BattleItem
isAreaInUse	Savegame/Base.cpp	/^BasePlacementErrors Base::isAreaInUse(BaseAreaSubset area, const RuleBaseFacility* replacement) const$/;"	f	class:OpenXcom::Base
isArmorStorageItem	Mod/Mod.cpp	/^bool Mod::isArmorStorageItem(const RuleItem* item) const$/;"	f	class:OpenXcom::Mod
isArticleAvailable	Ufopaedia/Ufopaedia.cpp	/^	bool Ufopaedia::isArticleAvailable(SavedGame *save, ArticleDefinition *article)$/;"	f	class:OpenXcom::Ufopaedia
isArticleHidden	Ufopaedia/Ufopaedia.cpp	/^	bool Ufopaedia::isArticleHidden(SavedGame *save, ArticleDefinition *article, Mod *mod)$/;"	f	class:OpenXcom::Ufopaedia
isAwardedCommendation	Ufopaedia/Ufopaedia.cpp	/^	bool Ufopaedia::isAwardedCommendation(SavedGame *save, ArticleDefinition *article)$/;"	f	class:OpenXcom::Ufopaedia
isBackTileObject	Mod/MapData.cpp	/^bool MapData::isBackTileObject() const$/;"	f	class:OpenXcom::MapData
isBackTileObject	Savegame/Tile.h	/^		Uint8 isBackTileObject:1;$/;"	m	struct:OpenXcom::Tile::TileObjectCache
isBackTileObject	Savegame/Tile.h	/^	bool isBackTileObject(TilePart tp) const$/;"	f	class:OpenXcom::Tile
isBannedInNextStage	Savegame/BattleUnit.h	/^	bool isBannedInNextStage() const { return _bannedInNextStage; }$/;"	f	class:OpenXcom::BattleUnit
isBaseCraftInventory	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::isBaseCraftInventory()$/;"	f	class:OpenXcom::SavedBattleGame
isBaseDefense	Savegame/MissionStatistics.h	/^	bool isBaseDefense() const$/;"	f	struct:OpenXcom::MissionStatistics
isBaseModule	Mod/MapData.cpp	/^bool MapData::isBaseModule() const$/;"	f	class:OpenXcom::MapData
isBattlescapeStateBusy	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::isBattlescapeStateBusy() const$/;"	f	class:OpenXcom::SavedBattleGame
isBeforeGame	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::isBeforeGame() const$/;"	f	class:OpenXcom::SavedBattleGame
isBig	Battlescape/Explosion.cpp	/^bool Explosion::isBig() const$/;"	f	class:OpenXcom::Explosion
isBigUnit	Savegame/BattleUnit.cpp	/^bool BattleUnit::isBigUnit() const$/;"	f	class:OpenXcom::BattleUnit
isBigWall	Savegame/Tile.h	/^	bool isBigWall() const$/;"	f	class:OpenXcom::Tile
isBlocked	Battlescape/Pathfinding.cpp	/^bool Pathfinding::isBlocked(const BattleUnit *unit, const Tile *tile, const int part, BattleActionMove bam, const BattleUnit *missileTarget, int bigWallExclusion) const$/;"	f	class:OpenXcom::Pathfinding
isBlockedDirection	Battlescape/Pathfinding.cpp	/^bool Pathfinding::isBlockedDirection(const BattleUnit *unit, Tile *startTile, const int direction) const$/;"	f	class:OpenXcom::Pathfinding
isBlockedDirection	Battlescape/Pathfinding.cpp	/^bool Pathfinding::isBlockedDirection(const BattleUnit *unit, Tile *startTile, const int direction, BattleActionMove bam, const BattleUnit *missileTarget) const$/;"	f	class:OpenXcom::Pathfinding
isBlockingBothHands	Mod/RuleItem.cpp	/^bool RuleItem::isBlockingBothHands() const$/;"	f	class:OpenXcom::RuleItem
isBuiltOrHadPreviousFacility	Savegame/BaseFacility.cpp	/^bool BaseFacility::isBuiltOrHadPreviousFacility() const$/;"	f	class:OpenXcom::BaseFacility
isBusy	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::isBusy() const$/;"	f	class:OpenXcom::BattlescapeGame
isBusy	Battlescape/BattlescapeState.cpp	/^bool BattlescapeState::isBusy() const$/;"	f	class:OpenXcom::BattlescapeState
isButtonHandled	Engine/InteractiveSurface.cpp	/^bool InteractiveSurface::isButtonHandled(Uint8 button)$/;"	f	class:OpenXcom::InteractiveSurface
isButtonHandled	Interface/ArrowButton.cpp	/^bool ArrowButton::isButtonHandled(Uint8 button)$/;"	f	class:OpenXcom::ArrowButton
isButtonHandled	Interface/TextButton.cpp	/^bool TextButton::isButtonHandled(Uint8 button)$/;"	f	class:OpenXcom::TextButton
isButtonPressed	Engine/InteractiveSurface.cpp	/^bool InteractiveSurface::isButtonPressed(Uint8 button) const$/;"	f	class:OpenXcom::InteractiveSurface
isCheating	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::isCheating() const$/;"	f	class:OpenXcom::SavedBattleGame
isChecked	Battlescape/PathfindingNode.cpp	/^bool PathfindingNode::isChecked() const$/;"	f	class:OpenXcom::PathfindingNode
isCitySpecific	Mod/RuleEvent.h	/^	bool isCitySpecific() const { return _city; }$/;"	f	class:OpenXcom::RuleEvent
isCollapsingScript	Savegame/BattleUnit.cpp	/^void isCollapsingScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
isCommanderOnboard	Savegame/Craft.cpp	/^bool Craft::isCommanderOnboard()$/;"	f	class:OpenXcom::Craft
isConsumable	Mod/RuleItem.cpp	/^bool RuleItem::isConsumable() const$/;"	f	class:OpenXcom::RuleItem
isCorpseRecoverable	Mod/RuleItem.cpp	/^bool RuleItem::isCorpseRecoverable() const$/;"	f	class:OpenXcom::RuleItem
isCosmetic	Mod/Unit.h	/^	bool isCosmetic() const { return _cosmetic; }$/;"	f	class:OpenXcom::Unit
isCosmetic	Savegame/BattleUnit.cpp	/^bool BattleUnit::isCosmetic() const$/;"	f	class:OpenXcom::BattleUnit
isCraftPermitted	Mod/RuleStartingCondition.cpp	/^bool RuleStartingCondition::isCraftPermitted(const std::string& craftType) const$/;"	f	class:OpenXcom::RuleStartingCondition
isCraftWeaponStorageItem	Mod/Mod.cpp	/^bool Mod::isCraftWeaponStorageItem(const RuleItem* item) const$/;"	f	class:OpenXcom::Mod
isCrashed	Savegame/Ufo.cpp	/^bool Ufo::isCrashed() const$/;"	f	class:OpenXcom::Ufo
isCreatingClone	Mod/RuleSoldierTransformation.cpp	/^bool RuleSoldierTransformation::isCreatingClone() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
isCtrlPressed	Engine/Game.cpp	/^bool Game::isCtrlPressed(bool considerTouchButtons) const$/;"	f	class:OpenXcom::Game
isCtrlPressed	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::isCtrlPressed(bool considerTouchButtons) const$/;"	f	class:OpenXcom::SavedBattleGame
isDamageTypeSet	Mod/RuleItem.h	/^	bool isDamageTypeSet() const { return _damageTypeSet; }$/;"	f	class:OpenXcom::RuleItem
isDarkness	Savegame/MissionStatistics.h	/^	bool isDarkness(const Mod* mod) const$/;"	f	struct:OpenXcom::MissionStatistics
isDemigod	Mod/Mod.cpp	/^bool Mod::isDemigod() const$/;"	f	class:OpenXcom::Mod
isDestroyed	Savegame/Craft.cpp	/^bool Craft::isDestroyed() const$/;"	f	class:OpenXcom::Craft
isDestroyed	Savegame/Ufo.cpp	/^bool Ufo::isDestroyed() const$/;"	f	class:OpenXcom::Ufo
isDirect	Mod/RuleDamageType.cpp	/^bool RuleDamageType::isDirect() const$/;"	f	class:OpenXcom::RuleDamageType
isDisabled	Savegame/CraftWeapon.cpp	/^bool CraftWeapon::isDisabled() const$/;"	f	class:OpenXcom::CraftWeapon
isDiscovered	Savegame/AlienBase.cpp	/^bool AlienBase::isDiscovered() const$/;"	f	class:OpenXcom::AlienBase
isDiscovered	Savegame/Tile.cpp	/^bool Tile::isDiscovered(TilePart part) const$/;"	f	class:OpenXcom::Tile
isDiscoveredCraft	Basescape/TechTreeViewerState.cpp	/^bool TechTreeViewerState::isDiscoveredCraft(const std::string &topic) const$/;"	f	class:OpenXcom::TechTreeViewerState
isDiscoveredFacility	Basescape/TechTreeViewerState.cpp	/^bool TechTreeViewerState::isDiscoveredFacility(const std::string &topic) const$/;"	f	class:OpenXcom::TechTreeViewerState
isDiscoveredManufacture	Basescape/TechTreeViewerState.cpp	/^bool TechTreeViewerState::isDiscoveredManufacture(const std::string &topic) const$/;"	f	class:OpenXcom::TechTreeViewerState
isDiscoveredResearch	Basescape/TechTreeViewerState.cpp	/^bool TechTreeViewerState::isDiscoveredResearch(const std::string &topic) const$/;"	f	class:OpenXcom::TechTreeViewerState
isDoor	Mod/MapData.cpp	/^bool MapData::isDoor() const$/;"	f	class:OpenXcom::MapData
isDoor	Savegame/Tile.h	/^		Uint8 isDoor:1;$/;"	m	struct:OpenXcom::Tile::TileObjectCache
isDoor	Savegame/Tile.h	/^	bool isDoor(TilePart tp) const$/;"	f	class:OpenXcom::Tile
isDummy	Savegame/Node.cpp	/^bool Node::isDummy() const$/;"	f	class:OpenXcom::Node
isEligibleForTransformation	Savegame/Soldier.cpp	/^bool Soldier::isEligibleForTransformation(RuleSoldierTransformation *transformationRule)$/;"	f	class:OpenXcom::Soldier
isEmptyRuleName	Mod/Mod.h	/^	static bool isEmptyRuleName(const std::string& s)$/;"	f	class:OpenXcom::Mod
isEndOfFile	Engine/FlcPlayer.cpp	/^bool FlcPlayer::isEndOfFile(Uint8 *pos)$/;"	f	class:OpenXcom::FlcPlayer
isEndlessInfiltration	Mod/RuleAlienMission.cpp	/^bool RuleAlienMission::isEndlessInfiltration() const$/;"	f	class:OpenXcom::RuleAlienMission
isEngineOk	Engine/ModInfo.cpp	/^bool               ModInfo::isEngineOk()                 const { return _engineOk;                }$/;"	f	class:OpenXcom::ModInfo
isEscort	Savegame/Ufo.cpp	/^bool Ufo::isEscort() const$/;"	f	class:OpenXcom::Ufo
isEscorting	Savegame/Ufo.cpp	/^bool Ufo::isEscorting() const$/;"	f	class:OpenXcom::Ufo
isExplodingInHands	Mod/RuleItem.cpp	/^bool RuleItem::isExplodingInHands() const$/;"	f	class:OpenXcom::RuleItem
isFacilityBuilt	Savegame/SavedGame.cpp	/^bool SavedGame::isFacilityBuilt(const std::string &facilityType) const$/;"	f	class:OpenXcom::SavedGame
isFakeUnderwater	Mod/Texture.h	/^	bool isFakeUnderwater() const { return _fakeUnderwater; }$/;"	f	class:OpenXcom::Texture
isFakeUnderwater	Savegame/Base.h	/^	bool isFakeUnderwater() const { return _fakeUnderwater; }$/;"	f	class:OpenXcom::Base
isFearable	Savegame/BattleUnit.cpp	/^bool BattleUnit::isFearable() const$/;"	f	class:OpenXcom::BattleUnit
isFinalDestination	Mod/AlienDeployment.cpp	/^bool AlienDeployment::isFinalDestination() const$/;"	f	class:OpenXcom::AlienDeployment
isFinished	Savegame/ResearchProject.cpp	/^bool ResearchProject::isFinished()$/;"	f	class:OpenXcom::ResearchProject
isFireExtinguisher	Mod/RuleItem.cpp	/^bool RuleItem::isFireExtinguisher() const$/;"	f	class:OpenXcom::RuleItem
isFixed	Mod/RuleItem.cpp	/^bool RuleItem::isFixed() const$/;"	f	class:OpenXcom::RuleItem
isFixed	Savegame/EquipmentLayoutItem.cpp	/^bool EquipmentLayoutItem::isFixed() const$/;"	f	class:OpenXcom::EquipmentLayoutItem
isFloating	Savegame/BattleUnit.cpp	/^bool BattleUnit::isFloating() const$/;"	f	class:OpenXcom::BattleUnit
isFloorRevealed	Mod/MapBlock.cpp	/^bool MapBlock::isFloorRevealed(int floor)$/;"	f	class:OpenXcom::MapBlock
isFlyingScript	Savegame/BattleUnit.cpp	/^void isFlyingScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
isFocused	Engine/InteractiveSurface.cpp	/^bool InteractiveSurface::isFocused() const$/;"	f	class:OpenXcom::InteractiveSurface
isFullyPsiTrained	Savegame/Soldier.cpp	/^bool Soldier::isFullyPsiTrained()$/;"	f	class:OpenXcom::Soldier
isFullyTrained	Savegame/Soldier.cpp	/^bool Soldier::isFullyTrained()$/;"	f	class:OpenXcom::Soldier
isFuseEnabled	Savegame/BattleItem.cpp	/^bool BattleItem::isFuseEnabled() const$/;"	f	class:OpenXcom::BattleItem
isGenMissionRaceFromAlienBase	Mod/AlienDeployment.cpp	/^bool AlienDeployment::isGenMissionRaceFromAlienBase() const$/;"	f	class:OpenXcom::AlienDeployment
isGravLift	Mod/MapData.cpp	/^bool MapData::isGravLift() const$/;"	f	class:OpenXcom::MapData
isGravShield	Mod/RuleBaseFacility.cpp	/^bool RuleBaseFacility::isGravShield() const$/;"	f	class:OpenXcom::RuleBaseFacility
isHidden	Basescape/PurchaseState.cpp	/^bool PurchaseState::isHidden(int sel) const$/;"	f	class:OpenXcom::PurchaseState
isHidden	Mod/AlienDeployment.h	/^	bool isHidden() const { return _isHidden; }$/;"	f	class:OpenXcom::AlienDeployment
isHidden	Mod/RuleItemCategory.cpp	/^bool RuleItemCategory::isHidden() const$/;"	f	class:OpenXcom::RuleItemCategory
isHiddenOnMinimap	Mod/RuleItem.cpp	/^bool RuleItem::isHiddenOnMinimap() const$/;"	f	class:OpenXcom::RuleItem
isHiding	Savegame/BattleUnit.h	/^	bool isHiding() const {return _hidingForTurn; };$/;"	f	class:OpenXcom::BattleUnit
isHigherThanCurrentVersion	Engine/CrossPlatform.cpp	/^bool isHigherThanCurrentVersion(const std::array<int, 4>& newOxceVersion, const int (&ver)[4])$/;"	f	namespace:OpenXcom::CrossPlatform
isHigherThanCurrentVersion	Engine/CrossPlatform.cpp	/^bool isHigherThanCurrentVersion(const std::string& newVersion)$/;"	f	namespace:OpenXcom::CrossPlatform
isHit	Battlescape/Explosion.cpp	/^bool Explosion::isHit() const$/;"	f	class:OpenXcom::Explosion
isHuntMissionRaceFromAlienBase	Mod/AlienDeployment.cpp	/^bool AlienDeployment::isHuntMissionRaceFromAlienBase() const$/;"	f	class:OpenXcom::AlienDeployment
isHunterKiller	Savegame/Ufo.cpp	/^bool Ufo::isHunterKiller() const$/;"	f	class:OpenXcom::Ufo
isHunting	Savegame/Ufo.cpp	/^bool Ufo::isHunting() const$/;"	f	class:OpenXcom::Ufo
isHyperwave	Mod/RuleBaseFacility.cpp	/^bool RuleBaseFacility::isHyperwave() const$/;"	f	class:OpenXcom::RuleBaseFacility
isIgnored	Savegame/BattleUnit.cpp	/^bool BattleUnit::isIgnored() const$/;"	f	class:OpenXcom::BattleUnit
isIgnoredByAI	Mod/Unit.h	/^	bool isIgnoredByAI() const { return _ignoredByAI; }$/;"	f	class:OpenXcom::Unit
isIgnoredByAI	Savegame/BattleUnit.cpp	/^bool BattleUnit::isIgnoredByAI() const$/;"	f	class:OpenXcom::BattleUnit
isIgnoredByHK	Savegame/Craft.cpp	/^bool Craft::isIgnoredByHK() const$/;"	f	class:OpenXcom::Craft
isImageFile	Mod/ExtraSprites.cpp	/^bool ExtraSprites::isImageFile(const std::string &filename)$/;"	f	class:OpenXcom::ExtraSprites
isInBattlescape	Savegame/AlienBase.cpp	/^bool AlienBase::isInBattlescape() const$/;"	f	class:OpenXcom::AlienBase
isInBattlescape	Savegame/Base.cpp	/^bool Base::isInBattlescape() const$/;"	f	class:OpenXcom::Base
isInBattlescape	Savegame/Craft.cpp	/^bool Craft::isInBattlescape() const$/;"	f	class:OpenXcom::Craft
isInBattlescape	Savegame/MissionSite.cpp	/^bool MissionSite::isInBattlescape() const$/;"	f	class:OpenXcom::MissionSite
isInBattlescape	Savegame/Ufo.cpp	/^bool Ufo::isInBattlescape() const$/;"	f	class:OpenXcom::Ufo
isInDogfight	Savegame/Craft.cpp	/^bool Craft::isInDogfight() const$/;"	f	class:OpenXcom::Craft
isInExitArea	Savegame/BattleUnit.cpp	/^bool BattleUnit::isInExitArea(SpecialTileType stt) const$/;"	f	class:OpenXcom::BattleUnit
isInGroup	Mod/MapBlock.cpp	/^bool MapBlock::isInGroup(int group)$/;"	f	class:OpenXcom::MapBlock
isInPsiTraining	Savegame/Soldier.cpp	/^bool Soldier::isInPsiTraining() const$/;"	f	class:OpenXcom::Soldier
isInSearchString	Battlescape/Inventory.cpp	/^bool Inventory::isInSearchString(BattleItem *item)$/;"	f	class:OpenXcom::Inventory
isInTraining	Savegame/Soldier.cpp	/^bool Soldier::isInTraining()$/;"	f	class:OpenXcom::Soldier
isInsideNoScrollArea	Interface/TextList.cpp	/^bool TextList::isInsideNoScrollArea(int x)$/;"	f	class:OpenXcom::TextList
isInventoryItem	Mod/RuleItem.cpp	/^bool RuleItem::isInventoryItem() const$/;"	f	class:OpenXcom::RuleItem
isIronman	Savegame/SavedGame.cpp	/^bool SavedGame::isIronman() const$/;"	f	class:OpenXcom::SavedGame
isItemObtained	Savegame/SavedGame.cpp	/^bool SavedGame::isItemObtained(const std::string &itemType) const$/;"	f	class:OpenXcom::SavedGame
isItemPermitted	Mod/RuleStartingCondition.cpp	/^bool RuleStartingCondition::isItemPermitted(const std::string& itemType, Mod* mod, Craft* craft) const$/;"	f	class:OpenXcom::RuleStartingCondition
isKeepingSoldierArmor	Mod/RuleSoldierTransformation.cpp	/^bool RuleSoldierTransformation::isKeepingSoldierArmor() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
isKneeled	Savegame/BattleUnit.cpp	/^bool BattleUnit::isKneeled() const$/;"	f	class:OpenXcom::BattleUnit
isLOSRequired	Mod/RuleItem.cpp	/^bool RuleItem::isLOSRequired() const$/;"	f	class:OpenXcom::RuleItem
isLandOnly	Mod/RuleItem.cpp	/^bool RuleItem::isLandOnly() const$/;"	f	class:OpenXcom::RuleItem
isLastDayOfMonth	Savegame/GameTime.cpp	/^bool GameTime::isLastDayOfMonth()$/;"	f	class:OpenXcom::GameTime
isLeeroyJenkins	Mod/Unit.h	/^	bool isLeeroyJenkins() const { return _isLeeroyJenkins; };$/;"	f	class:OpenXcom::Unit
isLeeroyJenkins	Savegame/BattleUnit.h	/^	bool isLeeroyJenkins() const { return _isLeeroyJenkins; };$/;"	f	class:OpenXcom::BattleUnit
isLeftClick	Engine/Game.cpp	/^bool Game::isLeftClick(Action* action, bool considerTouchButtons) const$/;"	f	class:OpenXcom::Game
isLeftHand	Mod/RuleInventory.cpp	/^bool RuleInventory::isLeftHand() const$/;"	f	class:OpenXcom::RuleInventory
isLeftHandPreferredForReactions	Savegame/BattleUnit.cpp	/^bool BattleUnit::isLeftHandPreferredForReactions() const$/;"	f	class:OpenXcom::BattleUnit
isLift	Mod/RuleBaseFacility.cpp	/^bool RuleBaseFacility::isLift() const$/;"	f	class:OpenXcom::RuleBaseFacility
isLinebreak	Engine/Unicode.h	/^	inline bool isLinebreak(UCode c) { return (c == '\\n' || c == TOK_NL_SMALL); }$/;"	f	namespace:OpenXcom::Unicode
isListAddTagHelper	Mod/Mod.cpp	/^bool isListAddTagHelper(const YAML::Node &node)$/;"	f	namespace:OpenXcom::__anon28
isListHelper	Mod/Mod.cpp	/^bool isListHelper(const YAML::Node &node)$/;"	f	namespace:OpenXcom::__anon28
isListRemoveTagHelper	Mod/Mod.cpp	/^bool isListRemoveTagHelper(const YAML::Node &node)$/;"	f	namespace:OpenXcom::__anon28
isLivingWeapon	Mod/Unit.cpp	/^bool Unit::isLivingWeapon() const$/;"	f	class:OpenXcom::Unit
isLoaded	Mod/ExtraSprites.cpp	/^bool ExtraSprites::isLoaded() const$/;"	f	class:OpenXcom::ExtraSprites
isManaBarEnabled	Mod/Mod.h	/^	bool isManaBarEnabled() const { return _manaBattleUI; }$/;"	f	class:OpenXcom::Mod
isManaFeatureEnabled	Mod/Mod.h	/^	bool isManaFeatureEnabled() const { return _manaEnabled; }$/;"	f	class:OpenXcom::Mod
isManaRequired	Mod/RuleItem.cpp	/^bool RuleItem::isManaRequired() const$/;"	f	class:OpenXcom::RuleItem
isManaTrainingPrimary	Mod/Mod.h	/^	bool isManaTrainingPrimary() const { return _manaTrainingPrimary; }$/;"	f	class:OpenXcom::Mod
isManaTrainingSecondary	Mod/Mod.h	/^	bool isManaTrainingSecondary() const { return _manaTrainingSecondary; }$/;"	f	class:OpenXcom::Mod
isManaUnlocked	Savegame/SavedGame.cpp	/^bool SavedGame::isManaUnlocked(Mod *mod) const$/;"	f	class:OpenXcom::SavedGame
isMapAddTagHelper	Mod/Mod.cpp	/^bool isMapAddTagHelper(const YAML::Node &node)$/;"	f	namespace:OpenXcom::__anon28
isMapHelper	Mod/Mod.cpp	/^bool isMapHelper(const YAML::Node &node)$/;"	f	namespace:OpenXcom::__anon28
isMapVisible	Mod/RuleCraft.cpp	/^bool RuleCraft::isMapVisible() const$/;"	f	class:OpenXcom::RuleCraft
isMaster	Engine/ModInfo.cpp	/^bool               ModInfo::isMaster()                   const { return _isMaster;                }$/;"	f	class:OpenXcom::ModInfo
isMasterNotValid	Menu/ModConfirmExtendedState.cpp	/^	bool ModConfirmExtendedState::isMasterNotValid(const ModInfo *masterInfo)$/;"	f	class:OpenXcom::ModConfirmExtendedState
isMaxAllowedLimitReached	Savegame/Base.cpp	/^bool Base::isMaxAllowedLimitReached(RuleBaseFacility *rule) const$/;"	f	class:OpenXcom::Base
isMeetCalculated	Savegame/MovingTarget.cpp	/^bool MovingTarget::isMeetCalculated() const$/;"	f	class:OpenXcom::MovingTarget
isMeleeTypeSet	Mod/RuleItem.h	/^	bool isMeleeTypeSet() const { return _meleeTypeSet; }$/;"	f	class:OpenXcom::RuleItem
isMet	Mod/StatStringCondition.cpp	/^bool StatStringCondition::isMet(int stat, bool psi) const$/;"	f	class:OpenXcom::StatStringCondition
isMiddleClick	Engine/Game.cpp	/^bool Game::isMiddleClick(Action* action, bool considerTouchButtons) const$/;"	f	class:OpenXcom::Game
isMindShield	Mod/RuleBaseFacility.cpp	/^bool RuleBaseFacility::isMindShield() const$/;"	f	class:OpenXcom::RuleBaseFacility
isMinimized	Geoscape/DogfightState.cpp	/^bool DogfightState::isMinimized() const$/;"	f	class:OpenXcom::DogfightState
isModNotValid	Menu/ModConfirmExtendedState.cpp	/^	bool ModConfirmExtendedState::isModNotValid(const ModInfo *modInfo, const ModInfo *masterInfo)$/;"	f	class:OpenXcom::ModConfirmExtendedState
isModded	Mod/RuleStatBonus.h	/^	bool isModded() const { return _modded; }$/;"	f	class:OpenXcom::RuleStatBonus
isModifierAltUsed	Battlescape/Pathfinding.h	/^	bool isModifierAltUsed() const { return _altUsed; }$/;"	f	class:OpenXcom::Pathfinding
isModifierCtrlUsed	Battlescape/Pathfinding.h	/^	bool isModifierCtrlUsed() const { return _ctrlUsed; }$/;"	f	class:OpenXcom::Pathfinding
isMouseAction	Engine/Action.cpp	/^bool Action::isMouseAction() const$/;"	f	class:OpenXcom::Action
isMultiUfoRetaliation	Mod/RuleAlienMission.h	/^	bool isMultiUfoRetaliation() const { return _multiUfoRetaliation; }$/;"	f	class:OpenXcom::RuleAlienMission
isNameDisplay	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::isNameDisplay() const$/;"	f	class:OpenXcom::SavedBattleGame
isNew	Savegame/SoldierDiary.cpp	/^bool SoldierCommendations::isNew() const$/;"	f	class:OpenXcom::SoldierCommendations
isNoFloor	Mod/MapData.cpp	/^bool MapData::isNoFloor() const$/;"	f	class:OpenXcom::MapData
isNoFloor	Savegame/Tile.h	/^		Uint8 isNoFloor:1;$/;"	m	struct:OpenXcom::Tile::TileCache
isObstacle	Savegame/Tile.h	/^	bool isObstacle(void) const$/;"	f	class:OpenXcom::Tile
isOcean	Geoscape/Globe.cpp	/^	static inline bool isOcean(const Uint8& dest)$/;"	f	struct:OpenXcom::__anon49::CreateShadow
isOnScreen	Battlescape/Camera.cpp	/^bool Camera::isOnScreen(Position mapPos, const bool unitWalking, const int unitSize, const bool boundary) const$/;"	f	class:OpenXcom::Camera
isOnStairs	Battlescape/Pathfinding.cpp	/^bool Pathfinding::isOnStairs(Position startPosition, Position endPosition) const$/;"	f	class:OpenXcom::Pathfinding
isOut	Savegame/BattleUnit.cpp	/^bool BattleUnit::isOut() const$/;"	f	class:OpenXcom::BattleUnit
isOutOfRange	Mod/RuleItem.cpp	/^bool RuleItem::isOutOfRange(int distanceSq) const$/;"	f	class:OpenXcom::RuleItem
isOutThresholdExceed	Savegame/BattleUnit.cpp	/^bool BattleUnit::isOutThresholdExceed() const$/;"	f	class:OpenXcom::BattleUnit
isOver	Savegame/AlienMission.cpp	/^bool AlienMission::isOver() const$/;"	f	class:OpenXcom::AlienMission
isOver	Savegame/GeoscapeEvent.h	/^	bool isOver() const { return _over; }$/;"	f	class:OpenXcom::GeoscapeEvent
isOverlappingOrOverflowing	Savegame/Base.cpp	/^bool Base::isOverlappingOrOverflowing()$/;"	f	class:OpenXcom::Base
isOwnerIgnored	Savegame/BattleItem.cpp	/^bool BattleItem::isOwnerIgnored() const$/;"	f	class:OpenXcom::BattleItem
isParentMasterOk	Engine/ModInfo.cpp	/^bool ModInfo::isParentMasterOk(const ModInfo* parentMod) const$/;"	f	class:OpenXcom::ModInfo
isPasswordCorrect	Engine/Options.cpp	/^bool isPasswordCorrect()$/;"	f	namespace:OpenXcom::Options
isPathPreviewed	Battlescape/Pathfinding.cpp	/^bool Pathfinding::isPathPreviewed() const$/;"	f	class:OpenXcom::Pathfinding
isPilot	Savegame/Craft.cpp	/^bool Craft::isPilot(int pilotId)$/;"	f	class:OpenXcom::Craft
isPilotArmor	Mod/Armor.h	/^	bool isPilotArmor() const { return _isPilotArmor; }$/;"	f	class:OpenXcom::Armor
isPistol	Mod/RuleItem.cpp	/^bool RuleItem::isPistol() const$/;"	f	class:OpenXcom::RuleItem
isPlaying	Engine/AdlibMusic.cpp	/^bool AdlibMusic::isPlaying()$/;"	f	class:OpenXcom::AdlibMusic
isPlaying	Engine/Music.cpp	/^bool Music::isPlaying()$/;"	f	class:OpenXcom::Music
isPoint	Mod/RuleRegion.h	/^	bool isPoint() const$/;"	f	struct:OpenXcom::MissionArea
isPositionValidForUnit	Battlescape/TileEngine.cpp	/^bool TileEngine::isPositionValidForUnit(Position &position, BattleUnit *unit, bool checkSurrounding, int startSurroundingCheckDirection)$/;"	f	class:OpenXcom::TileEngine
isPreview	Savegame/SavedBattleGame.h	/^	bool isPreview() const { return _isPreview; }$/;"	f	class:OpenXcom::SavedBattleGame
isPrintable	Engine/Unicode.h	/^	inline bool isPrintable(UCode c) { return (c > 32 && c != TOK_NBSP); }$/;"	f	namespace:OpenXcom::Unicode
isPromoted	Savegame/Soldier.cpp	/^bool Soldier::isPromoted()$/;"	f	class:OpenXcom::Soldier
isProtectedAndDiscoveredItem	Basescape/TechTreeViewerState.cpp	/^bool TechTreeViewerState::isProtectedAndDiscoveredItem(const std::string &topic) const$/;"	f	class:OpenXcom::TechTreeViewerState
isProtectedItem	Basescape/TechTreeViewerState.cpp	/^bool TechTreeViewerState::isProtectedItem(const std::string &topic) const$/;"	f	class:OpenXcom::TechTreeViewerState
isPsiRequired	Mod/RuleItem.cpp	/^bool RuleItem::isPsiRequired() const$/;"	f	class:OpenXcom::RuleItem
isPsiRequired	Mod/RuleSkill.h	/^	bool isPsiRequired() const { return _isPsiRequired; }$/;"	f	class:OpenXcom::RuleSkill
isQueuedBuilding	Basescape/BaseView.cpp	/^bool BaseView::isQueuedBuilding(const RuleBaseFacility *rule) const$/;"	f	class:OpenXcom::BaseView
isQuitShortcut	Engine/CrossPlatform.cpp	/^bool isQuitShortcut(const SDL_Event &ev)$/;"	f	namespace:OpenXcom::CrossPlatform
isQuitting	Engine/Game.cpp	/^bool Game::isQuitting() const$/;"	f	class:OpenXcom::Game
isRandom	Mod/Unit.h	/^	static UnitStats isRandom(const UnitStats &a, const UnitStats &b)$/;"	f	struct:OpenXcom::UnitStats
isRearming	Savegame/CraftWeapon.cpp	/^bool CraftWeapon::isRearming() const$/;"	f	class:OpenXcom::CraftWeapon
isRecoverable	Mod/RuleItem.cpp	/^bool RuleItem::isRecoverable() const$/;"	f	class:OpenXcom::RuleItem
isResearchRuleStatusDisabled	Savegame/SavedGame.cpp	/^bool SavedGame::isResearchRuleStatusDisabled(const std::string &researchRule) const$/;"	f	class:OpenXcom::SavedGame
isResearchRuleStatusNew	Savegame/SavedGame.cpp	/^bool SavedGame::isResearchRuleStatusNew(const std::string &researchRule) const$/;"	f	class:OpenXcom::SavedGame
isResearched	Savegame/SavedGame.cpp	/^bool SavedGame::isResearched(const RuleResearch *research, bool considerDebugMode) const$/;"	f	class:OpenXcom::SavedGame
isResearched	Savegame/SavedGame.cpp	/^bool SavedGame::isResearched(const std::string &research, bool considerDebugMode) const$/;"	f	class:OpenXcom::SavedGame
isResearched	Savegame/SavedGame.cpp	/^bool SavedGame::isResearched(const std::vector<const RuleResearch *> &research, bool considerDebugMode, bool skipDisabled) const$/;"	f	class:OpenXcom::SavedGame
isResearched	Savegame/SavedGame.cpp	/^bool SavedGame::isResearched(const std::vector<std::string> &research, bool considerDebugMode) const$/;"	f	class:OpenXcom::SavedGame
isResearchedScript	Savegame/SavedGame.cpp	/^void isResearchedScript(const SavedGame* sg, int& val, const RuleResearch* name)$/;"	f	namespace:OpenXcom::__anon42
isResummonedFakeCivilian	Savegame/BattleUnit.h	/^	bool isResummonedFakeCivilian() const { return _resummonedFakeCivilian; }$/;"	f	class:OpenXcom::BattleUnit
isReversed	Battlescape/Projectile.cpp	/^bool Projectile::isReversed() const$/;"	f	class:OpenXcom::Projectile
isRifle	Mod/RuleItem.cpp	/^bool RuleItem::isRifle() const$/;"	f	class:OpenXcom::RuleItem
isRightClick	Engine/Game.cpp	/^bool Game::isRightClick(Action* action, bool considerTouchButtons) const$/;"	f	class:OpenXcom::Game
isRightHand	Mod/RuleInventory.cpp	/^bool RuleInventory::isRightHand() const$/;"	f	class:OpenXcom::RuleInventory
isRightHandPreferredForReactions	Savegame/BattleUnit.cpp	/^bool BattleUnit::isRightHandPreferredForReactions() const$/;"	f	class:OpenXcom::BattleUnit
isRuleset	Engine/FileMap.cpp	/^static bool isRuleset(const std::string& fname) {$/;"	f	namespace:OpenXcom::FileMap
isRunning	Engine/Timer.cpp	/^bool Timer::isRunning() const$/;"	f	class:OpenXcom::Timer
isSalaryDynamic	Mod/RuleSoldier.cpp	/^bool RuleSoldier::isSalaryDynamic() const$/;"	f	class:OpenXcom::RuleSoldier
isScreen	Engine/State.cpp	/^bool State::isScreen() const$/;"	f	class:OpenXcom::State
isScrollbarVisible	Interface/TextList.cpp	/^bool TextList::isScrollbarVisible() const$/;"	f	class:OpenXcom::TextList
isSelectable	Savegame/BattleUnit.cpp	/^bool BattleUnit::isSelectable(UnitFaction faction, bool checkReselect, bool checkInventory) const$/;"	f	class:OpenXcom::BattleUnit
isSeparator	Engine/Unicode.h	/^	inline bool isSeparator(UCode c) { return (c == '-' || c == '\/'); }$/;"	f	namespace:OpenXcom::Unicode
isShiftPressed	Engine/Game.cpp	/^bool Game::isShiftPressed(bool considerTouchButtons) const$/;"	f	class:OpenXcom::Game
isShiftPressed	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::isShiftPressed(bool considerTouchButtons) const$/;"	f	class:OpenXcom::SavedBattleGame
isSingleTargetScript	Mod/RuleItem.cpp	/^void isSingleTargetScript(const RuleItem* r, int &ret)$/;"	f	namespace:OpenXcom::__anon21
isSkillMenuDefined	Mod/RuleSoldier.cpp	/^bool RuleSoldier::isSkillMenuDefined() const$/;"	f	class:OpenXcom::RuleSoldier
isSmallUnit	Savegame/BattleUnit.cpp	/^bool BattleUnit::isSmallUnit() const$/;"	f	class:OpenXcom::BattleUnit
isSniper	Savegame/BattleUnit.cpp	/^bool BattleUnit::isSniper() const$/;"	f	class:OpenXcom::BattleUnit
isSoftLimit	Mod/RuleSoldierTransformation.cpp	/^bool RuleSoldierTransformation::isSoftLimit(bool isSameSoldierType) const$/;"	f	class:OpenXcom::RuleSoldierTransformation
isSoldierTypeHired	Savegame/SavedGame.cpp	/^bool SavedGame::isSoldierTypeHired(const std::string& soldierType) const$/;"	f	class:OpenXcom::SavedGame
isSoldierTypePermitted	Mod/RuleStartingCondition.cpp	/^bool RuleStartingCondition::isSoldierTypePermitted(const std::string& soldierType) const$/;"	f	class:OpenXcom::RuleStartingCondition
isSpace	Engine/Unicode.h	/^	inline bool isSpace(UCode c) { return (c == ' ' || c == TOK_NBSP); }$/;"	f	namespace:OpenXcom::Unicode
isSpecialUsingEmptyHand	Mod/RuleItem.cpp	/^bool RuleItem::isSpecialUsingEmptyHand() const$/;"	f	class:OpenXcom::RuleItem
isSpecialWeapon	Savegame/BattleItem.h	/^	bool isSpecialWeapon() const { return getOwner() && !getSlot(); }$/;"	f	class:OpenXcom::BattleItem
isStandingScript	Savegame/BattleUnit.cpp	/^void isStandingScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
isState	Engine/Game.cpp	/^bool Game::isState(State *state) const$/;"	f	class:OpenXcom::Game
isSummonedPlayerUnit	Savegame/BattleUnit.cpp	/^bool BattleUnit::isSummonedPlayerUnit() const$/;"	f	class:OpenXcom::BattleUnit
isSupported	Engine/Language.h	/^	static bool isSupported(const std::string& lang) { return _names.find(lang) != _names.end(); }$/;"	f	class:OpenXcom::Language
isSurrendering	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::isSurrendering(BattleUnit* bu)$/;"	f	class:OpenXcom::BattlescapeGame
isSurrendering	Savegame/BattleUnit.cpp	/^bool BattleUnit::isSurrendering() const$/;"	f	class:OpenXcom::BattleUnit
isTFTDMode	Engine/InteractiveSurface.cpp	/^bool InteractiveSurface::isTFTDMode() const$/;"	f	class:OpenXcom::InteractiveSurface
isTakingOff	Savegame/Craft.cpp	/^bool Craft::isTakingOff() const$/;"	f	class:OpenXcom::Craft
isTarget	Savegame/Node.cpp	/^bool Node::isTarget() const$/;"	f	class:OpenXcom::Node
isTargetAllowed	Mod/RuleItem.cpp	/^bool RuleItem::isTargetAllowed(UnitFaction targetFaction) const$/;"	f	class:OpenXcom::RuleItem
isTileInLOS	Battlescape/TileEngine.cpp	/^bool TileEngine::isTileInLOS(BattleAction *action, Tile *tile)$/;"	f	class:OpenXcom::TileEngine
isTwoHanded	Mod/RuleItem.cpp	/^bool RuleItem::isTwoHanded() const$/;"	f	class:OpenXcom::RuleItem
isUFODoor	Mod/MapData.cpp	/^bool MapData::isUFODoor() const$/;"	f	class:OpenXcom::MapData
isUfoAttacking	Geoscape/DogfightState.cpp	/^bool DogfightState::isUfoAttacking() const$/;"	f	class:OpenXcom::DogfightState
isUfoDoor	Savegame/Tile.h	/^		Uint8 isUfoDoor:1;$/;"	m	struct:OpenXcom::Tile::TileObjectCache
isUfoDoor	Savegame/Tile.h	/^	bool isUfoDoor(TilePart tp) const$/;"	f	class:OpenXcom::Tile
isUfoDoorOpen	Savegame/Tile.h	/^	bool isUfoDoorOpen(TilePart tp) const$/;"	f	class:OpenXcom::Tile
isUfoMission	Savegame/MissionStatistics.h	/^	bool isUfoMission() const$/;"	f	struct:OpenXcom::MissionStatistics
isUfoOnIgnoreList	Savegame/SavedGame.cpp	/^bool SavedGame::isUfoOnIgnoreList(int ufoId)$/;"	f	class:OpenXcom::SavedGame
isUndetectable	Mod/RuleCraft.h	/^	bool isUndetectable() const { return _undetectable; }$/;"	f	class:OpenXcom::RuleCraft
isUnmanned	Mod/RuleUfo.h	/^	bool isUnmanned() const { return _unmanned; }$/;"	f	class:OpenXcom::RuleUfo
isUsefulBattlescapeItem	Mod/RuleItem.cpp	/^bool RuleItem::isUsefulBattlescapeItem() const$/;"	f	class:OpenXcom::RuleItem
isVIP	Mod/Unit.h	/^	bool isVIP() const { return _vip; }$/;"	f	class:OpenXcom::Unit
isVIP	Savegame/BattleUnit.h	/^	bool isVIP() const { return _vip; }$/;"	f	class:OpenXcom::BattleUnit
isValidChar	Interface/TextEdit.cpp	/^bool TextEdit::isValidChar(UCode c) const$/;"	f	class:OpenXcom::TextEdit
isValidFrame	Engine/FlcPlayer.cpp	/^bool FlcPlayer::isValidFrame(Uint8 *frameHeader, Uint32 &frameSize, Uint16 &frameType)$/;"	f	class:OpenXcom::FlcPlayer
isValidUTF8	Engine/Unicode.cpp	/^bool isValidUTF8(const std::string& ss)$/;"	f	namespace:OpenXcom::Unicode
isValidWeaponSlot	Mod/RuleCraft.cpp	/^bool RuleCraft::isValidWeaponSlot(int slot, int weaponType) const$/;"	f	class:OpenXcom::RuleCraft
isVehiclePermitted	Mod/RuleStartingCondition.cpp	/^bool RuleStartingCondition::isVehiclePermitted(const std::string& vehicleType) const$/;"	f	class:OpenXcom::RuleStartingCondition
isVoid	Savegame/Tile.cpp	/^bool Tile::isVoid() const$/;"	f	class:OpenXcom::Tile
isVoxelVisible	Battlescape/TileEngine.cpp	/^bool TileEngine::isVoxelVisible(Position voxel)$/;"	f	class:OpenXcom::TileEngine
isWalkingScript	Savegame/BattleUnit.cpp	/^void isWalkingScript(const BattleUnit *bu, int &ret)$/;"	f	namespace:OpenXcom::__anon36
isWaterOnly	Mod/RuleCraft.cpp	/^bool RuleCraft::isWaterOnly() const$/;"	f	class:OpenXcom::RuleCraft
isWaterOnly	Mod/RuleCraftWeapon.cpp	/^bool RuleCraftWeapon::isWaterOnly() const$/;"	f	class:OpenXcom::RuleCraftWeapon
isWaterOnly	Mod/RuleItem.cpp	/^bool RuleItem::isWaterOnly() const$/;"	f	class:OpenXcom::RuleItem
isWeaponWithAmmo	Savegame/BattleItem.cpp	/^bool BattleItem::isWeaponWithAmmo() const$/;"	f	class:OpenXcom::BattleItem
isWoundable	Savegame/BattleUnit.cpp	/^bool BattleUnit::isWoundable() const$/;"	f	class:OpenXcom::BattleUnit
isWounded	Savegame/Soldier.cpp	/^bool Soldier::isWounded() const$/;"	f	class:OpenXcom::Soldier
isoDate	Savegame/SavedGame.h	/^	std::string isoDate, isoTime;$/;"	m	struct:OpenXcom::SaveInfo
isoTime	Savegame/SavedGame.h	/^	std::string isoDate, isoTime;$/;"	m	struct:OpenXcom::SaveInfo
item	Battlescape/DebriefingState.h	/^	std::string item;$/;"	m	struct:OpenXcom::DebriefingStat
item	Battlescape/DebriefingState.h	/^struct ReequipStat { std::string item; int qty; std::string craft; int listOrder; };$/;"	m	struct:OpenXcom::ReequipStat
itemDrop	Battlescape/TileEngine.cpp	/^void TileEngine::itemDrop(Tile *t, BattleItem *item, bool updateLight)$/;"	f	class:OpenXcom::TileEngine
itemDropInventory	Battlescape/TileEngine.cpp	/^void TileEngine::itemDropInventory(Tile *t, BattleUnit *unit, bool unprimeItems, bool deleteFixedItems)$/;"	f	class:OpenXcom::TileEngine
itemList	Mod/MapBlock.h	/^	std::vector<std::string> itemList;$/;"	m	struct:OpenXcom::RandomizedItems
itemMoveInventory	Battlescape/TileEngine.cpp	/^void TileEngine::itemMoveInventory(Tile *t, BattleUnit *unit, BattleItem *item, const RuleInventory *slot, int x, int y)$/;"	f	class:OpenXcom::TileEngine
itemOrder	Basescape/StoresState.h	/^	ItemSort itemOrder;$/;"	m	class:OpenXcom::StoresState
itemSets	Mod/AlienDeployment.h	/^	std::vector<ItemSet> itemSets, extraRandomItems;$/;"	m	struct:OpenXcom::DeploymentData
items	Mod/AlienDeployment.h	/^	std::vector<std::string> items;$/;"	m	struct:OpenXcom::ItemSet
iterateTiles	Battlescape/TileEngine.cpp	/^void iterateTiles(SavedBattleGame* save, MapSubset gs, TileFunc func)$/;"	f	namespace:OpenXcom::__anon45
iterateUTF8CodePoints	Engine/Unicode.cpp	/^static bool iterateUTF8CodePoints(const unsigned char* begin, const unsigned char* end, F1 callback_1, F2 callback_2, F3 callback_3, F4 callback_4)$/;"	f	namespace:OpenXcom::Unicode
iterateUTF8CodePointsUnsafe	Engine/Unicode.cpp	/^static bool iterateUTF8CodePointsUnsafe(const unsigned char** begin_ptr, const unsigned char* end, F1 callback_1, F2 callback_2, F3 callback_3, F4 callback_4)$/;"	f	namespace:OpenXcom::Unicode
itext_keys	lodepng.h	/^  char** itext_keys; \/*the English keyword of the text chunk (e.g. "Comment")*\/$/;"	m	struct:LodePNGInfo
itext_langtags	lodepng.h	/^  char** itext_langtags; \/*language tag for this text's language, ISO\/IEC 646 string, e.g. ISO 639 language tag*\/$/;"	m	struct:LodePNGInfo
itext_num	lodepng.h	/^  size_t itext_num; \/*the amount of international texts in this PNG*\/$/;"	m	struct:LodePNGInfo
itext_strings	lodepng.h	/^  char** itext_strings; \/*the actual international text - UTF-8 string*\/$/;"	m	struct:LodePNGInfo
itext_transkeys	lodepng.h	/^  char** itext_transkeys; \/*keyword translated to the international language - UTF-8 string*\/$/;"	m	struct:LodePNGInfo
iwidth	Engine/OpenGL.h	/^  unsigned iwidth, iheight, iformat, ibpp;$/;"	m	class:OpenXcom::OpenGL
j	Engine/Scalers/xbrz.cpp	/^    \/**\/i, j, k, l,$/;"	m	struct:__anon10::Kernel_4x4	file:
jumpXY	Battlescape/Camera.cpp	/^void Camera::jumpXY(int x, int y)$/;"	f	class:OpenXcom::Camera
k	Engine/OptionInfo.h	/^	union { bool *b; int *i; std::string *s; SDLKey *k; } _ref;$/;"	m	union:OpenXcom::OptionInfo::__anon1
k	Engine/OptionInfo.h	/^	union { bool b; int i; const char *s; SDLKey k; } _def; \/\/ can't put strings in unions$/;"	m	union:OpenXcom::OptionInfo::__anon2
k	Engine/Scalers/xbrz.cpp	/^    \/**\/i, j, k, l,$/;"	m	struct:__anon10::Kernel_4x4	file:
kcode	Engine/Adlib/fmopl.h	/^	UINT8 kcode;		\/* key code        : KeyScaleCode      *\/$/;"	m	struct:fm_opl_channel
keepAspectRatio	Engine/Options.inc.h	/^	autosave, allowResize, borderless, debug, debugUi, fpsCounter, newSeedOnLoad, keepAspectRatio, nonSquarePixelRatio,$/;"	v
keepCraftAfterFailedMission	Mod/AlienDeployment.cpp	/^bool AlienDeployment::keepCraftAfterFailedMission() const$/;"	f	class:OpenXcom::AlienDeployment
keepCraftAfterFailedMission	Mod/RuleCraft.cpp	/^bool RuleCraft::keepCraftAfterFailedMission() const$/;"	f	class:OpenXcom::RuleCraft
keepFalling	Savegame/BattleUnit.cpp	/^void BattleUnit::keepFalling()$/;"	f	class:OpenXcom::BattleUnit
keepWalking	Savegame/BattleUnit.cpp	/^void BattleUnit::keepWalking(SavedBattleGame *savedBattleGame, bool fullWalkCycle)$/;"	f	class:OpenXcom::BattleUnit
key	lodepng.h	/^  unsigned key; \/*image is not opaque and color key is possible instead of full alpha*\/$/;"	m	struct:LodePNGColorProfile
keyAddSoldiersToTraining	Engine/Options.inc.h	/^	keyRemoveSoldiersFromTraining, keyAddSoldiersToTraining,$/;"	v
keyBaseSelect1	Engine/Options.inc.h	/^	keyBaseSelect1, keyBaseSelect2, keyBaseSelect3, keyBaseSelect4, keyBaseSelect5, keyBaseSelect6, keyBaseSelect7, keyBaseSelect8;$/;"	v
keyBaseSelect2	Engine/Options.inc.h	/^	keyBaseSelect1, keyBaseSelect2, keyBaseSelect3, keyBaseSelect4, keyBaseSelect5, keyBaseSelect6, keyBaseSelect7, keyBaseSelect8;$/;"	v
keyBaseSelect3	Engine/Options.inc.h	/^	keyBaseSelect1, keyBaseSelect2, keyBaseSelect3, keyBaseSelect4, keyBaseSelect5, keyBaseSelect6, keyBaseSelect7, keyBaseSelect8;$/;"	v
keyBaseSelect4	Engine/Options.inc.h	/^	keyBaseSelect1, keyBaseSelect2, keyBaseSelect3, keyBaseSelect4, keyBaseSelect5, keyBaseSelect6, keyBaseSelect7, keyBaseSelect8;$/;"	v
keyBaseSelect5	Engine/Options.inc.h	/^	keyBaseSelect1, keyBaseSelect2, keyBaseSelect3, keyBaseSelect4, keyBaseSelect5, keyBaseSelect6, keyBaseSelect7, keyBaseSelect8;$/;"	v
keyBaseSelect6	Engine/Options.inc.h	/^	keyBaseSelect1, keyBaseSelect2, keyBaseSelect3, keyBaseSelect4, keyBaseSelect5, keyBaseSelect6, keyBaseSelect7, keyBaseSelect8;$/;"	v
keyBaseSelect7	Engine/Options.inc.h	/^	keyBaseSelect1, keyBaseSelect2, keyBaseSelect3, keyBaseSelect4, keyBaseSelect5, keyBaseSelect6, keyBaseSelect7, keyBaseSelect8;$/;"	v
keyBaseSelect8	Engine/Options.inc.h	/^	keyBaseSelect1, keyBaseSelect2, keyBaseSelect3, keyBaseSelect4, keyBaseSelect5, keyBaseSelect6, keyBaseSelect7, keyBaseSelect8;$/;"	v
keyBasescapeBaseInfo	Engine/Options.inc.h	/^OPT SDLKey keyBasescapeBuildNewBase, keyBasescapeBaseInfo, keyBasescapeSoldiers, keyBasescapeCrafts,$/;"	v
keyBasescapeBuildNewBase	Engine/Options.inc.h	/^OPT SDLKey keyBasescapeBuildNewBase, keyBasescapeBaseInfo, keyBasescapeSoldiers, keyBasescapeCrafts,$/;"	v
keyBasescapeCrafts	Engine/Options.inc.h	/^OPT SDLKey keyBasescapeBuildNewBase, keyBasescapeBaseInfo, keyBasescapeSoldiers, keyBasescapeCrafts,$/;"	v
keyBasescapeFacilities	Engine/Options.inc.h	/^	keyBasescapeFacilities, keyBasescapeResearch, keyBasescapeManufacture, keyBasescapeTransfer,$/;"	v
keyBasescapeManufacture	Engine/Options.inc.h	/^	keyBasescapeFacilities, keyBasescapeResearch, keyBasescapeManufacture, keyBasescapeTransfer,$/;"	v
keyBasescapePurchase	Engine/Options.inc.h	/^	keyBasescapePurchase, keyBasescapeSell;$/;"	v
keyBasescapeResearch	Engine/Options.inc.h	/^	keyBasescapeFacilities, keyBasescapeResearch, keyBasescapeManufacture, keyBasescapeTransfer,$/;"	v
keyBasescapeSell	Engine/Options.inc.h	/^	keyBasescapePurchase, keyBasescapeSell;$/;"	v
keyBasescapeSoldiers	Engine/Options.inc.h	/^OPT SDLKey keyBasescapeBuildNewBase, keyBasescapeBaseInfo, keyBasescapeSoldiers, keyBasescapeCrafts,$/;"	v
keyBasescapeTransfer	Engine/Options.inc.h	/^	keyBasescapeFacilities, keyBasescapeResearch, keyBasescapeManufacture, keyBasescapeTransfer,$/;"	v
keyBattleAbort	Engine/Options.inc.h	/^keyBattleUseLeftHand, keyBattleUseRightHand, keyBattleInventory, keyBattleMap, keyBattleOptions, keyBattleEndTurn, keyBattleAbort, keyBattleStats, keyBattleKneel,$/;"	v
keyBattleActionItem1	Engine/Options.inc.h	/^	keyBattleActionItem1, keyBattleActionItem2, keyBattleActionItem3, keyBattleActionItem4, keyBattleActionItem5,$/;"	v
keyBattleActionItem2	Engine/Options.inc.h	/^	keyBattleActionItem1, keyBattleActionItem2, keyBattleActionItem3, keyBattleActionItem4, keyBattleActionItem5,$/;"	v
keyBattleActionItem3	Engine/Options.inc.h	/^	keyBattleActionItem1, keyBattleActionItem2, keyBattleActionItem3, keyBattleActionItem4, keyBattleActionItem5,$/;"	v
keyBattleActionItem4	Engine/Options.inc.h	/^	keyBattleActionItem1, keyBattleActionItem2, keyBattleActionItem3, keyBattleActionItem4, keyBattleActionItem5,$/;"	v
keyBattleActionItem5	Engine/Options.inc.h	/^	keyBattleActionItem1, keyBattleActionItem2, keyBattleActionItem3, keyBattleActionItem4, keyBattleActionItem5,$/;"	v
keyBattleCenterEnemy1	Engine/Options.inc.h	/^keyBattleCenterEnemy1, keyBattleCenterEnemy2, keyBattleCenterEnemy3, keyBattleCenterEnemy4, keyBattleCenterEnemy5, keyBattleCenterEnemy6, keyBattleCenterEnemy7, keyBattleCenterEnemy8,$/;"	v
keyBattleCenterEnemy10	Engine/Options.inc.h	/^keyBattleCenterEnemy9, keyBattleCenterEnemy10, keyBattleVoxelView, keyBattleZeroTUs, keyInvCreateTemplate, keyInvApplyTemplate, keyInvClear, keyInvAutoEquip;$/;"	v
keyBattleCenterEnemy2	Engine/Options.inc.h	/^keyBattleCenterEnemy1, keyBattleCenterEnemy2, keyBattleCenterEnemy3, keyBattleCenterEnemy4, keyBattleCenterEnemy5, keyBattleCenterEnemy6, keyBattleCenterEnemy7, keyBattleCenterEnemy8,$/;"	v
keyBattleCenterEnemy3	Engine/Options.inc.h	/^keyBattleCenterEnemy1, keyBattleCenterEnemy2, keyBattleCenterEnemy3, keyBattleCenterEnemy4, keyBattleCenterEnemy5, keyBattleCenterEnemy6, keyBattleCenterEnemy7, keyBattleCenterEnemy8,$/;"	v
keyBattleCenterEnemy4	Engine/Options.inc.h	/^keyBattleCenterEnemy1, keyBattleCenterEnemy2, keyBattleCenterEnemy3, keyBattleCenterEnemy4, keyBattleCenterEnemy5, keyBattleCenterEnemy6, keyBattleCenterEnemy7, keyBattleCenterEnemy8,$/;"	v
keyBattleCenterEnemy5	Engine/Options.inc.h	/^keyBattleCenterEnemy1, keyBattleCenterEnemy2, keyBattleCenterEnemy3, keyBattleCenterEnemy4, keyBattleCenterEnemy5, keyBattleCenterEnemy6, keyBattleCenterEnemy7, keyBattleCenterEnemy8,$/;"	v
keyBattleCenterEnemy6	Engine/Options.inc.h	/^keyBattleCenterEnemy1, keyBattleCenterEnemy2, keyBattleCenterEnemy3, keyBattleCenterEnemy4, keyBattleCenterEnemy5, keyBattleCenterEnemy6, keyBattleCenterEnemy7, keyBattleCenterEnemy8,$/;"	v
keyBattleCenterEnemy7	Engine/Options.inc.h	/^keyBattleCenterEnemy1, keyBattleCenterEnemy2, keyBattleCenterEnemy3, keyBattleCenterEnemy4, keyBattleCenterEnemy5, keyBattleCenterEnemy6, keyBattleCenterEnemy7, keyBattleCenterEnemy8,$/;"	v
keyBattleCenterEnemy8	Engine/Options.inc.h	/^keyBattleCenterEnemy1, keyBattleCenterEnemy2, keyBattleCenterEnemy3, keyBattleCenterEnemy4, keyBattleCenterEnemy5, keyBattleCenterEnemy6, keyBattleCenterEnemy7, keyBattleCenterEnemy8,$/;"	v
keyBattleCenterEnemy9	Engine/Options.inc.h	/^keyBattleCenterEnemy9, keyBattleCenterEnemy10, keyBattleVoxelView, keyBattleZeroTUs, keyInvCreateTemplate, keyInvApplyTemplate, keyInvClear, keyInvAutoEquip;$/;"	v
keyBattleCenterUnit	Engine/Options.inc.h	/^OPT SDLKey keyBattleLeft, keyBattleRight, keyBattleUp, keyBattleDown, keyBattleLevelUp, keyBattleLevelDown, keyBattleCenterUnit, keyBattlePrevUnit, keyBattleNextUnit, keyBattleDeselectUnit,$/;"	v
keyBattleDeselectUnit	Engine/Options.inc.h	/^OPT SDLKey keyBattleLeft, keyBattleRight, keyBattleUp, keyBattleDown, keyBattleLevelUp, keyBattleLevelDown, keyBattleCenterUnit, keyBattlePrevUnit, keyBattleNextUnit, keyBattleDeselectUnit,$/;"	v
keyBattleDown	Engine/Options.inc.h	/^OPT SDLKey keyBattleLeft, keyBattleRight, keyBattleUp, keyBattleDown, keyBattleLevelUp, keyBattleLevelDown, keyBattleCenterUnit, keyBattlePrevUnit, keyBattleNextUnit, keyBattleDeselectUnit,$/;"	v
keyBattleEndTurn	Engine/Options.inc.h	/^keyBattleUseLeftHand, keyBattleUseRightHand, keyBattleInventory, keyBattleMap, keyBattleOptions, keyBattleEndTurn, keyBattleAbort, keyBattleStats, keyBattleKneel,$/;"	v
keyBattleInventory	Engine/Options.inc.h	/^keyBattleUseLeftHand, keyBattleUseRightHand, keyBattleInventory, keyBattleMap, keyBattleOptions, keyBattleEndTurn, keyBattleAbort, keyBattleStats, keyBattleKneel,$/;"	v
keyBattleKneel	Engine/Options.inc.h	/^keyBattleUseLeftHand, keyBattleUseRightHand, keyBattleInventory, keyBattleMap, keyBattleOptions, keyBattleEndTurn, keyBattleAbort, keyBattleStats, keyBattleKneel,$/;"	v
keyBattleLeft	Engine/Options.inc.h	/^OPT SDLKey keyBattleLeft, keyBattleRight, keyBattleUp, keyBattleDown, keyBattleLevelUp, keyBattleLevelDown, keyBattleCenterUnit, keyBattlePrevUnit, keyBattleNextUnit, keyBattleDeselectUnit,$/;"	v
keyBattleLevelDown	Engine/Options.inc.h	/^OPT SDLKey keyBattleLeft, keyBattleRight, keyBattleUp, keyBattleDown, keyBattleLevelUp, keyBattleLevelDown, keyBattleCenterUnit, keyBattlePrevUnit, keyBattleNextUnit, keyBattleDeselectUnit,$/;"	v
keyBattleLevelUp	Engine/Options.inc.h	/^OPT SDLKey keyBattleLeft, keyBattleRight, keyBattleUp, keyBattleDown, keyBattleLevelUp, keyBattleLevelDown, keyBattleCenterUnit, keyBattlePrevUnit, keyBattleNextUnit, keyBattleDeselectUnit,$/;"	v
keyBattleMap	Engine/Options.inc.h	/^keyBattleUseLeftHand, keyBattleUseRightHand, keyBattleInventory, keyBattleMap, keyBattleOptions, keyBattleEndTurn, keyBattleAbort, keyBattleStats, keyBattleKneel,$/;"	v
keyBattleNextUnit	Engine/Options.inc.h	/^OPT SDLKey keyBattleLeft, keyBattleRight, keyBattleUp, keyBattleDown, keyBattleLevelUp, keyBattleLevelDown, keyBattleCenterUnit, keyBattlePrevUnit, keyBattleNextUnit, keyBattleDeselectUnit,$/;"	v
keyBattleOptions	Engine/Options.inc.h	/^keyBattleUseLeftHand, keyBattleUseRightHand, keyBattleInventory, keyBattleMap, keyBattleOptions, keyBattleEndTurn, keyBattleAbort, keyBattleStats, keyBattleKneel,$/;"	v
keyBattlePersonalLighting	Engine/Options.inc.h	/^keyBattleReserveKneel, keyBattleReload, keyBattlePersonalLighting, keyBattleReserveNone, keyBattleReserveSnap, keyBattleReserveAimed, keyBattleReserveAuto,$/;"	v
keyBattlePrevUnit	Engine/Options.inc.h	/^OPT SDLKey keyBattleLeft, keyBattleRight, keyBattleUp, keyBattleDown, keyBattleLevelUp, keyBattleLevelDown, keyBattleCenterUnit, keyBattlePrevUnit, keyBattleNextUnit, keyBattleDeselectUnit,$/;"	v
keyBattleReload	Engine/Options.inc.h	/^keyBattleReserveKneel, keyBattleReload, keyBattlePersonalLighting, keyBattleReserveNone, keyBattleReserveSnap, keyBattleReserveAimed, keyBattleReserveAuto,$/;"	v
keyBattleReserveAimed	Engine/Options.inc.h	/^keyBattleReserveKneel, keyBattleReload, keyBattlePersonalLighting, keyBattleReserveNone, keyBattleReserveSnap, keyBattleReserveAimed, keyBattleReserveAuto,$/;"	v
keyBattleReserveAuto	Engine/Options.inc.h	/^keyBattleReserveKneel, keyBattleReload, keyBattlePersonalLighting, keyBattleReserveNone, keyBattleReserveSnap, keyBattleReserveAimed, keyBattleReserveAuto,$/;"	v
keyBattleReserveKneel	Engine/Options.inc.h	/^keyBattleReserveKneel, keyBattleReload, keyBattlePersonalLighting, keyBattleReserveNone, keyBattleReserveSnap, keyBattleReserveAimed, keyBattleReserveAuto,$/;"	v
keyBattleReserveNone	Engine/Options.inc.h	/^keyBattleReserveKneel, keyBattleReload, keyBattlePersonalLighting, keyBattleReserveNone, keyBattleReserveSnap, keyBattleReserveAimed, keyBattleReserveAuto,$/;"	v
keyBattleReserveSnap	Engine/Options.inc.h	/^keyBattleReserveKneel, keyBattleReload, keyBattlePersonalLighting, keyBattleReserveNone, keyBattleReserveSnap, keyBattleReserveAimed, keyBattleReserveAuto,$/;"	v
keyBattleRight	Engine/Options.inc.h	/^OPT SDLKey keyBattleLeft, keyBattleRight, keyBattleUp, keyBattleDown, keyBattleLevelUp, keyBattleLevelDown, keyBattleCenterUnit, keyBattlePrevUnit, keyBattleNextUnit, keyBattleDeselectUnit,$/;"	v
keyBattleShowLayers	Engine/Options.inc.h	/^	keyBattleShowLayers,$/;"	v
keyBattleStats	Engine/Options.inc.h	/^keyBattleUseLeftHand, keyBattleUseRightHand, keyBattleInventory, keyBattleMap, keyBattleOptions, keyBattleEndTurn, keyBattleAbort, keyBattleStats, keyBattleKneel,$/;"	v
keyBattleUp	Engine/Options.inc.h	/^OPT SDLKey keyBattleLeft, keyBattleRight, keyBattleUp, keyBattleDown, keyBattleLevelUp, keyBattleLevelDown, keyBattleCenterUnit, keyBattlePrevUnit, keyBattleNextUnit, keyBattleDeselectUnit,$/;"	v
keyBattleUseLeftHand	Engine/Options.inc.h	/^keyBattleUseLeftHand, keyBattleUseRightHand, keyBattleInventory, keyBattleMap, keyBattleOptions, keyBattleEndTurn, keyBattleAbort, keyBattleStats, keyBattleKneel,$/;"	v
keyBattleUseRightHand	Engine/Options.inc.h	/^keyBattleUseLeftHand, keyBattleUseRightHand, keyBattleInventory, keyBattleMap, keyBattleOptions, keyBattleEndTurn, keyBattleAbort, keyBattleStats, keyBattleKneel,$/;"	v
keyBattleUseSpecial	Engine/Options.inc.h	/^	keyBattleUseSpecial,$/;"	v
keyBattleVoxelView	Engine/Options.inc.h	/^keyBattleCenterEnemy9, keyBattleCenterEnemy10, keyBattleVoxelView, keyBattleZeroTUs, keyInvCreateTemplate, keyInvApplyTemplate, keyInvClear, keyInvAutoEquip;$/;"	v
keyBattleZeroTUs	Engine/Options.inc.h	/^keyBattleCenterEnemy9, keyBattleCenterEnemy10, keyBattleVoxelView, keyBattleZeroTUs, keyInvCreateTemplate, keyInvApplyTemplate, keyInvClear, keyInvAutoEquip;$/;"	v
keyCancel	Engine/Options.inc.h	/^OPT SDLKey keyOk, keyCancel, keyScreenshot, keyFps, keyQuickLoad, keyQuickSave;$/;"	v
keyCraftLoadoutLoad	Engine/Options.inc.h	/^	keyCraftLoadoutSave, keyCraftLoadoutLoad,$/;"	v
keyCraftLoadoutSave	Engine/Options.inc.h	/^	keyCraftLoadoutSave, keyCraftLoadoutLoad,$/;"	v
keyFps	Engine/Options.inc.h	/^OPT SDLKey keyOk, keyCancel, keyScreenshot, keyFps, keyQuickLoad, keyQuickSave;$/;"	v
keyGeoBases	Engine/Options.inc.h	/^	keyGeoIntercept, keyGeoBases, keyGeoGraphs, keyGeoUfopedia, keyGeoOptions, keyGeoFunding, keyGeoToggleDetail, keyGeoToggleRadar,$/;"	v
keyGeoDailyPilotExperience	Engine/Options.inc.h	/^OPT SDLKey keyGeoDailyPilotExperience, keyGeoUfoTracker, keyGeoTechTreeViewer, keyGeoGlobalResearch, keyGeoGlobalProduction,$/;"	v
keyGeoDown	Engine/Options.inc.h	/^OPT SDLKey keyGeoLeft, keyGeoRight, keyGeoUp, keyGeoDown, keyGeoZoomIn, keyGeoZoomOut, keyGeoSpeed1, keyGeoSpeed2, keyGeoSpeed3, keyGeoSpeed4, keyGeoSpeed5, keyGeoSpeed6,$/;"	v
keyGeoFunding	Engine/Options.inc.h	/^	keyGeoIntercept, keyGeoBases, keyGeoGraphs, keyGeoUfopedia, keyGeoOptions, keyGeoFunding, keyGeoToggleDetail, keyGeoToggleRadar,$/;"	v
keyGeoGlobalProduction	Engine/Options.inc.h	/^OPT SDLKey keyGeoDailyPilotExperience, keyGeoUfoTracker, keyGeoTechTreeViewer, keyGeoGlobalResearch, keyGeoGlobalProduction,$/;"	v
keyGeoGlobalResearch	Engine/Options.inc.h	/^OPT SDLKey keyGeoDailyPilotExperience, keyGeoUfoTracker, keyGeoTechTreeViewer, keyGeoGlobalResearch, keyGeoGlobalProduction,$/;"	v
keyGeoGraphs	Engine/Options.inc.h	/^	keyGeoIntercept, keyGeoBases, keyGeoGraphs, keyGeoUfopedia, keyGeoOptions, keyGeoFunding, keyGeoToggleDetail, keyGeoToggleRadar,$/;"	v
keyGeoIntercept	Engine/Options.inc.h	/^	keyGeoIntercept, keyGeoBases, keyGeoGraphs, keyGeoUfopedia, keyGeoOptions, keyGeoFunding, keyGeoToggleDetail, keyGeoToggleRadar,$/;"	v
keyGeoLeft	Engine/Options.inc.h	/^OPT SDLKey keyGeoLeft, keyGeoRight, keyGeoUp, keyGeoDown, keyGeoZoomIn, keyGeoZoomOut, keyGeoSpeed1, keyGeoSpeed2, keyGeoSpeed3, keyGeoSpeed4, keyGeoSpeed5, keyGeoSpeed6,$/;"	v
keyGeoOptions	Engine/Options.inc.h	/^	keyGeoIntercept, keyGeoBases, keyGeoGraphs, keyGeoUfopedia, keyGeoOptions, keyGeoFunding, keyGeoToggleDetail, keyGeoToggleRadar,$/;"	v
keyGeoRight	Engine/Options.inc.h	/^OPT SDLKey keyGeoLeft, keyGeoRight, keyGeoUp, keyGeoDown, keyGeoZoomIn, keyGeoZoomOut, keyGeoSpeed1, keyGeoSpeed2, keyGeoSpeed3, keyGeoSpeed4, keyGeoSpeed5, keyGeoSpeed6,$/;"	v
keyGeoSpeed1	Engine/Options.inc.h	/^OPT SDLKey keyGeoLeft, keyGeoRight, keyGeoUp, keyGeoDown, keyGeoZoomIn, keyGeoZoomOut, keyGeoSpeed1, keyGeoSpeed2, keyGeoSpeed3, keyGeoSpeed4, keyGeoSpeed5, keyGeoSpeed6,$/;"	v
keyGeoSpeed2	Engine/Options.inc.h	/^OPT SDLKey keyGeoLeft, keyGeoRight, keyGeoUp, keyGeoDown, keyGeoZoomIn, keyGeoZoomOut, keyGeoSpeed1, keyGeoSpeed2, keyGeoSpeed3, keyGeoSpeed4, keyGeoSpeed5, keyGeoSpeed6,$/;"	v
keyGeoSpeed3	Engine/Options.inc.h	/^OPT SDLKey keyGeoLeft, keyGeoRight, keyGeoUp, keyGeoDown, keyGeoZoomIn, keyGeoZoomOut, keyGeoSpeed1, keyGeoSpeed2, keyGeoSpeed3, keyGeoSpeed4, keyGeoSpeed5, keyGeoSpeed6,$/;"	v
keyGeoSpeed4	Engine/Options.inc.h	/^OPT SDLKey keyGeoLeft, keyGeoRight, keyGeoUp, keyGeoDown, keyGeoZoomIn, keyGeoZoomOut, keyGeoSpeed1, keyGeoSpeed2, keyGeoSpeed3, keyGeoSpeed4, keyGeoSpeed5, keyGeoSpeed6,$/;"	v
keyGeoSpeed5	Engine/Options.inc.h	/^OPT SDLKey keyGeoLeft, keyGeoRight, keyGeoUp, keyGeoDown, keyGeoZoomIn, keyGeoZoomOut, keyGeoSpeed1, keyGeoSpeed2, keyGeoSpeed3, keyGeoSpeed4, keyGeoSpeed5, keyGeoSpeed6,$/;"	v
keyGeoSpeed6	Engine/Options.inc.h	/^OPT SDLKey keyGeoLeft, keyGeoRight, keyGeoUp, keyGeoDown, keyGeoZoomIn, keyGeoZoomOut, keyGeoSpeed1, keyGeoSpeed2, keyGeoSpeed3, keyGeoSpeed4, keyGeoSpeed5, keyGeoSpeed6,$/;"	v
keyGeoTechTreeViewer	Engine/Options.inc.h	/^OPT SDLKey keyGeoDailyPilotExperience, keyGeoUfoTracker, keyGeoTechTreeViewer, keyGeoGlobalResearch, keyGeoGlobalProduction,$/;"	v
keyGeoToggleDetail	Engine/Options.inc.h	/^	keyGeoIntercept, keyGeoBases, keyGeoGraphs, keyGeoUfopedia, keyGeoOptions, keyGeoFunding, keyGeoToggleDetail, keyGeoToggleRadar,$/;"	v
keyGeoToggleRadar	Engine/Options.inc.h	/^	keyGeoIntercept, keyGeoBases, keyGeoGraphs, keyGeoUfopedia, keyGeoOptions, keyGeoFunding, keyGeoToggleDetail, keyGeoToggleRadar,$/;"	v
keyGeoUfoTracker	Engine/Options.inc.h	/^OPT SDLKey keyGeoDailyPilotExperience, keyGeoUfoTracker, keyGeoTechTreeViewer, keyGeoGlobalResearch, keyGeoGlobalProduction,$/;"	v
keyGeoUfopedia	Engine/Options.inc.h	/^	keyGeoIntercept, keyGeoBases, keyGeoGraphs, keyGeoUfopedia, keyGeoOptions, keyGeoFunding, keyGeoToggleDetail, keyGeoToggleRadar,$/;"	v
keyGeoUp	Engine/Options.inc.h	/^OPT SDLKey keyGeoLeft, keyGeoRight, keyGeoUp, keyGeoDown, keyGeoZoomIn, keyGeoZoomOut, keyGeoSpeed1, keyGeoSpeed2, keyGeoSpeed3, keyGeoSpeed4, keyGeoSpeed5, keyGeoSpeed6,$/;"	v
keyGeoZoomIn	Engine/Options.inc.h	/^OPT SDLKey keyGeoLeft, keyGeoRight, keyGeoUp, keyGeoDown, keyGeoZoomIn, keyGeoZoomOut, keyGeoSpeed1, keyGeoSpeed2, keyGeoSpeed3, keyGeoSpeed4, keyGeoSpeed5, keyGeoSpeed6,$/;"	v
keyGeoZoomOut	Engine/Options.inc.h	/^OPT SDLKey keyGeoLeft, keyGeoRight, keyGeoUp, keyGeoDown, keyGeoZoomIn, keyGeoZoomOut, keyGeoSpeed1, keyGeoSpeed2, keyGeoSpeed3, keyGeoSpeed4, keyGeoSpeed5, keyGeoSpeed6,$/;"	v
keyGraphsZoomIn	Engine/Options.inc.h	/^	keyGraphsZoomIn, keyGraphsZoomOut,$/;"	v
keyGraphsZoomOut	Engine/Options.inc.h	/^	keyGraphsZoomIn, keyGraphsZoomOut,$/;"	v
keyInvApplyTemplate	Engine/Options.inc.h	/^keyBattleCenterEnemy9, keyBattleCenterEnemy10, keyBattleVoxelView, keyBattleZeroTUs, keyInvCreateTemplate, keyInvApplyTemplate, keyInvClear, keyInvAutoEquip;$/;"	v
keyInvAutoEquip	Engine/Options.inc.h	/^keyBattleCenterEnemy9, keyBattleCenterEnemy10, keyBattleVoxelView, keyBattleZeroTUs, keyInvCreateTemplate, keyInvApplyTemplate, keyInvClear, keyInvAutoEquip;$/;"	v
keyInvClear	Engine/Options.inc.h	/^keyBattleCenterEnemy9, keyBattleCenterEnemy10, keyBattleVoxelView, keyBattleZeroTUs, keyInvCreateTemplate, keyInvApplyTemplate, keyInvClear, keyInvAutoEquip;$/;"	v
keyInvCreateTemplate	Engine/Options.inc.h	/^keyBattleCenterEnemy9, keyBattleCenterEnemy10, keyBattleVoxelView, keyBattleZeroTUs, keyInvCreateTemplate, keyInvApplyTemplate, keyInvClear, keyInvAutoEquip;$/;"	v
keyInvLoadPersonalEquipment	Engine/Options.inc.h	/^	keyInvSavePersonalEquipment, keyInvLoadPersonalEquipment, keyInvShowPersonalEquipment,$/;"	v
keyInvSavePersonalEquipment	Engine/Options.inc.h	/^	keyInvSavePersonalEquipment, keyInvLoadPersonalEquipment, keyInvShowPersonalEquipment,$/;"	v
keyInvShowPersonalEquipment	Engine/Options.inc.h	/^	keyInvSavePersonalEquipment, keyInvLoadPersonalEquipment, keyInvShowPersonalEquipment,$/;"	v
keyInventoryArmor	Engine/Options.inc.h	/^	keyInventoryArmor, keyInventoryAvatar, keyInventorySave, keyInventoryLoad,$/;"	v
keyInventoryAvatar	Engine/Options.inc.h	/^	keyInventoryArmor, keyInventoryAvatar, keyInventorySave, keyInventoryLoad,$/;"	v
keyInventoryLoad	Engine/Options.inc.h	/^	keyInventoryArmor, keyInventoryAvatar, keyInventorySave, keyInventoryLoad,$/;"	v
keyInventorySave	Engine/Options.inc.h	/^	keyInventoryArmor, keyInventoryAvatar, keyInventorySave, keyInventoryLoad,$/;"	v
keyMarkAllAsSeen	Engine/Options.inc.h	/^	keyMarkAllAsSeen,$/;"	v
keyNightVisionHold	Engine/Options.inc.h	/^	keyNightVisionToggle, keyNightVisionHold, keySelectMusicTrack;$/;"	v
keyNightVisionToggle	Engine/Options.inc.h	/^	keyNightVisionToggle, keyNightVisionHold, keySelectMusicTrack;$/;"	v
keyOk	Engine/Options.inc.h	/^OPT SDLKey keyOk, keyCancel, keyScreenshot, keyFps, keyQuickLoad, keyQuickSave;$/;"	v
keyQuickLoad	Engine/Options.inc.h	/^OPT SDLKey keyOk, keyCancel, keyScreenshot, keyFps, keyQuickLoad, keyQuickSave;$/;"	v
keyQuickSave	Engine/Options.inc.h	/^OPT SDLKey keyOk, keyCancel, keyScreenshot, keyFps, keyQuickLoad, keyQuickSave;$/;"	v
keyRemoveArmorFromAllCrafts	Engine/Options.inc.h	/^	keyRemoveArmorFromCraft, keyRemoveArmorFromAllCrafts,$/;"	v
keyRemoveArmorFromCraft	Engine/Options.inc.h	/^	keyRemoveArmorFromCraft, keyRemoveArmorFromAllCrafts,$/;"	v
keyRemoveEquipmentFromCraft	Engine/Options.inc.h	/^	keyRemoveEquipmentFromCraft,$/;"	v
keyRemoveSoldiersFromAllCrafts	Engine/Options.inc.h	/^	keyRemoveSoldiersFromCraft, keyRemoveSoldiersFromAllCrafts,$/;"	v
keyRemoveSoldiersFromCraft	Engine/Options.inc.h	/^	keyRemoveSoldiersFromCraft, keyRemoveSoldiersFromAllCrafts,$/;"	v
keyRemoveSoldiersFromTraining	Engine/Options.inc.h	/^	keyRemoveSoldiersFromTraining, keyAddSoldiersToTraining,$/;"	v
keyScreenshot	Engine/Options.inc.h	/^OPT SDLKey keyOk, keyCancel, keyScreenshot, keyFps, keyQuickLoad, keyQuickSave;$/;"	v
keySelectMusicTrack	Engine/Options.inc.h	/^	keyNightVisionToggle, keyNightVisionHold, keySelectMusicTrack;$/;"	v
keySellAll	Engine/Options.inc.h	/^	keySellAll, keySellAllButOne,$/;"	v
keySellAllButOne	Engine/Options.inc.h	/^	keySellAll, keySellAllButOne,$/;"	v
keyToggleQuickSearch	Engine/Options.inc.h	/^	keyToggleQuickSearch,$/;"	v
keyTransferAll	Engine/Options.inc.h	/^	keyTransferAll,$/;"	v
key_b	lodepng.h	/^  unsigned key_b;       \/*blue component of color key*\/$/;"	m	struct:LodePNGColorMode
key_b	lodepng.h	/^  unsigned short key_b;$/;"	m	struct:LodePNGColorProfile
key_defined	lodepng.h	/^  unsigned key_defined; \/*is a transparent color key given? 0 = false, 1 = true*\/$/;"	m	struct:LodePNGColorMode
key_g	lodepng.h	/^  unsigned key_g;       \/*green component of color key*\/$/;"	m	struct:LodePNGColorMode
key_g	lodepng.h	/^  unsigned short key_g;$/;"	m	struct:LodePNGColorProfile
key_r	lodepng.h	/^  unsigned key_r;       \/*red\/greyscale component of color key*\/$/;"	m	struct:LodePNGColorMode
key_r	lodepng.h	/^  unsigned short key_r; \/*key values, always as 16-bit, in 8-bit case the byte is duplicated, e.g. 65535 means 255*\/$/;"	m	struct:LodePNGColorProfile
keyboardMode	Engine/Options.inc.h	/^OPT KeyboardType keyboardMode;$/;"	v
keyboardPress	Battlescape/Camera.cpp	/^void Camera::keyboardPress(Action *action, State *)$/;"	f	class:OpenXcom::Camera
keyboardPress	Battlescape/Map.cpp	/^void Map::keyboardPress(Action *action, State *state)$/;"	f	class:OpenXcom::Map
keyboardPress	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::keyboardPress(Action *action, State *state)$/;"	f	class:OpenXcom::InteractiveSurface
keyboardPress	Geoscape/Globe.cpp	/^void Globe::keyboardPress(Action *action, State *state)$/;"	f	class:OpenXcom::Globe
keyboardPress	Interface/TextEdit.cpp	/^void TextEdit::keyboardPress(Action *action, State *state)$/;"	f	class:OpenXcom::TextEdit
keyboardRelease	Battlescape/Camera.cpp	/^void Camera::keyboardRelease(Action *action, State *)$/;"	f	class:OpenXcom::Camera
keyboardRelease	Battlescape/Map.cpp	/^void Map::keyboardRelease(Action *action, State *state)$/;"	f	class:OpenXcom::Map
keyboardRelease	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::keyboardRelease(Action *action, State *state)$/;"	f	class:OpenXcom::InteractiveSurface
keyboard_param	Engine/Adlib/fmopl.h	/^	int keyboard_param;$/;"	m	struct:fm_opl_f
keyboardhandler_r	Engine/Adlib/fmopl.h	/^	OPL_PORTHANDLER_R keyboardhandler_r;$/;"	m	struct:fm_opl_f
keyboardhandler_w	Engine/Adlib/fmopl.h	/^	OPL_PORTHANDLER_W keyboardhandler_w;$/;"	m	struct:fm_opl_f
keyon	Engine/Adlib/fmopl.h	/^	UINT8 keyon;		\/* key on\/off flag                     *\/$/;"	m	struct:fm_opl_channel
kill	Savegame/BattleUnit.cpp	/^void BattleUnit::kill()$/;"	f	class:OpenXcom::BattleUnit
killSoldier	Savegame/SavedGame.cpp	/^std::vector<Soldier*>::iterator SavedGame::killSoldier(bool resetArmor, Soldier *soldier, BattleUnitKills *cause)$/;"	f	class:OpenXcom::SavedGame
killedBy	Savegame/BattleUnit.cpp	/^UnitFaction BattleUnit::killedBy() const$/;"	f	class:OpenXcom::BattleUnit
killedBy	Savegame/BattleUnit.cpp	/^void BattleUnit::killedBy(UnitFaction f)$/;"	f	class:OpenXcom::BattleUnit
kills	Savegame/BattleUnitStatistics.h	/^	std::vector<BattleUnitKills*> kills; \/\/\/< Tracks kills$/;"	m	struct:OpenXcom::BattleUnitStatistics
kneel	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::kneel(BattleUnit *bu)$/;"	f	class:OpenXcom::BattlescapeGame
kneel	Battlescape/BattlescapeGame.h	/^	bool kneel = false;$/;"	m	struct:OpenXcom::BattleAction
kneel	Savegame/BattleUnit.cpp	/^void BattleUnit::kneel(bool kneeled)$/;"	f	class:OpenXcom::BattleUnit
knockOut	Savegame/BattleUnit.cpp	/^void BattleUnit::knockOut(BattlescapeGame *battle)$/;"	f	class:OpenXcom::BattleUnit
ksl	Engine/Adlib/fmopl.h	/^	UINT8 ksl;		\/* keyscale level  :(shift down bits)  *\/$/;"	m	struct:fm_opl_slot
ksl_base	Engine/Adlib/fmopl.h	/^	UINT32  ksl_base;	\/* KeyScaleLevel Base step             *\/$/;"	m	struct:fm_opl_channel
ksr	Engine/Adlib/fmopl.h	/^	UINT8 ksr;		\/* key scale rate  :kcode>>KSR         *\/$/;"	m	struct:fm_opl_slot
l	Engine/Scalers/xbrz.cpp	/^    \/**\/i, j, k, l,$/;"	m	struct:__anon10::Kernel_4x4	file:
language	Engine/Options.inc.h	/^OPT std::string language, useOpenGLShader;$/;"	v
lastCover	Savegame/BattleUnit.h	/^	Position lastCover;$/;"	m	class:OpenXcom::BattleUnit
lastIndexToCheck	Menu/TestState.h	/^	int lastIndexToCheck;$/;"	m	struct:OpenXcom::PaletteTestMetadata
lastTurn	Mod/RuleEnviroEffects.h	/^	int firstTurn, lastTurn;$/;"	m	struct:OpenXcom::EnvironmentalCondition
lat	Geoscape/Cord.h	/^	double lon, lat;$/;"	m	struct:OpenXcom::CordPolar
latMax	Mod/RuleRegion.h	/^	double lonMin, lonMax, latMin, latMax;$/;"	m	struct:OpenXcom::MissionArea
latMax	Mod/Texture.h	/^	double lonMin, lonMax, latMin, latMax;$/;"	m	struct:OpenXcom::TerrainCriteria
latMin	Mod/RuleRegion.h	/^	double lonMin, lonMax, latMin, latMax;$/;"	m	struct:OpenXcom::MissionArea
latMin	Mod/Texture.h	/^	double lonMin, lonMax, latMin, latMax;$/;"	m	struct:OpenXcom::TerrainCriteria
launchAction	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::launchAction()$/;"	f	class:OpenXcom::BattlescapeGame
layers	Engine/FileMap.cpp	/^	std::vector<VFSLayer *> layers;$/;"	m	struct:OpenXcom::FileMap::VFSLayerStack	file:
lazyLoadResources	Engine/Options.inc.h	/^	rootWindowedMode, lazyLoadResources, backgroundMute;$/;"	v
lazyLoadSurface	Mod/Mod.cpp	/^void Mod::lazyLoadSurface(const std::string &name)$/;"	f	class:OpenXcom::Mod
lazymatching	lodepng.h	/^  unsigned lazymatching; \/*use lazy matching: better compression but a bit slower. Default: true*\/$/;"	m	struct:LodePNGCompressSettings
lengths	lodepng.cpp	/^  unsigned* lengths; \/*the lengths of the codes of the 1d-tree*\/$/;"	m	struct:HuffmanTree	file:
less	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::less()$/;"	f	class:OpenXcom::ResearchInfoState
lessByValue	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::lessByValue(int change)$/;"	f	class:OpenXcom::ResearchInfoState
lessClick	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::lessClick(Action *action)$/;"	f	class:OpenXcom::ResearchInfoState
lessEngineer	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::lessEngineer(int change)$/;"	f	class:OpenXcom::ManufactureInfoState
lessEngineerClick	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::lessEngineerClick(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
lessEngineerPress	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::lessEngineerPress(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
lessEngineerRelease	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::lessEngineerRelease(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
lessPress	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::lessPress(Action *action)$/;"	f	class:OpenXcom::ResearchInfoState
lessRelease	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::lessRelease(Action *action)$/;"	f	class:OpenXcom::ResearchInfoState
lessUnit	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::lessUnit(int change)$/;"	f	class:OpenXcom::ManufactureInfoState
lessUnitClick	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::lessUnitClick(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
lessUnitPress	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::lessUnitPress(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
lessUnitRelease	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::lessUnitRelease(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
level	Mod/MapScript.h	/^	int level;$/;"	m	struct:OpenXcom::TunnelData
levelBlocks	Mod/MapScript.h	/^	std::vector<int> levelGroups, levelBlocks;$/;"	m	struct:OpenXcom::VerticalLevel
levelGroups	Mod/MapScript.h	/^	std::vector<int> levelGroups, levelBlocks;$/;"	m	struct:OpenXcom::VerticalLevel
levelSizeX	Mod/MapScript.h	/^	int levelSizeX, levelSizeY, levelSizeZ;$/;"	m	struct:OpenXcom::VerticalLevel
levelSizeY	Mod/MapScript.h	/^	int levelSizeX, levelSizeY, levelSizeZ;$/;"	m	struct:OpenXcom::VerticalLevel
levelSizeZ	Mod/MapScript.h	/^	int levelSizeX, levelSizeY, levelSizeZ;$/;"	m	struct:OpenXcom::VerticalLevel
levelTerrain	Mod/MapScript.h	/^	std::string levelTerrain;$/;"	m	struct:OpenXcom::VerticalLevel
levelType	Mod/MapScript.h	/^	VerticalLevelType levelType;$/;"	m	struct:OpenXcom::VerticalLevel
liesInExitArea	Savegame/BattleUnit.cpp	/^bool BattleUnit::liesInExitArea(Tile *tile, SpecialTileType stt) const$/;"	f	class:OpenXcom::BattleUnit
linear	Engine/OpenGL.h	/^  bool linear;$/;"	m	class:OpenXcom::OpenGL
linkRule	Mod/Mod.h	/^	void linkRule(const T*& rule, std::string& name) const$/;"	f	class:OpenXcom::Mod
linkRule	Mod/Mod.h	/^	void linkRule(std::vector<T>& rule, std::vector<std::string>& names) const$/;"	f	class:OpenXcom::Mod
linkRule	Mod/Mod.h	/^	void linkRule(std::vector<T>& rule, std::vector<std::vector<std::string>>& names) const$/;"	f	class:OpenXcom::Mod
list	Ufopaedia/Ufopaedia.cpp	/^	void Ufopaedia::list(SavedGame *save, Mod *mod, const std::string &section, ArticleDefinitionList &data)$/;"	f	class:OpenXcom::Ufopaedia
listOrder	Battlescape/DebriefingState.h	/^struct ReequipStat { std::string item; int qty; std::string craft; int listOrder; };$/;"	m	struct:OpenXcom::ReequipStat
listOrder	Savegame/Transfer.h	/^	int listOrder;$/;"	m	struct:OpenXcom::TransferRow
listStats	Menu/StatisticsState.cpp	/^void StatisticsState::listStats()$/;"	f	class:OpenXcom::StatisticsState
listsize	lodepng.cpp	/^  unsigned listsize;$/;"	m	struct:BPMLists	file:
liveAliens	Battlescape/BattlescapeGame.h	/^	int liveAliens = 0;$/;"	m	struct:OpenXcom::BattlescapeTally
liveSoldiers	Battlescape/BattlescapeGame.h	/^	int liveSoldiers = 0;$/;"	m	struct:OpenXcom::BattlescapeTally
load	Battlescape/AIModule.cpp	/^void AIModule::load(const YAML::Node &node)$/;"	f	class:OpenXcom::AIModule
load	Engine/AdlibMusic.cpp	/^void AdlibMusic::load(SDL_RWops *rwops)$/;"	f	class:OpenXcom::AdlibMusic
load	Engine/AdlibMusic.cpp	/^void AdlibMusic::load(const std::string &filename)$/;"	f	class:OpenXcom::AdlibMusic
load	Engine/Font.cpp	/^void Font::load(const YAML::Node &node)$/;"	f	class:OpenXcom::Font
load	Engine/ModInfo.cpp	/^void ModInfo::load(const YAML::Node& doc)$/;"	f	class:OpenXcom::ModInfo
load	Engine/Music.cpp	/^void Music::load(SDL_RWops *rwops)$/;"	f	class:OpenXcom::Music
load	Engine/Music.cpp	/^void Music::load(const std::string &filename)$/;"	f	class:OpenXcom::Music
load	Engine/OptionInfo.cpp	/^void OptionInfo::load(const YAML::Node &node) const$/;"	f	class:OpenXcom::OptionInfo
load	Engine/OptionInfo.cpp	/^void OptionInfo::load(const std::map<std::string, std::string> &map, bool makeLowercase) const$/;"	f	class:OpenXcom::OptionInfo
load	Engine/Options.cpp	/^bool load(const std::string &filename)$/;"	f	namespace:OpenXcom::Options
load	Engine/Script.cpp	/^void ScriptGlobal::load(const YAML::Node& node)$/;"	f	class:OpenXcom::ScriptGlobal
load	Engine/Script.cpp	/^void ScriptParserBase::load(const YAML::Node& node)$/;"	f	class:OpenXcom::ScriptParserBase
load	Engine/Script.cpp	/^void ScriptParserEventsBase::load(const YAML::Node& scripts)$/;"	f	class:OpenXcom::ScriptParserEventsBase
load	Engine/Sound.cpp	/^void Sound::load(SDL_RWops *rw) {$/;"	f	class:OpenXcom::Sound
load	Engine/Sound.cpp	/^void Sound::load(const std::string &filename) {$/;"	f	class:OpenXcom::Sound
load	Menu/NewBattleState.cpp	/^void NewBattleState::load(const std::string &filename)$/;"	f	class:OpenXcom::NewBattleState
load	Menu/StartState.cpp	/^int StartState::load(void *game_ptr)$/;"	f	class:OpenXcom::StartState
load	Mod/AlienDeployment.cpp	/^void AlienDeployment::load(const YAML::Node &node, Mod *mod)$/;"	f	class:OpenXcom::AlienDeployment
load	Mod/AlienRace.cpp	/^void AlienRace::load(const YAML::Node &node)$/;"	f	class:OpenXcom::AlienRace
load	Mod/Armor.cpp	/^void Armor::load(const YAML::Node &node, const ModScript &parsers, Mod *mod)$/;"	f	class:OpenXcom::Armor
load	Mod/Armor.h	/^	void load(const YAML::Node& node)$/;"	f	struct:OpenXcom::ArmorMoveCost
load	Mod/ArticleDefinition.cpp	/^	void ArticleDefinition::load(const YAML::Node &node, int listOrder)$/;"	f	class:OpenXcom::ArticleDefinition
load	Mod/ArticleDefinition.cpp	/^	void ArticleDefinitionArmor::load(const YAML::Node &node, int listOrder)$/;"	f	class:OpenXcom::ArticleDefinitionArmor
load	Mod/ArticleDefinition.cpp	/^	void ArticleDefinitionBaseFacility::load(const YAML::Node &node, int listOrder)$/;"	f	class:OpenXcom::ArticleDefinitionBaseFacility
load	Mod/ArticleDefinition.cpp	/^	void ArticleDefinitionCraft::load(const YAML::Node &node, int listOrder)$/;"	f	class:OpenXcom::ArticleDefinitionCraft
load	Mod/ArticleDefinition.cpp	/^	void ArticleDefinitionCraftWeapon::load(const YAML::Node &node, int listOrder)$/;"	f	class:OpenXcom::ArticleDefinitionCraftWeapon
load	Mod/ArticleDefinition.cpp	/^	void ArticleDefinitionItem::load(const YAML::Node &node, int listOrder)$/;"	f	class:OpenXcom::ArticleDefinitionItem
load	Mod/ArticleDefinition.cpp	/^	void ArticleDefinitionTFTD::load(const YAML::Node &node, int listOrder)$/;"	f	class:OpenXcom::ArticleDefinitionTFTD
load	Mod/ArticleDefinition.cpp	/^	void ArticleDefinitionText::load(const YAML::Node &node, int listOrder)$/;"	f	class:OpenXcom::ArticleDefinitionText
load	Mod/ArticleDefinition.cpp	/^	void ArticleDefinitionTextImage::load(const YAML::Node &node, int listOrder)$/;"	f	class:OpenXcom::ArticleDefinitionTextImage
load	Mod/ArticleDefinition.cpp	/^	void ArticleDefinitionUfo::load(const YAML::Node &node, int listOrder)$/;"	f	class:OpenXcom::ArticleDefinitionUfo
load	Mod/ArticleDefinition.cpp	/^	void ArticleDefinitionVehicle::load(const YAML::Node &node, int listOrder)$/;"	f	class:OpenXcom::ArticleDefinitionVehicle
load	Mod/CustomPalettes.cpp	/^void CustomPalettes::load(const YAML::Node &node)$/;"	f	class:OpenXcom::CustomPalettes
load	Mod/ExtraSounds.cpp	/^void ExtraSounds::load(const YAML::Node &node, const ModData* current)$/;"	f	class:OpenXcom::ExtraSounds
load	Mod/ExtraSprites.cpp	/^void ExtraSprites::load(const YAML::Node &node, const ModData* current)$/;"	f	class:OpenXcom::ExtraSprites
load	Mod/ExtraStrings.cpp	/^void ExtraStrings::load(const YAML::Node &node)$/;"	f	class:OpenXcom::ExtraStrings
load	Mod/MCDPatch.cpp	/^void MCDPatch::load(const YAML::Node &node)$/;"	f	class:OpenXcom::MCDPatch
load	Mod/MapBlock.cpp	/^void MapBlock::load(const YAML::Node &node)$/;"	f	class:OpenXcom::MapBlock
load	Mod/MapScript.cpp	/^void MapScript::load(const YAML::Node& node)$/;"	f	class:OpenXcom::MapScript
load	Mod/MapScript.h	/^	void load(const YAML::Node &node)$/;"	f	struct:OpenXcom::VerticalLevel
load	Mod/Polygon.cpp	/^void Polygon::load(const YAML::Node &node)$/;"	f	class:OpenXcom::Polygon
load	Mod/Polyline.cpp	/^void Polyline::load(const YAML::Node &node)$/;"	f	class:OpenXcom::Polyline
load	Mod/RuleAlienMission.cpp	/^void RuleAlienMission::load(const YAML::Node &node)$/;"	f	class:OpenXcom::RuleAlienMission
load	Mod/RuleArcScript.cpp	/^void RuleArcScript::load(const YAML::Node& node)$/;"	f	class:OpenXcom::RuleArcScript
load	Mod/RuleBaseFacility.cpp	/^void RuleBaseFacility::load(const YAML::Node &node, Mod *mod, int listOrder)$/;"	f	class:OpenXcom::RuleBaseFacility
load	Mod/RuleCommendations.cpp	/^void RuleCommendations::load(const YAML::Node &node, const Mod* mod)$/;"	f	class:OpenXcom::RuleCommendations
load	Mod/RuleConverter.cpp	/^void RuleConverter::load(const YAML::Node &node)$/;"	f	class:OpenXcom::RuleConverter
load	Mod/RuleCountry.cpp	/^void RuleCountry::load(const YAML::Node &node)$/;"	f	class:OpenXcom::RuleCountry
load	Mod/RuleCraft.cpp	/^void RuleCraft::load(const YAML::Node &node, Mod *mod, int listOrder, const ModScript &parsers)$/;"	f	class:OpenXcom::RuleCraft
load	Mod/RuleCraft.h	/^	void load(const YAML::Node &node)$/;"	f	struct:OpenXcom::RuleCraftStats
load	Mod/RuleCraftWeapon.cpp	/^void RuleCraftWeapon::load(const YAML::Node &node, Mod *mod)$/;"	f	class:OpenXcom::RuleCraftWeapon
load	Mod/RuleDamageType.cpp	/^void RuleDamageType::load(const YAML::Node& node)$/;"	f	class:OpenXcom::RuleDamageType
load	Mod/RuleEnviroEffects.cpp	/^void RuleEnviroEffects::load(const YAML::Node& node, const Mod* mod)$/;"	f	class:OpenXcom::RuleEnviroEffects
load	Mod/RuleEvent.cpp	/^void RuleEvent::load(const YAML::Node &node)$/;"	f	class:OpenXcom::RuleEvent
load	Mod/RuleEventScript.cpp	/^void RuleEventScript::load(const YAML::Node &node)$/;"	f	class:OpenXcom::RuleEventScript
load	Mod/RuleGlobe.cpp	/^void RuleGlobe::load(const YAML::Node &node)$/;"	f	class:OpenXcom::RuleGlobe
load	Mod/RuleInterface.cpp	/^void RuleInterface::load(const YAML::Node& node, Mod *mod)$/;"	f	class:OpenXcom::RuleInterface
load	Mod/RuleInventory.cpp	/^void RuleInventory::load(const YAML::Node &node, int listOrder)$/;"	f	class:OpenXcom::RuleInventory
load	Mod/RuleItem.cpp	/^void RuleItem::load(const YAML::Node &node, Mod *mod, int listOrder, const ModScript& parsers)$/;"	f	class:OpenXcom::RuleItem
load	Mod/RuleItemCategory.cpp	/^void RuleItemCategory::load(const YAML::Node &node, Mod *mod, int listOrder)$/;"	f	class:OpenXcom::RuleItemCategory
load	Mod/RuleManufacture.cpp	/^void RuleManufacture::load(const YAML::Node &node, Mod* mod, int listOrder)$/;"	f	class:OpenXcom::RuleManufacture
load	Mod/RuleManufactureShortcut.cpp	/^void RuleManufactureShortcut::load(const YAML::Node &node)$/;"	f	class:OpenXcom::RuleManufactureShortcut
load	Mod/RuleMissionScript.cpp	/^void RuleMissionScript::load(const YAML::Node& node)$/;"	f	class:OpenXcom::RuleMissionScript
load	Mod/RuleMusic.cpp	/^void RuleMusic::load(const YAML::Node& node)$/;"	f	class:OpenXcom::RuleMusic
load	Mod/RuleRegion.cpp	/^void RuleRegion::load(const YAML::Node &node)$/;"	f	class:OpenXcom::RuleRegion
load	Mod/RuleResearch.cpp	/^void RuleResearch::load(const YAML::Node &node, Mod* mod, const ModScript& parsers, int listOrder)$/;"	f	class:OpenXcom::RuleResearch
load	Mod/RuleSkill.cpp	/^void RuleSkill::load(const YAML::Node& node, Mod *mod, const ModScript& parsers)$/;"	f	class:OpenXcom::RuleSkill
load	Mod/RuleSoldier.cpp	/^void RuleSoldier::load(const YAML::Node &node, Mod *mod, int listOrder, const ModScript &parsers)$/;"	f	class:OpenXcom::RuleSoldier
load	Mod/RuleSoldierBonus.cpp	/^void RuleSoldierBonus::load(const YAML::Node &node, const ModScript &parsers, int listOrder)$/;"	f	class:OpenXcom::RuleSoldierBonus
load	Mod/RuleSoldierTransformation.cpp	/^void RuleSoldierTransformation::load(const YAML::Node &node, Mod* mod, int listOrder)$/;"	f	class:OpenXcom::RuleSoldierTransformation
load	Mod/RuleStartingCondition.cpp	/^void RuleStartingCondition::load(const YAML::Node& node, Mod *mod)$/;"	f	class:OpenXcom::RuleStartingCondition
load	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::load(const std::string& parentName, const YAML::Node& node, const ModScript::BonusStatsCommon& parser)$/;"	f	class:OpenXcom::RuleStatBonus
load	Mod/RuleTerrain.cpp	/^void RuleTerrain::load(const YAML::Node &node, Mod *mod)$/;"	f	class:OpenXcom::RuleTerrain
load	Mod/RuleUfo.cpp	/^void RuleUfo::load(const YAML::Node &node, const ModScript &parsers, Mod *mod)$/;"	f	class:OpenXcom::RuleUfo
load	Mod/RuleUfo.h	/^	void load(const YAML::Node &node)$/;"	f	struct:OpenXcom::RuleUfoStats
load	Mod/RuleVideo.cpp	/^void RuleVideo::load(const YAML::Node &node)$/;"	f	class:OpenXcom::RuleVideo
load	Mod/SoldierNamePool.cpp	/^void SoldierNamePool::load(const std::string &filename)$/;"	f	class:OpenXcom::SoldierNamePool
load	Mod/SoundDefinition.cpp	/^void SoundDefinition::load(const YAML::Node &node)$/;"	f	class:OpenXcom::SoundDefinition
load	Mod/StatString.cpp	/^void StatString::load(const YAML::Node &node)$/;"	f	class:OpenXcom::StatString
load	Mod/Texture.cpp	/^void Texture::load(const YAML::Node &node)$/;"	f	class:OpenXcom::Texture
load	Mod/UfoTrajectory.cpp	/^void UfoTrajectory::load(const YAML::Node &node)$/;"	f	class:OpenXcom::UfoTrajectory
load	Mod/Unit.cpp	/^void Unit::load(const YAML::Node &node, Mod *mod)$/;"	f	class:OpenXcom::Unit
load	Savegame/AlienBase.cpp	/^void AlienBase::load(const YAML::Node &node)$/;"	f	class:OpenXcom::AlienBase
load	Savegame/AlienMission.cpp	/^void AlienMission::load(const YAML::Node& node, SavedGame &game, const Mod* mod)$/;"	f	class:OpenXcom::AlienMission
load	Savegame/AlienStrategy.cpp	/^void AlienStrategy::load(const YAML::Node &node, const Mod* mod)$/;"	f	class:OpenXcom::AlienStrategy
load	Savegame/Base.cpp	/^void Base::load(const YAML::Node &node, SavedGame *save, bool newGame, bool newBattleGame)$/;"	f	class:OpenXcom::Base
load	Savegame/BaseFacility.cpp	/^void BaseFacility::load(const YAML::Node &node)$/;"	f	class:OpenXcom::BaseFacility
load	Savegame/BattleItem.cpp	/^void BattleItem::load(const YAML::Node &node, Mod *mod, const ScriptGlobal *shared)$/;"	f	class:OpenXcom::BattleItem
load	Savegame/BattleUnit.cpp	/^void BattleUnit::load(const YAML::Node &node, const Mod *mod, const ScriptGlobal *shared)$/;"	f	class:OpenXcom::BattleUnit
load	Savegame/BattleUnitStatistics.h	/^	void load(const YAML::Node &node)$/;"	f	struct:OpenXcom::BattleUnitKills
load	Savegame/BattleUnitStatistics.h	/^	void load(const YAML::Node& node)$/;"	f	struct:OpenXcom::BattleUnitStatistics
load	Savegame/Country.cpp	/^void Country::load(const YAML::Node &node)$/;"	f	class:OpenXcom::Country
load	Savegame/Craft.cpp	/^void Craft::load(const YAML::Node &node, const ScriptGlobal *shared, const Mod *mod, SavedGame *save)$/;"	f	class:OpenXcom::Craft
load	Savegame/CraftWeapon.cpp	/^void CraftWeapon::load(const YAML::Node &node)$/;"	f	class:OpenXcom::CraftWeapon
load	Savegame/EquipmentLayoutItem.cpp	/^void EquipmentLayoutItem::load(const YAML::Node &node)$/;"	f	class:OpenXcom::EquipmentLayoutItem
load	Savegame/GameTime.cpp	/^void GameTime::load(const YAML::Node &node)$/;"	f	class:OpenXcom::GameTime
load	Savegame/GeoscapeEvent.cpp	/^void GeoscapeEvent::load(const YAML::Node &node)$/;"	f	class:OpenXcom::GeoscapeEvent
load	Savegame/ItemContainer.cpp	/^void ItemContainer::load(const YAML::Node &node)$/;"	f	class:OpenXcom::ItemContainer
load	Savegame/MissionSite.cpp	/^void MissionSite::load(const YAML::Node &node)$/;"	f	class:OpenXcom::MissionSite
load	Savegame/MissionStatistics.h	/^	void load(const YAML::Node &node)$/;"	f	struct:OpenXcom::MissionStatistics
load	Savegame/MovingTarget.cpp	/^void MovingTarget::load(const YAML::Node &node)$/;"	f	class:OpenXcom::MovingTarget
load	Savegame/Node.cpp	/^void Node::load(const YAML::Node &node)$/;"	f	class:OpenXcom::Node
load	Savegame/Production.cpp	/^void Production::load(const YAML::Node &node)$/;"	f	class:OpenXcom::Production
load	Savegame/Region.cpp	/^void Region::load(const YAML::Node &node)$/;"	f	class:OpenXcom::Region
load	Savegame/ResearchProject.cpp	/^void ResearchProject::load(const YAML::Node& node)$/;"	f	class:OpenXcom::ResearchProject
load	Savegame/SaveConverter.cpp	/^template <> Sint16 load(char* data) { return SDL_SwapLE16(*(Sint16*)data); }$/;"	f	namespace:OpenXcom
load	Savegame/SaveConverter.cpp	/^template <> Uint16 load(char* data) { return SDL_SwapLE16(*(Uint16*)data); }$/;"	f	namespace:OpenXcom
load	Savegame/SaveConverter.cpp	/^template <> int load(char* data) { return SDL_SwapLE32(*(int*)data); }$/;"	f	namespace:OpenXcom
load	Savegame/SaveConverter.cpp	/^template <> std::string load(char* data) { return data; }$/;"	f	namespace:OpenXcom
load	Savegame/SaveConverter.cpp	/^template <> unsigned int load(char* data) { return SDL_SwapLE32(*(unsigned int*)data); }$/;"	f	namespace:OpenXcom
load	Savegame/SaveConverter.cpp	/^template <typename T> T load(char* data) { return *(T*)data; }$/;"	f	namespace:OpenXcom
load	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::load(const YAML::Node &node, Mod *mod, SavedGame* savedGame)$/;"	f	class:OpenXcom::SavedBattleGame
load	Savegame/SavedGame.cpp	/^void SavedGame::load(const std::string &filename, Mod *mod, Language *lang)$/;"	f	class:OpenXcom::SavedGame
load	Savegame/Soldier.cpp	/^void Soldier::load(const YAML::Node& node, const Mod *mod, SavedGame *save, const ScriptGlobal *shared, bool soldierTemplate)$/;"	f	class:OpenXcom::Soldier
load	Savegame/SoldierDeath.cpp	/^void SoldierDeath::load(const YAML::Node &node)$/;"	f	class:OpenXcom::SoldierDeath
load	Savegame/SoldierDiary.cpp	/^void SoldierCommendations::load(const YAML::Node &node)$/;"	f	class:OpenXcom::SoldierCommendations
load	Savegame/SoldierDiary.cpp	/^void SoldierDiary::load(const YAML::Node& node, const Mod *mod)$/;"	f	class:OpenXcom::SoldierDiary
load	Savegame/Target.cpp	/^void Target::load(const YAML::Node &node)$/;"	f	class:OpenXcom::Target
load	Savegame/Tile.cpp	/^void Tile::load(const YAML::Node &node)$/;"	f	class:OpenXcom::Tile
load	Savegame/Transfer.cpp	/^bool Transfer::load(const YAML::Node& node, Base *base, const Mod *mod, SavedGame *save)$/;"	f	class:OpenXcom::Transfer
load	Savegame/Ufo.cpp	/^void Ufo::load(const YAML::Node &node, const ScriptGlobal *shared, const Mod &mod, SavedGame &game)$/;"	f	class:OpenXcom::Ufo
load	Savegame/Vehicle.cpp	/^void Vehicle::load(const YAML::Node &node)$/;"	f	class:OpenXcom::Vehicle
load	Savegame/WeightedOptions.cpp	/^void WeightedOptions::load(const YAML::Node &nd)$/;"	f	class:OpenXcom::WeightedOptions
loadAll	Mod/Mod.cpp	/^void Mod::loadAll()$/;"	f	class:OpenXcom::Mod
loadAmmoSlotChecked	Mod/RuleItem.cpp	/^void RuleItem::loadAmmoSlotChecked(int& result, const YAML::Node& node, const std::string& parentName)$/;"	f	class:OpenXcom::RuleItem
loadArgs	Engine/Options.cpp	/^static void loadArgs()$/;"	f	namespace:OpenXcom::Options
loadBase	Engine/Script.cpp	/^void ScriptValuesBase::loadBase(const YAML::Node &node, const ScriptGlobal* shared, ArgEnum type, const std::string& nodeName)$/;"	f	class:OpenXcom::ScriptValuesBase
loadBaseFunction	Mod/Mod.cpp	/^void Mod::loadBaseFunction(const std::string& parent, RuleBaseFacilityFunctions& f, const YAML::Node& node)$/;"	f	class:OpenXcom::Mod
loadBattlescapeResources	Mod/Mod.cpp	/^void Mod::loadBattlescapeResources()$/;"	f	class:OpenXcom::Mod
loadBdy	Engine/Surface.cpp	/^void Surface::loadBdy(const std::string &filename)$/;"	f	class:OpenXcom::Surface
loadBinary	Savegame/Tile.cpp	/^void Tile::loadBinary(Uint8 *buffer, Tile::SerializationKey& serKey)$/;"	f	class:OpenXcom::Tile
loadBool	Mod/RuleItem.cpp	/^void RuleItem::loadBool(bool& a, const YAML::Node& node) const$/;"	f	class:OpenXcom::RuleItem
loadCat	Engine/SoundSet.cpp	/^void SoundSet::loadCat(CatFile &catFile)$/;"	f	class:OpenXcom::SoundSet
loadCatByIndex	Engine/SoundSet.cpp	/^void SoundSet::loadCatByIndex(CatFile &catFile, int index, bool tftd)$/;"	f	class:OpenXcom::SoundSet
loadConfAction	Mod/RuleItem.cpp	/^void RuleItem::loadConfAction(RuleItemAction& a, const YAML::Node& node, const std::string& name) const$/;"	f	class:OpenXcom::RuleItem
loadConfFuse	Mod/RuleItem.cpp	/^void RuleItem::loadConfFuse(RuleItemFuseTrigger& a, const YAML::Node& node, const std::string& name) const$/;"	f	class:OpenXcom::RuleItem
loadConstants	Mod/Mod.cpp	/^void Mod::loadConstants(const YAML::Node &node)$/;"	f	class:OpenXcom::Mod
loadCost	Mod/RuleItem.h	/^	void loadCost(const YAML::Node& node, const std::string& name)$/;"	f	struct:OpenXcom::RuleItemUseCost
loadDat	Engine/Palette.cpp	/^void Palette::loadDat(const std::string &filename, int ncolors, int offset)$/;"	f	class:OpenXcom::Palette
loadDat	Engine/SurfaceSet.cpp	/^void SurfaceSet::loadDat(const std::string &filename)$/;"	f	class:OpenXcom::SurfaceSet
loadDat	Mod/RuleGlobe.cpp	/^void RuleGlobe::loadDat(const std::string &filename)$/;"	f	class:OpenXcom::RuleGlobe
loadDatAStore	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatAStore()$/;"	f	class:OpenXcom::SaveConverter
loadDatActs	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatActs()$/;"	f	class:OpenXcom::SaveConverter
loadDatAlien	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatAlien()$/;"	f	class:OpenXcom::SaveConverter
loadDatBProd	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatBProd()$/;"	f	class:OpenXcom::SaveConverter
loadDatBase	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatBase()$/;"	f	class:OpenXcom::SaveConverter
loadDatCraft	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatCraft()$/;"	f	class:OpenXcom::SaveConverter
loadDatDiplom	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatDiplom()$/;"	f	class:OpenXcom::SaveConverter
loadDatIGlob	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatIGlob()$/;"	f	class:OpenXcom::SaveConverter
loadDatLIGlob	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatLIGlob()$/;"	f	class:OpenXcom::SaveConverter
loadDatLease	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatLease()$/;"	f	class:OpenXcom::SaveConverter
loadDatLoc	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatLoc()$/;"	f	class:OpenXcom::SaveConverter
loadDatMissions	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatMissions()$/;"	f	class:OpenXcom::SaveConverter
loadDatProject	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatProject()$/;"	f	class:OpenXcom::SaveConverter
loadDatResearch	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatResearch()$/;"	f	class:OpenXcom::SaveConverter
loadDatSoldier	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatSoldier()$/;"	f	class:OpenXcom::SaveConverter
loadDatTransfer	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatTransfer()$/;"	f	class:OpenXcom::SaveConverter
loadDatUIGlob	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatUIGlob()$/;"	f	class:OpenXcom::SaveConverter
loadDatUp	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatUp()$/;"	f	class:OpenXcom::SaveConverter
loadDatXBases	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatXBases()$/;"	f	class:OpenXcom::SaveConverter
loadDatXcom	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatXcom()$/;"	f	class:OpenXcom::SaveConverter
loadDatZonal	Savegame/SaveConverter.cpp	/^void SaveConverter::loadDatZonal()$/;"	f	class:OpenXcom::SaveConverter
loadData	Mod/MapDataSet.cpp	/^void MapDataSet::loadData(MCDPatch *patch, bool validate)$/;"	f	class:OpenXcom::MapDataSet
loadExtraResources	Mod/Mod.cpp	/^void Mod::loadExtraResources()$/;"	f	class:OpenXcom::Mod
loadExtraSprite	Mod/Mod.cpp	/^void Mod::loadExtraSprite(ExtraSprites *spritePack)$/;"	f	class:OpenXcom::Mod
loadExtraTerrain	Battlescape/BattlescapeGenerator.cpp	/^int BattlescapeGenerator::loadExtraTerrain(RuleTerrain *terrain)$/;"	f	class:OpenXcom::BattlescapeGenerator
loadFile	Engine/Language.cpp	/^void Language::loadFile(const FileMap::FileRecord *frec)$/;"	f	class:OpenXcom::Language
loadFile	Mod/Mod.cpp	/^void Mod::loadFile(const FileMap::FileRecord &filerec, ModScript &parsers)$/;"	f	class:OpenXcom::Mod
loadGlobalLayout	Battlescape/InventoryState.cpp	/^void InventoryState::loadGlobalLayout(int index)$/;"	f	class:OpenXcom::InventoryState
loadGlobalLayoutArmor	Battlescape/InventoryState.cpp	/^bool InventoryState::loadGlobalLayoutArmor(int index)$/;"	f	class:OpenXcom::InventoryState
loadGlobalLoadout	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::loadGlobalLoadout(int index)$/;"	f	class:OpenXcom::CraftEquipmentState
loadHelper	Mod/Mod.cpp	/^void loadHelper(const std::string &parent, int& v, const YAML::Node &node)$/;"	f	namespace:OpenXcom::__anon28
loadHelper	Mod/Mod.cpp	/^void loadHelper(const std::string &parent, std::map<K, V>& v, const YAML::Node &node, LoadFuncEditable, LoadFuncTag... rest)$/;"	f	namespace:OpenXcom::__anon28
loadHelper	Mod/Mod.cpp	/^void loadHelper(const std::string &parent, std::map<K, V>& v, const YAML::Node &node, LoadFuncStandard, LoadFuncTag... rest)$/;"	f	namespace:OpenXcom::__anon28
loadHelper	Mod/Mod.cpp	/^void loadHelper(const std::string &parent, std::string& v, const YAML::Node &node)$/;"	f	namespace:OpenXcom::__anon28
loadHelper	Mod/Mod.cpp	/^void loadHelper(const std::string &parent, std::string& v, const YAML::Node &node, LoadFuncNullable)$/;"	f	namespace:OpenXcom::__anon28
loadHelper	Mod/Mod.cpp	/^void loadHelper(const std::string &parent, std::string& v, const YAML::Node &node, LoadFuncStandard)$/;"	f	namespace:OpenXcom::__anon28
loadHelper	Mod/Mod.cpp	/^void loadHelper(const std::string &parent, std::vector<T>& v, const YAML::Node &node, LoadFuncEditable, LoadFuncTag... rest)$/;"	f	namespace:OpenXcom::__anon28
loadHelper	Mod/Mod.cpp	/^void loadHelper(const std::string &parent, std::vector<T>& v, const YAML::Node &node, LoadFuncStandard, LoadFuncTag... rest)$/;"	f	namespace:OpenXcom::__anon28
loadHelper	Mod/Mod.cpp	/^void loadHelper(const std::string &parent, std::vector<std::pair<K, V>>& v, const YAML::Node &node, LoadFuncEditable, LoadFuncTag... rest)$/;"	f	namespace:OpenXcom::__anon28
loadId	Savegame/Craft.cpp	/^CraftId Craft::loadId(const YAML::Node &node)$/;"	f	class:OpenXcom::Craft
loadImage	Engine/Surface.cpp	/^void Surface::loadImage(const std::string &filename)$/;"	f	class:OpenXcom::Surface
loadInt	Mod/RuleItem.cpp	/^void RuleItem::loadInt(int& a, const YAML::Node& node) const$/;"	f	class:OpenXcom::RuleItem
loadInt	Mod/RuleItem.h	/^	void loadInt(int& a, const YAML::Node& node) const$/;"	f	struct:OpenXcom::RuleItemUseCost
loadInts	Mod/Mod.cpp	/^void Mod::loadInts(const std::string &parent, std::vector<int>& ints, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadKillCriteria	Mod/Mod.cpp	/^void Mod::loadKillCriteria(const std::string &parent, std::vector<std::vector<std::pair<int, std::vector<std::string> > > >& v, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadLOFTEMPS	Mod/MapDataSet.cpp	/^void MapDataSet::loadLOFTEMPS(const std::string &filename, std::vector<Uint16> *voxelData)$/;"	f	class:OpenXcom::MapDataSet
loadLanguages	Engine/Game.cpp	/^void Game::loadLanguages()$/;"	f	class:OpenXcom::Game
loadMAP	Battlescape/BattlescapeGenerator.cpp	/^int BattlescapeGenerator::loadMAP(MapBlock *mapblock, int xoff, int yoff, int zoff, RuleTerrain *terrain, int mapDataSetOffset, bool discovered, bool craft, int ufoIndex)$/;"	f	class:OpenXcom::BattlescapeGenerator
loadMAP	Menu/TestState.cpp	/^int TestState::loadMAP(MapBlock *mapblock)$/;"	f	class:OpenXcom::TestState
loadMIDI	Engine/GMCat.cpp	/^Music *GMCatFile::loadMIDI(unsigned int i)$/;"	f	class:OpenXcom::GMCatFile
loadMapResources	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::loadMapResources(Mod *mod)$/;"	f	class:OpenXcom::SavedBattleGame
loadMod	Mod/Mod.cpp	/^void Mod::loadMod(const std::vector<FileMap::FileRecord> &rulesetFiles, ModScript &parsers)$/;"	f	class:OpenXcom::Mod
loadMods	Engine/Game.cpp	/^void Game::loadMods()$/;"	f	class:OpenXcom::Game
loadMusic	Mod/Mod.cpp	/^Music* Mod::loadMusic(MusicFormat fmt, RuleMusic* rule, CatFile* adlibcat, CatFile* aintrocat, GMCatFile* gmcat) const$/;"	f	class:OpenXcom::Mod
loadName	Mod/Mod.cpp	/^void Mod::loadName(const std::string &parent, std::string& name, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadNameNull	Mod/Mod.cpp	/^void Mod::loadNameNull(const std::string &parent, std::string& name, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadNames	Mod/Mod.cpp	/^void Mod::loadNames(const std::string &parent, std::vector<std::string>& names, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadNamesToNames	Mod/Mod.cpp	/^void Mod::loadNamesToNames(const std::string &parent, std::vector<std::pair<std::string, std::vector<std::string>>>& names, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadNodes	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::loadNodes()$/;"	f	class:OpenXcom::BattlescapeGenerator
loadOffsetNode	Mod/Mod.cpp	/^void Mod::loadOffsetNode(const std::string &parent, int& offset, const YAML::Node &node, int shared, const std::string &set, size_t multiplier, size_t sizeScale) const$/;"	f	class:OpenXcom::Mod
loadOriginal	Savegame/SaveConverter.cpp	/^SavedGame *SaveConverter::loadOriginal()$/;"	f	class:OpenXcom::SaveConverter
loadPck	Engine/SurfaceSet.cpp	/^void SurfaceSet::loadPck(const std::string &pck, const std::string &tab)$/;"	f	class:OpenXcom::SurfaceSet
loadPercent	Mod/RuleItem.h	/^	void loadPercent(const YAML::Node& node, const std::string& name)$/;"	f	struct:OpenXcom::RuleItemUseCost
loadRMP	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::loadRMP(MapBlock *mapblock, int xoff, int yoff, int zoff, int segment)$/;"	f	class:OpenXcom::BattlescapeGenerator
loadRaw	Engine/Surface.cpp	/^void Surface::loadRaw(const std::vector<char> &bytes)$/;"	f	class:OpenXcom::Surface
loadRaw	Engine/Surface.cpp	/^void Surface::loadRaw(const std::vector<unsigned char> &bytes)$/;"	f	class:OpenXcom::Surface
loadResourceConfigFile	Mod/Mod.cpp	/^void Mod::loadResourceConfigFile(const FileMap::FileRecord &filerec)$/;"	f	class:OpenXcom::Mod
loadRule	Engine/Language.cpp	/^void Language::loadRule(const std::map<std::string, ExtraStrings*> &extraStrings, const std::string &id)$/;"	f	class:OpenXcom::Language
loadRule	Mod/Mod.cpp	/^T *Mod::loadRule(const YAML::Node &node, std::map<std::string, T*> *map, std::vector<std::string> *index, const std::string &key) const$/;"	f	class:OpenXcom::Mod
loadRuleList	Mod/Mod.cpp	/^	void loadRuleList(int &value, const YAML::Node &node) const$/;"	f	class:OpenXcom::ModScriptGlobal	file:
loadSave	Menu/ListLoadState.cpp	/^void ListLoadState::loadSave(size_t list_idx)$/;"	f	class:OpenXcom::ListLoadState
loadScr	Engine/Surface.cpp	/^void Surface::loadScr(const std::string& filename)$/;"	f	class:OpenXcom::Surface
loadSelectionList	Ufopaedia/UfopaediaSelectState.cpp	/^	void UfopaediaSelectState::loadSelectionList(bool markAllAsSeen)$/;"	f	class:OpenXcom::UfopaediaSelectState
loadSound	Mod/ExtraSounds.cpp	/^void ExtraSounds::loadSound(SoundSet *set, int index, const std::string &fileName) const$/;"	f	class:OpenXcom::ExtraSounds
loadSoundOffset	Mod/Mod.cpp	/^void Mod::loadSoundOffset(const std::string &parent, int& sound, const YAML::Node &node, const std::string &set) const$/;"	f	class:OpenXcom::Mod
loadSoundOffset	Mod/Mod.cpp	/^void Mod::loadSoundOffset(const std::string &parent, std::vector<int>& sounds, const YAML::Node &node, const std::string &set) const$/;"	f	class:OpenXcom::Mod
loadSoundSet	Mod/ExtraSounds.cpp	/^SoundSet *ExtraSounds::loadSoundSet(SoundSet *set) const$/;"	f	class:OpenXcom::ExtraSounds
loadSpk	Engine/Surface.cpp	/^void Surface::loadSpk(const std::string& filename)$/;"	f	class:OpenXcom::Surface
loadSpriteOffset	Mod/Mod.cpp	/^void Mod::loadSpriteOffset(const std::string &parent, int& sprite, const YAML::Node &node, const std::string &set, size_t multiplier) const$/;"	f	class:OpenXcom::Mod
loadSpriteOffset	Mod/Mod.cpp	/^void Mod::loadSpriteOffset(const std::string &parent, std::vector<int>& sprites, const YAML::Node &node, const std::string &set) const$/;"	f	class:OpenXcom::Mod
loadString	Engine/Language.cpp	/^std::string Language::loadString(const std::string &string) const$/;"	f	class:OpenXcom::Language
loadSurface	Mod/ExtraSprites.cpp	/^Surface *ExtraSprites::loadSurface(Surface *surface)$/;"	f	class:OpenXcom::ExtraSprites
loadSurfaceSet	Mod/ExtraSprites.cpp	/^SurfaceSet *ExtraSprites::loadSurfaceSet(SurfaceSet *set)$/;"	f	class:OpenXcom::ExtraSprites
loadTerminal	Engine/Font.cpp	/^void Font::loadTerminal()$/;"	f	class:OpenXcom::Font
loadTransparencyOffset	Mod/Mod.cpp	/^void Mod::loadTransparencyOffset(const std::string &parent, int& index, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadTriBool	Mod/RuleItem.cpp	/^void RuleItem::loadTriBool(int& a, const YAML::Node& node) const$/;"	f	class:OpenXcom::RuleItem
loadTriBool	Mod/RuleItem.h	/^	void loadTriBool(int& a, const YAML::Node& node) const$/;"	f	struct:OpenXcom::RuleItemUseCost
loadTriBoolHelper	Mod/Armor.cpp	/^void loadTriBoolHelper(Sint8& value, const YAML::Node& node)$/;"	f	namespace:OpenXcom::__anon15
loadUnorderedInts	Mod/Mod.cpp	/^void Mod::loadUnorderedInts(const std::string &parent, std::vector<int>& ints, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadUnorderedNames	Mod/Mod.cpp	/^void Mod::loadUnorderedNames(const std::string &parent, std::vector<std::string>& names, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadUnorderedNamesToInt	Mod/Mod.cpp	/^void Mod::loadUnorderedNamesToInt(const std::string &parent, std::map<std::string, int>& names, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadUnorderedNamesToInts	Mod/Mod.cpp	/^void Mod::loadUnorderedNamesToInts(const std::string &parent, std::map<std::string, std::vector<int>>& names, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadUnorderedNamesToNames	Mod/Mod.cpp	/^void Mod::loadUnorderedNamesToNames(const std::string &parent, std::map<std::string, std::string>& names, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadUnorderedNamesToNamesToInt	Mod/Mod.cpp	/^void Mod::loadUnorderedNamesToNamesToInt(const std::string &parent, std::map<std::string, std::map<std::string, int>>& names, const YAML::Node &node) const$/;"	f	class:OpenXcom::Mod
loadVanillaResources	Mod/Mod.cpp	/^void Mod::loadVanillaResources()$/;"	f	class:OpenXcom::Mod
loadVerticalLevels	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::loadVerticalLevels(MapScript *command, bool repopulateLevels, MapBlock *craftMap)$/;"	f	class:OpenXcom::BattlescapeGenerator
loadWeapons	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::loadWeapons(const std::vector<BattleItem*> &itemList)$/;"	f	class:OpenXcom::BattlescapeGenerator
load_file	lodepng.cpp	/^unsigned load_file(std::vector<unsigned char>& buffer, const std::string& filename)$/;"	f	namespace:lodepng
loading	Menu/StartState.cpp	/^LoadingPhase StartState::loading;$/;"	m	class:OpenXcom::StartState	file:
loading	Menu/StartState.h	/^	static LoadingPhase loading;$/;"	m	class:OpenXcom::StartState
loadingBuffer	Engine/FlcPlayer.h	/^		AudioBuffer *loadingBuffer;$/;"	m	struct:OpenXcom::FlcPlayer::AudioData
locateCountry	Savegame/SavedGame.cpp	/^Country* SavedGame::locateCountry(const Target& target) const$/;"	f	class:OpenXcom::SavedGame
locateCountry	Savegame/SavedGame.cpp	/^Country* SavedGame::locateCountry(double lon, double lat) const$/;"	f	class:OpenXcom::SavedGame
locateRegion	Savegame/SavedGame.cpp	/^Region *SavedGame::locateRegion(const Target &target) const$/;"	f	class:OpenXcom::SavedGame
locateRegion	Savegame/SavedGame.cpp	/^Region *SavedGame::locateRegion(double lon, double lat) const$/;"	f	class:OpenXcom::SavedGame
lock	Engine/OpenGL.cpp	/^bool OpenGL::lock(uint32_t *&data, unsigned &pitch)$/;"	f	class:OpenXcom::OpenGL
lock	Engine/Surface.cpp	/^void Surface::lock()$/;"	f	class:OpenXcom::Surface
lodepng	lodepng.cpp	/^namespace lodepng$/;"	n	file:
lodepng	lodepng.h	/^namespace lodepng$/;"	n
lodepng_add32bitInt	lodepng.cpp	/^static void lodepng_add32bitInt(ucvector* buffer, unsigned value)$/;"	f	file:
lodepng_add_itext	lodepng.cpp	/^unsigned lodepng_add_itext(LodePNGInfo* info, const char* key, const char* langtag,$/;"	f
lodepng_add_text	lodepng.cpp	/^unsigned lodepng_add_text(LodePNGInfo* info, const char* key, const char* str)$/;"	f
lodepng_auto_choose_color	lodepng.cpp	/^unsigned lodepng_auto_choose_color(LodePNGColorMode* mode_out,$/;"	f
lodepng_buffer_file	lodepng.cpp	/^static unsigned lodepng_buffer_file(unsigned char* out, size_t size, const char* filename)$/;"	f	file:
lodepng_can_have_alpha	lodepng.cpp	/^unsigned lodepng_can_have_alpha(const LodePNGColorMode* info)$/;"	f
lodepng_chunk_ancillary	lodepng.cpp	/^unsigned char lodepng_chunk_ancillary(const unsigned char* chunk)$/;"	f
lodepng_chunk_append	lodepng.cpp	/^unsigned lodepng_chunk_append(unsigned char** out, size_t* outlength, const unsigned char* chunk)$/;"	f
lodepng_chunk_check_crc	lodepng.cpp	/^unsigned lodepng_chunk_check_crc(const unsigned char* chunk)$/;"	f
lodepng_chunk_create	lodepng.cpp	/^unsigned lodepng_chunk_create(unsigned char** out, size_t* outlength, unsigned length,$/;"	f
lodepng_chunk_data	lodepng.cpp	/^unsigned char* lodepng_chunk_data(unsigned char* chunk)$/;"	f
lodepng_chunk_data_const	lodepng.cpp	/^const unsigned char* lodepng_chunk_data_const(const unsigned char* chunk)$/;"	f
lodepng_chunk_generate_crc	lodepng.cpp	/^void lodepng_chunk_generate_crc(unsigned char* chunk)$/;"	f
lodepng_chunk_length	lodepng.cpp	/^unsigned lodepng_chunk_length(const unsigned char* chunk)$/;"	f
lodepng_chunk_next	lodepng.cpp	/^unsigned char* lodepng_chunk_next(unsigned char* chunk)$/;"	f
lodepng_chunk_next_const	lodepng.cpp	/^const unsigned char* lodepng_chunk_next_const(const unsigned char* chunk)$/;"	f
lodepng_chunk_private	lodepng.cpp	/^unsigned char lodepng_chunk_private(const unsigned char* chunk)$/;"	f
lodepng_chunk_safetocopy	lodepng.cpp	/^unsigned char lodepng_chunk_safetocopy(const unsigned char* chunk)$/;"	f
lodepng_chunk_type	lodepng.cpp	/^void lodepng_chunk_type(char type[5], const unsigned char* chunk)$/;"	f
lodepng_chunk_type_equals	lodepng.cpp	/^unsigned char lodepng_chunk_type_equals(const unsigned char* chunk, const char* type)$/;"	f
lodepng_clear_itext	lodepng.cpp	/^void lodepng_clear_itext(LodePNGInfo* info)$/;"	f
lodepng_clear_text	lodepng.cpp	/^void lodepng_clear_text(LodePNGInfo* info)$/;"	f
lodepng_color_mode_cleanup	lodepng.cpp	/^void lodepng_color_mode_cleanup(LodePNGColorMode* info)$/;"	f
lodepng_color_mode_copy	lodepng.cpp	/^unsigned lodepng_color_mode_copy(LodePNGColorMode* dest, const LodePNGColorMode* source)$/;"	f
lodepng_color_mode_equal	lodepng.cpp	/^static int lodepng_color_mode_equal(const LodePNGColorMode* a, const LodePNGColorMode* b)$/;"	f	file:
lodepng_color_mode_init	lodepng.cpp	/^void lodepng_color_mode_init(LodePNGColorMode* info)$/;"	f
lodepng_color_profile_init	lodepng.cpp	/^void lodepng_color_profile_init(LodePNGColorProfile* profile)$/;"	f
lodepng_compress_settings_init	lodepng.cpp	/^void lodepng_compress_settings_init(LodePNGCompressSettings* settings)$/;"	f
lodepng_convert	lodepng.cpp	/^unsigned lodepng_convert(unsigned char* out, const unsigned char* in,$/;"	f
lodepng_crc32	lodepng.cpp	/^unsigned lodepng_crc32(const unsigned char* data, size_t length)$/;"	f
lodepng_crc32_table	lodepng.cpp	/^static unsigned lodepng_crc32_table[256] = {$/;"	v	file:
lodepng_decode	lodepng.cpp	/^unsigned lodepng_decode(unsigned char** out, unsigned* w, unsigned* h,$/;"	f
lodepng_decode24	lodepng.cpp	/^unsigned lodepng_decode24(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)$/;"	f
lodepng_decode24_file	lodepng.cpp	/^unsigned lodepng_decode24_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)$/;"	f
lodepng_decode32	lodepng.cpp	/^unsigned lodepng_decode32(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in, size_t insize)$/;"	f
lodepng_decode32_file	lodepng.cpp	/^unsigned lodepng_decode32_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename)$/;"	f
lodepng_decode_file	lodepng.cpp	/^unsigned lodepng_decode_file(unsigned char** out, unsigned* w, unsigned* h, const char* filename,$/;"	f
lodepng_decode_memory	lodepng.cpp	/^unsigned lodepng_decode_memory(unsigned char** out, unsigned* w, unsigned* h, const unsigned char* in,$/;"	f
lodepng_decoder_settings_init	lodepng.cpp	/^void lodepng_decoder_settings_init(LodePNGDecoderSettings* settings)$/;"	f
lodepng_decompress_settings_init	lodepng.cpp	/^void lodepng_decompress_settings_init(LodePNGDecompressSettings* settings)$/;"	f
lodepng_default_compress_settings	lodepng.cpp	/^const LodePNGCompressSettings lodepng_default_compress_settings = {2, 1, DEFAULT_WINDOWSIZE, 3, 128, 1, 0, 0, 0};$/;"	v
lodepng_default_decompress_settings	lodepng.cpp	/^const LodePNGDecompressSettings lodepng_default_decompress_settings = {0, 0, 0, 0};$/;"	v
lodepng_deflate	lodepng.cpp	/^unsigned lodepng_deflate(unsigned char** out, size_t* outsize,$/;"	f
lodepng_deflatev	lodepng.cpp	/^static unsigned lodepng_deflatev(ucvector* out, const unsigned char* in, size_t insize,$/;"	f	file:
lodepng_encode	lodepng.cpp	/^unsigned lodepng_encode(unsigned char** out, size_t* outsize,$/;"	f
lodepng_encode24	lodepng.cpp	/^unsigned lodepng_encode24(unsigned char** out, size_t* outsize, const unsigned char* image, unsigned w, unsigned h)$/;"	f
lodepng_encode24_file	lodepng.cpp	/^unsigned lodepng_encode24_file(const char* filename, const unsigned char* image, unsigned w, unsigned h)$/;"	f
lodepng_encode32	lodepng.cpp	/^unsigned lodepng_encode32(unsigned char** out, size_t* outsize, const unsigned char* image, unsigned w, unsigned h)$/;"	f
lodepng_encode32_file	lodepng.cpp	/^unsigned lodepng_encode32_file(const char* filename, const unsigned char* image, unsigned w, unsigned h)$/;"	f
lodepng_encode_file	lodepng.cpp	/^unsigned lodepng_encode_file(const char* filename, const unsigned char* image, unsigned w, unsigned h,$/;"	f
lodepng_encode_memory	lodepng.cpp	/^unsigned lodepng_encode_memory(unsigned char** out, size_t* outsize, const unsigned char* image,$/;"	f
lodepng_encoder_settings_init	lodepng.cpp	/^void lodepng_encoder_settings_init(LodePNGEncoderSettings* settings)$/;"	f
lodepng_error_text	lodepng.cpp	/^const char* lodepng_error_text(unsigned code)$/;"	f
lodepng_filesize	lodepng.cpp	/^static long lodepng_filesize(const char* filename)$/;"	f	file:
lodepng_free	lodepng.cpp	/^static void lodepng_free(void* ptr)$/;"	f	file:
lodepng_get_bpp	lodepng.cpp	/^unsigned lodepng_get_bpp(const LodePNGColorMode* info)$/;"	f
lodepng_get_bpp_lct	lodepng.cpp	/^static unsigned lodepng_get_bpp_lct(LodePNGColorType colortype, unsigned bitdepth)$/;"	f	file:
lodepng_get_channels	lodepng.cpp	/^unsigned lodepng_get_channels(const LodePNGColorMode* info)$/;"	f
lodepng_get_color_profile	lodepng.cpp	/^unsigned lodepng_get_color_profile(LodePNGColorProfile* profile,$/;"	f
lodepng_get_raw_size	lodepng.cpp	/^size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode* color)$/;"	f
lodepng_get_raw_size_idat	lodepng.cpp	/^static size_t lodepng_get_raw_size_idat(unsigned w, unsigned h, const LodePNGColorMode* color)$/;"	f	file:
lodepng_get_raw_size_lct	lodepng.cpp	/^size_t lodepng_get_raw_size_lct(unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth)$/;"	f
lodepng_has_palette_alpha	lodepng.cpp	/^unsigned lodepng_has_palette_alpha(const LodePNGColorMode* info)$/;"	f
lodepng_huffman_code_lengths	lodepng.cpp	/^unsigned lodepng_huffman_code_lengths(unsigned* lengths, const unsigned* frequencies,$/;"	f
lodepng_inflate	lodepng.cpp	/^unsigned lodepng_inflate(unsigned char** out, size_t* outsize,$/;"	f
lodepng_inflatev	lodepng.cpp	/^static unsigned lodepng_inflatev(ucvector* out,$/;"	f	file:
lodepng_info_cleanup	lodepng.cpp	/^void lodepng_info_cleanup(LodePNGInfo* info)$/;"	f
lodepng_info_copy	lodepng.cpp	/^unsigned lodepng_info_copy(LodePNGInfo* dest, const LodePNGInfo* source)$/;"	f
lodepng_info_init	lodepng.cpp	/^void lodepng_info_init(LodePNGInfo* info)$/;"	f
lodepng_info_swap	lodepng.cpp	/^void lodepng_info_swap(LodePNGInfo* a, LodePNGInfo* b)$/;"	f
lodepng_inspect	lodepng.cpp	/^unsigned lodepng_inspect(unsigned* w, unsigned* h, LodePNGState* state,$/;"	f
lodepng_is_alpha_type	lodepng.cpp	/^unsigned lodepng_is_alpha_type(const LodePNGColorMode* info)$/;"	f
lodepng_is_greyscale_type	lodepng.cpp	/^unsigned lodepng_is_greyscale_type(const LodePNGColorMode* info)$/;"	f
lodepng_is_palette_type	lodepng.cpp	/^unsigned lodepng_is_palette_type(const LodePNGColorMode* info)$/;"	f
lodepng_load_file	lodepng.cpp	/^unsigned lodepng_load_file(unsigned char** out, size_t* outsize, const char* filename)$/;"	f
lodepng_malloc	lodepng.cpp	/^static void* lodepng_malloc(size_t size)$/;"	f	file:
lodepng_palette_add	lodepng.cpp	/^unsigned lodepng_palette_add(LodePNGColorMode* info,$/;"	f
lodepng_palette_clear	lodepng.cpp	/^void lodepng_palette_clear(LodePNGColorMode* info)$/;"	f
lodepng_read32bitInt	lodepng.cpp	/^unsigned lodepng_read32bitInt(const unsigned char* buffer)$/;"	f
lodepng_realloc	lodepng.cpp	/^static void* lodepng_realloc(void* ptr, size_t new_size)$/;"	f	file:
lodepng_save_file	lodepng.cpp	/^unsigned lodepng_save_file(const unsigned char* buffer, size_t buffersize, const char* filename)$/;"	f
lodepng_set32bitInt	lodepng.cpp	/^static void lodepng_set32bitInt(unsigned char* buffer, unsigned value)$/;"	f	file:
lodepng_state_cleanup	lodepng.cpp	/^void lodepng_state_cleanup(LodePNGState* state)$/;"	f
lodepng_state_copy	lodepng.cpp	/^void lodepng_state_copy(LodePNGState* dest, const LodePNGState* source)$/;"	f
lodepng_state_init	lodepng.cpp	/^void lodepng_state_init(LodePNGState* state)$/;"	f
lodepng_zlib_compress	lodepng.cpp	/^unsigned lodepng_zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,$/;"	f
lodepng_zlib_decompress	lodepng.cpp	/^unsigned lodepng_zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,$/;"	f
log	Engine/CrossPlatform.cpp	/^void log(int level, const std::ostringstream& baremsgstream) {$/;"	f	namespace:OpenXcom::CrossPlatform
logBuffer	Engine/CrossPlatform.cpp	/^static std::list<std::pair<int, std::string>> logBuffer;$/;"	m	namespace:OpenXcom::CrossPlatform	file:
logDump	Engine/Script.cpp	/^void ParserWriter::logDump(const ScriptRefData& ref) const$/;"	f	class:OpenXcom::ParserWriter
logFileName	Engine/CrossPlatform.cpp	/^static std::string logFileName;$/;"	m	namespace:OpenXcom::CrossPlatform	file:
logMissionError	Savegame/AlienMission.cpp	/^void AlienMission::logMissionError(int zone, const RuleRegion &region)$/;"	f	class:OpenXcom::AlienMission
logScriptMetadata	Engine/Script.cpp	/^void ScriptParserBase::logScriptMetadata(bool haveEvents, const std::string& groupName) const$/;"	f	class:OpenXcom::ScriptParserBase
logToFile	Engine/CrossPlatform.cpp	/^static bool logToFile(const std::string& filename, const std::string& data) {$/;"	f	namespace:OpenXcom::CrossPlatform
log_buffer_add	Engine/Script.cpp	/^void ScriptWorkerBase::log_buffer_add(FuncRef<std::string()> func)$/;"	f	class:OpenXcom::ScriptWorkerBase
log_buffer_flush	Engine/Script.cpp	/^void ScriptWorkerBase::log_buffer_flush(ProgPos& p)$/;"	f	class:OpenXcom::ScriptWorkerBase
log_buffer_limit_count	Engine/Script.cpp	/^static int log_buffer_limit_count = 0;$/;"	m	namespace:OpenXcom	file:
log_buffer_limit_max	Engine/Script.cpp	/^constexpr int log_buffer_limit_max = 500;$/;"	m	namespace:OpenXcom	file:
lon	Geoscape/Cord.h	/^	double lon, lat;$/;"	m	struct:OpenXcom::CordPolar
lonMax	Mod/RuleRegion.h	/^	double lonMin, lonMax, latMin, latMax;$/;"	m	struct:OpenXcom::MissionArea
lonMax	Mod/Texture.h	/^	double lonMin, lonMax, latMin, latMax;$/;"	m	struct:OpenXcom::TerrainCriteria
lonMin	Mod/RuleRegion.h	/^	double lonMin, lonMax, latMin, latMax;$/;"	m	struct:OpenXcom::MissionArea
lonMin	Mod/Texture.h	/^	double lonMin, lonMax, latMin, latMax;$/;"	m	struct:OpenXcom::TerrainCriteria
loneSurvivor	Savegame/BattleUnitStatistics.h	/^	bool loneSurvivor;                   \/\/\/< Tracks if the soldier was the only survivor$/;"	m	struct:OpenXcom::BattleUnitStatistics
longDistanceHitCounter	Savegame/BattleUnitStatistics.h	/^	int longDistanceHitCounter;          \/\/\/< Tracks how many long distance shots were landed$/;"	m	struct:OpenXcom::BattleUnitStatistics
lookAt	Savegame/BattleUnit.cpp	/^void BattleUnit::lookAt(Position point, bool turret)$/;"	f	class:OpenXcom::BattleUnit
lookAt	Savegame/BattleUnit.cpp	/^void BattleUnit::lookAt(int direction, bool force)$/;"	f	class:OpenXcom::BattleUnit
loop	Engine/Sound.cpp	/^void Sound::loop()$/;"	f	class:OpenXcom::Sound
lootValue	Savegame/MissionStatistics.h	/^	int lootValue;$/;"	m	struct:OpenXcom::MissionStatistics
lowAccuracyHitCounter	Savegame/BattleUnitStatistics.h	/^	int lowAccuracyHitCounter;           \/\/\/< Tracks how many times the unit landed a low probability shot$/;"	m	struct:OpenXcom::BattleUnitStatistics
lowQty	Mod/AlienDeployment.h	/^	int lowQty, medQty, highQty, dQty, extraQty;$/;"	m	struct:OpenXcom::DeploymentData
lowerAllSurfaces	Engine/State.cpp	/^void State::lowerAllSurfaces()$/;"	f	class:OpenXcom::State
lowerCase	Engine/Unicode.cpp	/^void lowerCase(std::string &s)$/;"	f	namespace:OpenXcom::Unicode
ls	Engine/FileMap.cpp	/^	const NameSet& ls(const std::string& relpath) { return stack.ls(relpath); }$/;"	f	struct:OpenXcom::FileMap::ModRecord
ls	Engine/FileMap.cpp	/^	const NameSet& ls(const std::string& relpath) { return stack.ls(relpath); }$/;"	f	struct:OpenXcom::FileMap::VFS
ls	Engine/FileMap.cpp	/^	const NameSet& ls(const std::string& relpath) {$/;"	f	struct:OpenXcom::FileMap::VFSLayer
ls	Engine/FileMap.cpp	/^	const NameSet& ls(const std::string& relpath) {$/;"	f	struct:OpenXcom::FileMap::VFSLayerStack
ls_r	Engine/FileMap.cpp	/^static bool ls_r(const std::string &basePath, const std::string &relPath, dirlist_t& dlist) {$/;"	f	namespace:OpenXcom::FileMap
lslayer	Engine/FileMap.cpp	/^	const NameSet& lslayer(const std::string& relpath, size_t level) {$/;"	f	struct:OpenXcom::FileMap::VFS
lstAccessLiftsClick	Basescape/PlaceLiftState.cpp	/^void PlaceLiftState::lstAccessLiftsClick(Action *action)$/;"	f	class:OpenXcom::PlaceLiftState
lstArmorClick	Basescape/SoldierArmorState.cpp	/^void SoldierArmorState::lstArmorClick(Action *)$/;"	f	class:OpenXcom::SoldierArmorState
lstArmorClickMiddle	Basescape/SoldierArmorState.cpp	/^void SoldierArmorState::lstArmorClickMiddle(Action *action)$/;"	f	class:OpenXcom::SoldierArmorState
lstAvatarClick	Basescape/SoldierAvatarState.cpp	/^void SoldierAvatarState::lstAvatarClick(Action *)$/;"	f	class:OpenXcom::SoldierAvatarState
lstBasesClick	Basescape/TransferBaseState.cpp	/^void TransferBaseState::lstBasesClick(Action *)$/;"	f	class:OpenXcom::TransferBaseState
lstBonusesClick	Basescape/SoldierBonusState.cpp	/^void SoldierBonusState::lstBonusesClick(Action *)$/;"	f	class:OpenXcom::SoldierBonusState
lstControlsClick	Menu/OptionsControlsState.cpp	/^void OptionsControlsState::lstControlsClick(Action *action)$/;"	f	class:OpenXcom::OptionsControlsState
lstControlsKeyPress	Menu/OptionsControlsState.cpp	/^void OptionsControlsState::lstControlsKeyPress(Action *action)$/;"	f	class:OpenXcom::OptionsControlsState
lstCraftsClick	Basescape/CraftsState.cpp	/^void CraftsState::lstCraftsClick(Action *action)$/;"	f	class:OpenXcom::CraftsState
lstCraftsLeftClick	Geoscape/InterceptState.cpp	/^void InterceptState::lstCraftsLeftClick(Action *)$/;"	f	class:OpenXcom::InterceptState
lstCraftsMiddleClick	Geoscape/InterceptState.cpp	/^void InterceptState::lstCraftsMiddleClick(Action *)$/;"	f	class:OpenXcom::InterceptState
lstCraftsRightClick	Geoscape/InterceptState.cpp	/^void InterceptState::lstCraftsRightClick(Action *)$/;"	f	class:OpenXcom::InterceptState
lstDiaryInfoClick	Basescape/SoldierDiaryOverviewState.cpp	/^void SoldierDiaryOverviewState::lstDiaryInfoClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryOverviewState
lstEquipmentLeftArrowClick	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::lstEquipmentLeftArrowClick(Action *action)$/;"	f	class:OpenXcom::CraftEquipmentState
lstEquipmentLeftArrowPress	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::lstEquipmentLeftArrowPress(Action *action)$/;"	f	class:OpenXcom::CraftEquipmentState
lstEquipmentLeftArrowRelease	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::lstEquipmentLeftArrowRelease(Action *action)$/;"	f	class:OpenXcom::CraftEquipmentState
lstEquipmentMousePress	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::lstEquipmentMousePress(Action *action)$/;"	f	class:OpenXcom::CraftEquipmentState
lstEquipmentRightArrowClick	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::lstEquipmentRightArrowClick(Action *action)$/;"	f	class:OpenXcom::CraftEquipmentState
lstEquipmentRightArrowPress	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::lstEquipmentRightArrowPress(Action *action)$/;"	f	class:OpenXcom::CraftEquipmentState
lstEquipmentRightArrowRelease	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::lstEquipmentRightArrowRelease(Action *action)$/;"	f	class:OpenXcom::CraftEquipmentState
lstFacilitiesClick	Basescape/BuildFacilitiesState.cpp	/^void BuildFacilitiesState::lstFacilitiesClick(Action *action)$/;"	f	class:OpenXcom::BuildFacilitiesState
lstFacilitiesClick	Basescape/SelectStartFacilityState.cpp	/^void SelectStartFacilityState::lstFacilitiesClick(Action *)$/;"	f	class:OpenXcom::SelectStartFacilityState
lstInfoMouseClick	Basescape/SoldierDiaryPerformanceState.cpp	/^void SoldierDiaryPerformanceState::lstInfoMouseClick(Action *)$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
lstInfoMouseOut	Basescape/SoldierDiaryPerformanceState.cpp	/^void SoldierDiaryPerformanceState::lstInfoMouseOut(Action *)$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
lstInfoMouseOver	Basescape/SoldierDiaryPerformanceState.cpp	/^void SoldierDiaryPerformanceState::lstInfoMouseOver(Action *)$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
lstItemsLeftArrowClick	Basescape/CraftArmorState.cpp	/^void CraftArmorState::lstItemsLeftArrowClick(Action *action)$/;"	f	class:OpenXcom::CraftArmorState
lstItemsLeftArrowClick	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::lstItemsLeftArrowClick(Action *action)$/;"	f	class:OpenXcom::CraftSoldiersState
lstItemsLeftArrowClick	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::lstItemsLeftArrowClick(Action *action)$/;"	f	class:OpenXcom::ManageAlienContainmentState
lstItemsLeftArrowClick	Basescape/PurchaseState.cpp	/^void PurchaseState::lstItemsLeftArrowClick(Action *action)$/;"	f	class:OpenXcom::PurchaseState
lstItemsLeftArrowClick	Basescape/SellState.cpp	/^void SellState::lstItemsLeftArrowClick(Action *action)$/;"	f	class:OpenXcom::SellState
lstItemsLeftArrowClick	Basescape/SoldiersState.cpp	/^void SoldiersState::lstItemsLeftArrowClick(Action *action)$/;"	f	class:OpenXcom::SoldiersState
lstItemsLeftArrowClick	Basescape/TransferItemsState.cpp	/^void TransferItemsState::lstItemsLeftArrowClick(Action *action)$/;"	f	class:OpenXcom::TransferItemsState
lstItemsLeftArrowClick	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::lstItemsLeftArrowClick(Action *action)$/;"	f	class:OpenXcom::AllocatePsiTrainingState
lstItemsLeftArrowClick	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::lstItemsLeftArrowClick(Action *action)$/;"	f	class:OpenXcom::AllocateTrainingState
lstItemsLeftArrowPress	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::lstItemsLeftArrowPress(Action *action)$/;"	f	class:OpenXcom::ManageAlienContainmentState
lstItemsLeftArrowPress	Basescape/PurchaseState.cpp	/^void PurchaseState::lstItemsLeftArrowPress(Action *action)$/;"	f	class:OpenXcom::PurchaseState
lstItemsLeftArrowPress	Basescape/SellState.cpp	/^void SellState::lstItemsLeftArrowPress(Action *action)$/;"	f	class:OpenXcom::SellState
lstItemsLeftArrowPress	Basescape/TransferItemsState.cpp	/^void TransferItemsState::lstItemsLeftArrowPress(Action *action)$/;"	f	class:OpenXcom::TransferItemsState
lstItemsLeftArrowRelease	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::lstItemsLeftArrowRelease(Action *action)$/;"	f	class:OpenXcom::ManageAlienContainmentState
lstItemsLeftArrowRelease	Basescape/PurchaseState.cpp	/^void PurchaseState::lstItemsLeftArrowRelease(Action *action)$/;"	f	class:OpenXcom::PurchaseState
lstItemsLeftArrowRelease	Basescape/SellState.cpp	/^void SellState::lstItemsLeftArrowRelease(Action *action)$/;"	f	class:OpenXcom::SellState
lstItemsLeftArrowRelease	Basescape/TransferItemsState.cpp	/^void TransferItemsState::lstItemsLeftArrowRelease(Action *action)$/;"	f	class:OpenXcom::TransferItemsState
lstItemsMousePress	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::lstItemsMousePress(Action *action)$/;"	f	class:OpenXcom::ManageAlienContainmentState
lstItemsMousePress	Basescape/PurchaseState.cpp	/^void PurchaseState::lstItemsMousePress(Action *action)$/;"	f	class:OpenXcom::PurchaseState
lstItemsMousePress	Basescape/SellState.cpp	/^void SellState::lstItemsMousePress(Action *action)$/;"	f	class:OpenXcom::SellState
lstItemsMousePress	Basescape/TransferItemsState.cpp	/^void TransferItemsState::lstItemsMousePress(Action *action)$/;"	f	class:OpenXcom::TransferItemsState
lstItemsRightArrowClick	Basescape/CraftArmorState.cpp	/^void CraftArmorState::lstItemsRightArrowClick(Action *action)$/;"	f	class:OpenXcom::CraftArmorState
lstItemsRightArrowClick	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::lstItemsRightArrowClick(Action *action)$/;"	f	class:OpenXcom::CraftSoldiersState
lstItemsRightArrowClick	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::lstItemsRightArrowClick(Action *action)$/;"	f	class:OpenXcom::ManageAlienContainmentState
lstItemsRightArrowClick	Basescape/PurchaseState.cpp	/^void PurchaseState::lstItemsRightArrowClick(Action *action)$/;"	f	class:OpenXcom::PurchaseState
lstItemsRightArrowClick	Basescape/SellState.cpp	/^void SellState::lstItemsRightArrowClick(Action *action)$/;"	f	class:OpenXcom::SellState
lstItemsRightArrowClick	Basescape/SoldiersState.cpp	/^void SoldiersState::lstItemsRightArrowClick(Action *action)$/;"	f	class:OpenXcom::SoldiersState
lstItemsRightArrowClick	Basescape/TransferItemsState.cpp	/^void TransferItemsState::lstItemsRightArrowClick(Action *action)$/;"	f	class:OpenXcom::TransferItemsState
lstItemsRightArrowClick	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::lstItemsRightArrowClick(Action *action)$/;"	f	class:OpenXcom::AllocatePsiTrainingState
lstItemsRightArrowClick	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::lstItemsRightArrowClick(Action *action)$/;"	f	class:OpenXcom::AllocateTrainingState
lstItemsRightArrowPress	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::lstItemsRightArrowPress(Action *action)$/;"	f	class:OpenXcom::ManageAlienContainmentState
lstItemsRightArrowPress	Basescape/PurchaseState.cpp	/^void PurchaseState::lstItemsRightArrowPress(Action *action)$/;"	f	class:OpenXcom::PurchaseState
lstItemsRightArrowPress	Basescape/SellState.cpp	/^void SellState::lstItemsRightArrowPress(Action *action)$/;"	f	class:OpenXcom::SellState
lstItemsRightArrowPress	Basescape/TransferItemsState.cpp	/^void TransferItemsState::lstItemsRightArrowPress(Action *action)$/;"	f	class:OpenXcom::TransferItemsState
lstItemsRightArrowRelease	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::lstItemsRightArrowRelease(Action *action)$/;"	f	class:OpenXcom::ManageAlienContainmentState
lstItemsRightArrowRelease	Basescape/PurchaseState.cpp	/^void PurchaseState::lstItemsRightArrowRelease(Action *action)$/;"	f	class:OpenXcom::PurchaseState
lstItemsRightArrowRelease	Basescape/SellState.cpp	/^void SellState::lstItemsRightArrowRelease(Action *action)$/;"	f	class:OpenXcom::SellState
lstItemsRightArrowRelease	Basescape/TransferItemsState.cpp	/^void TransferItemsState::lstItemsRightArrowRelease(Action *action)$/;"	f	class:OpenXcom::TransferItemsState
lstLayoutClick	Battlescape/InventoryLoadState.cpp	/^void InventoryLoadState::lstLayoutClick(Action *)$/;"	f	class:OpenXcom::InventoryLoadState
lstLayoutPress	Battlescape/InventorySaveState.cpp	/^void InventorySaveState::lstLayoutPress(Action *action)$/;"	f	class:OpenXcom::InventorySaveState
lstLoadoutClick	Basescape/CraftEquipmentLoadState.cpp	/^void CraftEquipmentLoadState::lstLoadoutClick(Action *)$/;"	f	class:OpenXcom::CraftEquipmentLoadState
lstLoadoutPress	Basescape/CraftEquipmentSaveState.cpp	/^void CraftEquipmentSaveState::lstLoadoutPress(Action *action)$/;"	f	class:OpenXcom::CraftEquipmentSaveState
lstManufactureClickLeft	Basescape/ManufactureState.cpp	/^void ManufactureState::lstManufactureClickLeft(Action *)$/;"	f	class:OpenXcom::ManufactureState
lstManufactureClickMiddle	Basescape/ManufactureState.cpp	/^void ManufactureState::lstManufactureClickMiddle(Action *)$/;"	f	class:OpenXcom::ManufactureState
lstManufactureMousePress	Basescape/ManufactureState.cpp	/^void ManufactureState::lstManufactureMousePress(Action *action)$/;"	f	class:OpenXcom::ManufactureState
lstModsClick	Menu/ModListState.cpp	/^void ModListState::lstModsClick(Action *action)$/;"	f	class:OpenXcom::ModListState
lstModsHover	Menu/ModListState.cpp	/^void ModListState::lstModsHover(Action *)$/;"	f	class:OpenXcom::ModListState
lstModsLeftArrowClick	Menu/ModListState.cpp	/^void ModListState::lstModsLeftArrowClick(Action *action)$/;"	f	class:OpenXcom::ModListState
lstModsMousePress	Menu/ModListState.cpp	/^void ModListState::lstModsMousePress(Action *action)$/;"	f	class:OpenXcom::ModListState
lstModsRefresh	Menu/ModListState.cpp	/^void ModListState::lstModsRefresh(size_t scrollLoc)$/;"	f	class:OpenXcom::ModListState
lstModsRightArrowClick	Menu/ModListState.cpp	/^void ModListState::lstModsRightArrowClick(Action *action)$/;"	f	class:OpenXcom::ModListState
lstNotesPress	Menu/NotesState.cpp	/^void NotesState::lstNotesPress(Action* action)$/;"	f	class:OpenXcom::NotesState
lstObjectsLeftClick	Geoscape/UfoTrackerState.cpp	/^void UfoTrackerState::lstObjectsLeftClick(Action *)$/;"	f	class:OpenXcom::UfoTrackerState
lstObjectsMiddleClick	Geoscape/UfoTrackerState.cpp	/^void UfoTrackerState::lstObjectsMiddleClick(Action *)$/;"	f	class:OpenXcom::UfoTrackerState
lstObjectsRightClick	Geoscape/UfoTrackerState.cpp	/^void UfoTrackerState::lstObjectsRightClick(Action *)$/;"	f	class:OpenXcom::UfoTrackerState
lstOptionsClick	Menu/OptionsAdvancedState.cpp	/^void OptionsAdvancedState::lstOptionsClick(Action *action)$/;"	f	class:OpenXcom::OptionsAdvancedState
lstOptionsMouseOut	Menu/OptionsAdvancedState.cpp	/^void OptionsAdvancedState::lstOptionsMouseOut(Action *)$/;"	f	class:OpenXcom::OptionsAdvancedState
lstOptionsMouseOver	Menu/OptionsAdvancedState.cpp	/^void OptionsAdvancedState::lstOptionsMouseOver(Action *)$/;"	f	class:OpenXcom::OptionsAdvancedState
lstPilotClick	Basescape/CraftPilotSelectState.cpp	/^void CraftPilotSelectState::lstPilotClick(Action *)$/;"	f	class:OpenXcom::CraftPilotSelectState
lstProdClickLeft	Basescape/NewManufactureListState.cpp	/^void NewManufactureListState::lstProdClickLeft(Action *)$/;"	f	class:OpenXcom::NewManufactureListState
lstProdClickMiddle	Basescape/NewManufactureListState.cpp	/^void NewManufactureListState::lstProdClickMiddle(Action *)$/;"	f	class:OpenXcom::NewManufactureListState
lstProdClickRight	Basescape/NewManufactureListState.cpp	/^void NewManufactureListState::lstProdClickRight(Action *)$/;"	f	class:OpenXcom::NewManufactureListState
lstResearchMousePress	Basescape/ResearchState.cpp	/^void ResearchState::lstResearchMousePress(Action *action)$/;"	f	class:OpenXcom::ResearchState
lstSavesMouseOut	Menu/ListGamesState.cpp	/^void ListGamesState::lstSavesMouseOut(Action *)$/;"	f	class:OpenXcom::ListGamesState
lstSavesMouseOver	Menu/ListGamesState.cpp	/^void ListGamesState::lstSavesMouseOver(Action *)$/;"	f	class:OpenXcom::ListGamesState
lstSavesPress	Menu/ListGamesState.cpp	/^void ListGamesState::lstSavesPress(Action *action)$/;"	f	class:OpenXcom::ListGamesState
lstSavesPress	Menu/ListLoadState.cpp	/^void ListLoadState::lstSavesPress(Action *action)$/;"	f	class:OpenXcom::ListLoadState
lstSavesPress	Menu/ListSaveState.cpp	/^void ListSaveState::lstSavesPress(Action *action)$/;"	f	class:OpenXcom::ListSaveState
lstSelectClick	Menu/NewBattleState.cpp	/^void NewBattleState::lstSelectClick(Action *action)$/;"	f	class:OpenXcom::NewBattleState
lstSelectionClick	Ufopaedia/UfopaediaSelectState.cpp	/^	void UfopaediaSelectState::lstSelectionClick(Action *)$/;"	f	class:OpenXcom::UfopaediaSelectState
lstSelectionClickRight	Ufopaedia/UfopaediaSelectState.cpp	/^	void UfopaediaSelectState::lstSelectionClickRight(Action *)$/;"	f	class:OpenXcom::UfopaediaSelectState
lstSoldiersClick	Basescape/CraftArmorState.cpp	/^void CraftArmorState::lstSoldiersClick(Action *action)$/;"	f	class:OpenXcom::CraftArmorState
lstSoldiersClick	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::lstSoldiersClick(Action *action)$/;"	f	class:OpenXcom::CraftSoldiersState
lstSoldiersClick	Basescape/SoldierMemorialState.cpp	/^void SoldierMemorialState::lstSoldiersClick(Action *)$/;"	f	class:OpenXcom::SoldierMemorialState
lstSoldiersClick	Basescape/SoldiersState.cpp	/^void SoldiersState::lstSoldiersClick(Action *action)$/;"	f	class:OpenXcom::SoldiersState
lstSoldiersClick	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::lstSoldiersClick(Action *action)$/;"	f	class:OpenXcom::AllocatePsiTrainingState
lstSoldiersClick	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::lstSoldiersClick(Action *action)$/;"	f	class:OpenXcom::AllocateTrainingState
lstSoldiersMouseClick	Battlescape/CommendationLateState.cpp	/^void CommendationLateState::lstSoldiersMouseClick(Action *)$/;"	f	class:OpenXcom::CommendationLateState
lstSoldiersMouseClick	Battlescape/CommendationState.cpp	/^void CommendationState::lstSoldiersMouseClick(Action *)$/;"	f	class:OpenXcom::CommendationState
lstSoldiersMousePress	Basescape/CraftArmorState.cpp	/^void CraftArmorState::lstSoldiersMousePress(Action *action)$/;"	f	class:OpenXcom::CraftArmorState
lstSoldiersMousePress	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::lstSoldiersMousePress(Action *action)$/;"	f	class:OpenXcom::CraftSoldiersState
lstSoldiersMousePress	Basescape/SoldiersState.cpp	/^void SoldiersState::lstSoldiersMousePress(Action *action)$/;"	f	class:OpenXcom::SoldiersState
lstSoldiersMousePress	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::lstSoldiersMousePress(Action *action)$/;"	f	class:OpenXcom::AllocatePsiTrainingState
lstSoldiersMousePress	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::lstSoldiersMousePress(Action *action)$/;"	f	class:OpenXcom::AllocateTrainingState
lstSummaryClick	Geoscape/ProductionCompleteState.cpp	/^void ProductionCompleteState::lstSummaryClick(Action *)$/;"	f	class:OpenXcom::ProductionCompleteState
lstTrackClick	Geoscape/SelectMusicTrackState.cpp	/^void SelectMusicTrackState::lstTrackClick(Action *)$/;"	f	class:OpenXcom::SelectMusicTrackState
lstTransformationsClick	Basescape/SoldierTransformationListState.cpp	/^void SoldierTransformationListState::lstTransformationsClick(Action *action)$/;"	f	class:OpenXcom::SoldierTransformationListState
lstWeaponsClick	Basescape/CraftWeaponsState.cpp	/^void CraftWeaponsState::lstWeaponsClick(Action *)$/;"	f	class:OpenXcom::CraftWeaponsState
lstWeaponsMiddleClick	Basescape/CraftWeaponsState.cpp	/^void CraftWeaponsState::lstWeaponsMiddleClick(Action *)$/;"	f	class:OpenXcom::CraftWeaponsState
luminanceWeight	Engine/Scalers/config.h	/^    double luminanceWeight;$/;"	m	struct:xbrz::ScalerCfg
m	Engine/Scalers/xbrz.cpp	/^    \/**\/m, n, o, p;$/;"	m	struct:__anon10::Kernel_4x4	file:
m	Menu/VideoState.cpp	/^	Music *m;$/;"	m	struct:OpenXcom::AudioSequence	file:
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
makeOld	Savegame/SoldierDiary.cpp	/^void SoldierCommendations::makeOld()$/;"	f	class:OpenXcom::SoldierCommendations
makePixel	Engine/Scalers/xbrz.cpp	/^inline uint32_t makePixel(                 unsigned char r, unsigned char g, unsigned char b) { return             (r << 16) | (g << 8) | b; }$/;"	f	namespace:__anon10
makePixel	Engine/Scalers/xbrz.cpp	/^inline uint32_t makePixel(unsigned char a, unsigned char r, unsigned char g, unsigned char b) { return (a << 24) | (r << 16) | (g << 8) | b; }$/;"	f	namespace:__anon10
makeSoldierString	Battlescape/DebriefingState.cpp	/^std::string DebriefingState::makeSoldierString(int stat)$/;"	f	class:OpenXcom::DebriefingState
makeTooltip	Menu/ModListState.cpp	/^std::string ModListState::makeTooltip(const ModInfo &modInfo)$/;"	f	class:OpenXcom::ModListState
makeTurnUnique	Savegame/BattleUnitStatistics.h	/^	int makeTurnUnique()$/;"	f	struct:OpenXcom::BattleUnitKills
makeVideoFlags	Engine/Screen.cpp	/^void Screen::makeVideoFlags()$/;"	f	class:OpenXcom::Screen
makeVisibleScript	Savegame/BattleUnit.cpp	/^void makeVisibleScript(BattleUnit *bu)$/;"	f	namespace:OpenXcom::__anon36
mana	Mod/Unit.h	/^	Type tu, stamina, health, bravery, reactions, firing, throwing, strength, psiStrength, psiSkill, melee, mana;$/;"	m	struct:OpenXcom::UnitStats
manaStat	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::manaStat(Game* game, Soldier* s)$/;"	f	class:OpenXcom
manaStatBase	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::manaStatBase(Game* game, Soldier* s)$/;"	f	class:OpenXcom
manaStatPlus	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::manaStatPlus(Game* game, Soldier* s)$/;"	f	class:OpenXcom
manageCommendations	Savegame/SoldierDiary.cpp	/^bool SoldierDiary::manageCommendations(Mod *mod, std::vector<MissionStatistics*> *missionStatistics)$/;"	f	class:OpenXcom::SoldierDiary
mapArea	Battlescape/TileEngine.cpp	/^MapSubset mapArea(Position position, int radius)$/;"	f	namespace:OpenXcom::__anon45
mapAreaExpand	Battlescape/TileEngine.cpp	/^MapSubset mapAreaExpand(MapSubset gs, int radius)$/;"	f	namespace:OpenXcom::__anon45
mapBlockFilterType	Mod/AlienDeployment.h	/^	MapBlockFilterType mapBlockFilterType = MFT_BY_BOTH_UNION;$/;"	m	struct:OpenXcom::ReinforcementsData
mapClick	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::mapClick(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
mapExtResources	Engine/FileMap.cpp	/^static bool mapExtResources(ModRecord *mrec, const std::string& basename, bool embeddedOnly) {$/;"	f	namespace:OpenXcom::FileMap
mapIn	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::mapIn(Action *)$/;"	f	class:OpenXcom::BattlescapeState
mapOver	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::mapOver(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
mapPlainDir	Engine/FileMap.cpp	/^	bool mapPlainDir(const std::string& dirpath, bool ignore_ruls = false) {$/;"	f	struct:OpenXcom::FileMap::VFSLayer
mapPress	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::mapPress(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
mapZip	Engine/FileMap.cpp	/^	bool mapZip(mz_zip_archive *zip, const std::string& zippath, const std::string& prefix, bool ignore_ruls = false) {$/;"	f	struct:OpenXcom::FileMap::VFSLayer
mapZipFile	Engine/FileMap.cpp	/^	bool mapZipFile(const std::string& zippath, const std::string& prefix, bool ignore_ruls = false) {$/;"	f	struct:OpenXcom::FileMap::VFSLayer
mapZipFileRW	Engine/FileMap.cpp	/^	bool mapZipFileRW(SDL_RWops *rwops, const std::string& zippath, const std::string& prefix, bool ignore_ruls = false) {$/;"	f	struct:OpenXcom::FileMap::VFSLayer
mapZippedMod	Engine/FileMap.cpp	/^static void mapZippedMod(mz_zip_archive *zip, const std::string& zipfname, const std::string& prefix) {$/;"	f	namespace:OpenXcom::FileMap
map_common	Engine/FileMap.cpp	/^	void map_common(bool embeddedOnly) {$/;"	f	struct:OpenXcom::FileMap::VFS
mapped	Engine/FileMap.cpp	/^	bool mapped;		 				\/\/ once mapped all this is immutable$/;"	m	struct:OpenXcom::FileMap::VFSLayer	file:
markAsReinforcementsBlock	Mod/MapScript.h	/^	bool markAsReinforcementsBlock() const { return _markAsReinforcementsBlock; }$/;"	f	class:OpenXcom::MapScript
markAsResummonedFakeCivilian	Savegame/BattleUnit.h	/^	void markAsResummonedFakeCivilian() { _resummonedFakeCivilian = true; _status = STATUS_IGNORE_ME; }$/;"	f	class:OpenXcom::BattleUnit
markAsVIP	Savegame/BattleUnit.h	/^	void markAsVIP() { _vip = true; }$/;"	f	class:OpenXcom::BattleUnit
markerId	Savegame/MissionStatistics.h	/^	int markerId;$/;"	m	struct:OpenXcom::MissionStatistics
markerName	Savegame/MissionStatistics.h	/^	std::string markerName;$/;"	m	struct:OpenXcom::MissionStatistics
martyr	Savegame/BattleUnitStatistics.h	/^	int martyr;                          \/\/\/< Tracks how many kills the soldier landed on the turn of his death$/;"	m	struct:OpenXcom::BattleUnitStatistics
matchById	Savegame/AlienMission.cpp	/^	matchById(int id, std::string type) : _id(id), _type(type) { \/* Empty by design. *\/ }$/;"	f	class:OpenXcom::matchById
matchById	Savegame/AlienMission.cpp	/^class matchById$/;"	c	namespace:OpenXcom	file:
matchMissionID	Savegame/Ufo.cpp	/^	matchMissionID(int id) : _id(id) { \/* Empty by design. *\/ }$/;"	f	class:OpenXcom::matchMissionID
matchMissionID	Savegame/Ufo.cpp	/^class matchMissionID$/;"	c	namespace:OpenXcom	file:
matchPalette	Menu/TestState.cpp	/^int TestState::matchPalette(Surface *image, int index, Palette *test)$/;"	f	class:OpenXcom::TestState
max	Mod/Unit.h	/^	static UnitStats max(const UnitStats& a, const UnitStats& b)$/;"	f	struct:OpenXcom::UnitStats
maxDifficulty	Mod/AlienDeployment.h	/^	int maxDifficulty = 4;$/;"	m	struct:OpenXcom::ReinforcementsData
maxDistanceFromBorders	Mod/AlienDeployment.h	/^	int maxDistanceFromBorders = 0;$/;"	m	struct:OpenXcom::ReinforcementsData
maxFrameSkip	Engine/Options.inc.h	/^OPT int displayWidth, displayHeight, maxFrameSkip, baseXResolution, baseYResolution, baseXGeoscape, baseYGeoscape, baseXBattlescape, baseYBattlescape,$/;"	v
maxFrameSkip	Engine/Timer.cpp	/^int Timer::maxFrameSkip = 8; \/\/ this is a pretty good default at 60FPS.$/;"	m	class:OpenXcom::Timer	file:
maxFrameSkip	Engine/Timer.h	/^	static int maxFrameSkip;$/;"	m	class:OpenXcom::Timer
maxRepeats	Mod/MapScript.h	/^	int maxRepeats;$/;"	m	struct:OpenXcom::VerticalLevel
maxRuns	Mod/AlienDeployment.h	/^	int maxRuns = -1;$/;"	m	struct:OpenXcom::ReinforcementsData
maxTolerance	Menu/TestState.h	/^	int maxTolerance;$/;"	m	struct:OpenXcom::PaletteTestMetadata
maxTurn	Mod/AlienDeployment.h	/^	int maxTurn = -1;$/;"	m	struct:OpenXcom::ReinforcementsData
max_ch	Engine/Adlib/fmopl.h	/^	int	max_ch;			\/* maximum channel                   *\/$/;"	m	struct:fm_opl_f
max_x	Engine/ShaderDraw.h	/^inline helper::ShaderBase<Pixel> ShaderSurface(Pixel(&s)[Size], int max_x, int max_y)$/;"	m	namespace:OpenXcom
maxbitlen	lodepng.cpp	/^  unsigned maxbitlen; \/*maximum number of bits a single code can get*\/$/;"	m	struct:HuffmanTree	file:
maximizeInfoScreens	Engine/Options.inc.h	/^	cursorInBlackBandsInFullscreen, cursorInBlackBandsInWindow, cursorInBlackBandsInBorderlessWindow, maximizeInfoScreens, musicAlwaysLoop, StereoSound, verboseLogging, soldierDiaries, touchEnabled,$/;"	v
maximumDistance	Geoscape/DogfightState.cpp	/^void DogfightState::maximumDistance()$/;"	f	class:OpenXcom::DogfightState
md5	md5.cpp	/^std::string md5(const std::string str)$/;"	f
medQty	Mod/AlienDeployment.h	/^	int lowQty, medQty, highQty, dQty, extraQty;$/;"	m	struct:OpenXcom::DeploymentData
medikitBattleActionImpl	Savegame/BattleUnit.cpp	/^void medikitBattleActionImpl(BindBase& b)$/;"	f	namespace:OpenXcom::__anon37
medikitRemoveIfEmpty	Battlescape/TileEngine.cpp	/^void TileEngine::medikitRemoveIfEmpty(BattleAction *action)$/;"	f	class:OpenXcom::TileEngine
medikitUse	Battlescape/TileEngine.cpp	/^bool TileEngine::medikitUse(BattleAction *action, BattleUnit *target, BattleMediKitAction originalMedikitAction, UnitBodyPart bodyPart)$/;"	f	class:OpenXcom::TileEngine
meetingPoint	Engine/Options.inc.h	/^	allowBuildingQueue, showFundsOnGeoscape, psiStrengthEval, allowPsiStrengthImprovement, fieldPromotions, meetingPoint;$/;"	v
melee	Mod/Unit.h	/^	Type tu, stamina, health, bravery, reactions, firing, throwing, strength, psiStrength, psiSkill, melee, mana;$/;"	m	struct:OpenXcom::UnitStats
meleeAction	Battlescape/AIModule.cpp	/^void AIModule::meleeAction()$/;"	f	class:OpenXcom::AIModule
meleeActionLeeroy	Battlescape/AIModule.cpp	/^void AIModule::meleeActionLeeroy(bool canRun)$/;"	f	class:OpenXcom::AIModule
meleeAttack	Battlescape/AIModule.cpp	/^void AIModule::meleeAttack()$/;"	f	class:OpenXcom::AIModule
meleeAttack	Battlescape/TileEngine.cpp	/^bool TileEngine::meleeAttack(BattleActionAttack attack, BattleUnit *victim, int terrainMeleeTilePart)$/;"	f	class:OpenXcom::TileEngine
meleeAttackCalculate	Battlescape/TileEngine.cpp	/^int TileEngine::meleeAttackCalculate(BattleActionAttack::ReadOnly attack, const BattleUnit *victim)$/;"	f	class:OpenXcom::TileEngine
memory	lodepng.cpp	/^  BPMNode* memory;$/;"	m	struct:BPMLists	file:
memsize	lodepng.cpp	/^  unsigned memsize;$/;"	m	struct:BPMLists	file:
mercyCross	Savegame/BattleUnitStatistics.h	/^	bool mercyCross;                     \/\/\/< Tracks if a soldier stunned every alien$/;"	m	struct:OpenXcom::BattleUnitStatistics
merge	Mod/Unit.h	/^	void merge(const UnitStats& stats) { tu = (stats.tu ? stats.tu : tu); stamina = (stats.stamina ? stats.stamina : stamina); health = (stats.health ? stats.health : health); bravery = (stats.bravery ? stats.bravery : bravery); reactions = (stats.reactions ? stats.reactions : reactions); firing = (stats.firing ? stats.firing : firing); throwing = (stats.throwing ? stats.throwing : throwing); strength = (stats.strength ? stats.strength : strength); psiStrength = (stats.psiStrength ? stats.psiStrength : psiStrength); psiSkill = (stats.psiSkill ? stats.psiSkill : psiSkill); melee = (stats.melee ? stats.melee : melee); mana = (stats.mana ? stats.mana : mana); };$/;"	f	struct:OpenXcom::UnitStats
message	Mod/RuleEnviroEffects.h	/^	std::string message;$/;"	m	struct:OpenXcom::EnvironmentalCondition
min	Mod/Unit.h	/^	static UnitStats min(const UnitStats& a, const UnitStats& b)$/;"	f	struct:OpenXcom::UnitStats
minDifficulty	Mod/AlienDeployment.h	/^	int minDifficulty = 0;$/;"	m	struct:OpenXcom::ReinforcementsData
minDistanceFromXcomUnits	Mod/AlienDeployment.h	/^	int minDistanceFromXcomUnits = 0;$/;"	m	struct:OpenXcom::ReinforcementsData
minTurn	Mod/AlienDeployment.h	/^	int minTurn = 0;$/;"	m	struct:OpenXcom::ReinforcementsData
miniClick	Basescape/BaseInfoState.cpp	/^void BaseInfoState::miniClick(Action *)$/;"	f	class:OpenXcom::BaseInfoState
miniLeftClick	Basescape/BasescapeState.cpp	/^void BasescapeState::miniLeftClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
miniRightClick	Basescape/BasescapeState.cpp	/^void BasescapeState::miniRightClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
minimizedDogfightsCount	Geoscape/GeoscapeState.cpp	/^int GeoscapeState::minimizedDogfightsCount()$/;"	f	class:OpenXcom::GeoscapeState
minimumDistance	Geoscape/DogfightState.cpp	/^void DogfightState::minimumDistance()$/;"	f	class:OpenXcom::DogfightState
minmatch	lodepng.h	/^  unsigned minmatch; \/*mininum lz77 length. 3 is normally best, 6 can be better for some PNGs. Default: 0*\/$/;"	m	struct:LodePNGCompressSettings
minute	lodepng.h	/^  unsigned minute;  \/*0-59*\/$/;"	m	struct:LodePNGTime
mission	Savegame/BattleUnitStatistics.h	/^	int mission, turn, id;$/;"	m	struct:OpenXcom::BattleUnitKills
missionComplete	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::missionComplete()$/;"	f	class:OpenXcom::BattlescapeGame
missionCustomDeploy	Mod/RuleUfo.h	/^	std::string craftCustomDeploy, missionCustomDeploy;$/;"	m	struct:OpenXcom::RuleUfoStats
mixed	Mod/MapBlock.h	/^	bool mixed;$/;"	m	struct:OpenXcom::RandomizedItems
mod	Menu/VideoState.cpp	/^	Mod *mod;$/;"	m	struct:OpenXcom::AudioSequence	file:
modInfo	Engine/FileMap.cpp	/^	ModInfo modInfo;$/;"	m	struct:OpenXcom::FileMap::ModRecord	file:
modResources	Mod/Mod.cpp	/^void Mod::modResources()$/;"	f	class:OpenXcom::Mod
mod_range	Engine/ShaderDrawHelper.h	/^	inline void mod_range(GraphSubset& r)$/;"	f	struct:OpenXcom::helper::controler_base
mod_range	Engine/ShaderDrawHelper.h	/^	inline void mod_range(GraphSubset&)$/;"	f	struct:OpenXcom::helper::controler
mod_range	Engine/ShaderRepeat.h	/^	inline void mod_range(GraphSubset&)$/;"	f	struct:OpenXcom::helper::controler
mod_x	Engine/ShaderDrawHelper.h	/^	inline void mod_x(int&, int&)$/;"	f	struct:OpenXcom::helper::controler
mod_x	Engine/ShaderDrawHelper.h	/^	inline void mod_x(int&, int&)$/;"	f	struct:OpenXcom::helper::controler_base
mod_x	Engine/ShaderRepeat.h	/^	inline void mod_x(int&, int&)$/;"	f	struct:OpenXcom::helper::controler
mod_y	Engine/ShaderDrawHelper.h	/^	inline void mod_y(int&, int&)$/;"	f	struct:OpenXcom::helper::controler
mod_y	Engine/ShaderDrawHelper.h	/^	inline void mod_y(int&, int&)$/;"	f	struct:OpenXcom::helper::controler_base
mod_y	Engine/ShaderRepeat.h	/^	inline void mod_y(int&, int&)$/;"	f	struct:OpenXcom::helper::controler
mode	Engine/Adlib/fmopl.h	/^	UINT32 mode;		\/* Reg.08 : CSM , notesel,etc.       *\/$/;"	m	struct:fm_opl_f
modifyData	Mod/MCDPatch.cpp	/^void MCDPatch::modifyData(MapDataSet *dataSet) const$/;"	f	class:OpenXcom::MCDPatch
mods	Engine/FileMap.cpp	/^	std::vector<ModRecord *> mods;$/;"	m	struct:OpenXcom::FileMap::VFS	file:
mods	Engine/Options.inc.h	/^OPT std::vector< std::pair<std::string, bool> > mods; \/\/ ordered list of available mods (lowest priority to highest) and whether they are active$/;"	v
mods	Savegame/SavedGame.h	/^	std::vector<std::string> mods;$/;"	m	struct:OpenXcom::SaveInfo
month	lodepng.h	/^  unsigned month;   \/*1-12*\/$/;"	m	struct:LodePNGTime
monthlyFunding	Savegame/SavedGame.cpp	/^void SavedGame::monthlyFunding()$/;"	f	class:OpenXcom::SavedGame
moraleChange	Savegame/BattleUnit.cpp	/^void BattleUnit::moraleChange(int change)$/;"	f	class:OpenXcom::BattleUnit
more	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::more()$/;"	f	class:OpenXcom::ResearchInfoState
moreByValue	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::moreByValue(int change)$/;"	f	class:OpenXcom::ResearchInfoState
moreClick	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::moreClick(Action *action)$/;"	f	class:OpenXcom::ResearchInfoState
moreEngineer	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::moreEngineer(int change)$/;"	f	class:OpenXcom::ManufactureInfoState
moreEngineerClick	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::moreEngineerClick(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
moreEngineerPress	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::moreEngineerPress(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
moreEngineerRelease	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::moreEngineerRelease(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
morePress	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::morePress(Action *action)$/;"	f	class:OpenXcom::ResearchInfoState
moreRelease	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::moreRelease(Action *action)$/;"	f	class:OpenXcom::ResearchInfoState
moreUnit	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::moreUnit(int change)$/;"	f	class:OpenXcom::ManufactureInfoState
moreUnitClick	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::moreUnitClick(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
moreUnitPress	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::moreUnitPress(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
moreUnitRelease	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::moreUnitRelease(Action *action)$/;"	f	class:OpenXcom::ManufactureInfoState
mouseClick	Battlescape/AlienInventory.cpp	/^void AlienInventory::mouseClick(Action *action, State *state)$/;"	f	class:OpenXcom::AlienInventory
mouseClick	Battlescape/Inventory.cpp	/^void Inventory::mouseClick(Action *action, State *state)$/;"	f	class:OpenXcom::Inventory
mouseClick	Battlescape/MedikitView.cpp	/^void MedikitView::mouseClick (Action *action, State *)$/;"	f	class:OpenXcom::MedikitView
mouseClick	Battlescape/MiniMapView.cpp	/^void MiniMapView::mouseClick(Action *action, State *state)$/;"	f	class:OpenXcom::MiniMapView
mouseClick	Battlescape/ScannerView.cpp	/^void ScannerView::mouseClick (Action *, State *)$/;"	f	class:OpenXcom::ScannerView
mouseClick	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::mouseClick(Action *action, State *state)$/;"	f	class:OpenXcom::InteractiveSurface
mouseClick	Geoscape/Globe.cpp	/^void Globe::mouseClick(Action *action, State *state)$/;"	f	class:OpenXcom::Globe
mouseClick	Interface/ArrowButton.cpp	/^void ArrowButton::mouseClick(Action *action, State *state)$/;"	f	class:OpenXcom::ArrowButton
mouseClick	Interface/TextList.cpp	/^void TextList::mouseClick(Action *action, State *state)$/;"	f	class:OpenXcom::TextList
mouseIn	Battlescape/ActionMenuItem.cpp	/^void ActionMenuItem::mouseIn(Action *action, State *state)$/;"	f	class:OpenXcom::ActionMenuItem
mouseIn	Battlescape/MiniMapView.cpp	/^void MiniMapView::mouseIn(Action *action, State *state)$/;"	f	class:OpenXcom::MiniMapView
mouseIn	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::mouseIn(Action *action, State *state)$/;"	f	class:OpenXcom::InteractiveSurface
mouseInIcons	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::mouseInIcons(Action *)$/;"	f	class:OpenXcom::BattlescapeState
mouseOut	Basescape/BaseView.cpp	/^void BaseView::mouseOut(Action *action, State *state)$/;"	f	class:OpenXcom::BaseView
mouseOut	Battlescape/ActionMenuItem.cpp	/^void ActionMenuItem::mouseOut(Action *action, State *state)$/;"	f	class:OpenXcom::ActionMenuItem
mouseOut	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::mouseOut(Action *action, State *state)$/;"	f	class:OpenXcom::InteractiveSurface
mouseOut	Interface/TextList.cpp	/^void TextList::mouseOut(Action *action, State *state)$/;"	f	class:OpenXcom::TextList
mouseOutIcons	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::mouseOutIcons(Action *)$/;"	f	class:OpenXcom::BattlescapeState
mouseOver	Basescape/BaseView.cpp	/^void BaseView::mouseOver(Action *action, State *state)$/;"	f	class:OpenXcom::BaseView
mouseOver	Basescape/MiniBaseView.cpp	/^void MiniBaseView::mouseOver(Action *action, State *state)$/;"	f	class:OpenXcom::MiniBaseView
mouseOver	Battlescape/Camera.cpp	/^void Camera::mouseOver(Action *action, State *)$/;"	f	class:OpenXcom::Camera
mouseOver	Battlescape/Inventory.cpp	/^void Inventory::mouseOver(Action *action, State *state)$/;"	f	class:OpenXcom::Inventory
mouseOver	Battlescape/Map.cpp	/^void Map::mouseOver(Action *action, State *state)$/;"	f	class:OpenXcom::Map
mouseOver	Battlescape/MiniMapView.cpp	/^void MiniMapView::mouseOver(Action *action, State *state)$/;"	f	class:OpenXcom::MiniMapView
mouseOver	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::mouseOver(Action *action, State *state)$/;"	f	class:OpenXcom::InteractiveSurface
mouseOver	Geoscape/Globe.cpp	/^void Globe::mouseOver(Action *action, State *state)$/;"	f	class:OpenXcom::Globe
mouseOver	Interface/TextList.cpp	/^void TextList::mouseOver(Action *action, State *state)$/;"	f	class:OpenXcom::TextList
mousePress	Battlescape/Camera.cpp	/^void Camera::mousePress(Action *action, State *)$/;"	f	class:OpenXcom::Camera
mousePress	Battlescape/Map.cpp	/^void Map::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::Map
mousePress	Battlescape/MiniMapView.cpp	/^void MiniMapView::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::MiniMapView
mousePress	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::InteractiveSurface
mousePress	Geoscape/Globe.cpp	/^void Globe::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::Globe
mousePress	Interface/ArrowButton.cpp	/^void ArrowButton::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::ArrowButton
mousePress	Interface/BattlescapeButton.cpp	/^void BattlescapeButton::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::BattlescapeButton
mousePress	Interface/ImageButton.cpp	/^void ImageButton::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::ImageButton
mousePress	Interface/ScrollBar.cpp	/^void ScrollBar::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::ScrollBar
mousePress	Interface/Slider.cpp	/^void Slider::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::Slider
mousePress	Interface/Text.cpp	/^void Text::mousePress(Action* action, State* state)$/;"	f	class:OpenXcom::Text
mousePress	Interface/TextButton.cpp	/^void TextButton::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::TextButton
mousePress	Interface/TextEdit.cpp	/^void TextEdit::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::TextEdit
mousePress	Interface/TextList.cpp	/^void TextList::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::TextList
mousePress	Interface/ToggleTextButton.cpp	/^void ToggleTextButton::mousePress(Action *action, State *state)$/;"	f	class:OpenXcom::ToggleTextButton
mouseRelease	Battlescape/Camera.cpp	/^void Camera::mouseRelease(Action *action, State *)$/;"	f	class:OpenXcom::Camera
mouseRelease	Battlescape/Map.cpp	/^void Map::mouseRelease(Action *action, State *state)$/;"	f	class:OpenXcom::Map
mouseRelease	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::mouseRelease(Action *action, State *state)$/;"	f	class:OpenXcom::InteractiveSurface
mouseRelease	Geoscape/Globe.cpp	/^void Globe::mouseRelease(Action *action, State *state)$/;"	f	class:OpenXcom::Globe
mouseRelease	Interface/ArrowButton.cpp	/^void ArrowButton::mouseRelease(Action *action, State *state)$/;"	f	class:OpenXcom::ArrowButton
mouseRelease	Interface/BattlescapeButton.cpp	/^void BattlescapeButton::mouseRelease(Action *action, State *state)$/;"	f	class:OpenXcom::BattlescapeButton
mouseRelease	Interface/ImageButton.cpp	/^void ImageButton::mouseRelease(Action *action, State *state)$/;"	f	class:OpenXcom::ImageButton
mouseRelease	Interface/ScrollBar.cpp	/^void ScrollBar::mouseRelease(Action *action, State *state)$/;"	f	class:OpenXcom::ScrollBar
mouseRelease	Interface/Slider.cpp	/^void Slider::mouseRelease(Action *action, State *state)$/;"	f	class:OpenXcom::Slider
mouseRelease	Interface/TextButton.cpp	/^void TextButton::mouseRelease(Action *action, State *state)$/;"	f	class:OpenXcom::TextButton
mouseRelease	Interface/TextList.cpp	/^void TextList::mouseRelease(Action *action, State *state)$/;"	f	class:OpenXcom::TextList
mousewheelSpeed	Engine/Options.inc.h	/^	changeValueByMouseWheel, dragScrollTimeTolerance, dragScrollPixelTolerance, mousewheelSpeed, autosaveFrequency;$/;"	v
move	Battlescape/Projectile.cpp	/^bool Projectile::move()$/;"	f	class:OpenXcom::Projectile
move	Savegame/CraftWeaponProjectile.cpp	/^void CraftWeaponProjectile::move()$/;"	f	class:OpenXcom::CraftWeaponProjectile
move	Savegame/MovingTarget.cpp	/^void MovingTarget::move()$/;"	f	class:OpenXcom::MovingTarget
moveFile	Engine/CrossPlatform.cpp	/^bool moveFile(const std::string &src, const std::string &dest)$/;"	f	namespace:OpenXcom::CrossPlatform
moveItem	Battlescape/Inventory.cpp	/^void Inventory::moveItem(BattleItem *item, RuleInventory *slot, int x, int y)$/;"	f	class:OpenXcom::Inventory
moveLeft	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::moveLeft()$/;"	f	class:OpenXcom::CraftEquipmentState
moveLeftByValue	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::moveLeftByValue(int change)$/;"	f	class:OpenXcom::CraftEquipmentState
moveModDown	Menu/ModListState.cpp	/^void ModListState::moveModDown(Action *action, unsigned int row, bool max)$/;"	f	class:OpenXcom::ModListState
moveModUp	Menu/ModListState.cpp	/^void ModListState::moveModUp(Action *action, unsigned int row, bool max)$/;"	f	class:OpenXcom::ModListState
moveRight	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::moveRight()$/;"	f	class:OpenXcom::CraftEquipmentState
moveRightByValue	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::moveRightByValue(int change, bool suppressErrors)$/;"	f	class:OpenXcom::CraftEquipmentState
moveSoldierDown	Basescape/CraftArmorState.cpp	/^void CraftArmorState::moveSoldierDown(Action *action, unsigned int row, bool max)$/;"	f	class:OpenXcom::CraftArmorState
moveSoldierDown	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::moveSoldierDown(Action *action, unsigned int row, bool max)$/;"	f	class:OpenXcom::CraftSoldiersState
moveSoldierDown	Basescape/SoldiersState.cpp	/^void SoldiersState::moveSoldierDown(Action *action, unsigned int row, bool max)$/;"	f	class:OpenXcom::SoldiersState
moveSoldierDown	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::moveSoldierDown(Action *action, unsigned int row, bool max)$/;"	f	class:OpenXcom::AllocatePsiTrainingState
moveSoldierDown	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::moveSoldierDown(Action *action, unsigned int row, bool max)$/;"	f	class:OpenXcom::AllocateTrainingState
moveSoldierUp	Basescape/CraftArmorState.cpp	/^void CraftArmorState::moveSoldierUp(Action *action, unsigned int row, bool max)$/;"	f	class:OpenXcom::CraftArmorState
moveSoldierUp	Basescape/CraftSoldiersState.cpp	/^void CraftSoldiersState::moveSoldierUp(Action *action, unsigned int row, bool max)$/;"	f	class:OpenXcom::CraftSoldiersState
moveSoldierUp	Basescape/SoldiersState.cpp	/^void SoldiersState::moveSoldierUp(Action *action, unsigned int row, bool max)$/;"	f	class:OpenXcom::SoldiersState
moveSoldierUp	Geoscape/AllocatePsiTrainingState.cpp	/^void AllocatePsiTrainingState::moveSoldierUp(Action *action, unsigned int row, bool max)$/;"	f	class:OpenXcom::AllocatePsiTrainingState
moveSoldierUp	Geoscape/AllocateTrainingState.cpp	/^void AllocateTrainingState::moveSoldierUp(Action *action, unsigned int row, bool max)$/;"	f	class:OpenXcom::AllocateTrainingState
moveToOwner	Savegame/BattleItem.cpp	/^void BattleItem::moveToOwner(BattleUnit *owner)$/;"	f	class:OpenXcom::BattleItem
moveTypesImpl	Savegame/BattleUnit.cpp	/^void moveTypesImpl(BindBase& b)$/;"	f	namespace:OpenXcom::__anon37
moveUpDown	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::moveUpDown(BattleUnit *unit, int dir)$/;"	f	class:OpenXcom::BattlescapeGame
moveWindow	Geoscape/DogfightState.cpp	/^void DogfightState::moveWindow()$/;"	f	class:OpenXcom::DogfightState
mul	Engine/Adlib/fmopl.h	/^	UINT32 mul;		\/* multiple        :ML_TABLE[ML]       *\/$/;"	m	struct:fm_opl_slot
mulAddMod_h	Engine/Script.cpp	/^static inline RetEnum mulAddMod_h(int& reg, const int& mul, const int& add, const int& mod)$/;"	f	namespace:OpenXcom
musFormats	Menu/OptionsAudioState.cpp	/^const std::string OptionsAudioState::musFormats[] = {"Adlib", "?", "WAV", "MOD", "MIDI", "OGG", "MP3", "MP3", "FLAC", "MOD"};$/;"	m	class:OpenXcom::OptionsAudioState	file:
musFormats	Menu/OptionsAudioState.h	/^	static const std::string musFormats[], sndFormats[];$/;"	m	class:OpenXcom::OptionsAudioState
music	Mod/AlienDeployment.h	/^	std::string title, desc, music, background, cutscene;$/;"	m	struct:OpenXcom::BriefingData
musicAlwaysLoop	Engine/Options.inc.h	/^	cursorInBlackBandsInFullscreen, cursorInBlackBandsInWindow, cursorInBlackBandsInBorderlessWindow, maximizeInfoScreens, musicAlwaysLoop, StereoSound, verboseLogging, soldierDiaries, touchEnabled,$/;"	v
musicId	Mod/RuleVideo.h	/^	std::string musicId; \/\/ just the extension-less filename, like "GMWIN"$/;"	m	struct:OpenXcom::SlideshowHeader
musicVolume	Engine/Options.inc.h	/^	soundVolume, musicVolume, uiVolume, audioSampleRate, audioBitDepth, audioChunkSize, pauseMode, windowedModePositionX, windowedModePositionY, FPS, FPSInactive,$/;"	v
mute	Engine/Options.inc.h	/^OPT bool mute, reload, newOpenGL, newScaleFilter, newHQXFilter, newXBRZFilter, newRootWindowedMode, newFullscreen, newAllowResize, newBorderless;$/;"	v
mute	Interface/Window.h	/^	void mute() { _mute = true; }$/;"	f	class:OpenXcom::Window
mz_rwops_read_func	Engine/FileMap.cpp	/^static size_t mz_rwops_read_func(void *vops, mz_uint64 file_ofs, void *pBuf, size_t n) {$/;"	f	file:
mz_zip_reader_end_rwops	Engine/FileMap.cpp	/^static mz_bool mz_zip_reader_end_rwops(mz_zip_archive *pZip) {$/;"	f	file:
mz_zip_reader_init_rwops	Engine/FileMap.cpp	/^static mz_bool mz_zip_reader_init_rwops(mz_zip_archive *pZip, SDL_RWops *rwops) {$/;"	f	file:
mzops_close	Engine/FileMap.cpp	/^int mzops_close(struct SDL_RWops *context) {$/;"	f
n	Engine/Scalers/xbrz.cpp	/^    \/**\/m, n, o, p;$/;"	m	struct:__anon10::Kernel_4x4	file:
name	Basescape/SoldierArmorState.h	/^	std::string name, quantity;$/;"	m	struct:OpenXcom::ArmorItem
name	Basescape/StoresState.h	/^	std::string name;$/;"	m	struct:OpenXcom::StoredItem
name	Battlescape/DebriefingState.h	/^struct RecoveryItem { std::string name; int value; };$/;"	m	struct:OpenXcom::RecoveryItem
name	Engine/ModInfo.cpp	/^	std::string name;$/;"	m	struct:OpenXcom::__anon4::EngineData	file:
name	Engine/Script.h	/^	const char *name;$/;"	m	struct:OpenXcom::ProgPos::ArgName
name	Mod/Mod.h	/^	std::string name;$/;"	m	struct:OpenXcom::ModData
name	Mod/RuleItem.h	/^	std::string name;$/;"	m	struct:OpenXcom::RuleItemAction
name	Mod/RuleRegion.h	/^	std::string name;$/;"	m	struct:OpenXcom::MissionArea
name	Mod/RuleStatBonus.cpp	/^	std::string name;$/;"	m	struct:OpenXcom::__anon24::BonusStatData	file:
name	Mod/Texture.h	/^	std::string name;$/;"	m	struct:OpenXcom::TerrainCriteria
name	Savegame/BattleUnitStatistics.h	/^	std::string name;$/;"	m	struct:OpenXcom::BattleUnitKills
name	Savegame/SaveConverter.h	/^	std::string name, date, time;$/;"	m	struct:OpenXcom::SaveOriginal
name	Savegame/Transfer.h	/^	std::string name;$/;"	m	struct:OpenXcom::TransferRow
nameStat	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::nameStat(Game *game, Soldier *s)$/;"	f	class:OpenXcom
naturalCompare	Engine/Unicode.cpp	/^bool naturalCompare(const std::string &a, const std::string &b)$/;"	f	namespace:OpenXcom::Unicode
nearestNeighborScale	Engine/Scalers/xbrz.cpp	/^void xbrz::nearestNeighborScale(const uint32_t* src, int srcWidth, int srcHeight, int srcPitch,$/;"	f	class:xbrz
nearestNeighborScale	Engine/Scalers/xbrz.h	/^void nearestNeighborScale(const uint32_t* src, int srcWidth, int srcHeight,$/;"	f	namespace:xbrz
needItem	Mod/RuleResearch.cpp	/^bool RuleResearch::needItem() const$/;"	f	class:OpenXcom::RuleResearch
needsAmmoForAction	Savegame/BattleItem.cpp	/^bool BattleItem::needsAmmoForAction(BattleActionType action) const$/;"	f	class:OpenXcom::BattleItem
needsAmmoForSlot	Savegame/BattleItem.cpp	/^bool BattleItem::needsAmmoForSlot(int slot) const$/;"	f	class:OpenXcom::BattleItem
needsCorpseRecovered	Mod/RuleSoldierTransformation.cpp	/^bool RuleSoldierTransformation::needsCorpseRecovered() const$/;"	f	class:OpenXcom::RuleSoldierTransformation
nerfXP	Savegame/BattleUnit.cpp	/^void BattleUnit::nerfXP()$/;"	f	class:OpenXcom::BattleUnit
newAllowResize	Engine/Options.inc.h	/^OPT bool mute, reload, newOpenGL, newScaleFilter, newHQXFilter, newXBRZFilter, newRootWindowedMode, newFullscreen, newAllowResize, newBorderless;$/;"	v
newBattlescapeScale	Engine/Options.inc.h	/^OPT int newDisplayWidth, newDisplayHeight, newBattlescapeScale, newGeoscapeScale, newWindowedModePositionX, newWindowedModePositionY;$/;"	v
newBorderless	Engine/Options.inc.h	/^OPT bool mute, reload, newOpenGL, newScaleFilter, newHQXFilter, newXBRZFilter, newRootWindowedMode, newFullscreen, newAllowResize, newBorderless;$/;"	v
newDisplayHeight	Engine/Options.inc.h	/^OPT int newDisplayWidth, newDisplayHeight, newBattlescapeScale, newGeoscapeScale, newWindowedModePositionX, newWindowedModePositionY;$/;"	v
newDisplayWidth	Engine/Options.inc.h	/^OPT int newDisplayWidth, newDisplayHeight, newBattlescapeScale, newGeoscapeScale, newWindowedModePositionX, newWindowedModePositionY;$/;"	v
newFullscreen	Engine/Options.inc.h	/^OPT bool mute, reload, newOpenGL, newScaleFilter, newHQXFilter, newXBRZFilter, newRootWindowedMode, newFullscreen, newAllowResize, newBorderless;$/;"	v
newGeoscapeScale	Engine/Options.inc.h	/^OPT int newDisplayWidth, newDisplayHeight, newBattlescapeScale, newGeoscapeScale, newWindowedModePositionX, newWindowedModePositionY;$/;"	v
newHQXFilter	Engine/Options.inc.h	/^OPT bool mute, reload, newOpenGL, newScaleFilter, newHQXFilter, newXBRZFilter, newRootWindowedMode, newFullscreen, newAllowResize, newBorderless;$/;"	v
newMonth	Savegame/Country.cpp	/^void Country::newMonth(int xcomTotal, int alienTotal, int pactScore, int averageFunding)$/;"	f	class:OpenXcom::Country
newMonth	Savegame/Region.cpp	/^void Region::newMonth()$/;"	f	class:OpenXcom::Region
newOpenGL	Engine/Options.inc.h	/^OPT bool mute, reload, newOpenGL, newScaleFilter, newHQXFilter, newXBRZFilter, newRootWindowedMode, newFullscreen, newAllowResize, newBorderless;$/;"	v
newOpenGLShader	Engine/Options.inc.h	/^OPT std::string newOpenGLShader;$/;"	v
newRootWindowedMode	Engine/Options.inc.h	/^OPT bool mute, reload, newOpenGL, newScaleFilter, newHQXFilter, newXBRZFilter, newRootWindowedMode, newFullscreen, newAllowResize, newBorderless;$/;"	v
newSave	Mod/Mod.cpp	/^SavedGame *Mod::newSave(GameDifficulty diff) const$/;"	f	class:OpenXcom::Mod
newScaleFilter	Engine/Options.inc.h	/^OPT bool mute, reload, newOpenGL, newScaleFilter, newHQXFilter, newXBRZFilter, newRootWindowedMode, newFullscreen, newAllowResize, newBorderless;$/;"	v
newSeedOnLoad	Engine/Options.inc.h	/^	autosave, allowResize, borderless, debug, debugUi, fpsCounter, newSeedOnLoad, keepAspectRatio, nonSquarePixelRatio,$/;"	v
newTestAttribute	Engine/Scalers/config.h	/^    double newTestAttribute; \/\/unused; test new parameters$/;"	m	struct:xbrz::ScalerCfg
newTurnUpdateScripts	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::newTurnUpdateScripts()$/;"	f	class:OpenXcom::SavedBattleGame
newWindowedModePositionX	Engine/Options.inc.h	/^OPT int newDisplayWidth, newDisplayHeight, newBattlescapeScale, newGeoscapeScale, newWindowedModePositionX, newWindowedModePositionY;$/;"	v
newWindowedModePositionY	Engine/Options.inc.h	/^OPT int newDisplayWidth, newDisplayHeight, newBattlescapeScale, newGeoscapeScale, newWindowedModePositionX, newWindowedModePositionY;$/;"	v
newXBRZFilter	Engine/Options.inc.h	/^OPT bool mute, reload, newOpenGL, newScaleFilter, newHQXFilter, newXBRZFilter, newRootWindowedMode, newFullscreen, newAllowResize, newBorderless;$/;"	v
newZipContext	Engine/FileMap.cpp	/^static mz_zip_archive *newZipContext(const std::string& log_ctx, SDL_RWops *rwops) {$/;"	f	namespace:OpenXcom::FileMap
next	Engine/RNG.cpp	/^uint64_t RandomState::next()$/;"	f	class:OpenXcom::RNG::RandomState
next	Ufopaedia/Ufopaedia.cpp	/^	void Ufopaedia::next(Game *game, std::shared_ptr<ArticleCommonState> state)$/;"	f	class:OpenXcom::Ufopaedia
nextAnimFrame	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::nextAnimFrame()$/;"	f	class:OpenXcom::SavedBattleGame
nextArticle	Ufopaedia/ArticleState.cpp	/^	void ArticleCommonState::nextArticle()$/;"	f	class:OpenXcom::ArticleCommonState
nextArticlePage	Ufopaedia/ArticleState.cpp	/^	void ArticleCommonState::nextArticlePage()$/;"	f	class:OpenXcom::ArticleCommonState
nextDetail	Ufopaedia/Ufopaedia.cpp	/^	void Ufopaedia::nextDetail(Game *game, std::shared_ptr<ArticleCommonState> state, bool debug, bool ids, bool defaults)$/;"	f	class:OpenXcom::Ufopaedia
nextImpl	Engine/RNG.cpp	/^static uint64_t nextImpl(uint64_t& state)$/;"	f	namespace:OpenXcom::RNG
nextLabel	Engine/ScriptBind.h	/^		ScriptRefData nextLabel = { };$/;"	m	struct:OpenXcom::ParserWriter::Block
nextStage	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::nextStage()$/;"	f	class:OpenXcom::BattlescapeGenerator
nextStep	Geoscape/BaseDefenseState.cpp	/^void BaseDefenseState::nextStep()$/;"	f	class:OpenXcom::BaseDefenseState
nextfree	lodepng.cpp	/^  unsigned nextfree;$/;"	m	struct:BPMLists	file:
nicematch	lodepng.h	/^  unsigned nicematch; \/*stop searching if >= this length found. Set to 258 for best compression. Default: 128*\/$/;"	m	struct:LodePNGCompressSettings
nikeCross	Savegame/BattleUnitStatistics.h	/^	bool nikeCross;                      \/\/\/< Tracks if a soldier killed every alien or killed and stunned every alien$/;"	m	struct:OpenXcom::BattleUnitStatistics
noActionsPending	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::noActionsPending(BattleUnit *bu)$/;"	f	class:OpenXcom::BattlescapeGame
noAlienPanicMessages	Engine/Options.inc.h	/^	battleUFOExtenderAccuracy, battleConfirmFireMode, battleSmoothCamera, noAlienPanicMessages, alienBleeding;$/;"	v
noExt	Engine/CrossPlatform.cpp	/^std::string noExt(const std::string &filename)$/;"	f	namespace:OpenXcom::CrossPlatform
nodeRank	Savegame/Node.cpp	/^const int Node::nodeRank[8][7] = {$/;"	m	class:OpenXcom::Node	file:
nodeRank	Savegame/Node.h	/^	static const int nodeRank[8][7]; \/\/ maps alien ranks to node (.RMP) ranks$/;"	m	class:OpenXcom::Node
nonDeref	Engine/Collections.h	/^	static Range<ValueIterator<It>> nonDeref(Range<It> a)$/;"	f	class:OpenXcom::Collections
nonSquarePixelRatio	Engine/Options.inc.h	/^	autosave, allowResize, borderless, debug, debugUi, fpsCounter, newSeedOnLoad, keepAspectRatio, nonSquarePixelRatio,$/;"	v
norm	Geoscape/Cord.h	/^	inline double norm() const$/;"	f	struct:OpenXcom::Cord
normalizeModVersion	Engine/ModInfo.cpp	/^ModInfoVersion normalizeModVersion(const std::string& parent, const std::string& ver)$/;"	f	namespace:OpenXcom::__anon3
normalizedEnergy	Mod/RuleStatBonus.cpp	/^float normalizedEnergy(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
normalizedHealth	Mod/RuleStatBonus.cpp	/^float normalizedHealth(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
normalizedHelper	Mod/RuleStatBonus.cpp	/^float normalizedHelper(int val, int max)$/;"	f	namespace:OpenXcom::__anon24
normalizedMana	Mod/RuleStatBonus.cpp	/^float normalizedMana(const BattleUnit* unit)$/;"	f	namespace:OpenXcom::__anon24
normalizedMorale	Mod/RuleStatBonus.cpp	/^float normalizedMorale(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
normalizedStun	Mod/RuleStatBonus.cpp	/^float normalizedStun(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
normalizedTimeUnits	Mod/RuleStatBonus.cpp	/^float normalizedTimeUnits(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
notifyWhenRefueled	Mod/RuleCraft.cpp	/^bool RuleCraft::notifyWhenRefueled() const$/;"	f	class:OpenXcom::RuleCraft
now	Engine/CrossPlatform.cpp	/^std::string now()$/;"	f	namespace:OpenXcom::CrossPlatform
nsubs	Engine/GMCat.cpp	/^	int tempo, nsubs, ntracks;$/;"	m	struct:OpenXcom::gmstream	file:
ntracks	Engine/GMCat.cpp	/^	int tempo, nsubs, ntracks;$/;"	m	struct:OpenXcom::gmstream	file:
nullptr_t	Engine/Functions.h	/^	FuncRef(std::nullptr_t) = delete;$/;"	m	class:OpenXcom::FuncRef
num_lock	Engine/Adlib/fmopl.cpp	/^static int num_lock = 0;$/;"	v	file:
number	Battlescape/BattlescapeGame.h	/^	int number; \/\/ first action of turn, second, etc.?$/;"	m	struct:OpenXcom::BattleAction
numcodes	lodepng.cpp	/^  unsigned numcodes; \/*number of symbols in the alphabet = number of codes*\/$/;"	m	struct:HuffmanTree	file:
numcolors	lodepng.h	/^  unsigned numcolors; \/*amount of colors, up to 257. Not valid if bits == 16.*\/$/;"	m	struct:LodePNGColorProfile
numfree	lodepng.cpp	/^  unsigned numfree;$/;"	m	struct:BPMLists	file:
o	Engine/Scalers/xbrz.cpp	/^    \/**\/m, n, o, p;$/;"	m	struct:__anon10::Kernel_4x4	file:
obeyFixedMinimum	Mod/Unit.h	/^	static UnitStats obeyFixedMinimum(const UnitStats &a)$/;"	f	struct:OpenXcom::UnitStats
objective	Mod/RuleAlienMission.h	/^	bool objective;$/;"	m	struct:OpenXcom::MissionWave
objectiveDestroyed	Mod/AlienDeployment.h	/^	bool objectiveDestroyed = false;$/;"	m	struct:OpenXcom::ReinforcementsData
objectiveOnTheLandingSite	Mod/RuleAlienMission.h	/^	bool objectiveOnTheLandingSite;$/;"	m	struct:OpenXcom::MissionWave
objectiveOnXcomBase	Mod/RuleAlienMission.h	/^	bool objectiveOnXcomBase;$/;"	m	struct:OpenXcom::MissionWave
occupiesSlot	Savegame/BattleItem.cpp	/^bool BattleItem::occupiesSlot(int x, int y, BattleItem *item) const$/;"	f	class:OpenXcom::BattleItem
offX	Battlescape/UnitSprite.h	/^		int offX;$/;"	m	struct:OpenXcom::UnitSprite::Part
offY	Battlescape/UnitSprite.h	/^		int offY;$/;"	m	struct:OpenXcom::UnitSprite::Part
offset	Engine/GraphSubset.h	/^	inline AreaSubset offset(int x, int y) const$/;"	f	struct:OpenXcom::AreaSubset
offset	Engine/ScriptBind.h	/^		static constexpr int offset = 0;$/;"	m	struct:OpenXcom::helper::SumListIndexImpl::End
offset	Engine/ScriptBind.h	/^	static constexpr int offset = Args::offset(Ver, Args::arg());$/;"	m	struct:OpenXcom::helper::FuncVer
offset	Engine/ScriptBind.h	/^	static constexpr int offset(int i)$/;"	f	struct:OpenXcom::helper::Arg
offset	Engine/ScriptBind.h	/^	static constexpr int offset(int i)$/;"	f	struct:OpenXcom::helper::ArgInternal
offset	Engine/ScriptBind.h	/^	static constexpr int offset(int ver, int pos)$/;"	f	struct:OpenXcom::helper::ArgColection
offset	Engine/Surface.cpp	/^void Surface::offset(int off, int min, int max, int mul)$/;"	f	class:OpenXcom::Surface
offset	Mod/Mod.cpp	/^void offset(const Mod *m, int &base, int modId)$/;"	f	namespace:OpenXcom::__anon30
offset	Mod/Mod.h	/^	size_t offset;$/;"	m	struct:OpenXcom::ModData
offsetBlock	Engine/Surface.cpp	/^void Surface::offsetBlock(int off, int blk, int mul)$/;"	f	class:OpenXcom::Surface
offsetY	Savegame/Tile.h	/^		Sint8 offsetY;$/;"	m	struct:OpenXcom::Tile::TileObjectCache
onAutoequip	Battlescape/InventoryState.cpp	/^void InventoryState::onAutoequip(Action *)$/;"	f	class:OpenXcom::InventoryState
onChange	Interface/ComboBox.cpp	/^void ComboBox::onChange(ActionHandler handler)$/;"	f	class:OpenXcom::ComboBox
onChange	Interface/Slider.cpp	/^void Slider::onChange(ActionHandler handler)$/;"	f	class:OpenXcom::Slider
onChange	Interface/TextEdit.cpp	/^void TextEdit::onChange(ActionHandler handler)$/;"	f	class:OpenXcom::TextEdit
onClearInventory	Battlescape/InventoryState.cpp	/^void InventoryState::onClearInventory(Action *)$/;"	f	class:OpenXcom::InventoryState
onCurrentGlobalProductionClick	Basescape/ManufactureState.cpp	/^void ManufactureState::onCurrentGlobalProductionClick(Action *)$/;"	f	class:OpenXcom::ManufactureState
onCurrentGlobalResearchClick	Basescape/ResearchState.cpp	/^void ResearchState::onCurrentGlobalResearchClick(Action *)$/;"	f	class:OpenXcom::ResearchState
onEndClick	Battlescape/MedikitState.cpp	/^void MedikitState::onEndClick(Action *)$/;"	f	class:OpenXcom::MedikitState
onEnter	Interface/TextEdit.cpp	/^void TextEdit::onEnter(ActionHandler handler)$/;"	f	class:OpenXcom::TextEdit
onHealClick	Battlescape/MedikitState.cpp	/^void MedikitState::onHealClick(Action *)$/;"	f	class:OpenXcom::MedikitState
onKeyboardPress	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::onKeyboardPress(ActionHandler handler, SDLKey key)$/;"	f	class:OpenXcom::InteractiveSurface
onKeyboardRelease	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::onKeyboardRelease(ActionHandler handler, SDLKey key)$/;"	f	class:OpenXcom::InteractiveSurface
onLeftArrowClick	Interface/TextList.cpp	/^void TextList::onLeftArrowClick(ActionHandler handler)$/;"	f	class:OpenXcom::TextList
onLeftArrowPress	Interface/TextList.cpp	/^void TextList::onLeftArrowPress(ActionHandler handler)$/;"	f	class:OpenXcom::TextList
onLeftArrowRelease	Interface/TextList.cpp	/^void TextList::onLeftArrowRelease(ActionHandler handler)$/;"	f	class:OpenXcom::TextList
onLessEngineer	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::onLessEngineer()$/;"	f	class:OpenXcom::ManufactureInfoState
onLessUnit	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::onLessUnit()$/;"	f	class:OpenXcom::ManufactureInfoState
onListMouseIn	Interface/ComboBox.cpp	/^void ComboBox::onListMouseIn(ActionHandler handler)$/;"	f	class:OpenXcom::ComboBox
onListMouseOut	Interface/ComboBox.cpp	/^void ComboBox::onListMouseOut(ActionHandler handler)$/;"	f	class:OpenXcom::ComboBox
onListMouseOver	Interface/ComboBox.cpp	/^void ComboBox::onListMouseOver(ActionHandler handler)$/;"	f	class:OpenXcom::ComboBox
onMoreEngineer	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::onMoreEngineer()$/;"	f	class:OpenXcom::ManufactureInfoState
onMoreUnit	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::onMoreUnit()$/;"	f	class:OpenXcom::ManufactureInfoState
onMouseClick	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::onMouseClick(ActionHandler handler, Uint8 button)$/;"	f	class:OpenXcom::InteractiveSurface
onMouseIn	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::onMouseIn(ActionHandler handler)$/;"	f	class:OpenXcom::InteractiveSurface
onMouseOut	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::onMouseOut(ActionHandler handler)$/;"	f	class:OpenXcom::InteractiveSurface
onMouseOver	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::onMouseOver(ActionHandler handler)$/;"	f	class:OpenXcom::InteractiveSurface
onMousePress	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::onMousePress(ActionHandler handler, Uint8 button)$/;"	f	class:OpenXcom::InteractiveSurface
onMouseRelease	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::onMouseRelease(ActionHandler handler, Uint8 button)$/;"	f	class:OpenXcom::InteractiveSurface
onMoveGroundInventoryToBase	Battlescape/InventoryState.cpp	/^void InventoryState::onMoveGroundInventoryToBase(Action *)$/;"	f	class:OpenXcom::InventoryState
onOpenTechTreeViewer	Basescape/GlobalManufactureState.cpp	/^void GlobalManufactureState::onOpenTechTreeViewer(Action *)$/;"	f	class:OpenXcom::GlobalManufactureState
onOpenTechTreeViewer	Basescape/GlobalResearchState.cpp	/^void GlobalResearchState::onOpenTechTreeViewer(Action *)$/;"	f	class:OpenXcom::GlobalResearchState
onOpenTechTreeViewer	Basescape/NewResearchListState.cpp	/^void NewResearchListState::onOpenTechTreeViewer(Action *)$/;"	f	class:OpenXcom::NewResearchListState
onOpenTechTreeViewer	Basescape/ResearchState.cpp	/^void ResearchState::onOpenTechTreeViewer(Action *)$/;"	f	class:OpenXcom::ResearchState
onPainKillerClick	Battlescape/MedikitState.cpp	/^void MedikitState::onPainKillerClick(Action *)$/;"	f	class:OpenXcom::MedikitState
onRightArrowClick	Interface/TextList.cpp	/^void TextList::onRightArrowClick(ActionHandler handler)$/;"	f	class:OpenXcom::TextList
onRightArrowPress	Interface/TextList.cpp	/^void TextList::onRightArrowPress(ActionHandler handler)$/;"	f	class:OpenXcom::TextList
onRightArrowRelease	Interface/TextList.cpp	/^void TextList::onRightArrowRelease(ActionHandler handler)$/;"	f	class:OpenXcom::TextList
onSelectBase	Basescape/GlobalManufactureState.cpp	/^void GlobalManufactureState::onSelectBase(Action *)$/;"	f	class:OpenXcom::GlobalManufactureState
onSelectBase	Basescape/GlobalResearchState.cpp	/^void GlobalResearchState::onSelectBase(Action *)$/;"	f	class:OpenXcom::GlobalResearchState
onSelectFullTopic	Basescape/TechTreeViewerState.cpp	/^void TechTreeViewerState::onSelectFullTopic(Action *)$/;"	f	class:OpenXcom::TechTreeViewerState
onSelectLeftTopic	Basescape/TechTreeViewerState.cpp	/^void TechTreeViewerState::onSelectLeftTopic(Action *)$/;"	f	class:OpenXcom::TechTreeViewerState
onSelectProject	Basescape/NewResearchListState.cpp	/^void NewResearchListState::onSelectProject(Action *)$/;"	f	class:OpenXcom::NewResearchListState
onSelectProject	Basescape/ResearchState.cpp	/^void ResearchState::onSelectProject(Action *)$/;"	f	class:OpenXcom::ResearchState
onSelectRightTopic	Basescape/TechTreeViewerState.cpp	/^void TechTreeViewerState::onSelectRightTopic(Action *)$/;"	f	class:OpenXcom::TechTreeViewerState
onSelectTopic	Basescape/TechTreeSelectState.cpp	/^void TechTreeSelectState::onSelectTopic(Action *)$/;"	f	class:OpenXcom::TechTreeSelectState
onStimulantClick	Battlescape/MedikitState.cpp	/^void MedikitState::onStimulantClick(Action *)$/;"	f	class:OpenXcom::MedikitState
onTimer	Engine/Timer.cpp	/^void Timer::onTimer(StateHandler handler)$/;"	f	class:OpenXcom::Timer
onTimer	Engine/Timer.cpp	/^void Timer::onTimer(SurfaceHandler handler)$/;"	f	class:OpenXcom::Timer
onToggleProjectStatus	Basescape/NewResearchListState.cpp	/^void NewResearchListState::onToggleProjectStatus(Action *)$/;"	f	class:OpenXcom::NewResearchListState
op1_out	Engine/Adlib/fmopl.h	/^	INT32 op1_out[2];	\/* slot1 output for selfeedback        *\/$/;"	m	struct:fm_opl_channel
open	Ufopaedia/Ufopaedia.cpp	/^	void Ufopaedia::open(Game *game)$/;"	f	class:OpenXcom::Ufopaedia
openArticle	Ufopaedia/Ufopaedia.cpp	/^	void Ufopaedia::openArticle(Game *game, ArticleDefinition *article)$/;"	f	class:OpenXcom::Ufopaedia
openArticle	Ufopaedia/Ufopaedia.cpp	/^	void Ufopaedia::openArticle(Game *game, const std::string &article_id)$/;"	f	class:OpenXcom::Ufopaedia
openArticleDetail	Ufopaedia/Ufopaedia.cpp	/^	void Ufopaedia::openArticleDetail(Game *game, const std::string &article_id)$/;"	f	class:OpenXcom::Ufopaedia
openDoor	Savegame/Tile.cpp	/^int Tile::openDoor(TilePart part, BattleUnit *unit, BattleActionType reserve, bool rClick)$/;"	f	class:OpenXcom::Tile
openExplorer	Engine/CrossPlatform.cpp	/^bool openExplorer(const std::string &url)$/;"	f	namespace:OpenXcom::CrossPlatform
operator !=	Battlescape/Position.h	/^	constexpr bool operator!= (const Position& pos) const$/;"	f	class:OpenXcom::Position
operator !=	Engine/Collections.h	/^		bool operator!=(const FilterIterator& r)$/;"	f	class:OpenXcom::Collections::FilterIterator
operator !=	Engine/Collections.h	/^		bool operator!=(const ReverseIterator& r)$/;"	f	struct:OpenXcom::Collections::ReverseIterator
operator !=	Engine/Collections.h	/^		bool operator!=(const ValueIterator& r)$/;"	f	struct:OpenXcom::Collections::ValueIterator
operator !=	Engine/Collections.h	/^		bool operator!=(const ZipIterator& r)$/;"	f	struct:OpenXcom::Collections::ZipIterator
operator !=	Engine/GraphSubset.h	/^	bool operator!=(const AreaSubset& other) const$/;"	f	struct:OpenXcom::AreaSubset
operator !=	Mod/Armor.h	/^	bool operator!=(ArmorMoveCost c) const$/;"	f	struct:OpenXcom::ArmorMoveCost
operator &	Engine/Script.h	/^constexpr ArgSpecEnum operator&(ArgSpecEnum a, ArgSpecEnum b)$/;"	f	namespace:OpenXcom
operator ()	Basescape/SoldierArmorState.cpp	/^	bool operator()(const ArmorItem &a, const ArmorItem &b) const$/;"	f	struct:OpenXcom::compareArmorName
operator ()	Basescape/SoldierSortUtil.h	/^	bool operator()(Soldier *a, Soldier *b)$/;"	f	struct:OpenXcom::SortFunctor
operator ()	Basescape/StoresState.cpp	/^	bool operator()(const StoredItem &a, const StoredItem &b) const$/;"	f	struct:OpenXcom::compareItemName
operator ()	Basescape/StoresState.cpp	/^	bool operator()(const StoredItem &a, const StoredItem &b) const$/;"	f	struct:OpenXcom::compareItemQuantity
operator ()	Basescape/StoresState.cpp	/^	bool operator()(const StoredItem &a, const StoredItem &b) const$/;"	f	struct:OpenXcom::compareItemSize
operator ()	Basescape/StoresState.cpp	/^	bool operator()(const StoredItem &a, const StoredItem &b) const$/;"	f	struct:OpenXcom::compareItemSpaceUsed
operator ()	Battlescape/PathfindingNode.h	/^	bool operator()(const PathfindingNode *a, const PathfindingNode *b) const$/;"	f	class:OpenXcom::MinNodeCosts
operator ()	Battlescape/PathfindingOpenSet.h	/^	bool operator()(const OpenSetEntry& a, const OpenSetEntry& b) const$/;"	f	class:OpenXcom::EntryCompare
operator ()	Engine/Functions.h	/^	constexpr Ret operator()(Args... args) const$/;"	f	class:OpenXcom::FuncRef
operator ()	Engine/Sound.cpp	/^void Sound::UniqueSoundDeleter::operator ()(Mix_Chunk* sound)$/;"	f	class:OpenXcom::Sound::UniqueSoundDeleter
operator ()	Engine/Surface.cpp	/^void Surface::UniqueBufferDeleter::operator ()(Uint8* buffer)$/;"	f	class:OpenXcom::Surface::UniqueBufferDeleter
operator ()	Engine/Surface.cpp	/^void Surface::UniqueSurfaceDeleter::operator ()(SDL_Surface* surf)$/;"	f	class:OpenXcom::Surface::UniqueSurfaceDeleter
operator ()	Geoscape/GeoscapeState.cpp	/^	void operator()(const argument_type &iter) const { iter.second->setRetaliationTarget(true); }$/;"	f	struct:OpenXcom::SetRetaliationTarget
operator ()	Geoscape/GeoscapeState.cpp	/^bool DetectXCOMBase::operator()(const Ufo *ufo) const$/;"	f	class:OpenXcom::DetectXCOMBase
operator ()	Geoscape/GeoscapeState.cpp	/^void GenerateSupplyMission::operator()(AlienBase *base) const$/;"	f	class:OpenXcom::GenerateSupplyMission
operator ()	Menu/ListGamesState.cpp	/^	bool operator()(const SaveInfo &a, const SaveInfo &b) const$/;"	f	struct:OpenXcom::compareSaveName
operator ()	Menu/ListGamesState.cpp	/^	bool operator()(const SaveInfo &a, const SaveInfo &b) const$/;"	f	struct:OpenXcom::compareSaveTimestamp
operator ()	Menu/VideoState.cpp	/^	void operator()()$/;"	f	struct:OpenXcom::AudioSequence
operator ()	Mod/Mod.cpp	/^	bool operator()(const Armor* armor1, const Armor* armor2) const$/;"	f	struct:OpenXcom::compareRule
operator ()	Mod/Mod.cpp	/^	bool operator()(const std::string &r1, const std::string &r2) const$/;"	f	struct:OpenXcom::compareRule
operator ()	Mod/Mod.cpp	/^	bool operator()(const std::string &r1, const std::string &r2) const$/;"	f	struct:OpenXcom::compareSection
operator ()	Savegame/AlienMission.cpp	/^	bool operator()(const AlienBase *ab) const { return ab->getId() == _id && ab->getDeployment()->getMarkerName() == _type; }$/;"	f	class:OpenXcom::matchById
operator ()	Savegame/AlienMission.cpp	/^	bool operator()(const Base *base) const { return AreSame(base->getLongitude(), _lon) && AreSame(base->getLatitude(), _lat); }$/;"	f	class:OpenXcom::MatchBaseCoordinates
operator ()	Savegame/SavedGame.cpp	/^	bool operator()(const Country* country) const { return country->getRules()->insideCountry(_lon, _lat); }$/;"	f	class:OpenXcom::CountryContainsPoint
operator ()	Savegame/SavedGame.cpp	/^	bool operator()(const Region *region) const { return region->getRules()->insideRegion(_lon, _lat); }$/;"	f	class:OpenXcom::ContainsPoint
operator ()	Savegame/SavedGame.cpp	/^bool equalProduction::operator()(const Production * p) const$/;"	f	class:OpenXcom::__anon41::equalProduction
operator ()	Savegame/SavedGame.cpp	/^bool findRuleResearch::operator()(const ResearchProject *r) const$/;"	f	class:OpenXcom::__anon41::findRuleResearch
operator ()	Savegame/Ufo.cpp	/^	bool operator()(const AlienMission *am) const { return am->getId() == _id; }$/;"	f	class:OpenXcom::matchMissionID
operator *	Battlescape/Position.h	/^	constexpr Position operator*(const Position& pos) const { return Position(x * pos.x, y * pos.y, z * pos.z); }$/;"	f	class:OpenXcom::Position
operator *	Battlescape/Position.h	/^	constexpr Position operator*(const int v) const { return Position(x * v, y * v, z * v); }$/;"	f	class:OpenXcom::Position
operator *	Engine/Collections.h	/^		T operator*()$/;"	f	struct:OpenXcom::Collections::ValueIterator
operator *=	Battlescape/Position.h	/^	constexpr Position& operator*=(const Position& pos) { x*=pos.x; y*=pos.y; z*=pos.z; return *this; }$/;"	f	class:OpenXcom::Position
operator *=	Battlescape/Position.h	/^	constexpr Position& operator*=(const int v) { x*=v; y*=v; z*=v; return *this; }$/;"	f	class:OpenXcom::Position
operator *=	Geoscape/Cord.h	/^	inline Cord& operator *=(double d)$/;"	f	struct:OpenXcom::Cord
operator *=	Mod/Armor.h	/^	ArmorMoveCost& operator*=(ArmorMoveCost c)$/;"	f	struct:OpenXcom::ArmorMoveCost
operator +	Battlescape/PathfindingNode.h	/^	PathfindingCost operator+(PathfindingCost c) const$/;"	f	struct:OpenXcom::PathfindingCost
operator +	Battlescape/Position.h	/^	constexpr Position operator+(const Position& pos) const { return Position(x + pos.x, y + pos.y, z + pos.z); }$/;"	f	class:OpenXcom::Position
operator +	Engine/ScriptBind.h	/^	constexpr SumList<V..., F2...> operator+(SumList<F2...>) const { return {}; }$/;"	f	struct:OpenXcom::helper::SumList
operator +	Engine/ScriptBind.h	/^	constexpr SumList<V...> operator+() const { return {}; }$/;"	f	struct:OpenXcom::helper::SumList
operator +	Geoscape/Cord.h	/^	inline Cord operator +()$/;"	f	struct:OpenXcom::Cord
operator +	Mod/Unit.h	/^	UnitStats operator+(const UnitStats& stats) const { return UnitStats(tu + stats.tu, stamina + stats.stamina, health + stats.health, bravery + stats.bravery, reactions + stats.reactions, firing + stats.firing, throwing + stats.throwing, strength + stats.strength, psiStrength + stats.psiStrength, psiSkill + stats.psiSkill, melee + stats.melee, mana + stats.mana); }$/;"	f	struct:OpenXcom::UnitStats
operator ++	Engine/Collections.h	/^		void operator++()$/;"	f	class:OpenXcom::Collections::FilterIterator
operator ++	Engine/Collections.h	/^		void operator++()$/;"	f	struct:OpenXcom::Collections::ReverseIterator
operator ++	Engine/Collections.h	/^		void operator++()$/;"	f	struct:OpenXcom::Collections::ValueIterator
operator ++	Engine/Collections.h	/^		void operator++()$/;"	f	struct:OpenXcom::Collections::ZipIterator
operator ++	Engine/Script.h	/^inline ProgPos operator++(ProgPos& pos, int)$/;"	f	namespace:OpenXcom
operator ++	Engine/Script.h	/^inline ProgPos& operator++(ProgPos& pos)$/;"	f	namespace:OpenXcom
operator +=	Battlescape/Position.h	/^	constexpr Position& operator+=(const Position& pos) { x+=pos.x; y+=pos.y; z+=pos.z; return *this; }$/;"	f	class:OpenXcom::Position
operator +=	Engine/Script.h	/^inline ProgPos& operator+=(ProgPos& pos, int offset)$/;"	f	namespace:OpenXcom
operator +=	Geoscape/Cord.h	/^	inline Cord& operator +=(const Cord& c)$/;"	f	struct:OpenXcom::Cord
operator +=	Mod/RuleCraft.h	/^	RuleCraftStats& operator+=(const RuleCraftStats& r)$/;"	f	struct:OpenXcom::RuleCraftStats
operator +=	Mod/RuleItem.h	/^	RuleItemUseCost& operator+=(const RuleItemUseCost& cost)$/;"	f	struct:OpenXcom::RuleItemUseCost
operator +=	Mod/RuleUfo.h	/^	RuleUfoStats& operator+=(const RuleUfoStats& r)$/;"	f	struct:OpenXcom::RuleUfoStats
operator +=	Mod/Unit.h	/^	UnitStats& operator+=(const UnitStats& stats) { tu += stats.tu; stamina += stats.stamina; health += stats.health; bravery += stats.bravery; reactions += stats.reactions; firing += stats.firing; throwing += stats.throwing; strength += stats.strength; psiStrength += stats.psiStrength; psiSkill += stats.psiSkill; melee += stats.melee; mana += stats.mana; return *this; }$/;"	f	struct:OpenXcom::UnitStats
operator -	Battlescape/Position.h	/^	constexpr Position operator-(const Position& pos) const { return Position(x - pos.x, y - pos.y, z - pos.z); }$/;"	f	class:OpenXcom::Position
operator -	Geoscape/Cord.h	/^	inline Cord operator -()$/;"	f	struct:OpenXcom::Cord
operator -	Mod/RuleCraft.h	/^	RuleCraftStats operator-() const$/;"	f	struct:OpenXcom::RuleCraftStats
operator -	Mod/Unit.h	/^	UnitStats operator-() const { return UnitStats(-tu, -stamina, -health, -bravery, -reactions, -firing, -throwing, -strength, -psiStrength, -psiSkill, -melee, -mana); }$/;"	f	struct:OpenXcom::UnitStats
operator -	Mod/Unit.h	/^	UnitStats operator-(const UnitStats& stats) const { return UnitStats(tu - stats.tu, stamina - stats.stamina, health - stats.health, bravery - stats.bravery, reactions - stats.reactions, firing - stats.firing, throwing - stats.throwing, strength - stats.strength, psiStrength - stats.psiStrength, psiSkill - stats.psiSkill, melee - stats.melee, mana - stats.mana); }$/;"	f	struct:OpenXcom::UnitStats
operator --	Engine/Collections.h	/^		void operator--()$/;"	f	struct:OpenXcom::Collections::ValueIterator
operator -=	Battlescape/Position.h	/^	constexpr Position& operator-=(const Position& pos) { x-=pos.x; y-=pos.y; z-=pos.z; return *this; }$/;"	f	class:OpenXcom::Position
operator -=	Geoscape/Cord.h	/^	inline Cord& operator -=(const Cord& c)$/;"	f	struct:OpenXcom::Cord
operator -=	Mod/RuleCraft.h	/^	RuleCraftStats& operator-=(const RuleCraftStats& r)$/;"	f	struct:OpenXcom::RuleCraftStats
operator -=	Mod/Unit.h	/^	UnitStats& operator-=(const UnitStats& stats) { tu -= stats.tu; stamina -= stats.stamina; health -= stats.health; bravery -= stats.bravery; reactions -= stats.reactions; firing -= stats.firing; throwing -= stats.throwing; strength -= stats.strength; psiStrength -= stats.psiStrength; psiSkill -= stats.psiSkill; melee -= stats.melee; mana -= stats.mana; return *this; }$/;"	f	struct:OpenXcom::UnitStats
operator /	Battlescape/Position.h	/^	constexpr Position operator\/(const Position& pos) const { return Position(x \/ pos.x, y \/ pos.y, z \/ pos.z); }$/;"	f	class:OpenXcom::Position
operator /	Battlescape/Position.h	/^	constexpr Position operator\/(const int v) const { return Position(x \/ v, y \/ v, z \/ v); }$/;"	f	class:OpenXcom::Position
operator /=	Battlescape/Position.h	/^	constexpr Position& operator\/=(const Position& pos) { x\/=pos.x; y\/=pos.y; z\/=pos.z; return *this; }$/;"	f	class:OpenXcom::Position
operator /=	Geoscape/Cord.h	/^	inline Cord& operator \/=(double d)$/;"	f	struct:OpenXcom::Cord
operator <	Battlescape/PathfindingNode.h	/^	bool operator<(PathfindingCost c) const$/;"	f	struct:OpenXcom::PathfindingCost
operator <	Savegame/Node.h	/^	bool operator<(Node &b) const { return _flags < b.getFlags(); };$/;"	f	class:OpenXcom::Node
operator <<	Battlescape/Position.h	/^inline std::ostream& operator<<(std::ostream& out, const Position& pos)$/;"	f	namespace:OpenXcom
operator <<	Engine/LocalizedText.h	/^inline std::ostream &operator<<(std::ostream &os, const LocalizedText &txt)$/;"	f	namespace:OpenXcom
operator <<	md5.cpp	/^std::ostream& operator<<(std::ostream& out, MD5 md5)$/;"	f
operator <=	Battlescape/PathfindingNode.h	/^	bool operator<=(PathfindingCost c) const$/;"	f	struct:OpenXcom::PathfindingCost
operator =	Battlescape/UnitSprite.h	/^		void operator=(const Surface *s) { src = s; }$/;"	f	struct:OpenXcom::UnitSprite::Part
operator =	Engine/Surface.h	/^	Surface& operator=(const Surface& other) { *this = Surface(other); return *this; };$/;"	f	class:OpenXcom::Surface
operator =	Engine/Surface.h	/^	SurfaceRaw& operator=(std::nullptr_t)$/;"	f	class:OpenXcom::SurfaceRaw
operator =	lodepng.cpp	/^State& State::operator=(const State& other)$/;"	f	class:lodepng::State
operator =	main.cpp	/^	BadMove& operator=(BadMove&& b)$/;"	f	struct:BadMove
operator ==	Battlescape/Position.h	/^	constexpr bool operator== (const Position& pos) const$/;"	f	class:OpenXcom::Position
operator ==	Engine/GraphSubset.h	/^	bool operator==(const AreaSubset& other) const$/;"	f	struct:OpenXcom::AreaSubset
operator ==	Geoscape/Cord.h	/^	inline bool operator ==(const Cord& c)$/;"	f	struct:OpenXcom::Cord
operator ==	Mod/Armor.h	/^	bool operator==(ArmorMoveCost c) const$/;"	f	struct:OpenXcom::ArmorMoveCost
operator ==	Mod/RuleRegion.h	/^	bool operator== (const MissionArea& ma) const$/;"	f	struct:OpenXcom::MissionArea
operator ==	main.cpp	/^	bool operator==(const BadMove& b) const$/;"	f	struct:BadMove
operator >	Battlescape/PathfindingNode.h	/^	bool operator>(PathfindingCost c) const$/;"	f	struct:OpenXcom::PathfindingCost
operator >=	Battlescape/PathfindingNode.h	/^	bool operator>=(PathfindingCost c) const$/;"	f	struct:OpenXcom::PathfindingCost
operator ReadOnly	Mod/RuleItem.h	/^	operator ReadOnly() const$/;"	f	struct:OpenXcom::BattleActionAttack
operator ^	Engine/Script.h	/^constexpr ArgSpecEnum operator^(ArgSpecEnum a, ArgSpecEnum b)$/;"	f	namespace:OpenXcom
operator bool	Battlescape/UnitSprite.h	/^		explicit operator bool() { return src; }$/;"	f	struct:OpenXcom::UnitSprite::Part
operator bool	Engine/Functions.h	/^	constexpr explicit operator bool()$/;"	f	class:OpenXcom::FuncRef
operator bool	Engine/GraphSubset.h	/^	explicit operator bool() const$/;"	f	struct:OpenXcom::AreaSubset
operator bool	Engine/Surface.h	/^	explicit operator bool() const$/;"	f	class:OpenXcom::Surface
operator bool	Engine/Surface.h	/^	explicit operator bool() const$/;"	f	class:OpenXcom::SurfaceRaw
operator std::string	Engine/Script.h	/^	operator std::string()$/;"	f	struct:OpenXcom::ScriptText
operator std::string const&	Engine/LocalizedText.h	/^inline LocalizedText::operator std::string const&() const$/;"	f	class:OpenXcom::LocalizedText
operator |	Engine/Script.h	/^constexpr ArgSpecEnum operator|(ArgSpecEnum a, ArgSpecEnum b)$/;"	f	namespace:OpenXcom
opl	Engine/Adlib/adlplayer.cpp	/^FM_OPL* opl[2] = {0, 0};$/;"	v
opl_dbg_chip	Engine/Adlib/fmopl.cpp	/^static int opl_dbg_maxchip,opl_dbg_chip;$/;"	v	file:
opl_dbg_fp	Engine/Adlib/fmopl.cpp	/^static FILE *opl_dbg_fp = NULL;$/;"	v	file:
opl_dbg_maxchip	Engine/Adlib/fmopl.cpp	/^static int opl_dbg_maxchip,opl_dbg_chip;$/;"	v	file:
opl_dbg_opl	Engine/Adlib/fmopl.cpp	/^static FM_OPL *opl_dbg_opl[16];$/;"	v	file:
optDeref	Engine/ScriptBind.h	/^	static auto optDeref(T t) { return t; }$/;"	f	struct:OpenXcom::helper::WarpValue
optValue	Battlescape/ExplosionBState.cpp	/^void ExplosionBState::optValue(int& oldValue, int newValue) const$/;"	f	class:OpenXcom::ExplosionBState
os	Engine/Logger.h	/^	std::ostringstream os;$/;"	m	class:OpenXcom::Logger
other	Engine/Sound.h	/^	Sound& operator=(Sound&& other) = default;$/;"	m	class:OpenXcom::Sound
other	Engine/Sound.h	/^	Sound(Sound&& other) = default;$/;"	m	class:OpenXcom::Sound
other	Engine/Surface.h	/^	Surface& operator=(Surface&& other) = default;$/;"	m	class:OpenXcom::Surface
other	Engine/Surface.h	/^	Surface(Surface&& other) = default;$/;"	m	class:OpenXcom::Surface
other	Engine/SurfaceSet.h	/^	SurfaceSet& operator=(SurfaceSet&& other) = default;$/;"	m	class:OpenXcom::SurfaceSet
other	Engine/SurfaceSet.h	/^	SurfaceSet& operator=(const SurfaceSet& other) = default;$/;"	m	class:OpenXcom::SurfaceSet
other	Engine/SurfaceSet.h	/^	SurfaceSet(SurfaceSet&& other) = default;$/;"	m	class:OpenXcom::SurfaceSet
other	Engine/SurfaceSet.h	/^	SurfaceSet(const SurfaceSet& other) = default;$/;"	m	class:OpenXcom::SurfaceSet
outWidth_	Engine/Scalers/xbrz.cpp	/^    const int outWidth_;$/;"	m	class:__anon10::OutputMatrix	file:
out_	Engine/Scalers/xbrz.cpp	/^    uint32_t* out_;$/;"	m	class:__anon10::OutputMatrix	file:
outd	Engine/Adlib/fmopl.cpp	/^static INT32 outd[1];$/;"	v	file:
output_status	Engine/GMCat.cpp	/^struct output_status {$/;"	s	namespace:OpenXcom	file:
overlapItems	Battlescape/Inventory.cpp	/^bool Inventory::overlapItems(BattleUnit *unit, BattleItem *item, RuleInventory *slot, int x, int y)$/;"	f	class:OpenXcom::Inventory
overloadBuildinProc	Engine/Script.cpp	/^int overloadBuildinProc(const ScriptProcData& spd, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
overloadCustomProc	Engine/Script.cpp	/^int overloadCustomProc(const ScriptProcData& spd, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
overloadInvalidProc	Engine/Script.cpp	/^int overloadInvalidProc(const ScriptProcData& spd, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
overloadType	Engine/ScriptBind.h	/^	static ScriptRange<ScriptRange<ArgEnum>> overloadType()$/;"	f	struct:OpenXcom::helper::ArgColection
override	Basescape/BaseInfoState.h	/^	void init() override;$/;"	m	class:OpenXcom::BaseInfoState
override	Basescape/BaseView.h	/^	void blit(SDL_Surface *surface) override;$/;"	m	class:OpenXcom::BaseView
override	Basescape/BaseView.h	/^	void draw() override;$/;"	m	class:OpenXcom::BaseView
override	Basescape/BaseView.h	/^	void initText(Font *big, Font *small, Language *lang) override;$/;"	m	class:OpenXcom::BaseView
override	Basescape/BaseView.h	/^	void mouseOut(Action *action, State *state) override;$/;"	m	class:OpenXcom::BaseView
override	Basescape/BaseView.h	/^	void mouseOver(Action *action, State *state) override;$/;"	m	class:OpenXcom::BaseView
override	Basescape/BaseView.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::BaseView
override	Basescape/BaseView.h	/^	void setSecondaryColor(Uint8 color) override;$/;"	m	class:OpenXcom::BaseView
override	Basescape/BaseView.h	/^	void think() override;$/;"	m	class:OpenXcom::BaseView
override	Basescape/BasescapeState.h	/^	void init() override;$/;"	m	class:OpenXcom::BasescapeState
override	Basescape/BuildFacilitiesState.h	/^	void init() override;$/;"	m	class:OpenXcom::BuildFacilitiesState
override	Basescape/CraftArmorState.h	/^	void init() override;$/;"	m	class:OpenXcom::CraftArmorState
override	Basescape/CraftEquipmentState.h	/^	void init() override;$/;"	m	class:OpenXcom::CraftEquipmentState
override	Basescape/CraftEquipmentState.h	/^	void think() override;$/;"	m	class:OpenXcom::CraftEquipmentState
override	Basescape/CraftInfoState.h	/^	void init() override;$/;"	m	class:OpenXcom::CraftInfoState
override	Basescape/CraftPilotsState.h	/^	void init() override;$/;"	m	class:OpenXcom::CraftPilotsState
override	Basescape/CraftSoldiersState.h	/^	void init() override;$/;"	m	class:OpenXcom::CraftSoldiersState
override	Basescape/CraftsState.h	/^	void init() override;$/;"	m	class:OpenXcom::CraftsState
override	Basescape/GlobalManufactureState.h	/^	void init() override;$/;"	m	class:OpenXcom::GlobalManufactureState
override	Basescape/GlobalResearchState.h	/^	void init() override;$/;"	m	class:OpenXcom::GlobalResearchState
override	Basescape/ManageAlienContainmentState.h	/^	void init() override;$/;"	m	class:OpenXcom::ManageAlienContainmentState
override	Basescape/ManageAlienContainmentState.h	/^	void think() override;$/;"	m	class:OpenXcom::ManageAlienContainmentState
override	Basescape/ManufactureDependenciesTreeState.h	/^	void init() override;$/;"	m	class:OpenXcom::ManufactureDependenciesTreeState
override	Basescape/ManufactureInfoState.h	/^	void think() override;$/;"	m	class:OpenXcom::ManufactureInfoState
override	Basescape/ManufactureState.h	/^	void init() override;$/;"	m	class:OpenXcom::ManufactureState
override	Basescape/MiniBaseView.h	/^	void draw() override;$/;"	m	class:OpenXcom::MiniBaseView
override	Basescape/MiniBaseView.h	/^	void mouseOver(Action *action, State *state) override;$/;"	m	class:OpenXcom::MiniBaseView
override	Basescape/MiniBaseView.h	/^	void setBorderColor(Uint8 color) override;$/;"	m	class:OpenXcom::MiniBaseView
override	Basescape/MiniBaseView.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::MiniBaseView
override	Basescape/MiniBaseView.h	/^	void setSecondaryColor(Uint8 color) override;$/;"	m	class:OpenXcom::MiniBaseView
override	Basescape/NewManufactureListState.h	/^	void init() override;$/;"	m	class:OpenXcom::NewManufactureListState
override	Basescape/NewResearchListState.h	/^	void init() override;$/;"	m	class:OpenXcom::NewResearchListState
override	Basescape/PurchaseState.h	/^	void think() override;$/;"	m	class:OpenXcom::PurchaseState
override	Basescape/ResearchInfoState.h	/^	void think() override;$/;"	m	class:OpenXcom::ResearchInfoState
override	Basescape/ResearchState.h	/^	void init() override;$/;"	m	class:OpenXcom::ResearchState
override	Basescape/SelectStartFacilityState.h	/^	virtual void populateBuildList() override;$/;"	m	class:OpenXcom::SelectStartFacilityState
override	Basescape/SelectStartFacilityState.h	/^	void lstFacilitiesClick(Action *action) override;$/;"	m	class:OpenXcom::SelectStartFacilityState
override	Basescape/SellState.h	/^	void init() override;$/;"	m	class:OpenXcom::SellState
override	Basescape/SellState.h	/^	void think() override;$/;"	m	class:OpenXcom::SellState
override	Basescape/SoldierDiaryMissionState.h	/^	void init() override;$/;"	m	class:OpenXcom::SoldierDiaryMissionState
override	Basescape/SoldierDiaryOverviewState.h	/^	void init() override;$/;"	m	class:OpenXcom::SoldierDiaryOverviewState
override	Basescape/SoldierDiaryPerformanceState.h	/^	void init() override;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
override	Basescape/SoldierDiaryPerformanceState.h	/^	void think() override;$/;"	m	class:OpenXcom::SoldierDiaryPerformanceState
override	Basescape/SoldierInfoState.h	/^	void init() override;$/;"	m	class:OpenXcom::SoldierInfoState
override	Basescape/SoldierMemorialState.h	/^	void init() override;$/;"	m	class:OpenXcom::SoldierMemorialState
override	Basescape/SoldiersState.h	/^	void init() override;$/;"	m	class:OpenXcom::SoldiersState
override	Basescape/StoresState.h	/^	void init() override;$/;"	m	class:OpenXcom::StoresState
override	Basescape/TechTreeSelectState.h	/^	void init() override;$/;"	m	class:OpenXcom::TechTreeSelectState
override	Basescape/TechTreeViewerState.h	/^	void init() override;$/;"	m	class:OpenXcom::TechTreeViewerState
override	Basescape/TransferItemsState.h	/^	void think() override;$/;"	m	class:OpenXcom::TransferItemsState
override	Battlescape/ActionMenuItem.h	/^	void draw() override;$/;"	m	class:OpenXcom::ActionMenuItem
override	Battlescape/ActionMenuItem.h	/^	void mouseIn(Action *action, State *state) override;$/;"	m	class:OpenXcom::ActionMenuItem
override	Battlescape/ActionMenuItem.h	/^	void mouseOut(Action *action, State *state) override;$/;"	m	class:OpenXcom::ActionMenuItem
override	Battlescape/ActionMenuItem.h	/^	void setPalette(const SDL_Color *colors, int firstcolor, int ncolors) override;$/;"	m	class:OpenXcom::ActionMenuItem
override	Battlescape/ActionMenuState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::ActionMenuState
override	Battlescape/ActionMenuState.h	/^	void init() override;$/;"	m	class:OpenXcom::ActionMenuState
override	Battlescape/ActionMenuState.h	/^	void resize(int &dX, int &dY) override;$/;"	m	class:OpenXcom::ActionMenuState
override	Battlescape/AlienInventory.h	/^	void blit(SDL_Surface *surface) override;$/;"	m	class:OpenXcom::AlienInventory
override	Battlescape/AlienInventory.h	/^	void draw() override;$/;"	m	class:OpenXcom::AlienInventory
override	Battlescape/AlienInventory.h	/^	void mouseClick(Action *action, State *state) override;$/;"	m	class:OpenXcom::AlienInventory
override	Battlescape/AlienInventory.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::AlienInventory
override	Battlescape/AlienInventory.h	/^	void think() override;$/;"	m	class:OpenXcom::AlienInventory
override	Battlescape/BattlescapeMessage.h	/^	void blit(SDL_Surface *surface) override;$/;"	m	class:OpenXcom::BattlescapeMessage
override	Battlescape/BattlescapeMessage.h	/^	void initText(Font *big, Font *small, Language *lang) override;$/;"	m	class:OpenXcom::BattlescapeMessage
override	Battlescape/BattlescapeMessage.h	/^	void setHeight(int height) override;$/;"	m	class:OpenXcom::BattlescapeMessage
override	Battlescape/BattlescapeMessage.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::BattlescapeMessage
override	Battlescape/BattlescapeMessage.h	/^	void setX(int x) override;$/;"	m	class:OpenXcom::BattlescapeMessage
override	Battlescape/BattlescapeMessage.h	/^	void setY(int y) override;$/;"	m	class:OpenXcom::BattlescapeMessage
override	Battlescape/BattlescapeState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::BattlescapeState
override	Battlescape/BattlescapeState.h	/^	void init() override;$/;"	m	class:OpenXcom::BattlescapeState
override	Battlescape/BattlescapeState.h	/^	void resize(int &dX, int &dY) override;$/;"	m	class:OpenXcom::BattlescapeState
override	Battlescape/BattlescapeState.h	/^	void think() override;$/;"	m	class:OpenXcom::BattlescapeState
override	Battlescape/BriefingState.h	/^	void init() override;$/;"	m	class:OpenXcom::BriefingState
override	Battlescape/CannotReequipState.h	/^	void init() override;$/;"	m	class:OpenXcom::CannotReequipState
override	Battlescape/DebriefingState.h	/^	void init() override;$/;"	m	class:OpenXcom::DebriefingState
override	Battlescape/ExplosionBState.h	/^	void cancel() override;$/;"	m	class:OpenXcom::ExplosionBState
override	Battlescape/ExplosionBState.h	/^	void init() override;$/;"	m	class:OpenXcom::ExplosionBState
override	Battlescape/ExplosionBState.h	/^	void think() override;$/;"	m	class:OpenXcom::ExplosionBState
override	Battlescape/InfoboxState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::InfoboxState
override	Battlescape/InfoboxState.h	/^	void think() override;$/;"	m	class:OpenXcom::InfoboxState
override	Battlescape/Inventory.h	/^	void blit(SDL_Surface *surface) override;$/;"	m	class:OpenXcom::Inventory
override	Battlescape/Inventory.h	/^	void draw() override;$/;"	m	class:OpenXcom::Inventory
override	Battlescape/Inventory.h	/^	void mouseClick(Action *action, State *state) override;$/;"	m	class:OpenXcom::Inventory
override	Battlescape/Inventory.h	/^	void mouseOver(Action *action, State *state) override;$/;"	m	class:OpenXcom::Inventory
override	Battlescape/Inventory.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::Inventory
override	Battlescape/Inventory.h	/^	void think() override;$/;"	m	class:OpenXcom::Inventory
override	Battlescape/InventoryState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::InventoryState
override	Battlescape/InventoryState.h	/^	void init() override;$/;"	m	class:OpenXcom::InventoryState
override	Battlescape/InventoryState.h	/^	void think() override;$/;"	m	class:OpenXcom::InventoryState
override	Battlescape/Map.h	/^	void draw() override;$/;"	m	class:OpenXcom::Map
override	Battlescape/Map.h	/^	void keyboardPress(Action *action, State *state) override;$/;"	m	class:OpenXcom::Map
override	Battlescape/Map.h	/^	void keyboardRelease(Action *action, State *state) override;$/;"	m	class:OpenXcom::Map
override	Battlescape/Map.h	/^	void mouseOver(Action *action, State *state) override;$/;"	m	class:OpenXcom::Map
override	Battlescape/Map.h	/^	void mousePress(Action *action, State *state) override;$/;"	m	class:OpenXcom::Map
override	Battlescape/Map.h	/^	void mouseRelease(Action *action, State *state) override;$/;"	m	class:OpenXcom::Map
override	Battlescape/Map.h	/^	void setHeight(int height) override;$/;"	m	class:OpenXcom::Map
override	Battlescape/Map.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::Map
override	Battlescape/Map.h	/^	void setWidth(int width) override;$/;"	m	class:OpenXcom::Map
override	Battlescape/Map.h	/^	void think() override;$/;"	m	class:OpenXcom::Map
override	Battlescape/MedikitState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::MedikitState
override	Battlescape/MedikitView.h	/^	void draw() override;$/;"	m	class:OpenXcom::MedikitView
override	Battlescape/MedikitView.h	/^	void mouseClick (Action *action, State *state) override;$/;"	m	class:OpenXcom::MedikitView
override	Battlescape/MeleeAttackBState.h	/^	void init() override;$/;"	m	class:OpenXcom::MeleeAttackBState
override	Battlescape/MeleeAttackBState.h	/^	void think() override;$/;"	m	class:OpenXcom::MeleeAttackBState
override	Battlescape/MiniMapState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::MiniMapState
override	Battlescape/MiniMapState.h	/^	void think() override;$/;"	m	class:OpenXcom::MiniMapState
override	Battlescape/MiniMapView.h	/^	void draw() override;$/;"	m	class:OpenXcom::MiniMapView
override	Battlescape/MiniMapView.h	/^	void mouseClick(Action *action, State *state) override;$/;"	m	class:OpenXcom::MiniMapView
override	Battlescape/MiniMapView.h	/^	void mouseIn(Action *action, State *state) override;$/;"	m	class:OpenXcom::MiniMapView
override	Battlescape/MiniMapView.h	/^	void mouseOver(Action *action, State *state) override;$/;"	m	class:OpenXcom::MiniMapView
override	Battlescape/MiniMapView.h	/^	void mousePress(Action *action, State *state) override;$/;"	m	class:OpenXcom::MiniMapView
override	Battlescape/NextTurnState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::NextTurnState
override	Battlescape/NextTurnState.h	/^	void init() override;$/;"	m	class:OpenXcom::NextTurnState
override	Battlescape/NextTurnState.h	/^	void resize(int &dX, int &dY) override;$/;"	m	class:OpenXcom::NextTurnState
override	Battlescape/NextTurnState.h	/^	void think() override;$/;"	m	class:OpenXcom::NextTurnState
override	Battlescape/PrimeGrenadeState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::PrimeGrenadeState
override	Battlescape/ProjectileFlyBState.h	/^	void cancel() override;$/;"	m	class:OpenXcom::ProjectileFlyBState
override	Battlescape/ProjectileFlyBState.h	/^	void init() override;$/;"	m	class:OpenXcom::ProjectileFlyBState
override	Battlescape/ProjectileFlyBState.h	/^	void think() override;$/;"	m	class:OpenXcom::ProjectileFlyBState
override	Battlescape/PsiAttackBState.h	/^	void init() override;$/;"	m	class:OpenXcom::PsiAttackBState
override	Battlescape/PsiAttackBState.h	/^	void think() override;$/;"	m	class:OpenXcom::PsiAttackBState
override	Battlescape/ScannerState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::ScannerState
override	Battlescape/ScannerState.h	/^	void think() override;$/;"	m	class:OpenXcom::ScannerState
override	Battlescape/ScannerView.h	/^	void draw() override;$/;"	m	class:OpenXcom::ScannerView
override	Battlescape/ScannerView.h	/^	void mouseClick (Action *action, State *state) override;$/;"	m	class:OpenXcom::ScannerView
override	Battlescape/SkillMenuState.h	/^	void btnActionMenuItemClick(Action *action) override;$/;"	m	class:OpenXcom::SkillMenuState
override	Battlescape/UnitDieBState.h	/^	void cancel() override;$/;"	m	class:OpenXcom::UnitDieBState
override	Battlescape/UnitDieBState.h	/^	void init() override;$/;"	m	class:OpenXcom::UnitDieBState
override	Battlescape/UnitDieBState.h	/^	void think() override;$/;"	m	class:OpenXcom::UnitDieBState
override	Battlescape/UnitFallBState.h	/^	void init() override;$/;"	m	class:OpenXcom::UnitFallBState
override	Battlescape/UnitFallBState.h	/^	void think() override;$/;"	m	class:OpenXcom::UnitFallBState
override	Battlescape/UnitInfoState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::UnitInfoState
override	Battlescape/UnitInfoState.h	/^	void init() override;$/;"	m	class:OpenXcom::UnitInfoState
override	Battlescape/UnitPanicBState.h	/^	void cancel() override;$/;"	m	class:OpenXcom::UnitPanicBState
override	Battlescape/UnitPanicBState.h	/^	void init() override;$/;"	m	class:OpenXcom::UnitPanicBState
override	Battlescape/UnitPanicBState.h	/^	void think() override;$/;"	m	class:OpenXcom::UnitPanicBState
override	Battlescape/UnitTurnBState.h	/^	void cancel() override;$/;"	m	class:OpenXcom::UnitTurnBState
override	Battlescape/UnitTurnBState.h	/^	void init() override;$/;"	m	class:OpenXcom::UnitTurnBState
override	Battlescape/UnitTurnBState.h	/^	void think() override;$/;"	m	class:OpenXcom::UnitTurnBState
override	Battlescape/UnitWalkBState.h	/^	void cancel() override;$/;"	m	class:OpenXcom::UnitWalkBState
override	Battlescape/UnitWalkBState.h	/^	void deinit() override;$/;"	m	class:OpenXcom::UnitWalkBState
override	Battlescape/UnitWalkBState.h	/^	void init() override;$/;"	m	class:OpenXcom::UnitWalkBState
override	Battlescape/UnitWalkBState.h	/^	void think() override;$/;"	m	class:OpenXcom::UnitWalkBState
override	Battlescape/WarningMessage.h	/^	void draw() override;$/;"	m	class:OpenXcom::WarningMessage
override	Battlescape/WarningMessage.h	/^	void initText(Font *big, Font *small, Language *lang) override;$/;"	m	class:OpenXcom::WarningMessage
override	Battlescape/WarningMessage.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::WarningMessage
override	Battlescape/WarningMessage.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::WarningMessage
override	Battlescape/WarningMessage.h	/^	void think() override;$/;"	m	class:OpenXcom::WarningMessage
override	Engine/AdlibMusic.h	/^	void load(SDL_RWops *rwops) override;$/;"	m	class:OpenXcom::AdlibMusic
override	Engine/AdlibMusic.h	/^	void load(const std::string &filename) override;$/;"	m	class:OpenXcom::AdlibMusic
override	Engine/AdlibMusic.h	/^	void play(int loop = -1) const override;$/;"	m	class:OpenXcom::AdlibMusic
override	Engine/InteractiveSurface.h	/^	void setVisible(bool visible) override;$/;"	m	class:OpenXcom::InteractiveSurface
override	Engine/LanguagePlurality.cpp	/^	virtual const char *getSuffix(unsigned n) const override;$/;"	m	class:OpenXcom::CroatianPlurality	file:
override	Engine/LanguagePlurality.cpp	/^	virtual const char *getSuffix(unsigned n) const override;$/;"	m	class:OpenXcom::CyrillicPlurality	file:
override	Engine/LanguagePlurality.cpp	/^	virtual const char *getSuffix(unsigned n) const override;$/;"	m	class:OpenXcom::CzechPlurality	file:
override	Engine/LanguagePlurality.cpp	/^	virtual const char *getSuffix(unsigned n) const override;$/;"	m	class:OpenXcom::NoSingular	file:
override	Engine/LanguagePlurality.cpp	/^	virtual const char *getSuffix(unsigned n) const override;$/;"	m	class:OpenXcom::OneSingular	file:
override	Engine/LanguagePlurality.cpp	/^	virtual const char *getSuffix(unsigned n) const override;$/;"	m	class:OpenXcom::PolishPlurality	file:
override	Engine/LanguagePlurality.cpp	/^	virtual const char *getSuffix(unsigned n) const override;$/;"	m	class:OpenXcom::RomanianPlurality	file:
override	Engine/LanguagePlurality.cpp	/^	virtual const char *getSuffix(unsigned n) const override;$/;"	m	class:OpenXcom::ZeroOneSingular	file:
override	Geoscape/AllocatePsiTrainingState.h	/^	void init() override;$/;"	m	class:OpenXcom::AllocatePsiTrainingState
override	Geoscape/AllocateTrainingState.h	/^	void init() override;$/;"	m	class:OpenXcom::AllocateTrainingState
override	Geoscape/BaseDefenseState.h	/^	void think() override;$/;"	m	class:OpenXcom::BaseDefenseState
override	Geoscape/BuildNewBaseState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::BuildNewBaseState
override	Geoscape/BuildNewBaseState.h	/^	void init() override;$/;"	m	class:OpenXcom::BuildNewBaseState
override	Geoscape/BuildNewBaseState.h	/^	void resize(int &dX, int &dY) override;$/;"	m	class:OpenXcom::BuildNewBaseState
override	Geoscape/BuildNewBaseState.h	/^	void think() override;$/;"	m	class:OpenXcom::BuildNewBaseState
override	Geoscape/ConfirmLandingState.h	/^	void init() override;$/;"	m	class:OpenXcom::ConfirmLandingState
override	Geoscape/DogfightState.h	/^	void think() override;$/;"	m	class:OpenXcom::DogfightState
override	Geoscape/GeoscapeEventState.h	/^	void init() override;$/;"	m	class:OpenXcom::GeoscapeEventState
override	Geoscape/GeoscapeState.h	/^	void blit() override;$/;"	m	class:OpenXcom::GeoscapeState
override	Geoscape/GeoscapeState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::GeoscapeState
override	Geoscape/GeoscapeState.h	/^	void init() override;$/;"	m	class:OpenXcom::GeoscapeState
override	Geoscape/GeoscapeState.h	/^	void resize(int &dX, int &dY) override;$/;"	m	class:OpenXcom::GeoscapeState
override	Geoscape/GeoscapeState.h	/^	void think() override;$/;"	m	class:OpenXcom::GeoscapeState
override	Geoscape/Globe.h	/^	void blit(SDL_Surface *surface) override;$/;"	m	class:OpenXcom::Globe
override	Geoscape/Globe.h	/^	void draw() override;$/;"	m	class:OpenXcom::Globe
override	Geoscape/Globe.h	/^	void keyboardPress(Action *action, State *state) override;$/;"	m	class:OpenXcom::Globe
override	Geoscape/Globe.h	/^	void mouseClick(Action *action, State *state) override;$/;"	m	class:OpenXcom::Globe
override	Geoscape/Globe.h	/^	void mouseOver(Action *action, State *state) override;$/;"	m	class:OpenXcom::Globe
override	Geoscape/Globe.h	/^	void mousePress(Action *action, State *state) override;$/;"	m	class:OpenXcom::Globe
override	Geoscape/Globe.h	/^	void mouseRelease(Action *action, State *state) override;$/;"	m	class:OpenXcom::Globe
override	Geoscape/Globe.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::Globe
override	Geoscape/Globe.h	/^	void think() override;$/;"	m	class:OpenXcom::Globe
override	Geoscape/MultipleTargetsState.h	/^	void init() override;$/;"	m	class:OpenXcom::MultipleTargetsState
override	Geoscape/SelectDestinationState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::SelectDestinationState
override	Geoscape/SelectDestinationState.h	/^	void init() override;$/;"	m	class:OpenXcom::SelectDestinationState
override	Geoscape/SelectDestinationState.h	/^	void resize(int &dX, int &dY) override;$/;"	m	class:OpenXcom::SelectDestinationState
override	Geoscape/SelectDestinationState.h	/^	void think() override;$/;"	m	class:OpenXcom::SelectDestinationState
override	Interface/ArrowButton.h	/^	bool isButtonHandled(Uint8 button = 0) override;$/;"	m	class:OpenXcom::ArrowButton
override	Interface/ArrowButton.h	/^	void draw() override;$/;"	m	class:OpenXcom::ArrowButton
override	Interface/ArrowButton.h	/^	void mouseClick(Action *action, State *state) override;$/;"	m	class:OpenXcom::ArrowButton
override	Interface/ArrowButton.h	/^	void mousePress(Action *action, State *state) override;$/;"	m	class:OpenXcom::ArrowButton
override	Interface/ArrowButton.h	/^	void mouseRelease(Action *action, State *state) override;$/;"	m	class:OpenXcom::ArrowButton
override	Interface/ArrowButton.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::ArrowButton
override	Interface/ArrowButton.h	/^	void think() override;$/;"	m	class:OpenXcom::ArrowButton
override	Interface/Bar.h	/^	void draw() override;$/;"	m	class:OpenXcom::Bar
override	Interface/Bar.h	/^	void setBorderColor(Uint8 bc) override;$/;"	m	class:OpenXcom::Bar
override	Interface/Bar.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::Bar
override	Interface/Bar.h	/^	void setSecondaryColor(Uint8 color) override;$/;"	m	class:OpenXcom::Bar
override	Interface/BattlescapeButton.h	/^	void blit(SDL_Surface *surface) override;$/;"	m	class:OpenXcom::BattlescapeButton
override	Interface/BattlescapeButton.h	/^	void mousePress(Action *action, State *state) override;$/;"	m	class:OpenXcom::BattlescapeButton
override	Interface/BattlescapeButton.h	/^	void mouseRelease(Action *action, State *state) override;$/;"	m	class:OpenXcom::BattlescapeButton
override	Interface/BattlescapeButton.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::BattlescapeButton
override	Interface/BattlescapeButton.h	/^	void setX(int x) override;$/;"	m	class:OpenXcom::BattlescapeButton
override	Interface/BattlescapeButton.h	/^	void setY(int y) override;$/;"	m	class:OpenXcom::BattlescapeButton
override	Interface/ComboBox.h	/^	void blit(SDL_Surface *surface) override;$/;"	m	class:OpenXcom::ComboBox
override	Interface/ComboBox.h	/^	void handle(Action *action, State *state) override;$/;"	m	class:OpenXcom::ComboBox
override	Interface/ComboBox.h	/^	void initText(Font *big, Font *small, Language *lang) override;$/;"	m	class:OpenXcom::ComboBox
override	Interface/ComboBox.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::ComboBox
override	Interface/ComboBox.h	/^	void setHighContrast(bool contrast) override;$/;"	m	class:OpenXcom::ComboBox
override	Interface/ComboBox.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::ComboBox
override	Interface/ComboBox.h	/^	void setX(int x) override;$/;"	m	class:OpenXcom::ComboBox
override	Interface/ComboBox.h	/^	void setY(int y) override;$/;"	m	class:OpenXcom::ComboBox
override	Interface/ComboBox.h	/^	void think() override;$/;"	m	class:OpenXcom::ComboBox
override	Interface/Cursor.h	/^	void draw() override;$/;"	m	class:OpenXcom::Cursor
override	Interface/Cursor.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::Cursor
override	Interface/FpsCounter.h	/^	void draw() override;$/;"	m	class:OpenXcom::FpsCounter
override	Interface/FpsCounter.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::FpsCounter
override	Interface/FpsCounter.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::FpsCounter
override	Interface/FpsCounter.h	/^	void think() override;$/;"	m	class:OpenXcom::FpsCounter
override	Interface/Frame.h	/^	void draw() override;$/;"	m	class:OpenXcom::Frame
override	Interface/Frame.h	/^	void setBorderColor(Uint8 color) override;$/;"	m	class:OpenXcom::Frame
override	Interface/Frame.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::Frame
override	Interface/Frame.h	/^	void setHighContrast(bool contrast) override;$/;"	m	class:OpenXcom::Frame
override	Interface/Frame.h	/^	void setSecondaryColor(Uint8 bg) override;$/;"	m	class:OpenXcom::Frame
override	Interface/ImageButton.h	/^	void mousePress(Action *action, State *state) override;$/;"	m	class:OpenXcom::ImageButton
override	Interface/ImageButton.h	/^	void mouseRelease(Action *action, State *state) override;$/;"	m	class:OpenXcom::ImageButton
override	Interface/ImageButton.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::ImageButton
override	Interface/NumberText.h	/^	void draw() override;$/;"	m	class:OpenXcom::NumberText
override	Interface/NumberText.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::NumberText
override	Interface/NumberText.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::NumberText
override	Interface/ScrollBar.h	/^	void blit(SDL_Surface *surface) override;$/;"	m	class:OpenXcom::ScrollBar
override	Interface/ScrollBar.h	/^	void draw() override;$/;"	m	class:OpenXcom::ScrollBar
override	Interface/ScrollBar.h	/^	void handle(Action *action, State *state) override;$/;"	m	class:OpenXcom::ScrollBar
override	Interface/ScrollBar.h	/^	void mousePress(Action *action, State *state) override;$/;"	m	class:OpenXcom::ScrollBar
override	Interface/ScrollBar.h	/^	void mouseRelease(Action *action, State *state) override;$/;"	m	class:OpenXcom::ScrollBar
override	Interface/ScrollBar.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::ScrollBar
override	Interface/ScrollBar.h	/^	void setHeight(int height) override;$/;"	m	class:OpenXcom::ScrollBar
override	Interface/ScrollBar.h	/^	void setHighContrast(bool contrast) override;$/;"	m	class:OpenXcom::ScrollBar
override	Interface/ScrollBar.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::ScrollBar
override	Interface/ScrollBar.h	/^	void setX(int x) override;$/;"	m	class:OpenXcom::ScrollBar
override	Interface/ScrollBar.h	/^	void setY(int y) override;$/;"	m	class:OpenXcom::ScrollBar
override	Interface/Slider.h	/^	void blit(SDL_Surface *surface) override;$/;"	m	class:OpenXcom::Slider
override	Interface/Slider.h	/^	void handle(Action *action, State *state) override;$/;"	m	class:OpenXcom::Slider
override	Interface/Slider.h	/^	void initText(Font *big, Font *small, Language *lang) override;$/;"	m	class:OpenXcom::Slider
override	Interface/Slider.h	/^	void mousePress(Action *action, State *state) override;$/;"	m	class:OpenXcom::Slider
override	Interface/Slider.h	/^	void mouseRelease(Action *action, State *state) override;$/;"	m	class:OpenXcom::Slider
override	Interface/Slider.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::Slider
override	Interface/Slider.h	/^	void setHighContrast(bool contrast) override;$/;"	m	class:OpenXcom::Slider
override	Interface/Slider.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::Slider
override	Interface/Slider.h	/^	void setX(int x) override;$/;"	m	class:OpenXcom::Slider
override	Interface/Slider.h	/^	void setY(int y) override;$/;"	m	class:OpenXcom::Slider
override	Interface/Text.h	/^	void draw() override;$/;"	m	class:OpenXcom::Text
override	Interface/Text.h	/^	void initText(Font *big, Font *small, Language *lang) override;$/;"	m	class:OpenXcom::Text
override	Interface/Text.h	/^	void mousePress(Action* action, State* state) override;$/;"	m	class:OpenXcom::Text
override	Interface/Text.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::Text
override	Interface/Text.h	/^	void setHighContrast(bool contrast) override;$/;"	m	class:OpenXcom::Text
override	Interface/Text.h	/^	void setSecondaryColor(Uint8 color) override;$/;"	m	class:OpenXcom::Text
override	Interface/TextButton.h	/^	bool isButtonHandled(Uint8 button = 0) override;$/;"	m	class:OpenXcom::TextButton
override	Interface/TextButton.h	/^	void draw() override;$/;"	m	class:OpenXcom::TextButton
override	Interface/TextButton.h	/^	void initText(Font *big, Font *small, Language *lang) override;$/;"	m	class:OpenXcom::TextButton
override	Interface/TextButton.h	/^	void mousePress(Action *action, State *state) override;$/;"	m	class:OpenXcom::TextButton
override	Interface/TextButton.h	/^	void mouseRelease(Action *action, State *state) override;$/;"	m	class:OpenXcom::TextButton
override	Interface/TextButton.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::TextButton
override	Interface/TextButton.h	/^	void setHeight(int height) override;$/;"	m	class:OpenXcom::TextButton
override	Interface/TextButton.h	/^	void setHighContrast(bool contrast) override;$/;"	m	class:OpenXcom::TextButton
override	Interface/TextButton.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::TextButton
override	Interface/TextButton.h	/^	void setWidth(int width) override;$/;"	m	class:OpenXcom::TextButton
override	Interface/TextEdit.h	/^	void draw() override;$/;"	m	class:OpenXcom::TextEdit
override	Interface/TextEdit.h	/^	void handle(Action *action, State *state) override;$/;"	m	class:OpenXcom::TextEdit
override	Interface/TextEdit.h	/^	void initText(Font *big, Font *small, Language *lang) override;$/;"	m	class:OpenXcom::TextEdit
override	Interface/TextEdit.h	/^	void keyboardPress(Action *action, State *state) override;$/;"	m	class:OpenXcom::TextEdit
override	Interface/TextEdit.h	/^	void mousePress(Action *action, State *state) override;$/;"	m	class:OpenXcom::TextEdit
override	Interface/TextEdit.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::TextEdit
override	Interface/TextEdit.h	/^	void setFocus(bool focus, bool modal = true) override;$/;"	m	class:OpenXcom::TextEdit
override	Interface/TextEdit.h	/^	void setHighContrast(bool contrast) override;$/;"	m	class:OpenXcom::TextEdit
override	Interface/TextEdit.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::TextEdit
override	Interface/TextEdit.h	/^	void setSecondaryColor(Uint8 color) override;$/;"	m	class:OpenXcom::TextEdit
override	Interface/TextEdit.h	/^	void think() override;$/;"	m	class:OpenXcom::TextEdit
override	Interface/TextList.h	/^	void blit(SDL_Surface *surface) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void draw() override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void handle(Action *action, State *state) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void initText(Font *big, Font *small, Language *lang) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void mouseClick(Action *action, State *state) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void mouseOut(Action *action, State *state) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void mouseOver(Action *action, State *state) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void mousePress(Action *action, State *state) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void mouseRelease(Action *action, State *state) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void setBorderColor(Uint8 color) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void setHeight(int height) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void setHighContrast(bool contrast) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void setPalette(const SDL_Color *colors, int firstcolor = 0, int ncolors = 256) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void setSecondaryColor(Uint8 color) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void setX(int x) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void setY(int y) override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void think() override;$/;"	m	class:OpenXcom::TextList
override	Interface/TextList.h	/^	void unpress(State *state) override;$/;"	m	class:OpenXcom::TextList
override	Interface/ToggleTextButton.h	/^	void draw() override;$/;"	m	class:OpenXcom::ToggleTextButton
override	Interface/ToggleTextButton.h	/^	void mousePress(Action *action, State *state) override;$/;"	m	class:OpenXcom::ToggleTextButton
override	Interface/ToggleTextButton.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::ToggleTextButton
override	Interface/Window.h	/^	void draw() override;$/;"	m	class:OpenXcom::Window
override	Interface/Window.h	/^	void setColor(Uint8 color) override;$/;"	m	class:OpenXcom::Window
override	Interface/Window.h	/^	void setHighContrast(bool contrast) override;$/;"	m	class:OpenXcom::Window
override	Interface/Window.h	/^	void think() override;$/;"	m	class:OpenXcom::Window
override	Menu/CutsceneState.h	/^	void init() override;$/;"	m	class:OpenXcom::CutsceneState
override	Menu/ListGamesState.h	/^	void init() override;$/;"	m	class:OpenXcom::ListGamesState
override	Menu/ListLoadOriginalState.h	/^	void init() override;$/;"	m	class:OpenXcom::ListLoadOriginalState
override	Menu/ListLoadState.h	/^	void init() override;$/;"	m	class:OpenXcom::ListLoadState
override	Menu/ListLoadState.h	/^	void lstSavesPress(Action *action) override;$/;"	m	class:OpenXcom::ListLoadState
override	Menu/ListSaveState.h	/^	void lstSavesPress(Action *action) override;$/;"	m	class:OpenXcom::ListSaveState
override	Menu/ListSaveState.h	/^	void updateList() override;$/;"	m	class:OpenXcom::ListSaveState
override	Menu/LoadGameState.h	/^	void init() override;$/;"	m	class:OpenXcom::LoadGameState
override	Menu/LoadGameState.h	/^	void think() override;$/;"	m	class:OpenXcom::LoadGameState
override	Menu/MainMenuState.h	/^	void init() override;$/;"	m	class:OpenXcom::GoToMainMenuState
override	Menu/MainMenuState.h	/^	void init() override;$/;"	m	class:OpenXcom::MainMenuState
override	Menu/MainMenuState.h	/^	void resize(int &dX, int &dY) override;$/;"	m	class:OpenXcom::MainMenuState
override	Menu/NewBattleState.h	/^	void init() override;$/;"	m	class:OpenXcom::NewBattleState
override	Menu/NotesState.h	/^	void init() override;$/;"	m	class:OpenXcom::NotesState
override	Menu/OptionsAdvancedState.h	/^	void init() override;$/;"	m	class:OpenXcom::OptionsAdvancedState
override	Menu/OptionsBaseState.h	/^	void init() override;$/;"	m	class:OpenXcom::OptionsBaseState
override	Menu/OptionsBaseState.h	/^	void resize(int &dX, int &dY) override;$/;"	m	class:OpenXcom::OptionsBaseState
override	Menu/OptionsConfirmState.h	/^	void think() override;$/;"	m	class:OpenXcom::OptionsConfirmState
override	Menu/OptionsControlsState.h	/^	void init() override;$/;"	m	class:OpenXcom::OptionsControlsState
override	Menu/OptionsVideoState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::OptionsVideoState
override	Menu/OptionsVideoState.h	/^	void resize(int &, int &) override;$/;"	m	class:OpenXcom::OptionsVideoState
override	Menu/SaveGameState.h	/^	void think() override;$/;"	m	class:OpenXcom::SaveGameState
override	Menu/SlideshowState.h	/^	void think() override;$/;"	m	class:OpenXcom::SlideshowState
override	Menu/StartState.h	/^	void handle(Action *action) override;$/;"	m	class:OpenXcom::StartState
override	Menu/StartState.h	/^	void init() override;$/;"	m	class:OpenXcom::StartState
override	Menu/StartState.h	/^	void think() override;$/;"	m	class:OpenXcom::StartState
override	Menu/VideoState.h	/^	void init() override;$/;"	m	class:OpenXcom::VideoState
override	Mod/ArticleDefinition.h	/^		void load(const YAML::Node& node, int listOrder) override;$/;"	m	class:OpenXcom::ArticleDefinitionArmor
override	Mod/ArticleDefinition.h	/^		void load(const YAML::Node& node, int listOrder) override;$/;"	m	class:OpenXcom::ArticleDefinitionBaseFacility
override	Mod/ArticleDefinition.h	/^		void load(const YAML::Node& node, int listOrder) override;$/;"	m	class:OpenXcom::ArticleDefinitionCraft
override	Mod/ArticleDefinition.h	/^		void load(const YAML::Node& node, int listOrder) override;$/;"	m	class:OpenXcom::ArticleDefinitionCraftWeapon
override	Mod/ArticleDefinition.h	/^		void load(const YAML::Node& node, int listOrder) override;$/;"	m	class:OpenXcom::ArticleDefinitionItem
override	Mod/ArticleDefinition.h	/^		void load(const YAML::Node& node, int listOrder) override;$/;"	m	class:OpenXcom::ArticleDefinitionTFTD
override	Mod/ArticleDefinition.h	/^		void load(const YAML::Node& node, int listOrder) override;$/;"	m	class:OpenXcom::ArticleDefinitionText
override	Mod/ArticleDefinition.h	/^		void load(const YAML::Node& node, int listOrder) override;$/;"	m	class:OpenXcom::ArticleDefinitionTextImage
override	Mod/ArticleDefinition.h	/^		void load(const YAML::Node& node, int listOrder) override;$/;"	m	class:OpenXcom::ArticleDefinitionUfo
override	Mod/ArticleDefinition.h	/^		void load(const YAML::Node& node, int listOrder) override;$/;"	m	class:OpenXcom::ArticleDefinitionVehicle
override	Mod/City.h	/^	int getMarker() const override;$/;"	m	class:OpenXcom::City
override	Mod/City.h	/^	std::string getName(Language *lang) const override;$/;"	m	class:OpenXcom::City
override	Savegame/AlienBase.h	/^	YAML::Node save() const override;$/;"	m	class:OpenXcom::AlienBase
override	Savegame/AlienBase.h	/^	int getMarker() const override;$/;"	m	class:OpenXcom::AlienBase
override	Savegame/AlienBase.h	/^	std::string getType() const override;$/;"	m	class:OpenXcom::AlienBase
override	Savegame/AlienBase.h	/^	void load(const YAML::Node& node) override;$/;"	m	class:OpenXcom::AlienBase
override	Savegame/Base.h	/^	YAML::Node save() const override;$/;"	m	class:OpenXcom::Base
override	Savegame/Base.h	/^	int getMarker() const override;$/;"	m	class:OpenXcom::Base
override	Savegame/Base.h	/^	std::string getName(Language *lang = 0) const override;$/;"	m	class:OpenXcom::Base
override	Savegame/Base.h	/^	std::string getType() const override;$/;"	m	class:OpenXcom::Base
override	Savegame/Craft.h	/^	int getMarker() const override;$/;"	m	class:OpenXcom::Craft
override	Savegame/Craft.h	/^	std::string getDefaultName(Language *lang) const override;$/;"	m	class:OpenXcom::Craft
override	Savegame/Craft.h	/^	std::string getType() const override;$/;"	m	class:OpenXcom::Craft
override	Savegame/Craft.h	/^	void setDestination(Target *dest) override;$/;"	m	class:OpenXcom::Craft
override	Savegame/MissionSite.h	/^	YAML::Node save() const override;$/;"	m	class:OpenXcom::MissionSite
override	Savegame/MissionSite.h	/^	int getMarker() const override;$/;"	m	class:OpenXcom::MissionSite
override	Savegame/MissionSite.h	/^	std::string getMarkerName() const override;$/;"	m	class:OpenXcom::MissionSite
override	Savegame/MissionSite.h	/^	std::string getType() const override;$/;"	m	class:OpenXcom::MissionSite
override	Savegame/MissionSite.h	/^	void load(const YAML::Node& node) override;$/;"	m	class:OpenXcom::MissionSite
override	Savegame/MovingTarget.h	/^	virtual YAML::Node save() const override;$/;"	m	class:OpenXcom::MovingTarget
override	Savegame/MovingTarget.h	/^	virtual void load(const YAML::Node& node) override;$/;"	m	class:OpenXcom::MovingTarget
override	Savegame/Ufo.h	/^	YAML::Node saveId() const override;$/;"	m	class:OpenXcom::Ufo
override	Savegame/Ufo.h	/^	int getMarker() const override;$/;"	m	class:OpenXcom::Ufo
override	Savegame/Ufo.h	/^	int getMarkerId() const override;$/;"	m	class:OpenXcom::Ufo
override	Savegame/Ufo.h	/^	std::string getDefaultName(Language *lang) const override;$/;"	m	class:OpenXcom::Ufo
override	Savegame/Ufo.h	/^	std::string getMarkerName() const override;$/;"	m	class:OpenXcom::Ufo
override	Savegame/Ufo.h	/^	std::string getType() const override;$/;"	m	class:OpenXcom::Ufo
override	Savegame/Ufo.h	/^	void calculateSpeed() override;$/;"	m	class:OpenXcom::Ufo
override	Savegame/Ufo.h	/^	void setDestination(Target *dest) override;$/;"	m	class:OpenXcom::Ufo
override	Savegame/Waypoint.h	/^	int getMarker() const override;$/;"	m	class:OpenXcom::Waypoint
override	Savegame/Waypoint.h	/^	std::string getType() const override;$/;"	m	class:OpenXcom::Waypoint
override	Ufopaedia/StatsForNerdsState.h	/^	void init() override;$/;"	m	class:OpenXcom::StatsForNerdsState
override	Ufopaedia/UfopaediaSelectState.h	/^		void init() override;$/;"	m	class:OpenXcom::UfopaediaSelectState
override	Ufopaedia/UfopaediaStartState.h	/^		void think() override;$/;"	m	class:OpenXcom::UfopaediaStartState
oxceAlternateCraftEquipmentManagement	Engine/Options.inc.h	/^OPT bool oxceAlternateCraftEquipmentManagement;$/;"	v
oxceAutoNightVisionThreshold	Engine/Options.inc.h	/^OPT int oxceAutoNightVisionThreshold;$/;"	v
oxceAutoSell	Engine/Options.inc.h	/^OPT bool oxceAutoSell;$/;"	v
oxceDisableAlienInventory	Engine/Options.inc.h	/^OPT bool oxceDisableAlienInventory;$/;"	v
oxceDisableHitLog	Engine/Options.inc.h	/^OPT bool oxceDisableHitLog;$/;"	v
oxceDisableInventoryTuCost	Engine/Options.inc.h	/^OPT bool oxceDisableInventoryTuCost;$/;"	v
oxceDisableProductionDependencyTree	Engine/Options.inc.h	/^OPT bool oxceDisableProductionDependencyTree;$/;"	v
oxceDisableStatsForNerds	Engine/Options.inc.h	/^OPT bool oxceDisableStatsForNerds;$/;"	v
oxceDisableTechTreeViewer	Engine/Options.inc.h	/^OPT bool oxceDisableTechTreeViewer;$/;"	v
oxceEmbeddedOnly	Engine/Options.inc.h	/^OPT bool oxceEmbeddedOnly;$/;"	v
oxceEnableOffCentreShooting	Engine/Options.inc.h	/^OPT bool oxceEnableOffCentreShooting;$/;"	v
oxceEnablePaletteFlickerFix	Engine/Options.inc.h	/^OPT bool oxceEnablePaletteFlickerFix;$/;"	v
oxceEnableSlackingIndicator	Engine/Options.inc.h	/^OPT bool oxceEnableSlackingIndicator;$/;"	v
oxceEnableUnitResponseSounds	Engine/Options.inc.h	/^OPT bool oxceEnableUnitResponseSounds;$/;"	v
oxceFatFingerLinks	Engine/Options.inc.h	/^OPT bool oxceFatFingerLinks;$/;"	v
oxceGeoSlowdownFactor	Engine/Options.inc.h	/^OPT int oxceGeoSlowdownFactor;$/;"	v
oxceHighlightNewTopicsHidden	Engine/Options.inc.h	/^OPT bool oxceHighlightNewTopicsHidden;$/;"	v
oxceInterceptGuiMaintenanceTimeHidden	Engine/Options.inc.h	/^OPT int oxceInterceptGuiMaintenanceTimeHidden;$/;"	v
oxceLinks	Engine/Options.inc.h	/^OPT bool oxceLinks;$/;"	v
oxceListVFSContents	Engine/Options.inc.h	/^OPT bool oxceListVFSContents;$/;"	v
oxceManufactureFilterSuppliesOK	Engine/Options.inc.h	/^OPT bool oxceManufactureFilterSuppliesOK;$/;"	v
oxceManufactureScrollSpeed	Engine/Options.inc.h	/^OPT int oxceManufactureScrollSpeed;$/;"	v
oxceManufactureScrollSpeedWithCtrl	Engine/Options.inc.h	/^OPT int oxceManufactureScrollSpeedWithCtrl;$/;"	v
oxceMaxEquipmentLayoutTemplates	Engine/Options.inc.h	/^OPT int oxceMaxEquipmentLayoutTemplates;$/;"	v
oxceModValidationLevel	Engine/Options.inc.h	/^OPT int oxceModValidationLevel;$/;"	v
oxceNightVisionColor	Engine/Options.inc.h	/^OPT int oxceNightVisionColor;$/;"	v
oxcePersonalLayoutIncludingArmor	Engine/Options.inc.h	/^OPT bool oxcePersonalLayoutIncludingArmor;$/;"	v
oxcePlayBriefingMusicDuringEquipment	Engine/Options.inc.h	/^OPT bool oxcePlayBriefingMusicDuringEquipment;$/;"	v
oxceRawScreenShots	Engine/Options.inc.h	/^OPT bool oxceRawScreenShots;$/;"	v
oxceRecommendedOptionsWereSet	Engine/Options.inc.h	/^OPT bool oxceRecommendedOptionsWereSet;$/;"	v
oxceRememberDisabledCraftWeapons	Engine/Options.inc.h	/^OPT bool oxceRememberDisabledCraftWeapons;$/;"	v
oxceResearchScrollSpeed	Engine/Options.inc.h	/^OPT int oxceResearchScrollSpeed;$/;"	v
oxceResearchScrollSpeedWithCtrl	Engine/Options.inc.h	/^OPT int oxceResearchScrollSpeedWithCtrl;$/;"	v
oxceStartUpTextMode	Engine/Options.inc.h	/^OPT int oxceStartUpTextMode;$/;"	v
oxceThrottleMouseMoveEvent	Engine/Options.inc.h	/^OPT int oxceThrottleMouseMoveEvent;$/;"	v
oxceThumbButtons	Engine/Options.inc.h	/^OPT bool oxceThumbButtons;$/;"	v
oxceToggleBrightnessType	Engine/Options.inc.h	/^OPT int oxceToggleBrightnessType;$/;"	v
oxceToggleNightVisionType	Engine/Options.inc.h	/^OPT int oxceToggleNightVisionType;$/;"	v
oxceTogglePersonalLightType	Engine/Options.inc.h	/^OPT int oxceTogglePersonalLightType;$/;"	v
oxceUfoLandingAlert	Engine/Options.inc.h	/^OPT bool oxceUfoLandingAlert;$/;"	v
oxceUpdateCheck	Engine/Options.inc.h	/^OPT bool oxceUpdateCheck;$/;"	v
oxceWoundedDefendBaseIf	Engine/Options.inc.h	/^OPT int oxceWoundedDefendBaseIf;$/;"	v
p	Engine/Scalers/xbrz.cpp	/^    \/**\/m, n, o, p;$/;"	m	struct:__anon10::Kernel_4x4	file:
paethPredictor	lodepng.cpp	/^static unsigned char paethPredictor(short a, short b, short c)$/;"	f	file:
painKillers	Savegame/BattleUnit.cpp	/^void BattleUnit::painKillers(int moraleAmount, float painKillersStrength)$/;"	f	class:OpenXcom::BattleUnit
palOffset	Engine/Palette.h	/^	static inline int palOffset(int palette) { return palette*(768+6); }$/;"	f	class:OpenXcom::Palette
palette	Mod/AlienDeployment.h	/^	int palette, textOffset;$/;"	m	struct:OpenXcom::BriefingData
palette	lodepng.h	/^  unsigned char palette[1024]; \/*Remembers up to the first 256 RGBA colors, in no particular order*\/$/;"	m	struct:LodePNGColorProfile
palette	lodepng.h	/^  unsigned char* palette; \/*palette in RGBARGBA... order. When allocated, must be either 0, or have size 1024*\/$/;"	m	struct:LodePNGColorMode
paletteName	Menu/TestState.h	/^	std::string paletteName;$/;"	m	struct:OpenXcom::PaletteTestMetadata
palettePath	Menu/TestState.h	/^	std::string palettePath;$/;"	m	struct:OpenXcom::PaletteTestMetadata
palettesize	lodepng.h	/^  size_t palettesize; \/*palette size in number of colors (amount of bytes is 4 * palettesize)*\/$/;"	m	struct:LodePNGColorMode
pan	Engine/Adlib/adlplayer.cpp	/^	int				pan;$/;"	m	struct:struc_adlib_channels	file:
parse	Engine/Script.cpp	/^	ScriptRefData parse(const ParserWriter& ph) const$/;"	f	class:OpenXcom::SelectedToken
parse	Engine/ScriptBind.h	/^	static bool parse(ParserWriter& ph, const ScriptRefData& t)$/;"	f	struct:OpenXcom::helper::ArgFuncDef
parse	Engine/ScriptBind.h	/^	static bool parse(ParserWriter& ph, const ScriptRefData& t)$/;"	f	struct:OpenXcom::helper::ArgLabelDef
parse	Engine/ScriptBind.h	/^	static bool parse(ParserWriter& ph, const ScriptRefData& t)$/;"	f	struct:OpenXcom::helper::ArgNullDef
parse	Engine/ScriptBind.h	/^	static bool parse(ParserWriter& ph, const ScriptRefData& t)$/;"	f	struct:OpenXcom::helper::ArgRawDef
parse	Engine/ScriptBind.h	/^	static bool parse(ParserWriter& ph, const ScriptRefData& t)$/;"	f	struct:OpenXcom::helper::ArgRegDef
parse	Engine/ScriptBind.h	/^	static bool parse(ParserWriter& ph, const ScriptRefData& t)$/;"	f	struct:OpenXcom::helper::ArgTextDef
parse	Engine/ScriptBind.h	/^	static bool parse(ParserWriter& ph, const ScriptRefData& t)$/;"	f	struct:OpenXcom::helper::ArgValueDef
parse	Engine/ScriptBind.h	/^	static int parse(ParserWriter& ph, const ScriptRefData* begin)$/;"	f	struct:OpenXcom::helper::Arg
parse	Engine/ScriptBind.h	/^	static int parse(ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	struct:OpenXcom::helper::ArgColection
parse	Engine/ScriptBind.h	/^	static int parse(ParserWriter& ph, const ScriptRefData* t)$/;"	f	struct:OpenXcom::helper::Arg
parse	Engine/ScriptBind.h	/^	static int parse(ParserWriter& ph, const ScriptRefData** begin, const ScriptRefData* end)$/;"	f	struct:OpenXcom::helper::Arg
parse	Engine/ScriptBind.h	/^	static int parse(ParserWriter& ph, const ScriptRefData** begin, const ScriptRefData* end)$/;"	f	struct:OpenXcom::helper::ArgInternal
parseBase	Engine/Script.cpp	/^bool ScriptParserBase::parseBase(ScriptContainerBase& destScript, const std::string& parentName, const std::string& srcCode) const$/;"	f	class:OpenXcom::ScriptParserBase
parseBegin	Engine/Script.cpp	/^bool parseBegin(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseBreak	Engine/Script.cpp	/^bool parseBreak(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseBuildinProc	Engine/Script.cpp	/^bool parseBuildinProc(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseCode	Engine/Script.cpp	/^void ScriptParserBase::parseCode(ScriptContainerBase& container, const std::string& parentName, const std::string& srcCode) const$/;"	f	class:OpenXcom::ScriptParserBase
parseCode	Engine/Script.cpp	/^void ScriptParserEventsBase::parseCode(ScriptContainerEventsBase& container, const std::string& type, const std::string& srcCode) const$/;"	f	class:OpenXcom::ScriptParserEventsBase
parseConditionImpl	Engine/Script.cpp	/^bool parseConditionImpl(ParserWriter& ph, ScriptRefData truePos, ScriptRefData falsePos, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseContinue	Engine/Script.cpp	/^bool parseContinue(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseCustomProc	Engine/Script.cpp	/^bool parseCustomProc(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseDebugLog	Engine/Script.cpp	/^bool parseDebugLog(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseDummy	Engine/Script.cpp	/^bool parseDummy(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseElse	Engine/Script.cpp	/^bool parseElse(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseEnd	Engine/Script.cpp	/^bool parseEnd(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseFullConditionImpl	Engine/Script.cpp	/^bool parseFullConditionImpl(ParserWriter& ph, ScriptRefData falsePos, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseIf	Engine/Script.cpp	/^bool parseIf(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseLoop	Engine/Script.cpp	/^bool parseLoop(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseNode	Engine/Script.cpp	/^void ScriptParserBase::parseNode(ScriptContainerBase& container, const std::string& parentName, const YAML::Node& node) const$/;"	f	class:OpenXcom::ScriptParserBase
parseNode	Engine/Script.cpp	/^void ScriptParserEventsBase::parseNode(ScriptContainerEventsBase& container, const std::string& type, const YAML::Node& node) const$/;"	f	class:OpenXcom::ScriptParserEventsBase
parseReturn	Engine/Script.cpp	/^bool parseReturn(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseVar	Engine/Script.cpp	/^bool parseVar(const ScriptProcData& spd, ParserWriter& ph, const ScriptRefData* begin, const ScriptRefData* end)$/;"	f	namespace:OpenXcom::__anon8
parseVariableImpl	Engine/Script.cpp	/^bool parseVariableImpl(ParserWriter& ph, ScriptRefData reg, ScriptRefData val = {})$/;"	f	namespace:OpenXcom::__anon8
parseVersion	Engine/CrossPlatform.cpp	/^std::array<int, 4> parseVersion(const std::string& newVersion)$/;"	f	namespace:OpenXcom::CrossPlatform
parser	Engine/ScriptBind.h	/^	ScriptParserBase* parser;$/;"	m	struct:OpenXcom::BindBase
parser	Engine/ScriptBind.h	/^	const ScriptParserBase& parser;$/;"	m	struct:OpenXcom::ParserWriter
password	Engine/Options.inc.h	/^OPT std::string password;$/;"	v
patch	Engine/GMCat.cpp	/^	unsigned int patch;$/;"	m	struct:OpenXcom::output_status	file:
pathFromWindows	Engine/CrossPlatform.cpp	/^static std::string pathFromWindows(const wchar_t *pathW) {$/;"	f	namespace:OpenXcom::CrossPlatform
pathToWindows	Engine/CrossPlatform.cpp	/^static std::wstring pathToWindows(const std::string& path, bool reslash = true) {$/;"	f	namespace:OpenXcom::CrossPlatform
pause	Engine/Music.cpp	/^void Music::pause()$/;"	f	class:OpenXcom::Music
pauseMode	Engine/Options.inc.h	/^	soundVolume, musicVolume, uiVolume, audioSampleRate, audioBitDepth, audioChunkSize, pauseMode, windowedModePositionX, windowedModePositionY, FPS, FPSInactive,$/;"	v
peek_u16	Engine/Adlib/adlplayer.cpp	/^static inline unsigned short peek_u16(const unsigned char *ptr)$/;"	f	file:
penalty	Battlescape/PathfindingNode.h	/^	PathfindingCost penalty = { };$/;"	m	struct:OpenXcom::PathfindingStep
percent	Engine/RNG.cpp	/^bool percent(int value)$/;"	f	namespace:OpenXcom::RNG
percent	Engine/RNG.h	/^		bool percent(int value)$/;"	f	class:OpenXcom::RNG::RandomState
percent	Mod/Unit.h	/^	static UnitStats percent(const UnitStats& base, const UnitStats& percent, int multipler = 1)$/;"	f	struct:OpenXcom::UnitStats
percentageOutsideUfo	Mod/AlienDeployment.h	/^	int percentageOutsideUfo;$/;"	m	struct:OpenXcom::DeploymentData
performMeleeAttack	Battlescape/MeleeAttackBState.cpp	/^void MeleeAttackBState::performMeleeAttack(int terrainMeleeTilePart)$/;"	f	class:OpenXcom::MeleeAttackBState
performTransformation	Basescape/SoldierTransformationState.cpp	/^void SoldierTransformationState::performTransformation()$/;"	f	class:OpenXcom::SoldierTransformationState
persistToggles	Battlescape/Map.cpp	/^void Map::persistToggles()$/;"	f	class:OpenXcom::Map
phys_defined	lodepng.h	/^  unsigned phys_defined; \/*if 0, there is no pHYs chunk and the values below are undefined, if 1 else there is one*\/$/;"	m	struct:LodePNGInfo
phys_unit	lodepng.h	/^  unsigned phys_unit; \/*may be 0 (unknown unit) or 1 (metre)*\/$/;"	m	struct:LodePNGInfo
phys_x	lodepng.h	/^  unsigned phys_x; \/*pixels per unit in x direction*\/$/;"	m	struct:LodePNGInfo
phys_y	lodepng.h	/^  unsigned phys_y; \/*pixels per unit in y direction*\/$/;"	m	struct:LodePNGInfo
pickTerrain	Battlescape/BattlescapeGenerator.cpp	/^RuleTerrain* BattlescapeGenerator::pickTerrain(std::string terrainName)$/;"	f	class:OpenXcom::BattlescapeGenerator
pitch	Engine/ShaderDrawHelper.h	/^	inline int pitch() const$/;"	f	class:OpenXcom::helper::ShaderBase
placeItemByLayout	Battlescape/BattlescapeGenerator.cpp	/^bool BattlescapeGenerator::placeItemByLayout(BattleItem *item, const std::vector<BattleItem*> &itemList)$/;"	f	class:OpenXcom::BattlescapeGenerator
placeReinforcementNearFriend	Battlescape/NextTurnState.cpp	/^bool NextTurnState::placeReinforcementNearFriend(BattleUnit *unit)$/;"	f	class:OpenXcom::NextTurnState
placeUnitNearFriend	Battlescape/BattlescapeGenerator.cpp	/^bool BattlescapeGenerator::placeUnitNearFriend(BattleUnit *unit)$/;"	f	class:OpenXcom::BattlescapeGenerator
placeUnitNearPosition	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::placeUnitNearPosition(BattleUnit *unit, const Position& entryPoint, bool largeFriend)$/;"	f	class:OpenXcom::SavedBattleGame
play	Engine/AdlibMusic.cpp	/^void AdlibMusic::play(int) const$/;"	f	class:OpenXcom::AdlibMusic
play	Engine/FlcPlayer.cpp	/^void FlcPlayer::play(bool skipLastFrame)$/;"	f	class:OpenXcom::FlcPlayer
play	Engine/Music.cpp	/^void Music::play(int loop) const$/;"	f	class:OpenXcom::Music
play	Engine/Sound.cpp	/^void Sound::play(int channel, int angle, int distance) const$/;"	f	class:OpenXcom::Sound
playAudioFrame	Engine/FlcPlayer.cpp	/^void FlcPlayer::playAudioFrame(Uint16 sampleRate)$/;"	f	class:OpenXcom::FlcPlayer
playDeathSound	Battlescape/UnitDieBState.cpp	/^void UnitDieBState::playDeathSound()$/;"	f	class:OpenXcom::UnitDieBState
playIntro	Engine/Options.inc.h	/^OPT bool fullscreen, asyncBlit, playIntro, useScaleFilter, useHQXFilter, useXBRZFilter, useOpenGL, checkOpenGLErrors, vSyncForOpenGL, useOpenGLSmoothing,$/;"	v
playMovementSound	Battlescape/UnitWalkBState.cpp	/^void UnitWalkBState::playMovementSound()$/;"	f	class:OpenXcom::UnitWalkBState
playMusic	Mod/Mod.cpp	/^void Mod::playMusic(const std::string &name, int id)$/;"	f	class:OpenXcom::Mod
playRandomAmbientSound	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::playRandomAmbientSound()$/;"	f	class:OpenXcom::SavedBattleGame
playSound	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::playSound(int sound)$/;"	f	class:OpenXcom::BattlescapeGame
playSound	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::playSound(int sound, const Position &pos)$/;"	f	class:OpenXcom::BattlescapeGame
playSound	Battlescape/Inventory.cpp	/^void Inventory::playSound(int sound)$/;"	f	class:OpenXcom::Inventory
playUnitResponseSound	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::playUnitResponseSound(BattleUnit *unit, int type)$/;"	f	class:OpenXcom::BattlescapeGame
playVideoFrame	Engine/FlcPlayer.cpp	/^void FlcPlayer::playVideoFrame()$/;"	f	class:OpenXcom::FlcPlayer
playableUnitSelected	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::playableUnitSelected() const$/;"	f	class:OpenXcom::BattlescapeGame
playableUnitSelected	Battlescape/BattlescapeState.cpp	/^bool BattlescapeState::playableUnitSelected()$/;"	f	class:OpenXcom::BattlescapeState
player	Engine/AdlibMusic.cpp	/^void AdlibMusic::player(void *udata, Uint8 *stream, int len)$/;"	f	class:OpenXcom::AdlibMusic
playingBuffer	Engine/FlcPlayer.h	/^		AudioBuffer *playingBuffer;$/;"	m	struct:OpenXcom::FlcPlayer::AudioData
pointBack	Geoscape/Globe.cpp	/^bool Globe::pointBack(double lon, double lat) const$/;"	f	class:OpenXcom::Globe
pointerByteOffset	Engine/ShaderDrawHelper.h	/^Ptr* pointerByteOffset(Ptr* base, int offset)$/;"	f	namespace:OpenXcom::helper
pointerByteOffset	Engine/ShaderDrawHelper.h	/^const Ptr* pointerByteOffset(const Ptr* base, int offset)$/;"	f	namespace:OpenXcom::helper
pol	Geoscape/Cord.h	/^	Cord& operator=(const Cord& pol) = default;$/;"	m	struct:OpenXcom::Cord
pol	Geoscape/Cord.h	/^	CordPolar& operator=(const CordPolar& pol) = default;$/;"	m	struct:OpenXcom::CordPolar
pol	Geoscape/Cord.h	/^	CordPolar(const CordPolar& pol) = default;$/;"	m	struct:OpenXcom::CordPolar
polarToCart	Geoscape/Globe.cpp	/^void Globe::polarToCart(double lon, double lat, Sint16 *x, Sint16 *y) const$/;"	f	class:OpenXcom::Globe
polarToCart	Geoscape/Globe.cpp	/^void Globe::polarToCart(double lon, double lat, double *x, double *y) const$/;"	f	class:OpenXcom::Globe
pop	Battlescape/PathfindingOpenSet.cpp	/^PathfindingNode *PathfindingOpenSet::pop()$/;"	f	class:OpenXcom::PathfindingOpenSet
popScopeBlock	Engine/Script.cpp	/^ParserWriter::Block ParserWriter::popScopeBlock()$/;"	f	class:OpenXcom::ParserWriter
popState	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::popState()$/;"	f	class:OpenXcom::BattlescapeGame
popState	Engine/Game.cpp	/^void Game::popState()$/;"	f	class:OpenXcom::Game
populateBuildList	Basescape/BuildFacilitiesState.cpp	/^void BuildFacilitiesState::populateBuildList()$/;"	f	class:OpenXcom::BuildFacilitiesState
populateBuildList	Basescape/SelectStartFacilityState.cpp	/^void SelectStartFacilityState::populateBuildList()$/;"	f	class:OpenXcom::SelectStartFacilityState
populateVerticalLevels	Battlescape/BattlescapeGenerator.cpp	/^bool BattlescapeGenerator::populateVerticalLevels(MapScript *command)$/;"	f	class:OpenXcom::BattlescapeGenerator
popup	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::popup(State *state)$/;"	f	class:OpenXcom::BattlescapeState
popup	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::popup(State *state)$/;"	f	class:OpenXcom::GeoscapeState
popup	Interface/Window.cpp	/^void Window::popup()$/;"	f	class:OpenXcom::Window
popupTarget	Geoscape/MultipleTargetsState.cpp	/^void MultipleTargetsState::popupTarget(Target *target)$/;"	f	class:OpenXcom::MultipleTargetsState
popupTarget	Geoscape/UfoTrackerState.cpp	/^void UfoTrackerState::popupTarget(Target *target)$/;"	f	class:OpenXcom::UfoTrackerState
portDirection	Engine/Adlib/fmopl.h	/^	UINT8 portDirection;$/;"	m	struct:fm_opl_f
portLatch	Engine/Adlib/fmopl.h	/^	UINT8 portLatch;$/;"	m	struct:fm_opl_f
port_param	Engine/Adlib/fmopl.h	/^	int port_param;$/;"	m	struct:fm_opl_f
porthandler_r	Engine/Adlib/fmopl.h	/^	OPL_PORTHANDLER_R porthandler_r;$/;"	m	struct:fm_opl_f
porthandler_w	Engine/Adlib/fmopl.h	/^	OPL_PORTHANDLER_W porthandler_w;$/;"	m	struct:fm_opl_f
pos	Battlescape/PathfindingNode.h	/^	Position pos = { };$/;"	m	struct:OpenXcom::PathfindingStep
pos	Battlescape/Position.h	/^	constexpr Position& operator=(const Position& pos) = default;$/;"	m	class:OpenXcom::Position
pos	Battlescape/Position.h	/^	constexpr Position(const Position& pos) = default;$/;"	m	class:OpenXcom::Position
pos	Engine/ScriptBind.h	/^	static constexpr int pos(int ver, int pos)$/;"	f	struct:OpenXcom::helper::ArgColection
pos	Savegame/Craft.h	/^	Position pos;$/;"	m	struct:OpenXcom::VehicleDeploymentData
position	Mod/MapBlock.h	/^	Position position;$/;"	m	struct:OpenXcom::RandomizedItems
positionHaveSameXY	Battlescape/Map.cpp	/^static bool positionHaveSameXY(Position a, Position b)$/;"	f	namespace:OpenXcom
positionInRangeXY	Battlescape/Map.cpp	/^static bool positionInRangeXY(Position a, Position b, int diff)$/;"	f	namespace:OpenXcom
positions	Engine/ScriptBind.h	/^		std::vector<std::pair<ReservedPos<T>, Ref>> positions;$/;"	m	class:OpenXcom::ParserWriter::ReservedCrossRefrenece
postMissionProcedures	Savegame/BattleUnit.cpp	/^bool BattleUnit::postMissionProcedures(const Mod *mod, SavedGame *geoscape, SavedBattleGame *battle, StatAdjustment &statsDiff)$/;"	f	class:OpenXcom::BattleUnit
postPathProcedures	Battlescape/UnitWalkBState.cpp	/^void UnitWalkBState::postPathProcedures()$/;"	f	class:OpenXcom::UnitWalkBState
postProcessScanlines	lodepng.cpp	/^static unsigned postProcessScanlines(unsigned char* out, unsigned char* in,$/;"	f	file:
powerBonus	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
preProcessCorners	Engine/Scalers/xbrz.cpp	/^BlendResult preProcessCorners(const Kernel_4x4& ker, const xbrz::ScalerCfg& cfg) \/\/result: F, G, J, K corners of "GradientType"$/;"	f	namespace:__anon10
preProcessScanlines	lodepng.cpp	/^static unsigned preProcessScanlines(unsigned char** out, size_t* outsize, const unsigned char* in,$/;"	f	file:
predefined_filters	lodepng.h	/^  const unsigned char* predefined_filters;$/;"	m	struct:LodePNGEncoderSettings
preferredMusic	Engine/Options.inc.h	/^OPT MusicFormat preferredMusic;$/;"	v
preferredSound	Engine/Options.inc.h	/^OPT SoundFormat preferredSound;$/;"	v
preferredVideo	Engine/Options.inc.h	/^OPT VideoFormat preferredVideo;$/;"	v
prepareBannedFlag	Savegame/BattleUnit.cpp	/^void BattleUnit::prepareBannedFlag(const RuleStartingCondition* sc)$/;"	f	class:OpenXcom::BattleUnit
prepareDebriefing	Battlescape/DebriefingState.cpp	/^void DebriefingState::prepareDebriefing()$/;"	f	class:OpenXcom::DebriefingState
prepareEnergy	Savegame/BattleUnit.cpp	/^void BattleUnit::prepareEnergy(int energy)$/;"	f	class:OpenXcom::BattleUnit
prepareHealth	Savegame/BattleUnit.cpp	/^void BattleUnit::prepareHealth(int health)$/;"	f	class:OpenXcom::BattleUnit
prepareMana	Savegame/BattleUnit.cpp	/^void BattleUnit::prepareMana(int mana)$/;"	f	class:OpenXcom::BattleUnit
prepareMorale	Savegame/BattleUnit.cpp	/^void BattleUnit::prepareMorale(int morale)$/;"	f	class:OpenXcom::BattleUnit
prepareNewTurn	Savegame/BattleUnit.cpp	/^void BattleUnit::prepareNewTurn(bool fullProcess)$/;"	f	class:OpenXcom::BattleUnit
prepareNewTurn	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::prepareNewTurn()$/;"	f	class:OpenXcom::SavedBattleGame
prepareNewTurn	Savegame/Tile.cpp	/^void Tile::prepareNewTurn(bool smokeDamage)$/;"	f	class:OpenXcom::Tile
prepareSoldierStatsWithBonuses	Savegame/Base.cpp	/^void Base::prepareSoldierStatsWithBonuses()$/;"	f	class:OpenXcom::Base
prepareStatsWithBonuses	Savegame/Soldier.cpp	/^bool Soldier::prepareStatsWithBonuses(const Mod *mod)$/;"	f	class:OpenXcom::Soldier
prepareStun	Savegame/BattleUnit.cpp	/^void BattleUnit::prepareStun(int stun)$/;"	f	class:OpenXcom::BattleUnit
prepareTimeUnits	Savegame/BattleUnit.cpp	/^void BattleUnit::prepareTimeUnits(int tu)$/;"	f	class:OpenXcom::BattleUnit
prepareUnitResponseSounds	Savegame/BattleUnit.cpp	/^void BattleUnit::prepareUnitResponseSounds(const Mod *mod)$/;"	f	class:OpenXcom::BattleUnit
prepareUnitSounds	Savegame/BattleUnit.cpp	/^void BattleUnit::prepareUnitSounds()$/;"	f	class:OpenXcom::BattleUnit
prev	Ufopaedia/Ufopaedia.cpp	/^	void Ufopaedia::prev(Game *game, std::shared_ptr<ArticleCommonState> state)$/;"	f	class:OpenXcom::Ufopaedia
prevArticle	Ufopaedia/ArticleState.cpp	/^	void ArticleCommonState::prevArticle()$/;"	f	class:OpenXcom::ArticleCommonState
prevArticlePage	Ufopaedia/ArticleState.cpp	/^	void ArticleCommonState::prevArticlePage()$/;"	f	class:OpenXcom::ArticleCommonState
prevDetail	Ufopaedia/Ufopaedia.cpp	/^	void Ufopaedia::prevDetail(Game *game, std::shared_ptr<ArticleCommonState> state, bool debug, bool ids, bool defaults)$/;"	f	class:OpenXcom::Ufopaedia
prev_cmd	Engine/Adlib/adlplayer.cpp	/^	unsigned char	prev_cmd;$/;"	m	struct:struc_instruments	file:
prevcmd	Engine/GMCat.cpp	/^	unsigned char prevcmd;$/;"	m	struct:OpenXcom::output_status	file:
previewClick	Geoscape/DogfightState.cpp	/^void DogfightState::previewClick(Action *)$/;"	f	class:OpenXcom::DogfightState
previewPath	Battlescape/Pathfinding.cpp	/^bool Pathfinding::previewPath(bool bRemove)$/;"	f	class:OpenXcom::Pathfinding
primaryAction	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::primaryAction(Position pos)$/;"	f	class:OpenXcom::BattlescapeGame
processArgs	Engine/CrossPlatform.cpp	/^void processArgs (int argc, char *argv[])$/;"	f	namespace:OpenXcom::CrossPlatform
processCommand	Geoscape/GeoscapeState.cpp	/^bool GeoscapeState::processCommand(RuleMissionScript *command)$/;"	f	class:OpenXcom::GeoscapeState
processMissionSite	Geoscape/GeoscapeState.cpp	/^bool GeoscapeState::processMissionSite(MissionSite *site)$/;"	f	class:OpenXcom::GeoscapeState
processSoldier	Savegame/SavedGame.cpp	/^void SavedGame::processSoldier(Soldier *soldier, PromotionInfo &soldierData)$/;"	f	class:OpenXcom::SavedGame
processText	Interface/Text.cpp	/^void Text::processText()$/;"	f	class:OpenXcom::Text
productionProgress_e	Savegame/Production.h	/^enum productionProgress_e { PROGRESS_NOT_COMPLETE, PROGRESS_COMPLETE, PROGRESS_NOT_ENOUGH_MONEY, PROGRESS_NOT_ENOUGH_MATERIALS, PROGRESS_NOT_ENOUGH_LIVING_SPACE, PROGRESS_MAX, PROGRESS_CONSTRUCTION };$/;"	g	namespace:OpenXcom
projectileAction	Battlescape/AIModule.cpp	/^void AIModule::projectileAction()$/;"	f	class:OpenXcom::AIModule
projectileHitUnit	Battlescape/ProjectileFlyBState.cpp	/^void ProjectileFlyBState::projectileHitUnit(Position pos)$/;"	f	class:OpenXcom::ProjectileFlyBState
promoteRank	Savegame/Soldier.cpp	/^void Soldier::promoteRank()$/;"	f	class:OpenXcom::Soldier
proximityExplode	Mod/RuleItem.h	/^	bool proximityExplode = false;$/;"	m	struct:OpenXcom::RuleItemFuseTrigger
proximityTrigger	Mod/RuleItem.h	/^	bool proximityTrigger = false;$/;"	m	struct:OpenXcom::RuleItemFuseTrigger
psiAction	Battlescape/AIModule.cpp	/^bool AIModule::psiAction()$/;"	f	class:OpenXcom::AIModule
psiAttack	Battlescape/TileEngine.cpp	/^bool TileEngine::psiAttack(BattleActionAttack attack, BattleUnit *victim)$/;"	f	class:OpenXcom::TileEngine
psiAttackCalculate	Battlescape/TileEngine.cpp	/^int TileEngine::psiAttackCalculate(BattleActionAttack::ReadOnly attack, const BattleUnit *victim)$/;"	f	class:OpenXcom::TileEngine
psiAttackMessage	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::psiAttackMessage(BattleActionAttack attack, BattleUnit *victim)$/;"	f	class:OpenXcom::BattlescapeGame
psiButtonAction	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::psiButtonAction()$/;"	f	class:OpenXcom::BattlescapeGame
psiSkill	Mod/Unit.h	/^	Type tu, stamina, health, bravery, reactions, firing, throwing, strength, psiStrength, psiSkill, melee, mana;$/;"	m	struct:OpenXcom::UnitStats
psiSkillStat	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::psiSkillStat(Game *game, Soldier *s)$/;"	f	class:OpenXcom
psiSkillStatBase	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::psiSkillStatBase(Game *game, Soldier *s)$/;"	f	class:OpenXcom
psiSkillStatPlus	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::psiSkillStatPlus(Game *game, Soldier *s)$/;"	f	class:OpenXcom
psiStrength	Mod/Unit.h	/^	Type tu, stamina, health, bravery, reactions, firing, throwing, strength, psiStrength, psiSkill, melee, mana;$/;"	m	struct:OpenXcom::UnitStats
psiStrengthEval	Engine/Options.inc.h	/^	allowBuildingQueue, showFundsOnGeoscape, psiStrengthEval, allowPsiStrengthImprovement, fieldPromotions, meetingPoint;$/;"	v
psiStrengthStat	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::psiStrengthStat(Game *game, Soldier *s)$/;"	f	class:OpenXcom
psiStrengthStatBase	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::psiStrengthStatBase(Game *game, Soldier *s)$/;"	f	class:OpenXcom
psiStrengthStatPlus	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::psiStrengthStatPlus(Game *game, Soldier *s)$/;"	f	class:OpenXcom
ptr	Engine/Script.h	/^	const char* ptr;$/;"	m	struct:OpenXcom::ScriptText
ptr	Engine/ShaderDrawHelper.h	/^	inline PixelPtr ptr() const$/;"	f	class:OpenXcom::helper::ShaderBase
ptr_pos_x	Engine/ShaderDrawHelper.h	/^	PixelPtr ptr_pos_x;$/;"	m	struct:OpenXcom::helper::controler_base
ptr_pos_y	Engine/ShaderDrawHelper.h	/^	PixelPtr ptr_pos_y;$/;"	m	struct:OpenXcom::helper::controler_base
push	Battlescape/PathfindingOpenSet.cpp	/^void PathfindingOpenSet::push(PathfindingNode *node)$/;"	f	class:OpenXcom::PathfindingOpenSet
push	Engine/Script.cpp	/^ProgPos ParserWriter::push(size_t s)$/;"	f	class:OpenXcom::ParserWriter
pushConstTry	Engine/Script.cpp	/^bool ParserWriter::pushConstTry(const ScriptRefData& data, ArgEnum type)$/;"	f	class:OpenXcom::ParserWriter
pushConstTry	Engine/ScriptBind.h	/^	bool pushConstTry(const ScriptRefData& data)$/;"	f	struct:OpenXcom::ParserWriter
pushLabelTry	Engine/Script.cpp	/^bool ParserWriter::pushLabelTry(const ScriptRefData& data)$/;"	f	class:OpenXcom::ParserWriter
pushParser	Engine/Script.cpp	/^void ScriptGlobal::pushParser(const std::string& groupName, ScriptParserBase* parser)$/;"	f	class:OpenXcom::ScriptGlobal
pushParser	Engine/Script.cpp	/^void ScriptGlobal::pushParser(const std::string& groupName, ScriptParserEventsBase* parser)$/;"	f	class:OpenXcom::ScriptGlobal
pushPosition	Engine/ScriptBind.h	/^		void pushPosition(ParserWriter& pw, ScriptValueData data)$/;"	f	class:OpenXcom::ParserWriter::ReservedCrossRefrenece
pushProc	Engine/Script.cpp	/^ParserWriter::ReservedPos<ParserWriter::ProcOp> ParserWriter::pushProc(Uint8 procId)$/;"	f	class:OpenXcom::ParserWriter
pushRegTry	Engine/Script.cpp	/^bool ParserWriter::pushRegTry(const ScriptRefData& data, ArgEnum type)$/;"	f	class:OpenXcom::ParserWriter
pushRegTry	Engine/ScriptBind.h	/^	bool pushRegTry(const ScriptRefData& data)$/;"	f	struct:OpenXcom::ParserWriter
pushReserved	Engine/ScriptBind.h	/^	ReservedPos<T> pushReserved()$/;"	f	struct:OpenXcom::ParserWriter
pushScopeBlock	Engine/Script.cpp	/^ParserWriter::Block& ParserWriter::pushScopeBlock(BlockEnum type)$/;"	f	class:OpenXcom::ParserWriter
pushState	Engine/Game.cpp	/^void Game::pushState(State *state)$/;"	f	class:OpenXcom::Game
pushTextTry	Engine/Script.cpp	/^bool ParserWriter::pushTextTry(const ScriptRefData& data)$/;"	f	class:OpenXcom::ParserWriter
pushValue	Engine/Script.cpp	/^void ParserWriter::pushValue(ScriptValueData v)$/;"	f	class:OpenXcom::ParserWriter
push_back	Engine/FileMap.cpp	/^	void push_back(ModRecord *mod) {$/;"	f	struct:OpenXcom::FileMap::VFS
push_back	Engine/FileMap.cpp	/^	void push_back(VFSLayer *layer) { stack.push_back(layer); }$/;"	f	struct:OpenXcom::FileMap::ModRecord
push_back	Engine/FileMap.cpp	/^	void push_back(VFSLayer *layer) {$/;"	f	struct:OpenXcom::FileMap::VFSLayerStack
push_front	Engine/FileMap.cpp	/^	void push_front(VFSLayer *layer) { stack.push_front(layer); }$/;"	f	struct:OpenXcom::FileMap::ModRecord
push_front	Engine/FileMap.cpp	/^	void push_front(VFSLayer *layer) {$/;"	f	struct:OpenXcom::FileMap::VFSLayerStack
qty	Battlescape/DebriefingState.h	/^	int qty;$/;"	m	struct:OpenXcom::DebriefingStat
qty	Battlescape/DebriefingState.h	/^struct ReequipStat { std::string item; int qty; std::string craft; int listOrder; };$/;"	m	struct:OpenXcom::ReequipStat
qtyDst	Savegame/Transfer.h	/^	int qtySrc, qtyDst;$/;"	m	struct:OpenXcom::TransferRow
qtySrc	Savegame/Transfer.h	/^	int qtySrc, qtyDst;$/;"	m	struct:OpenXcom::TransferRow
quantity	Basescape/SoldierArmorState.h	/^	std::string name, quantity;$/;"	m	struct:OpenXcom::ArmorItem
quantity	Basescape/StoresState.h	/^	int quantity;$/;"	m	struct:OpenXcom::StoredItem
quit	Engine/Game.cpp	/^void Game::quit()$/;"	f	class:OpenXcom::Game
r	Engine/GraphSubset.h	/^	AreaSubset& operator=(const AreaSubset& r) = default;$/;"	m	struct:OpenXcom::AreaSubset
r	Engine/GraphSubset.h	/^	AreaSubset(const AreaSubset& r) = default;$/;"	m	struct:OpenXcom::AreaSubset
race	Savegame/BattleUnitStatistics.h	/^	std::string type, rank, race, weapon, weaponAmmo;$/;"	m	struct:OpenXcom::BattleUnitKills
radarChance	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
radarRange	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
random	Mod/Unit.h	/^	static UnitStats random(const UnitStats &a, const UnitStats &b)$/;"	f	struct:OpenXcom::UnitStats
randomChanceScript	Savegame/SavedBattleGame.cpp	/^void randomChanceScript(SavedBattleGame* sbg, int& val)$/;"	f	namespace:OpenXcom::__anon33
randomChanceScript	Savegame/SavedGame.cpp	/^void randomChanceScript(RNG::RandomState* rs, int& val)$/;"	f	namespace:OpenXcom::__anon42
randomRangeScript	Savegame/SavedBattleGame.cpp	/^void randomRangeScript(SavedBattleGame* sbg, int& val, int min, int max)$/;"	f	namespace:OpenXcom::__anon33
randomRangeScript	Savegame/SavedGame.cpp	/^void randomRangeScript(RNG::RandomState* rs, int& val, int min, int max)$/;"	f	namespace:OpenXcom::__anon42
random_distance_noise_bits	Geoscape/Globe.cpp	/^	static const int random_distance_noise_bits = 3;$/;"	m	struct:OpenXcom::__anon49::GlobeStaticData	file:
random_multiplier_noise_bits	Geoscape/Globe.cpp	/^	static const int random_multiplier_noise_bits = 4;$/;"	m	struct:OpenXcom::__anon49::GlobeStaticData	file:
random_noise	Geoscape/Globe.cpp	/^	Sint16 random_noise[random_surf_size*random_surf_size];$/;"	m	struct:OpenXcom::__anon49::GlobeStaticData	file:
random_surf_size	Geoscape/Globe.cpp	/^	static const int random_surf_size = 60;$/;"	m	struct:OpenXcom::__anon49::GlobeStaticData	file:
random_value_noise_bits	Geoscape/Globe.cpp	/^	static const int random_value_noise_bits = 5;$/;"	m	struct:OpenXcom::__anon49::GlobeStaticData	file:
randomizeItemLocations	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::randomizeItemLocations(Tile *t)$/;"	f	class:OpenXcom::SavedBattleGame
randomizeZLevels	Mod/AlienDeployment.h	/^	bool randomizeZLevels = true;$/;"	m	struct:OpenXcom::ReinforcementsData
range	Engine/Collections.h	/^	static Range<It> range(It begin, It end)$/;"	f	class:OpenXcom::Collections
range	Engine/Collections.h	/^	static Range<T*> range(std::vector<T>& v)$/;"	f	class:OpenXcom::Collections
range	Engine/Collections.h	/^	static Range<const T*> range(const std::vector<T>& v)$/;"	f	class:OpenXcom::Collections
range	Engine/ShaderDrawHelper.h	/^	GraphSubset range;$/;"	m	struct:OpenXcom::helper::controler_base
range	Mod/RuleItem.h	/^	int range = 0;$/;"	m	struct:OpenXcom::RuleItemAction
rangeValue	Engine/Collections.h	/^	static Range<ValueIterator<T>> rangeValue(T begin, T end)$/;"	f	class:OpenXcom::Collections
rangeValueLess	Engine/Collections.h	/^	static Range<ValueIterator<T>> rangeValueLess(T end)$/;"	f	class:OpenXcom::Collections
rank	Savegame/BattleUnitStatistics.h	/^	std::string type, rank, race, weapon, weaponAmmo;$/;"	m	struct:OpenXcom::BattleUnitKills
rate	Engine/Adlib/fmopl.h	/^	int rate;			\/* sampling rate (Hz)                *\/$/;"	m	struct:fm_opl_f
rate	Engine/AdlibMusic.cpp	/^int AdlibMusic::rate = 0;$/;"	m	class:OpenXcom::AdlibMusic	file:
rate	Engine/AdlibMusic.h	/^	static int delay, rate;$/;"	m	class:OpenXcom::AdlibMusic
rating	Savegame/MissionStatistics.h	/^	std::string rating;$/;"	m	struct:OpenXcom::MissionStatistics
rawCopy	Engine/Surface.cpp	/^void Surface::rawCopy(const std::vector<T> &src)$/;"	f	class:OpenXcom::Surface
reCalcQueuedBuildings	Basescape/BaseView.cpp	/^void BaseView::reCalcQueuedBuildings()$/;"	f	class:OpenXcom::BaseView
reShade	Battlescape/Map.cpp	/^int Map::reShade(Tile *tile)$/;"	f	class:OpenXcom::Map
reachedDestination	Savegame/MovingTarget.cpp	/^bool MovingTarget::reachedDestination() const$/;"	f	class:OpenXcom::MovingTarget
reactionReduction	Battlescape/TileEngine.h	/^		double reactionReduction;$/;"	m	struct:OpenXcom::TileEngine::ReactionScore
reactionScore	Battlescape/TileEngine.h	/^		double reactionScore;$/;"	m	struct:OpenXcom::TileEngine::ReactionScore
reactions	Mod/Unit.h	/^	Type tu, stamina, health, bravery, reactions, firing, throwing, strength, psiStrength, psiSkill, melee, mana;$/;"	m	struct:OpenXcom::UnitStats
readBitFromReversedStream	lodepng.cpp	/^static unsigned char readBitFromReversedStream(size_t* bitpointer, const unsigned char* bitstream)$/;"	f	file:
readBitFromStream	lodepng.cpp	/^static unsigned char readBitFromStream(size_t* bitpointer, const unsigned char* bitstream)$/;"	f	file:
readBitsFromReversedStream	lodepng.cpp	/^static unsigned readBitsFromReversedStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)$/;"	f	file:
readBitsFromStream	lodepng.cpp	/^static unsigned readBitsFromStream(size_t* bitpointer, const unsigned char* bitstream, size_t nbits)$/;"	f	file:
readChunk_PLTE	lodepng.cpp	/^static unsigned readChunk_PLTE(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)$/;"	f	file:
readChunk_bKGD	lodepng.cpp	/^static unsigned readChunk_bKGD(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)$/;"	f	file:
readChunk_iTXt	lodepng.cpp	/^static unsigned readChunk_iTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,$/;"	f	file:
readChunk_pHYs	lodepng.cpp	/^static unsigned readChunk_pHYs(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)$/;"	f	file:
readChunk_tEXt	lodepng.cpp	/^static unsigned readChunk_tEXt(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)$/;"	f	file:
readChunk_tIME	lodepng.cpp	/^static unsigned readChunk_tIME(LodePNGInfo* info, const unsigned char* data, size_t chunkLength)$/;"	f	file:
readChunk_tRNS	lodepng.cpp	/^static unsigned readChunk_tRNS(LodePNGColorMode* color, const unsigned char* data, size_t chunkLength)$/;"	f	file:
readChunk_zTXt	lodepng.cpp	/^static unsigned readChunk_zTXt(LodePNGInfo* info, const LodePNGDecompressSettings* zlibsettings,$/;"	f	file:
readFile	Engine/CrossPlatform.cpp	/^std::unique_ptr<std::istream> readFile(const std::string& filename) {$/;"	f	namespace:OpenXcom::CrossPlatform
readFileHeader	Engine/FlcPlayer.cpp	/^void FlcPlayer::readFileHeader()$/;"	f	class:OpenXcom::FlcPlayer
readS16	Engine/FlcPlayer.cpp	/^inline void FlcPlayer::readS16(Sint16 &dst, const Sint8 * const src)$/;"	f	class:OpenXcom::FlcPlayer
readS32	Engine/FlcPlayer.cpp	/^inline void FlcPlayer::readS32(Sint32 &dst, const Sint8 * const src)$/;"	f	class:OpenXcom::FlcPlayer
readU16	Engine/FlcPlayer.cpp	/^inline void FlcPlayer::readU16(Uint16 &dst, const Uint8 * const src)$/;"	f	class:OpenXcom::FlcPlayer
readU32	Engine/FlcPlayer.cpp	/^inline void FlcPlayer::readU32(Uint32 &dst, const Uint8 * const src)$/;"	f	class:OpenXcom::FlcPlayer
read_text_chunks	lodepng.h	/^  unsigned read_text_chunks; \/*if false but remember_unknown_chunks is true, they're stored in the unknown chunks*\/$/;"	m	struct:LodePNGDecoderSettings
read_uint32_le	Engine/GMCat.cpp	/^static inline unsigned read_uint32_le (const unsigned char *p)$/;"	f	namespace:OpenXcom
rearm	Savegame/Craft.cpp	/^const RuleItem* Craft::rearm()$/;"	f	class:OpenXcom::Craft
rearm	Savegame/CraftWeapon.cpp	/^int CraftWeapon::rearm(const int available, const int clipSize)$/;"	f	class:OpenXcom::CraftWeapon
recalcSpeedMaxRadian	Savegame/Craft.cpp	/^void Craft::recalcSpeedMaxRadian()$/;"	f	class:OpenXcom::Craft
recalculateFOV	Battlescape/TileEngine.cpp	/^void TileEngine::recalculateFOV()$/;"	f	class:OpenXcom::TileEngine
recenter	Engine/State.cpp	/^void State::recenter(int dX, int dY)$/;"	f	class:OpenXcom::State
recolor	Geoscape/DogfightState.cpp	/^void DogfightState::recolor(const int weaponNo, const bool currentState)$/;"	f	class:OpenXcom::DogfightState
recoverAlien	Battlescape/DebriefingState.cpp	/^void DebriefingState::recoverAlien(BattleUnit *from, Base *base)$/;"	f	class:OpenXcom::DebriefingState
recoverCivilian	Battlescape/DebriefingState.cpp	/^void DebriefingState::recoverCivilian(BattleUnit *from, Base *base, Craft* craft)$/;"	f	class:OpenXcom::DebriefingState
recoverItems	Battlescape/DebriefingState.cpp	/^void DebriefingState::recoverItems(std::vector<BattleItem*> *from, Base *base)$/;"	f	class:OpenXcom::DebriefingState
recoverTimeUnits	Savegame/BattleUnit.cpp	/^void BattleUnit::recoverTimeUnits()$/;"	f	class:OpenXcom::BattleUnit
recovery	Battlescape/DebriefingState.h	/^	bool recovery;$/;"	m	struct:OpenXcom::DebriefingStat
recoveryTime	Savegame/Soldier.cpp	/^int recoveryTime(int current, int recovery)$/;"	f	namespace:OpenXcom::__anon34
rect_stats	Mod/ArticleDefinition.h	/^		ArticleDefinitionRect rect_stats;$/;"	m	class:OpenXcom::ArticleDefinitionCraft
rect_text	Mod/ArticleDefinition.h	/^		ArticleDefinitionRect rect_text;$/;"	m	class:OpenXcom::ArticleDefinitionCraft
rect_text	Mod/ArticleDefinition.h	/^		ArticleDefinitionRect rect_text;$/;"	m	class:OpenXcom::ArticleDefinitionTextImage
red	Battlescape/Pathfinding.cpp	/^int Pathfinding::red = 3;$/;"	m	class:OpenXcom::Pathfinding	file:
red	Battlescape/Pathfinding.h	/^	static int red;$/;"	m	class:OpenXcom::Pathfinding
redrawText	Engine/State.cpp	/^void State::redrawText()$/;"	f	class:OpenXcom::State
reduceByBravery	Savegame/BattleUnit.cpp	/^int BattleUnit::reduceByBravery(int moraleChange) const$/;"	f	class:OpenXcom::BattleUnit
reduceByBraveryScript	Savegame/BattleUnit.cpp	/^struct reduceByBraveryScript$/;"	s	namespace:OpenXcom::__anon36	file:
reduceByResistance	Savegame/BattleUnit.cpp	/^int BattleUnit::reduceByResistance(int power, ItemDamageType resistType) const$/;"	f	class:OpenXcom::BattleUnit
reduceByResistanceScript	Savegame/BattleUnit.cpp	/^struct reduceByResistanceScript$/;"	s	namespace:OpenXcom::__anon36	file:
reequipCraft	Battlescape/DebriefingState.cpp	/^void DebriefingState::reequipCraft(Base *base, Craft *craft, bool vehicleItemsCanBeDestroyed)$/;"	f	class:OpenXcom::DebriefingState
ref	Engine/Scalers/xbrz.cpp	/^    uint32_t& ref() const$/;"	f	class:__anon10::OutputMatrix
ref	Engine/ShaderDrawHelper.h	/^	T& ref;$/;"	m	class:OpenXcom::helper::Scalar
ref	Engine/ShaderDrawHelper.h	/^	T& ref;$/;"	m	struct:OpenXcom::helper::controler
refLabels	Engine/ScriptBind.h	/^	ReservedCrossRefrenece<ProgPos> refLabels;$/;"	m	struct:OpenXcom::ParserWriter
refNodeTestDeepth	Mod/Mod.cpp	/^static void refNodeTestDeepth(const YAML::Node &node, const std::string &name, int limit)$/;"	f	namespace:OpenXcom
refTexts	Engine/ScriptBind.h	/^	ReservedCrossRefrenece<ScriptText, ScriptRef> refTexts;$/;"	m	struct:OpenXcom::ParserWriter
refresh	Engine/OpenGL.cpp	/^void OpenGL::refresh(bool smooth, unsigned inwidth, unsigned inheight, unsigned outwidth, unsigned outheight, int topBlackBand, int bottomBlackBand, int leftBlackBand, int rightBlackBand)$/;"	f	class:OpenXcom::OpenGL
refreshMapDataSets	Mod/RuleTerrain.cpp	/^void RuleTerrain::refreshMapDataSets(int craftSkinIndex, Mod *mod)$/;"	f	class:OpenXcom::RuleTerrain
refreshMods	Engine/Options.cpp	/^void refreshMods()$/;"	f	namespace:OpenXcom::Options
refreshMouse	Battlescape/InventoryState.cpp	/^void InventoryState::refreshMouse()$/;"	f	class:OpenXcom::InventoryState
refreshPath	Battlescape/Pathfinding.cpp	/^void Pathfinding::refreshPath()$/;"	f	class:OpenXcom::Pathfinding
refreshSelectorPosition	Battlescape/Map.cpp	/^void Map::refreshSelectorPosition()$/;"	f	class:OpenXcom::Map
refuel	Savegame/Craft.cpp	/^std::string Craft::refuel()$/;"	f	class:OpenXcom::Craft
refundItem	Savegame/Production.cpp	/^void Production::refundItem(Base * b, SavedGame * g, const Mod *m) const$/;"	f	class:OpenXcom::Production
reg20_op1	Engine/Adlib/adlplayer.cpp	/^	unsigned char	reg20_op1;$/;"	m	struct:struc_sample	file:
reg20_op2	Engine/Adlib/adlplayer.cpp	/^	unsigned char	reg20_op2;$/;"	m	struct:struc_sample	file:
reg40_op1	Engine/Adlib/adlplayer.cpp	/^	unsigned char	reg40_op1;$/;"	m	struct:struc_sample	file:
reg40_op2	Engine/Adlib/adlplayer.cpp	/^	unsigned char	reg40_op2;$/;"	m	struct:struc_sample	file:
reg60_op1	Engine/Adlib/adlplayer.cpp	/^	unsigned char	reg60_op1;$/;"	m	struct:struc_sample	file:
reg60_op2	Engine/Adlib/adlplayer.cpp	/^	unsigned char	reg60_op2;$/;"	m	struct:struc_sample	file:
reg80_op1	Engine/Adlib/adlplayer.cpp	/^	unsigned char	reg80_op1;$/;"	m	struct:struc_sample	file:
reg80_op2	Engine/Adlib/adlplayer.cpp	/^	unsigned char	reg80_op2;$/;"	m	struct:struc_sample	file:
regC0	Engine/Adlib/adlplayer.cpp	/^	unsigned char	regC0;$/;"	m	struct:struc_sample	file:
regE0_op1	Engine/Adlib/adlplayer.cpp	/^	unsigned char	regE0_op1;$/;"	m	struct:struc_sample	file:
regE0_op2	Engine/Adlib/adlplayer.cpp	/^	unsigned char	regE0_op2;$/;"	m	struct:struc_sample	file:
regIndexUsed	Engine/ScriptBind.h	/^	RegEnum regIndexUsed;$/;"	m	struct:OpenXcom::ParserWriter
regIndexUsedFrom	Engine/ScriptBind.h	/^		RegEnum regIndexUsedFrom;$/;"	m	struct:OpenXcom::ParserWriter::Block
regStack	Engine/ScriptBind.h	/^	std::vector<ScriptRefData> regStack;$/;"	m	struct:OpenXcom::ParserWriter
regStackSizeFrom	Engine/ScriptBind.h	/^		size_t regStackSizeFrom;$/;"	m	struct:OpenXcom::ParserWriter::Block
region	Savegame/MissionStatistics.h	/^	std::string region, country, type, ufo;$/;"	m	struct:OpenXcom::MissionStatistics
relativeOrigin	Battlescape/BattlescapeGame.h	/^	BattleActionOrigin relativeOrigin = BattleActionOrigin::CENTRE; \/\/ preferred origin voxel (centre, left or right)$/;"	m	struct:OpenXcom::BattleAction
relese	Engine/Script.cpp	/^void ParserWriter::relese()$/;"	f	class:OpenXcom::ParserWriter
releseEvents	Engine/Script.cpp	/^std::vector<ScriptContainerBase> ScriptParserEventsBase::releseEvents()$/;"	f	class:OpenXcom::ScriptParserEventsBase
reload	Engine/Options.inc.h	/^OPT bool mute, reload, newOpenGL, newScaleFilter, newHQXFilter, newXBRZFilter, newRootWindowedMode, newFullscreen, newAllowResize, newBorderless;$/;"	v
reloadAmmo	Savegame/BattleUnit.cpp	/^bool BattleUnit::reloadAmmo()$/;"	f	class:OpenXcom::BattleUnit
reloadFixedWeaponsByLayout	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::reloadFixedWeaponsByLayout()$/;"	f	class:OpenXcom::BattlescapeGenerator
rememberXP	Savegame/BattleUnit.cpp	/^void BattleUnit::rememberXP()$/;"	f	class:OpenXcom::BattleUnit
remember_unknown_chunks	lodepng.h	/^  unsigned remember_unknown_chunks;$/;"	m	struct:LodePNGDecoderSettings
remove	Savegame/CraftWeaponProjectile.cpp	/^void CraftWeaponProjectile::remove()$/;"	f	class:OpenXcom::CraftWeaponProjectile
removeAll	Engine/Collections.h	/^	static void removeAll(C& colection)$/;"	f	class:OpenXcom::Collections
removeAll	Engine/Collections.h	/^	static void removeAll(std::vector<T>& vec)$/;"	f	class:OpenXcom::Collections
removeAllPilots	Savegame/Craft.cpp	/^void Craft::removeAllPilots()$/;"	f	class:OpenXcom::Craft
removeAllSoldiersFromXcomCraft	Savegame/SavedGame.cpp	/^void SavedGame::removeAllSoldiersFromXcomCraft(Craft *craft)$/;"	f	class:OpenXcom::SavedGame
removeBlocks	Battlescape/BattlescapeGenerator.cpp	/^bool BattlescapeGenerator::removeBlocks(MapScript *command)$/;"	f	class:OpenXcom::BattlescapeGenerator
removeCraft	Savegame/Base.cpp	/^std::vector<Craft*>::iterator Base::removeCraft(Craft *craft, bool unload)$/;"	f	class:OpenXcom::Base
removeDiscarded	Battlescape/PathfindingOpenSet.cpp	/^void PathfindingOpenSet::removeDiscarded()$/;"	f	class:OpenXcom::PathfindingOpenSet
removeDiscoveredResearch	Savegame/SavedGame.cpp	/^void SavedGame::removeDiscoveredResearch(const RuleResearch * research)$/;"	f	class:OpenXcom::SavedGame
removeFromVisibleUnits	Savegame/BattleUnit.cpp	/^bool BattleUnit::removeFromVisibleUnits(BattleUnit *unit)$/;"	f	class:OpenXcom::BattleUnit
removeIf	Engine/Collections.h	/^	static int removeIf(C& colection, F&& func)$/;"	f	class:OpenXcom::Collections
removeIf	Engine/Collections.h	/^	static int removeIf(C& colection, int numberToRemove, F&& func)$/;"	f	class:OpenXcom::Collections
removeIf	Engine/Collections.h	/^	static int removeIf(std::vector<T>& vec, int numberToRemove, F&& func)$/;"	f	class:OpenXcom::Collections
removeItem	Savegame/ItemContainer.cpp	/^void ItemContainer::removeItem(const RuleItem* item, int qty)$/;"	f	class:OpenXcom::ItemContainer
removeItem	Savegame/ItemContainer.cpp	/^void ItemContainer::removeItem(const std::string &id, int qty)$/;"	f	class:OpenXcom::ItemContainer
removeItem	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::removeItem(BattleItem *item)$/;"	f	class:OpenXcom::SavedBattleGame
removeItem	Savegame/Tile.cpp	/^void Tile::removeItem(BattleItem *item)$/;"	f	class:OpenXcom::Tile
removeLastRow	Interface/TextList.cpp	/^void TextList::removeLastRow()$/;"	f	class:OpenXcom::TextList
removeMission	Savegame/AlienStrategy.cpp	/^bool AlienStrategy::removeMission(const std::string &region, const std::string &mission)$/;"	f	class:OpenXcom::AlienStrategy
removeMovingUnit	Battlescape/TileEngine.cpp	/^void TileEngine::removeMovingUnit(BattleUnit* unit)$/;"	f	class:OpenXcom::TileEngine
removePaddingBits	lodepng.cpp	/^static void removePaddingBits(unsigned char* out, const unsigned char* in,$/;"	f	file:
removePoppedResearch	Savegame/SavedGame.cpp	/^void SavedGame::removePoppedResearch(const RuleResearch* research)$/;"	f	class:OpenXcom::SavedGame
removePreview	Battlescape/Pathfinding.cpp	/^bool Pathfinding::removePreview()$/;"	f	class:OpenXcom::Pathfinding
removeProduction	Savegame/Base.cpp	/^void Base::removeProduction(Production* production)$/;"	f	class:OpenXcom::Base
removeResearch	Savegame/Base.cpp	/^void Base::removeResearch(ResearchProject * project)$/;"	f	class:OpenXcom::Base
removeSpecialWeapons	Savegame/BattleUnit.cpp	/^void BattleUnit::removeSpecialWeapons(SavedBattleGame *save)$/;"	f	class:OpenXcom::BattleUnit
removeSummonedPlayerUnits	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::removeSummonedPlayerUnits()$/;"	f	class:OpenXcom::BattlescapeGame
removeUnconsciousBodyItem	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::removeUnconsciousBodyItem(BattleUnit *bu)$/;"	f	class:OpenXcom::SavedBattleGame
repair	Savegame/Craft.cpp	/^void Craft::repair()$/;"	f	class:OpenXcom::Craft
replace	Engine/Unicode.cpp	/^void replace(std::string &str, const std::string &find, const std::string &replace)$/;"	f	namespace:OpenXcom::Unicode
replacements	Mod/MapScript.h	/^	std::map<std::string, MCDReplacement> replacements;$/;"	m	struct:OpenXcom::TunnelData
replenishHealth	Savegame/Soldier.cpp	/^void Soldier::replenishHealth(int healthRecoveryPerDay)$/;"	f	class:OpenXcom::Soldier
replenishMana	Savegame/Soldier.cpp	/^void Soldier::replenishMana(int manaRecoveryPerDay)$/;"	f	class:OpenXcom::Soldier
replenishStats	Savegame/Soldier.cpp	/^void Soldier::replenishStats(const BaseSumDailyRecovery& recovery)$/;"	f	class:OpenXcom::Soldier
reportingLevel	Engine/Logger.h	/^	static SeverityLevel& reportingLevel() {$/;"	f	class:OpenXcom::Logger
requestEndTurn	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::requestEndTurn(bool askForConfirmation)$/;"	f	class:OpenXcom::BattlescapeGame
requiresCommanderOnboard	Mod/RuleStartingCondition.h	/^	bool requiresCommanderOnboard() const { return _requireCommanderOnboard; }$/;"	f	class:OpenXcom::RuleStartingCondition
researchLess	Savegame/SavedGame.cpp	/^bool researchLess(const RuleResearch *a, const RuleResearch *b)$/;"	f	namespace:OpenXcom::__anon41
reselectAllowed	Savegame/BattleUnit.cpp	/^bool BattleUnit::reselectAllowed() const$/;"	f	class:OpenXcom::BattleUnit
reserved	Savegame/SavedGame.h	/^	bool reserved;$/;"	m	struct:OpenXcom::SaveInfo
reset	Battlescape/AIModule.cpp	/^void AIModule::reset()$/;"	f	class:OpenXcom::AIModule
reset	Battlescape/BattlescapeGame.h	/^		void reset()$/;"	f	class:OpenXcom::BattlescapeGame::SingleRun
reset	Battlescape/PathfindingNode.cpp	/^void PathfindingNode::reset()$/;"	f	class:OpenXcom::PathfindingNode
reset	Engine/OptionInfo.cpp	/^void OptionInfo::reset() const$/;"	f	class:OpenXcom::OptionInfo
resetAlienBaseAge	Mod/AlienDeployment.h	/^	bool resetAlienBaseAge() const { return _resetAlienBaseAge; }$/;"	f	class:OpenXcom::AlienDeployment
resetAlienBaseAgeAfterUpgrade	Mod/AlienDeployment.h	/^	bool resetAlienBaseAgeAfterUpgrade() const { return _resetAlienBaseAgeAfterUpgrade; }$/;"	f	class:OpenXcom::AlienDeployment
resetAll	Engine/State.cpp	/^void State::resetAll()$/;"	f	class:OpenXcom::State
resetAllEnemiesNeutralized	Battlescape/BattlescapeGame.h	/^	void resetAllEnemiesNeutralized() { _allEnemiesNeutralized = false; }$/;"	f	class:OpenXcom::BattlescapeGame
resetCameraSmoothing	Battlescape/Map.cpp	/^void Map::resetCameraSmoothing()$/;"	f	class:OpenXcom::Map
resetCurrentAmbienceDelay	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::resetCurrentAmbienceDelay()$/;"	f	class:OpenXcom::SavedBattleGame
resetCustomDeployment	Savegame/Craft.cpp	/^void Craft::resetCustomDeployment()$/;"	f	class:OpenXcom::Craft
resetDailyDogfightExperienceCache	Savegame/Soldier.cpp	/^void Soldier::resetDailyDogfightExperienceCache()$/;"	f	class:OpenXcom::Soldier
resetDefault	Engine/Options.cpp	/^void resetDefault(bool includeMods)$/;"	f	namespace:OpenXcom::Options
resetDiary	Savegame/Soldier.cpp	/^void Soldier::resetDiary()$/;"	f	class:OpenXcom::Soldier
resetDisplay	Engine/Screen.cpp	/^void Screen::resetDisplay(bool resetVideo, bool noShaders)$/;"	f	class:OpenXcom::Screen
resetDisplay	Menu/CutsceneState.cpp	/^void CutsceneState::resetDisplay(bool wasLetterboxed)$/;"	f	class:OpenXcom::CutsceneState
resetGlobalStatics	Mod/Mod.cpp	/^void Mod::resetGlobalStatics()$/;"	f	class:OpenXcom::Mod
resetHitState	Savegame/BattleUnit.cpp	/^void BattleUnit::resetHitState()$/;"	f	class:OpenXcom::BattleUnit
resetLight	Savegame/Tile.cpp	/^void Tile::resetLight(LightLayers layer)$/;"	f	class:OpenXcom::Tile
resetLightMulti	Savegame/Tile.cpp	/^void Tile::resetLightMulti(LightLayers layer)$/;"	f	class:OpenXcom::Tile
resetListAndTotals	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::resetListAndTotals()$/;"	f	class:OpenXcom::ManageAlienContainmentState
resetMeetPoint	Savegame/MovingTarget.cpp	/^void MovingTarget::resetMeetPoint()$/;"	f	class:OpenXcom::MovingTarget
resetObstacle	Savegame/Tile.cpp	/^void Tile::resetObstacle(void)$/;"	f	class:OpenXcom::Tile
resetObstacles	Battlescape/Map.cpp	/^void Map::resetObstacles(void)$/;"	f	class:OpenXcom::Map
resetOriginalDestination	Savegame/Ufo.cpp	/^void Ufo::resetOriginalDestination(Craft *target)$/;"	f	class:OpenXcom::Ufo
resetOriginalDestination	Savegame/Ufo.cpp	/^void Ufo::resetOriginalDestination(bool debugHelper)$/;"	f	class:OpenXcom::Ufo
resetPalettes	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::resetPalettes()$/;"	f	class:OpenXcom::BattlescapeState
resetScreen	Geoscape/GraphsState.cpp	/^void GraphsState::resetScreen()$/;"	f	class:OpenXcom::GraphsState
resetSelectedFacility	Basescape/BaseView.cpp	/^void BaseView::resetSelectedFacility()$/;"	f	class:OpenXcom::BaseView
resetStream	Ufopaedia/StatsForNerdsState.cpp	/^void StatsForNerdsState::resetStream(std::ostringstream &ss)$/;"	f	class:OpenXcom::StatsForNerdsState
resetTemporaryCustomVehicleDeploymentFlags	Savegame/Craft.cpp	/^void Craft::resetTemporaryCustomVehicleDeploymentFlags()$/;"	f	class:OpenXcom::Craft
resetTiles	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::resetTiles()$/;"	f	class:OpenXcom::SavedBattleGame
resetTimeUnitsAndEnergy	Savegame/BattleUnit.cpp	/^void BattleUnit::resetTimeUnitsAndEnergy()$/;"	f	class:OpenXcom::BattleUnit
resetTouchButtonFlags	Engine/Game.cpp	/^void Game::resetTouchButtonFlags()$/;"	f	class:OpenXcom::Game
resetTurnCounter	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::resetTurnCounter()$/;"	f	class:OpenXcom::SavedBattleGame
resetTurnsSinceStunned	Savegame/BattleUnit.h	/^	void resetTurnsSinceStunned() { _turnsSinceStunned = 255; }$/;"	f	class:OpenXcom::BattleUnit
resetUiButton	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::resetUiButton()$/;"	f	class:OpenXcom::BattlescapeState
resetUnitHitStates	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::resetUnitHitStates()$/;"	f	class:OpenXcom::SavedBattleGame
resetUnitTiles	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::resetUnitTiles()$/;"	f	class:OpenXcom::SavedBattleGame
resize	Battlescape/ActionMenuState.cpp	/^void ActionMenuState::resize(int &dX, int &dY)$/;"	f	class:OpenXcom::ActionMenuState
resize	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::resize(int &dX, int &dY)$/;"	f	class:OpenXcom::BattlescapeState
resize	Battlescape/Camera.cpp	/^void Camera::resize()$/;"	f	class:OpenXcom::Camera
resize	Battlescape/NextTurnState.cpp	/^void NextTurnState::resize(int &dX, int &dY)$/;"	f	class:OpenXcom::NextTurnState
resize	Engine/OpenGL.cpp	/^void OpenGL::resize(unsigned width, unsigned height)$/;"	f	class:OpenXcom::OpenGL
resize	Engine/State.cpp	/^void State::resize(int &dX, int &dY)$/;"	f	class:OpenXcom::State
resize	Engine/Surface.cpp	/^void Surface::resize(int width, int height)$/;"	f	class:OpenXcom::Surface
resize	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::resize(int &dX, int &dY)$/;"	f	class:OpenXcom::BuildNewBaseState
resize	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::resize(int &dX, int &dY)$/;"	f	class:OpenXcom::GeoscapeState
resize	Geoscape/Globe.cpp	/^void Globe::resize()$/;"	f	class:OpenXcom::Globe
resize	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::resize(int &dX, int &dY)$/;"	f	class:OpenXcom::SelectDestinationState
resize	Menu/MainMenuState.cpp	/^void MainMenuState::resize(int &dX, int &dY)$/;"	f	class:OpenXcom::MainMenuState
resize	Menu/OptionsBaseState.cpp	/^void OptionsBaseState::resize(int &dX, int &dY)$/;"	f	class:OpenXcom::OptionsBaseState
resize	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::resize(int &dX, int &dY)$/;"	f	class:OpenXcom::OptionsVideoState
resources	Engine/FileMap.cpp	/^	FileSet resources; 					\/\/ relpath -> frec.$/;"	m	struct:OpenXcom::FileMap::VFSLayer	file:
resources	Engine/FileMap.cpp	/^	FileSet resources;$/;"	m	struct:OpenXcom::FileMap::VFSLayerStack	file:
restart	Menu/OptionsBaseState.cpp	/^void OptionsBaseState::restart(OptionsOrigin origin)$/;"	f	class:OpenXcom::OptionsBaseState
restrict	Engine/Scalers/scale2x.cpp	34;"	d	file:
restrict	Engine/Scalers/scale2x.cpp	36;"	d	file:
restrict	Engine/Scalers/scale3x.cpp	34;"	d	file:
restrict	Engine/Scalers/scale3x.cpp	36;"	d	file:
result	Battlescape/BattlescapeGame.h	/^	std::string result;$/;"	m	struct:OpenXcom::BattleAction
result_type	Basescape/SoldierArmorState.cpp	/^	typedef bool result_type;$/;"	t	struct:OpenXcom::compareArmorName	file:
result_type	Basescape/SoldierSortUtil.h	/^	typedef bool result_type;$/;"	t	struct:OpenXcom::SortFunctor
result_type	Basescape/StoresState.cpp	/^	typedef bool result_type;$/;"	t	struct:OpenXcom::compareItemName	file:
result_type	Basescape/StoresState.cpp	/^	typedef bool result_type;$/;"	t	struct:OpenXcom::compareItemQuantity	file:
result_type	Basescape/StoresState.cpp	/^	typedef bool result_type;$/;"	t	struct:OpenXcom::compareItemSize	file:
result_type	Basescape/StoresState.cpp	/^	typedef bool result_type;$/;"	t	struct:OpenXcom::compareItemSpaceUsed	file:
result_type	Geoscape/GeoscapeState.cpp	/^	typedef bool result_type;$/;"	t	class:OpenXcom::DetectXCOMBase	file:
result_type	Geoscape/GeoscapeState.cpp	/^	typedef void result_type;$/;"	t	class:OpenXcom::GenerateSupplyMission	file:
result_type	Geoscape/GeoscapeState.cpp	/^	typedef void result_type;$/;"	t	struct:OpenXcom::SetRetaliationTarget	file:
result_type	Menu/ListGamesState.cpp	/^	typedef bool result_type;$/;"	t	struct:OpenXcom::compareSaveName	file:
result_type	Menu/ListGamesState.cpp	/^	typedef bool result_type;$/;"	t	struct:OpenXcom::compareSaveTimestamp	file:
result_type	Mod/Mod.cpp	/^	typedef bool result_type;$/;"	t	struct:OpenXcom::compareRule	file:
result_type	Mod/Mod.cpp	/^	typedef bool result_type;$/;"	t	struct:OpenXcom::compareSection	file:
result_type	Savegame/AlienMission.cpp	/^	typedef bool result_type;$/;"	t	class:OpenXcom::MatchBaseCoordinates	file:
result_type	Savegame/AlienMission.cpp	/^	typedef bool result_type;$/;"	t	class:OpenXcom::matchById	file:
result_type	Savegame/SavedGame.cpp	/^	typedef bool result_type;$/;"	t	class:OpenXcom::ContainsPoint	file:
result_type	Savegame/SavedGame.cpp	/^	typedef bool result_type;$/;"	t	class:OpenXcom::CountryContainsPoint	file:
result_type	Savegame/SavedGame.cpp	/^	typedef bool result_type;$/;"	t	struct:OpenXcom::__anon41::equalProduction	file:
result_type	Savegame/SavedGame.cpp	/^	typedef bool result_type;$/;"	t	struct:OpenXcom::__anon41::findRuleResearch	file:
result_type	Savegame/Ufo.cpp	/^	typedef bool result_type;$/;"	t	class:OpenXcom::matchMissionID	file:
resume	Engine/Music.cpp	/^void Music::resume()$/;"	f	class:OpenXcom::Music
retainCorpses	Engine/Options.inc.h	/^OPT bool includePrimeStateInSavedLayout, anytimePsiTraining, weaponSelfDestruction, retainCorpses, craftLaunchAlways, globeSeasons, globeDetail, globeRadarLines, globeFlightPaths, globeAllRadarsOnBaseBuild,$/;"	v
retaliationMissionWeights	Mod/AlienRace.cpp	/^WeightedOptions* AlienRace::retaliationMissionWeights(const size_t monthsPassed) const$/;"	f	class:OpenXcom::AlienRace
retire	Basescape/SoldierTransformationState.cpp	/^void SoldierTransformationState::retire()$/;"	f	class:OpenXcom::SoldierTransformationState
returnToBase	Savegame/Craft.cpp	/^void Craft::returnToBase()$/;"	f	class:OpenXcom::Craft
return_address	Engine/Adlib/adlplayer.cpp	/^	unsigned char*	return_address;$/;"	m	struct:struc_instruments	file:
reuseItem	Savegame/Craft.cpp	/^void Craft::reuseItem(const RuleItem* item)$/;"	f	class:OpenXcom::Craft
revealMap	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::revealMap()$/;"	f	class:OpenXcom::SavedBattleGame
reverse	Engine/Collections.h	/^	static Range<It> reverse(Range<ReverseIterator<It>> a)$/;"	f	class:OpenXcom::Collections
reverse	Engine/Collections.h	/^	static Range<ReverseIterator<It>> reverse(Range<It> a)$/;"	f	class:OpenXcom::Collections
revertMasterMod	Menu/ModListState.cpp	/^void ModListState::revertMasterMod()$/;"	f	class:OpenXcom::ModListState
reviveUnconsciousUnits	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::reviveUnconsciousUnits(bool noTU)$/;"	f	class:OpenXcom::SavedBattleGame
revivedHostile	Savegame/BattleUnitStatistics.h	/^	int revivedHostile;                  \/\/\/< Tracks how many times this soldier revived another hostile$/;"	m	struct:OpenXcom::BattleUnitStatistics
revivedNeutral	Savegame/BattleUnitStatistics.h	/^	int revivedNeutral;                  \/\/\/< Tracks how many times this soldier revived another civilian$/;"	m	struct:OpenXcom::BattleUnitStatistics
revivedSoldier	Savegame/BattleUnitStatistics.h	/^	int revivedSoldier;                  \/\/\/< Tracks how many times this soldier revived another soldier$/;"	m	struct:OpenXcom::BattleUnitStatistics
rgb_to_yuv	Engine/Scalers/common.h	/^static inline uint32_t rgb_to_yuv(uint32_t c)$/;"	f
rgba16ToPixel	lodepng.cpp	/^static void rgba16ToPixel(unsigned char* out, size_t i,$/;"	f	file:
rgba8ToPixel	lodepng.cpp	/^static unsigned rgba8ToPixel(unsigned char* out, size_t i,$/;"	f	file:
rootWindowedMode	Engine/Options.inc.h	/^	rootWindowedMode, lazyLoadResources, backgroundMute;$/;"	v
rotate	Geoscape/Globe.cpp	/^void Globe::rotate()$/;"	f	class:OpenXcom::Globe
rotateBlendInfo	Engine/Scalers/xbrz.cpp	/^template <> inline unsigned char rotateBlendInfo<ROT_180>(unsigned char b) { return ((b << 4) | (b >> 4)) & 0xff; }$/;"	f	namespace:__anon10
rotateBlendInfo	Engine/Scalers/xbrz.cpp	/^template <> inline unsigned char rotateBlendInfo<ROT_270>(unsigned char b) { return ((b << 6) | (b >> 2)) & 0xff; }$/;"	f	namespace:__anon10
rotateBlendInfo	Engine/Scalers/xbrz.cpp	/^template <> inline unsigned char rotateBlendInfo<ROT_90 >(unsigned char b) { return ((b << 2) | (b >> 6)) & 0xff; }$/;"	f	namespace:__anon10
rotateBlendInfo	Engine/Scalers/xbrz.cpp	/^unsigned char rotateBlendInfo(unsigned char b) { return b; }$/;"	f	namespace:__anon10
rotateDown	Geoscape/Globe.cpp	/^void Globe::rotateDown()$/;"	f	class:OpenXcom::Globe
rotateLeft	Geoscape/Globe.cpp	/^void Globe::rotateLeft()$/;"	f	class:OpenXcom::Globe
rotateRight	Geoscape/Globe.cpp	/^void Globe::rotateRight()$/;"	f	class:OpenXcom::Globe
rotateStop	Geoscape/Globe.cpp	/^void Globe::rotateStop()$/;"	f	class:OpenXcom::Globe
rotateStopLat	Geoscape/Globe.cpp	/^void Globe::rotateStopLat()$/;"	f	class:OpenXcom::Globe
rotateStopLon	Geoscape/Globe.cpp	/^void Globe::rotateStopLon()$/;"	f	class:OpenXcom::Globe
rotateUp	Geoscape/Globe.cpp	/^void Globe::rotateUp()$/;"	f	class:OpenXcom::Globe
rotate_left	md5.cpp	/^inline MD5::uint4 MD5::rotate_left(uint4 x, int n) {$/;"	f	class:MD5
rsorder	Engine/FileMap.cpp	/^	RSOrder rsorder;$/;"	m	struct:OpenXcom::FileMap::VFS	file:
rule	Savegame/Transfer.h	/^	const void *rule;$/;"	m	struct:OpenXcom::TransferRow
rulesets	Engine/FileMap.cpp	/^	std::vector<FileRecord> rulesets;  	\/\/ keeps FileRecord copies ala hard links$/;"	m	struct:OpenXcom::FileMap::VFSLayer	file:
rulesets	Engine/FileMap.cpp	/^	std::vector<FileRecord> rulesets;$/;"	m	struct:OpenXcom::FileMap::VFSLayerStack	file:
run	Battlescape/BattlescapeGame.h	/^	bool run = false;$/;"	m	struct:OpenXcom::BattleAction
run	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::run()$/;"	f	class:OpenXcom::BattlescapeGenerator
run	Engine/Game.cpp	/^void Game::run()$/;"	f	class:OpenXcom::Game
runInventory	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::runInventory(Craft *craft)$/;"	f	class:OpenXcom::BattlescapeGenerator
rythm	Engine/Adlib/fmopl.h	/^	UINT8 rythm;		\/* Rythm mode , key flag *\/$/;"	m	struct:fm_opl_f
s	Engine/OptionInfo.h	/^	union { bool *b; int *i; std::string *s; SDLKey *k; } _ref;$/;"	m	union:OpenXcom::OptionInfo::__anon1
s	Engine/OptionInfo.h	/^	union { bool b; int i; const char *s; SDLKey k; } _def; \/\/ can't put strings in unions$/;"	m	union:OpenXcom::OptionInfo::__anon2
s	Menu/VideoState.cpp	/^	Sound *s;$/;"	m	struct:OpenXcom::AudioSequence	file:
s_factoryFunctions	Engine/LanguagePlurality.cpp	/^std::map<std::string, LanguagePlurality::PFCreate> LanguagePlurality::s_factoryFunctions;$/;"	m	class:OpenXcom::LanguagePlurality	file:
s_factoryFunctions	Engine/LanguagePlurality.h	/^	static std::map<std::string, PFCreate> s_factoryFunctions;$/;"	m	class:OpenXcom::LanguagePlurality
sample3CatOnlySounds	Menu/VideoState.cpp	/^static soundInFile sample3CatOnlySounds[]=$/;"	m	namespace:OpenXcom	file:
sampleBufSize	Engine/FlcPlayer.h	/^		int sampleBufSize;$/;"	m	struct:OpenXcom::FlcPlayer::AudioBuffer
sampleCount	Engine/FlcPlayer.h	/^		int sampleCount;$/;"	m	struct:OpenXcom::FlcPlayer::AudioBuffer
sampleRate	Engine/FlcPlayer.h	/^		int sampleRate;$/;"	m	struct:OpenXcom::FlcPlayer::AudioData
sample_id	Engine/Adlib/adlplayer.cpp	/^	unsigned char	sample_id;$/;"	m	struct:struc_instruments	file:
samples	Engine/FlcPlayer.h	/^		Sint16 *samples;$/;"	m	struct:OpenXcom::FlcPlayer::AudioBuffer
sanitizeFilename	Engine/CrossPlatform.cpp	/^std::string sanitizeFilename(const std::string &filename)$/;"	f	namespace:OpenXcom::CrossPlatform
sanitizeModName	Savegame/SavedGame.cpp	/^std::string SavedGame::sanitizeModName(const std::string &name)$/;"	f	class:OpenXcom::SavedGame
sanitizeZipEntryName	Engine/FileMap.cpp	/^static bool sanitizeZipEntryName(std::string& zefname) {$/;"	f	namespace:OpenXcom::FileMap
save	Battlescape/AIModule.cpp	/^YAML::Node AIModule::save() const$/;"	f	class:OpenXcom::AIModule
save	Engine/OptionInfo.cpp	/^void OptionInfo::save(YAML::Node &node) const$/;"	f	class:OpenXcom::OptionInfo
save	Engine/Options.cpp	/^bool save(const std::string &filename)$/;"	f	namespace:OpenXcom::Options
save	Menu/NewBattleState.cpp	/^void NewBattleState::save(const std::string &filename)$/;"	f	class:OpenXcom::NewBattleState
save	Mod/Armor.h	/^	void save(YAML::Node& node, const char* name) const$/;"	f	struct:OpenXcom::ArmorMoveCost
save	Savegame/AlienBase.cpp	/^YAML::Node AlienBase::save() const$/;"	f	class:OpenXcom::AlienBase
save	Savegame/AlienMission.cpp	/^YAML::Node AlienMission::save() const$/;"	f	class:OpenXcom::AlienMission
save	Savegame/AlienStrategy.cpp	/^YAML::Node AlienStrategy::save() const$/;"	f	class:OpenXcom::AlienStrategy
save	Savegame/Base.cpp	/^YAML::Node Base::save() const$/;"	f	class:OpenXcom::Base
save	Savegame/BaseFacility.cpp	/^YAML::Node BaseFacility::save() const$/;"	f	class:OpenXcom::BaseFacility
save	Savegame/BattleItem.cpp	/^YAML::Node BattleItem::save(const ScriptGlobal *shared) const$/;"	f	class:OpenXcom::BattleItem
save	Savegame/BattleUnit.cpp	/^YAML::Node BattleUnit::save(const ScriptGlobal *shared) const$/;"	f	class:OpenXcom::BattleUnit
save	Savegame/BattleUnitStatistics.h	/^	YAML::Node save() const$/;"	f	struct:OpenXcom::BattleUnitKills
save	Savegame/BattleUnitStatistics.h	/^	YAML::Node save() const$/;"	f	struct:OpenXcom::BattleUnitStatistics
save	Savegame/Country.cpp	/^YAML::Node Country::save() const$/;"	f	class:OpenXcom::Country
save	Savegame/Craft.cpp	/^YAML::Node Craft::save(const ScriptGlobal *shared) const$/;"	f	class:OpenXcom::Craft
save	Savegame/CraftWeapon.cpp	/^YAML::Node CraftWeapon::save() const$/;"	f	class:OpenXcom::CraftWeapon
save	Savegame/EquipmentLayoutItem.cpp	/^YAML::Node EquipmentLayoutItem::save() const$/;"	f	class:OpenXcom::EquipmentLayoutItem
save	Savegame/GameTime.cpp	/^YAML::Node GameTime::save() const$/;"	f	class:OpenXcom::GameTime
save	Savegame/GeoscapeEvent.cpp	/^YAML::Node GeoscapeEvent::save() const$/;"	f	class:OpenXcom::GeoscapeEvent
save	Savegame/ItemContainer.cpp	/^YAML::Node ItemContainer::save() const$/;"	f	class:OpenXcom::ItemContainer
save	Savegame/MissionSite.cpp	/^YAML::Node MissionSite::save() const$/;"	f	class:OpenXcom::MissionSite
save	Savegame/MissionStatistics.h	/^	YAML::Node save() const$/;"	f	struct:OpenXcom::MissionStatistics
save	Savegame/MovingTarget.cpp	/^YAML::Node MovingTarget::save() const$/;"	f	class:OpenXcom::MovingTarget
save	Savegame/Node.cpp	/^YAML::Node Node::save() const$/;"	f	class:OpenXcom::Node
save	Savegame/Production.cpp	/^YAML::Node Production::save() const$/;"	f	class:OpenXcom::Production
save	Savegame/Region.cpp	/^YAML::Node Region::save() const$/;"	f	class:OpenXcom::Region
save	Savegame/ResearchProject.cpp	/^YAML::Node ResearchProject::save() const$/;"	f	class:OpenXcom::ResearchProject
save	Savegame/SavedBattleGame.cpp	/^YAML::Node SavedBattleGame::save() const$/;"	f	class:OpenXcom::SavedBattleGame
save	Savegame/SavedGame.cpp	/^void SavedGame::save(const std::string &filename, Mod *mod) const$/;"	f	class:OpenXcom::SavedGame
save	Savegame/Soldier.cpp	/^YAML::Node Soldier::save(const ScriptGlobal *shared) const$/;"	f	class:OpenXcom::Soldier
save	Savegame/SoldierDeath.cpp	/^YAML::Node SoldierDeath::save() const$/;"	f	class:OpenXcom::SoldierDeath
save	Savegame/SoldierDiary.cpp	/^YAML::Node SoldierCommendations::save() const$/;"	f	class:OpenXcom::SoldierCommendations
save	Savegame/SoldierDiary.cpp	/^YAML::Node SoldierDiary::save() const$/;"	f	class:OpenXcom::SoldierDiary
save	Savegame/Target.cpp	/^YAML::Node Target::save() const$/;"	f	class:OpenXcom::Target
save	Savegame/Tile.cpp	/^YAML::Node Tile::save() const$/;"	f	class:OpenXcom::Tile
save	Savegame/Transfer.cpp	/^YAML::Node Transfer::save(const Base *b, const Mod *mod) const$/;"	f	class:OpenXcom::Transfer
save	Savegame/Ufo.cpp	/^YAML::Node Ufo::save(const ScriptGlobal *shared, bool newBattle) const$/;"	f	class:OpenXcom::Ufo
save	Savegame/Vehicle.cpp	/^YAML::Node Vehicle::save() const$/;"	f	class:OpenXcom::Vehicle
save	Savegame/WeightedOptions.cpp	/^YAML::Node WeightedOptions::save() const$/;"	f	class:OpenXcom::WeightedOptions
saveAIMap	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::saveAIMap()$/;"	f	class:OpenXcom::BattlescapeState
saveBase	Engine/Script.cpp	/^void ScriptValuesBase::saveBase(YAML::Node &node, const ScriptGlobal* shared, ArgEnum type, const std::string& nodeName) const$/;"	f	class:OpenXcom::ScriptValuesBase
saveBinary	Savegame/Tile.cpp	/^void Tile::saveBinary(Uint8** buffer) const$/;"	f	class:OpenXcom::Tile
saveCustomCraftDeployment	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::saveCustomCraftDeployment()$/;"	f	class:OpenXcom::SavedBattleGame
saveDummyCraftDeployment	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::saveDummyCraftDeployment()$/;"	f	class:OpenXcom::SavedBattleGame
saveEquipmentLayout	Battlescape/InventoryState.cpp	/^void InventoryState::saveEquipmentLayout()$/;"	f	class:OpenXcom::InventoryState
saveGame	Menu/ListSaveState.cpp	/^void ListSaveState::saveGame()$/;"	f	class:OpenXcom::ListSaveState
saveGlobalLayout	Battlescape/InventoryState.cpp	/^void InventoryState::saveGlobalLayout(int index, bool includingArmor)$/;"	f	class:OpenXcom::InventoryState
saveGlobalLoadout	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::saveGlobalLoadout(int index)$/;"	f	class:OpenXcom::CraftEquipmentState
saveId	Savegame/Target.cpp	/^YAML::Node Target::saveId() const$/;"	f	class:OpenXcom::Target
saveId	Savegame/Ufo.cpp	/^YAML::Node Ufo::saveId() const$/;"	f	class:OpenXcom::Ufo
saveOrder	Engine/Options.inc.h	/^OPT SaveSort saveOrder;$/;"	v
savePal	Engine/Palette.cpp	/^void Palette::savePal(const std::string &file) const$/;"	f	class:OpenXcom::Palette
savePalJasc	Engine/Palette.cpp	/^void Palette::savePalJasc(const std::string &file) const$/;"	f	class:OpenXcom::Palette
savePalMod	Engine/Palette.cpp	/^void Palette::savePalMod(const std::string &file, const std::string &type, const std::string &target) const$/;"	f	class:OpenXcom::Palette
saveRuleList	Mod/Mod.cpp	/^	void saveRuleList(const int &value, YAML::Node &node) const$/;"	f	class:OpenXcom::ModScriptGlobal	file:
saveTemplate	Basescape/CraftEquipmentSaveState.cpp	/^void CraftEquipmentSaveState::saveTemplate()$/;"	f	class:OpenXcom::CraftEquipmentSaveState
saveTemplate	Battlescape/InventorySaveState.cpp	/^void InventorySaveState::saveTemplate(bool includingArmor)$/;"	f	class:OpenXcom::InventorySaveState
saveVoxelMap	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::saveVoxelMap()$/;"	f	class:OpenXcom::BattlescapeState
saveVoxelView	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::saveVoxelView()$/;"	f	class:OpenXcom::BattlescapeState
saveZoomDogfight	Geoscape/Globe.cpp	/^void Globe::saveZoomDogfight()$/;"	f	class:OpenXcom::Globe
save_file	lodepng.cpp	/^unsigned save_file(const std::vector<unsigned char>& buffer, const std::string& filename)$/;"	f	namespace:lodepng
saved_instruments	Engine/Adlib/adlplayer.cpp	/^struc_instruments saved_instruments[2][16];$/;"	v
scalar	Mod/Unit.h	/^	static UnitStats scalar(int i)$/;"	f	struct:OpenXcom::UnitStats
scale	Engine/Scalers/scalebit.cpp	/^void scale(unsigned scale, void* void_dst, unsigned dst_slice, const void* void_src, unsigned src_slice, unsigned pixel, unsigned width, unsigned height)$/;"	f
scale	Engine/Scalers/xbrz.cpp	/^    static const int scale = 2;$/;"	m	struct:__anon10::Scaler2x	file:
scale	Engine/Scalers/xbrz.cpp	/^    static const int scale = 3;$/;"	m	struct:__anon10::Scaler3x	file:
scale	Engine/Scalers/xbrz.cpp	/^    static const int scale = 4;$/;"	m	struct:__anon10::Scaler4x	file:
scale	Engine/Scalers/xbrz.cpp	/^    static const int scale = 5;$/;"	m	struct:__anon10::Scaler5x	file:
scale	Engine/Scalers/xbrz.cpp	/^    static const int scale = 6;$/;"	m	struct:__anon10::Scaler6x	file:
scale	Engine/Scalers/xbrz.cpp	/^void xbrz::scale(size_t factor, const uint32_t* src, uint32_t* trg, int srcWidth, int srcHeight, ColorFormat colFmt, const xbrz::ScalerCfg& cfg, int yFirst, int yLast)$/;"	f	class:xbrz
scale2x	Engine/Scalers/scalebit.cpp	/^static void scale2x(void* void_dst, unsigned dst_slice, const void* void_src, unsigned src_slice, unsigned pixel, unsigned width, unsigned height)$/;"	f	file:
scale2x3	Engine/Scalers/scalebit.cpp	/^static void scale2x3(void* void_dst, unsigned dst_slice, const void* void_src, unsigned src_slice, unsigned pixel, unsigned width, unsigned height)$/;"	f	file:
scale2x3_16_def	Engine/Scalers/scale2x.cpp	/^void scale2x3_16_def(scale2x_uint16* dst0, scale2x_uint16* dst1, scale2x_uint16* dst2, const scale2x_uint16* src0, const scale2x_uint16* src1, const scale2x_uint16* src2, unsigned count)$/;"	f
scale2x3_16_mmx	Engine/Scalers/scale2x.cpp	/^void scale2x3_16_mmx(scale2x_uint16* dst0, scale2x_uint16* dst1, scale2x_uint16* dst2, const scale2x_uint16* src0, const scale2x_uint16* src1, const scale2x_uint16* src2, unsigned count)$/;"	f
scale2x3_32_def	Engine/Scalers/scale2x.cpp	/^void scale2x3_32_def(scale2x_uint32* dst0, scale2x_uint32* dst1, scale2x_uint32* dst2, const scale2x_uint32* src0, const scale2x_uint32* src1, const scale2x_uint32* src2, unsigned count)$/;"	f
scale2x3_32_mmx	Engine/Scalers/scale2x.cpp	/^void scale2x3_32_mmx(scale2x_uint32* dst0, scale2x_uint32* dst1, scale2x_uint32* dst2, const scale2x_uint32* src0, const scale2x_uint32* src1, const scale2x_uint32* src2, unsigned count)$/;"	f
scale2x3_8_def	Engine/Scalers/scale2x.cpp	/^void scale2x3_8_def(scale2x_uint8* dst0, scale2x_uint8* dst1, scale2x_uint8* dst2, const scale2x_uint8* src0, const scale2x_uint8* src1, const scale2x_uint8* src2, unsigned count)$/;"	f
scale2x3_8_mmx	Engine/Scalers/scale2x.cpp	/^void scale2x3_8_mmx(scale2x_uint8* dst0, scale2x_uint8* dst1, scale2x_uint8* dst2, const scale2x_uint8* src0, const scale2x_uint8* src1, const scale2x_uint8* src2, unsigned count)$/;"	f
scale2x4	Engine/Scalers/scalebit.cpp	/^static void scale2x4(void* void_dst, unsigned dst_slice, const void* void_src, unsigned src_slice, unsigned pixel, unsigned width, unsigned height)$/;"	f	file:
scale2x4_16_def	Engine/Scalers/scale2x.cpp	/^void scale2x4_16_def(scale2x_uint16* dst0, scale2x_uint16* dst1, scale2x_uint16* dst2, scale2x_uint16* dst3, const scale2x_uint16* src0, const scale2x_uint16* src1, const scale2x_uint16* src2, unsigned count)$/;"	f
scale2x4_16_mmx	Engine/Scalers/scale2x.cpp	/^void scale2x4_16_mmx(scale2x_uint16* dst0, scale2x_uint16* dst1, scale2x_uint16* dst2, scale2x_uint16* dst3, const scale2x_uint16* src0, const scale2x_uint16* src1, const scale2x_uint16* src2, unsigned count)$/;"	f
scale2x4_32_def	Engine/Scalers/scale2x.cpp	/^void scale2x4_32_def(scale2x_uint32* dst0, scale2x_uint32* dst1, scale2x_uint32* dst2, scale2x_uint32* dst3, const scale2x_uint32* src0, const scale2x_uint32* src1, const scale2x_uint32* src2, unsigned count)$/;"	f
scale2x4_32_mmx	Engine/Scalers/scale2x.cpp	/^void scale2x4_32_mmx(scale2x_uint32* dst0, scale2x_uint32* dst1, scale2x_uint32* dst2, scale2x_uint32* dst3, const scale2x_uint32* src0, const scale2x_uint32* src1, const scale2x_uint32* src2, unsigned count)$/;"	f
scale2x4_8_def	Engine/Scalers/scale2x.cpp	/^void scale2x4_8_def(scale2x_uint8* dst0, scale2x_uint8* dst1, scale2x_uint8* dst2, scale2x_uint8* dst3, const scale2x_uint8* src0, const scale2x_uint8* src1, const scale2x_uint8* src2, unsigned count)$/;"	f
scale2x4_8_mmx	Engine/Scalers/scale2x.cpp	/^void scale2x4_8_mmx(scale2x_uint8* dst0, scale2x_uint8* dst1, scale2x_uint8* dst2, scale2x_uint8* dst3, const scale2x_uint8* src0, const scale2x_uint8* src1, const scale2x_uint8* src2, unsigned count)$/;"	f
scale2x_16_def	Engine/Scalers/scale2x.cpp	/^void scale2x_16_def(scale2x_uint16* dst0, scale2x_uint16* dst1, const scale2x_uint16* src0, const scale2x_uint16* src1, const scale2x_uint16* src2, unsigned count)$/;"	f
scale2x_16_def_border	Engine/Scalers/scale2x.cpp	/^static inline void scale2x_16_def_border(scale2x_uint16* restrict dst, const scale2x_uint16* restrict src0, const scale2x_uint16* restrict src1, const scale2x_uint16* restrict src2, unsigned count)$/;"	f	file:
scale2x_16_def_center	Engine/Scalers/scale2x.cpp	/^static inline void scale2x_16_def_center(scale2x_uint16* restrict dst, const scale2x_uint16* restrict src0, const scale2x_uint16* restrict src1, const scale2x_uint16* restrict src2, unsigned count)$/;"	f	file:
scale2x_16_mmx	Engine/Scalers/scale2x.cpp	/^void scale2x_16_mmx(scale2x_uint16* dst0, scale2x_uint16* dst1, const scale2x_uint16* src0, const scale2x_uint16* src1, const scale2x_uint16* src2, unsigned count)$/;"	f
scale2x_16_mmx_border	Engine/Scalers/scale2x.cpp	/^static inline void scale2x_16_mmx_border(scale2x_uint16* dst, const scale2x_uint16* src0, const scale2x_uint16* src1, const scale2x_uint16* src2, unsigned count)$/;"	f	file:
scale2x_32_def	Engine/Scalers/scale2x.cpp	/^void scale2x_32_def(scale2x_uint32* dst0, scale2x_uint32* dst1, const scale2x_uint32* src0, const scale2x_uint32* src1, const scale2x_uint32* src2, unsigned count)$/;"	f
scale2x_32_def_border	Engine/Scalers/scale2x.cpp	/^static inline void scale2x_32_def_border(scale2x_uint32* restrict dst, const scale2x_uint32* restrict src0, const scale2x_uint32* restrict src1, const scale2x_uint32* restrict src2, unsigned count)$/;"	f	file:
scale2x_32_def_center	Engine/Scalers/scale2x.cpp	/^static inline void scale2x_32_def_center(scale2x_uint32* restrict dst, const scale2x_uint32* restrict src0, const scale2x_uint32* restrict src1, const scale2x_uint32* restrict src2, unsigned count)$/;"	f	file:
scale2x_32_mmx	Engine/Scalers/scale2x.cpp	/^void scale2x_32_mmx(scale2x_uint32* dst0, scale2x_uint32* dst1, const scale2x_uint32* src0, const scale2x_uint32* src1, const scale2x_uint32* src2, unsigned count)$/;"	f
scale2x_32_mmx_border	Engine/Scalers/scale2x.cpp	/^static inline void scale2x_32_mmx_border(scale2x_uint32* dst, const scale2x_uint32* src0, const scale2x_uint32* src1, const scale2x_uint32* src2, unsigned count)$/;"	f	file:
scale2x_8_def	Engine/Scalers/scale2x.cpp	/^void scale2x_8_def(scale2x_uint8* dst0, scale2x_uint8* dst1, const scale2x_uint8* src0, const scale2x_uint8* src1, const scale2x_uint8* src2, unsigned count)$/;"	f
scale2x_8_def_border	Engine/Scalers/scale2x.cpp	/^static inline void scale2x_8_def_border(scale2x_uint8* restrict dst, const scale2x_uint8* restrict src0, const scale2x_uint8* restrict src1, const scale2x_uint8* restrict src2, unsigned count)$/;"	f	file:
scale2x_8_def_center	Engine/Scalers/scale2x.cpp	/^static inline void scale2x_8_def_center(scale2x_uint8* restrict dst, const scale2x_uint8* restrict src0, const scale2x_uint8* restrict src1, const scale2x_uint8* restrict src2, unsigned count)$/;"	f	file:
scale2x_8_mmx	Engine/Scalers/scale2x.cpp	/^void scale2x_8_mmx(scale2x_uint8* dst0, scale2x_uint8* dst1, const scale2x_uint8* src0, const scale2x_uint8* src1, const scale2x_uint8* src2, unsigned count)$/;"	f
scale2x_8_mmx_border	Engine/Scalers/scale2x.cpp	/^static inline void scale2x_8_mmx_border(scale2x_uint8* dst, const scale2x_uint8* src0, const scale2x_uint8* src1, const scale2x_uint8* src2, unsigned count)$/;"	f	file:
scale2x_mmx_emms	Engine/Scalers/scale2x.h	/^static inline void scale2x_mmx_emms(void)$/;"	f
scale2x_uint16	Engine/Scalers/scale2x.h	/^typedef unsigned short scale2x_uint16;$/;"	t
scale2x_uint32	Engine/Scalers/scale2x.h	/^typedef unsigned scale2x_uint32;$/;"	t
scale2x_uint8	Engine/Scalers/scale2x.h	/^typedef unsigned char scale2x_uint8;$/;"	t
scale3x	Engine/Scalers/scalebit.cpp	/^static void scale3x(void* void_dst, unsigned dst_slice, const void* void_src, unsigned src_slice, unsigned pixel, unsigned width, unsigned height)$/;"	f	file:
scale3x_16_def	Engine/Scalers/scale3x.cpp	/^void scale3x_16_def(scale3x_uint16* dst0, scale3x_uint16* dst1, scale3x_uint16* dst2, const scale3x_uint16* src0, const scale3x_uint16* src1, const scale3x_uint16* src2, unsigned count)$/;"	f
scale3x_16_def_border	Engine/Scalers/scale3x.cpp	/^static inline void scale3x_16_def_border(scale3x_uint16* restrict dst, const scale3x_uint16* restrict src0, const scale3x_uint16* restrict src1, const scale3x_uint16* restrict src2, unsigned count)$/;"	f	file:
scale3x_16_def_center	Engine/Scalers/scale3x.cpp	/^static inline void scale3x_16_def_center(scale3x_uint16* restrict dst, const scale3x_uint16* restrict src0, const scale3x_uint16* restrict src1, const scale3x_uint16* restrict src2, unsigned count)$/;"	f	file:
scale3x_32_def	Engine/Scalers/scale3x.cpp	/^void scale3x_32_def(scale3x_uint32* dst0, scale3x_uint32* dst1, scale3x_uint32* dst2, const scale3x_uint32* src0, const scale3x_uint32* src1, const scale3x_uint32* src2, unsigned count)$/;"	f
scale3x_32_def_border	Engine/Scalers/scale3x.cpp	/^static inline void scale3x_32_def_border(scale3x_uint32* restrict dst, const scale3x_uint32* restrict src0, const scale3x_uint32* restrict src1, const scale3x_uint32* restrict src2, unsigned count)$/;"	f	file:
scale3x_32_def_center	Engine/Scalers/scale3x.cpp	/^static inline void scale3x_32_def_center(scale3x_uint32* restrict dst, const scale3x_uint32* restrict src0, const scale3x_uint32* restrict src1, const scale3x_uint32* restrict src2, unsigned count)$/;"	f	file:
scale3x_8_def	Engine/Scalers/scale3x.cpp	/^void scale3x_8_def(scale3x_uint8* dst0, scale3x_uint8* dst1, scale3x_uint8* dst2, const scale3x_uint8* src0, const scale3x_uint8* src1, const scale3x_uint8* src2, unsigned count)$/;"	f
scale3x_8_def_border	Engine/Scalers/scale3x.cpp	/^static inline void scale3x_8_def_border(scale3x_uint8* restrict dst, const scale3x_uint8* restrict src0, const scale3x_uint8* restrict src1, const scale3x_uint8* restrict src2, unsigned count)$/;"	f	file:
scale3x_8_def_center	Engine/Scalers/scale3x.cpp	/^static inline void scale3x_8_def_center(scale3x_uint8* restrict dst, const scale3x_uint8* restrict src0, const scale3x_uint8* restrict src1, const scale3x_uint8* restrict src2, unsigned count)$/;"	f	file:
scale3x_uint16	Engine/Scalers/scale3x.h	/^typedef unsigned short scale3x_uint16;$/;"	t
scale3x_uint32	Engine/Scalers/scale3x.h	/^typedef unsigned scale3x_uint32;$/;"	t
scale3x_uint8	Engine/Scalers/scale3x.h	/^typedef unsigned char scale3x_uint8;$/;"	t
scale4x	Engine/Scalers/scalebit.cpp	/^static void scale4x(void* void_dst, unsigned dst_slice, const void* void_src, unsigned src_slice, unsigned pixel, unsigned width, unsigned height)$/;"	f	file:
scale4x_buf	Engine/Scalers/scalebit.cpp	/^static void scale4x_buf(void* void_dst, unsigned dst_slice, void* void_mid, unsigned mid_slice, const void* void_src, unsigned src_slice, unsigned pixel, unsigned width, unsigned height)$/;"	f	file:
scaleImage	Engine/Scalers/xbrz.cpp	/^void scaleImage(const uint32_t* src, uint32_t* trg, int srcWidth, int srcHeight, const xbrz::ScalerCfg& cfg, int yFirst, int yLast)$/;"	f	namespace:__anon10
scale_precondition	Engine/Scalers/scalebit.cpp	/^int scale_precondition(unsigned scale, unsigned pixel, unsigned width, unsigned height)$/;"	f
scanModDir	Engine/FileMap.cpp	/^void scanModDir(const std::string& dirname, const std::string& basename, bool protectedLocation) {$/;"	f	namespace:OpenXcom::FileMap
scanModZip	Engine/FileMap.cpp	/^void scanModZip(const std::string& fullpath) {$/;"	f	namespace:OpenXcom::FileMap
scanModZipRW	Engine/FileMap.cpp	/^void scanModZipRW(SDL_RWops *rwops, const std::string& fullpath) {$/;"	f	namespace:OpenXcom::FileMap
score	Battlescape/DebriefingState.h	/^	int score;$/;"	m	struct:OpenXcom::DebriefingStat
score	Savegame/MissionStatistics.h	/^	int score;$/;"	m	struct:OpenXcom::MissionStatistics
scoreFiringMode	Battlescape/AIModule.cpp	/^int AIModule::scoreFiringMode(BattleAction *action, BattleUnit *target, bool checkLOF)$/;"	f	class:OpenXcom::AIModule
screenClick	Menu/SlideshowState.cpp	/^void SlideshowState::screenClick(Action *action)$/;"	f	class:OpenXcom::SlideshowState
screenSkip	Menu/SlideshowState.cpp	/^void SlideshowState::screenSkip(Action *)$/;"	f	class:OpenXcom::SlideshowState
screenTimer	Menu/SlideshowState.cpp	/^void SlideshowState::screenTimer()$/;"	f	class:OpenXcom::SlideshowState
screenshot	Engine/Screen.cpp	/^void Screen::screenshot(const std::string &filename) const$/;"	f	class:OpenXcom::Screen
scriptExe	Engine/Script.cpp	/^static inline void scriptExe(ScriptWorkerBase& data, const Uint8* proc)$/;"	f	namespace:OpenXcom
scroll	Interface/ArrowButton.cpp	/^void ArrowButton::scroll()$/;"	f	class:OpenXcom::ArrowButton
scroll	Ufopaedia/UfopaediaStartState.cpp	/^	void UfopaediaStartState::scroll()$/;"	f	class:OpenXcom::UfopaediaStartState
scrollButtons	Geoscape/GraphsState.cpp	/^void GraphsState::scrollButtons(std::vector<GraphButInfo *> &toggles, std::vector<ToggleTextButton *> &buttons, size_t &offset, int step)$/;"	f	class:OpenXcom::GraphsState
scrollDown	Interface/TextList.cpp	/^void TextList::scrollDown(bool toMax, bool scrollByWheel)$/;"	f	class:OpenXcom::TextList
scrollKey	Battlescape/Camera.cpp	/^void Camera::scrollKey()$/;"	f	class:OpenXcom::Camera
scrollKey	Battlescape/Map.cpp	/^void Map::scrollKey()$/;"	f	class:OpenXcom::Map
scrollMouse	Battlescape/Camera.cpp	/^void Camera::scrollMouse()$/;"	f	class:OpenXcom::Camera
scrollMouse	Battlescape/Map.cpp	/^void Map::scrollMouse()$/;"	f	class:OpenXcom::Map
scrollTo	Interface/TextList.cpp	/^void TextList::scrollTo(size_t scroll)$/;"	f	class:OpenXcom::TextList
scrollUp	Interface/TextList.cpp	/^void TextList::scrollUp(bool toMax, bool scrollByWheel)$/;"	f	class:OpenXcom::TextList
scrollXY	Battlescape/Camera.cpp	/^void Camera::scrollXY(int x, int y, bool redraw)$/;"	f	class:OpenXcom::Camera
searchCodeIndex	lodepng.cpp	/^static size_t searchCodeIndex(const unsigned* array, size_t array_size, size_t value)$/;"	f	file:
searchDataFile	Engine/CrossPlatform.cpp	/^std::string searchDataFile(const std::string &filename)$/;"	f	namespace:OpenXcom::CrossPlatform
searchDataFolder	Engine/CrossPlatform.cpp	/^std::string searchDataFolder(const std::string &foldername)$/;"	f	namespace:OpenXcom::CrossPlatform
second	Engine/Collections.h	/^		ItB second;$/;"	m	struct:OpenXcom::Collections::ZipIterator
second	lodepng.h	/^  unsigned second;  \/*0-60 (to allow for leap seconds)*\/$/;"	m	struct:LodePNGTime
second_argument_type	Basescape/SoldierArmorState.cpp	/^	typedef ArmorItem& second_argument_type;$/;"	t	struct:OpenXcom::compareArmorName	file:
second_argument_type	Basescape/SoldierSortUtil.h	/^	typedef Soldier* second_argument_type;$/;"	t	struct:OpenXcom::SortFunctor
second_argument_type	Basescape/StoresState.cpp	/^	typedef StoredItem& second_argument_type;$/;"	t	struct:OpenXcom::compareItemName	file:
second_argument_type	Basescape/StoresState.cpp	/^	typedef StoredItem& second_argument_type;$/;"	t	struct:OpenXcom::compareItemQuantity	file:
second_argument_type	Basescape/StoresState.cpp	/^	typedef StoredItem& second_argument_type;$/;"	t	struct:OpenXcom::compareItemSize	file:
second_argument_type	Basescape/StoresState.cpp	/^	typedef StoredItem& second_argument_type;$/;"	t	struct:OpenXcom::compareItemSpaceUsed	file:
second_argument_type	Menu/ListGamesState.cpp	/^	typedef SaveInfo& second_argument_type;$/;"	t	struct:OpenXcom::compareSaveName	file:
second_argument_type	Menu/ListGamesState.cpp	/^	typedef SaveInfo& second_argument_type;$/;"	t	struct:OpenXcom::compareSaveTimestamp	file:
second_argument_type	Mod/Mod.cpp	/^	typedef const std::string& second_argument_type;$/;"	t	struct:OpenXcom::compareRule	file:
second_argument_type	Mod/Mod.cpp	/^	typedef const std::string& second_argument_type;$/;"	t	struct:OpenXcom::compareSection	file:
secondaryAction	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::secondaryAction(Position pos)$/;"	f	class:OpenXcom::BattlescapeGame
section	Mod/ArticleDefinition.h	/^		std::string section;$/;"	m	class:OpenXcom::ArticleDefinition
seedless	Engine/RNG.cpp	/^int seedless(int min, int max)$/;"	f	namespace:OpenXcom::RNG
selectBit	Battlescape/TileEngine.cpp	/^constexpr static Uint32 selectBit(int dir, int z)$/;"	f	namespace:OpenXcom::__anon45
selectClosestKnownEnemy	Battlescape/AIModule.cpp	/^bool AIModule::selectClosestKnownEnemy()$/;"	f	class:OpenXcom::AIModule
selectGetOneFree	Savegame/SavedGame.cpp	/^const RuleResearch* SavedGame::selectGetOneFree(const RuleResearch* research)$/;"	f	class:OpenXcom::SavedGame
selectItem	Battlescape/UnitSprite.cpp	/^void UnitSprite::selectItem(Part& p, const BattleItem *item, int dir)$/;"	f	class:OpenXcom::UnitSprite
selectMeleeOrRanged	Battlescape/AIModule.cpp	/^void AIModule::selectMeleeOrRanged()$/;"	f	class:OpenXcom::AIModule
selectNearestTarget	Battlescape/AIModule.cpp	/^int AIModule::selectNearestTarget()$/;"	f	class:OpenXcom::AIModule
selectNearestTargetLeeroy	Battlescape/AIModule.cpp	/^int AIModule::selectNearestTargetLeeroy(bool canRun)$/;"	f	class:OpenXcom::AIModule
selectNextPlayerUnit	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::selectNextPlayerUnit(bool checkReselect, bool setReselect, bool checkInventory, bool checkFOV)$/;"	f	class:OpenXcom::BattlescapeState
selectNextPlayerUnit	Savegame/SavedBattleGame.cpp	/^BattleUnit *SavedBattleGame::selectNextPlayerUnit(bool checkReselect, bool setReselect, bool checkInventory)$/;"	f	class:OpenXcom::SavedBattleGame
selectPlayerUnit	Savegame/SavedBattleGame.cpp	/^BattleUnit *SavedBattleGame::selectPlayerUnit(int dir, bool checkReselect, bool setReselect, bool checkInventory)$/;"	f	class:OpenXcom::SavedBattleGame
selectPointNearTarget	Battlescape/AIModule.cpp	/^bool AIModule::selectPointNearTarget(BattleUnit *target, int maxTUs)$/;"	f	class:OpenXcom::AIModule
selectPointNearTargetLeeroy	Battlescape/AIModule.cpp	/^bool AIModule::selectPointNearTargetLeeroy(BattleUnit *target, bool canRun)$/;"	f	class:OpenXcom::AIModule
selectPosition	Battlescape/BattlescapeGenerator.cpp	/^bool BattlescapeGenerator::selectPosition(const std::vector<SDL_Rect *> *rects, int &X, int &Y, int sizeX, int sizeY)$/;"	f	class:OpenXcom::BattlescapeGenerator
selectPreviousPlayerUnit	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::selectPreviousPlayerUnit(bool checkReselect, bool setReselect, bool checkInventory)$/;"	f	class:OpenXcom::BattlescapeState
selectPreviousPlayerUnit	Savegame/SavedBattleGame.cpp	/^BattleUnit *SavedBattleGame::selectPreviousPlayerUnit(bool checkReselect, bool setReselect, bool checkInventory)$/;"	f	class:OpenXcom::SavedBattleGame
selectRandomTarget	Battlescape/AIModule.cpp	/^bool AIModule::selectRandomTarget()$/;"	f	class:OpenXcom::AIModule
selectSoldierNationalityByLocation	Savegame/SavedGame.cpp	/^int SavedGame::selectSoldierNationalityByLocation(const Mod* mod, const RuleSoldier* rule, const Target* target) const$/;"	f	class:OpenXcom::SavedGame
selectSpottedUnitForSniper	Battlescape/AIModule.cpp	/^bool AIModule::selectSpottedUnitForSniper()$/;"	f	class:OpenXcom::AIModule
selectUnit	Battlescape/UnitSprite.cpp	/^void UnitSprite::selectUnit(Part& p, int index, int dir)$/;"	f	class:OpenXcom::UnitSprite
selectUnit	Savegame/SavedBattleGame.cpp	/^BattleUnit *SavedBattleGame::selectUnit(Position pos)$/;"	f	class:OpenXcom::SavedBattleGame
selectXcomBase	Savegame/AlienMission.cpp	/^Base* AlienMission::selectXcomBase(SavedGame& game, const RuleRegion& regionRules)$/;"	f	class:OpenXcom::AlienMission
seq	Engine/GMCat.cpp	/^	struct seq seq;$/;"	m	struct:OpenXcom::track	typeref:struct:OpenXcom::track::seq	file:
seq	Engine/GMCat.cpp	/^struct seq {$/;"	s	namespace:OpenXcom	file:
sequentialGetOneFree	Mod/RuleResearch.cpp	/^bool RuleResearch::sequentialGetOneFree() const$/;"	f	class:OpenXcom::RuleResearch
serializationKey	Savegame/Tile.cpp	/^Tile::SerializationKey Tile::serializationKey =$/;"	m	class:OpenXcom::Tile	file:
serializationKey	Savegame/Tile.h	/^	} serializationKey;$/;"	m	class:OpenXcom::Tile	typeref:struct:OpenXcom::Tile::SerializationKey
serializeDouble	Savegame/SerializationHelper.cpp	/^std::string serializeDouble(double value)$/;"	f	namespace:OpenXcom
serializeInt	Savegame/SerializationHelper.cpp	/^void serializeInt(Uint8 **buffer, Uint8 sizeKey, int value)$/;"	f	namespace:OpenXcom
set	Mod/ArticleDefinition.cpp	/^	void ArticleDefinitionRect::set(int set_x, int set_y, int set_width, int set_height)$/;"	f	class:OpenXcom::ArticleDefinitionRect
set	Mod/MapScript.h	/^struct MCDReplacement {	int set, entry;};$/;"	m	struct:OpenXcom::MCDReplacement
set	Savegame/WeightedOptions.cpp	/^void WeightedOptions::set(const std::string &id, size_t weight)$/;"	f	class:OpenXcom::WeightedOptions
setAIModule	Savegame/BattleUnit.cpp	/^void BattleUnit::setAIModule(AIModule *ai)$/;"	f	class:OpenXcom::BattleUnit
setAborted	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setAborted(bool flag)$/;"	f	class:OpenXcom::SavedBattleGame
setAccuracy	Savegame/CraftWeaponProjectile.cpp	/^void CraftWeaponProjectile::setAccuracy(const int &accuracy)$/;"	f	class:OpenXcom::CraftWeaponProjectile
setAction	Battlescape/ActionMenuItem.cpp	/^void ActionMenuItem::setAction(BattleActionType action, const std::string &description, const std::string &accuracy, const std::string &timeunits, int tu)$/;"	f	class:OpenXcom::ActionMenuItem
setActiveLeftHand	Savegame/BattleUnit.cpp	/^void BattleUnit::setActiveLeftHand()$/;"	f	class:OpenXcom::BattleUnit
setActiveRightHand	Savegame/BattleUnit.cpp	/^void BattleUnit::setActiveRightHand()$/;"	f	class:OpenXcom::BattleUnit
setAlienBase	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setAlienBase(AlienBase *base)$/;"	f	class:OpenXcom::BattlescapeGenerator
setAlienBase	Savegame/AlienMission.cpp	/^void AlienMission::setAlienBase(const AlienBase *base)$/;"	f	class:OpenXcom::AlienMission
setAlienContainmentChecked	Savegame/SavedGame.h	/^	void setAlienContainmentChecked(bool alienContainmentChecked) { _alienContainmentChecked = alienContainmentChecked; }$/;"	f	class:OpenXcom::SavedGame
setAlienCustom	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setAlienCustom(const std::string &deploy, const std::string &mission)$/;"	f	class:OpenXcom::SavedBattleGame
setAlienCustomDeploy	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setAlienCustomDeploy(const AlienDeployment* alienCustomDeploy, const AlienDeployment* alienCustomMission)$/;"	f	class:OpenXcom::BattlescapeGenerator
setAlienItemlevel	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setAlienItemlevel(int alienItemLevel)$/;"	f	class:OpenXcom::BattlescapeGenerator
setAlienRace	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setAlienRace(const std::string &alienRace)$/;"	f	class:OpenXcom::BattlescapeGenerator
setAlienRace	Savegame/AlienBase.cpp	/^void AlienBase::setAlienRace(const std::string &race)$/;"	f	class:OpenXcom::AlienBase
setAlienRace	Savegame/MissionSite.cpp	/^void MissionSite::setAlienRace(const std::string &race)$/;"	f	class:OpenXcom::MissionSite
setAlign	Interface/Text.cpp	/^void Text::setAlign(TextHAlign align)$/;"	f	class:OpenXcom::Text
setAlign	Interface/TextEdit.cpp	/^void TextEdit::setAlign(TextHAlign align)$/;"	f	class:OpenXcom::TextEdit
setAlign	Interface/TextList.cpp	/^void TextList::setAlign(TextHAlign align, int col)$/;"	f	class:OpenXcom::TextList
setAllIds	Savegame/SavedGame.cpp	/^void SavedGame::setAllIds(const std::map<std::string, int> &ids)$/;"	f	class:OpenXcom::SavedGame
setAlreadyExploded	Savegame/BattleUnit.h	/^	void setAlreadyExploded(bool alreadyExploded) { _alreadyExploded = alreadyExploded; }$/;"	f	class:OpenXcom::BattleUnit
setAlreadyRespawned	Savegame/BattleUnit.cpp	/^void BattleUnit::setAlreadyRespawned(bool alreadyRespawned)$/;"	f	class:OpenXcom::BattleUnit
setAltMCD	Mod/MapData.cpp	/^void MapData::setAltMCD(int value)$/;"	f	class:OpenXcom::MapData
setAltPressedFlag	Engine/Game.h	/^	void setAltPressedFlag(bool newValue) { _alt = newValue; }$/;"	f	class:OpenXcom::Game
setAltitude	Savegame/Ufo.cpp	/^void Ufo::setAltitude(const std::string &altitude)$/;"	f	class:OpenXcom::Ufo
setAmbienceRandom	Savegame/SavedBattleGame.h	/^	void setAmbienceRandom(const std::vector<int> &ambienceRandom) { _ambienceRandom = ambienceRandom; }$/;"	f	class:OpenXcom::SavedBattleGame
setAmbientSound	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setAmbientSound(int sound)$/;"	f	class:OpenXcom::SavedBattleGame
setAmbientVolume	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setAmbientVolume(double volume)$/;"	f	class:OpenXcom::SavedBattleGame
setAmmo	Savegame/CraftWeapon.cpp	/^bool CraftWeapon::setAmmo(int ammo)$/;"	f	class:OpenXcom::CraftWeapon
setAmmo	Savegame/Vehicle.cpp	/^void Vehicle::setAmmo(int ammo)$/;"	f	class:OpenXcom::Vehicle
setAmmoForSlot	Savegame/BattleItem.cpp	/^BattleItem *BattleItem::setAmmoForSlot(int slot, BattleItem* item)$/;"	f	class:OpenXcom::BattleItem
setAmmoPreMission	Savegame/BattleItem.cpp	/^bool BattleItem::setAmmoPreMission(BattleItem *item)$/;"	f	class:OpenXcom::BattleItem
setAmmoQuantity	Savegame/BattleItem.cpp	/^void BattleItem::setAmmoQuantity(int qty)$/;"	f	class:OpenXcom::BattleItem
setAmmoQuantityScript	Savegame/BattleItem.cpp	/^void setAmmoQuantityScript(BattleItem* bt, int i)$/;"	f	namespace:OpenXcom::__anon39
setAmountTotal	Savegame/Production.cpp	/^void Production::setAmountTotal (int amount)$/;"	f	class:OpenXcom::Production
setArmor	Mod/MapData.cpp	/^void MapData::setArmor(int value)$/;"	f	class:OpenXcom::MapData
setArmor	Savegame/BattleUnit.cpp	/^void BattleUnit::setArmor(int armor, UnitSide side)$/;"	f	class:OpenXcom::BattleUnit
setArmor	Savegame/Soldier.cpp	/^void Soldier::setArmor(Armor *armor, bool resetCustomDeployment)$/;"	f	class:OpenXcom::Soldier
setArmorValueScript	Savegame/BattleUnit.cpp	/^void setArmorValueScript(BattleUnit *bu, int side, int value)$/;"	f	namespace:OpenXcom::__anon36
setArrowColor	Interface/ComboBox.cpp	/^void ComboBox::setArrowColor(Uint8 color)$/;"	f	class:OpenXcom::ComboBox
setArrowColor	Interface/TextList.cpp	/^void TextList::setArrowColor(Uint8 color)$/;"	f	class:OpenXcom::TextList
setArrowColumn	Interface/TextList.cpp	/^void TextList::setArrowColumn(int pos, ArrowOrientation type)$/;"	f	class:OpenXcom::TextList
setAssigned	Savegame/ResearchProject.cpp	/^void ResearchProject::setAssigned (int nb)$/;"	f	class:OpenXcom::ResearchProject
setAssignedEngineer	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::setAssignedEngineer()$/;"	f	class:OpenXcom::ManufactureInfoState
setAssignedEngineers	Savegame/Production.cpp	/^void Production::setAssignedEngineers (int engineers)$/;"	f	class:OpenXcom::Production
setAssignedScientist	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::setAssignedScientist()$/;"	f	class:OpenXcom::ResearchInfoState
setAutosell	Savegame/SavedGame.cpp	/^void SavedGame::setAutosell(const RuleItem *itype, const bool enabled)$/;"	f	class:OpenXcom::SavedGame
setBackground	Battlescape/BattlescapeMessage.cpp	/^void BattlescapeMessage::setBackground(Surface *background)$/;"	f	class:OpenXcom::BattlescapeMessage
setBackground	Interface/ComboBox.cpp	/^void ComboBox::setBackground(Surface *bg)$/;"	f	class:OpenXcom::ComboBox
setBackground	Interface/ScrollBar.cpp	/^void ScrollBar::setBackground(Surface *bg)$/;"	f	class:OpenXcom::ScrollBar
setBackground	Interface/TextList.cpp	/^void TextList::setBackground(Surface *bg)$/;"	f	class:OpenXcom::TextList
setBackground	Interface/Window.cpp	/^void Window::setBackground(const Surface *bg)$/;"	f	class:OpenXcom::Window
setBase	Basescape/BaseView.cpp	/^void BaseView::setBase(Base *base)$/;"	f	class:OpenXcom::BaseView
setBase	Basescape/BasescapeState.cpp	/^void BasescapeState::setBase(Base *base)$/;"	f	class:OpenXcom::BasescapeState
setBase	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setBase(Base *base)$/;"	f	class:OpenXcom::BattlescapeGenerator
setBase	Engine/Script.cpp	/^void ScriptValuesBase::setBase(size_t t, int i)$/;"	f	class:OpenXcom::ScriptValuesBase
setBase	Savegame/Craft.cpp	/^void Craft::setBase(Base *base, bool move)$/;"	f	class:OpenXcom::Craft
setBaseStatRangeScript	Savegame/BattleUnit.cpp	/^void setBaseStatRangeScript(BattleUnit *bu, int val)$/;"	f	namespace:OpenXcom::__anon36
setBaseStatScript	Savegame/BattleUnit.cpp	/^void setBaseStatScript(BattleUnit *bu, int val)$/;"	f	namespace:OpenXcom::__anon36
setBases	Basescape/MiniBaseView.cpp	/^void MiniBaseView::setBases(std::vector<Base*> *bases)$/;"	f	class:OpenXcom::MiniBaseView
setBattleGame	Savegame/SavedGame.cpp	/^void SavedGame::setBattleGame(SavedBattleGame *battleGame)$/;"	f	class:OpenXcom::SavedGame
setBattleState	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setBattleState(BattlescapeState *bs)$/;"	f	class:OpenXcom::SavedBattleGame
setBig	Interface/Text.cpp	/^void Text::setBig()$/;"	f	class:OpenXcom::Text
setBig	Interface/TextButton.cpp	/^void TextButton::setBig()$/;"	f	class:OpenXcom::TextButton
setBig	Interface/TextEdit.cpp	/^void TextEdit::setBig()$/;"	f	class:OpenXcom::TextEdit
setBig	Interface/TextList.cpp	/^void TextList::setBig()$/;"	f	class:OpenXcom::TextList
setBigWall	Mod/MapData.cpp	/^void MapData::setBigWall(const int bigWall)$/;"	f	class:OpenXcom::MapData
setBitOfReversedStream	lodepng.cpp	/^static void setBitOfReversedStream(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)$/;"	f	file:
setBitOfReversedStream0	lodepng.cpp	/^static void setBitOfReversedStream0(size_t* bitpointer, unsigned char* bitstream, unsigned char bit)$/;"	f	file:
setBlastFlash	Battlescape/Map.cpp	/^void Map::setBlastFlash(bool flash)$/;"	f	class:OpenXcom::Map
setBlockValue	Mod/MapData.cpp	/^void MapData::setBlockValue(int lightBlock, int visionBlock, int HEBlock, int smokeBlock, int fireBlock, int gasBlock)$/;"	f	class:OpenXcom::MapData
setBorderColor	Basescape/MiniBaseView.cpp	/^void MiniBaseView::setBorderColor(Uint8 color)$/;"	f	class:OpenXcom::MiniBaseView
setBorderColor	Engine/Surface.h	/^	virtual void setBorderColor(Uint8 \/*color*\/) { \/* empty by design *\/ };$/;"	f	class:OpenXcom::Surface
setBorderColor	Interface/Bar.cpp	/^void Bar::setBorderColor(Uint8 bc)$/;"	f	class:OpenXcom::Bar
setBorderColor	Interface/Frame.cpp	/^void Frame::setBorderColor(Uint8 color)$/;"	f	class:OpenXcom::Frame
setBorderColor	Interface/TextList.cpp	/^void TextList::setBorderColor(Uint8 color)$/;"	f	class:OpenXcom::TextList
setBordered	Interface/NumberText.cpp	/^void NumberText::setBordered(bool bordered)$/;"	f	class:OpenXcom::NumberText
setBothStats	Savegame/Soldier.cpp	/^void Soldier::setBothStats(UnitStats *stats)$/;"	f	class:OpenXcom::Soldier
setBottomL	Engine/Scalers/xbrz.cpp	/^inline void setBottomL(unsigned char& b, BlendType bt) { b |= (bt << 6); }$/;"	f	namespace:__anon10
setBottomR	Engine/Scalers/xbrz.cpp	/^inline void setBottomR(unsigned char& b, BlendType bt) { b |= (bt << 4); }$/;"	f	namespace:__anon10
setBughuntMinTurn	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setBughuntMinTurn(int bughuntMinTurn)$/;"	f	class:OpenXcom::SavedBattleGame
setBughuntMode	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setBughuntMode(bool bughuntMode)$/;"	f	class:OpenXcom::SavedBattleGame
setBuildTime	Savegame/BaseFacility.cpp	/^void BaseFacility::setBuildTime(int time)$/;"	f	class:OpenXcom::BaseFacility
setButtonPressed	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::setButtonPressed(Uint8 button, bool pressed)$/;"	f	class:OpenXcom::InteractiveSurface
setButtonsPressed	Battlescape/Map.cpp	/^void Map::setButtonsPressed(Uint8 button, bool pressed)$/;"	f	class:OpenXcom::Map
setCallsign	Savegame/Soldier.cpp	/^void Soldier::setCallsign(const std::string &callsign)$/;"	f	class:OpenXcom::Soldier
setCancelPact	Savegame/Country.cpp	/^void Country::setCancelPact()$/;"	f	class:OpenXcom::Country
setCategory	Menu/OptionsBaseState.cpp	/^void OptionsBaseState::setCategory(TextButton *button)$/;"	f	class:OpenXcom::OptionsBaseState
setCellColor	Interface/TextList.cpp	/^void TextList::setCellColor(size_t row, size_t column, Uint8 color)$/;"	f	class:OpenXcom::TextList
setCellText	Interface/TextList.cpp	/^void TextList::setCellText(size_t row, size_t column, const std::string &text)$/;"	f	class:OpenXcom::TextList
setCharging	Savegame/BattleUnit.cpp	/^void BattleUnit::setCharging(BattleUnit *chargeTarget)$/;"	f	class:OpenXcom::BattleUnit
setCheatTurn	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setCheatTurn(int turn)$/;"	f	class:OpenXcom::SavedBattleGame
setChecked	Battlescape/PathfindingNode.h	/^	void setChecked() { _checked = true; }$/;"	f	class:OpenXcom::PathfindingNode
setChronoTrigger	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setChronoTrigger(ChronoTrigger trigger)$/;"	f	class:OpenXcom::SavedBattleGame
setCity	Savegame/MissionSite.cpp	/^void MissionSite::setCity(const std::string &city)$/;"	f	class:OpenXcom::MissionSite
setCloseQuarters	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::setCloseQuarters()$/;"	f	class:OpenXcom::RuleStatBonus
setColor	Basescape/BaseView.cpp	/^void BaseView::setColor(Uint8 color)$/;"	f	class:OpenXcom::BaseView
setColor	Basescape/MiniBaseView.cpp	/^void MiniBaseView::setColor(Uint8 color)$/;"	f	class:OpenXcom::MiniBaseView
setColor	Battlescape/WarningMessage.cpp	/^void WarningMessage::setColor(Uint8 color)$/;"	f	class:OpenXcom::WarningMessage
setColor	Engine/Palette.cpp	/^void Palette::setColor(int index, int r, int g, int b)$/;"	f	class:OpenXcom::Palette
setColor	Engine/Surface.h	/^	virtual void setColor(Uint8 \/*color*\/) { \/* empty by design *\/ };$/;"	f	class:OpenXcom::Surface
setColor	Interface/ArrowButton.cpp	/^void ArrowButton::setColor(Uint8 color)$/;"	f	class:OpenXcom::ArrowButton
setColor	Interface/Bar.cpp	/^void Bar::setColor(Uint8 color)$/;"	f	class:OpenXcom::Bar
setColor	Interface/BattlescapeButton.cpp	/^void BattlescapeButton::setColor(Uint8 color)$/;"	f	class:OpenXcom::BattlescapeButton
setColor	Interface/ComboBox.cpp	/^void ComboBox::setColor(Uint8 color)$/;"	f	class:OpenXcom::ComboBox
setColor	Interface/Cursor.cpp	/^void Cursor::setColor(Uint8 color)$/;"	f	class:OpenXcom::Cursor
setColor	Interface/FpsCounter.cpp	/^void FpsCounter::setColor(Uint8 color)$/;"	f	class:OpenXcom::FpsCounter
setColor	Interface/Frame.cpp	/^void Frame::setColor(Uint8 color)$/;"	f	class:OpenXcom::Frame
setColor	Interface/ImageButton.cpp	/^void ImageButton::setColor(Uint8 color)$/;"	f	class:OpenXcom::ImageButton
setColor	Interface/NumberText.cpp	/^void NumberText::setColor(Uint8 color)$/;"	f	class:OpenXcom::NumberText
setColor	Interface/ScrollBar.cpp	/^void ScrollBar::setColor(Uint8 color)$/;"	f	class:OpenXcom::ScrollBar
setColor	Interface/Slider.cpp	/^void Slider::setColor(Uint8 color)$/;"	f	class:OpenXcom::Slider
setColor	Interface/Text.cpp	/^void Text::setColor(Uint8 color)$/;"	f	class:OpenXcom::Text
setColor	Interface/TextButton.cpp	/^void TextButton::setColor(Uint8 color)$/;"	f	class:OpenXcom::TextButton
setColor	Interface/TextEdit.cpp	/^void TextEdit::setColor(Uint8 color)$/;"	f	class:OpenXcom::TextEdit
setColor	Interface/TextList.cpp	/^void TextList::setColor(Uint8 color)$/;"	f	class:OpenXcom::TextList
setColor	Interface/ToggleTextButton.cpp	/^void ToggleTextButton::setColor(Uint8 color)$/;"	f	class:OpenXcom::ToggleTextButton
setColor	Interface/Window.cpp	/^void Window::setColor(Uint8 color)$/;"	f	class:OpenXcom::Window
setColors	Engine/Palette.cpp	/^void Palette::setColors(SDL_Color* pal, int ncolors)$/;"	f	class:OpenXcom::Palette
setColumns	Interface/TextList.cpp	/^void TextList::setColumns(int cols, ...)$/;"	f	class:OpenXcom::TextList
setComboBox	Interface/TextButton.cpp	/^void TextButton::setComboBox(ComboBox *comboBox)$/;"	f	class:OpenXcom::TextButton
setComboBox	Interface/TextList.cpp	/^void TextList::setComboBox(ComboBox *comboBox)$/;"	f	class:OpenXcom::TextList
setCondensed	Interface/TextList.cpp	/^void TextList::setCondensed(bool condensed)$/;"	f	class:OpenXcom::TextList
setConstraint	Interface/TextEdit.cpp	/^void TextEdit::setConstraint(TextEditConstraint constraint)$/;"	f	class:OpenXcom::TextEdit
setCorpseRecovered	Savegame/Soldier.cpp	/^void Soldier::setCorpseRecovered(bool corpseRecovered)$/;"	f	class:OpenXcom::Soldier
setCost	Savegame/ResearchProject.cpp	/^void ResearchProject::setCost(int f)$/;"	f	class:OpenXcom::ResearchProject
setCraft	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setCraft(Craft *craft)$/;"	f	class:OpenXcom::BattlescapeGenerator
setCraft	Savegame/Soldier.cpp	/^void Soldier::setCraft(Craft *craft, bool resetCustomDeployment)$/;"	f	class:OpenXcom::Soldier
setCraft	Savegame/Transfer.cpp	/^void Transfer::setCraft(Craft *craft)$/;"	f	class:OpenXcom::Transfer
setCraftAndMoveEquipment	Savegame/Soldier.cpp	/^void Soldier::setCraftAndMoveEquipment(Craft* craft, Base* base, bool isNewBattle, bool resetCustomDeployment)$/;"	f	class:OpenXcom::Soldier
setCraftForDrawing	Savegame/BaseFacility.cpp	/^void BaseFacility::setCraftForDrawing(Craft *craft)$/;"	f	class:OpenXcom::BaseFacility
setCraftForPreview	Savegame/SavedBattleGame.h	/^	void setCraftForPreview(Craft* craftForPreview) { _craftForPreview = craftForPreview; }$/;"	f	class:OpenXcom::SavedBattleGame
setCraftPos	Savegame/SavedBattleGame.h	/^	void setCraftPos(SDL_Rect craftPos) { _craftPos = craftPos; }$/;"	f	class:OpenXcom::SavedBattleGame
setCraftRange	Geoscape/Globe.cpp	/^void Globe::setCraftRange(double lon, double lat, double range)$/;"	f	class:OpenXcom::Globe
setCraftZ	Savegame/SavedBattleGame.h	/^	void setCraftZ(int craftZ) { _craftZ = craftZ; }$/;"	f	class:OpenXcom::SavedBattleGame
setCrashId	Savegame/Ufo.cpp	/^void Ufo::setCrashId(int id)$/;"	f	class:OpenXcom::Ufo
setCtrlPressedFlag	Engine/Game.h	/^	void setCtrlPressedFlag(bool newValue) { _ctrl = newValue; }$/;"	f	class:OpenXcom::Game
setCurrentAmbienceDelay	Savegame/SavedBattleGame.h	/^	void setCurrentAmbienceDelay(int currentAmbienceDelay) { _currentAmbienceDelay = currentAmbienceDelay; }$/;"	f	class:OpenXcom::SavedBattleGame
setCurrentMusicTrack	Mod/Mod.h	/^	void setCurrentMusicTrack(const std::string& currentMusicTrack) { _currentMusicTrack = currentMusicTrack; }$/;"	f	class:OpenXcom::Mod
setCursorType	Battlescape/Map.cpp	/^void Map::setCursorType(CursorType type, int size)$/;"	f	class:OpenXcom::Map
setCustomCraftInventoryTile	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setCustomCraftInventoryTile()$/;"	f	class:OpenXcom::BattlescapeGenerator
setCustomPalette	Engine/State.cpp	/^void State::setCustomPalette(SDL_Color *colors, int cursorColor)$/;"	f	class:OpenXcom::State
setDX	Interface/Window.cpp	/^void Window::setDX(int dx)$/;"	f	class:OpenXcom::Window
setDY	Interface/Window.cpp	/^void Window::setDY(int dy)$/;"	f	class:OpenXcom::Window
setDamage	Savegame/Craft.cpp	/^void Craft::setDamage(int damage)$/;"	f	class:OpenXcom::Craft
setDamage	Savegame/CraftWeaponProjectile.cpp	/^void CraftWeaponProjectile::setDamage(const int &damage)$/;"	f	class:OpenXcom::CraftWeaponProjectile
setDamage	Savegame/Ufo.cpp	/^void Ufo::setDamage(int damage, const Mod *mod)$/;"	f	class:OpenXcom::Ufo
setDangerZone	Battlescape/TileEngine.cpp	/^void TileEngine::setDangerZone(Position pos, int radius, BattleUnit *unit)$/;"	f	class:OpenXcom::TileEngine
setDangerous	Savegame/Tile.cpp	/^void Tile::setDangerous(bool danger)$/;"	f	class:OpenXcom::Tile
setDataFolder	Engine/Options.cpp	/^void setDataFolder(const std::string &folder)$/;"	f	namespace:OpenXcom::Options
setDebugMode	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setDebugMode()$/;"	f	class:OpenXcom::SavedBattleGame
setDebugMode	Savegame/SavedGame.cpp	/^void SavedGame::setDebugMode()$/;"	f	class:OpenXcom::SavedGame
setDeployment	Savegame/AlienBase.cpp	/^void AlienBase::setDeployment(AlienDeployment *deployment)$/;"	f	class:OpenXcom::AlienBase
setDepth	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setDepth(const AlienDeployment* ruleDeploy, bool nextStage)$/;"	f	class:OpenXcom::BattlescapeGenerator
setDepth	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setDepth(int depth)$/;"	f	class:OpenXcom::SavedBattleGame
setDestination	Savegame/Craft.cpp	/^void Craft::setDestination(Target *dest)$/;"	f	class:OpenXcom::Craft
setDestination	Savegame/MovingTarget.cpp	/^void MovingTarget::setDestination(Target *dest)$/;"	f	class:OpenXcom::MovingTarget
setDestination	Savegame/Ufo.cpp	/^void Ufo::setDestination(Target *dest)$/;"	f	class:OpenXcom::Ufo
setDetected	Savegame/MissionSite.cpp	/^void MissionSite::setDetected(bool detected)$/;"	f	class:OpenXcom::MissionSite
setDetected	Savegame/Ufo.cpp	/^void Ufo::setDetected(bool detected)$/;"	f	class:OpenXcom::Ufo
setDieMCD	Mod/MapData.cpp	/^void MapData::setDieMCD(int value)$/;"	f	class:OpenXcom::MapData
setDifficulty	Savegame/SavedGame.cpp	/^void SavedGame::setDifficulty(GameDifficulty difficulty)$/;"	f	class:OpenXcom::SavedGame
setDirection	Savegame/BattleUnit.cpp	/^void BattleUnit::setDirection(int direction)$/;"	f	class:OpenXcom::BattleUnit
setDirection	Savegame/CraftWeaponProjectile.cpp	/^void CraftWeaponProjectile::setDirection(const int &directon)$/;"	f	class:OpenXcom::CraftWeaponProjectile
setDisableSoldierEquipment	Savegame/SavedGame.cpp	/^void SavedGame::setDisableSoldierEquipment(bool disableSoldierEquipment)$/;"	f	class:OpenXcom::SavedGame
setDisabled	Savegame/BaseFacility.cpp	/^void BaseFacility::setDisabled(bool disabled)$/;"	f	class:OpenXcom::BaseFacility
setDisabled	Savegame/CraftWeapon.cpp	/^void CraftWeapon::setDisabled(bool disabled)$/;"	f	class:OpenXcom::CraftWeapon
setDiscovered	Savegame/AlienBase.cpp	/^void AlienBase::setDiscovered(bool discovered)$/;"	f	class:OpenXcom::AlienBase
setDiscovered	Savegame/Tile.cpp	/^void Tile::setDiscovered(bool flag, TilePart part)$/;"	f	class:OpenXcom::Tile
setDomain	Engine/ShaderDrawHelper.h	/^	inline void setDomain(const GraphSubset& g)$/;"	f	class:OpenXcom::helper::ShaderBase
setDot	Interface/TextList.cpp	/^void TextList::setDot(bool dot)$/;"	f	class:OpenXcom::TextList
setDropdown	Interface/ComboBox.cpp	/^void ComboBox::setDropdown(int options)$/;"	f	class:OpenXcom::ComboBox
setDummy	Savegame/Node.cpp	/^void Node::setDummy(bool dummy)$/;"	f	class:OpenXcom::Node
setEnding	Savegame/SavedGame.cpp	/^void SavedGame::setEnding(GameEnding end)$/;"	f	class:OpenXcom::SavedGame
setEnergyMarker	Savegame/Tile.cpp	/^void Tile::setEnergyMarker(int energy)$/;"	f	class:OpenXcom::Tile
setEnergyRecovery	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::setEnergyRecovery()$/;"	f	class:OpenXcom::RuleStatBonus
setEngineers	Savegame/Base.cpp	/^void Base::setEngineers(int engineers)$/;"	f	class:OpenXcom::Base
setEngineers	Savegame/Transfer.cpp	/^void Transfer::setEngineers(int engineers)$/;"	f	class:OpenXcom::Transfer
setEnviFire	Savegame/BattleUnit.cpp	/^void BattleUnit::setEnviFire(int damage)$/;"	f	class:OpenXcom::BattleUnit
setEnviSmoke	Savegame/BattleUnit.cpp	/^void BattleUnit::setEnviSmoke(int damage)$/;"	f	class:OpenXcom::BattleUnit
setEscapeCountdown	Savegame/Ufo.cpp	/^void Ufo::setEscapeCountdown(int time)$/;"	f	class:OpenXcom::Ufo
setEscort	Savegame/Ufo.cpp	/^void Ufo::setEscort(bool isEscort)$/;"	f	class:OpenXcom::Ufo
setEscortedUfo	Savegame/Ufo.cpp	/^void Ufo::setEscortedUfo(Ufo *ufo)$/;"	f	class:OpenXcom::Ufo
setExplosive	Mod/MapData.cpp	/^void MapData::setExplosive(int value)$/;"	f	class:OpenXcom::MapData
setExplosive	Savegame/Tile.cpp	/^void Tile::setExplosive(int power, int damageType, bool force)$/;"	f	class:OpenXcom::Tile
setExplosiveType	Mod/MapData.cpp	/^void MapData::setExplosiveType(int value)$/;"	f	class:OpenXcom::MapData
setFaceDirection	Savegame/BattleUnit.cpp	/^void BattleUnit::setFaceDirection(int direction)$/;"	f	class:OpenXcom::BattleUnit
setFakeUnderwater	Savegame/Base.h	/^	void setFakeUnderwater(bool fakeUnderwater) { _fakeUnderwater = fakeUnderwater; }$/;"	f	class:OpenXcom::Base
setFatalShotInfo	Savegame/BattleUnit.cpp	/^void BattleUnit::setFatalShotInfo(UnitSide side, UnitBodyPart bodypart)$/;"	f	class:OpenXcom::BattleUnit
setFatalWound	Savegame/BattleUnit.cpp	/^void BattleUnit::setFatalWound(int wound, UnitBodyPart part)$/;"	f	class:OpenXcom::BattleUnit
setFatalWoundScript	Savegame/BattleUnit.cpp	/^void setFatalWoundScript(BattleUnit *bu, int part, int val)$/;"	f	namespace:OpenXcom::__anon36
setFire	Savegame/BattleUnit.cpp	/^void BattleUnit::setFire(int fire)$/;"	f	class:OpenXcom::BattleUnit
setFire	Savegame/Tile.cpp	/^void Tile::setFire(int fire)$/;"	f	class:OpenXcom::Tile
setFireCountdown	Savegame/Ufo.cpp	/^void Ufo::setFireCountdown(int time)$/;"	f	class:OpenXcom::Ufo
setFireScript	Savegame/BattleUnit.cpp	/^void setFireScript(BattleUnit *bu, int val)$/;"	f	namespace:OpenXcom::__anon36
setFiring	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::setFiring()$/;"	f	class:OpenXcom::RuleStatBonus
setFlags	Mod/MapData.cpp	/^void MapData::setFlags(bool isUfoDoor, bool stopLOS, bool isNoFloor, int bigWall, bool isGravLift, bool isDoor, bool blockFire, bool blockSmoke, bool baseModule)$/;"	f	class:OpenXcom::MapData
setFlammable	Mod/MapData.cpp	/^void MapData::setFlammable(int value)$/;"	f	class:OpenXcom::MapData
setFlatHundred	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::setFlatHundred()$/;"	f	class:OpenXcom::RuleStatBonus
setFlooding	Interface/TextList.cpp	/^void TextList::setFlooding(bool flooding)$/;"	f	class:OpenXcom::TextList
setFloorAbove	Savegame/BattleUnit.cpp	/^void BattleUnit::setFloorAbove(bool floor)$/;"	f	class:OpenXcom::BattleUnit
setFocus	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::setFocus(bool focus, bool modal)$/;"	f	class:OpenXcom::InteractiveSurface
setFocus	Interface/TextEdit.cpp	/^void TextEdit::setFocus(bool focus, bool modal)$/;"	f	class:OpenXcom::TextEdit
setFolders	Engine/Options.cpp	/^void setFolders()$/;"	f	namespace:OpenXcom::Options
setFollowProjectile	Battlescape/Map.h	/^	void setFollowProjectile(bool followProjectile) { _followProjectile = followProjectile; }$/;"	f	class:OpenXcom::Map
setFootstepSound	Mod/MapData.cpp	/^void MapData::setFootstepSound(int value)$/;"	f	class:OpenXcom::MapData
setFuel	Mod/MapData.cpp	/^void MapData::setFuel(int value)$/;"	f	class:OpenXcom::MapData
setFuel	Savegame/Craft.cpp	/^void Craft::setFuel(int fuel)$/;"	f	class:OpenXcom::Craft
setFunding	Savegame/Country.cpp	/^void Country::setFunding(int funding)$/;"	f	class:OpenXcom::Country
setFunds	Savegame/SavedGame.cpp	/^void SavedGame::setFunds(int64_t funds)$/;"	f	class:OpenXcom::SavedGame
setFuseEnabled	Savegame/BattleItem.cpp	/^void BattleItem::setFuseEnabled(bool enable)$/;"	f	class:OpenXcom::BattleItem
setFuseTimer	Savegame/BattleItem.cpp	/^void BattleItem::setFuseTimer(int turns)$/;"	f	class:OpenXcom::BattleItem
setFuseTimerScript	Savegame/BattleItem.cpp	/^void setFuseTimerScript(BattleItem* bt, int i)$/;"	f	namespace:OpenXcom::__anon39
setGamePtr	Engine/State.cpp	/^void State::setGamePtr(Game* game)$/;"	f	class:OpenXcom::State
setGenMissionCount	Savegame/AlienBase.cpp	/^void AlienBase::setGenMissionCount(int newValue)$/;"	f	class:OpenXcom::AlienBase
setGender	Savegame/Soldier.cpp	/^void Soldier::setGender(SoldierGender gender)$/;"	f	class:OpenXcom::Soldier
setGeoscapeButton	Interface/TextButton.cpp	/^void TextButton::setGeoscapeButton(bool geo)$/;"	f	class:OpenXcom::TextButton
setGlobalCraftLoadoutName	Savegame/SavedGame.cpp	/^void SavedGame::setGlobalCraftLoadoutName(int index, const std::string &name)$/;"	f	class:OpenXcom::SavedGame
setGlobalEquipmentLayoutArmor	Savegame/SavedGame.cpp	/^void SavedGame::setGlobalEquipmentLayoutArmor(int index, const std::string& armorType)$/;"	f	class:OpenXcom::SavedGame
setGlobalEquipmentLayoutName	Savegame/SavedGame.cpp	/^void SavedGame::setGlobalEquipmentLayoutName(int index, const std::string &name)$/;"	f	class:OpenXcom::SavedGame
setGlobalLayoutIndex	Battlescape/InventoryState.cpp	/^void InventoryState::setGlobalLayoutIndex(int index, bool armorChanged)$/;"	f	class:OpenXcom::InventoryState
setGlobalShade	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setGlobalShade(int shade)$/;"	f	class:OpenXcom::SavedBattleGame
setGlobeLatitude	Savegame/SavedGame.cpp	/^void SavedGame::setGlobeLatitude(double lat)$/;"	f	class:OpenXcom::SavedGame
setGlobeLongitude	Savegame/SavedGame.cpp	/^void SavedGame::setGlobeLongitude(double lon)$/;"	f	class:OpenXcom::SavedGame
setGlobeZoom	Savegame/SavedGame.cpp	/^void SavedGame::setGlobeZoom(int zoom)$/;"	f	class:OpenXcom::SavedGame
setGraphCountryToggles	Savegame/SavedGame.cpp	/^void SavedGame::setGraphCountryToggles(const std::string &value)$/;"	f	class:OpenXcom::SavedGame
setGraphFinanceToggles	Savegame/SavedGame.cpp	/^void SavedGame::setGraphFinanceToggles(const std::string &value)$/;"	f	class:OpenXcom::SavedGame
setGraphRegionToggles	Savegame/SavedGame.cpp	/^void SavedGame::setGraphRegionToggles(const std::string &value)$/;"	f	class:OpenXcom::SavedGame
setGroup	Interface/BattlescapeButton.cpp	/^void BattlescapeButton::setGroup(BattlescapeButton **group)$/;"	f	class:OpenXcom::BattlescapeButton
setGroup	Interface/ImageButton.cpp	/^void ImageButton::setGroup(ImageButton **group)$/;"	f	class:OpenXcom::ImageButton
setGroup	Interface/TextButton.cpp	/^void TextButton::setGroup(TextButton **group)$/;"	f	class:OpenXcom::TextButton
setHEBlock	Mod/MapData.cpp	/^void MapData::setHEBlock(int HEBlock)$/;"	f	class:OpenXcom::MapData
setHeaderSpeed	Engine/FlcPlayer.cpp	/^void FlcPlayer::setHeaderSpeed(int speed)$/;"	f	class:OpenXcom::FlcPlayer
setHealQuantity	Savegame/BattleItem.cpp	/^void BattleItem::setHealQuantity (int heal)$/;"	f	class:OpenXcom::BattleItem
setHealQuantityScript	Savegame/BattleItem.cpp	/^void setHealQuantityScript(BattleItem* bt, int i)$/;"	f	namespace:OpenXcom::__anon39
setHealthMissing	Savegame/Soldier.cpp	/^void Soldier::setHealthMissing(int healthMissing)$/;"	f	class:OpenXcom::Soldier
setHeight	Battlescape/BattlescapeMessage.cpp	/^void BattlescapeMessage::setHeight(int height)$/;"	f	class:OpenXcom::BattlescapeMessage
setHeight	Battlescape/Map.cpp	/^void Map::setHeight(int height)$/;"	f	class:OpenXcom::Map
setHeight	Engine/Surface.cpp	/^void Surface::setHeight(int height)$/;"	f	class:OpenXcom::Surface
setHeight	Interface/ScrollBar.cpp	/^void ScrollBar::setHeight(int height)$/;"	f	class:OpenXcom::ScrollBar
setHeight	Interface/TextButton.cpp	/^void TextButton::setHeight(int height)$/;"	f	class:OpenXcom::TextButton
setHeight	Interface/TextList.cpp	/^void TextList::setHeight(int height)$/;"	f	class:OpenXcom::TextList
setHidden	Engine/Surface.cpp	/^void Surface::setHidden(bool hidden)$/;"	f	class:OpenXcom::Surface
setHiddenPurchaseItemsStatus	Savegame/SavedGame.cpp	/^void SavedGame::setHiddenPurchaseItemsStatus(const std::string &itemName, bool hidden)$/;"	f	class:OpenXcom::SavedGame
setHiding	Savegame/BattleUnit.h	/^	void setHiding(bool hiding) { _hidingForTurn = hiding; };$/;"	f	class:OpenXcom::BattleUnit
setHighContrast	Engine/Surface.h	/^	virtual void setHighContrast(bool \/*contrast*\/) { \/* empty by design *\/ };$/;"	f	class:OpenXcom::Surface
setHighContrast	Interface/ComboBox.cpp	/^void ComboBox::setHighContrast(bool contrast)$/;"	f	class:OpenXcom::ComboBox
setHighContrast	Interface/Frame.cpp	/^void Frame::setHighContrast(bool contrast)$/;"	f	class:OpenXcom::Frame
setHighContrast	Interface/ScrollBar.cpp	/^void ScrollBar::setHighContrast(bool contrast)$/;"	f	class:OpenXcom::ScrollBar
setHighContrast	Interface/Slider.cpp	/^void Slider::setHighContrast(bool contrast)$/;"	f	class:OpenXcom::Slider
setHighContrast	Interface/Text.cpp	/^void Text::setHighContrast(bool contrast)$/;"	f	class:OpenXcom::Text
setHighContrast	Interface/TextButton.cpp	/^void TextButton::setHighContrast(bool contrast)$/;"	f	class:OpenXcom::TextButton
setHighContrast	Interface/TextEdit.cpp	/^void TextEdit::setHighContrast(bool contrast)$/;"	f	class:OpenXcom::TextEdit
setHighContrast	Interface/TextList.cpp	/^void TextList::setHighContrast(bool contrast)$/;"	f	class:OpenXcom::TextList
setHighContrast	Interface/Window.cpp	/^void Window::setHighContrast(bool contrast)$/;"	f	class:OpenXcom::Window
setHitFrame	Savegame/Ufo.cpp	/^void Ufo::setHitFrame(int frame)$/;"	f	class:OpenXcom::Ufo
setHorizontalPosition	Savegame/CraftWeaponProjectile.cpp	/^void CraftWeaponProjectile::setHorizontalPosition(int position)$/;"	f	class:OpenXcom::CraftWeaponProjectile
setHunterKiller	Savegame/Ufo.cpp	/^void Ufo::setHunterKiller(bool isHunterKiller)$/;"	f	class:OpenXcom::Ufo
setHyperDetected	Savegame/Ufo.cpp	/^void Ufo::setHyperDetected(bool hyperdetected)$/;"	f	class:OpenXcom::Ufo
setId	Savegame/AlienMission.cpp	/^void AlienMission::setId(int id)$/;"	f	class:OpenXcom::AlienMission
setId	Savegame/Target.cpp	/^void Target::setId(int id)$/;"	f	class:OpenXcom::Target
setIfHadPreviousFacility	Savegame/BaseFacility.cpp	/^void BaseFacility::setIfHadPreviousFacility(bool hadPreviousFacility)$/;"	f	class:OpenXcom::BaseFacility
setIgnoreSeparators	Interface/TextList.cpp	/^void TextList::setIgnoreSeparators(bool ignoreSeparators)$/;"	f	class:OpenXcom::TextList
setInBattlescape	Savegame/AlienBase.cpp	/^void AlienBase::setInBattlescape(bool inbattle)$/;"	f	class:OpenXcom::AlienBase
setInBattlescape	Savegame/Base.cpp	/^void Base::setInBattlescape(bool inbattle)$/;"	f	class:OpenXcom::Base
setInBattlescape	Savegame/Craft.cpp	/^void Craft::setInBattlescape(bool inbattle)$/;"	f	class:OpenXcom::Craft
setInBattlescape	Savegame/MissionSite.cpp	/^void MissionSite::setInBattlescape(bool inbattle)$/;"	f	class:OpenXcom::MissionSite
setInBattlescape	Savegame/Ufo.cpp	/^void Ufo::setInBattlescape(bool inbattle)$/;"	f	class:OpenXcom::Ufo
setInDogfight	Savegame/Craft.cpp	/^void Craft::setInDogfight(bool inDogfight)$/;"	f	class:OpenXcom::Craft
setInfiniteAmount	Savegame/Production.cpp	/^void Production::setInfiniteAmount (bool inf)$/;"	f	class:OpenXcom::Production
setInnerColor	Interface/Window.cpp	/^void Window::setInnerColor(Uint8 innerColor)$/;"	f	class:OpenXcom::Window
setInterceptionNumber	Geoscape/DogfightState.cpp	/^void DogfightState::setInterceptionNumber(const int number)$/;"	f	class:OpenXcom::DogfightState
setInterceptionOrder	Savegame/Craft.cpp	/^void Craft::setInterceptionOrder(const int order)$/;"	f	class:OpenXcom::Craft
setInterceptionProcessed	Savegame/Ufo.cpp	/^void Ufo::setInterceptionProcessed(bool processed)$/;"	f	class:OpenXcom::Ufo
setInterceptionsCount	Geoscape/DogfightState.cpp	/^void DogfightState::setInterceptionsCount(const size_t count)$/;"	f	class:OpenXcom::DogfightState
setInterface	Engine/State.cpp	/^void State::setInterface(const std::string& category, bool alterPal, SavedBattleGame *battleGame)$/;"	f	class:OpenXcom::State
setInterrupted	Savegame/AlienMission.h	/^	void setInterrupted(bool interrupted) { _interrupted = interrupted; }$/;"	f	class:OpenXcom::AlienMission
setInterval	Engine/Timer.cpp	/^void Timer::setInterval(Uint32 interval)$/;"	f	class:OpenXcom::Timer
setInventoryTile	Savegame/BattleUnit.cpp	/^void BattleUnit::setInventoryTile(Tile *tile)$/;"	f	class:OpenXcom::BattleUnit
setInvert	Interface/Text.cpp	/^void Text::setInvert(bool invert)$/;"	f	class:OpenXcom::Text
setInvert	Interface/TextEdit.cpp	/^void TextEdit::setInvert(bool invert)$/;"	f	class:OpenXcom::TextEdit
setInvertColor	Interface/ToggleTextButton.cpp	/^void ToggleTextButton::setInvertColor(Uint8 color)$/;"	f	class:OpenXcom::ToggleTextButton
setIronman	Savegame/SavedGame.cpp	/^void SavedGame::setIronman(bool ironman)$/;"	f	class:OpenXcom::SavedGame
setIsAmmo	Savegame/BattleItem.cpp	/^void BattleItem::setIsAmmo(bool ammo)$/;"	f	class:OpenXcom::BattleItem
setIsAutoPatrolling	Savegame/Craft.cpp	/^void Craft::setIsAutoPatrolling(bool isAuto)$/;"	f	class:OpenXcom::Craft
setItems	Savegame/Transfer.cpp	/^void Transfer::setItems(const std::string &id, int qty)$/;"	f	class:OpenXcom::Transfer
setKneelReserved	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::setKneelReserved(bool reserved)$/;"	f	class:OpenXcom::BattlescapeGame
setKneelReserved	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setKneelReserved(bool reserved)$/;"	f	class:OpenXcom::SavedBattleGame
setLabel	Engine/Script.cpp	/^bool ParserWriter::setLabel(const ScriptRefData& data, ProgPos offset)$/;"	f	class:OpenXcom::ParserWriter
setLandId	Savegame/Ufo.cpp	/^void Ufo::setLandId(int id)$/;"	f	class:OpenXcom::Ufo
setLastSelectedArmor	Savegame/SavedGame.cpp	/^void SavedGame::setLastSelectedArmor(const std::string &value)$/;"	f	class:OpenXcom::SavedGame
setLastUsedMapScript	Savegame/SavedBattleGame.h	/^	void setLastUsedMapScript(const std::string& lastUsedMapScript) { _lastUsedMapScript = lastUsedMapScript; }$/;"	f	class:OpenXcom::SavedBattleGame
setLatitude	Mod/Polygon.cpp	/^void Polygon::setLatitude(int i, double lat)$/;"	f	class:OpenXcom::Polygon
setLatitude	Mod/Polyline.cpp	/^void Polyline::setLatitude(int i, double lat)$/;"	f	class:OpenXcom::Polyline
setLatitude	Savegame/Target.cpp	/^void Target::setLatitude(double lat)$/;"	f	class:OpenXcom::Target
setLatitudeAuto	Savegame/Craft.cpp	/^void Craft::setLatitudeAuto(double lat)$/;"	f	class:OpenXcom::Craft
setLightSource	Mod/MapData.cpp	/^void MapData::setLightSource(int value)$/;"	f	class:OpenXcom::MapData
setListButton	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::setListButton()$/;"	f	class:OpenXcom::InteractiveSurface
setLoftID	Mod/MapData.cpp	/^void MapData::setLoftID(int loft, int layer)$/;"	f	class:OpenXcom::MapData
setLogFileName	Engine/CrossPlatform.cpp	/^void setLogFileName(const std::string& name) {$/;"	f	namespace:OpenXcom::CrossPlatform
setLongitude	Mod/Polygon.cpp	/^void Polygon::setLongitude(int i, double lon)$/;"	f	class:OpenXcom::Polygon
setLongitude	Mod/Polyline.cpp	/^void Polyline::setLongitude(int i, double lon)$/;"	f	class:OpenXcom::Polyline
setLongitude	Savegame/Target.cpp	/^void Target::setLongitude(double lon)$/;"	f	class:OpenXcom::Target
setLongitudeAuto	Savegame/Craft.cpp	/^void Craft::setLongitudeAuto(double lon)$/;"	f	class:OpenXcom::Craft
setLook	Savegame/Soldier.cpp	/^void Soldier::setLook(SoldierLook look)$/;"	f	class:OpenXcom::Soldier
setLookVariant	Savegame/Soldier.cpp	/^void Soldier::setLookVariant(int lookVariant)$/;"	f	class:OpenXcom::Soldier
setLowFuel	Savegame/Craft.cpp	/^void Craft::setLowFuel(bool low)$/;"	f	class:OpenXcom::Craft
setMMBFlag	Engine/Game.h	/^	void setMMBFlag(bool newValue) { _mmb = newValue; }$/;"	f	class:OpenXcom::Game
setManaMissing	Savegame/Soldier.cpp	/^void Soldier::setManaMissing(int manaMissing)$/;"	f	class:OpenXcom::Soldier
setManufactureRuleStatus	Savegame/SavedGame.cpp	/^void SavedGame::setManufactureRuleStatus(const std::string &manufactureRule, int newStatus)$/;"	f	class:OpenXcom::SavedGame
setMapData	Savegame/Tile.cpp	/^void Tile::setMapData(MapData *dat, int mapDataID, int mapDataSetID, TilePart part)$/;"	f	class:OpenXcom::Tile
setMapOffset	Battlescape/Camera.cpp	/^void Camera::setMapOffset(const Position& pos)$/;"	f	class:OpenXcom::Camera
setMargin	Interface/TextList.cpp	/^void TextList::setMargin(int margin)$/;"	f	class:OpenXcom::TextList
setMarkerColor	Savegame/Tile.cpp	/^void Tile::setMarkerColor(int color)$/;"	f	class:OpenXcom::Tile
setMax	Interface/Bar.cpp	/^void Bar::setMax(double max)$/;"	f	class:OpenXcom::Bar
setMaxAmbienceRandomDelay	Savegame/SavedBattleGame.h	/^	void setMaxAmbienceRandomDelay(int maxAmbienceRandomDelay) { _maxAmbienceRandomDelay = maxAmbienceRandomDelay; }$/;"	f	class:OpenXcom::SavedBattleGame
setMaxAndCurrStatScript	Mod/Unit.h	/^	static void setMaxAndCurrStatScript(T *t, int val)$/;"	f	struct:OpenXcom::UnitStats
setMaxSharedFrames	Engine/SurfaceSet.cpp	/^void SurfaceSet::setMaxSharedFrames(int i)$/;"	f	class:OpenXcom::SurfaceSet
setMaxSharedSounds	Engine/SoundSet.cpp	/^void SoundSet::setMaxSharedSounds(int i)$/;"	f	class:OpenXcom::SoundSet
setMaxStatScript	Mod/Unit.h	/^	static void setMaxStatScript(T *t, int val)$/;"	f	struct:OpenXcom::UnitStats
setMelee	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::setMelee()$/;"	f	class:OpenXcom::RuleStatBonus
setMeleeAttackedBy	Savegame/BattleUnit.cpp	/^void BattleUnit::setMeleeAttackedBy(int attackerId)$/;"	f	class:OpenXcom::BattleUnit
setMinAmbienceRandomDelay	Savegame/SavedBattleGame.h	/^	void setMinAmbienceRandomDelay(int minAmbienceRandomDelay) { _minAmbienceRandomDelay = minAmbienceRandomDelay; }$/;"	f	class:OpenXcom::SavedBattleGame
setMindControllerId	Savegame/BattleUnit.cpp	/^void BattleUnit::setMindControllerId(int id)$/;"	f	class:OpenXcom::BattleUnit
setMiniMapIndex	Mod/MapData.cpp	/^void MapData::setMiniMapIndex(unsigned short i)$/;"	f	class:OpenXcom::MapData
setMinimized	Geoscape/DogfightState.cpp	/^void DogfightState::setMinimized(const bool minimized)$/;"	f	class:OpenXcom::DogfightState
setMinutesSinceLastHuntMissionGeneration	Savegame/AlienBase.cpp	/^void AlienBase::setMinutesSinceLastHuntMissionGeneration(int newValue)$/;"	f	class:OpenXcom::AlienBase
setMissed	Savegame/CraftWeaponProjectile.cpp	/^void CraftWeaponProjectile::setMissed(const bool &missed)$/;"	f	class:OpenXcom::CraftWeaponProjectile
setMissionComplete	Savegame/Craft.cpp	/^void Craft::setMissionComplete(bool mission)$/;"	f	class:OpenXcom::Craft
setMissionCraftOrBase	Savegame/SavedBattleGame.h	/^	void setMissionCraftOrBase(const std::string& missionCraftOrBase) { _strCraftOrBase = missionCraftOrBase; }$/;"	f	class:OpenXcom::SavedBattleGame
setMissionInfo	Savegame/Ufo.cpp	/^void Ufo::setMissionInfo(AlienMission *mission, const UfoTrajectory *trajectory)$/;"	f	class:OpenXcom::Ufo
setMissionSite	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setMissionSite(MissionSite *mission)$/;"	f	class:OpenXcom::BattlescapeGenerator
setMissionSiteZone	Savegame/AlienMission.cpp	/^void AlienMission::setMissionSiteZone(int zone)$/;"	f	class:OpenXcom::AlienMission
setMissionTarget	Savegame/SavedBattleGame.h	/^	void setMissionTarget(const std::string& missionTarget) { _strTarget = missionTarget; }$/;"	f	class:OpenXcom::SavedBattleGame
setMissionType	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setMissionType(const std::string &missionType)$/;"	f	class:OpenXcom::SavedBattleGame
setMissionWaveNumber	Savegame/Ufo.h	/^	void setMissionWaveNumber(int missionWaveNumber) { _missionWaveNumber = missionWaveNumber; }$/;"	f	class:OpenXcom::Ufo
setMod	Mod/Mod.cpp	/^	void setMod(int i)$/;"	f	class:OpenXcom::ModScriptGlobal
setModPalette	Engine/State.cpp	/^void State::setModPalette()$/;"	f	class:OpenXcom::State
setModal	Engine/State.cpp	/^void State::setModal(InteractiveSurface *surface)$/;"	f	class:OpenXcom::State
setModded	Mod/RuleStatBonus.h	/^	void setModded(bool modded) { _modded = modded; }$/;"	f	class:OpenXcom::RuleStatBonus
setMouseAction	Engine/Action.cpp	/^void Action::setMouseAction(int mouseX, int mouseY, int surfaceX, int surfaceY)$/;"	f	class:OpenXcom::Action
setMouseActive	Engine/Game.cpp	/^void Game::setMouseActive(bool active)$/;"	f	class:OpenXcom::Game
setMouseOverItem	Battlescape/Inventory.cpp	/^void Inventory::setMouseOverItem(BattleItem *item)$/;"	f	class:OpenXcom::Inventory
setMove	Engine/ShaderMove.h	/^	inline void setMove(int x, int y)$/;"	f	class:OpenXcom::ShaderMove
setMovementType	Savegame/BattleUnit.h	/^	void setMovementType(MovementType type) { _movementType = type; }$/;"	f	class:OpenXcom::BattleUnit
setMovmentTypeScript	Savegame/BattleUnit.cpp	/^void setMovmentTypeScript(BattleUnit *bu, int type)$/;"	f	namespace:OpenXcom::__anon36
setMultiUfoRetaliationInProgress	Savegame/AlienMission.h	/^	void setMultiUfoRetaliationInProgress(bool multiUfoRetaliationInProgress) { _multiUfoRetaliationInProgress = multiUfoRetaliationInProgress; }$/;"	f	class:OpenXcom::AlienMission
setMurdererId	Savegame/BattleUnit.cpp	/^void BattleUnit::setMurdererId(int id)$/;"	f	class:OpenXcom::BattleUnit
setMurdererWeapon	Savegame/BattleUnit.cpp	/^void BattleUnit::setMurdererWeapon(const std::string& weapon)$/;"	f	class:OpenXcom::BattleUnit
setMurdererWeaponAmmo	Savegame/BattleUnit.cpp	/^void BattleUnit::setMurdererWeaponAmmo(const std::string& weaponAmmo)$/;"	f	class:OpenXcom::BattleUnit
setMusic	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setMusic(const AlienDeployment* ruleDeploy, bool nextStage)$/;"	f	class:OpenXcom::BattlescapeGenerator
setMusic	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setMusic(const std::string &track)$/;"	f	class:OpenXcom::SavedBattleGame
setName	Savegame/BattleUnit.cpp	/^void BattleUnit::setName(const std::string &name)$/;"	f	class:OpenXcom::BattleUnit
setName	Savegame/SavedGame.cpp	/^void SavedGame::setName(const std::string &name)$/;"	f	class:OpenXcom::SavedGame
setName	Savegame/Soldier.cpp	/^void Soldier::setName(const std::string &name)$/;"	f	class:OpenXcom::Soldier
setName	Savegame/Target.cpp	/^void Target::setName(const std::string &newName)$/;"	f	class:OpenXcom::Target
setNameDisplay	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setNameDisplay(bool displayName)$/;"	f	class:OpenXcom::SavedBattleGame
setNationality	Savegame/Soldier.cpp	/^void Soldier::setNationality(int nationality)$/;"	f	class:OpenXcom::Soldier
setNewBaseHover	Geoscape/Globe.cpp	/^void Globe::setNewBaseHover(bool hover)$/;"	f	class:OpenXcom::Globe
setNewBaseHoverPos	Geoscape/Globe.cpp	/^void Globe::setNewBaseHoverPos(double lon, double lat)$/;"	f	class:OpenXcom::Globe
setNewPact	Savegame/Country.cpp	/^void Country::setNewPact()$/;"	f	class:OpenXcom::Country
setNoFloor	Mod/MapData.cpp	/^void MapData::setNoFloor(bool isNoFloor)$/;"	f	class:OpenXcom::MapData
setNoScrollArea	Interface/TextList.cpp	/^void TextList::setNoScrollArea(int left, int right)$/;"	f	class:OpenXcom::TextList
setNormalWalkSpeed	Battlescape/UnitWalkBState.cpp	/^void UnitWalkBState::setNormalWalkSpeed()$/;"	f	class:OpenXcom::UnitWalkBState
setObjectType	Mod/MapData.cpp	/^void MapData::setObjectType(TilePart type)$/;"	f	class:OpenXcom::MapData
setObjectiveCount	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setObjectiveCount(int counter)$/;"	f	class:OpenXcom::SavedBattleGame
setObjectiveType	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setObjectiveType(int type)$/;"	f	class:OpenXcom::SavedBattleGame
setObstacle	Savegame/Tile.cpp	/^void Tile::setObstacle(int part)$/;"	f	class:OpenXcom::Tile
setOffset	Engine/ShaderRepeat.h	/^	inline void setOffset(int x, int y)$/;"	f	class:OpenXcom::ShaderRepeat
setOptions	Interface/ComboBox.cpp	/^void ComboBox::setOptions(const std::vector<std::string> &options, bool translate)$/;"	f	class:OpenXcom::ComboBox
setOriginVoxel	Battlescape/ProjectileFlyBState.cpp	/^void ProjectileFlyBState::setOriginVoxel(const Position& pos)$/;"	f	class:OpenXcom::ProjectileFlyBState
setOwner	Savegame/BattleItem.cpp	/^void BattleItem::setOwner(BattleUnit *owner)$/;"	f	class:OpenXcom::BattleItem
setPact	Savegame/Country.cpp	/^void Country::setPact()$/;"	f	class:OpenXcom::Country
setPactCountry	Savegame/AlienBase.cpp	/^void AlienBase::setPactCountry(const std::string &pactCountry)$/;"	f	class:OpenXcom::AlienBase
setPainKillerQuantity	Savegame/BattleItem.cpp	/^void BattleItem::setPainKillerQuantity (int pk)$/;"	f	class:OpenXcom::BattleItem
setPainKillerQuantityScript	Savegame/BattleItem.cpp	/^void setPainKillerQuantityScript(BattleItem* bt, int i)$/;"	f	namespace:OpenXcom::__anon39
setPalette	Battlescape/ActionMenuItem.cpp	/^void ActionMenuItem::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::ActionMenuItem
setPalette	Battlescape/AlienInventory.cpp	/^void AlienInventory::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::AlienInventory
setPalette	Battlescape/BattlescapeMessage.cpp	/^void BattlescapeMessage::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::BattlescapeMessage
setPalette	Battlescape/Inventory.cpp	/^void Inventory::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::Inventory
setPalette	Battlescape/Map.cpp	/^void Map::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::Map
setPalette	Battlescape/WarningMessage.cpp	/^void WarningMessage::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::WarningMessage
setPalette	Engine/Screen.cpp	/^void Screen::setPalette(const SDL_Color* colors, int firstcolor, int ncolors, bool immediately)$/;"	f	class:OpenXcom::Screen
setPalette	Engine/Surface.cpp	/^void Surface::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::Surface
setPalette	Engine/SurfaceSet.cpp	/^void SurfaceSet::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::SurfaceSet
setPalette	Geoscape/Globe.cpp	/^void Globe::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::Globe
setPalette	Interface/ComboBox.cpp	/^void ComboBox::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::ComboBox
setPalette	Interface/FpsCounter.cpp	/^void FpsCounter::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::FpsCounter
setPalette	Interface/NumberText.cpp	/^void NumberText::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::NumberText
setPalette	Interface/ScrollBar.cpp	/^void ScrollBar::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::ScrollBar
setPalette	Interface/Slider.cpp	/^void Slider::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::Slider
setPalette	Interface/TextButton.cpp	/^void TextButton::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::TextButton
setPalette	Interface/TextEdit.cpp	/^void TextEdit::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::TextEdit
setPalette	Interface/TextList.cpp	/^void TextList::setPalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::TextList
setPaletteByDepth	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setPaletteByDepth(State *state)$/;"	f	class:OpenXcom::SavedBattleGame
setPersonalEquipmentArmor	Savegame/Soldier.h	/^	void setPersonalEquipmentArmor(const Armor* armor) { _personalEquipmentArmor = armor; }$/;"	f	class:OpenXcom::Soldier
setPixel	Engine/Surface.h	/^	void setPixel(int x, int y, Uint8 pixel)$/;"	f	class:OpenXcom::Surface
setPixelIterative	Engine/Surface.h	/^	void setPixelIterative(int *x, int *y, Uint8 pixel)$/;"	f	class:OpenXcom::Surface
setPosition	Interface/Slider.cpp	/^void Slider::setPosition(double pos)$/;"	f	class:OpenXcom::Slider
setPosition	Savegame/BattleUnit.cpp	/^void BattleUnit::setPosition(Position pos, bool updateLastPos)$/;"	f	class:OpenXcom::BattleUnit
setPosition	Savegame/CraftWeaponProjectile.cpp	/^void CraftWeaponProjectile::setPosition(const int &position)$/;"	f	class:OpenXcom::CraftWeaponProjectile
setPressed	Interface/ToggleTextButton.cpp	/^void ToggleTextButton::setPressed(bool pressed)$/;"	f	class:OpenXcom::ToggleTextButton
setPreview	Savegame/Tile.cpp	/^void Tile::setPreview(int dir)$/;"	f	class:OpenXcom::Tile
setPreviewBase	Savegame/SavedGame.h	/^	void setPreviewBase(Base* previewBase) { _previewBase = previewBase; }$/;"	f	class:OpenXcom::SavedGame
setPreviousOwner	Savegame/BattleItem.cpp	/^void BattleItem::setPreviousOwner(BattleUnit *owner)$/;"	f	class:OpenXcom::BattleItem
setProjectile	Battlescape/Map.cpp	/^void Map::setProjectile(Projectile *projectile)$/;"	f	class:OpenXcom::Map
setPsiAttack	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::setPsiAttack()$/;"	f	class:OpenXcom::RuleStatBonus
setPsiDefense	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::setPsiDefense()$/;"	f	class:OpenXcom::RuleStatBonus
setPsiTraining	Savegame/Soldier.cpp	/^void Soldier::setPsiTraining(bool psi)$/;"	f	class:OpenXcom::Soldier
setRMBFlag	Engine/Game.h	/^	void setRMBFlag(bool newValue) { _rmb = newValue; }$/;"	f	class:OpenXcom::Game
setRace	Savegame/AlienMission.h	/^	void setRace(const std::string &race) { _race = race; }$/;"	f	class:OpenXcom::AlienMission
setRandomHiddenMovementBackground	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setRandomHiddenMovementBackground(const Mod *mod)$/;"	f	class:OpenXcom::SavedBattleGame
setRange	Interface/Slider.cpp	/^void Slider::setRange(int min, int max)$/;"	f	class:OpenXcom::Slider
setRange	Savegame/CraftWeaponProjectile.cpp	/^void CraftWeaponProjectile::setRange(const int &range)$/;"	f	class:OpenXcom::CraftWeaponProjectile
setRankInt	Savegame/BattleUnit.cpp	/^void BattleUnit::setRankInt(int rank)$/;"	f	class:OpenXcom::BattleUnit
setRearming	Savegame/CraftWeapon.cpp	/^void CraftWeapon::setRearming(bool rearming)$/;"	f	class:OpenXcom::CraftWeapon
setRecolor	Savegame/BattleUnit.cpp	/^void BattleUnit::setRecolor(int basicLook, int utileLook, int rankLook)$/;"	f	class:OpenXcom::BattleUnit
setRegion	Savegame/AlienMission.cpp	/^void AlienMission::setRegion(const std::string &region, const Mod &mod)$/;"	f	class:OpenXcom::AlienMission
setReinforcementsDeployment	Savegame/SavedBattleGame.h	/^	void setReinforcementsDeployment(const std::string &reinforcementsDeployment) { _reinforcementsDeployment = reinforcementsDeployment; }$/;"	f	class:OpenXcom::SavedBattleGame
setReinforcementsItemLevel	Savegame/SavedBattleGame.h	/^	void setReinforcementsItemLevel(int reinforcementsItemLevel) { _reinforcementsItemLevel = reinforcementsItemLevel; }$/;"	f	class:OpenXcom::SavedBattleGame
setReinforcementsRace	Savegame/SavedBattleGame.h	/^	void setReinforcementsRace(const std::string &reinforcementsRace) { _reinforcementsRace = reinforcementsRace; }$/;"	f	class:OpenXcom::SavedBattleGame
setReplacedArmor	Savegame/Soldier.cpp	/^void Soldier::setReplacedArmor(Armor *armor)$/;"	f	class:OpenXcom::Soldier
setResearchRuleStatus	Savegame/SavedGame.cpp	/^void SavedGame::setResearchRuleStatus(const std::string &researchRule, int newStatus)$/;"	f	class:OpenXcom::SavedGame
setRespawn	Savegame/BattleUnit.cpp	/^void BattleUnit::setRespawn(bool respawn)$/;"	f	class:OpenXcom::BattleUnit
setRetaliationMission	Savegame/Base.h	/^	void setRetaliationMission(AlienMission* retaliationMission) { _retaliationMission = retaliationMission; }$/;"	f	class:OpenXcom::Base
setRetaliationTarget	Savegame/Base.cpp	/^void Base::setRetaliationTarget(bool mark)$/;"	f	class:OpenXcom::Base
setReturnToTrainingWhenHealed	Savegame/Soldier.cpp	/^void Soldier::setReturnToTrainingWhenHealed(bool returnToTrainingWhenHealed)$/;"	f	class:OpenXcom::Soldier
setRowColor	Interface/TextList.cpp	/^void TextList::setRowColor(size_t row, Uint8 color)$/;"	f	class:OpenXcom::TextList
setSavedGame	Engine/Game.cpp	/^void Game::setSavedGame(SavedGame *save)$/;"	f	class:OpenXcom::Game
setScale	Interface/Bar.cpp	/^void Bar::setScale(double scale)$/;"	f	class:OpenXcom::Bar
setScannedTurn	Savegame/BattleUnit.h	/^	void setScannedTurn(int turn) { _scannedTurn = turn; }$/;"	f	class:OpenXcom::BattleUnit
setScientists	Savegame/Base.cpp	/^void Base::setScientists(int scientists)$/;"	f	class:OpenXcom::Base
setScientists	Savegame/Transfer.cpp	/^void Transfer::setScientists(int scientists)$/;"	f	class:OpenXcom::Transfer
setScrollTimer	Battlescape/Camera.cpp	/^void Camera::setScrollTimer(Timer *mouse, Timer *key)$/;"	f	class:OpenXcom::Camera
setScrollable	Interface/Text.cpp	/^void Text::setScrollable(bool scroll)$/;"	f	class:OpenXcom::Text
setScrolling	Interface/TextList.cpp	/^void TextList::setScrolling(bool scrolling, int scrollPos)$/;"	f	class:OpenXcom::TextList
setSearchString	Battlescape/Inventory.cpp	/^void Inventory::setSearchString(const std::string &searchString)$/;"	f	class:OpenXcom::Inventory
setSecondValueOnTop	Interface/Bar.cpp	/^void Bar::setSecondValueOnTop(bool onTop)$/;"	f	class:OpenXcom::Bar
setSecondaryColor	Basescape/BaseView.cpp	/^void BaseView::setSecondaryColor(Uint8 color)$/;"	f	class:OpenXcom::BaseView
setSecondaryColor	Basescape/MiniBaseView.cpp	/^void MiniBaseView::setSecondaryColor(Uint8 color)$/;"	f	class:OpenXcom::MiniBaseView
setSecondaryColor	Engine/Surface.h	/^	virtual void setSecondaryColor(Uint8 \/*color*\/) { \/* empty by design *\/ };$/;"	f	class:OpenXcom::Surface
setSecondaryColor	Interface/Bar.cpp	/^void Bar::setSecondaryColor(Uint8 color)$/;"	f	class:OpenXcom::Bar
setSecondaryColor	Interface/Frame.cpp	/^void Frame::setSecondaryColor(Uint8 bg)$/;"	f	class:OpenXcom::Frame
setSecondaryColor	Interface/Text.cpp	/^void Text::setSecondaryColor(Uint8 color)$/;"	f	class:OpenXcom::Text
setSecondaryColor	Interface/TextEdit.cpp	/^void TextEdit::setSecondaryColor(Uint8 color)$/;"	f	class:OpenXcom::TextEdit
setSecondaryColor	Interface/TextList.cpp	/^void TextList::setSecondaryColor(Uint8 color)$/;"	f	class:OpenXcom::TextList
setSecondsRemaining	Savegame/MissionSite.cpp	/^void MissionSite::setSecondsRemaining(size_t seconds)$/;"	f	class:OpenXcom::MissionSite
setSecondsRemaining	Savegame/Ufo.cpp	/^void Ufo::setSecondsRemaining(size_t seconds)$/;"	f	class:OpenXcom::Ufo
setSeed	Engine/RNG.cpp	/^void setSeed(uint64_t n)$/;"	f	namespace:OpenXcom::RNG
setSelectable	Basescape/BaseView.cpp	/^void BaseView::setSelectable(int size)$/;"	f	class:OpenXcom::BaseView
setSelectable	Interface/TextList.cpp	/^void TextList::setSelectable(bool selectable)$/;"	f	class:OpenXcom::TextList
setSelected	Interface/ComboBox.cpp	/^void ComboBox::setSelected(size_t sel)$/;"	f	class:OpenXcom::ComboBox
setSelectedBase	Basescape/MiniBaseView.cpp	/^void MiniBaseView::setSelectedBase(size_t base)$/;"	f	class:OpenXcom::MiniBaseView
setSelectedBase	Savegame/SavedGame.cpp	/^void SavedGame::setSelectedBase(size_t base)$/;"	f	class:OpenXcom::SavedGame
setSelectedItem	Battlescape/Inventory.cpp	/^void Inventory::setSelectedItem(BattleItem *item)$/;"	f	class:OpenXcom::Inventory
setSelectedTopic	Basescape/TechTreeViewerState.cpp	/^void TechTreeViewerState::setSelectedTopic(const std::string &selectedTopic, TTVMode topicType)$/;"	f	class:OpenXcom::TechTreeViewerState
setSelectedUnit	Battlescape/AlienInventory.cpp	/^void AlienInventory::setSelectedUnit(BattleUnit *unit)$/;"	f	class:OpenXcom::AlienInventory
setSelectedUnit	Battlescape/Inventory.cpp	/^void Inventory::setSelectedUnit(BattleUnit *unit, bool resetGroundOffset)$/;"	f	class:OpenXcom::Inventory
setSelectedUnit	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setSelectedUnit(BattleUnit *unit)$/;"	f	class:OpenXcom::SavedBattleGame
setSelectorPosition	Battlescape/Map.cpp	/^void Map::setSelectorPosition(int mx, int my)$/;"	f	class:OpenXcom::Map
setSellItems	Savegame/Production.cpp	/^void Production::setSellItems (bool sell)$/;"	f	class:OpenXcom::Production
setSender	Engine/Action.cpp	/^void Action::setSender(InteractiveSurface *sender)$/;"	f	class:OpenXcom::Action
setShape	Interface/ArrowButton.cpp	/^void ArrowButton::setShape(ArrowShape shape)$/;"	f	class:OpenXcom::ArrowButton
setShield	Savegame/Craft.cpp	/^void Craft::setShield(int shield)$/;"	f	class:OpenXcom::Craft
setShield	Savegame/Ufo.cpp	/^void Ufo::setShield(int shield)$/;"	f	class:OpenXcom::Ufo
setShieldDamageModifier	Savegame/CraftWeaponProjectile.cpp	/^void CraftWeaponProjectile::setShieldDamageModifier(const int &shieldDamageModifier)$/;"	f	class:OpenXcom::CraftWeaponProjectile
setShieldRechargeHandle	Savegame/Ufo.cpp	/^void Ufo::setShieldRechargeHandle(int shieldRechargeHandle)$/;"	f	class:OpenXcom::Ufo
setShiftPressedFlag	Engine/Game.h	/^	void setShiftPressedFlag(bool newValue) { _shift = newValue; }$/;"	f	class:OpenXcom::Game
setShootingAt	Savegame/Ufo.cpp	/^void Ufo::setShootingAt(int target)$/;"	f	class:OpenXcom::Ufo
setShotDownByCraftId	Savegame/Ufo.cpp	/^void Ufo::setShotDownByCraftId(const CraftId& craft)$/;"	f	class:OpenXcom::Ufo
setSiteType	Mod/RuleMissionScript.cpp	/^void RuleMissionScript::setSiteType(const bool siteType)$/;"	f	class:OpenXcom::RuleMissionScript
setSizeZ	Mod/MapBlock.cpp	/^void MapBlock::setSizeZ(int size_z)$/;"	f	class:OpenXcom::MapBlock
setSkill	Battlescape/ActionMenuItem.cpp	/^void ActionMenuItem::setSkill(const RuleSkill *skill)$/;"	f	class:OpenXcom::ActionMenuItem
setSkinIndex	Savegame/Craft.h	/^	void setSkinIndex(int skinIndex) { _skinIndex = skinIndex; }$/;"	f	class:OpenXcom::Craft
setSlot	Savegame/BattleItem.cpp	/^void BattleItem::setSlot(const RuleInventory *slot)$/;"	f	class:OpenXcom::BattleItem
setSlotX	Savegame/BattleItem.cpp	/^void BattleItem::setSlotX(int x)$/;"	f	class:OpenXcom::BattleItem
setSlotY	Savegame/BattleItem.cpp	/^void BattleItem::setSlotY(int y)$/;"	f	class:OpenXcom::BattleItem
setSmall	Interface/Text.cpp	/^void Text::setSmall()$/;"	f	class:OpenXcom::Text
setSmall	Interface/TextButton.cpp	/^void TextButton::setSmall()$/;"	f	class:OpenXcom::TextButton
setSmall	Interface/TextEdit.cpp	/^void TextEdit::setSmall()$/;"	f	class:OpenXcom::TextEdit
setSmall	Interface/TextList.cpp	/^void TextList::setSmall()$/;"	f	class:OpenXcom::TextList
setSmoke	Savegame/Tile.cpp	/^void Tile::setSmoke(int smoke)$/;"	f	class:OpenXcom::Tile
setSoldier	Savegame/Transfer.cpp	/^void Transfer::setSoldier(Soldier *soldier)$/;"	f	class:OpenXcom::Transfer
setSoldierId	Basescape/SoldierDiaryOverviewState.cpp	/^void SoldierDiaryOverviewState::setSoldierId(size_t soldier)$/;"	f	class:OpenXcom::SoldierDiaryOverviewState
setSoldierId	Basescape/SoldierInfoState.cpp	/^void SoldierInfoState::setSoldierId(size_t soldier)$/;"	f	class:OpenXcom::SoldierInfoState
setSpawnCountdown	Savegame/GeoscapeEvent.cpp	/^void GeoscapeEvent::setSpawnCountdown(size_t minutes)$/;"	f	class:OpenXcom::GeoscapeEvent
setSpawnUnit	Savegame/BattleUnit.cpp	/^void BattleUnit::setSpawnUnit(const Unit *spawnUnit)$/;"	f	class:OpenXcom::BattleUnit
setSpawnUnitFaction	Savegame/BattleUnit.h	/^	void setSpawnUnitFaction(UnitFaction f) { _spawnUnitFaction = f; }$/;"	f	class:OpenXcom::BattleUnit
setSpawnUnitFactionScript	Savegame/BattleUnit.cpp	/^void setSpawnUnitFactionScript(BattleUnit *bu, int faction)$/;"	f	namespace:OpenXcom::__anon36
setSpawnUnitInstantRespawnScript	Savegame/BattleUnit.cpp	/^void setSpawnUnitInstantRespawnScript(BattleUnit *bu, int respawn)$/;"	f	namespace:OpenXcom::__anon36
setSpawnUnitScript	Savegame/BattleUnit.cpp	/^void setSpawnUnitScript(BattleUnit *bu, const Unit* unitType)$/;"	f	namespace:OpenXcom::__anon36
setSpecialType	Mod/MapData.cpp	/^void MapData::setSpecialType(int value, TilePart otype)$/;"	f	class:OpenXcom::MapData
setSpecialWeapon	Savegame/BattleUnit.cpp	/^void BattleUnit::setSpecialWeapon(SavedBattleGame *save, bool updateFromSave)$/;"	f	class:OpenXcom::BattleUnit
setSpeed	Savegame/CraftWeaponProjectile.cpp	/^void CraftWeaponProjectile::setSpeed(int speed)$/;"	f	class:OpenXcom::CraftWeaponProjectile
setSpeed	Savegame/MovingTarget.cpp	/^void MovingTarget::setSpeed(int speed)$/;"	f	class:OpenXcom::MovingTarget
setSpent	Savegame/ResearchProject.cpp	/^void ResearchProject::setSpent (int spent)$/;"	f	class:OpenXcom::ResearchProject
setSprite	Mod/MapData.cpp	/^void MapData::setSprite(int frameID, int value)$/;"	f	class:OpenXcom::MapData
setStandardPalette	Engine/State.cpp	/^void State::setStandardPalette(const std::string &palette, int backpals)$/;"	f	class:OpenXcom::State
setStartMonth	Savegame/AlienBase.h	/^	void setStartMonth(int startMonth) { _startMonth = startMonth; }$/;"	f	class:OpenXcom::AlienBase
setStartNode	Battlescape/AIModule.h	/^	void setStartNode(Node *node) { _fromNode = node; }$/;"	f	class:OpenXcom::AIModule
setStartingCondition	Savegame/SavedBattleGame.h	/^	void setStartingCondition(const RuleStartingCondition* sc) { _startingCondition = sc; }$/;"	f	class:OpenXcom::SavedBattleGame
setState	Engine/Game.cpp	/^void Game::setState(State *state)$/;"	f	class:OpenXcom::Game
setStateInterval	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::setStateInterval(Uint32 interval)$/;"	f	class:OpenXcom::BattlescapeGame
setStateInterval	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::setStateInterval(Uint32 interval)$/;"	f	class:OpenXcom::BattlescapeState
setStatePalette	Engine/State.cpp	/^void State::setStatePalette(const SDL_Color *colors, int firstcolor, int ncolors)$/;"	f	class:OpenXcom::State
setStatus	Geoscape/DogfightState.cpp	/^void DogfightState::setStatus(const std::string &status)$/;"	f	class:OpenXcom::DogfightState
setStatus	Savegame/Craft.cpp	/^void Craft::setStatus(const std::string &status)$/;"	f	class:OpenXcom::Craft
setStatus	Savegame/Ufo.h	/^	void setStatus(enum UfoStatus status) {_status = status; }$/;"	f	class:OpenXcom::Ufo
setStimulantQuantity	Savegame/BattleItem.cpp	/^void BattleItem::setStimulantQuantity (int stimulant)$/;"	f	class:OpenXcom::BattleItem
setStimulantQuantityScript	Savegame/BattleItem.cpp	/^void setStimulantQuantityScript(BattleItem* bt, int i)$/;"	f	namespace:OpenXcom::__anon39
setStopLOS	Mod/MapData.cpp	/^void MapData::setStopLOS(bool stopLOS)$/;"	f	class:OpenXcom::MapData
setStrength	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::setStrength()$/;"	f	class:OpenXcom::RuleStatBonus
setStunRecovery	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::setStunRecovery()$/;"	f	class:OpenXcom::RuleStatBonus
setStunScript	Savegame/BattleUnit.cpp	/^void setStunScript(BattleUnit *bu, int val)$/;"	f	namespace:OpenXcom::__anon36
setSummonedPlayerUnit	Savegame/BattleUnit.cpp	/^void BattleUnit::setSummonedPlayerUnit(bool summonedPlayerUnit)$/;"	f	class:OpenXcom::BattleUnit
setSurrendering	Savegame/BattleUnit.cpp	/^void BattleUnit::setSurrendering(bool isSurrendering)$/;"	f	class:OpenXcom::BattleUnit
setTFTDMode	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::setTFTDMode(bool mode)$/;"	f	class:OpenXcom::InteractiveSurface
setTUCosts	Mod/MapData.cpp	/^void MapData::setTUCosts(int walk, int fly, int slide)$/;"	f	class:OpenXcom::MapData
setTUFly	Mod/MapData.cpp	/^void MapData::setTUFly(const int TUFly)$/;"	f	class:OpenXcom::MapData
setTUMarker	Savegame/Tile.cpp	/^void Tile::setTUMarker(int tu)$/;"	f	class:OpenXcom::Tile
setTUReserved	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::setTUReserved(BattleActionType tur)$/;"	f	class:OpenXcom::BattlescapeGame
setTUReserved	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setTUReserved(BattleActionType reserved)$/;"	f	class:OpenXcom::SavedBattleGame
setTUSlide	Mod/MapData.cpp	/^void MapData::setTUSlide(const int TUSlide)$/;"	f	class:OpenXcom::MapData
setTUWalk	Mod/MapData.cpp	/^void MapData::setTUWalk(const int TUWalk)$/;"	f	class:OpenXcom::MapData
setTargetedXcomCraft	Savegame/Ufo.cpp	/^void Ufo::setTargetedXcomCraft(Craft *craft)$/;"	f	class:OpenXcom::Ufo
setTerrain	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setTerrain(RuleTerrain *terrain)$/;"	f	class:OpenXcom::BattlescapeGenerator
setTerrainLevel	Mod/MapData.cpp	/^void MapData::setTerrainLevel(int value)$/;"	f	class:OpenXcom::MapData
setText	Battlescape/BattlescapeMessage.cpp	/^void BattlescapeMessage::setText(const std::string &message)$/;"	f	class:OpenXcom::BattlescapeMessage
setText	Interface/ComboBox.cpp	/^void ComboBox::setText(const std::string &text)$/;"	f	class:OpenXcom::ComboBox
setText	Interface/Text.cpp	/^void Text::setText(const std::string &text)$/;"	f	class:OpenXcom::Text
setText	Interface/TextButton.cpp	/^void TextButton::setText(const std::string &text)$/;"	f	class:OpenXcom::TextButton
setText	Interface/TextEdit.cpp	/^void TextEdit::setText(const std::string &text)$/;"	f	class:OpenXcom::TextEdit
setTextColor	Battlescape/BattlescapeMessage.cpp	/^void BattlescapeMessage::setTextColor(Uint8 color)$/;"	f	class:OpenXcom::BattlescapeMessage
setTextColor	Battlescape/WarningMessage.cpp	/^void WarningMessage::setTextColor(Uint8 color)$/;"	f	class:OpenXcom::WarningMessage
setTextColor	Interface/TextButton.cpp	/^void TextButton::setTextColor(Uint8 color)$/;"	f	class:OpenXcom::TextButton
setTextList	Interface/ArrowButton.cpp	/^void ArrowButton::setTextList(TextList *list)$/;"	f	class:OpenXcom::ArrowButton
setTextList	Interface/ScrollBar.cpp	/^void ScrollBar::setTextList(TextList *list)$/;"	f	class:OpenXcom::ScrollBar
setTexture	Basescape/BaseView.cpp	/^void BaseView::setTexture(SurfaceSet *texture)$/;"	f	class:OpenXcom::BaseView
setTexture	Basescape/MiniBaseView.cpp	/^void MiniBaseView::setTexture(SurfaceSet *texture)$/;"	f	class:OpenXcom::MiniBaseView
setTexture	Mod/Polygon.cpp	/^void Polygon::setTexture(int tex)$/;"	f	class:OpenXcom::Polygon
setTexture	Savegame/MissionSite.cpp	/^void MissionSite::setTexture(int texture)$/;"	f	class:OpenXcom::MissionSite
setThickness	Interface/Frame.cpp	/^void Frame::setThickness(int thickness)$/;"	f	class:OpenXcom::Frame
setThinBorder	Interface/Window.cpp	/^void Window::setThinBorder()$/;"	f	class:OpenXcom::Window
setThrowing	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::setThrowing()$/;"	f	class:OpenXcom::RuleStatBonus
setTile	Savegame/BattleItem.cpp	/^void BattleItem::setTile(Tile *tile)$/;"	f	class:OpenXcom::BattleItem
setTile	Savegame/BattleUnit.cpp	/^void BattleUnit::setTile(Tile *tile, SavedBattleGame *saveBattleGame)$/;"	f	class:OpenXcom::BattleUnit
setTime	Savegame/SavedGame.cpp	/^void SavedGame::setTime(const GameTime& time)$/;"	f	class:OpenXcom::SavedGame
setTimeRecovery	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::setTimeRecovery()$/;"	f	class:OpenXcom::RuleStatBonus
setTimeSpent	Savegame/Production.cpp	/^void Production::setTimeSpent (int done)$/;"	f	class:OpenXcom::Production
setTimeUnits	Savegame/BattleUnit.cpp	/^void BattleUnit::setTimeUnits(int tu)$/;"	f	class:OpenXcom::BattleUnit
setToggleBrightness	Savegame/SavedBattleGame.h	/^	void setToggleBrightness(int toggleBrightness) { _toggleBrightness = toggleBrightness; }$/;"	f	class:OpenXcom::SavedBattleGame
setToggleBrightness	Savegame/SavedGame.h	/^	void setToggleBrightness(int toggleBrightness) { _toggleBrightness = toggleBrightness; }$/;"	f	class:OpenXcom::SavedGame
setToggleNightVision	Savegame/SavedBattleGame.h	/^	void setToggleNightVision(bool toggleNightVision) { _toggleNightVision = toggleNightVision; }$/;"	f	class:OpenXcom::SavedBattleGame
setToggleNightVision	Savegame/SavedGame.h	/^	void setToggleNightVision(bool toggleNightVision) { _toggleNightVision = toggleNightVision; }$/;"	f	class:OpenXcom::SavedGame
setTogglePersonalLight	Savegame/SavedBattleGame.h	/^	void setTogglePersonalLight(bool togglePersonalLight) { _togglePersonalLight = togglePersonalLight; }$/;"	f	class:OpenXcom::SavedBattleGame
setTogglePersonalLight	Savegame/SavedGame.h	/^	void setTogglePersonalLight(bool togglePersonalLight) { _togglePersonalLight = togglePersonalLight; }$/;"	f	class:OpenXcom::SavedGame
setTooltip	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::setTooltip(const std::string &tooltip)$/;"	f	class:OpenXcom::InteractiveSurface
setTopL	Engine/Scalers/xbrz.cpp	/^inline void setTopL   (unsigned char& b, BlendType bt) { b |= bt; } \/\/buffer is assumed to be initialized before preprocessing!$/;"	f	namespace:__anon10
setTopR	Engine/Scalers/xbrz.cpp	/^inline void setTopR   (unsigned char& b, BlendType bt) { b |= (bt << 2); }$/;"	f	namespace:__anon10
setTractorBeamSlowdown	Savegame/Ufo.cpp	/^void Ufo::setTractorBeamSlowdown(int tractorBeamSlowdown)$/;"	f	class:OpenXcom::Ufo
setTraining	Savegame/Soldier.cpp	/^void Soldier::setTraining(bool training)$/;"	f	class:OpenXcom::Soldier
setTrajectoryPoint	Savegame/Ufo.h	/^	void setTrajectoryPoint(size_t np) { _trajectoryPoint = np; }$/;"	f	class:OpenXcom::Ufo
setTransformedArmor	Savegame/Soldier.cpp	/^void Soldier::setTransformedArmor(Armor *armor)$/;"	f	class:OpenXcom::Soldier
setTuMode	Battlescape/Inventory.cpp	/^void Inventory::setTuMode(bool tu)$/;"	f	class:OpenXcom::Inventory
setTurn	Savegame/BattleUnitStatistics.h	/^	void setTurn(int unitTurn, UnitFaction unitFaction)$/;"	f	struct:OpenXcom::BattleUnitKills
setTurnFlag	Savegame/BattleItem.cpp	/^void BattleItem::setTurnFlag(bool flag)$/;"	f	class:OpenXcom::BattleItem
setTurnLimit	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setTurnLimit(int limit)$/;"	f	class:OpenXcom::SavedBattleGame
setTurnsLeftSpottedForSnipers	Savegame/BattleUnit.cpp	/^void BattleUnit::setTurnsLeftSpottedForSnipers (int turns)$/;"	f	class:OpenXcom::BattleUnit
setTurnsSinceSpotted	Savegame/BattleUnit.cpp	/^void BattleUnit::setTurnsSinceSpotted (int turns)$/;"	f	class:OpenXcom::BattleUnit
setTurretType	Savegame/BattleUnit.cpp	/^void BattleUnit::setTurretType(int turretType)$/;"	f	class:OpenXcom::BattleUnit
setType	Savegame/CraftWeaponProjectile.cpp	/^void CraftWeaponProjectile::setType(CraftWeaponProjectileType type)$/;"	f	class:OpenXcom::CraftWeaponProjectile
setType	Savegame/Node.cpp	/^void Node::setType(int type)$/;"	f	class:OpenXcom::Node
setUfo	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setUfo(Ufo *ufo)$/;"	f	class:OpenXcom::BattlescapeGenerator
setUfoDamagePercentage	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setUfoDamagePercentage(int ufoDamagePercentage)$/;"	f	class:OpenXcom::BattlescapeGenerator
setUfopediaRuleStatus	Savegame/SavedGame.cpp	/^void SavedGame::setUfopediaRuleStatus(const std::string &ufopediaRule, int newStatus)$/;"	f	class:OpenXcom::SavedGame
setUnit	Battlescape/Pathfinding.cpp	/^void Pathfinding::setUnit(BattleUnit* unit)$/;"	f	class:OpenXcom::Pathfinding
setUnit	Savegame/BattleItem.cpp	/^void BattleItem::setUnit(BattleUnit *unit)$/;"	f	class:OpenXcom::BattleItem
setUnit	Savegame/Tile.h	/^	void setUnit(BattleUnit *unit)$/;"	f	class:OpenXcom::Tile
setUnitDying	Battlescape/Map.cpp	/^void Map::setUnitDying(bool flag)$/;"	f	class:OpenXcom::Map
setUnitPosition	Savegame/SavedBattleGame.cpp	/^bool SavedBattleGame::setUnitPosition(BattleUnit *bu, Position position, bool testOnly)$/;"	f	class:OpenXcom::SavedBattleGame
setUnitStats	Savegame/BattleUnitStatistics.h	/^	void setUnitStats(BattleUnit *unit)$/;"	f	struct:OpenXcom::BattleUnitKills
setUnitsFalling	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setUnitsFalling(bool fall)$/;"	f	class:OpenXcom::SavedBattleGame
setUpdateFlag	Engine/Game.h	/^	void setUpdateFlag(bool update) { _update = update; }$/;"	f	class:OpenXcom::Game
setVIPEscapeType	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setVIPEscapeType(EscapeType vipEscapeType)$/;"	f	class:OpenXcom::SavedBattleGame
setVIPSurvivalPercentage	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::setVIPSurvivalPercentage(int vipSurvivalPercentage)$/;"	f	class:OpenXcom::SavedBattleGame
setVSync	Engine/OpenGL.cpp	/^void OpenGL::setVSync(bool sync)$/;"	f	class:OpenXcom::OpenGL
setValue	Engine/ScriptBind.h	/^		void setValue(ScriptValueData data, CompType value)$/;"	f	class:OpenXcom::ParserWriter::ReservedCrossRefrenece
setValue	Interface/Bar.cpp	/^void Bar::setValue(double value)$/;"	f	class:OpenXcom::Bar
setValue	Interface/NumberText.cpp	/^void NumberText::setValue(unsigned int value)$/;"	f	class:OpenXcom::NumberText
setValue	Interface/Slider.cpp	/^void Slider::setValue(int value)$/;"	f	class:OpenXcom::Slider
setValue2	Interface/Bar.cpp	/^void Bar::setValue2(double value)$/;"	f	class:OpenXcom::Bar
setValueMax	Savegame/BattleUnit.cpp	/^static inline void setValueMax(int& value, int diff, int min, int max)$/;"	f	namespace:OpenXcom
setValues	Mod/RuleStatBonus.cpp	/^void RuleStatBonus::setValues(std::vector<RuleStatBonusDataOrig>&& bonuses)$/;"	f	class:OpenXcom::RuleStatBonus
setVerticalAlign	Interface/Text.cpp	/^void Text::setVerticalAlign(TextVAlign valign)$/;"	f	class:OpenXcom::Text
setVerticalAlign	Interface/TextEdit.cpp	/^void TextEdit::setVerticalAlign(TextVAlign valign)$/;"	f	class:OpenXcom::TextEdit
setVerticalLevels	Mod/MapScript.cpp	/^void MapScript::setVerticalLevels(const std::vector<VerticalLevel> &verticalLevels, int size)$/;"	f	class:OpenXcom::MapScript
setViewLevel	Battlescape/Camera.cpp	/^void Camera::setViewLevel(int viewlevel)$/;"	f	class:OpenXcom::Camera
setVisible	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::setVisible(bool visible)$/;"	f	class:OpenXcom::InteractiveSurface
setVisible	Engine/Surface.cpp	/^void Surface::setVisible(bool visible)$/;"	f	class:OpenXcom::Surface
setVisible	Savegame/BattleUnit.cpp	/^void BattleUnit::setVisible(bool flag)$/;"	f	class:OpenXcom::BattleUnit
setVisible	Savegame/Tile.cpp	/^void Tile::setVisible(int visibility)$/;"	f	class:OpenXcom::Tile
setVolume	Engine/Game.cpp	/^void Game::setVolume(int sound, int music, int ui)$/;"	f	class:OpenXcom::Game
setWaitForAltitude	Geoscape/DogfightState.cpp	/^void DogfightState::setWaitForAltitude(bool wait)$/;"	f	class:OpenXcom::DogfightState
setWaitForPoly	Geoscape/DogfightState.cpp	/^void DogfightState::setWaitForPoly(bool wait)$/;"	f	class:OpenXcom::DogfightState
setWarned	Savegame/SavedGame.cpp	/^void SavedGame::setWarned(bool warned)$/;"	f	class:OpenXcom::SavedGame
setWasHitBy	Battlescape/AIModule.cpp	/^void AIModule::setWasHitBy(BattleUnit *attacker)$/;"	f	class:OpenXcom::AIModule
setWaveCountdown	Savegame/AlienMission.cpp	/^void AlienMission::setWaveCountdown(size_t minutes)$/;"	f	class:OpenXcom::AlienMission
setWeaponPickedUp	Battlescape/AIModule.cpp	/^void AIModule::setWeaponPickedUp()$/;"	f	class:OpenXcom::AIModule
setWidth	Battlescape/Map.cpp	/^void Map::setWidth(int width)$/;"	f	class:OpenXcom::Map
setWidth	Engine/Surface.cpp	/^void Surface::setWidth(int width)$/;"	f	class:OpenXcom::Surface
setWidth	Interface/TextButton.cpp	/^void TextButton::setWidth(int width)$/;"	f	class:OpenXcom::TextButton
setWindowBackground	Engine/State.cpp	/^void State::setWindowBackground(Window *window, const std::string &s)$/;"	f	class:OpenXcom::State
setWindowIcon	Engine/CrossPlatform.cpp	/^void setWindowIcon(int winResource, const std::string &)$/;"	f	namespace:OpenXcom::CrossPlatform
setWindowIcon	Engine/CrossPlatform.cpp	/^void setWindowIcon(int, const std::string &unixPath)$/;"	f	namespace:OpenXcom::CrossPlatform
setWordWrap	Interface/Text.cpp	/^void Text::setWordWrap(bool wrap, bool indent, bool ignoreSeparators)$/;"	f	class:OpenXcom::Text
setWordWrap	Interface/TextEdit.cpp	/^void TextEdit::setWordWrap(bool wrap)$/;"	f	class:OpenXcom::TextEdit
setWordWrap	Interface/TextList.cpp	/^void TextList::setWordWrap(bool wrap)$/;"	f	class:OpenXcom::TextList
setWorldShade	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setWorldShade(int shade)$/;"	f	class:OpenXcom::BattlescapeGenerator
setWorldTexture	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setWorldTexture(Texture *missionTexture, Texture *globeTexture)$/;"	f	class:OpenXcom::BattlescapeGenerator
setWoundRecovery	Savegame/Soldier.cpp	/^void Soldier::setWoundRecovery(int recovery)$/;"	f	class:OpenXcom::Soldier
setX	Battlescape/BattlescapeMessage.cpp	/^void BattlescapeMessage::setX(int x)$/;"	f	class:OpenXcom::BattlescapeMessage
setX	Engine/Surface.cpp	/^void Surface::setX(int x)$/;"	f	class:OpenXcom::Surface
setX	Engine/Surface.h	/^	void setX(int x)$/;"	f	class:OpenXcom::SurfaceCrop
setX	Interface/BattlescapeButton.cpp	/^void BattlescapeButton::setX(int x)$/;"	f	class:OpenXcom::BattlescapeButton
setX	Interface/ComboBox.cpp	/^void ComboBox::setX(int x)$/;"	f	class:OpenXcom::ComboBox
setX	Interface/ScrollBar.cpp	/^void ScrollBar::setX(int x)$/;"	f	class:OpenXcom::ScrollBar
setX	Interface/Slider.cpp	/^void Slider::setX(int x)$/;"	f	class:OpenXcom::Slider
setX	Interface/TextList.cpp	/^void TextList::setX(int x)$/;"	f	class:OpenXcom::TextList
setX	Mod/Polygon.cpp	/^void Polygon::setX(int i, Sint16 x)$/;"	f	class:OpenXcom::Polygon
setX	Savegame/BaseFacility.cpp	/^void BaseFacility::setX(int x)$/;"	f	class:OpenXcom::BaseFacility
setXCOMProperty	Savegame/BattleItem.cpp	/^void BattleItem::setXCOMProperty (bool flag)$/;"	f	class:OpenXcom::BattleItem
setY	Battlescape/BattlescapeMessage.cpp	/^void BattlescapeMessage::setY(int y)$/;"	f	class:OpenXcom::BattlescapeMessage
setY	Engine/Surface.cpp	/^void Surface::setY(int y)$/;"	f	class:OpenXcom::Surface
setY	Engine/Surface.h	/^	void setY(int y)$/;"	f	class:OpenXcom::SurfaceCrop
setY	Interface/BattlescapeButton.cpp	/^void BattlescapeButton::setY(int y)$/;"	f	class:OpenXcom::BattlescapeButton
setY	Interface/ComboBox.cpp	/^void ComboBox::setY(int y)$/;"	f	class:OpenXcom::ComboBox
setY	Interface/ScrollBar.cpp	/^void ScrollBar::setY(int y)$/;"	f	class:OpenXcom::ScrollBar
setY	Interface/Slider.cpp	/^void Slider::setY(int y)$/;"	f	class:OpenXcom::Slider
setY	Interface/TextList.cpp	/^void TextList::setY(int y)$/;"	f	class:OpenXcom::TextList
setY	Mod/Polygon.cpp	/^void Polygon::setY(int i, Sint16 y)$/;"	f	class:OpenXcom::Polygon
setY	Savegame/BaseFacility.cpp	/^void BaseFacility::setY(int y)$/;"	f	class:OpenXcom::BaseFacility
setYOffset	Mod/MapData.cpp	/^void MapData::setYOffset(int value)$/;"	f	class:OpenXcom::MapData
setZoom	Geoscape/Globe.cpp	/^void Globe::setZoom(size_t zoom)$/;"	f	class:OpenXcom::Globe
set_algorythm	Engine/Adlib/fmopl.cpp	/^static void set_algorythm( OPL_CH *CH)$/;"	f	file:
set_ar_dr	Engine/Adlib/fmopl.cpp	/^INLINE void set_ar_dr(FM_OPL *OPL,int slot,int v)$/;"	f
set_fragment_shader	Engine/OpenGL.cpp	/^void OpenGL::set_fragment_shader(const char *source)$/;"	f	class:OpenXcom::OpenGL
set_ksl_tl	Engine/Adlib/fmopl.cpp	/^INLINE void set_ksl_tl(FM_OPL *OPL,int slot,int v)$/;"	f
set_mul	Engine/Adlib/fmopl.cpp	/^INLINE void set_mul(FM_OPL *OPL,int slot,int v)$/;"	f
set_range	Engine/ShaderDrawHelper.h	/^	inline void set_range(const GraphSubset& r)$/;"	f	struct:OpenXcom::helper::controler_base
set_range	Engine/ShaderDrawHelper.h	/^	inline void set_range(const GraphSubset&)$/;"	f	struct:OpenXcom::helper::controler
set_range	Engine/ShaderRepeat.h	/^	inline void set_range(const GraphSubset& g)$/;"	f	struct:OpenXcom::helper::controler
set_shader	Engine/OpenGL.cpp	/^bool OpenGL::set_shader(const char *source_yaml_filename)$/;"	f	class:OpenXcom::OpenGL
set_sl_rr	Engine/Adlib/fmopl.cpp	/^INLINE void set_sl_rr(FM_OPL *OPL,int slot,int v)$/;"	f
set_vertex_shader	Engine/OpenGL.cpp	/^void OpenGL::set_vertex_shader(const char *source)$/;"	f	class:OpenXcom::OpenGL
set_x	Engine/ShaderDrawHelper.h	/^	inline void set_x(const int& begin, const int&)$/;"	f	struct:OpenXcom::helper::controler_base
set_x	Engine/ShaderDrawHelper.h	/^	inline void set_x(const int&, const int&)$/;"	f	struct:OpenXcom::helper::controler
set_x	Engine/ShaderRepeat.h	/^	inline void set_x(const int& begin, const int&)$/;"	f	struct:OpenXcom::helper::controler
set_y	Engine/ShaderDrawHelper.h	/^	inline void set_y(const int& begin, const int&)$/;"	f	struct:OpenXcom::helper::controler_base
set_y	Engine/ShaderDrawHelper.h	/^	inline void set_y(const int&, const int&)$/;"	f	struct:OpenXcom::helper::controler
set_y	Engine/ShaderRepeat.h	/^	inline void set_y(const int& begin, const int&)$/;"	f	struct:OpenXcom::helper::controler
setup	Engine/FileMap.cpp	/^void setup(const std::vector<const ModInfo* >& active, bool embeddedOnly)$/;"	f	namespace:OpenXcom::FileMap
setupAmbush	Battlescape/AIModule.cpp	/^void AIModule::setupAmbush()$/;"	f	class:OpenXcom::AIModule
setupAttack	Battlescape/AIModule.cpp	/^void AIModule::setupAttack()$/;"	f	class:OpenXcom::AIModule
setupCursor	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::setupCursor()$/;"	f	class:OpenXcom::BattlescapeGame
setupDefenses	Savegame/Base.cpp	/^void Base::setupDefenses(AlienMission* am)$/;"	f	class:OpenXcom::Base
setupEscape	Battlescape/AIModule.cpp	/^void AIModule::setupEscape()$/;"	f	class:OpenXcom::AIModule
setupEventVisibilitySector	Battlescape/TileEngine.cpp	/^bool TileEngine::setupEventVisibilitySector(const Position &observerPos, const Position &eventPos, const int &eventRadius)$/;"	f	class:OpenXcom::TileEngine
setupObjectives	Battlescape/BattlescapeGenerator.cpp	/^void BattlescapeGenerator::setupObjectives(const AlienDeployment *ruleDeploy)$/;"	f	class:OpenXcom::BattlescapeGenerator
setupPatrol	Battlescape/AIModule.cpp	/^void AIModule::setupPatrol()$/;"	f	class:OpenXcom::AIModule
setupRadii	Geoscape/Globe.cpp	/^void Globe::setupRadii(int width, int height)$/;"	f	class:OpenXcom::Globe
shadeCurve	Geoscape/Globe.cpp	/^	static inline Sint16 shadeCurve(int i)$/;"	f	struct:OpenXcom::__anon49::GlobeStaticData
shade_diff	Geoscape/Globe.cpp	/^	Sint16 shade_diff[shade_gradient_max];$/;"	m	struct:OpenXcom::__anon49::GlobeStaticData	file:
shade_gradient	Geoscape/Globe.cpp	/^	Sint16 shade_gradient[shade_gradient_max];$/;"	m	struct:OpenXcom::__anon49::GlobeStaticData	file:
shade_gradient_max	Geoscape/Globe.cpp	/^	static const int shade_gradient_max = 256;$/;"	m	struct:OpenXcom::__anon49::GlobeStaticData	file:
shade_seq	Geoscape/Globe.cpp	/^	Sint16 shade_seq[shade_gradient_max];$/;"	m	struct:OpenXcom::__anon49::GlobeStaticData	file:
shade_step	Geoscape/Globe.cpp	/^	Sint16 shade_step[shade_gradient_max];$/;"	m	struct:OpenXcom::__anon49::GlobeStaticData	file:
shade_step_max	Geoscape/Globe.cpp	/^	static const int shade_step_max = 1 << random_value_noise_bits;$/;"	m	struct:OpenXcom::__anon49::GlobeStaticData	file:
shader_support	Engine/OpenGL.h	/^  bool shader_support;$/;"	m	class:OpenXcom::OpenGL
sharedLock	Engine/FlcPlayer.h	/^		SDL_sem *sharedLock;$/;"	m	struct:OpenXcom::FlcPlayer::AudioData
shieldBleedThrough	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
shieldCapacity	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
shieldRecharge	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
shieldRechargeInGeoscape	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
shiftButtons	Geoscape/GraphsState.cpp	/^void GraphsState::shiftButtons(Action *action)$/;"	f	class:OpenXcom::GraphsState
shortName	Mod/RuleItem.h	/^	std::string shortName;$/;"	m	struct:OpenXcom::RuleItemAction
shortTranslationMap	Ufopaedia/StatsForNerdsState.cpp	/^const std::map<std::string, std::string> StatsForNerdsState::shortTranslationMap =$/;"	m	class:OpenXcom::StatsForNerdsState	file:
shortTranslationMap	Ufopaedia/StatsForNerdsState.h	/^	static const std::map<std::string, std::string> shortTranslationMap;$/;"	m	class:OpenXcom::StatsForNerdsState
shotAtCounter	Savegame/BattleUnitStatistics.h	/^	int shotAtCounter;                   \/\/\/< Tracks how many times the unit was shot at$/;"	m	struct:OpenXcom::BattleUnitStatistics
shotByFriendlyCounter	Savegame/BattleUnitStatistics.h	/^	int shotByFriendlyCounter;           \/\/\/< Tracks how many times the unit was hit by a friendly$/;"	m	struct:OpenXcom::BattleUnitStatistics
shotFriendlyCounter	Savegame/BattleUnitStatistics.h	/^	int shotFriendlyCounter;             \/\/\/< Tracks how many times the unit was hit a friendly$/;"	m	struct:OpenXcom::BattleUnitStatistics
shots	Mod/RuleItem.h	/^	int shots = 1;$/;"	m	struct:OpenXcom::RuleItemAction
shotsFiredCounter	Savegame/BattleUnitStatistics.h	/^	int shotsFiredCounter;               \/\/\/< Tracks how many times a unit has shot$/;"	m	struct:OpenXcom::BattleUnitStatistics
shotsLandedCounter	Savegame/BattleUnitStatistics.h	/^	int shotsLandedCounter;              \/\/\/< Tracks how many times a unit has hit his target$/;"	m	struct:OpenXcom::BattleUnitStatistics
shouldQuit	Engine/FlcPlayer.cpp	/^bool FlcPlayer::shouldQuit()$/;"	f	class:OpenXcom::FlcPlayer
showAlienBase	Mod/RuleAlienMission.h	/^	bool showAlienBase() const { return _showAlienBase; }$/;"	f	class:OpenXcom::RuleAlienMission
showAll	Engine/State.cpp	/^void State::showAll()$/;"	f	class:OpenXcom::State
showCraft	Mod/AlienDeployment.h	/^	bool showCraft, showTarget;$/;"	m	struct:OpenXcom::BriefingData
showError	Engine/CrossPlatform.cpp	/^void showError(const std::string &error)$/;"	f	namespace:OpenXcom::CrossPlatform
showFundsOnGeoscape	Engine/Options.inc.h	/^	allowBuildingQueue, showFundsOnGeoscape, psiStrengthEval, allowPsiStrengthImprovement, fieldPromotions, meetingPoint;$/;"	v
showHelp	Engine/Options.cpp	/^static bool showHelp()$/;"	f	namespace:OpenXcom::Options
showInfo	Mod/Mod.cpp	/^void showInfo(const std::string &parent, const YAML::Node &node, T... names)$/;"	f	namespace:OpenXcom::__anon28
showInfoBoxQueue	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::showInfoBoxQueue()$/;"	f	class:OpenXcom::BattlescapeGame
showLaunchButton	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::showLaunchButton(bool show)$/;"	f	class:OpenXcom::BattlescapeState
showMessage	Battlescape/WarningMessage.cpp	/^void WarningMessage::showMessage(const std::string &msg, int time)$/;"	f	class:OpenXcom::WarningMessage
showMoreStatsInInventoryView	Engine/Options.inc.h	/^	strafe, forceFire, showMoreStatsInInventoryView, allowPsionicCapture, skipNextTurnScreen, disableAutoEquip, battleDragScrollInvert,$/;"	v
showSpecialInEmptyHand	Mod/RuleItem.h	/^	bool showSpecialInEmptyHand() const { return _specialUseEmptyHandShow; }$/;"	f	class:OpenXcom::RuleItem
showTarget	Mod/AlienDeployment.h	/^	bool showCraft, showTarget;$/;"	m	struct:OpenXcom::BriefingData
showWarning	Battlescape/Inventory.cpp	/^void Inventory::showWarning(const std::string &msg)$/;"	f	class:OpenXcom::Inventory
shuffle	Engine/RNG.h	/^	void shuffle(std::vector<T> &list)$/;"	f	namespace:OpenXcom::RNG
side	Mod/RuleEnviroEffects.h	/^	int side;$/;"	m	struct:OpenXcom::EnvironmentalCondition
side	Savegame/BattleUnitStatistics.h	/^	UnitSide side;$/;"	m	struct:OpenXcom::BattleUnitKills
sightRange	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
size	Basescape/StoresState.h	/^	double size;$/;"	m	struct:OpenXcom::StoredItem
size	Engine/CatFile.h	/^	size_t size() const { return _items.size(); }$/;"	f	class:OpenXcom::CatFile
size	Engine/GMCat.cpp	/^	unsigned size;$/;"	m	struct:OpenXcom::seq	file:
size	Engine/HelperMeta.h	/^	static constexpr int size = sizeof...(I);$/;"	m	struct:OpenXcom::helper::ListTag
size	Engine/ScriptBind.h	/^	static constexpr size_t size = 0;$/;"	m	struct:OpenXcom::helper::ArgContextDef
size	Engine/ScriptBind.h	/^	static constexpr size_t size = 0;$/;"	m	struct:OpenXcom::helper::ArgNullDef
size	Engine/ScriptBind.h	/^	static constexpr size_t size = 0;$/;"	m	struct:OpenXcom::helper::ArgProgDef
size	Engine/ScriptBind.h	/^	static constexpr size_t size = Size;$/;"	m	struct:OpenXcom::helper::ArgRawDef
size	Engine/ScriptBind.h	/^	static constexpr size_t size = sizeof(ReturnType);$/;"	m	struct:OpenXcom::helper::ArgFuncDef
size	Engine/ScriptBind.h	/^	static constexpr size_t size = sizeof(ReturnType);$/;"	m	struct:OpenXcom::helper::ArgLabelDef
size	Engine/ScriptBind.h	/^	static constexpr size_t size = sizeof(ReturnType);$/;"	m	struct:OpenXcom::helper::ArgTextDef
size	Engine/ScriptBind.h	/^	static constexpr size_t size = sizeof(T);$/;"	m	struct:OpenXcom::helper::ArgValueDef
size	Engine/ScriptBind.h	/^	static constexpr size_t size = sizeof(Uint8);$/;"	m	struct:OpenXcom::helper::ArgRegDef
size	Engine/ScriptBind.h	/^	static constexpr size_t size = sizeof...(V);$/;"	m	struct:OpenXcom::helper::SumList
size	Mod/Mod.h	/^	size_t size;$/;"	m	struct:OpenXcom::ModData
size	Savegame/Transfer.h	/^	double size, totalSize;$/;"	m	struct:OpenXcom::TransferRow
size	lodepng.cpp	/^  size_t size; \/*size in number of unsigned longs*\/$/;"	m	struct:uivector	file:
size	lodepng.cpp	/^  size_t size; \/*used size*\/$/;"	m	struct:ucvector	file:
size_type	md5.h	/^  typedef unsigned int size_type; \/\/ must be 32bit$/;"	t	class:MD5
size_x	Engine/GraphSubset.h	/^	inline int size_x() const$/;"	f	struct:OpenXcom::AreaSubset
size_y	Engine/GraphSubset.h	/^	inline int size_y() const$/;"	f	struct:OpenXcom::AreaSubset
skillRules	Battlescape/BattlescapeGame.h	/^	const RuleSkill* skillRules = nullptr; \/\/ if defined, this is a skill action$/;"	m	struct:OpenXcom::BattleActionCost
skillScripts	Mod/ModScript.h	/^	SkillScripts skillScripts = { _shared, _mod, "skill" };$/;"	m	class:OpenXcom::ModScript
skillUse	Battlescape/TileEngine.cpp	/^bool TileEngine::skillUse(BattleAction *action, const RuleSkill *skill)$/;"	f	class:OpenXcom::TileEngine
skill_rules	Mod/RuleItem.h	/^	const RuleSkill *skill_rules = nullptr;$/;"	m	struct:OpenXcom::BattleActionAttack
skill_rules	Mod/RuleItem.h	/^	const RuleSkill *skill_rules = nullptr;$/;"	m	struct:OpenXcom::helper::BattleActionAttackReadOnlyImpl
skipNextTurnScreen	Engine/Options.inc.h	/^	strafe, forceFire, showMoreStatsInInventoryView, allowPsionicCapture, skipNextTurnScreen, disableAutoEquip, battleDragScrollInvert,$/;"	v
skipTrajectory	Battlescape/Projectile.cpp	/^void Projectile::skipTrajectory()$/;"	f	class:OpenXcom::Projectile
slaveKills	Savegame/BattleUnitStatistics.h	/^	int slaveKills;                      \/\/\/< Tracks how many kills the soldier landed thanks to a mind controlled unit.$/;"	m	struct:OpenXcom::BattleUnitStatistics
slot_array	Engine/Adlib/adlplayer.cpp	/^static const int8_t slot_array[32]=$/;"	v	file:
slot_array	Engine/Adlib/fmopl.cpp	/^static const int slot_array[32]=$/;"	v	file:
slowTick	Engine/Timer.cpp	/^Uint32 slowTick()$/;"	f	namespace:OpenXcom::__anon9
slrAlienSpeedChange	Menu/OptionsBattlescapeState.cpp	/^void OptionsBattlescapeState::slrAlienSpeedChange(Action *)$/;"	f	class:OpenXcom::OptionsBattlescapeState
slrClockSpeedChange	Menu/OptionsGeoscapeState.cpp	/^void OptionsGeoscapeState::slrClockSpeedChange(Action *)$/;"	f	class:OpenXcom::OptionsGeoscapeState
slrDogfightSpeedChange	Menu/OptionsGeoscapeState.cpp	/^void OptionsGeoscapeState::slrDogfightSpeedChange(Action *)$/;"	f	class:OpenXcom::OptionsGeoscapeState
slrFireSpeedChange	Menu/OptionsBattlescapeState.cpp	/^void OptionsBattlescapeState::slrFireSpeedChange(Action *)$/;"	f	class:OpenXcom::OptionsBattlescapeState
slrMusicVolumeChange	Menu/OptionsAudioState.cpp	/^void OptionsAudioState::slrMusicVolumeChange(Action *)$/;"	f	class:OpenXcom::OptionsAudioState
slrScrollSpeedChange	Menu/OptionsBattlescapeState.cpp	/^void OptionsBattlescapeState::slrScrollSpeedChange(Action *)$/;"	f	class:OpenXcom::OptionsBattlescapeState
slrScrollSpeedChange	Menu/OptionsGeoscapeState.cpp	/^void OptionsGeoscapeState::slrScrollSpeedChange(Action *)$/;"	f	class:OpenXcom::OptionsGeoscapeState
slrSoundVolumeChange	Menu/OptionsAudioState.cpp	/^void OptionsAudioState::slrSoundVolumeChange(Action *)$/;"	f	class:OpenXcom::OptionsAudioState
slrSoundVolumeRelease	Menu/OptionsAudioState.cpp	/^void OptionsAudioState::slrSoundVolumeRelease(Action *)$/;"	f	class:OpenXcom::OptionsAudioState
slrUiVolumeChange	Menu/OptionsAudioState.cpp	/^void OptionsAudioState::slrUiVolumeChange(Action *)$/;"	f	class:OpenXcom::OptionsAudioState
slrUiVolumeRelease	Menu/OptionsAudioState.cpp	/^void OptionsAudioState::slrUiVolumeRelease(Action *)$/;"	f	class:OpenXcom::OptionsAudioState
slrXcomSpeedChange	Menu/OptionsBattlescapeState.cpp	/^void OptionsBattlescapeState::slrXcomSpeedChange(Action *)$/;"	f	class:OpenXcom::OptionsBattlescapeState
sndFormats	Menu/OptionsAudioState.cpp	/^const std::string OptionsAudioState::sndFormats[] = {"?", "1.4", "1.0"};$/;"	m	class:OpenXcom::OptionsAudioState	file:
sndFormats	Menu/OptionsAudioState.h	/^	static const std::string musFormats[], sndFormats[];$/;"	m	class:OpenXcom::OptionsAudioState
sneak	Battlescape/BattlescapeGame.h	/^	bool sneak = false;$/;"	m	struct:OpenXcom::BattleAction
sneakyAI	Engine/Options.inc.h	/^OPT bool traceAI, sneakyAI, battleInstantGrenade, battleNotifyDeath, battleTooltips, battleHairBleach, battleAutoEnd,$/;"	v
sniperAction	Battlescape/AIModule.cpp	/^bool AIModule::sniperAction()$/;"	f	class:OpenXcom::AIModule
softLimit	Mod/Unit.h	/^	static UnitStats softLimit(const UnitStats& statChange, const UnitStats& currentStats, const UnitStats& upperBound)$/;"	f	struct:OpenXcom::UnitStats
soldierBonusScripts	Mod/ModScript.h	/^	SoldierBonusScripts soldierBonusScripts = { _shared, _mod, "soldier" };$/;"	m	class:OpenXcom::ModScript
soldierDiaries	Engine/Options.inc.h	/^	cursorInBlackBandsInFullscreen, cursorInBlackBandsInWindow, cursorInBlackBandsInBorderlessWindow, maximizeInfoScreens, musicAlwaysLoop, StereoSound, verboseLogging, soldierDiaries, touchEnabled,$/;"	v
soldierHasAllRequiredBonusesForSkill	Battlescape/SkillMenuState.cpp	/^bool SkillMenuState::soldierHasAllRequiredBonusesForSkill(Soldier *soldier, const RuleSkill *skillRules)$/;"	f	class:OpenXcom::SkillMenuState
sortDateClick	Menu/ListGamesState.cpp	/^void ListGamesState::sortDateClick(Action *)$/;"	f	class:OpenXcom::ListGamesState
sortList	Basescape/SoldierArmorState.cpp	/^void SoldierArmorState::sortList()$/;"	f	class:OpenXcom::SoldierArmorState
sortList	Basescape/StoresState.cpp	/^void StoresState::sortList(ItemSort sort)$/;"	f	class:OpenXcom::StoresState
sortList	Menu/ListGamesState.cpp	/^void ListGamesState::sortList(SaveSort sort)$/;"	f	class:OpenXcom::ListGamesState
sortLists	Mod/Mod.cpp	/^void Mod::sortLists()$/;"	f	class:OpenXcom::Mod
sortNameClick	Basescape/SoldierArmorState.cpp	/^void SoldierArmorState::sortNameClick(Action *)$/;"	f	class:OpenXcom::SoldierArmorState
sortNameClick	Basescape/StoresState.cpp	/^void StoresState::sortNameClick(Action *)$/;"	f	class:OpenXcom::StoresState
sortNameClick	Menu/ListGamesState.cpp	/^void ListGamesState::sortNameClick(Action *)$/;"	f	class:OpenXcom::ListGamesState
sortQuantityClick	Basescape/StoresState.cpp	/^void StoresState::sortQuantityClick(Action *)$/;"	f	class:OpenXcom::StoresState
sortReserchVector	Savegame/SavedGame.cpp	/^void sortReserchVector(std::vector<T> &vec)$/;"	f	namespace:OpenXcom::__anon41
sortRifles	Battlescape/UnitSprite.cpp	/^void UnitSprite::sortRifles()$/;"	f	class:OpenXcom::UnitSprite
sortSizeClick	Basescape/StoresState.cpp	/^void StoresState::sortSizeClick(Action *)$/;"	f	class:OpenXcom::StoresState
sortSpaceUsedClick	Basescape/StoresState.cpp	/^void StoresState::sortSpaceUsedClick(Action *)$/;"	f	class:OpenXcom::StoresState
sortVector	Engine/Collections.h	/^	static void sortVector(std::vector<T>& vec)$/;"	f	class:OpenXcom::Collections
sortVectorHave	Engine/Collections.h	/^	static bool sortVectorHave(const std::vector<T>& vec, T v)$/;"	f	class:OpenXcom::Collections
sortVectorMakeUnique	Engine/Collections.h	/^	static void sortVectorMakeUnique(std::vector<T>& vec)$/;"	f	class:OpenXcom::Collections
sound	Menu/VideoState.cpp	/^	int sound;$/;"	m	struct:OpenXcom::__anon11	file:
sound	Menu/VideoState.cpp	/^	int sound;$/;"	m	struct:OpenXcom::__anon12	file:
soundInFile	Menu/VideoState.cpp	/^} soundInFile;$/;"	t	namespace:OpenXcom	typeref:struct:OpenXcom::__anon11	file:
soundPopup	Interface/Window.cpp	/^Sound *Window::soundPopup[3];$/;"	m	class:OpenXcom::Window	file:
soundPopup	Interface/Window.h	/^	static Sound *soundPopup[3];$/;"	m	class:OpenXcom::Window
soundPress	Interface/TextButton.cpp	/^Sound *TextButton::soundPress;$/;"	m	class:OpenXcom::TextButton	file:
soundPress	Interface/TextButton.h	/^	static Sound *soundPress;$/;"	m	class:OpenXcom::TextButton
soundVolume	Engine/Options.inc.h	/^	soundVolume, musicVolume, uiVolume, audioSampleRate, audioBitDepth, audioChunkSize, pauseMode, windowedModePositionX, windowedModePositionY, FPS, FPSInactive,$/;"	v
spaceUsed	Basescape/StoresState.h	/^	double spaceUsed;$/;"	m	struct:OpenXcom::StoredItem
spacing	Engine/Font.h	/^	int width, height, spacing;$/;"	m	struct:OpenXcom::FontImage
spawnAlienBase	Savegame/AlienMission.cpp	/^AlienBase *AlienMission::spawnAlienBase(Country *pactCountry, Game &engine, std::pair<double, double> pos, AlienDeployment *deployment)$/;"	f	class:OpenXcom::AlienMission
spawnBlockGroups	Mod/AlienDeployment.h	/^	std::vector<int> spawnBlockGroups;$/;"	m	struct:OpenXcom::ReinforcementsData
spawnBlocks	Mod/AlienDeployment.h	/^	std::vector<std::string> spawnBlocks;$/;"	m	struct:OpenXcom::ReinforcementsData
spawnEvent	Savegame/SavedGame.cpp	/^bool SavedGame::spawnEvent(const RuleEvent* eventRules)$/;"	f	class:OpenXcom::SavedGame
spawnFromPrimedItems	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::spawnFromPrimedItems()$/;"	f	class:OpenXcom::BattlescapeGame
spawnMissionSite	Savegame/AlienMission.cpp	/^MissionSite *AlienMission::spawnMissionSite(SavedGame &game, const Mod &mod, const MissionArea &area, const Ufo *ufo, AlienDeployment *missionOveride)$/;"	f	class:OpenXcom::AlienMission
spawnNewUnit	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::spawnNewUnit(BattleActionAttack attack, Position position)$/;"	f	class:OpenXcom::BattlescapeGame
spawnNewUnit	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::spawnNewUnit(BattleItem *item)$/;"	f	class:OpenXcom::BattlescapeGame
spawnNodeRanks	Mod/AlienDeployment.h	/^	std::vector<int> spawnNodeRanks;$/;"	m	struct:OpenXcom::ReinforcementsData
spawnTimer	Mod/RuleAlienMission.h	/^	size_t spawnTimer;$/;"	m	struct:OpenXcom::MissionWave
spawnUfo	Savegame/AlienMission.cpp	/^Ufo *AlienMission::spawnUfo(SavedGame &game, const Mod &mod, const Globe &globe, const MissionWave &wave, const UfoTrajectory &trajectory)$/;"	f	class:OpenXcom::AlienMission
spawnZLevels	Mod/AlienDeployment.h	/^	std::vector<int> spawnZLevels;$/;"	m	struct:OpenXcom::ReinforcementsData
speed	Mod/UfoTrajectory.h	/^	size_t speed;$/;"	m	struct:OpenXcom::TrajectoryWaypoint
speedMax	Mod/RuleCraft.h	/^	int fuelMax, damageMax, speedMax, accel, radarRange, radarChance, sightRange, hitBonus, avoidBonus, powerBonus, armor, shieldCapacity, shieldRecharge, shieldRechargeInGeoscape, shieldBleedThrough;$/;"	m	struct:OpenXcom::RuleCraftStats
spendAmmoForAction	Savegame/BattleItem.cpp	/^void BattleItem::spendAmmoForAction(BattleActionType action, SavedBattleGame* save)$/;"	f	class:OpenXcom::BattleItem
spendBullet	Savegame/BattleItem.cpp	/^bool BattleItem::spendBullet(int spendPerShot)$/;"	f	class:OpenXcom::BattleItem
spendCost	Savegame/BattleUnit.cpp	/^void BattleUnit::spendCost(const RuleItemUseCost& cost)$/;"	f	class:OpenXcom::BattleUnit
spendEnergy	Savegame/BattleUnit.cpp	/^bool BattleUnit::spendEnergy(int energy)$/;"	f	class:OpenXcom::BattleUnit
spendHealingItemUse	Savegame/BattleItem.cpp	/^void BattleItem::spendHealingItemUse(BattleMediKitAction mediKitAction)$/;"	f	class:OpenXcom::BattleItem
spendPerShot	Mod/RuleItem.h	/^	int spendPerShot = 1;$/;"	m	struct:OpenXcom::RuleItemAction
spendTU	Battlescape/BattlescapeGame.cpp	/^bool BattleActionCost::spendTU(std::string *message)$/;"	f	class:OpenXcom::BattleActionCost
spendTimeUnits	Savegame/BattleUnit.cpp	/^bool BattleUnit::spendTimeUnits(int tu)$/;"	f	class:OpenXcom::BattleUnit
sprayTargeting	Battlescape/BattlescapeGame.h	/^	bool sprayTargeting; \/\/ Used to separate waypoint checks between confirm firing mode and the "spray" autoshot$/;"	m	struct:OpenXcom::BattleAction
square	Engine/Scalers/xbrz.cpp	/^T square(T value) { return value * value; }$/;"	f	namespace:__anon10
src	Battlescape/UnitSprite.h	/^		const Surface *src;$/;"	m	struct:OpenXcom::UnitSprite::Part
st	Engine/Adlib/fmopl.h	/^	UINT8 st[2];		\/* timer enable                      *\/$/;"	m	struct:fm_opl_f
stack	Engine/FileMap.cpp	/^	VFSLayerStack stack;$/;"	m	struct:OpenXcom::FileMap::ModRecord	file:
stack	Engine/FileMap.cpp	/^	VFSLayerStack stack;$/;"	m	struct:OpenXcom::FileMap::VFS	file:
stackTrace	Engine/CrossPlatform.cpp	/^void stackTrace(void *ctx)$/;"	f	namespace:OpenXcom::CrossPlatform
stage_scale2x	Engine/Scalers/scalebit.cpp	/^static inline void stage_scale2x(void* dst0, void* dst1, const void* src0, const void* src1, const void* src2, unsigned pixel, unsigned pixel_per_row)$/;"	f	file:
stage_scale2x3	Engine/Scalers/scalebit.cpp	/^static inline void stage_scale2x3(void* dst0, void* dst1, void* dst2, const void* src0, const void* src1, const void* src2, unsigned pixel, unsigned pixel_per_row)$/;"	f	file:
stage_scale2x4	Engine/Scalers/scalebit.cpp	/^static inline void stage_scale2x4(void* dst0, void* dst1, void* dst2, void* dst3, const void* src0, const void* src1, const void* src2, unsigned pixel, unsigned pixel_per_row)$/;"	f	file:
stage_scale3x	Engine/Scalers/scalebit.cpp	/^static inline void stage_scale3x(void* dst0, void* dst1, void* dst2, const void* src0, const void* src1, const void* src2, unsigned pixel, unsigned pixel_per_row)$/;"	f	file:
stage_scale4x	Engine/Scalers/scalebit.cpp	/^static inline void stage_scale4x(void* dst0, void* dst1, void* dst2, void* dst3, const void* src0, const void* src1, const void* src2, const void* src3, unsigned pixel, unsigned pixel_per_row)$/;"	f	file:
stamina	Mod/Unit.h	/^	Type tu, stamina, health, bravery, reactions, firing, throwing, strength, psiStrength, psiSkill, melee, mana;$/;"	m	struct:OpenXcom::UnitStats
standard_zip	OpenXcom.s	/^standard_zip:$/;"	l
standard_zip_end	OpenXcom.s	/^standard_zip_end:$/;"	l
standard_zip_size	OpenXcom.s	/^standard_zip_size:$/;"	l
start	Engine/Timer.cpp	/^void Timer::start()$/;"	f	class:OpenXcom::Timer
start	Savegame/AlienMission.cpp	/^void AlienMission::start(Game &engine, const Globe &globe, size_t initialCount)$/;"	f	class:OpenXcom::AlienMission
startDogfight	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::startDogfight()$/;"	f	class:OpenXcom::GeoscapeState
startFalling	Savegame/BattleUnit.cpp	/^void BattleUnit::startFalling()$/;"	f	class:OpenXcom::BattleUnit
startFirstTurn	Savegame/SavedBattleGame.cpp	/^void SavedBattleGame::startFirstTurn()$/;"	f	class:OpenXcom::SavedBattleGame
startItem	Savegame/Production.cpp	/^void Production::startItem(Base * b, SavedGame * g, const Mod *m) const$/;"	f	class:OpenXcom::Production
startUpdateProcess	Engine/CrossPlatform.cpp	/^void startUpdateProcess()$/;"	f	namespace:OpenXcom::CrossPlatform
startWalking	Savegame/BattleUnit.cpp	/^void BattleUnit::startWalking(int direction, Position destination, SavedBattleGame *savedBattleGame)$/;"	f	class:OpenXcom::BattleUnit
start_address	Engine/Adlib/adlplayer.cpp	/^	unsigned char*	start_address;$/;"	m	struct:struc_instruments	file:
start_x	Engine/ShaderDrawHelper.h	/^	int start_x;$/;"	m	struct:OpenXcom::helper::controler_base
start_y	Engine/ShaderDrawHelper.h	/^	int start_y;$/;"	m	struct:OpenXcom::helper::controler_base
stat0	Mod/RuleStatBonus.cpp	/^float stat0(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
stat1	Mod/RuleStatBonus.cpp	/^float stat1(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
stat2	Mod/RuleStatBonus.cpp	/^float stat2(const BattleUnit *unit)$/;"	f	namespace:OpenXcom::__anon24
statDataFuncSize	Mod/RuleStatBonus.cpp	/^constexpr size_t statDataFuncSize = 4;$/;"	m	namespace:OpenXcom::__anon24	file:
statDataMap	Mod/RuleStatBonus.cpp	/^BonusStatData statDataMap[] =$/;"	m	namespace:OpenXcom::__anon24	file:
statGrowth	Mod/Unit.h	/^	UnitStats statGrowth;$/;"	m	struct:OpenXcom::StatAdjustment
statMultiper	Mod/RuleStatBonus.cpp	/^constexpr size_t statMultiper = 1000;$/;"	m	namespace:OpenXcom::__anon24	file:
statNamePostfix	Mod/RuleStatBonus.cpp	/^constexpr const char* statNamePostfix = "BonusStats";$/;"	m	namespace:OpenXcom::__anon24	file:
state	md5.h	/^  uint4 state[4];   \/\/ digest so far$/;"	m	class:MD5
statePushBack	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::statePushBack(BattleState *bs)$/;"	f	class:OpenXcom::BattlescapeGame
statePushFront	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::statePushFront(BattleState *bs)$/;"	f	class:OpenXcom::BattlescapeGame
statePushNext	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::statePushNext(BattleState *bs)$/;"	f	class:OpenXcom::BattlescapeGame
static_data	Geoscape/Globe.cpp	/^GlobeStaticData static_data;$/;"	m	namespace:OpenXcom::__anon49	file:
status	Engine/Adlib/fmopl.h	/^	UINT8 status;		\/* status flag                       *\/$/;"	m	struct:fm_opl_f
status	Savegame/BattleUnitStatistics.h	/^	UnitStatus status;$/;"	m	struct:OpenXcom::BattleUnitKills
statusmask	Engine/Adlib/fmopl.h	/^	UINT8 statusmask;	\/* status mask                       *\/$/;"	m	struct:fm_opl_f
steepDirectionThreshold	Engine/Scalers/config.h	/^    double steepDirectionThreshold;$/;"	m	struct:xbrz::ScalerCfg
step	Engine/ShaderDrawHelper.h	/^	const std::pair<int, int> step;$/;"	m	struct:OpenXcom::helper::controler_base
step	Savegame/Production.cpp	/^productionProgress_e Production::step(Base * b, SavedGame * g, const Mod *m, Language *lang)$/;"	f	class:OpenXcom::Production
step	Savegame/ResearchProject.cpp	/^bool ResearchProject::step()$/;"	f	class:OpenXcom::ResearchProject
stimulant	Savegame/BattleUnit.cpp	/^void BattleUnit::stimulant(int energy, int stun, int mana)$/;"	f	class:OpenXcom::BattleUnit
stop	Engine/FlcPlayer.cpp	/^void FlcPlayer::stop()$/;"	f	class:OpenXcom::FlcPlayer
stop	Engine/Music.cpp	/^void Music::stop()$/;"	f	class:OpenXcom::Music
stop	Engine/Sound.cpp	/^void Sound::stop()$/;"	f	class:OpenXcom::Sound
stop	Engine/Timer.cpp	/^void Timer::stop()$/;"	f	class:OpenXcom::Timer
stopHuntingXcomCraft	Savegame/SavedGame.cpp	/^void SavedGame::stopHuntingXcomCraft(Craft *target)$/;"	f	class:OpenXcom::SavedGame
stopHuntingXcomCrafts	Savegame/SavedGame.cpp	/^void SavedGame::stopHuntingXcomCrafts(Base *base)$/;"	f	class:OpenXcom::SavedGame
stopLoop	Engine/Sound.cpp	/^void Sound::stopLoop()$/;"	f	class:OpenXcom::Sound
stopMouseScrolling	Battlescape/Camera.cpp	/^void Camera::stopMouseScrolling()$/;"	f	class:OpenXcom::Camera
stopScrolling	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::stopScrolling(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
stopScrolling	Battlescape/MiniMapView.cpp	/^void MiniMapView::stopScrolling(Action *action)$/;"	f	class:OpenXcom::MiniMapView
stopScrolling	Geoscape/Globe.cpp	/^void Globe::stopScrolling(Action *action)$/;"	f	class:OpenXcom::Globe
storageLimitsEnforced	Engine/Options.inc.h	/^	storageLimitsEnforced, canSellLiveAliens, canTransferCraftsWhileAirborne, customInitialBase, aggressiveRetaliation, geoDragScrollInvert,$/;"	v
storesOverfull	Savegame/Base.cpp	/^bool Base::storesOverfull(double offset) const$/;"	f	class:OpenXcom::Base
storesOverfullCritical	Savegame/Base.cpp	/^bool Base::storesOverfullCritical() const$/;"	f	class:OpenXcom::Base
strGLError	Engine/OpenGL.cpp	/^std::string strGLError(GLenum glErr)$/;"	f	namespace:OpenXcom
strafe	Battlescape/BattlescapeGame.h	/^	bool strafe = false;$/;"	m	struct:OpenXcom::BattleAction
strafe	Engine/Options.inc.h	/^	strafe, forceFire, showMoreStatsInInventoryView, allowPsionicCapture, skipNextTurnScreen, disableAutoEquip, battleDragScrollInvert,$/;"	v
strength	Mod/Unit.h	/^	Type tu, stamina, health, bravery, reactions, firing, throwing, strength, psiStrength, psiSkill, melee, mana;$/;"	m	struct:OpenXcom::UnitStats
string_cleanup	lodepng.cpp	/^static void string_cleanup(char** out)$/;"	f	file:
string_init	lodepng.cpp	/^static void string_init(char** out)$/;"	f	file:
string_resize	lodepng.cpp	/^static unsigned string_resize(char** out, size_t size)$/;"	f	file:
string_set	lodepng.cpp	/^static void string_set(char** out, const char* in)$/;"	f	file:
struc_adlib_channels	Engine/Adlib/adlplayer.cpp	/^struct struc_adlib_channels {$/;"	s	file:
struc_instruments	Engine/Adlib/adlplayer.cpp	/^struct struc_instruments{$/;"	s	file:
struc_sample	Engine/Adlib/adlplayer.cpp	/^struct struc_sample{$/;"	s	file:
subSequence	Engine/RNG.h	/^		RandomState subSequence()$/;"	f	class:OpenXcom::RNG::RandomState
subs	Engine/GMCat.cpp	/^	struct seq subs [256];$/;"	m	struct:OpenXcom::gmstream	typeref:struct:OpenXcom::gmstream::seq	file:
success	Savegame/MissionStatistics.h	/^	bool success;$/;"	m	struct:OpenXcom::MissionStatistics
sumVector	Menu/StatisticsState.cpp	/^T StatisticsState::sumVector(const std::vector<T> &vec) const$/;"	f	class:OpenXcom::StatisticsState
supportedEngines	Engine/ModInfo.cpp	/^const EngineData supportedEngines[] = {$/;"	m	namespace:OpenXcom::__anon4	file:
surface	Engine/Font.h	/^	Surface *surface;$/;"	m	struct:OpenXcom::FontImage
surface	Engine/OpenGL.h	/^  Surface::UniqueSurfacePtr surface;$/;"	m	class:OpenXcom::OpenGL
surveyItems	Battlescape/BattlescapeGame.cpp	/^BattleItem *BattlescapeGame::surveyItems(BattleAction *action, bool pickUpWeaponsMoreActively)$/;"	f	class:OpenXcom::BattlescapeGame
swap	Mod/RuleRegion.h	/^	void swap(MissionZone &other)$/;"	f	struct:OpenXcom::MissionZone
switchDisplay	Engine/Options.cpp	/^void switchDisplay()$/;"	f	namespace:OpenXcom::Options
tactical	Savegame/SaveConverter.h	/^	bool tactical;$/;"	m	struct:OpenXcom::SaveOriginal
tail	lodepng.cpp	/^  struct BPMNode* tail; \/*the next nodes in this chain (null if last)*\/$/;"	m	struct:BPMNode	typeref:struct:BPMNode::BPMNode	file:
takeItem	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::takeItem(BattleItem* item, BattleAction *action)$/;"	f	class:OpenXcom::BattlescapeGame
takeItemFromGround	Battlescape/BattlescapeGame.cpp	/^int BattlescapeGame::takeItemFromGround(BattleItem* item, BattleAction *action)$/;"	f	class:OpenXcom::BattlescapeGame
tallySummonedVIPs	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::tallySummonedVIPs()$/;"	f	class:OpenXcom::BattlescapeGame
tallyUnits	Battlescape/BattlescapeGame.cpp	/^BattlescapeTally BattlescapeGame::tallyUnits()$/;"	f	class:OpenXcom::BattlescapeGame
tallyUnitsForPreview	Savegame/SavedBattleGame.cpp	/^BattlescapeTally SavedBattleGame::tallyUnitsForPreview()$/;"	f	class:OpenXcom::SavedBattleGame
target	Battlescape/BattlescapeGame.h	/^	Position target;$/;"	m	struct:OpenXcom::BattleAction
targetFloor	Battlescape/ProjectileFlyBState.cpp	/^void ProjectileFlyBState::targetFloor()$/;"	f	class:OpenXcom::ProjectileFlyBState
targetNear	Geoscape/Globe.cpp	/^bool Globe::targetNear(Target* target, int x, int y) const$/;"	f	class:OpenXcom::Globe
targeting	Battlescape/BattlescapeGame.h	/^	bool targeting;$/;"	m	struct:OpenXcom::BattleAction
templateMerge	Mod/Unit.h	/^	static UnitStats templateMerge(const UnitStats& origStats, const UnitStats& fixedStats)$/;"	f	struct:OpenXcom::UnitStats
tempo	Engine/GMCat.cpp	/^	int tempo, nsubs, ntracks;$/;"	m	struct:OpenXcom::gmstream	file:
term	Engine/OpenGL.cpp	/^void OpenGL::term()$/;"	f	class:OpenXcom::OpenGL
terrainLevel	Savegame/Tile.h	/^		Sint8 terrainLevel = 0;$/;"	m	struct:OpenXcom::Tile::TileCache
terrainMeleeTilePart	Battlescape/BattlescapeGame.h	/^	int terrainMeleeTilePart = 0; \/\/ terrain melee$/;"	m	struct:OpenXcom::BattleAction
testCase0	Menu/TestState.cpp	/^void TestState::testCase0()$/;"	f	class:OpenXcom::TestState
testCase1	Menu/TestState.cpp	/^void TestState::testCase1()$/;"	f	class:OpenXcom::TestState
testCase2	Menu/TestState.cpp	/^void TestState::testCase2()$/;"	f	class:OpenXcom::TestState
testCase3	Menu/TestState.cpp	/^void TestState::testCase3()$/;"	f	class:OpenXcom::TestState
testCase4	Menu/TestState.cpp	/^void TestState::testCase4()$/;"	f	class:OpenXcom::TestState
testInternetConnection	Engine/CrossPlatform.cpp	/^bool testInternetConnection(const std::string& url)$/;"	f	namespace:OpenXcom::CrossPlatform
text	Mod/ArticleDefinition.h	/^		std::string text;$/;"	m	struct:OpenXcom::ArticlePage
textOffset	Mod/AlienDeployment.h	/^	int palette, textOffset;$/;"	m	struct:OpenXcom::BriefingData
text_compression	lodepng.h	/^  unsigned text_compression;$/;"	m	struct:LodePNGEncoderSettings
text_keys	lodepng.h	/^  char** text_keys; \/*the keyword of a text chunk (e.g. "Comment")*\/$/;"	m	struct:LodePNGInfo
text_num	lodepng.h	/^  size_t text_num; \/*the amount of texts in these char** buffers (there may be more texts in itext)*\/$/;"	m	struct:LodePNGInfo
text_strings	lodepng.h	/^  char** text_strings; \/*the actual text*\/$/;"	m	struct:LodePNGInfo
text_width	Mod/ArticleDefinition.h	/^		int text_width;$/;"	m	class:OpenXcom::ArticleDefinitionTFTD
text_width	Mod/ArticleDefinition.h	/^		int text_width;$/;"	m	class:OpenXcom::ArticleDefinitionTextImage
texture	Mod/RuleRegion.h	/^	int texture;$/;"	m	struct:OpenXcom::MissionArea
think	Basescape/BaseView.cpp	/^void BaseView::think()$/;"	f	class:OpenXcom::BaseView
think	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::think()$/;"	f	class:OpenXcom::CraftEquipmentState
think	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::think()$/;"	f	class:OpenXcom::ManageAlienContainmentState
think	Basescape/ManufactureInfoState.cpp	/^void ManufactureInfoState::think()$/;"	f	class:OpenXcom::ManufactureInfoState
think	Basescape/PurchaseState.cpp	/^void PurchaseState::think()$/;"	f	class:OpenXcom::PurchaseState
think	Basescape/ResearchInfoState.cpp	/^void ResearchInfoState::think()$/;"	f	class:OpenXcom::ResearchInfoState
think	Basescape/SellState.cpp	/^void SellState::think()$/;"	f	class:OpenXcom::SellState
think	Basescape/SoldierDiaryPerformanceState.cpp	/^void SoldierDiaryPerformanceState::think()$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
think	Basescape/TransferItemsState.cpp	/^void TransferItemsState::think()$/;"	f	class:OpenXcom::TransferItemsState
think	Battlescape/AIModule.cpp	/^void AIModule::think(BattleAction *action)$/;"	f	class:OpenXcom::AIModule
think	Battlescape/AlienInventory.cpp	/^void AlienInventory::think()$/;"	f	class:OpenXcom::AlienInventory
think	Battlescape/BattleState.cpp	/^void BattleState::think()$/;"	f	class:OpenXcom::BattleState
think	Battlescape/BattlescapeGame.cpp	/^void BattlescapeGame::think()$/;"	f	class:OpenXcom::BattlescapeGame
think	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::think()$/;"	f	class:OpenXcom::BattlescapeState
think	Battlescape/ExplosionBState.cpp	/^void ExplosionBState::think()$/;"	f	class:OpenXcom::ExplosionBState
think	Battlescape/InfoboxState.cpp	/^void InfoboxState::think()$/;"	f	class:OpenXcom::InfoboxState
think	Battlescape/Inventory.cpp	/^void Inventory::think()$/;"	f	class:OpenXcom::Inventory
think	Battlescape/InventoryState.cpp	/^void InventoryState::think()$/;"	f	class:OpenXcom::InventoryState
think	Battlescape/Map.cpp	/^void Map::think()$/;"	f	class:OpenXcom::Map
think	Battlescape/MeleeAttackBState.cpp	/^void MeleeAttackBState::think()$/;"	f	class:OpenXcom::MeleeAttackBState
think	Battlescape/MiniMapState.cpp	/^void MiniMapState::think()$/;"	f	class:OpenXcom::MiniMapState
think	Battlescape/NextTurnState.cpp	/^void NextTurnState::think()$/;"	f	class:OpenXcom::NextTurnState
think	Battlescape/ProjectileFlyBState.cpp	/^void ProjectileFlyBState::think()$/;"	f	class:OpenXcom::ProjectileFlyBState
think	Battlescape/PsiAttackBState.cpp	/^void PsiAttackBState::think()$/;"	f	class:OpenXcom::PsiAttackBState
think	Battlescape/ScannerState.cpp	/^void ScannerState::think()$/;"	f	class:OpenXcom::ScannerState
think	Battlescape/UnitDieBState.cpp	/^void UnitDieBState::think()$/;"	f	class:OpenXcom::UnitDieBState
think	Battlescape/UnitFallBState.cpp	/^void UnitFallBState::think()$/;"	f	class:OpenXcom::UnitFallBState
think	Battlescape/UnitPanicBState.cpp	/^void UnitPanicBState::think()$/;"	f	class:OpenXcom::UnitPanicBState
think	Battlescape/UnitTurnBState.cpp	/^void UnitTurnBState::think()$/;"	f	class:OpenXcom::UnitTurnBState
think	Battlescape/UnitWalkBState.cpp	/^void UnitWalkBState::think()$/;"	f	class:OpenXcom::UnitWalkBState
think	Battlescape/WarningMessage.cpp	/^void WarningMessage::think()$/;"	f	class:OpenXcom::WarningMessage
think	Engine/State.cpp	/^void State::think()$/;"	f	class:OpenXcom::State
think	Engine/Surface.cpp	/^void Surface::think()$/;"	f	class:OpenXcom::Surface
think	Engine/Timer.cpp	/^void Timer::think(State* state, Surface* surface)$/;"	f	class:OpenXcom::Timer
think	Geoscape/BaseDefenseState.cpp	/^void BaseDefenseState::think()$/;"	f	class:OpenXcom::BaseDefenseState
think	Geoscape/BuildNewBaseState.cpp	/^void BuildNewBaseState::think()$/;"	f	class:OpenXcom::BuildNewBaseState
think	Geoscape/DogfightState.cpp	/^void DogfightState::think()$/;"	f	class:OpenXcom::DogfightState
think	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::think()$/;"	f	class:OpenXcom::GeoscapeState
think	Geoscape/Globe.cpp	/^void Globe::think()$/;"	f	class:OpenXcom::Globe
think	Geoscape/SelectDestinationState.cpp	/^void SelectDestinationState::think()$/;"	f	class:OpenXcom::SelectDestinationState
think	Interface/ArrowButton.cpp	/^void ArrowButton::think()$/;"	f	class:OpenXcom::ArrowButton
think	Interface/ComboBox.cpp	/^void ComboBox::think()$/;"	f	class:OpenXcom::ComboBox
think	Interface/FpsCounter.cpp	/^void FpsCounter::think()$/;"	f	class:OpenXcom::FpsCounter
think	Interface/TextEdit.cpp	/^void TextEdit::think()$/;"	f	class:OpenXcom::TextEdit
think	Interface/TextList.cpp	/^void TextList::think()$/;"	f	class:OpenXcom::TextList
think	Interface/Window.cpp	/^void Window::think()$/;"	f	class:OpenXcom::Window
think	Menu/LoadGameState.cpp	/^void LoadGameState::think()$/;"	f	class:OpenXcom::LoadGameState
think	Menu/OptionsConfirmState.cpp	/^void OptionsConfirmState::think()$/;"	f	class:OpenXcom::OptionsConfirmState
think	Menu/SaveGameState.cpp	/^void SaveGameState::think()$/;"	f	class:OpenXcom::SaveGameState
think	Menu/SlideshowState.cpp	/^void SlideshowState::think()$/;"	f	class:OpenXcom::SlideshowState
think	Menu/StartState.cpp	/^void StartState::think()$/;"	f	class:OpenXcom::StartState
think	Savegame/AlienMission.cpp	/^void AlienMission::think(Game &engine, const Globe &globe)$/;"	f	class:OpenXcom::AlienMission
think	Savegame/BattleUnit.cpp	/^void BattleUnit::think(BattleAction *action)$/;"	f	class:OpenXcom::BattleUnit
think	Savegame/Craft.cpp	/^bool Craft::think()$/;"	f	class:OpenXcom::Craft
think	Savegame/GeoscapeEvent.cpp	/^void GeoscapeEvent::think()$/;"	f	class:OpenXcom::GeoscapeEvent
think	Savegame/Ufo.cpp	/^void Ufo::think()$/;"	f	class:OpenXcom::Ufo
think	Ufopaedia/UfopaediaStartState.cpp	/^	void UfopaediaStartState::think()$/;"	f	class:OpenXcom::UfopaediaStartState
throwExplode	Mod/RuleItem.h	/^	bool throwExplode = false;$/;"	m	struct:OpenXcom::RuleItemFuseTrigger
throwModOnErrorHelper	Mod/Mod.cpp	/^static void throwModOnErrorHelper(const std::string& modId, const std::string& error)$/;"	f	namespace:OpenXcom
throwOnBadListHelper	Mod/Mod.cpp	/^void throwOnBadListHelper(const std::string &parent, const YAML::Node &node)$/;"	f	namespace:OpenXcom::__anon28
throwOnBadMapHelper	Mod/Mod.cpp	/^void throwOnBadMapHelper(const std::string &parent, const YAML::Node &node)$/;"	f	namespace:OpenXcom::__anon28
throwTrigger	Mod/RuleItem.h	/^	bool throwTrigger = false;$/;"	m	struct:OpenXcom::RuleItemFuseTrigger
throwing	Mod/Unit.h	/^	Type tu, stamina, health, bravery, reactions, firing, throwing, strength, psiStrength, psiSkill, melee, mana;$/;"	m	struct:OpenXcom::UnitStats
tilesToFallInto	Battlescape/UnitFallBState.h	/^	std::vector<Tile*> tilesToFallInto;$/;"	m	class:OpenXcom::UnitFallBState
time	Battlescape/PathfindingNode.h	/^	Sint16 time = 0;$/;"	m	struct:OpenXcom::PathfindingCost
time	Savegame/MissionStatistics.h	/^	GameTime time;$/;"	m	struct:OpenXcom::MissionStatistics
time	Savegame/SaveConverter.h	/^	std::string name, date, time;$/;"	m	struct:OpenXcom::SaveOriginal
time	lodepng.h	/^  LodePNGTime time;$/;"	m	struct:LodePNGInfo
time10Minutes	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::time10Minutes()$/;"	f	class:OpenXcom::GeoscapeState
time1Day	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::time1Day()$/;"	f	class:OpenXcom::GeoscapeState
time1Hour	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::time1Hour()$/;"	f	class:OpenXcom::GeoscapeState
time1Month	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::time1Month()$/;"	f	class:OpenXcom::GeoscapeState
time30Minutes	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::time30Minutes()$/;"	f	class:OpenXcom::GeoscapeState
time5Seconds	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::time5Seconds()$/;"	f	class:OpenXcom::GeoscapeState
timeAdvance	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::timeAdvance()$/;"	f	class:OpenXcom::GeoscapeState
timeDisplay	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::timeDisplay()$/;"	f	class:OpenXcom::GeoscapeState
timeToString	Engine/CrossPlatform.cpp	/^std::pair<std::string, std::string> timeToString(time_t time)$/;"	f	namespace:OpenXcom::CrossPlatform
time_defined	lodepng.h	/^  unsigned time_defined; \/*set to 1 to make the encoder generate a tIME chunk*\/$/;"	m	struct:LodePNGInfo
timerReset	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::timerReset()$/;"	f	class:OpenXcom::GeoscapeState
timestamp	Savegame/SavedGame.h	/^	time_t timestamp;$/;"	m	struct:OpenXcom::SaveInfo
title	Mod/AlienDeployment.h	/^	std::string title, desc, music, background, cutscene;$/;"	m	struct:OpenXcom::BriefingData
title	Mod/ArticleDefinition.h	/^		std::string title;$/;"	m	struct:OpenXcom::ArticlePage
toBeRemoved	Savegame/CraftWeaponProjectile.cpp	/^bool CraftWeaponProjectile::toBeRemoved() const$/;"	f	class:OpenXcom::CraftWeaponProjectile
toHtml	Engine/Language.cpp	/^void Language::toHtml(const std::string &filename) const$/;"	f	class:OpenXcom::Language
toString	Battlescape/MedikitState.cpp	/^std::string toString (type t)$/;"	f	namespace:OpenXcom
toString	Engine/Logger.h	/^	static const std::string& toString(int level) {$/;"	f	class:OpenXcom::Logger
toTile	Battlescape/Position.h	/^	constexpr Position toTile() const$/;"	f	class:OpenXcom::Position
toVoxel	Battlescape/Position.h	/^	constexpr Position toVoxel() const$/;"	f	class:OpenXcom::Position
toggle	Interface/BattlescapeButton.cpp	/^void BattlescapeButton::toggle(bool press)$/;"	f	class:OpenXcom::BattlescapeButton
toggle	Interface/ComboBox.cpp	/^void ComboBox::toggle(bool first, bool listClick)$/;"	f	class:OpenXcom::ComboBox
toggle	Interface/ImageButton.cpp	/^void ImageButton::toggle(bool press)$/;"	f	class:OpenXcom::ImageButton
toggleAltPressedFlag	Engine/Game.h	/^	void toggleAltPressedFlag() { _alt = !_alt; }$/;"	f	class:OpenXcom::Game
toggleCancel	Geoscape/UfoDetectedState.cpp	/^void UfoDetectedState::toggleCancel(Action *)$/;"	f	class:OpenXcom::UfoDetectedState
toggleCtrlPressedFlag	Engine/Game.h	/^	void toggleCtrlPressedFlag() { _ctrl = !_ctrl; }$/;"	f	class:OpenXcom::Game
toggleDebugVisionMode	Battlescape/Map.cpp	/^void Map::toggleDebugVisionMode()$/;"	f	class:OpenXcom::Map
toggleDetail	Geoscape/Globe.cpp	/^void Globe::toggleDetail()$/;"	f	class:OpenXcom::Globe
toggleFireDamage	Savegame/BattleUnit.cpp	/^void BattleUnit::toggleFireDamage()$/;"	f	class:OpenXcom::BattleUnit
toggleKneelButton	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::toggleKneelButton(BattleUnit* unit)$/;"	f	class:OpenXcom::BattlescapeState
toggleLeftHandForReactions	Savegame/BattleUnit.cpp	/^void BattleUnit::toggleLeftHandForReactions()$/;"	f	class:OpenXcom::BattleUnit
toggleMMBFlag	Engine/Game.h	/^	void toggleMMBFlag() { _mmb = !_mmb; }$/;"	f	class:OpenXcom::Game
toggleMod	Menu/ModListState.cpp	/^void ModListState::toggleMod()$/;"	f	class:OpenXcom::ModListState
toggleNightVision	Battlescape/Map.cpp	/^void Map::toggleNightVision()$/;"	f	class:OpenXcom::Map
togglePatrolButton	Geoscape/ConfirmLandingState.cpp	/^void ConfirmLandingState::togglePatrolButton(Action *)$/;"	f	class:OpenXcom::ConfirmLandingState
togglePersonalLighting	Battlescape/TileEngine.cpp	/^void TileEngine::togglePersonalLighting()$/;"	f	class:OpenXcom::TileEngine
toggleRMBFlag	Engine/Game.h	/^	void toggleRMBFlag() { _rmb = !_rmb; }$/;"	f	class:OpenXcom::Game
toggleRadarLines	Geoscape/Globe.cpp	/^void Globe::toggleRadarLines()$/;"	f	class:OpenXcom::Globe
toggleRightHandForReactions	Savegame/BattleUnit.cpp	/^void BattleUnit::toggleRightHandForReactions()$/;"	f	class:OpenXcom::BattleUnit
toggleScreen	Engine/State.cpp	/^void State::toggleScreen()$/;"	f	class:OpenXcom::State
toggleShiftPressedFlag	Engine/Game.h	/^	void toggleShiftPressedFlag() { _shift = !_shift; }$/;"	f	class:OpenXcom::Game
toggleShowAllLayers	Battlescape/Camera.cpp	/^int Camera::toggleShowAllLayers()$/;"	f	class:OpenXcom::Camera
toggleTouchButtons	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::toggleTouchButtons(bool deactivate, bool tryToReactivate)$/;"	f	class:OpenXcom::BattlescapeState
tookFireDamage	Savegame/BattleUnit.cpp	/^bool BattleUnit::tookFireDamage() const$/;"	f	class:OpenXcom::BattleUnit
totalBytes	Savegame/Tile.h	/^		Uint32 totalBytes; \/\/ per structure, including any data not mentioned here and accounting for all array members!$/;"	m	struct:OpenXcom::Tile::SerializationKey
totalCaptains	Savegame/SavedGame.h	/^	int totalCaptains;$/;"	m	struct:OpenXcom::PromotionInfo
totalColonels	Savegame/SavedGame.h	/^	int totalColonels;$/;"	m	struct:OpenXcom::PromotionInfo
totalCommanders	Savegame/SavedGame.h	/^	int totalCommanders;$/;"	m	struct:OpenXcom::PromotionInfo
totalCost	Savegame/Transfer.h	/^	int64_t totalCost;$/;"	m	struct:OpenXcom::TransferRow
totalSergeants	Savegame/SavedGame.h	/^	int totalSergeants;$/;"	m	struct:OpenXcom::PromotionInfo
totalSize	Savegame/Transfer.h	/^	double size, totalSize;$/;"	m	struct:OpenXcom::TransferRow
totalSoldiers	Savegame/SavedGame.h	/^	int totalSoldiers;$/;"	m	struct:OpenXcom::PromotionInfo
touchEnabled	Engine/Options.inc.h	/^	cursorInBlackBandsInFullscreen, cursorInBlackBandsInWindow, cursorInBlackBandsInBorderlessWindow, maximizeInfoScreens, musicAlwaysLoop, StereoSound, verboseLogging, soldierDiaries, touchEnabled,$/;"	v
tr	Engine/State.cpp	/^LocalizedText State::tr(const std::string &id) const$/;"	f	class:OpenXcom::State
tr	Engine/State.cpp	/^LocalizedText State::tr(const std::string &id, SoldierGender gender) const$/;"	f	class:OpenXcom::State
tr	Engine/State.cpp	/^LocalizedText State::tr(const std::string &id, unsigned n) const$/;"	f	class:OpenXcom::State
trAlt	Engine/State.cpp	/^LocalizedText State::trAlt(const std::string &id, int alt) const$/;"	f	class:OpenXcom::State
trU	Engine/Scalers/common.h	37;"	d
trV	Engine/Scalers/common.h	38;"	d
trY	Engine/Scalers/common.h	36;"	d
traceAI	Engine/Options.inc.h	/^OPT bool traceAI, sneakyAI, battleInstantGrenade, battleNotifyDeath, battleTooltips, battleHairBleach, battleAutoEnd,$/;"	v
track	Engine/GMCat.cpp	/^struct track {$/;"	s	namespace:OpenXcom	file:
trackPosition	Menu/VideoState.cpp	/^	int trackPosition;$/;"	m	struct:OpenXcom::AudioSequence	file:
tracks	Engine/GMCat.cpp	/^	struct track tracks [256];$/;"	m	struct:OpenXcom::gmstream	typeref:struct:OpenXcom::gmstream::track	file:
trainPhys	Savegame/Soldier.cpp	/^void Soldier::trainPhys(int customTrainingFactor)$/;"	f	class:OpenXcom::Soldier
trainPsi	Savegame/Soldier.cpp	/^void Soldier::trainPsi()$/;"	f	class:OpenXcom::Soldier
trainPsi1Day	Savegame/Soldier.cpp	/^void Soldier::trainPsi1Day()$/;"	f	class:OpenXcom::Soldier
trajectory	Mod/RuleAlienMission.h	/^	std::string trajectory;$/;"	m	struct:OpenXcom::MissionWave
transform	Savegame/Soldier.cpp	/^void Soldier::transform(const Mod *mod, RuleSoldierTransformation *transformationRule, Soldier *sourceSoldier, Base *base)$/;"	f	class:OpenXcom::Soldier
transform	md5.cpp	/^void MD5::transform(const uint1 block[blocksize])$/;"	f	class:MD5
transitionSeconds	Mod/RuleVideo.h	/^	int transitionSeconds; \/\/ number of seconds to show each slide$/;"	m	struct:OpenXcom::SlideshowHeader
transitionSeconds	Mod/RuleVideo.h	/^	int transitionSeconds; \/\/ number of seconds to show this slide$/;"	m	struct:OpenXcom::SlideshowSlide
translationMap	Ufopaedia/StatsForNerdsState.cpp	/^const std::map<std::string, std::string> StatsForNerdsState::translationMap =$/;"	m	class:OpenXcom::StatsForNerdsState	file:
translationMap	Ufopaedia/StatsForNerdsState.h	/^	static const std::map<std::string, std::string> translationMap;$/;"	m	class:OpenXcom::StatsForNerdsState
tree1d	lodepng.cpp	/^  unsigned* tree1d;$/;"	m	struct:HuffmanTree	file:
tree2d	lodepng.cpp	/^  unsigned* tree2d;$/;"	m	struct:HuffmanTree	file:
trp	Ufopaedia/StatsForNerdsState.cpp	/^std::string StatsForNerdsState::trp(const std::string &propertyName)$/;"	f	class:OpenXcom::StatsForNerdsState
tryArmorChange	Battlescape/InventoryState.cpp	/^bool InventoryState::tryArmorChange(const std::string& armorName)$/;"	f	class:OpenXcom::InventoryState
tryConcealUnit	Battlescape/TileEngine.cpp	/^bool TileEngine::tryConcealUnit(BattleUnit* unit)$/;"	f	class:OpenXcom::TileEngine
tryConcealUnitScript	Savegame/SavedBattleGame.cpp	/^void tryConcealUnitScript(SavedBattleGame* sbg, BattleUnit* bu, int& val)$/;"	f	namespace:OpenXcom::__anon33
tryReaction	Battlescape/TileEngine.cpp	/^bool TileEngine::tryReaction(ReactionScore *reaction, BattleUnit *target, const BattleAction &originalAction)$/;"	f	class:OpenXcom::TileEngine
tryRun	Battlescape/BattlescapeGame.h	/^		bool tryRun()$/;"	f	class:OpenXcom::BattlescapeGame::SingleRun
tryShowMasterNotValidConfirmationState	Menu/ModConfirmExtendedState.cpp	/^	bool ModConfirmExtendedState::tryShowMasterNotValidConfirmationState(ModListState *state, const ModInfo *masterInfo)$/;"	f	class:OpenXcom::ModConfirmExtendedState
tryShowModNotValidConfirmationState	Menu/ModConfirmExtendedState.cpp	/^	bool ModConfirmExtendedState::tryShowModNotValidConfirmationState(ModListState *state, const ModInfo *modInfo, const ModInfo *masterInfo)$/;"	f	class:OpenXcom::ModConfirmExtendedState
tu	Mod/Unit.h	/^	Type tu, stamina, health, bravery, reactions, firing, throwing, strength, psiStrength, psiSkill, melee, mana;$/;"	m	struct:OpenXcom::UnitStats
turn	Savegame/BattleUnit.cpp	/^void BattleUnit::turn(bool turret)$/;"	f	class:OpenXcom::BattleUnit
turn	Savegame/BattleUnitStatistics.h	/^	int mission, turn, id;$/;"	m	struct:OpenXcom::BattleUnitKills
turnSideScript	Savegame/SavedBattleGame.cpp	/^void turnSideScript(const SavedBattleGame* sbg, int& val)$/;"	f	namespace:OpenXcom::__anon33
turns	Mod/AlienDeployment.h	/^	std::vector<int> turns;$/;"	m	struct:OpenXcom::ReinforcementsData
txtArmorTooltipIn	Battlescape/InventoryState.cpp	/^void InventoryState::txtArmorTooltipIn(Action *action)$/;"	f	class:OpenXcom::InventoryState
txtArmorTooltipOut	Battlescape/InventoryState.cpp	/^void InventoryState::txtArmorTooltipOut(Action *action)$/;"	f	class:OpenXcom::InventoryState
txtDisplayHeightChange	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::txtDisplayHeightChange(Action *)$/;"	f	class:OpenXcom::OptionsVideoState
txtDisplayWidthChange	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::txtDisplayWidthChange(Action *)$/;"	f	class:OpenXcom::OptionsVideoState
txtTooltipIn	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::txtTooltipIn(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
txtTooltipIn	Battlescape/DebriefingState.cpp	/^void DebriefingState::txtTooltipIn(Action *action)$/;"	f	class:OpenXcom::DebriefingState
txtTooltipIn	Battlescape/InventoryState.cpp	/^void InventoryState::txtTooltipIn(Action *action)$/;"	f	class:OpenXcom::InventoryState
txtTooltipIn	Menu/ModListState.cpp	/^void ModListState::txtTooltipIn(Action *action)$/;"	f	class:OpenXcom::ModListState
txtTooltipIn	Menu/OptionsBaseState.cpp	/^void OptionsBaseState::txtTooltipIn(Action *action)$/;"	f	class:OpenXcom::OptionsBaseState
txtTooltipInEndTurn	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::txtTooltipInEndTurn(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
txtTooltipInExtra	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::txtTooltipInExtra(Action *action, bool leftHand, bool special)$/;"	f	class:OpenXcom::BattlescapeState
txtTooltipInExtraLeftHand	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::txtTooltipInExtraLeftHand(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
txtTooltipInExtraRightHand	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::txtTooltipInExtraRightHand(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
txtTooltipInExtraSpecial	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::txtTooltipInExtraSpecial(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
txtTooltipOut	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::txtTooltipOut(Action *action)$/;"	f	class:OpenXcom::BattlescapeState
txtTooltipOut	Battlescape/DebriefingState.cpp	/^void DebriefingState::txtTooltipOut(Action *action)$/;"	f	class:OpenXcom::DebriefingState
txtTooltipOut	Battlescape/InventoryState.cpp	/^void InventoryState::txtTooltipOut(Action *action)$/;"	f	class:OpenXcom::InventoryState
txtTooltipOut	Menu/ModListState.cpp	/^void ModListState::txtTooltipOut(Action *action)$/;"	f	class:OpenXcom::ModListState
txtTooltipOut	Menu/OptionsBaseState.cpp	/^void OptionsBaseState::txtTooltipOut(Action *action)$/;"	f	class:OpenXcom::OptionsBaseState
type	Basescape/SoldierArmorState.h	/^	std::string type;$/;"	m	struct:OpenXcom::ArmorItem
type	Battlescape/BattlescapeGame.h	/^	BattleActionType type;$/;"	m	struct:OpenXcom::BattleActionCost
type	Engine/Adlib/fmopl.h	/^	UINT8 type;			\/* chip type                         *\/$/;"	m	struct:fm_opl_f
type	Engine/OptionInfo.cpp	/^OptionType OptionInfo::type() const$/;"	f	class:OpenXcom::OptionInfo
type	Engine/ScriptBind.h	/^		BlockEnum type;$/;"	m	struct:OpenXcom::ParserWriter::Block
type	Engine/ScriptBind.h	/^	static ArgEnum type()$/;"	f	struct:OpenXcom::helper::ArgFuncDef
type	Engine/ScriptBind.h	/^	static ArgEnum type()$/;"	f	struct:OpenXcom::helper::ArgLabelDef
type	Engine/ScriptBind.h	/^	static ArgEnum type()$/;"	f	struct:OpenXcom::helper::ArgNullDef
type	Engine/ScriptBind.h	/^	static ArgEnum type()$/;"	f	struct:OpenXcom::helper::ArgRawDef
type	Engine/ScriptBind.h	/^	static ArgEnum type()$/;"	f	struct:OpenXcom::helper::ArgRegDef
type	Engine/ScriptBind.h	/^	static ArgEnum type()$/;"	f	struct:OpenXcom::helper::ArgTextDef
type	Engine/ScriptBind.h	/^	static ArgEnum type()$/;"	f	struct:OpenXcom::helper::ArgValueDef
type	Mod/AlienDeployment.h	/^	std::string type;$/;"	m	struct:OpenXcom::ReinforcementsData
type	Mod/RuleItem.h	/^	BattleActionType type;$/;"	m	struct:OpenXcom::BattleActionAttack
type	Mod/RuleItem.h	/^	BattleActionType type;$/;"	m	struct:OpenXcom::helper::BattleActionAttackReadOnlyImpl
type	Savegame/BattleUnitStatistics.h	/^	std::string type, rank, race, weapon, weaponAmmo;$/;"	m	struct:OpenXcom::BattleUnitKills
type	Savegame/Craft.h	/^	std::string type;$/;"	m	struct:OpenXcom::VehicleDeploymentData
type	Savegame/MissionStatistics.h	/^	std::string region, country, type, ufo;$/;"	m	struct:OpenXcom::MissionStatistics
type	Savegame/Transfer.h	/^	TransferType type;$/;"	m	struct:OpenXcom::TransferRow
typeHelper	Engine/ScriptBind.h	/^	static ArgEnum typeHelper()$/;"	f	struct:OpenXcom::helper::Arg
typeStat	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::typeStat(Game *game, Soldier *s)$/;"	f	class:OpenXcom
ucWords	Menu/OptionsControlsState.cpp	/^std::string OptionsControlsState::ucWords(std::string str)$/;"	f	class:OpenXcom::OptionsControlsState
ucWords	Menu/OptionsVideoState.cpp	/^std::string OptionsVideoState::ucWords(std::string str)$/;"	f	class:OpenXcom::OptionsVideoState
ucvector	lodepng.cpp	/^typedef struct ucvector$/;"	s	file:
ucvector	lodepng.cpp	/^} ucvector;$/;"	t	typeref:struct:ucvector	file:
ucvector_cleanup	lodepng.cpp	/^static void ucvector_cleanup(void* p)$/;"	f	file:
ucvector_init	lodepng.cpp	/^static void ucvector_init(ucvector* p)$/;"	f	file:
ucvector_init_buffer	lodepng.cpp	/^static void ucvector_init_buffer(ucvector* p, unsigned char* buffer, size_t size)$/;"	f	file:
ucvector_push_back	lodepng.cpp	/^static unsigned ucvector_push_back(ucvector* p, unsigned char c)$/;"	f	file:
ucvector_reserve	lodepng.cpp	/^static unsigned ucvector_reserve(ucvector* p, size_t allocsize)$/;"	f	file:
ucvector_resize	lodepng.cpp	/^static unsigned ucvector_resize(ucvector* p, size_t size)$/;"	f	file:
ufo	Savegame/MissionStatistics.h	/^	std::string region, country, type, ufo;$/;"	m	struct:OpenXcom::MissionStatistics
ufoCount	Mod/RuleAlienMission.h	/^	size_t ufoCount;$/;"	m	struct:OpenXcom::MissionWave
ufoFireWeapon	Geoscape/DogfightState.cpp	/^void DogfightState::ufoFireWeapon()$/;"	f	class:OpenXcom::DogfightState
ufoHuntingAndEscorting	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::ufoHuntingAndEscorting()$/;"	f	class:OpenXcom::GeoscapeState
ufoLifting	Savegame/AlienMission.cpp	/^void AlienMission::ufoLifting(Ufo &ufo, SavedGame &game)$/;"	f	class:OpenXcom::AlienMission
ufoReachedWaypoint	Savegame/AlienMission.cpp	/^void AlienMission::ufoReachedWaypoint(Ufo &ufo, Game &engine, const Globe &globe)$/;"	f	class:OpenXcom::AlienMission
ufoScripts	Mod/ModScript.h	/^	UfoScripts ufoScripts = { _shared, _mod, "ufo" };$/;"	m	class:OpenXcom::ModScript
ufoShotDown	Savegame/AlienMission.cpp	/^void AlienMission::ufoShotDown(Ufo &ufo)$/;"	f	class:OpenXcom::AlienMission
ufoType	Mod/RuleAlienMission.h	/^	std::string ufoType;$/;"	m	struct:OpenXcom::MissionWave
uiVolume	Engine/Options.inc.h	/^	soundVolume, musicVolume, uiVolume, audioSampleRate, audioBitDepth, audioChunkSize, pauseMode, windowedModePositionX, windowedModePositionY, FPS, FPSInactive,$/;"	v
uint1	md5.h	/^  typedef unsigned char uint1; \/\/  8bit$/;"	t	class:MD5
uint4	md5.h	/^  typedef unsigned int uint4;  \/\/ 32bit$/;"	t	class:MD5
uivector	lodepng.cpp	/^typedef struct uivector$/;"	s	file:
uivector	lodepng.cpp	/^} uivector;$/;"	t	typeref:struct:uivector	file:
uivector_cleanup	lodepng.cpp	/^static void uivector_cleanup(void* p)$/;"	f	file:
uivector_init	lodepng.cpp	/^static void uivector_init(uivector* p)$/;"	f	file:
uivector_push_back	lodepng.cpp	/^static unsigned uivector_push_back(uivector* p, unsigned c)$/;"	f	file:
uivector_reserve	lodepng.cpp	/^static unsigned uivector_reserve(uivector* p, size_t allocsize)$/;"	f	file:
uivector_resize	lodepng.cpp	/^static unsigned uivector_resize(uivector* p, size_t size)$/;"	f	file:
uivector_resizev	lodepng.cpp	/^static unsigned uivector_resizev(uivector* p, size_t size, unsigned value)$/;"	f	file:
unfilter	lodepng.cpp	/^static unsigned unfilter(unsigned char* out, const unsigned char* in, unsigned w, unsigned h, unsigned bpp)$/;"	f	file:
unfilterScanline	lodepng.cpp	/^static unsigned unfilterScanline(unsigned char* recon, const unsigned char* scanline, const unsigned char* precon,$/;"	f	file:
unit	Battlescape/TileEngine.h	/^		BattleUnit *unit;$/;"	m	struct:OpenXcom::TileEngine::ReactionScore
unitFireLightPower	Battlescape/TileEngine.cpp	/^const int unitFireLightPower = 15;$/;"	m	namespace:OpenXcom	file:
unitFireLightPowerStunned	Battlescape/TileEngine.cpp	/^const int unitFireLightPowerStunned = 10;$/;"	m	namespace:OpenXcom	file:
unitOpensDoor	Battlescape/TileEngine.cpp	/^int TileEngine::unitOpensDoor(BattleUnit *unit, bool rClick, int dir)$/;"	f	class:OpenXcom::TileEngine
unitsToMove	Battlescape/UnitFallBState.h	/^	std::vector<BattleUnit*> unitsToMove;$/;"	m	class:OpenXcom::UnitFallBState
unknown_chunks_data	lodepng.h	/^  unsigned char* unknown_chunks_data[3];$/;"	m	struct:LodePNGInfo
unknown_chunks_size	lodepng.h	/^  size_t unknown_chunks_size[3]; \/*size in bytes of the unknown chunks, given for protection*\/$/;"	m	struct:LodePNGInfo
unload	Battlescape/Inventory.cpp	/^bool Inventory::unload(bool quickUnload)$/;"	f	class:OpenXcom::Inventory
unload	Savegame/Craft.cpp	/^void Craft::unload()$/;"	f	class:OpenXcom::Craft
unloadData	Mod/MapDataSet.cpp	/^void MapDataSet::unloadData()$/;"	f	class:OpenXcom::MapDataSet
unlock	Engine/Surface.cpp	/^void Surface::unlock()$/;"	f	class:OpenXcom::Surface
unpress	Engine/InteractiveSurface.cpp	/^void InteractiveSurface::unpress(State *state)$/;"	f	class:OpenXcom::InteractiveSurface
unpress	Interface/TextList.cpp	/^void TextList::unpress(State *state)$/;"	f	class:OpenXcom::TextList
unpressRootWindowedMode	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::unpressRootWindowedMode()$/;"	f	class:OpenXcom::OptionsVideoState
unserializeInt	Savegame/SerializationHelper.cpp	/^int unserializeInt(Uint8 **buffer, Uint8 sizeKey)$/;"	f	namespace:OpenXcom
untilLastIf	Engine/Collections.h	/^	static void untilLastIf(C& colection, Predicate&& p, Callback&& f)$/;"	f	class:OpenXcom::Collections
up	Battlescape/Camera.cpp	/^void Camera::up()$/;"	f	class:OpenXcom::Camera
up	Battlescape/MiniMapView.cpp	/^int MiniMapView::up()$/;"	f	class:OpenXcom::MiniMapView
update	Battlescape/MedikitState.cpp	/^void MedikitState::update()$/;"	f	class:OpenXcom::MedikitState
update	Battlescape/ScannerState.cpp	/^void ScannerState::update()$/;"	f	class:OpenXcom::ScannerState
update	Engine/Script.cpp	/^void ParserWriter::update(ProgPos pos, void* data, size_t s)$/;"	f	class:OpenXcom::ParserWriter
update	Geoscape/DogfightState.cpp	/^void DogfightState::update()$/;"	f	class:OpenXcom::DogfightState
update	Interface/FpsCounter.cpp	/^void FpsCounter::update()$/;"	f	class:OpenXcom::FpsCounter
update	md5.cpp	/^void MD5::update(const char input[], size_type length)$/;"	f	class:MD5
update	md5.cpp	/^void MD5::update(const unsigned char input[], size_type length)$/;"	f	class:MD5
updateActiveCrafts	Geoscape/GeoscapeState.cpp	/^const std::vector<Craft*>* GeoscapeState::updateActiveCrafts()$/;"	f	class:OpenXcom::GeoscapeState
updateArmorFromNonSoldier	Savegame/BattleUnit.cpp	/^void BattleUnit::updateArmorFromNonSoldier(const Mod* mod, Armor* newArmor, int depth, const RuleStartingCondition* sc)$/;"	f	class:OpenXcom::BattleUnit
updateArmorFromSoldier	Savegame/BattleUnit.cpp	/^void BattleUnit::updateArmorFromSoldier(const Mod *mod, Soldier *soldier, Armor *ruleArmor, int depth, bool inBattlescape, const RuleStartingCondition* sc)$/;"	f	class:OpenXcom::BattleUnit
updateArrows	Basescape/SoldierArmorState.cpp	/^void SoldierArmorState::updateArrows()$/;"	f	class:OpenXcom::SoldierArmorState
updateArrows	Basescape/StoresState.cpp	/^void StoresState::updateArrows()$/;"	f	class:OpenXcom::StoresState
updateArrows	Interface/TextList.cpp	/^void TextList::updateArrows()$/;"	f	class:OpenXcom::TextList
updateArrows	Menu/ListGamesState.cpp	/^void ListGamesState::updateArrows()$/;"	f	class:OpenXcom::ListGamesState
updateBattlescapeScale	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::updateBattlescapeScale(Action *)$/;"	f	class:OpenXcom::OptionsVideoState
updateButton	Geoscape/GraphsState.cpp	/^void GraphsState::updateButton(GraphButInfo *from,ToggleTextButton *to)$/;"	f	class:OpenXcom::GraphsState
updateButtons	Ufopaedia/UfopaediaStartState.cpp	/^	void UfopaediaStartState::updateButtons()$/;"	f	class:OpenXcom::UfopaediaStartState
updateCategories	Mod/RuleItem.cpp	/^void RuleItem::updateCategories(std::map<std::string, std::string> *replacementRules)$/;"	f	class:OpenXcom::RuleItem
updateConst	Engine/Script.cpp	/^void ScriptGlobal::updateConst(const std::string& name, ScriptValueData i)$/;"	f	class:OpenXcom::ScriptGlobal
updateConst	Engine/Script.cpp	/^void ScriptParserBase::updateConst(const std::string& s, ScriptValueData i)$/;"	f	class:OpenXcom::ScriptParserBase
updateDiary	Savegame/SoldierDiary.cpp	/^void SoldierDiary::updateDiary(BattleUnitStatistics *unitStatistics, std::vector<MissionStatistics*> *allMissionStatistics, Mod *rules)$/;"	f	class:OpenXcom::SoldierDiary
updateDisplayMode	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::updateDisplayMode(Action *)$/;"	f	class:OpenXcom::OptionsVideoState
updateDisplayResolution	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::updateDisplayResolution()$/;"	f	class:OpenXcom::OptionsVideoState
updateGameStateAfterScript	Battlescape/TileEngine.cpp	/^void TileEngine::updateGameStateAfterScript(BattleActionAttack battleActionAttack, Position pos)$/;"	f	class:OpenXcom::TileEngine
updateGeoscapeScale	Menu/OptionsVideoState.cpp	/^void OptionsVideoState::updateGeoscapeScale(Action *)$/;"	f	class:OpenXcom::OptionsVideoState
updateGeoscapeStats	Savegame/BattleUnit.cpp	/^void BattleUnit::updateGeoscapeStats(Soldier *soldier) const$/;"	f	class:OpenXcom::BattleUnit
updateHashChain	lodepng.cpp	/^static void updateHashChain(Hash* hash, size_t wpos, unsigned hashval, unsigned short numzeros)$/;"	f	file:
updateItemStrings	Basescape/PurchaseState.cpp	/^void PurchaseState::updateItemStrings()$/;"	f	class:OpenXcom::PurchaseState
updateItemStrings	Basescape/SellState.cpp	/^void SellState::updateItemStrings()$/;"	f	class:OpenXcom::SellState
updateItemStrings	Basescape/TransferItemsState.cpp	/^void TransferItemsState::updateItemStrings()$/;"	f	class:OpenXcom::TransferItemsState
updateList	Basescape/PurchaseState.cpp	/^void PurchaseState::updateList()$/;"	f	class:OpenXcom::PurchaseState
updateList	Basescape/SellState.cpp	/^void SellState::updateList()$/;"	f	class:OpenXcom::SellState
updateList	Basescape/SoldierArmorState.cpp	/^void SoldierArmorState::updateList()$/;"	f	class:OpenXcom::SoldierArmorState
updateList	Basescape/StoresState.cpp	/^void StoresState::updateList()$/;"	f	class:OpenXcom::StoresState
updateList	Basescape/TransferItemsState.cpp	/^void TransferItemsState::updateList()$/;"	f	class:OpenXcom::TransferItemsState
updateList	Menu/ListGamesState.cpp	/^void ListGamesState::updateList()$/;"	f	class:OpenXcom::ListGamesState
updateList	Menu/ListSaveState.cpp	/^void ListSaveState::updateList()$/;"	f	class:OpenXcom::ListSaveState
updateList	Menu/NotesState.cpp	/^void NotesState::updateList()$/;"	f	class:OpenXcom::NotesState
updateMods	Engine/Options.cpp	/^void updateMods()$/;"	f	namespace:OpenXcom::Options
updateNeighborFacilityBuildTime	Basescape/BaseView.cpp	/^void BaseView::updateNeighborFacilityBuildTime(BaseFacility* facility, BaseFacility* neighbor)$/;"	f	class:OpenXcom::BaseView
updateOptions	Engine/Options.cpp	/^void updateOptions()$/;"	f	namespace:OpenXcom::Options
updateProc	Engine/Script.cpp	/^void ParserWriter::updateProc(ReservedPos<ProcOp> pos, int procOffset)$/;"	f	class:OpenXcom::ParserWriter
updateQuantity	Basescape/CraftEquipmentState.cpp	/^void CraftEquipmentState::updateQuantity()$/;"	f	class:OpenXcom::CraftEquipmentState
updateReserved	Engine/ScriptBind.h	/^	void updateReserved(ReservedPos<T> pos, T value)$/;"	f	struct:OpenXcom::ParserWriter
updateScale	Engine/Screen.cpp	/^void Screen::updateScale(int type, int &width, int &height, bool change)$/;"	f	class:OpenXcom::Screen
updateScale	Geoscape/GraphsState.cpp	/^void GraphsState::updateScale(double lowerLimit, double upperLimit)$/;"	f	class:OpenXcom::GraphsState
updateSelectedPart	Battlescape/MedikitView.cpp	/^void MedikitView::updateSelectedPart()$/;"	f	class:OpenXcom::MedikitView
updateSlackingIndicator	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::updateSlackingIndicator()$/;"	f	class:OpenXcom::GeoscapeState
updateSoldierInfo	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::updateSoldierInfo(bool checkFOV)$/;"	f	class:OpenXcom::BattlescapeState
updateSprite	Savegame/Tile.cpp	/^void Tile::updateSprite(TilePart part)$/;"	f	class:OpenXcom::Tile
updateStats	Battlescape/InventoryState.cpp	/^void InventoryState::updateStats()$/;"	f	class:OpenXcom::InventoryState
updateStrings	Basescape/ManageAlienContainmentState.cpp	/^void ManageAlienContainmentState::updateStrings()$/;"	f	class:OpenXcom::ManageAlienContainmentState
updateTU	Battlescape/BattlescapeGame.cpp	/^void BattleActionCost::updateTU()$/;"	f	class:OpenXcom::BattleActionCost
updateTemplateButtons	Battlescape/InventoryState.cpp	/^void InventoryState::updateTemplateButtons(bool isVisible)$/;"	f	class:OpenXcom::InventoryState
updateTileFloorState	Savegame/BattleUnit.cpp	/^void BattleUnit::updateTileFloorState(SavedBattleGame *saveBattleGame)$/;"	f	class:OpenXcom::BattleUnit
updateUI	Basescape/CraftPilotsState.cpp	/^void CraftPilotsState::updateUI()$/;"	f	class:OpenXcom::CraftPilotsState
updateUiButton	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::updateUiButton(const BattleUnit *battleUnit)$/;"	f	class:OpenXcom::BattlescapeState
updateUnitStats	Savegame/BattleUnit.cpp	/^void BattleUnit::updateUnitStats(bool tuAndEnergy, bool rest)$/;"	f	class:OpenXcom::BattleUnit
updateVisible	Interface/TextList.cpp	/^void TextList::updateVisible()$/;"	f	class:OpenXcom::TextList
updateZoneInfo	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::updateZoneInfo()$/;"	f	class:OpenXcom::GeoscapeState
update_adler32	lodepng.cpp	/^static unsigned update_adler32(unsigned adler, const unsigned char* data, unsigned len)$/;"	f	file:
upperCase	Engine/Unicode.cpp	/^void upperCase(std::string &s)$/;"	f	namespace:OpenXcom::Unicode
use32bitScaler	Engine/Screen.cpp	/^bool Screen::use32bitScaler()$/;"	f	class:OpenXcom::Screen
useAllStartTiles	Mod/RuleCraft.cpp	/^bool RuleCraft::useAllStartTiles() const$/;"	f	class:OpenXcom::RuleCraft
useHQXFilter	Engine/Options.inc.h	/^OPT bool fullscreen, asyncBlit, playIntro, useScaleFilter, useHQXFilter, useXBRZFilter, useOpenGL, checkOpenGLErrors, vSyncForOpenGL, useOpenGLSmoothing,$/;"	v
useOpenGL	Engine/Options.inc.h	/^OPT bool fullscreen, asyncBlit, playIntro, useScaleFilter, useHQXFilter, useXBRZFilter, useOpenGL, checkOpenGLErrors, vSyncForOpenGL, useOpenGLSmoothing,$/;"	v
useOpenGL	Engine/Screen.cpp	/^bool Screen::useOpenGL()$/;"	f	class:OpenXcom::Screen
useOpenGLShader	Engine/Options.inc.h	/^OPT std::string language, useOpenGLShader;$/;"	v
useOpenGLSmoothing	Engine/Options.inc.h	/^OPT bool fullscreen, asyncBlit, playIntro, useScaleFilter, useHQXFilter, useXBRZFilter, useOpenGL, checkOpenGLErrors, vSyncForOpenGL, useOpenGLSmoothing,$/;"	v
useScaleFilter	Engine/Options.inc.h	/^OPT bool fullscreen, asyncBlit, playIntro, useScaleFilter, useHQXFilter, useXBRZFilter, useOpenGL, checkOpenGLErrors, vSyncForOpenGL, useOpenGLSmoothing,$/;"	v
useSpawnNodes	Mod/AlienDeployment.h	/^	bool useSpawnNodes = true;$/;"	m	struct:OpenXcom::ReinforcementsData
useStatisticalBulletSaving	Mod/RuleCraftWeapon.h	/^	bool useStatisticalBulletSaving() const { return _statisticalBulletSaving; }$/;"	f	class:OpenXcom::RuleCraftWeapon
useTriBoolHelper	Mod/Armor.cpp	/^bool useTriBoolHelper(Sint8 value, bool def)$/;"	f	namespace:OpenXcom::__anon15
useUfoAudioSequence	Mod/RuleVideo.cpp	/^bool RuleVideo::useUfoAudioSequence() const$/;"	f	class:OpenXcom::RuleVideo
useXBRZFilter	Engine/Options.inc.h	/^OPT bool fullscreen, asyncBlit, playIntro, useScaleFilter, useHQXFilter, useXBRZFilter, useOpenGL, checkOpenGLErrors, vSyncForOpenGL, useOpenGLSmoothing,$/;"	v
use_lz77	lodepng.h	/^  unsigned use_lz77; \/*whether or not to use LZ77. Should be 1 for proper compression.*\/$/;"	m	struct:LodePNGCompressSettings
used	Savegame/Craft.h	/^	bool used;$/;"	m	struct:OpenXcom::VehicleDeploymentData
userSplitMasters	Engine/Options.cpp	/^static void userSplitMasters()$/;"	f	namespace:OpenXcom::Options
usesBackPals	Menu/TestState.h	/^	bool usesBackPals;$/;"	m	struct:OpenXcom::PaletteTestMetadata
utf8	Engine/Unicode.cpp	/^std::locale utf8;$/;"	m	namespace:OpenXcom::Unicode	file:
vSyncForOpenGL	Engine/Options.inc.h	/^OPT bool fullscreen, asyncBlit, playIntro, useScaleFilter, useHQXFilter, useXBRZFilter, useOpenGL, checkOpenGLErrors, vSyncForOpenGL, useOpenGLSmoothing,$/;"	v
val	Engine/ScriptBind.h	/^	constexpr static auto val() { return optDeref(F); }$/;"	f	struct:OpenXcom::helper::WarpValue
val	lodepng.cpp	/^  int* val; \/*circular pos to hash value*\/$/;"	m	struct:Hash	file:
valiantCrux	Savegame/MissionStatistics.h	/^	bool valiantCrux;$/;"	m	struct:OpenXcom::MissionStatistics
validMeleeRange	Battlescape/TileEngine.cpp	/^bool TileEngine::validMeleeRange(BattleUnit *attacker, BattleUnit *target, int dir)$/;"	f	class:OpenXcom::TileEngine
validMeleeRange	Battlescape/TileEngine.cpp	/^bool TileEngine::validMeleeRange(Position pos, int direction, BattleUnit *attacker, BattleUnit *target, Position *dest, bool preferEnemy)$/;"	f	class:OpenXcom::TileEngine
validMissionLocation	Savegame/AlienStrategy.cpp	/^bool AlienStrategy::validMissionLocation(const std::string &varName, const std::string &regionName, int zoneNumber)$/;"	f	class:OpenXcom::AlienStrategy
validMissionRegion	Savegame/AlienStrategy.cpp	/^bool AlienStrategy::validMissionRegion(const std::string &region)$/;"	f	class:OpenXcom::AlienStrategy
validOverloadProc	Engine/Script.cpp	/^bool validOverloadProc(const ScriptRange<ScriptRange<ArgEnum>>& overload)$/;"	f	namespace:OpenXcom::__anon8
validTarget	Battlescape/AIModule.cpp	/^bool AIModule::validTarget(BattleUnit *target, bool assessDanger, bool includeCivs) const$/;"	f	class:OpenXcom::AIModule
validTerrainMeleeRange	Battlescape/TileEngine.cpp	/^bool TileEngine::validTerrainMeleeRange(BattleAction* action)$/;"	f	class:OpenXcom::TileEngine
validThrowRange	Battlescape/ProjectileFlyBState.cpp	/^bool ProjectileFlyBState::validThrowRange(BattleAction *action, Position origin, Tile *target, int depth)$/;"	f	class:OpenXcom::ProjectileFlyBState
validateAddingSoldier	Savegame/Craft.cpp	/^bool Craft::validateAddingSoldier(int space, const Soldier* s) const$/;"	f	class:OpenXcom::Craft
validateAddingVehicles	Savegame/Craft.cpp	/^int Craft::validateAddingVehicles(int totalSize) const$/;"	f	class:OpenXcom::Craft
validateArmorChange	Savegame/Craft.cpp	/^bool Craft::validateArmorChange(int sizeFrom, int sizeTo) const$/;"	f	class:OpenXcom::Craft
validateThrow	Battlescape/TileEngine.cpp	/^bool TileEngine::validateThrow(BattleAction &action, Position originVoxel, Position targetVoxel, int depth, double *curve, int *voxelType, bool forced)$/;"	f	class:OpenXcom::TileEngine
validateUpDown	Battlescape/Pathfinding.cpp	/^bool Pathfinding::validateUpDown(const BattleUnit *bu, const Position& startPosition, const int direction, bool missile) const$/;"	f	class:OpenXcom::Pathfinding
valign	Mod/RuleVideo.h	/^	TextVAlign valign; \/\/ caption vertical alignment$/;"	m	struct:OpenXcom::SlideshowSlide
value	Battlescape/BattlescapeGame.h	/^	int value;$/;"	m	struct:OpenXcom::BattleAction
value	Battlescape/DebriefingState.h	/^struct RecoveryItem { std::string name; int value; };$/;"	m	struct:OpenXcom::RecoveryItem
value	Engine/Collections.h	/^		T value;$/;"	m	struct:OpenXcom::Collections::ValueIterator
value	Engine/HelperMeta.h	/^	static constexpr bool value = false;$/;"	m	struct:OpenXcom::helper::StaticError
value	Engine/HelperMeta.h	/^	static constexpr int value = I;$/;"	m	struct:OpenXcom::helper::PosTag
valueOverThreshold	Savegame/Soldier.cpp	/^int valueOverThreshold(int value, int base, int threshold)$/;"	f	namespace:OpenXcom::__anon34
valueThreshold	Savegame/Soldier.cpp	/^int valueThreshold(int base, int threshold)$/;"	f	namespace:OpenXcom::__anon34
values	Engine/ScriptBind.h	/^		std::vector<CompType> values;$/;"	m	class:OpenXcom::ParserWriter::ReservedCrossRefrenece
vdirs	Engine/FileMap.cpp	/^	std::unordered_map<std::string, NameSet> vdirs;$/;"	m	struct:OpenXcom::FileMap::VFSLayer	file:
vdirs	Engine/FileMap.cpp	/^	std::unordered_map<std::string, NameSet> vdirs;$/;"	m	struct:OpenXcom::FileMap::VFSLayerStack	file:
vectorToDirection	Battlescape/Pathfinding.h	/^	constexpr static int vectorToDirection(Position vector)$/;"	f	class:OpenXcom::Pathfinding
vectorToDirection	Battlescape/Pathfinding.h	/^	constexpr static void vectorToDirection(Position vector, int &dir)$/;"	f	class:OpenXcom::Pathfinding
ver	Engine/ScriptBind.h	/^	static constexpr int ver()$/;"	f	struct:OpenXcom::helper::Arg
ver	Engine/ScriptBind.h	/^	static constexpr int ver()$/;"	f	struct:OpenXcom::helper::ArgColection
ver	Engine/ScriptBind.h	/^	static constexpr int ver()$/;"	f	struct:OpenXcom::helper::ArgInternal
verboseLogging	Engine/Options.inc.h	/^	cursorInBlackBandsInFullscreen, cursorInBlackBandsInWindow, cursorInBlackBandsInBorderlessWindow, maximizeInfoScreens, musicAlwaysLoop, StereoSound, verboseLogging, soldierDiaries, touchEnabled,$/;"	v
verifySoundOffset	Mod/Mod.cpp	/^void Mod::verifySoundOffset(const std::string &parent, const int& sound, const std::string &set) const$/;"	f	class:OpenXcom::Mod
verifySoundOffset	Mod/Mod.cpp	/^void Mod::verifySoundOffset(const std::string &parent, const std::vector<int>& sounds, const std::string &set) const$/;"	f	class:OpenXcom::Mod
verifySpriteOffset	Mod/Mod.cpp	/^void Mod::verifySpriteOffset(const std::string &parent, const int& sprite, const std::string &set) const$/;"	f	class:OpenXcom::Mod
verifySpriteOffset	Mod/Mod.cpp	/^void Mod::verifySpriteOffset(const std::string &parent, const std::vector<int>& sprites, const std::string &set) const$/;"	f	class:OpenXcom::Mod
version	Engine/ModInfo.cpp	/^	int version[4];$/;"	m	struct:OpenXcom::__anon4::EngineData	file:
verticalBlockage	Battlescape/TileEngine.cpp	/^int TileEngine::verticalBlockage(Tile *startTile, Tile *endTile, ItemDamageType type, bool skipObject)$/;"	f	class:OpenXcom::TileEngine
vib	Engine/Adlib/fmopl.cpp	/^static INT32 vib;$/;"	v	file:
vib	Engine/Adlib/fmopl.h	/^	UINT8 vib;		\/* vibrate flag                        *\/$/;"	m	struct:fm_opl_slot
vibCnt	Engine/Adlib/fmopl.h	/^	INT32 vibCnt;$/;"	m	struct:fm_opl_f
vibIncr	Engine/Adlib/fmopl.cpp	/^static INT32 vibIncr;$/;"	v	file:
vibIncr	Engine/Adlib/fmopl.h	/^	INT32 vibIncr;$/;"	m	struct:fm_opl_f
vib_table	Engine/Adlib/fmopl.cpp	/^INT32  *vib_table;$/;"	v
vib_table	Engine/Adlib/fmopl.h	/^	INT32 *vib_table;$/;"	m	struct:fm_opl_f
viewClick	Basescape/PlaceFacilityState.cpp	/^void PlaceFacilityState::viewClick(Action *)$/;"	f	class:OpenXcom::PlaceFacilityState
viewClick	Basescape/PlaceLiftState.cpp	/^void PlaceLiftState::viewClick(Action *)$/;"	f	class:OpenXcom::PlaceLiftState
viewClick	Basescape/PlaceStartFacilityState.cpp	/^void PlaceStartFacilityState::viewClick(Action *)$/;"	f	class:OpenXcom::PlaceStartFacilityState
viewLeftClick	Basescape/BasescapeState.cpp	/^void BasescapeState::viewLeftClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
viewMiddleClick	Basescape/BasescapeState.cpp	/^void BasescapeState::viewMiddleClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
viewMouseOut	Basescape/BasescapeState.cpp	/^void BasescapeState::viewMouseOut(Action *)$/;"	f	class:OpenXcom::BasescapeState
viewMouseOver	Basescape/BasescapeState.cpp	/^void BasescapeState::viewMouseOver(Action *)$/;"	f	class:OpenXcom::BasescapeState
viewRightClick	Basescape/BasescapeState.cpp	/^void BasescapeState::viewRightClick(Action *)$/;"	f	class:OpenXcom::BasescapeState
vipInEntrance	Battlescape/BattlescapeGame.h	/^	int vipInEntrance = 0;$/;"	m	struct:OpenXcom::BattlescapeTally
vipInExit	Battlescape/BattlescapeGame.h	/^	int vipInExit = 0;$/;"	m	struct:OpenXcom::BattlescapeTally
vipInField	Battlescape/BattlescapeGame.h	/^	int vipInField = 0;$/;"	m	struct:OpenXcom::BattlescapeTally
visible	Battlescape/TileEngine.cpp	/^bool TileEngine::visible(BattleUnit *currentUnit, Tile *tile)$/;"	f	class:OpenXcom::TileEngine
volume	Engine/Adlib/adlplayer.cpp	/^	unsigned char	volume;$/;"	m	struct:struc_instruments	file:
volume	Engine/GMCat.cpp	/^static const unsigned int volume [0x80] = {$/;"	m	namespace:OpenXcom	file:
volume	Menu/VideoState.cpp	/^	int volume;$/;"	m	struct:OpenXcom::__anon11	file:
volumeExponent	Engine/Game.cpp	/^double Game::volumeExponent(int volume)$/;"	f	class:OpenXcom::Game
voxelCheck	Battlescape/TileEngine.cpp	/^VoxelType TileEngine::voxelCheck(Position voxel, BattleUnit *excludeUnit, bool excludeAllUnits, bool onlyVisible, BattleUnit *excludeAllBut)$/;"	f	class:OpenXcom::TileEngine
voxelCheckFlush	Battlescape/TileEngine.cpp	/^void TileEngine::voxelCheckFlush()$/;"	f	class:OpenXcom::TileEngine
voxelTileCenter	Battlescape/TileEngine.cpp	/^constexpr Position TileEngine::voxelTileCenter;$/;"	m	class:OpenXcom::TileEngine	file:
voxelTileCenter	Battlescape/TileEngine.h	/^	static constexpr Position voxelTileCenter = { Position::TileXY \/ 2, Position::TileXY \/ 2, Position::TileZ \/ 2 };$/;"	m	class:OpenXcom::TileEngine
voxelTileSize	Battlescape/TileEngine.cpp	/^constexpr Position TileEngine::voxelTileSize;$/;"	m	class:OpenXcom::TileEngine	file:
voxelTileSize	Battlescape/TileEngine.h	/^	static constexpr Position voxelTileSize = { Position::TileXY, Position::TileXY, Position::TileZ };$/;"	m	class:OpenXcom::TileEngine
w	Mod/RuleInterface.h	/^	int x, y, w, h, color, color2, border, custom;$/;"	m	struct:OpenXcom::Element
w	Mod/RuleVideo.h	/^	int w, h, x, y, color; \/\/ caption rect and color info$/;"	m	struct:OpenXcom::SlideshowSlide
waitForNextFrame	Engine/FlcPlayer.cpp	/^void FlcPlayer::waitForNextFrame(Uint32 delay)$/;"	f	class:OpenXcom::FlcPlayer
waitIfOutsideWeaponRange	Mod/Unit.h	/^	bool waitIfOutsideWeaponRange() { return _waitIfOutsideWeaponRange; };$/;"	f	class:OpenXcom::Unit
wantsToSurrender	Savegame/BattleUnit.cpp	/^bool BattleUnit::wantsToSurrender() const$/;"	f	class:OpenXcom::BattleUnit
warning	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::warning(const std::string &message)$/;"	f	class:OpenXcom::BattlescapeState
warningLongRaw	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::warningLongRaw(const std::string &message)$/;"	f	class:OpenXcom::BattlescapeState
warningRaw	Battlescape/BattlescapeState.cpp	/^void BattlescapeState::warningRaw(const std::string &message)$/;"	f	class:OpenXcom::BattlescapeState
wasEventGenerated	Savegame/SavedGame.cpp	/^bool SavedGame::wasEventGenerated(const std::string& eventName)$/;"	f	class:OpenXcom::SavedGame
wasMeleeAttackedBy	Savegame/BattleUnit.cpp	/^bool BattleUnit::wasMeleeAttackedBy(int attackerId) const$/;"	f	class:OpenXcom::BattleUnit
wasResearchPopped	Savegame/SavedGame.cpp	/^bool SavedGame::wasResearchPopped(const RuleResearch* research)$/;"	f	class:OpenXcom::SavedGame
wasSkipped	Engine/FlcPlayer.cpp	/^bool FlcPlayer::wasSkipped()$/;"	f	class:OpenXcom::FlcPlayer
wasUnconcious	Savegame/BattleUnitStatistics.h	/^	bool wasUnconcious;                  \/\/\/< Tracks if the soldier fell unconscious$/;"	m	struct:OpenXcom::BattleUnitStatistics
wavegen_rect_h	Engine/Script.cpp	/^static inline RetEnum wavegen_rect_h(int& reg, const int& period, const int& size, const int& max)$/;"	f	namespace:OpenXcom
wavegen_saw_h	Engine/Script.cpp	/^static inline RetEnum wavegen_saw_h(int& reg, const int& period, const int& size, const int& max)$/;"	f	namespace:OpenXcom
wavegen_tri_h	Engine/Script.cpp	/^static inline RetEnum wavegen_tri_h(int& reg, const int& period, const int& size, const int& max)$/;"	f	namespace:OpenXcom
wavesel	Engine/Adlib/fmopl.h	/^	UINT8 wavesel;$/;"	m	struct:fm_opl_f
wavetable	Engine/Adlib/fmopl.h	/^	INT32 **wavetable;$/;"	m	struct:fm_opl_slot
wayPointAction	Battlescape/AIModule.cpp	/^void AIModule::wayPointAction()$/;"	f	class:OpenXcom::AIModule
waypoints	Battlescape/BattlescapeGame.h	/^	std::list<Position> waypoints;$/;"	m	struct:OpenXcom::BattleAction
weapon	Battlescape/BattlescapeGame.h	/^	BattleItem *weapon = nullptr;$/;"	m	struct:OpenXcom::BattleActionCost
weapon	Battlescape/TileEngine.h	/^		BattleItem *weapon;$/;"	m	struct:OpenXcom::TileEngine::ReactionScore
weapon	Mod/ArticleDefinition.h	/^		std::string weapon;$/;"	m	class:OpenXcom::ArticleDefinitionTFTD
weapon	Mod/ArticleDefinition.h	/^		std::string weapon;$/;"	m	class:OpenXcom::ArticleDefinitionVehicle
weapon	Savegame/BattleUnitStatistics.h	/^	std::string type, rank, race, weapon, weaponAmmo;$/;"	m	struct:OpenXcom::BattleUnitKills
weaponAmmo	Savegame/BattleUnitStatistics.h	/^	std::string type, rank, race, weapon, weaponAmmo;$/;"	m	struct:OpenXcom::BattleUnitKills
weaponClick	Geoscape/DogfightState.cpp	/^void DogfightState::weaponClick(Action * a)$/;"	f	class:OpenXcom::DogfightState
weaponOrAmmo	Mod/RuleEnviroEffects.h	/^	std::string weaponOrAmmo;$/;"	m	struct:OpenXcom::EnvironmentalCondition
weaponSelfDestruction	Engine/Options.inc.h	/^OPT bool includePrimeStateInSavedLayout, anytimePsiTraining, weaponSelfDestruction, retainCorpses, craftLaunchAlways, globeSeasons, globeDetail, globeRadarLines, globeFlightPaths, globeAllRadarsOnBaseBuild,$/;"	v
weapon_item	Mod/RuleItem.h	/^	BattleItem *weapon_item = nullptr;$/;"	m	struct:OpenXcom::BattleActionAttack
weapon_item	Mod/RuleItem.h	/^	const BattleItem *weapon_item = nullptr;$/;"	m	struct:OpenXcom::helper::BattleActionAttackReadOnlyImpl
weight	Mod/Texture.h	/^	int weight;$/;"	m	struct:OpenXcom::TerrainCriteria
weight	lodepng.cpp	/^  int weight; \/*the sum of all weights in this chain*\/$/;"	m	struct:BPMNode	file:
width	Engine/Font.h	/^	int width, height, spacing;$/;"	m	struct:OpenXcom::FontImage
width	Engine/Surface.h	/^	SurfaceRaw(Pixel (&buffer)[I], int width, int height) : SurfaceRaw{ buffer, width, height, static_cast<Uint16>(width*sizeof(Pixel)) }$/;"	m	class:OpenXcom::SurfaceRaw
width	Mod/ArticleDefinition.h	/^		int width;$/;"	m	class:OpenXcom::ArticleDefinitionRect
windowedModePositionX	Engine/Options.inc.h	/^	soundVolume, musicVolume, uiVolume, audioSampleRate, audioBitDepth, audioChunkSize, pauseMode, windowedModePositionX, windowedModePositionY, FPS, FPSInactive,$/;"	v
windowedModePositionY	Engine/Options.inc.h	/^	soundVolume, musicVolume, uiVolume, audioSampleRate, audioBitDepth, audioChunkSize, pauseMode, windowedModePositionX, windowedModePositionY, FPS, FPSInactive,$/;"	v
windowsize	lodepng.h	/^  unsigned windowsize; \/*must be a power of two <= 32768. higher compresses more but is slower. Default value: 2048.*\/$/;"	m	struct:LodePNGCompressSettings
wordwrap	Engine/Options.inc.h	/^OPT TextWrapping wordwrap;$/;"	v
worthTaking	Battlescape/BattlescapeGame.cpp	/^bool BattlescapeGame::worthTaking(BattleItem* item, BattleAction *action, bool pickUpWeaponsMoreActively)$/;"	f	class:OpenXcom::BattlescapeGame
woundRecoveryStat	Basescape/SoldierSortUtil.cpp	/^int OpenXcom::woundRecoveryStat(Game *game, Soldier *s)$/;"	f	class:OpenXcom
woundsHealed	Savegame/BattleUnitStatistics.h	/^	int woundsHealed;                    \/\/\/< Tracks how many times a fatal wound was healed by this unit$/;"	m	struct:OpenXcom::BattleUnitStatistics
writeFile	Engine/CrossPlatform.cpp	/^bool writeFile(const std::string& filename, const std::string& data) {$/;"	f	namespace:OpenXcom::CrossPlatform
writeFile	Engine/CrossPlatform.cpp	/^bool writeFile(const std::string& filename, const std::vector<unsigned char>& data) {$/;"	f	namespace:OpenXcom::CrossPlatform
writeLZ77data	lodepng.cpp	/^static void writeLZ77data(size_t* bp, ucvector* out, const uivector* lz77_encoded,$/;"	f	file:
writeNode	Engine/Options.cpp	/^void writeNode(const YAML::Node& node, YAML::Emitter& emitter)$/;"	f	namespace:OpenXcom::Options
writeSignature	lodepng.cpp	/^static void writeSignature(ucvector* out)$/;"	f	file:
writeWAV	Engine/SoundSet.cpp	/^void SoundSet::writeWAV(SDL_RWops *dest, Uint8 *sound, size_t size, bool resample) const {$/;"	f	class:OpenXcom::SoundSet
x	Battlescape/Position.h	/^	Sint16 x, y, z;$/;"	m	class:OpenXcom::Position
x	Engine/RNG.cpp	/^RandomState x;$/;"	m	namespace:OpenXcom::RNG	file:
x	Geoscape/Cord.h	/^	double x, y, z;$/;"	m	struct:OpenXcom::Cord
x	Mod/ArticleDefinition.h	/^		int x;$/;"	m	class:OpenXcom::ArticleDefinitionRect
x	Mod/RuleInterface.h	/^	int x, y, w, h, color, color2, border, custom;$/;"	m	struct:OpenXcom::Element
x	Mod/RuleInventory.h	/^	int x, y;$/;"	m	struct:OpenXcom::RuleSlot
x	Mod/RuleVideo.h	/^	int w, h, x, y, color; \/\/ caption rect and color info$/;"	m	struct:OpenXcom::SlideshowSlide
x_seedless	Engine/RNG.cpp	/^RandomState x_seedless;$/;"	m	namespace:OpenXcom::RNG	file:
xbrz	Engine/Scalers/config.h	/^namespace xbrz$/;"	n
xbrz	Engine/Scalers/xbrz.h	/^namespace xbrz$/;"	n
xcomAltitudes	Savegame/SaveConverter.cpp	/^const char *xcomAltitudes[] = { "STR_GROUND", "STR_VERY_LOW", "STR_LOW_UC", "STR_HIGH_UC", "STR_VERY_HIGH" };$/;"	m	namespace:OpenXcom	file:
xcomStatus	Savegame/SaveConverter.cpp	/^const char *xcomStatus[] = { "STR_READY", "STR_OUT", "STR_REPAIRS", "STR_REFUELLING", "STR_REARMING" };$/;"	m	namespace:OpenXcom	file:
y	Battlescape/Position.h	/^	Sint16 x, y, z;$/;"	m	class:OpenXcom::Position
y	Geoscape/Cord.h	/^	double x, y, z;$/;"	m	struct:OpenXcom::Cord
y	Mod/ArticleDefinition.h	/^		int y;$/;"	m	class:OpenXcom::ArticleDefinitionRect
y	Mod/RuleInterface.h	/^	int x, y, w, h, color, color2, border, custom;$/;"	m	struct:OpenXcom::Element
y	Mod/RuleInventory.h	/^	int x, y;$/;"	m	struct:OpenXcom::RuleSlot
y	Mod/RuleVideo.h	/^	int w, h, x, y, color; \/\/ caption rect and color info$/;"	m	struct:OpenXcom::SlideshowSlide
year	lodepng.h	/^  unsigned year;    \/*2 bytes used (0-65535)*\/$/;"	m	struct:LodePNGTime
yellow	Battlescape/Pathfinding.cpp	/^int Pathfinding::yellow = 10;$/;"	m	class:OpenXcom::Pathfinding	file:
yellow	Battlescape/Pathfinding.h	/^	static int yellow;$/;"	m	class:OpenXcom::Pathfinding
yuv_diff	Engine/Scalers/common.h	/^static inline int yuv_diff(uint32_t yuv1, uint32_t yuv2) {$/;"	f
z	Battlescape/Position.h	/^	Sint16 x, y, z;$/;"	m	class:OpenXcom::Position
z	Geoscape/Cord.h	/^	double x, y, z;$/;"	m	struct:OpenXcom::Cord
zeros	lodepng.cpp	/^  unsigned short* zeros; \/*length of zeros streak, used as a second hash chain*\/$/;"	m	struct:Hash	file:
zip	Engine/Collections.h	/^	static Range<ZipIterator<ItA, ItB>> zip(Range<ItA> a, Range<ItB> b)$/;"	f	class:OpenXcom::Collections
zip	Engine/FileMap.h	/^		void *zip; 				\/\/ borrowed reference\/weakref. NOTNULL:$/;"	m	struct:OpenXcom::FileMap::FileRecord
zipGetFileByName	Engine/FileMap.cpp	/^SDL_RWops *zipGetFileByName(const std::string& zipfile, const std::string& fullpath) {$/;"	f	namespace:OpenXcom::FileMap
zlib_compress	lodepng.cpp	/^static unsigned zlib_compress(unsigned char** out, size_t* outsize, const unsigned char* in,$/;"	f	file:
zlib_decompress	lodepng.cpp	/^static unsigned zlib_decompress(unsigned char** out, size_t* outsize, const unsigned char* in,$/;"	f	file:
zlibsettings	lodepng.h	/^  LodePNGCompressSettings zlibsettings; \/*settings for the zlib encoder, such as window size, ...*\/$/;"	m	struct:LodePNGEncoderSettings
zlibsettings	lodepng.h	/^  LodePNGDecompressSettings zlibsettings; \/*in here is the setting to ignore Adler32 checksums*\/$/;"	m	struct:LodePNGDecoderSettings
zone	Mod/UfoTrajectory.h	/^	size_t zone;$/;"	m	struct:OpenXcom::TrajectoryWaypoint
zoomDogfightIn	Geoscape/Globe.cpp	/^bool Globe::zoomDogfightIn()$/;"	f	class:OpenXcom::Globe
zoomDogfightOut	Geoscape/Globe.cpp	/^bool Globe::zoomDogfightOut()$/;"	f	class:OpenXcom::Globe
zoomIn	Geoscape/Globe.cpp	/^void Globe::zoomIn()$/;"	f	class:OpenXcom::Globe
zoomInEffect	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::zoomInEffect()$/;"	f	class:OpenXcom::GeoscapeState
zoomMax	Geoscape/Globe.cpp	/^void Globe::zoomMax()$/;"	f	class:OpenXcom::Globe
zoomMin	Geoscape/Globe.cpp	/^void Globe::zoomMin()$/;"	f	class:OpenXcom::Globe
zoomOut	Geoscape/Globe.cpp	/^void Globe::zoomOut()$/;"	f	class:OpenXcom::Globe
zoomOutEffect	Geoscape/GeoscapeState.cpp	/^void GeoscapeState::zoomOutEffect()$/;"	f	class:OpenXcom::GeoscapeState
~AIModule	Battlescape/AIModule.cpp	/^AIModule::~AIModule()$/;"	f	class:OpenXcom::AIModule
~AbandonGameState	Menu/AbandonGameState.cpp	/^AbandonGameState::~AbandonGameState()$/;"	f	class:OpenXcom::AbandonGameState
~AbortMissionState	Battlescape/AbortMissionState.cpp	/^AbortMissionState::~AbortMissionState()$/;"	f	class:OpenXcom::AbortMissionState
~Action	Engine/Action.cpp	/^Action::~Action()$/;"	f	class:OpenXcom::Action
~ActionMenuItem	Battlescape/ActionMenuItem.cpp	/^ActionMenuItem::~ActionMenuItem()$/;"	f	class:OpenXcom::ActionMenuItem
~ActionMenuState	Battlescape/ActionMenuState.cpp	/^ActionMenuState::~ActionMenuState()$/;"	f	class:OpenXcom::ActionMenuState
~AdlibMusic	Engine/AdlibMusic.cpp	/^AdlibMusic::~AdlibMusic()$/;"	f	class:OpenXcom::AdlibMusic
~AlienBase	Savegame/AlienBase.cpp	/^AlienBase::~AlienBase()$/;"	f	class:OpenXcom::AlienBase
~AlienBaseState	Geoscape/AlienBaseState.cpp	/^AlienBaseState::~AlienBaseState()$/;"	f	class:OpenXcom::AlienBaseState
~AlienDeployment	Mod/AlienDeployment.cpp	/^AlienDeployment::~AlienDeployment()$/;"	f	class:OpenXcom::AlienDeployment
~AlienInventory	Battlescape/AlienInventory.cpp	/^AlienInventory::~AlienInventory()$/;"	f	class:OpenXcom::AlienInventory
~AlienInventoryState	Battlescape/AlienInventoryState.cpp	/^AlienInventoryState::~AlienInventoryState()$/;"	f	class:OpenXcom::AlienInventoryState
~AlienMission	Savegame/AlienMission.cpp	/^AlienMission::~AlienMission()$/;"	f	class:OpenXcom::AlienMission
~AlienRace	Mod/AlienRace.cpp	/^AlienRace::~AlienRace()$/;"	f	class:OpenXcom::AlienRace
~AlienStrategy	Savegame/AlienStrategy.cpp	/^AlienStrategy::~AlienStrategy()$/;"	f	class:OpenXcom::AlienStrategy
~AliensCrashState	Battlescape/AliensCrashState.cpp	/^AliensCrashState::~AliensCrashState()$/;"	f	class:OpenXcom::AliensCrashState
~AllocatePsiTrainingState	Geoscape/AllocatePsiTrainingState.cpp	/^AllocatePsiTrainingState::~AllocatePsiTrainingState()$/;"	f	class:OpenXcom::AllocatePsiTrainingState
~AllocateTrainingState	Geoscape/AllocateTrainingState.cpp	/^AllocateTrainingState::~AllocateTrainingState()$/;"	f	class:OpenXcom::AllocateTrainingState
~Armor	Mod/Armor.cpp	/^Armor::~Armor()$/;"	f	class:OpenXcom::Armor
~ArrowButton	Interface/ArrowButton.cpp	/^ArrowButton::~ArrowButton()$/;"	f	class:OpenXcom::ArrowButton
~ArticleDefinition	Mod/ArticleDefinition.cpp	/^	ArticleDefinition::~ArticleDefinition()$/;"	f	class:OpenXcom::ArticleDefinition
~ArticleState	Ufopaedia/ArticleState.cpp	/^	ArticleState::~ArticleState()$/;"	f	class:OpenXcom::ArticleState
~ArticleStateArmor	Ufopaedia/ArticleStateArmor.cpp	/^	ArticleStateArmor::~ArticleStateArmor()$/;"	f	class:OpenXcom::ArticleStateArmor
~ArticleStateBaseFacility	Ufopaedia/ArticleStateBaseFacility.cpp	/^	ArticleStateBaseFacility::~ArticleStateBaseFacility()$/;"	f	class:OpenXcom::ArticleStateBaseFacility
~ArticleStateCraft	Ufopaedia/ArticleStateCraft.cpp	/^	ArticleStateCraft::~ArticleStateCraft()$/;"	f	class:OpenXcom::ArticleStateCraft
~ArticleStateCraftWeapon	Ufopaedia/ArticleStateCraftWeapon.cpp	/^	ArticleStateCraftWeapon::~ArticleStateCraftWeapon()$/;"	f	class:OpenXcom::ArticleStateCraftWeapon
~ArticleStateItem	Ufopaedia/ArticleStateItem.cpp	/^	ArticleStateItem::~ArticleStateItem()$/;"	f	class:OpenXcom::ArticleStateItem
~ArticleStateTFTD	Ufopaedia/ArticleStateTFTD.cpp	/^	ArticleStateTFTD::~ArticleStateTFTD()$/;"	f	class:OpenXcom::ArticleStateTFTD
~ArticleStateTFTDArmor	Ufopaedia/ArticleStateTFTDArmor.cpp	/^	ArticleStateTFTDArmor::~ArticleStateTFTDArmor()$/;"	f	class:OpenXcom::ArticleStateTFTDArmor
~ArticleStateTFTDCraft	Ufopaedia/ArticleStateTFTDCraft.cpp	/^	ArticleStateTFTDCraft::~ArticleStateTFTDCraft()$/;"	f	class:OpenXcom::ArticleStateTFTDCraft
~ArticleStateTFTDCraftWeapon	Ufopaedia/ArticleStateTFTDCraftWeapon.cpp	/^	ArticleStateTFTDCraftWeapon::~ArticleStateTFTDCraftWeapon()$/;"	f	class:OpenXcom::ArticleStateTFTDCraftWeapon
~ArticleStateTFTDFacility	Ufopaedia/ArticleStateTFTDFacility.cpp	/^	ArticleStateTFTDFacility::~ArticleStateTFTDFacility()$/;"	f	class:OpenXcom::ArticleStateTFTDFacility
~ArticleStateTFTDItem	Ufopaedia/ArticleStateTFTDItem.cpp	/^	ArticleStateTFTDItem::~ArticleStateTFTDItem()$/;"	f	class:OpenXcom::ArticleStateTFTDItem
~ArticleStateTFTDUso	Ufopaedia/ArticleStateTFTDUso.cpp	/^	ArticleStateTFTDUso::~ArticleStateTFTDUso()$/;"	f	class:OpenXcom::ArticleStateTFTDUso
~ArticleStateTFTDVehicle	Ufopaedia/ArticleStateTFTDVehicle.cpp	/^	ArticleStateTFTDVehicle::~ArticleStateTFTDVehicle()$/;"	f	class:OpenXcom::ArticleStateTFTDVehicle
~ArticleStateText	Ufopaedia/ArticleStateText.cpp	/^	ArticleStateText::~ArticleStateText()$/;"	f	class:OpenXcom::ArticleStateText
~ArticleStateTextImage	Ufopaedia/ArticleStateTextImage.cpp	/^	ArticleStateTextImage::~ArticleStateTextImage()$/;"	f	class:OpenXcom::ArticleStateTextImage
~ArticleStateUfo	Ufopaedia/ArticleStateUfo.cpp	/^	ArticleStateUfo::~ArticleStateUfo()$/;"	f	class:OpenXcom::ArticleStateUfo
~ArticleStateVehicle	Ufopaedia/ArticleStateVehicle.cpp	/^	ArticleStateVehicle::~ArticleStateVehicle()$/;"	f	class:OpenXcom::ArticleStateVehicle
~Bar	Interface/Bar.cpp	/^Bar::~Bar()$/;"	f	class:OpenXcom::Bar
~Base	Savegame/Base.cpp	/^Base::~Base()$/;"	f	class:OpenXcom::Base
~BaseDefenseState	Geoscape/BaseDefenseState.cpp	/^BaseDefenseState::~BaseDefenseState()$/;"	f	class:OpenXcom::BaseDefenseState
~BaseDestroyedState	Geoscape/BaseDestroyedState.cpp	/^BaseDestroyedState::~BaseDestroyedState()$/;"	f	class:OpenXcom::BaseDestroyedState
~BaseFacility	Savegame/BaseFacility.cpp	/^BaseFacility::~BaseFacility()$/;"	f	class:OpenXcom::BaseFacility
~BaseInfoState	Basescape/BaseInfoState.cpp	/^BaseInfoState::~BaseInfoState()$/;"	f	class:OpenXcom::BaseInfoState
~BaseNameState	Geoscape/BaseNameState.cpp	/^BaseNameState::~BaseNameState()$/;"	f	class:OpenXcom::BaseNameState
~BaseView	Basescape/BaseView.cpp	/^BaseView::~BaseView()$/;"	f	class:OpenXcom::BaseView
~BasescapeState	Basescape/BasescapeState.cpp	/^BasescapeState::~BasescapeState()$/;"	f	class:OpenXcom::BasescapeState
~BattleItem	Savegame/BattleItem.cpp	/^BattleItem::~BattleItem()$/;"	f	class:OpenXcom::BattleItem
~BattleState	Battlescape/BattleState.cpp	/^BattleState::~BattleState()$/;"	f	class:OpenXcom::BattleState
~BattleUnit	Savegame/BattleUnit.cpp	/^BattleUnit::~BattleUnit()$/;"	f	class:OpenXcom::BattleUnit
~BattleUnitKills	Savegame/BattleUnitStatistics.h	/^	~BattleUnitKills() { }$/;"	f	struct:OpenXcom::BattleUnitKills
~BattleUnitStatistics	Savegame/BattleUnitStatistics.h	/^	~BattleUnitStatistics() { }$/;"	f	struct:OpenXcom::BattleUnitStatistics
~BattlescapeButton	Interface/BattlescapeButton.cpp	/^BattlescapeButton::~BattlescapeButton()$/;"	f	class:OpenXcom::BattlescapeButton
~BattlescapeGame	Battlescape/BattlescapeGame.cpp	/^BattlescapeGame::~BattlescapeGame()$/;"	f	class:OpenXcom::BattlescapeGame
~BattlescapeGenerator	Battlescape/BattlescapeGenerator.cpp	/^BattlescapeGenerator::~BattlescapeGenerator()$/;"	f	class:OpenXcom::BattlescapeGenerator
~BattlescapeMessage	Battlescape/BattlescapeMessage.cpp	/^BattlescapeMessage::~BattlescapeMessage()$/;"	f	class:OpenXcom::BattlescapeMessage
~BattlescapeState	Battlescape/BattlescapeState.cpp	/^BattlescapeState::~BattlescapeState()$/;"	f	class:OpenXcom::BattlescapeState
~BriefingLightState	Battlescape/BriefingLightState.cpp	/^BriefingLightState::~BriefingLightState()$/;"	f	class:OpenXcom::BriefingLightState
~BriefingState	Battlescape/BriefingState.cpp	/^BriefingState::~BriefingState()$/;"	f	class:OpenXcom::BriefingState
~BuildFacilitiesState	Basescape/BuildFacilitiesState.cpp	/^BuildFacilitiesState::~BuildFacilitiesState()$/;"	f	class:OpenXcom::BuildFacilitiesState
~BuildNewBaseState	Geoscape/BuildNewBaseState.cpp	/^BuildNewBaseState::~BuildNewBaseState()$/;"	f	class:OpenXcom::BuildNewBaseState
~Camera	Battlescape/Camera.cpp	/^Camera::~Camera()$/;"	f	class:OpenXcom::Camera
~CannotReequipState	Battlescape/CannotReequipState.cpp	/^CannotReequipState::~CannotReequipState()$/;"	f	class:OpenXcom::CannotReequipState
~CatFile	Engine/CatFile.cpp	/^CatFile::~CatFile()$/;"	f	class:OpenXcom::CatFile
~City	Mod/City.cpp	/^City::~City()$/;"	f	class:OpenXcom::City
~ComboBox	Interface/ComboBox.cpp	/^ComboBox::~ComboBox()$/;"	f	class:OpenXcom::ComboBox
~CommendationLateState	Battlescape/CommendationLateState.cpp	/^CommendationLateState::~CommendationLateState()$/;"	f	class:OpenXcom::CommendationLateState
~CommendationState	Battlescape/CommendationState.cpp	/^CommendationState::~CommendationState()$/;"	f	class:OpenXcom::CommendationState
~ConfirmCydoniaState	Geoscape/ConfirmCydoniaState.cpp	/^ConfirmCydoniaState::~ConfirmCydoniaState()$/;"	f	class:OpenXcom::ConfirmCydoniaState
~ConfirmDestinationState	Geoscape/ConfirmDestinationState.cpp	/^ConfirmDestinationState::~ConfirmDestinationState()$/;"	f	class:OpenXcom::ConfirmDestinationState
~ConfirmEndMissionState	Battlescape/ConfirmEndMissionState.cpp	/^ConfirmEndMissionState::~ConfirmEndMissionState()$/;"	f	class:OpenXcom::ConfirmEndMissionState
~ConfirmLandingState	Geoscape/ConfirmLandingState.cpp	/^ConfirmLandingState::~ConfirmLandingState()$/;"	f	class:OpenXcom::ConfirmLandingState
~ConfirmLoadState	Menu/ConfirmLoadState.cpp	/^ConfirmLoadState::~ConfirmLoadState()$/;"	f	class:OpenXcom::ConfirmLoadState
~ConfirmNewBaseState	Geoscape/ConfirmNewBaseState.cpp	/^ConfirmNewBaseState::~ConfirmNewBaseState()$/;"	f	class:OpenXcom::ConfirmNewBaseState
~Country	Savegame/Country.cpp	/^Country::~Country()$/;"	f	class:OpenXcom::Country
~Craft	Savegame/Craft.cpp	/^Craft::~Craft()$/;"	f	class:OpenXcom::Craft
~CraftArmorState	Basescape/CraftArmorState.cpp	/^CraftArmorState::~CraftArmorState()$/;"	f	class:OpenXcom::CraftArmorState
~CraftEquipmentLoadState	Basescape/CraftEquipmentLoadState.cpp	/^CraftEquipmentLoadState::~CraftEquipmentLoadState()$/;"	f	class:OpenXcom::CraftEquipmentLoadState
~CraftEquipmentSaveState	Basescape/CraftEquipmentSaveState.cpp	/^CraftEquipmentSaveState::~CraftEquipmentSaveState()$/;"	f	class:OpenXcom::CraftEquipmentSaveState
~CraftEquipmentState	Basescape/CraftEquipmentState.cpp	/^CraftEquipmentState::~CraftEquipmentState()$/;"	f	class:OpenXcom::CraftEquipmentState
~CraftErrorState	Geoscape/CraftErrorState.cpp	/^CraftErrorState::~CraftErrorState()$/;"	f	class:OpenXcom::CraftErrorState
~CraftInfoState	Basescape/CraftInfoState.cpp	/^CraftInfoState::~CraftInfoState()$/;"	f	class:OpenXcom::CraftInfoState
~CraftNotEnoughPilotsState	Geoscape/CraftNotEnoughPilotsState.cpp	/^CraftNotEnoughPilotsState::~CraftNotEnoughPilotsState()$/;"	f	class:OpenXcom::CraftNotEnoughPilotsState
~CraftPatrolState	Geoscape/CraftPatrolState.cpp	/^CraftPatrolState::~CraftPatrolState()$/;"	f	class:OpenXcom::CraftPatrolState
~CraftPilotSelectState	Basescape/CraftPilotSelectState.cpp	/^CraftPilotSelectState::~CraftPilotSelectState()$/;"	f	class:OpenXcom::CraftPilotSelectState
~CraftPilotsState	Basescape/CraftPilotsState.cpp	/^CraftPilotsState::~CraftPilotsState()$/;"	f	class:OpenXcom::CraftPilotsState
~CraftSoldiersState	Basescape/CraftSoldiersState.cpp	/^CraftSoldiersState::~CraftSoldiersState()$/;"	f	class:OpenXcom::CraftSoldiersState
~CraftWeapon	Savegame/CraftWeapon.cpp	/^CraftWeapon::~CraftWeapon()$/;"	f	class:OpenXcom::CraftWeapon
~CraftWeaponProjectile	Savegame/CraftWeaponProjectile.cpp	/^CraftWeaponProjectile::~CraftWeaponProjectile(void)$/;"	f	class:OpenXcom::CraftWeaponProjectile
~CraftWeaponsState	Basescape/CraftWeaponsState.cpp	/^CraftWeaponsState::~CraftWeaponsState()$/;"	f	class:OpenXcom::CraftWeaponsState
~CraftsState	Basescape/CraftsState.cpp	/^CraftsState::~CraftsState()$/;"	f	class:OpenXcom::CraftsState
~Cursor	Interface/Cursor.cpp	/^Cursor::~Cursor()$/;"	f	class:OpenXcom::Cursor
~CustomPalettes	Mod/CustomPalettes.cpp	/^CustomPalettes::~CustomPalettes()$/;"	f	class:OpenXcom::CustomPalettes
~CutsceneState	Menu/CutsceneState.cpp	/^CutsceneState::~CutsceneState()$/;"	f	class:OpenXcom::CutsceneState
~DebriefingState	Battlescape/DebriefingState.cpp	/^DebriefingState::~DebriefingState()$/;"	f	class:OpenXcom::DebriefingState
~DeleteGameState	Menu/DeleteGameState.cpp	/^DeleteGameState::~DeleteGameState()$/;"	f	class:OpenXcom::DeleteGameState
~DismantleFacilityState	Basescape/DismantleFacilityState.cpp	/^DismantleFacilityState::~DismantleFacilityState()$/;"	f	class:OpenXcom::DismantleFacilityState
~DogfightErrorState	Geoscape/DogfightErrorState.cpp	/^DogfightErrorState::~DogfightErrorState()$/;"	f	class:OpenXcom::DogfightErrorState
~DogfightState	Geoscape/DogfightState.cpp	/^DogfightState::~DogfightState()$/;"	f	class:OpenXcom::DogfightState
~EquipmentLayoutItem	Savegame/EquipmentLayoutItem.cpp	/^EquipmentLayoutItem::~EquipmentLayoutItem()$/;"	f	class:OpenXcom::EquipmentLayoutItem
~ErrorMessageState	Menu/ErrorMessageState.cpp	/^ErrorMessageState::~ErrorMessageState()$/;"	f	class:OpenXcom::ErrorMessageState
~Explosion	Battlescape/Explosion.cpp	/^Explosion::~Explosion()$/;"	f	class:OpenXcom::Explosion
~ExplosionBState	Battlescape/ExplosionBState.cpp	/^ExplosionBState::~ExplosionBState()$/;"	f	class:OpenXcom::ExplosionBState
~ExtraSounds	Mod/ExtraSounds.cpp	/^ExtraSounds::~ExtraSounds()$/;"	f	class:OpenXcom::ExtraSounds
~ExtraSprites	Mod/ExtraSprites.cpp	/^ExtraSprites::~ExtraSprites()$/;"	f	class:OpenXcom::ExtraSprites
~ExtraStrings	Mod/ExtraStrings.cpp	/^ExtraStrings::~ExtraStrings()$/;"	f	class:OpenXcom::ExtraStrings
~FastLineClip	Engine/FastLineClip.h	/^	~FastLineClip() {};$/;"	f	class:OpenXcom::FastLineClip
~FlcPlayer	Engine/FlcPlayer.cpp	/^FlcPlayer::~FlcPlayer()$/;"	f	class:OpenXcom::FlcPlayer
~Font	Engine/Font.cpp	/^Font::~Font()$/;"	f	class:OpenXcom::Font
~FpsCounter	Interface/FpsCounter.cpp	/^FpsCounter::~FpsCounter()$/;"	f	class:OpenXcom::FpsCounter
~Frame	Interface/Frame.cpp	/^Frame::~Frame()$/;"	f	class:OpenXcom::Frame
~FundingState	Geoscape/FundingState.cpp	/^FundingState::~FundingState()$/;"	f	class:OpenXcom::FundingState
~Game	Engine/Game.cpp	/^Game::~Game()$/;"	f	class:OpenXcom::Game
~GameTime	Savegame/GameTime.cpp	/^GameTime::~GameTime()$/;"	f	class:OpenXcom::GameTime
~GeoscapeCraftState	Geoscape/GeoscapeCraftState.cpp	/^GeoscapeCraftState::~GeoscapeCraftState()$/;"	f	class:OpenXcom::GeoscapeCraftState
~GeoscapeEvent	Savegame/GeoscapeEvent.cpp	/^GeoscapeEvent::~GeoscapeEvent()$/;"	f	class:OpenXcom::GeoscapeEvent
~GeoscapeEventState	Geoscape/GeoscapeEventState.cpp	/^GeoscapeEventState::~GeoscapeEventState()$/;"	f	class:OpenXcom::GeoscapeEventState
~GeoscapeState	Geoscape/GeoscapeState.cpp	/^GeoscapeState::~GeoscapeState()$/;"	f	class:OpenXcom::GeoscapeState
~GlobalManufactureState	Basescape/GlobalManufactureState.cpp	/^GlobalManufactureState::~GlobalManufactureState()$/;"	f	class:OpenXcom::GlobalManufactureState
~GlobalResearchState	Basescape/GlobalResearchState.cpp	/^GlobalResearchState::~GlobalResearchState()$/;"	f	class:OpenXcom::GlobalResearchState
~Globe	Geoscape/Globe.cpp	/^Globe::~Globe()$/;"	f	class:OpenXcom::Globe
~GoToMainMenuState	Menu/MainMenuState.cpp	/^GoToMainMenuState::~GoToMainMenuState()$/;"	f	class:OpenXcom::GoToMainMenuState
~GraphsState	Geoscape/GraphsState.cpp	/^GraphsState::~GraphsState()$/;"	f	class:OpenXcom::GraphsState
~ImageButton	Interface/ImageButton.cpp	/^ImageButton::~ImageButton()$/;"	f	class:OpenXcom::ImageButton
~InfoboxOKState	Battlescape/InfoboxOKState.cpp	/^InfoboxOKState::~InfoboxOKState()$/;"	f	class:OpenXcom::InfoboxOKState
~InfoboxState	Battlescape/InfoboxState.cpp	/^InfoboxState::~InfoboxState()$/;"	f	class:OpenXcom::InfoboxState
~InteractiveSurface	Engine/InteractiveSurface.cpp	/^InteractiveSurface::~InteractiveSurface()$/;"	f	class:OpenXcom::InteractiveSurface
~InterceptState	Geoscape/InterceptState.cpp	/^InterceptState::~InterceptState()$/;"	f	class:OpenXcom::InterceptState
~Inventory	Battlescape/Inventory.cpp	/^Inventory::~Inventory()$/;"	f	class:OpenXcom::Inventory
~InventoryLoadState	Battlescape/InventoryLoadState.cpp	/^InventoryLoadState::~InventoryLoadState()$/;"	f	class:OpenXcom::InventoryLoadState
~InventorySaveState	Battlescape/InventorySaveState.cpp	/^InventorySaveState::~InventorySaveState()$/;"	f	class:OpenXcom::InventorySaveState
~InventoryState	Battlescape/InventoryState.cpp	/^InventoryState::~InventoryState()$/;"	f	class:OpenXcom::InventoryState
~ItemContainer	Savegame/ItemContainer.cpp	/^ItemContainer::~ItemContainer()$/;"	f	class:OpenXcom::ItemContainer
~ItemSprite	Battlescape/ItemSprite.cpp	/^ItemSprite::~ItemSprite()$/;"	f	class:OpenXcom::ItemSprite
~ItemsArrivingState	Geoscape/ItemsArrivingState.cpp	/^ItemsArrivingState::~ItemsArrivingState()$/;"	f	class:OpenXcom::ItemsArrivingState
~Language	Engine/Language.cpp	/^Language::~Language()$/;"	f	class:OpenXcom::Language
~LanguagePlurality	Engine/LanguagePlurality.h	/^	virtual ~LanguagePlurality() { \/* Empty by design. *\/ }$/;"	f	class:OpenXcom::LanguagePlurality
~ListGamesState	Menu/ListGamesState.cpp	/^ListGamesState::~ListGamesState()$/;"	f	class:OpenXcom::ListGamesState
~ListLoadOriginalState	Menu/ListLoadOriginalState.cpp	/^ListLoadOriginalState::~ListLoadOriginalState()$/;"	f	class:OpenXcom::ListLoadOriginalState
~ListLoadState	Menu/ListLoadState.cpp	/^ListLoadState::~ListLoadState()$/;"	f	class:OpenXcom::ListLoadState
~ListSaveState	Menu/ListSaveState.cpp	/^ListSaveState::~ListSaveState()$/;"	f	class:OpenXcom::ListSaveState
~LoadGameState	Menu/LoadGameState.cpp	/^LoadGameState::~LoadGameState()$/;"	f	class:OpenXcom::LoadGameState
~LodePNGState	lodepng.h	/^  virtual ~LodePNGState(){}$/;"	f	struct:LodePNGState
~Logger	Engine/Logger.h	/^	virtual ~Logger() { CrossPlatform::log(_level, os); };$/;"	f	class:OpenXcom::Logger
~LowFuelState	Geoscape/LowFuelState.cpp	/^LowFuelState::~LowFuelState()$/;"	f	class:OpenXcom::LowFuelState
~MCDPatch	Mod/MCDPatch.cpp	/^MCDPatch::~MCDPatch()$/;"	f	class:OpenXcom::MCDPatch
~MainMenuState	Menu/MainMenuState.cpp	/^MainMenuState::~MainMenuState()$/;"	f	class:OpenXcom::MainMenuState
~ManageAlienContainmentState	Basescape/ManageAlienContainmentState.cpp	/^ManageAlienContainmentState::~ManageAlienContainmentState()$/;"	f	class:OpenXcom::ManageAlienContainmentState
~ManufactureDependenciesTreeState	Basescape/ManufactureDependenciesTreeState.cpp	/^ManufactureDependenciesTreeState::~ManufactureDependenciesTreeState()$/;"	f	class:OpenXcom::ManufactureDependenciesTreeState
~ManufactureInfoState	Basescape/ManufactureInfoState.cpp	/^ManufactureInfoState::~ManufactureInfoState()$/;"	f	class:OpenXcom::ManufactureInfoState
~ManufactureState	Basescape/ManufactureState.cpp	/^ManufactureState::~ManufactureState()$/;"	f	class:OpenXcom::ManufactureState
~Map	Battlescape/Map.cpp	/^Map::~Map()$/;"	f	class:OpenXcom::Map
~MapBlock	Mod/MapBlock.cpp	/^MapBlock::~MapBlock()$/;"	f	class:OpenXcom::MapBlock
~MapData	Mod/MapData.cpp	/^MapData::~MapData()$/;"	f	class:OpenXcom::MapData
~MapDataSet	Mod/MapDataSet.cpp	/^MapDataSet::~MapDataSet()$/;"	f	class:OpenXcom::MapDataSet
~MapScript	Mod/MapScript.cpp	/^MapScript::~MapScript()$/;"	f	class:OpenXcom::MapScript
~MeleeAttackBState	Battlescape/MeleeAttackBState.cpp	/^MeleeAttackBState::~MeleeAttackBState()$/;"	f	class:OpenXcom::MeleeAttackBState
~MiniBaseView	Basescape/MiniBaseView.cpp	/^MiniBaseView::~MiniBaseView()$/;"	f	class:OpenXcom::MiniBaseView
~MiniMapState	Battlescape/MiniMapState.cpp	/^MiniMapState::~MiniMapState()$/;"	f	class:OpenXcom::MiniMapState
~MissionDetectedState	Geoscape/MissionDetectedState.cpp	/^MissionDetectedState::~MissionDetectedState()$/;"	f	class:OpenXcom::MissionDetectedState
~MissionSite	Savegame/MissionSite.cpp	/^MissionSite::~MissionSite()$/;"	f	class:OpenXcom::MissionSite
~MissionStatistics	Savegame/MissionStatistics.h	/^	~MissionStatistics() { }$/;"	f	struct:OpenXcom::MissionStatistics
~Mod	Mod/Mod.cpp	/^Mod::~Mod()$/;"	f	class:OpenXcom::Mod
~ModConfirmExtendedState	Menu/ModConfirmExtendedState.cpp	/^	ModConfirmExtendedState::~ModConfirmExtendedState()$/;"	f	class:OpenXcom::ModConfirmExtendedState
~ModListState	Menu/ModListState.cpp	/^ModListState::~ModListState()$/;"	f	class:OpenXcom::ModListState
~MonthlyCostsState	Basescape/MonthlyCostsState.cpp	/^MonthlyCostsState::~MonthlyCostsState()$/;"	f	class:OpenXcom::MonthlyCostsState
~MonthlyReportState	Geoscape/MonthlyReportState.cpp	/^MonthlyReportState::~MonthlyReportState()$/;"	f	class:OpenXcom::MonthlyReportState
~MovingTarget	Savegame/MovingTarget.cpp	/^MovingTarget::~MovingTarget()$/;"	f	class:OpenXcom::MovingTarget
~MultipleTargetsState	Geoscape/MultipleTargetsState.cpp	/^MultipleTargetsState::~MultipleTargetsState()$/;"	f	class:OpenXcom::MultipleTargetsState
~Music	Engine/Music.cpp	/^Music::~Music()$/;"	f	class:OpenXcom::Music
~NewBattleState	Menu/NewBattleState.cpp	/^NewBattleState::~NewBattleState()$/;"	f	class:OpenXcom::NewBattleState
~NewGameState	Menu/NewGameState.cpp	/^NewGameState::~NewGameState()$/;"	f	class:OpenXcom::NewGameState
~NextTurnState	Battlescape/NextTurnState.cpp	/^NextTurnState::~NextTurnState()$/;"	f	class:OpenXcom::NextTurnState
~Node	Savegame/Node.cpp	/^Node::~Node()$/;"	f	class:OpenXcom::Node
~NotesState	Menu/NotesState.cpp	/^NotesState::~NotesState()$/;"	f	class:OpenXcom::NotesState
~NumberText	Interface/NumberText.cpp	/^NumberText::~NumberText()$/;"	f	class:OpenXcom::NumberText
~OpenGL	Engine/OpenGL.cpp	/^  OpenGL::~OpenGL()$/;"	f	class:OpenXcom::OpenGL
~OptionsAdvancedState	Menu/OptionsAdvancedState.cpp	/^OptionsAdvancedState::~OptionsAdvancedState()$/;"	f	class:OpenXcom::OptionsAdvancedState
~OptionsAudioState	Menu/OptionsAudioState.cpp	/^OptionsAudioState::~OptionsAudioState()$/;"	f	class:OpenXcom::OptionsAudioState
~OptionsBaseState	Menu/OptionsBaseState.cpp	/^OptionsBaseState::~OptionsBaseState()$/;"	f	class:OpenXcom::OptionsBaseState
~OptionsBattlescapeState	Menu/OptionsBattlescapeState.cpp	/^OptionsBattlescapeState::~OptionsBattlescapeState()$/;"	f	class:OpenXcom::OptionsBattlescapeState
~OptionsConfirmState	Menu/OptionsConfirmState.cpp	/^OptionsConfirmState::~OptionsConfirmState()$/;"	f	class:OpenXcom::OptionsConfirmState
~OptionsControlsState	Menu/OptionsControlsState.cpp	/^OptionsControlsState::~OptionsControlsState()$/;"	f	class:OpenXcom::OptionsControlsState
~OptionsDefaultsState	Menu/OptionsDefaultsState.cpp	/^OptionsDefaultsState::~OptionsDefaultsState()$/;"	f	class:OpenXcom::OptionsDefaultsState
~OptionsFoldersState	Menu/OptionsFoldersState.cpp	/^OptionsFoldersState::~OptionsFoldersState()$/;"	f	class:OpenXcom::OptionsFoldersState
~OptionsGeoscapeState	Menu/OptionsGeoscapeState.cpp	/^OptionsGeoscapeState::~OptionsGeoscapeState()$/;"	f	class:OpenXcom::OptionsGeoscapeState
~OptionsNoAudioState	Menu/OptionsNoAudioState.cpp	/^OptionsNoAudioState::~OptionsNoAudioState()$/;"	f	class:OpenXcom::OptionsNoAudioState
~OptionsVideoState	Menu/OptionsVideoState.cpp	/^OptionsVideoState::~OptionsVideoState()$/;"	f	class:OpenXcom::OptionsVideoState
~Palette	Engine/Palette.cpp	/^Palette::~Palette()$/;"	f	class:OpenXcom::Palette
~Pathfinding	Battlescape/Pathfinding.cpp	/^Pathfinding::~Pathfinding()$/;"	f	class:OpenXcom::Pathfinding
~PathfindingNode	Battlescape/PathfindingNode.cpp	/^PathfindingNode::~PathfindingNode()$/;"	f	class:OpenXcom::PathfindingNode
~PathfindingOpenSet	Battlescape/PathfindingOpenSet.cpp	/^PathfindingOpenSet::~PathfindingOpenSet()$/;"	f	class:OpenXcom::PathfindingOpenSet
~PauseState	Menu/PauseState.cpp	/^PauseState::~PauseState()$/;"	f	class:OpenXcom::PauseState
~PlaceFacilityState	Basescape/PlaceFacilityState.cpp	/^PlaceFacilityState::~PlaceFacilityState()$/;"	f	class:OpenXcom::PlaceFacilityState
~PlaceLiftState	Basescape/PlaceLiftState.cpp	/^PlaceLiftState::~PlaceLiftState()$/;"	f	class:OpenXcom::PlaceLiftState
~PlaceStartFacilityState	Basescape/PlaceStartFacilityState.cpp	/^PlaceStartFacilityState::~PlaceStartFacilityState()$/;"	f	class:OpenXcom::PlaceStartFacilityState
~Polygon	Mod/Polygon.cpp	/^Polygon::~Polygon()$/;"	f	class:OpenXcom::Polygon
~Polyline	Mod/Polyline.cpp	/^Polyline::~Polyline()$/;"	f	class:OpenXcom::Polyline
~PrimeGrenadeState	Battlescape/PrimeGrenadeState.cpp	/^PrimeGrenadeState::~PrimeGrenadeState()$/;"	f	class:OpenXcom::PrimeGrenadeState
~ProductionCompleteState	Geoscape/ProductionCompleteState.cpp	/^ProductionCompleteState::~ProductionCompleteState()$/;"	f	class:OpenXcom::ProductionCompleteState
~Projectile	Battlescape/Projectile.cpp	/^Projectile::~Projectile()$/;"	f	class:OpenXcom::Projectile
~ProjectileFlyBState	Battlescape/ProjectileFlyBState.cpp	/^ProjectileFlyBState::~ProjectileFlyBState()$/;"	f	class:OpenXcom::ProjectileFlyBState
~PromotionsState	Battlescape/PromotionsState.cpp	/^PromotionsState::~PromotionsState()$/;"	f	class:OpenXcom::PromotionsState
~PsiAttackBState	Battlescape/PsiAttackBState.cpp	/^PsiAttackBState::~PsiAttackBState()$/;"	f	class:OpenXcom::PsiAttackBState
~PsiTrainingState	Geoscape/PsiTrainingState.cpp	/^PsiTrainingState::~PsiTrainingState()$/;"	f	class:OpenXcom::PsiTrainingState
~PurchaseState	Basescape/PurchaseState.cpp	/^PurchaseState::~PurchaseState()$/;"	f	class:OpenXcom::PurchaseState
~Region	Savegame/Region.cpp	/^Region::~Region()$/;"	f	class:OpenXcom::Region
~ResearchInfoState	Basescape/ResearchInfoState.cpp	/^ResearchInfoState::~ResearchInfoState()$/;"	f	class:OpenXcom::ResearchInfoState
~ResearchState	Basescape/ResearchState.cpp	/^ResearchState::~ResearchState()$/;"	f	class:OpenXcom::ResearchState
~RuleAlienMission	Mod/RuleAlienMission.cpp	/^RuleAlienMission::~RuleAlienMission()$/;"	f	class:OpenXcom::RuleAlienMission
~RuleArcScript	Mod/RuleArcScript.cpp	/^RuleArcScript::~RuleArcScript()$/;"	f	class:OpenXcom::RuleArcScript
~RuleBaseFacility	Mod/RuleBaseFacility.cpp	/^RuleBaseFacility::~RuleBaseFacility()$/;"	f	class:OpenXcom::RuleBaseFacility
~RuleCommendations	Mod/RuleCommendations.cpp	/^RuleCommendations::~RuleCommendations()$/;"	f	class:OpenXcom::RuleCommendations
~RuleConverter	Mod/RuleConverter.cpp	/^RuleConverter::~RuleConverter()$/;"	f	class:OpenXcom::RuleConverter
~RuleCountry	Mod/RuleCountry.cpp	/^RuleCountry::~RuleCountry()$/;"	f	class:OpenXcom::RuleCountry
~RuleCraft	Mod/RuleCraft.cpp	/^RuleCraft::~RuleCraft()$/;"	f	class:OpenXcom::RuleCraft
~RuleCraftWeapon	Mod/RuleCraftWeapon.cpp	/^RuleCraftWeapon::~RuleCraftWeapon()$/;"	f	class:OpenXcom::RuleCraftWeapon
~RuleEnviroEffects	Mod/RuleEnviroEffects.cpp	/^RuleEnviroEffects::~RuleEnviroEffects()$/;"	f	class:OpenXcom::RuleEnviroEffects
~RuleEventScript	Mod/RuleEventScript.cpp	/^RuleEventScript::~RuleEventScript()$/;"	f	class:OpenXcom::RuleEventScript
~RuleGlobe	Mod/RuleGlobe.cpp	/^RuleGlobe::~RuleGlobe()$/;"	f	class:OpenXcom::RuleGlobe
~RuleInterface	Mod/RuleInterface.cpp	/^RuleInterface::~RuleInterface()$/;"	f	class:OpenXcom::RuleInterface
~RuleInventory	Mod/RuleInventory.cpp	/^RuleInventory::~RuleInventory()$/;"	f	class:OpenXcom::RuleInventory
~RuleItem	Mod/RuleItem.cpp	/^RuleItem::~RuleItem()$/;"	f	class:OpenXcom::RuleItem
~RuleItemCategory	Mod/RuleItemCategory.cpp	/^RuleItemCategory::~RuleItemCategory()$/;"	f	class:OpenXcom::RuleItemCategory
~RuleMissionScript	Mod/RuleMissionScript.cpp	/^RuleMissionScript::~RuleMissionScript()$/;"	f	class:OpenXcom::RuleMissionScript
~RuleMusic	Mod/RuleMusic.cpp	/^RuleMusic::~RuleMusic()$/;"	f	class:OpenXcom::RuleMusic
~RuleRegion	Mod/RuleRegion.cpp	/^RuleRegion::~RuleRegion()$/;"	f	class:OpenXcom::RuleRegion
~RuleSoldier	Mod/RuleSoldier.cpp	/^RuleSoldier::~RuleSoldier()$/;"	f	class:OpenXcom::RuleSoldier
~RuleStartingCondition	Mod/RuleStartingCondition.cpp	/^RuleStartingCondition::~RuleStartingCondition()$/;"	f	class:OpenXcom::RuleStartingCondition
~RuleTerrain	Mod/RuleTerrain.cpp	/^RuleTerrain::~RuleTerrain()$/;"	f	class:OpenXcom::RuleTerrain
~RuleUfo	Mod/RuleUfo.cpp	/^RuleUfo::~RuleUfo()$/;"	f	class:OpenXcom::RuleUfo
~RuleVideo	Mod/RuleVideo.cpp	/^RuleVideo::~RuleVideo()$/;"	f	class:OpenXcom::RuleVideo
~SackSoldierState	Basescape/SackSoldierState.cpp	/^SackSoldierState::~SackSoldierState()$/;"	f	class:OpenXcom::SackSoldierState
~SaveConverter	Savegame/SaveConverter.cpp	/^SaveConverter::~SaveConverter()$/;"	f	class:OpenXcom::SaveConverter
~SaveGameState	Menu/SaveGameState.cpp	/^SaveGameState::~SaveGameState()$/;"	f	class:OpenXcom::SaveGameState
~SavedBattleGame	Savegame/SavedBattleGame.cpp	/^SavedBattleGame::~SavedBattleGame()$/;"	f	class:OpenXcom::SavedBattleGame
~SavedGame	Savegame/SavedGame.cpp	/^SavedGame::~SavedGame()$/;"	f	class:OpenXcom::SavedGame
~ScannerState	Battlescape/ScannerState.cpp	/^ScannerState::~ScannerState()$/;"	f	class:OpenXcom::ScannerState
~Screen	Engine/Screen.cpp	/^Screen::~Screen()$/;"	f	class:OpenXcom::Screen
~ScriptGlobal	Engine/Script.cpp	/^ScriptGlobal::~ScriptGlobal()$/;"	f	class:OpenXcom::ScriptGlobal
~ScriptParserBase	Engine/Script.cpp	/^ScriptParserBase::~ScriptParserBase()$/;"	f	class:OpenXcom::ScriptParserBase
~ScrollBar	Interface/ScrollBar.cpp	/^ScrollBar::~ScrollBar()$/;"	f	class:OpenXcom::ScrollBar
~SelectDestinationState	Geoscape/SelectDestinationState.cpp	/^SelectDestinationState::~SelectDestinationState()$/;"	f	class:OpenXcom::SelectDestinationState
~SelectMusicTrackState	Geoscape/SelectMusicTrackState.cpp	/^SelectMusicTrackState::~SelectMusicTrackState()$/;"	f	class:OpenXcom::SelectMusicTrackState
~SelectStartFacilityState	Basescape/SelectStartFacilityState.cpp	/^SelectStartFacilityState::~SelectStartFacilityState()$/;"	f	class:OpenXcom::SelectStartFacilityState
~SellState	Basescape/SellState.cpp	/^SellState::~SellState()$/;"	f	class:OpenXcom::SellState
~SetWindowedRootState	Menu/SetWindowedRootState.cpp	/^SetWindowedRootState::~SetWindowedRootState()$/;"	f	class:OpenXcom::SetWindowedRootState
~SkillMenuState	Battlescape/SkillMenuState.cpp	/^SkillMenuState::~SkillMenuState()$/;"	f	class:OpenXcom::SkillMenuState
~Slider	Interface/Slider.cpp	/^Slider::~Slider()$/;"	f	class:OpenXcom::Slider
~SlideshowState	Menu/SlideshowState.cpp	/^SlideshowState::~SlideshowState()$/;"	f	class:OpenXcom::SlideshowState
~Soldier	Savegame/Soldier.cpp	/^Soldier::~Soldier()$/;"	f	class:OpenXcom::Soldier
~SoldierArmorState	Basescape/SoldierArmorState.cpp	/^SoldierArmorState::~SoldierArmorState()$/;"	f	class:OpenXcom::SoldierArmorState
~SoldierAvatar	Savegame/SoldierAvatar.cpp	/^SoldierAvatar::~SoldierAvatar()$/;"	f	class:OpenXcom::SoldierAvatar
~SoldierAvatarState	Basescape/SoldierAvatarState.cpp	/^SoldierAvatarState::~SoldierAvatarState()$/;"	f	class:OpenXcom::SoldierAvatarState
~SoldierBonusState	Basescape/SoldierBonusState.cpp	/^SoldierBonusState::~SoldierBonusState()$/;"	f	class:OpenXcom::SoldierBonusState
~SoldierCommendations	Savegame/SoldierDiary.cpp	/^SoldierCommendations::~SoldierCommendations()$/;"	f	class:OpenXcom::SoldierCommendations
~SoldierDeath	Savegame/SoldierDeath.cpp	/^SoldierDeath::~SoldierDeath()$/;"	f	class:OpenXcom::SoldierDeath
~SoldierDiary	Savegame/SoldierDiary.cpp	/^SoldierDiary::~SoldierDiary()$/;"	f	class:OpenXcom::SoldierDiary
~SoldierDiaryMissionState	Basescape/SoldierDiaryMissionState.cpp	/^SoldierDiaryMissionState::~SoldierDiaryMissionState()$/;"	f	class:OpenXcom::SoldierDiaryMissionState
~SoldierDiaryOverviewState	Basescape/SoldierDiaryOverviewState.cpp	/^SoldierDiaryOverviewState::~SoldierDiaryOverviewState()$/;"	f	class:OpenXcom::SoldierDiaryOverviewState
~SoldierDiaryPerformanceState	Basescape/SoldierDiaryPerformanceState.cpp	/^SoldierDiaryPerformanceState::~SoldierDiaryPerformanceState()$/;"	f	class:OpenXcom::SoldierDiaryPerformanceState
~SoldierInfoState	Basescape/SoldierInfoState.cpp	/^SoldierInfoState::~SoldierInfoState()$/;"	f	class:OpenXcom::SoldierInfoState
~SoldierMemorialState	Basescape/SoldierMemorialState.cpp	/^SoldierMemorialState::~SoldierMemorialState()$/;"	f	class:OpenXcom::SoldierMemorialState
~SoldierNamePool	Mod/SoldierNamePool.cpp	/^SoldierNamePool::~SoldierNamePool()$/;"	f	class:OpenXcom::SoldierNamePool
~SoldierTransformationListState	Basescape/SoldierTransformationListState.cpp	/^SoldierTransformationListState::~SoldierTransformationListState()$/;"	f	class:OpenXcom::SoldierTransformationListState
~SoldierTransformationState	Basescape/SoldierTransformationState.cpp	/^SoldierTransformationState::~SoldierTransformationState()$/;"	f	class:OpenXcom::SoldierTransformationState
~SoldiersState	Basescape/SoldiersState.cpp	/^SoldiersState::~SoldiersState()$/;"	f	class:OpenXcom::SoldiersState
~SoundDefinition	Mod/SoundDefinition.cpp	/^SoundDefinition::~SoundDefinition()$/;"	f	class:OpenXcom::SoundDefinition
~StartState	Menu/StartState.cpp	/^StartState::~StartState()$/;"	f	class:OpenXcom::StartState
~StatString	Mod/StatString.cpp	/^StatString::~StatString()$/;"	f	class:OpenXcom::StatString
~StatStringCondition	Mod/StatStringCondition.cpp	/^StatStringCondition::~StatStringCondition()$/;"	f	class:OpenXcom::StatStringCondition
~State	Engine/State.cpp	/^State::~State()$/;"	f	class:OpenXcom::State
~State	lodepng.cpp	/^State::~State()$/;"	f	class:lodepng::State
~StatisticsState	Menu/StatisticsState.cpp	/^StatisticsState::~StatisticsState()$/;"	f	class:OpenXcom::StatisticsState
~StatsForNerdsState	Ufopaedia/StatsForNerdsState.cpp	/^StatsForNerdsState::~StatsForNerdsState()$/;"	f	class:OpenXcom::StatsForNerdsState
~StoresState	Basescape/StoresState.cpp	/^StoresState::~StoresState()$/;"	f	class:OpenXcom::StoresState
~Surface	Engine/Surface.cpp	/^Surface::~Surface()$/;"	f	class:OpenXcom::Surface
~SurfaceSet	Engine/SurfaceSet.cpp	/^SurfaceSet::~SurfaceSet()$/;"	f	class:OpenXcom::SurfaceSet
~Target	Savegame/Target.cpp	/^Target::~Target()$/;"	f	class:OpenXcom::Target
~TargetInfoState	Geoscape/TargetInfoState.cpp	/^TargetInfoState::~TargetInfoState()$/;"	f	class:OpenXcom::TargetInfoState
~TechTreeSelectState	Basescape/TechTreeSelectState.cpp	/^TechTreeSelectState::~TechTreeSelectState()$/;"	f	class:OpenXcom::TechTreeSelectState
~TechTreeViewerState	Basescape/TechTreeViewerState.cpp	/^TechTreeViewerState::~TechTreeViewerState()$/;"	f	class:OpenXcom::TechTreeViewerState
~TestPaletteState	Menu/TestPaletteState.cpp	/^TestPaletteState::~TestPaletteState()$/;"	f	class:OpenXcom::TestPaletteState
~TestState	Menu/TestState.cpp	/^TestState::~TestState()$/;"	f	class:OpenXcom::TestState
~Text	Interface/Text.cpp	/^Text::~Text()$/;"	f	class:OpenXcom::Text
~TextButton	Interface/TextButton.cpp	/^TextButton::~TextButton()$/;"	f	class:OpenXcom::TextButton
~TextEdit	Interface/TextEdit.cpp	/^TextEdit::~TextEdit()$/;"	f	class:OpenXcom::TextEdit
~TextList	Interface/TextList.cpp	/^TextList::~TextList()$/;"	f	class:OpenXcom::TextList
~Texture	Mod/Texture.cpp	/^Texture::~Texture()$/;"	f	class:OpenXcom::Texture
~Tile	Savegame/Tile.cpp	/^Tile::~Tile()$/;"	f	class:OpenXcom::Tile
~TileEngine	Battlescape/TileEngine.cpp	/^TileEngine::~TileEngine()$/;"	f	class:OpenXcom::TileEngine
~Timer	Engine/Timer.cpp	/^Timer::~Timer()$/;"	f	class:OpenXcom::Timer
~ToggleTextButton	Interface/ToggleTextButton.cpp	/^ToggleTextButton::~ToggleTextButton(void)$/;"	f	class:OpenXcom::ToggleTextButton
~TrainingState	Geoscape/TrainingState.cpp	/^TrainingState::~TrainingState()$/;"	f	class:OpenXcom::TrainingState
~Transfer	Savegame/Transfer.cpp	/^Transfer::~Transfer()$/;"	f	class:OpenXcom::Transfer
~TransferBaseState	Basescape/TransferBaseState.cpp	/^TransferBaseState::~TransferBaseState()$/;"	f	class:OpenXcom::TransferBaseState
~TransferConfirmState	Basescape/TransferConfirmState.cpp	/^TransferConfirmState::~TransferConfirmState()$/;"	f	class:OpenXcom::TransferConfirmState
~TransferItemsState	Basescape/TransferItemsState.cpp	/^TransferItemsState::~TransferItemsState()$/;"	f	class:OpenXcom::TransferItemsState
~TransfersState	Basescape/TransfersState.cpp	/^TransfersState::~TransfersState()$/;"	f	class:OpenXcom::TransfersState
~Ufo	Savegame/Ufo.cpp	/^Ufo::~Ufo()$/;"	f	class:OpenXcom::Ufo
~UfoDetectedState	Geoscape/UfoDetectedState.cpp	/^UfoDetectedState::~UfoDetectedState()$/;"	f	class:OpenXcom::UfoDetectedState
~UfoLostState	Geoscape/UfoLostState.cpp	/^UfoLostState::~UfoLostState()$/;"	f	class:OpenXcom::UfoLostState
~UfoTrackerState	Geoscape/UfoTrackerState.cpp	/^UfoTrackerState::~UfoTrackerState()$/;"	f	class:OpenXcom::UfoTrackerState
~UfopaediaSelectState	Ufopaedia/UfopaediaSelectState.cpp	/^	UfopaediaSelectState::~UfopaediaSelectState()$/;"	f	class:OpenXcom::UfopaediaSelectState
~UfopaediaStartState	Ufopaedia/UfopaediaStartState.cpp	/^	UfopaediaStartState::~UfopaediaStartState()$/;"	f	class:OpenXcom::UfopaediaStartState
~Unit	Mod/Unit.cpp	/^Unit::~Unit()$/;"	f	class:OpenXcom::Unit
~UnitDieBState	Battlescape/UnitDieBState.cpp	/^UnitDieBState::~UnitDieBState()$/;"	f	class:OpenXcom::UnitDieBState
~UnitFallBState	Battlescape/UnitFallBState.cpp	/^UnitFallBState::~UnitFallBState()$/;"	f	class:OpenXcom::UnitFallBState
~UnitInfoState	Battlescape/UnitInfoState.cpp	/^UnitInfoState::~UnitInfoState()$/;"	f	class:OpenXcom::UnitInfoState
~UnitPanicBState	Battlescape/UnitPanicBState.cpp	/^UnitPanicBState::~UnitPanicBState()$/;"	f	class:OpenXcom::UnitPanicBState
~UnitSprite	Battlescape/UnitSprite.cpp	/^UnitSprite::~UnitSprite()$/;"	f	class:OpenXcom::UnitSprite
~UnitTurnBState	Battlescape/UnitTurnBState.cpp	/^UnitTurnBState::~UnitTurnBState()$/;"	f	class:OpenXcom::UnitTurnBState
~UnitWalkBState	Battlescape/UnitWalkBState.cpp	/^UnitWalkBState::~UnitWalkBState()$/;"	f	class:OpenXcom::UnitWalkBState
~VFSLayer	Engine/FileMap.cpp	/^	~VFSLayer() { }$/;"	f	struct:OpenXcom::FileMap::VFSLayer
~Vehicle	Savegame/Vehicle.cpp	/^Vehicle::~Vehicle()$/;"	f	class:OpenXcom::Vehicle
~VideoState	Menu/VideoState.cpp	/^VideoState::~VideoState()$/;"	f	class:OpenXcom::VideoState
~WarningMessage	Battlescape/WarningMessage.cpp	/^WarningMessage::~WarningMessage()$/;"	f	class:OpenXcom::WarningMessage
~Waypoint	Savegame/Waypoint.cpp	/^Waypoint::~Waypoint()$/;"	f	class:OpenXcom::Waypoint
~Window	Interface/Window.cpp	/^Window::~Window()$/;"	f	class:OpenXcom::Window
